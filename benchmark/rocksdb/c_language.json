[
    {
        "hash": "0c7e5bd2f0d73d96f620f912a4569ca5375d1786",
        "author": "Sean Ovens",
        "date": "2025-03-03T21:25:29-08:00",
        "message": "Shrink size of HashSkipList buckets from 56B to 48B (#13424)\n\nSummary:\nPrevious order of fields in SkipList:\n\n`const uint16_t kMaxHeight_;  // 2B`\n`const uint16_t kBranching_;  // 2B`\n`const uint32_t kScaledInverseBranching_;  // 4B`\n`Comparator const compare_;  // 8B`\n`Allocator* const allocator_;  // 8B`\n`Node* const head_;  // 8B`\n`std::atomic<int> max_height_;  // 4B`\n`// 4B padding added automatically for alignment`\n`Node** prev_;  // 8B`\n`int32_t prev_height_;  // 4B`\n`// 4B padding added automatically for alignment`\n\n= 56B in total. By swapping prev_ and prev_height_, we get the following:\n\n`const uint16_t kMaxHeight_;  // 2B`\n`const uint16_t kBranching_;  // 2B`\n`const uint32_t kScaledInverseBranching_;  // 4B`\n`Comparator const compare_;  // 8B`\n`Allocator* const allocator_;  // 8B`\n`Node* const head_;  // 8B`\n`std::atomic<int> max_height_;  // 4B`\n`int32_t prev_height_;  // 4B`\n`Node** prev_;  // 8B`\n\n= 48B in total. So this change saves 8B per SkipList object. When allocated using AllocateAligned (as is the case for the [hash skiplist](https://github.com/facebook/rocksdb/blob/main/memtable/hash_skiplist_rep.cc#L243)) and assuming alignof(std::max_align_t) = 16, this change saves an additional 8B per SkipList object (so 16B in total).\n\nNote: this does not affect the \"skiplist\" memtable, which internally uses InlineSkipList\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13424\n\nReviewed By: cbi42\n\nDifferential Revision: D70423252\n\nPulled By: pdillinger\n\nfbshipit-source-id: 450dcc7f0e9e86cd3481f6930e83eea5fef78b97",
        "modified_files_count": 1,
        "modified_files": [
            "memtable/skiplist.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0c7e5bd2f0d73d96f620f912a4569ca5375d1786"
    },
    {
        "hash": "1d6c33d2a59f6f9dd23e7db61618a0f0aa3c1600",
        "author": "Nicolas De Carli",
        "date": "2025-03-02T08:05:21-08:00",
        "message": "Enable hardware accelerated crc32c for ARM on Linux (#13432)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13432\n\nWe've noticed the default CRC32c function gets executed when running on aarch64 cpus within our servers\n\nIssue is that ROCKSDB_AUXV_GETAUXVAL_PRESENT evaluates to false\n\nThis fix allows the usage of hardware-accelerated crc32 within our fleet\n\nReviewed By: jaykorean\n\nDifferential Revision: D70423483\n\nfbshipit-source-id: 601da3fbf156e3e40695eb76ee5d37f67f83d427",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c_arm64.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1d6c33d2a59f6f9dd23e7db61618a0f0aa3c1600"
    },
    {
        "hash": "ebaeb036486053aeb86a721f5a3973981e2f05e4",
        "author": "Peter Dillinger",
        "date": "2025-02-27T11:37:56-08:00",
        "message": "Write failure can be permanently fatal and break WriteBatch atomicity (#13428)\n\nSummary:\nThis adds a test that attempts DeleteRange() with PlainTable (not supported) and shows that it not only puts the DB in failed write mode, it (a) breaks WriteBatch atomicity for readers, because they can see just part of a failed WriteBatch, and (b) makes the DB not recoverable (without manual intervention) if using WAL.\n\nNote: WriteBatch atomicity is not clearly documented but indicated at the top of write_batch.h and the wiki page for Transactions, even without Transactions.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13428\n\nTest Plan: this is the test\n\nReviewed By: anand1976\n\nDifferential Revision: D70332226\n\nPulled By: pdillinger\n\nfbshipit-source-id: 67bc4de68833a80578e48baa9d3a4f23f1600f3c",
        "modified_files_count": 1,
        "modified_files": [
            "db/plain_table_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ebaeb036486053aeb86a721f5a3973981e2f05e4"
    },
    {
        "hash": "d1f383b8ebd0e2ea746cbe538b29ca1a7576e9cc",
        "author": "Jay Huh",
        "date": "2025-02-26T15:31:47-08:00",
        "message": "Add Logging for debugging InputFileCheck Failure (#13427)\n\nSummary:\nAdd detailed log for debugging purpose\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13427\n\nTest Plan: CI\n\nReviewed By: cbi42, hx235\n\nDifferential Revision: D70274613\n\nPulled By: jaykorean\n\nfbshipit-source-id: de4bc61853136b923aa786717e7979be8886b9bd",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_secondary.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d1f383b8ebd0e2ea746cbe538b29ca1a7576e9cc"
    },
    {
        "hash": "4c975a7c22ce5f5bb20bdafa641b4c5220b6ce8d",
        "author": "Changyu Bi",
        "date": "2025-02-21T12:55:29-08:00",
        "message": "Disable flaky unit test `RoundRobinSubcompactionsAgainstPressureToken` (#13416)\n\nSummary:\nThe test is [flaky](https://github.com/facebook/rocksdb/actions/runs/13417174378/job/37480755623?fbclid=IwZXh0bgNhZW0CMTEAAR2pj4E1ua6zMxz4FxnPAPLIz011t1ddjaWPbmFlldfSG7dZGjWGVy-mDkg_aem_40kU2iCmcN93WsmzLZxGsA) and my previous [fix](https://github.com/facebook/rocksdb/pull/13347) did not seem to work. It's likely a test set up issue and disable the test for now since RoundRobin compaction style is not used to reduce some test failure noise.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13416\n\nTest Plan: CI\n\nReviewed By: hx235\n\nDifferential Revision: D70002097\n\nPulled By: cbi42\n\nfbshipit-source-id: afe0f56363501dab2c9dc297bfbe0dff0ac6aeb3",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4c975a7c22ce5f5bb20bdafa641b4c5220b6ce8d"
    },
    {
        "hash": "5139ff5c295ffb4b5d26073aee76239e4546cc59",
        "author": "Maciej Szeszko",
        "date": "2025-02-21T12:42:14-08:00",
        "message": "Conditional check reordering (#13415)\n\nSummary:\nThis change is addressing a valid concern raised in https://github.com/facebook/rocksdb/pull/13408#discussion_r1966000661.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13415\n\nTest Plan: Existing test collateral.\n\nReviewed By: cbi42\n\nDifferential Revision: D69999071\n\nPulled By: mszeszko-meta\n\nfbshipit-source-id: 5ebb195b2b83701e06c33bfcb19c57d9ac1c1dc6",
        "modified_files_count": 1,
        "modified_files": [
            "db/arena_wrapped_db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5139ff5c295ffb4b5d26073aee76239e4546cc59"
    },
    {
        "hash": "836e88ab7a595929ac2b8331429e821a820e729d",
        "author": "Peter Dillinger",
        "date": "2025-02-20T10:16:12-08:00",
        "message": "Add test for memtable bloom filter with WriteBufferManager (#13398)\n\nSummary:\n... to ensure proper cache charging. However, this is a somewhat hazardous combination if there are many CFs and could be the target of future work.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13398\n\nTest Plan: this is the test\n\nReviewed By: hx235\n\nDifferential Revision: D69619977\n\nPulled By: pdillinger\n\nfbshipit-source-id: 9841768584e4688d8fdd0258f3ba9608b67408e5",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bloom_filter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/836e88ab7a595929ac2b8331429e821a820e729d"
    },
    {
        "hash": "6aacec07dce8daa7d5f6662e2fc58f0df0574d28",
        "author": "Hui Xiao",
        "date": "2025-02-18T09:37:03-08:00",
        "message": "Call Clean() on JobContext before destruction in UT (#13406)\n\nSummary:\n**Context/Summary:**\nIt's [documented (https://github.com/facebook/rocksdb/blob/affcad0cc997958e93bc560202ed107c80d00395/db/job_context.h#L230) that `// For non-empty JobContext Clean() has to be called at least once before before destruction`. This is violated in a UT accidentally so causing the assertion failure `assert(logs_to_free.size() == 0);` in` ~JobContext`. This PR is to fix it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13406\n\nTest Plan: Monitor for future UT assertion failure in `TEST_F(DBWALTest, FullPurgePreservesRecycledLog) `\n\nReviewed By: cbi42\n\nDifferential Revision: D69759725\n\nPulled By: hx235\n\nfbshipit-source-id: dd1617b370a2c69daba657287dcf258542f92ef5",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_wal_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6aacec07dce8daa7d5f6662e2fc58f0df0574d28"
    },
    {
        "hash": "61ee80faa01828d33bf218d06b981da60d401c0b",
        "author": "Abhishek Chanda",
        "date": "2025-02-05T13:41:51-08:00",
        "message": "Update error message for allowing concurrent memtable writes (#13364)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/13364\n\nReviewed By: archang19\n\nDifferential Revision: D69156065\n\nPulled By: cbi42\n\nfbshipit-source-id: 5393f439a8eee5009aa63d1be683a3dfd9419272",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/61ee80faa01828d33bf218d06b981da60d401c0b"
    },
    {
        "hash": "864964b008e96dfe69041f487c8a47cea1ab61b0",
        "author": "Hui Xiao",
        "date": "2025-02-04T16:55:09-08:00",
        "message": "Return injected error when injecting empty result and corrupted bytes read error (#13369)\n\nSummary:\n**Context/Summary:**\n\narchang19 found the place in code where no injected error status is returned on effectively injected error (empty result or corrupted bytes). I can't find a good argument for doing so. In these cases where such empty result and corrupted result is not expected, the file system should return error (< 0). Our fault injection framework should align with that to simulate fault returned by file system.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13369\n\nTest Plan: Monitor stress test\n\nReviewed By: archang19\n\nDifferential Revision: D69136015\n\nPulled By: hx235\n\nfbshipit-source-id: 6ee7a7bd5e0aa19837e4dfd73817d4a9d5af76f9",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/fault_injection_fs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/864964b008e96dfe69041f487c8a47cea1ab61b0"
    },
    {
        "hash": "7774a4de17cebf74de7898a46d3ece7287e2c6f1",
        "author": "Andrew Chang",
        "date": "2025-02-04T12:45:09-08:00",
        "message": "Disable and re-enable error injection before secondary db verification (#13368)\n\nSummary:\nThe crash tests are failing during secondary database verification due to a \"truncated block read\" error.\n\nhttps://github.com/facebook/rocksdb/issues/13366 attempted to resolve the issue by checking for injected errors. However, that did not work.\n\nIt turns out that sometimes faults are injected yet the return status is still \"OK.\"\n\nSee https://github.com/facebook/rocksdb/blob/main/utilities/fault_injection_fs.cc#L1407-L1414 for an example:\n```cpp\n    } else if (Random::GetTLSInstance()->OneIn(8)) {\n      assert(result);\n      // For a small chance, set the failure to status but turn the\n      // result to be empty, which is supposed to be caught for a check.\n      *result = Slice();\n      msg << \"empty result\";\n      ctx->message = msg.str();\n      ret_fault_injected = true;\n```\n\nMy hypothesis is that this particular fault injection is the root cause of the \"truncated block read\" error.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13368\n\nTest Plan: Hopefully the recurring crash tests start passing consistently for secondary db verification\n\nReviewed By: hx235\n\nDifferential Revision: D69132024\n\nPulled By: archang19\n\nfbshipit-source-id: 941406165a2fd306f10048614457261cda99d762",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7774a4de17cebf74de7898a46d3ece7287e2c6f1"
    },
    {
        "hash": "1341c0c670a8134909a797587b97cfe4d5bf6645",
        "author": "Andrew Chang",
        "date": "2025-02-03T11:28:52-08:00",
        "message": "Skip secondary verification on injected read error (#13366)\n\nSummary:\nhttps://github.com/facebook/rocksdb/issues/13281 added secondary database verification to the crash tests.\n\nI am seeing failures in the crash test that trace back to these two code sections:\n\n1. https://github.com/facebook/rocksdb/blob/main/db_stress_tool/no_batched_ops_stress.cc#L2969-L2975\n```cpp\nVerificationAbort(\n          shared,\n          msg_prefix + \"Non-OK status\" + read_u64ts.str() + s.ToString(), cf,\n          key, \"\", Slice(expected_value_data, expected_value_data_size));\n```\n2. https://github.com/facebook/rocksdb/blob/main/table/block_fetcher.cc#L327-L331\n```cpp\n      io_status_ = IOStatus::Corruption(\n          \"truncated block read from \" + file_->file_name() + \" offset \" +\n          std::to_string(handle_.offset()) + \", expected \" +\n          std::to_string(block_size_with_trailer_) + \" bytes, got \" +\n          std::to_string(slice_.size()));\n```\n\nThe error messages look like\n```\nSecondary get verificationNon-OK statusCorruption: truncated block read from /dev/shm/rocksdb_test/rocksdb_crashtest_blackbox/011887.sst offset 11780096, expected 16274 bytes, got 0\n```\n\nAs you can see, the issue is not that the values of the secondary DB differ from what we expect. Rather, the `get` request itself is returning a non-OK status. I looked at the test configurations for the failed test runs, and I saw that both of them enabled fault injections (e.g. `read_fault_one_in`).\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13366\n\nTest Plan:\nBefore merging: `python3 tools/db_crashtest.py --simple blackbox --test_secondary=1`\nAfter merging: monitor for crash test failures\n\nReviewed By: jaykorean\n\nDifferential Revision: D69059138\n\nPulled By: archang19\n\nfbshipit-source-id: a9c07d80381f52bdff220b0db3302748ebccd96c",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1341c0c670a8134909a797587b97cfe4d5bf6645"
    },
    {
        "hash": "1f0426c44b9416d90a90266a87d6a198b5f61627",
        "author": "Po-Chuan Hsieh",
        "date": "2025-01-30T14:30:51-08:00",
        "message": "Fix build with -Wrange-loop-construct (#13273)\n\nSummary:\ndb/db_impl/db_impl_write.cc:208:19: error: loop variable '[cf_id, stat]' creates a copy from type 'const value_type' (aka 'const pair<const unsigned int, rocksdb::WriteBatchWithIndex::CFStat>') [-Werror,-Wrange-loop-construct]\n  208 |   for (const auto [cf_id, stat] : wbwi->GetCFStats()) {\n      |                   ^\ndb/db_impl/db_impl_write.cc:208:8: note: use reference type 'const value_type &' (aka 'const pair<const unsigned int, rocksdb::WriteBatchWithIndex::CFStat> &') to prevent copying\n  208 |   for (const auto [cf_id, stat] : wbwi->GetCFStats()) {\n      |        ^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                   &\n1 error generated.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13273\n\nReviewed By: jaykorean\n\nDifferential Revision: D68109780\n\nPulled By: cbi42\n\nfbshipit-source-id: a0bc86bb82e8eaf7175c9cae4ae5dbad4f461d8c",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1f0426c44b9416d90a90266a87d6a198b5f61627"
    },
    {
        "hash": "57c177be5509f194431ba88d3d884c4f885f4ba9",
        "author": "Andrew Chang",
        "date": "2025-01-30T11:44:23-08:00",
        "message": "Use secondary_cfhs in secondary_db_->Get (#13351)\n\nSummary:\nThis bug was spotted by cbi42 and should be the root cause for the crash test data races 🤞 .\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13351\n\nTest Plan: Monitor recurring crash tests.\n\nReviewed By: hx235\n\nDifferential Revision: D68909000\n\nPulled By: archang19\n\nfbshipit-source-id: e0bdfda9f92eacd2513fc8894f8cde35da88da68",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/57c177be5509f194431ba88d3d884c4f885f4ba9"
    },
    {
        "hash": "d79a5e5854ed5d92f2222e08632e64d5f1a30e43",
        "author": "Changyu Bi",
        "date": "2025-01-29T15:55:20-08:00",
        "message": "Deflake unit test `RoundRobinSubcompactionsAgainstPressureToken.PressureTokenTest` (#13347)\n\nSummary:\nThe test has been [flaky](https://github.com/facebook/rocksdb/actions/runs/12220443012/job/34088263578?fbclid=IwZXh0bgNhZW0CMTEAAR3iDUK20Z4kdFkYZOT_PgQMYuj3Ebmpf4O-OOLLyeFQs4HAb8pRTWpFnUo_aem_09A_yiv7cwoD5lKjxFKimA). The cause for flakiness is that background threads may not be immediately available after calling env_->SetBackgroundThreads() while the test expects all background threads to be available for compaction. There's no way to get the number of available threads and I don't want to update threadpool implementation just for this test. So I added a fix to wait until background threads being available that relies on sync point.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13347\n\nTest Plan: monitor future test failure\n\nReviewed By: hx235\n\nDifferential Revision: D68851929\n\nPulled By: cbi42\n\nfbshipit-source-id: 2dddda98ccc4c299eb1dd05ee7fd154b7a31f163",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d79a5e5854ed5d92f2222e08632e64d5f1a30e43"
    },
    {
        "hash": "b8d915c7fad9a528886b613d3f762e218754898a",
        "author": "Andrew Chang",
        "date": "2025-01-28T10:56:13-08:00",
        "message": "Force a primary flush before secondary verification when WAL is disabled or manual_wal_flush is set (#13338)\n\nSummary:\nhttps://github.com/facebook/rocksdb/issues/13281 added support for verifying secondaries in the crash tests. We are trying to check that the values returned by the secondary in `Get` requests fall within an expected range of values. We do reads from the shared expected state before and after we read from the secondary.\n\nThere are some rare verification failures where `VerifyValueRange` fails with `Unexpected value found outside of the value base range`.\n\nI have some ideas on what the root cause could be. The secondary can read the WAL, MANIFEST, and SST files, but in some scenarios some of these pieces may not be present.\n\nI noticed that the failures had `manual_wal_flush_one_in=1000`, which means that `options.manual_wal_flush` is set to `true`. With this setting, RocksDB has its own internal buffers that need to be manually flushed for the WAL to be persisted.\n\nAlthough the test failures I looked at did not disable the WAL, I realized that, when the WAL is disabled, we should flush the primary's memtables, since the secondary needs to be able to find SST files to fully catch up.\n\nInjected faults further complicate matters, so I have a check to skip secondary verification whenever the WAL or memtable flushes fail due to fault injection.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13338\n\nTest Plan:\nLocally:\n```\npython3 tools/db_crashtest.py --simple blackbox --test_secondary=1\npython3 tools/db_crashtest.py --simple whitebox --test_secondary=1\npython3 tools/db_crashtest.py --simple blackbox --test_secondary=1 --disable_wal=1\npython3 tools/db_crashtest.py --simple blackbox --test_secondary=1 --disable_wal=0 --manual_wal_flush_one_in=1000\n```\n\nI will monitor the recurring crash tests after this gets merged.\n\nReviewed By: anand1976\n\nDifferential Revision: D68741287\n\nPulled By: archang19\n\nfbshipit-source-id: 86f474c41a68b7b06f2ed80a851c6cb52a47ebe7",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b8d915c7fad9a528886b613d3f762e218754898a"
    },
    {
        "hash": "880f85a162c2363c6ee102cf5fcaa126bcbc2010",
        "author": "Andrew Chang",
        "date": "2025-01-27T13:19:58-08:00",
        "message": "Call delete on secondary_db_ wherever it is done on db_ (#13337)\n\nSummary:\nhttps://github.com/facebook/rocksdb/issues/13281 added support to the crash tests for secondary DB verification.\n\nI looked at our recurring crash tests to see what impact https://github.com/facebook/rocksdb/issues/13281 had. The actual secondary verification looks okay to me (no `assert` failures), but I noticed memory leaks were detected.\n\nThe problematic areas were tracked down to the call to `DB::OpenAsSecondary` from `rocksdb::StressTest::Open`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13337\n\nTest Plan:\nMonitor recurring crash tests. It is likely hard to reproduce the ASAN failures locally if they are rare enough.\n\n```\nmake -j100 db_stress COMPILE_WITH_ASAN=1\npython3 tools/db_crashtest.py --simple blackbox --test_secondary=1\n```\n\nReviewed By: cbi42\n\nDifferential Revision: D68721624\n\nPulled By: archang19\n\nfbshipit-source-id: 9c3044884c505c43c1819a3e98ce99b2d171f3ca",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/880f85a162c2363c6ee102cf5fcaa126bcbc2010"
    },
    {
        "hash": "ac2ad2160d20e990cc9d89f0cf93028ab0e22848",
        "author": "Levi Tamasi",
        "date": "2025-01-24T14:06:54-08:00",
        "message": "Repro a bug affecting UDTS+BlobDB+reverse iteration+allow_unprepared_value+max_sequential_skip_in_iterations (#13332)\n\nSummary:\nThe patch adds a unit test that reproduces an issue we have been seeing in our stress tests that affects reverse iteration when BlobDB and user-defined timestamps are both enabled. If in addition to the above, lazy loading of blobs (`allow_unprepared_value`) is enabled and `max_sequential_skip_in_iterations` is exceeded during the reverse scan, calling `PrepareValue` can result in an error status (`Corruption: Key mismatch when reading blob`). We plan to fix the issue in a follow-up patch.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13332\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D68642615\n\nfbshipit-source-id: a09b24e2dda6b5fa97ae576708ab278f540251bf",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_with_timestamp_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ac2ad2160d20e990cc9d89f0cf93028ab0e22848"
    },
    {
        "hash": "77d4663447f485729d13a12c8fea5b51127d35f6",
        "author": "Levi Tamasi",
        "date": "2025-01-15T18:03:59-08:00",
        "message": "Extend the test coverage of FaissIVFIndex (#13300)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13300\n\nThe patch adds a new unit test for `FaissIVFIndex` that compares its results with a regular in-memory FAISS index. Specifically, it trains two identical IVF indices using the same training vectors, passes the ownership of one to `FaissIVFIndex`, adds the same set of database vectors to both, and then queries them using the same query vectors (with a variety of values for number of neighbors and number of probes).\n\nReviewed By: jaykorean\n\nDifferential Revision: D68233815\n\nfbshipit-source-id: 7577a65c03c7b811707a4dbcd81e69ed85202a51",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/secondary_index/faiss_ivf_index_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/77d4663447f485729d13a12c8fea5b51127d35f6"
    },
    {
        "hash": "b341dc8b05bd0e2499e22886733f25ad011d2a50",
        "author": "Peter Dillinger",
        "date": "2025-01-07T18:25:21-08:00",
        "message": "Fix possible out-of-order/inconsistent seqno-to-time mapping (#13279)\n\nSummary:\nThe crash test with COERCE_CONTEXT_SWITCH=1 is showing a failure:\n\n```\ndb_stress: db/seqno_to_time_mapping.cc:480: bool rocksdb::SeqnoToTimeMapping::Append(rocksdb::SequenceNumber, uint64_t): Assertion `false' failed.\n```\n\nwith `DBImpl::SetOptions()` in the call stack. This assertion and those around it are mostly there for catching systematic problems with recording the mappings, as small imprecisions here and there are not a problem in production. Nevertheless, we need to fix this to maintain the assertions for catching possible future systematic problems.\n\nBecause the seqno and time are acquired before holding the DB mutex, there could be a race where T1 acquires latest seqno, T1 acquires latest seqno, T2 acquires unix time, T1 acquires unix time, and entries are not just saved out-of-order, but would represent an inconsistent (time traveling) mapping if they were saved.\n\nWe can fix this by getting the seqno and unix times while under the mutex. (Hopefully this is not caused by non-monotonic clock adjustments.)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13279\n\nTest Plan: local run blackbox_crash_test with COERCE_CONTEXT_SWITCH=1. This is not really a production concern, and the conditions are not really reproducible in a unit test after the fix.\n\nReviewed By: cbi42\n\nDifferential Revision: D67923314\n\nPulled By: pdillinger\n\nfbshipit-source-id: 6bfb6b05d6d449154fbaeb9196eedcfa21fe5ae1",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b341dc8b05bd0e2499e22886733f25ad011d2a50"
    },
    {
        "hash": "09d7f6a5c29c367b0662ee43ad1df993b5dfc302",
        "author": "Peter Dillinger",
        "date": "2025-01-05T21:52:43-08:00",
        "message": "Temporary work around nullptr seqno_to_time_mapping in FlushJob (#13269)\n\nSummary:\nTo resolve a crash test failure in\n`FlushJob::GetPrecludeLastLevelMinSeqno()`\n\nTo fix this properly, I will work on ensuring that (a) FlushJob is created with a consistent view on mutable options and seqno_to_time_mapping (from a single SuperVersion) and (b) SuperVersions always have a non-null seqno_to_time_mapping when a relevant option is set.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13269\n\nTest Plan: watch crash test\n\nReviewed By: ltamasi\n\nDifferential Revision: D67843008\n\nPulled By: pdillinger\n\nfbshipit-source-id: cedbac4b2255398eefade46240c5481b57a98b1e",
        "modified_files_count": 1,
        "modified_files": [
            "db/flush_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/09d7f6a5c29c367b0662ee43ad1df993b5dfc302"
    },
    {
        "hash": "d2db80caa28e21d0af8617b8a3d7cd83bbdb0443",
        "author": "Changyu Bi",
        "date": "2025-01-02T12:10:31-08:00",
        "message": "Try to deflake unit test `RoundRobinSubcompactionsAgainstPressureToken` (#13254)\n\nSummary:\nunit test `RoundRobinSubcompactionsAgainstPressureToken.PressureTokenTest` has been [flaky](https://github.com/facebook/rocksdb/actions/runs/12220443012/job/34088263578?fbclid=IwZXh0bgNhZW0CMTEAAR3Vi0p8xxzU1tSpvaeB0RfP_97nOMiONGyZbhdcnN8IXW4tChNVHN3iIhc_aem_SGy-iqplt0GaEHAel_BGQQ). num_planned_subcompactions can be 1 for two reasons: compactions not having enough input files or that there were not enough bg threads. This PR updates the test to try to trigger a larger compaction for subcompactions, and added a callback to verify compactions have enough input files.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13254\n\nTest Plan: monitor future failure.\n\nReviewed By: hx235\n\nDifferential Revision: D67764944\n\nPulled By: cbi42\n\nfbshipit-source-id: 4fc9c0bef76c8bfaa54be4f3d78071e2bebee8aa",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d2db80caa28e21d0af8617b8a3d7cd83bbdb0443"
    },
    {
        "hash": "e48ccc28f4eebcc05b6333b129ee5908214d3259",
        "author": "Peter Dillinger",
        "date": "2025-01-02T10:48:46-08:00",
        "message": "Reduce unnecessary manifest data when no file checksum (#13250)\n\nSummary:\nDon't write file checksum manifest entries when unused, to avoid using extra manifest file space.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13250\n\nTest Plan: very minor performance improvement, existing tests\n\nReviewed By: cbi42\n\nDifferential Revision: D67653954\n\nPulled By: pdillinger\n\nfbshipit-source-id: 9156e093ed5e4a5152cc55354a4beea9a841b89f",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_edit.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e48ccc28f4eebcc05b6333b129ee5908214d3259"
    },
    {
        "hash": "62a7ddb39c28d313d1d83350ccdf20dcad7bb6f6",
        "author": "Vaqxai",
        "date": "2025-01-02T10:42:20-08:00",
        "message": "Reapply fix for https://github.com/facebook/rocksdb/issues/13166 (#13265)\n\nSummary:\nThere was a fix in https://github.com/facebook/rocksdb/pull/13171 for issue https://github.com/facebook/rocksdb/issues/13166 but it was overwritten by commit https://github.com/facebook/rocksdb/commit/d5345a8ff72c05c3d014fb18bed030d60d1d8e4d. This PR is to reapply the fix.\n\nFixes https://github.com/facebook/rocksdb/issues/13264 to have Rocks compile under Ubuntu again\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13265\n\nReviewed By: archang19\n\nDifferential Revision: D67764706\n\nPulled By: cbi42\n\nfbshipit-source-id: c8822fff6769bf3be1e6ceee3f2b58b09d8569b3",
        "modified_files_count": 1,
        "modified_files": [
            "memtable/wbwi_memtable.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/62a7ddb39c28d313d1d83350ccdf20dcad7bb6f6"
    },
    {
        "hash": "18cecb9c46b4c2a8b148659dac2fcab5a843d32b",
        "author": "Maciej Szeszko",
        "date": "2024-12-20T14:45:52-08:00",
        "message": "Properly propagate the result io_status handle upstream (#13238)\n\nSummary:\nFollowup to https://github.com/facebook/rocksdb/pull/13228. This fix is not a critical one in a sense that `else`-branch is only supposed to act as a guard just in case when new work item type is being introduced, scheduled but not handled. However, we're in control of the work item types and currently we only support a single one (which has appropriate handling logic to it).\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13238\n\nReviewed By: pdillinger\n\nDifferential Revision: D67512001\n\nPulled By: mszeszko-meta\n\nfbshipit-source-id: 71e74b3dac388882dd3757871f500c334667fbd1",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backup/backup_engine.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/18cecb9c46b4c2a8b148659dac2fcab5a843d32b"
    },
    {
        "hash": "19e4aba3db75bd6add7177164c892ab6cdfd50b3",
        "author": "Yu Zhang",
        "date": "2024-12-20T11:19:36-08:00",
        "message": "Fix flaky test asserting concurrent write thread's waiting time (#13241)\n\nSummary:\nThis test assertion was added in https://github.com/facebook/rocksdb/issues/13219. It checks the concurrent write thread's wait time is not longer than the file ingestion thread's write blocking time since the former entered the write thread after the blocking already started in the test. This test runs into flakiness like this:\n```db/external_sst_file_basic_test.cc:300: Failure\nExpected: (perf_context.file_ingestion_blocking_live_writes_nanos) > (write_thread_perf_context->write_thread_wait_nanos), actual: 166210 vs 279681\n```\n In reality the write thread is yielding starting with a 1 micro period and then every 100 micros: https://github.com/facebook/rocksdb/blob/54b614de5bd3e26d332b85557d44bde86b2a2e87/db/write_thread.cc#L68-L70\n\nSo this 113 micros errors is within this margin\nThis fix the test with just removing this assertion. The other assertion `ASSERT_GT(write_thread_perf_context->write_thread_wait_nanos, 0)` should be sufficient for the test's purpose.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13241\n\nReviewed By: hx235\n\nDifferential Revision: D67526804\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 23ee9771247e4c13444054a1e86ad9293902cb56",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/19e4aba3db75bd6add7177164c892ab6cdfd50b3"
    },
    {
        "hash": "f7b42166283223d29b6876ecb6acfb6373f07eaf",
        "author": "Maciej Szeszko",
        "date": "2024-12-19T16:57:03-08:00",
        "message": "Generalize work item definition in BackupEngineImpl (#13228)\n\nSummary:\nThis change refactors existing `CopyOrCreateWorkItem` async task definition to a more generic one (`WorkItem`) with an assigned `type` indicative of intended action. This would allow us to reuse existing, battle-tested async tasks initialization code to handle wider range of incoming use cases in B/R space.\n\n### Motivation\nHistorically, the two main use cases for `BackupEngineImpl`'s async work items were either creating a file in backup workflow or copying files in restore workflow. However, as we're now exploring opportunities in incremental restore (and potentially speeding up backup verification), we need the work item abstraction to be capable of processing different workflow types concurrently (computing checksum comes to mind).\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13228\n\nTest Plan: Since this is purely cosmetic change where behavior remains intact, existing test collateral will suffice.\n\nReviewed By: pdillinger\n\nDifferential Revision: D67441210\n\nPulled By: mszeszko-meta\n\nfbshipit-source-id: 78803e8cf3cf40b9d81831fac3a99193e1a30ef0",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backup/backup_engine.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f7b42166283223d29b6876ecb6acfb6373f07eaf"
    },
    {
        "hash": "6ae3412244e487a63e9e0c09938230aca611d7a1",
        "author": "Andrew Chang",
        "date": "2024-12-17T15:25:04-08:00",
        "message": "Explain why RandomAccessFileReader* is not passed into FilePrefetchBuffer constructor (#13159)\n\nSummary:\nIn https://github.com/facebook/rocksdb/pull/13118#discussion_r1842848359, we decided to make a separate follow-up PR that refactors `FilePrefetchBuffer` to determine `use_fs_buffer` once at construction time.\n\nThe change would have involved passing in the `RandomAccessFileReader*` directly to the constructor, and using that to determine `use_fs_buffer`. This would avoid repeatedly calling `UseFSBuffer(RandomAccessFileReader* reader)` during the actual prefetch requests.\n\nI started working on this refactoring change but ran into issues with these 2 files, which used `GetOrCreatePrefetchBuffer`\n- https://github.com/facebook/rocksdb/blob/main/db/compaction/compaction_iterator.cc\n- https://github.com/facebook/rocksdb/blob/main/db/merge_helper.cc\n\nAs I explained in the added code comments, sometimes the `RandomAccessFileReader*` is not available when we construct the `FilePrefetchBuffer`, so although it is not the most elegant, I think right now it makes sense to pass in the `reader` into the `Prefetch` / `PrefetchAsync` / `TryReadFromCache` calls. Maybe there is a workaround but I don't think the refactor would be worth it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13159\n\nTest Plan: N/A (comments)\n\nReviewed By: anand1976\n\nDifferential Revision: D66473731\n\nPulled By: archang19\n\nfbshipit-source-id: ce3473694c2cd82513da1a76ad5995afa5bc9cfa",
        "modified_files_count": 1,
        "modified_files": [
            "file/file_prefetch_buffer.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6ae3412244e487a63e9e0c09938230aca611d7a1"
    },
    {
        "hash": "09c989fbcb4d2c56ca3bcd847b2433fdc2dcaa24",
        "author": "Andrew Chang",
        "date": "2024-12-16T11:17:27-08:00",
        "message": "Explicitly mark destructors with override (#13212)\n\nSummary:\nI saw these compiler warnings while preparing for the 9.10 release:\n\n```cpp\n'~CompactOnDeletionCollectorFactory' overrides a destructor but is not marked 'override' [-Werror,-Wsuggest-destructor-override]\n\n'~CompactForTieringCollectorFactory' overrides a destructor but is not marked 'override' [-Werror,-Wsuggest-destructor-override]\n```\n\nThis code is from a while ago so I assume that this CI check has been failing for quite some time. We should still clean this up to avoid confusion in the future.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13212\n\nTest Plan: Existing CI checks should pass, and we should not see this CI check failure the next time we try to make a release/patch.\n\nReviewed By: jaykorean\n\nDifferential Revision: D67287794\n\nPulled By: archang19\n\nfbshipit-source-id: a11230a919c0b7ef21a7219bf05f567d3d44b2d1",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/table_properties_collectors.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/09c989fbcb4d2c56ca3bcd847b2433fdc2dcaa24"
    },
    {
        "hash": "85d8ee78440e86f1dc678c215b56c090351f3b90",
        "author": "Peter Dillinger",
        "date": "2024-12-12T11:41:16-08:00",
        "message": "Improve paranoid_checks API comment (#13206)\n\nSummary:\nsee comment change\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13206\n\nTest Plan: no functional change\n\nReviewed By: cbi42\n\nDifferential Revision: D67108123\n\nPulled By: pdillinger\n\nfbshipit-source-id: 669de1fff8df452c3e279f311452f02b40a03aaf",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/85d8ee78440e86f1dc678c215b56c090351f3b90"
    },
    {
        "hash": "d386385e0bb7a17564493b3a2f5eed0f2356e05e",
        "author": "Andrew Chang",
        "date": "2024-12-09T13:24:16-08:00",
        "message": "Temporarily disable file system buffer reuse optimization for compaction prefetches (#13177)\n\nSummary:\nhttps://github.com/facebook/rocksdb/issues/13182 successfully fixed the heap `use-after-free` issue.\n\nHowever, there was one additional error I found while looking through the warm storage crash test logs. There are repeated (though infrequent) unsigned pointer arithmetic overflow errors that look like this:\n```cpp\nfile_prefetch_buffer.cc:860:46: runtime error: addition of unsigned offset to 0x7f282001880f overflowed to 0x7f2820017667\n```\n\nIt took me a while to figure it out, but I was finally able to reproduce the issue locally. It turns out the issue is when we call `TryReadFromCache` with `for_compaction` set to `true`. The default value for `for_compaction` is `false`, and this was not covered in the unit tests written for https://github.com/facebook/rocksdb/issues/13118.\n\nWhen I run the same unit tests with `for_compaction` set to `true`, I am able to break this assertion that I added at the end of `TryReadFromCacheUntracked`:\n```cpp\nassert(buf->offset_ <= offset);\n```\n\nIf `buf->offset_` is greater than `offset`, then that explains the overflow we get in the following lines:\n```cpp\nuint64_t offset_in_buffer = offset - buf->offset_;\n*result = Slice(buf->buffer_.BufferStart() + offset_in_buffer, n);\n```\n\nI will have another PR out that fixes the issue and enables the optimization when `for_compaction` is set to `true`. I will need to add some overlap buffer logic, similar to what I have inside `PrefetchInternal`. For now, since I have confirmed that there is indeed a bug, we should disable the optimization where needed. It will take me some time to implement the fix and write new test cases.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13177\n\nTest Plan: I kept the existing unit tests which test the file system buffer reuse code when `for_compaction` is `false`. I expect that the warm storage crash test logs will no longer show the integer overflow issue once we merge this PR.\n\nReviewed By: anand1976\n\nDifferential Revision: D66721857\n\nPulled By: archang19\n\nfbshipit-source-id: 22d523646f969a7a0ccbbea73f63c32601f1179a",
        "modified_files_count": 1,
        "modified_files": [
            "file/file_prefetch_buffer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d386385e0bb7a17564493b3a2f5eed0f2356e05e"
    },
    {
        "hash": "b045f4a122c3cc8ed177d13bf696897e1ec7ec89",
        "author": "Levi Tamasi",
        "date": "2024-12-03T11:01:13-08:00",
        "message": "Add a secondary index interface (#13175)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13175\n\nThe patch is the first step in adding support for secondary indices via the transaction layer. It introduces a new `SecondaryIndex` interface, which enables creating secondary indices over a set of (plain or wide-column) primary key-values to facilitate queries by (column) value instead of key. This interface will be automagically invoked by the transaction logic to add and remove secondary index entries as needed when the application issues write operations for the primary data. Classes deriving from `SecondaryIndex` can implement the methods `GetPrimaryColumn{Family,Name}` and `GetSecondaryColumnFamily` to respectively define the primary column family and wide column to index and the column family to use for the secondary index entries. The format of the secondary index entries can be defined by implementing `GetSecondaryKeyPrefix` and `GetSecondaryValue`. In addition, `UpdatePrimaryColumnValue` can be used to optionally update the value of the indexing column in the primary key-value before it is added to the transaction.\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D66672758\n\nfbshipit-source-id: 0b7441ffff626c13956220e6efc98215303ef57e",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/secondary_index.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b045f4a122c3cc8ed177d13bf696897e1ec7ec89"
    },
    {
        "hash": "1a76289be40ce158a3d34c745ce4d71cee50a4ff",
        "author": "Changyu Bi",
        "date": "2024-12-02T10:19:35-08:00",
        "message": "Small fix in WBWIMemtable::UpdateKey() (#13171)\n\nSummary:\nfixes issue https://github.com/facebook/rocksdb/issues/13166.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13171\n\nTest Plan: the same command in https://github.com/facebook/rocksdb/issues/13166 doesn't reproduce for me.\n\nReviewed By: ltamasi\n\nDifferential Revision: D66621871\n\nPulled By: cbi42\n\nfbshipit-source-id: 08820a22071091606b437181e2b5e9343202d637",
        "modified_files_count": 1,
        "modified_files": [
            "memtable/wbwi_memtable.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1a76289be40ce158a3d34c745ce4d71cee50a4ff"
    },
    {
        "hash": "0f35db55d86ea8699ea936c9e2a4e34c82458d6b",
        "author": "Hui Xiao",
        "date": "2024-11-20T12:22:52-08:00",
        "message": "Print file number when TEST_VerifyNoObsoleteFilesCached fails (#13145)\n\nSummary:\n**Context/Summary:**\n\nhttps://github.com/facebook/rocksdb/pull/13117 added check for obsolete SST files that are not cleaned up timely. It caused a infrequent stress test failure  `assertion=\"live_and_quar_files.find(file_number) != live_and_quar_files.end()\"` that I haven't repro-ed yet.\n\nThis PR prints the file number so we can find out what happens to that file through info logs when encountering the same failure.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13145\n\nTest Plan:\nManually fail the assertion and observe the stderr printing\n```\n[ RUN      ] DBBasicTest.UniqueSession\nFile 12 is not live nor quarantined\ndb_basic_test: db/db_impl/db_impl_debug.cc:384: rocksdb::DBImpl::TEST_VerifyNoObsoleteFilesCached(bool) const::<lambda(const rocksdb::Slice&, rocksdb::Cache::ObjectPtr, size_t, const rocksdb::Cache::CacheItemHelper*)>: Assertion `false' failed.\n```\n\nReviewed By: pdillinger\n\nDifferential Revision: D66134154\n\nPulled By: hx235\n\nfbshipit-source-id: 353164c373d3d674cee676b24468dfc79a1d4563",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_debug.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0f35db55d86ea8699ea936c9e2a4e34c82458d6b"
    },
    {
        "hash": "9a136e18b353e6d9c1b325103a4cef7d85a3ceea",
        "author": "Changyu Bi",
        "date": "2024-11-13T12:41:56-08:00",
        "message": "Fix a valgrind unit test failure (#13137)\n\nSummary:\nfix the valgrind failure from https://github.com/facebook/rocksdb/actions/runs/11813904728/job/32911902535?fbclid=IwZXh0bgNhZW0CMTEAAR2GJs1U6mNwNv3zwPzU8rpCmBHqfStV3dupj2o_-686RneLKXADaSZH5-U_aem_ADUQy7bzknoseVpjrOc5SQ\n```\n[ RUN      ] WBWIMemTableTest.ReadFromWBWIMemtable\n==1150870== Conditional jump or move depends on uninitialised value(s)\n==1150870==    at 0x50FE67A: rocksdb::WBWIMemTable::Get(rocksdb::LookupKey const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, rocksdb::PinnableWideColumns*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&, bool, rocksdb::ReadCallback*, bool*, bool) (wbwi_memtable.cc:60)\n==1150870==    by 0x50FF92A: rocksdb::WBWIMemTable::MultiGet(rocksdb::ReadOptions const&, rocksdb::MultiGetContext::Range*, rocksdb::ReadCallback*, bool) (wbwi_memtable.cc:120)\n==1150870==    by 0x1879EF: rocksdb::WBWIMemTableTest_ReadFromWBWIMemtable_Test::TestBody() (write_batch_with_index_test.cc:3580)\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13137\n\nTest Plan: `valgrind ./write_batch_with_index_test --gtest_filter=\"*ReadFromWBWIMemtable*\"`\n\nReviewed By: ltamasi\n\nDifferential Revision: D65892657\n\nPulled By: cbi42\n\nfbshipit-source-id: 0b44a5a06b8cc64173ad36966339877e2f508d52",
        "modified_files_count": 1,
        "modified_files": [
            "memtable/wbwi_memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9a136e18b353e6d9c1b325103a4cef7d85a3ceea"
    },
    {
        "hash": "87b4043a677f2677dfbc7aff8f5328d1d0258060",
        "author": "Yutian Li",
        "date": "2024-11-08T15:35:40-08:00",
        "message": "Remove undefined function GetColumnFamilyDataByName (#13126)\n\nSummary:\nfunction is undefined and unused\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13126\n\nReviewed By: ltamasi\n\nDifferential Revision: D65675223\n\nPulled By: cbi42\n\nfbshipit-source-id: d63d2d361dc40226223840ebe74c0f8934ab18e7",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/87b4043a677f2677dfbc7aff8f5328d1d0258060"
    },
    {
        "hash": "8089eae24017e89cccbb6d1358a9c338b184e9ab",
        "author": "Yu Zhang",
        "date": "2024-11-05T09:39:54-08:00",
        "message": "Fix assertion that compaction input files are freeed (#13109)\n\nSummary:\nThis assertion could fail if the compaction input files were successfully trivially moved. On re-locking db mutex after successful `LogAndApply`, those files could have been picked up again by some other compactions. And the assertion will fail.\n\nExample failure: P1669529213\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13109\n\nReviewed By: cbi42\n\nDifferential Revision: D65308574\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 32413bdc8e28e67a0386c3fe6327bf0b302b9d1d",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8089eae24017e89cccbb6d1358a9c338b184e9ab"
    },
    {
        "hash": "8109046222d024323f9bdc50e048834ed4c06aab",
        "author": "leipeng",
        "date": "2024-10-29T11:04:20-07:00",
        "message": "secondary instance: remove unnessisary cfds_changed->count() (#13086)\n\nSummary:\n`cfds_changed->count(cfd)` is not needed, just blind insert.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13086\n\nReviewed By: hx235\n\nDifferential Revision: D64712400\n\nPulled By: cbi42\n\nfbshipit-source-id: 4ef62aaa724c8397baa4ff350c16a7a8d04d7067",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_secondary.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8109046222d024323f9bdc50e048834ed4c06aab"
    },
    {
        "hash": "8b38d4b4006ca9fd49432ccc16d9911919870dd2",
        "author": "Changyu Bi",
        "date": "2024-10-21T21:02:03-07:00",
        "message": "Fix write tracing to check callback status (#13088)\n\nSummary:\nwe currently record write operations to tracer before checking callback in PipelinedWriteImpl and WriteImplWALOnly. For optimistic transaction DB, this means that an operation can be recorded to tracer even when it's not written to DB or WAL. I suspect this is the reason some of our optimistic txn crash test is failing. The evidence is that the trace contains some duplicated entry and has more entries compared to the corresponding entry in WAL. This PR moves the tracer logic to be after checking callback status.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13088\n\nTest Plan: monitor crash test.\n\nReviewed By: hx235\n\nDifferential Revision: D64711753\n\nPulled By: cbi42\n\nfbshipit-source-id: 55fd1223538ec6294ce84a957c306d3d9d91df5f",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8b38d4b4006ca9fd49432ccc16d9911919870dd2"
    },
    {
        "hash": "0ca691654f24ff42ee5ca1ddb802419dba3e2c17",
        "author": "Jay Huh",
        "date": "2024-10-18T07:31:54-07:00",
        "message": "Fix Unit Test failing from uninit values in CompactionServiceInput (#13080)\n\nSummary:\n# Summary\n\nThere was a [test failure](https://github.com/facebook/rocksdb/actions/runs/11381731053/job/31663774089?fbclid=IwZXh0bgNhZW0CMTEAAR0YJVdnkKUhN15RJQrLsvicxqzReS6y4A14VFQbWu-81XJsSsyNepXAr2c_aem_JyQqNdtpeKFSA6CjlD-pDg) from uninit value in the CompactionServiceInput\n\n```\n[ RUN      ] CompactionJobTest.InputSerialization\n==79945== Use of uninitialised value of size 8\n==79945==    at 0x58EA69B: _itoa_word (_itoa.c:179)\n==79945==    by 0x5906574: __vfprintf_internal (vfprintf-internal.c:1687)\n==79945==    by 0x591AF99: __vsnprintf_internal (vsnprintf.c:114)\n==79945==    by 0x1654AE: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) (string_conversions.h:111)\n==79945==    by 0x5126C65: to_string (basic_string.h:6568)\n==79945==    by 0x5126C65: rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) (options_helper.cc:541)\n==79945==    by 0x512718B: rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, void const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) const (options_helper.cc:1084)\n```\n\nThis was due to `options_file_number` value not set in the unit test. However, this value is guaranteed to be set in the normal path. It was just missing in the test path. Setting the 0 as the default value for uninitialized fields in the `CompactionServiceInput` and `CompactionServiceResult` for now.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13080\n\nTest Plan: Existing tests should be sufficient\n\nReviewed By: cbi42\n\nDifferential Revision: D64573567\n\nPulled By: jaykorean\n\nfbshipit-source-id: 7843a951770c74445620623d069a52ba93ad94d5",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_job.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ca691654f24ff42ee5ca1ddb802419dba3e2c17"
    },
    {
        "hash": "55de26580af57abaa1c398e405dbc05cf8228c7f",
        "author": "Levi Tamasi",
        "date": "2024-10-15T17:32:07-07:00",
        "message": "Small improvement to MultiCFIteratorImpl (#13075)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13075\n\nThe patch simplifies the iteration logic in `MultiCFIteratorImpl::{Advance,Populate}Iterator` a bit and adds some assertions to uniformly enforce the invariant that any iterators currently on the heap should be valid and have an OK status.\n\nReviewed By: jaykorean\n\nDifferential Revision: D64429566\n\nfbshipit-source-id: 36bc22465285b670f859692a048e10f21df7da7a",
        "modified_files_count": 1,
        "modified_files": [
            "db/multi_cf_iterator_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/55de26580af57abaa1c398e405dbc05cf8228c7f"
    },
    {
        "hash": "fe6c8cb1d6a9e45258149be1d6f1c4a3b8b6651b",
        "author": "Jay Huh",
        "date": "2024-10-10T15:34:35-07:00",
        "message": "Print unknown writebatch tag (#13062)\n\nSummary:\nAdd additional info for debugging purpose by doing the same as what WBWI does\n\nhttps://github.com/facebook/rocksdb/blob/632746bb5b8d9d817b0075b295e1a085e1e543a4/utilities/write_batch_with_index/write_batch_with_index.cc#L274-L276\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13062\n\nTest Plan: CI\n\nReviewed By: hx235\n\nDifferential Revision: D64202297\n\nPulled By: jaykorean\n\nfbshipit-source-id: 65164fd88420fc72b6db26d1436afe548a653269",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fe6c8cb1d6a9e45258149be1d6f1c4a3b8b6651b"
    },
    {
        "hash": "632746bb5b8d9d817b0075b295e1a085e1e543a4",
        "author": "Hui Xiao",
        "date": "2024-10-09T12:51:19-07:00",
        "message": "Improve DBTest.DynamicLevelCompressionPerLevel (#13044)\n\nSummary:\n**Context/Summary:**\n\nA part of this test is to verify compression conditionally happens depending on the shape of the LSM when `options.level_compaction_dynamic_level_bytes = true;`. It uses the total file size to determine whether compression has happened or not. This involves some hard-coded math hard to understand. This PR replaces those with statistics that directly shows whether compression has happened or not.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13044\n\nTest Plan: Existing test\n\nReviewed By: jaykorean\n\nDifferential Revision: D63666361\n\nPulled By: hx235\n\nfbshipit-source-id: 8c9b1bea9b06ff1e3ed95c576aec6705159af137",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/632746bb5b8d9d817b0075b295e1a085e1e543a4"
    },
    {
        "hash": "263fa15b445935e8229063a080e22a405276df2f",
        "author": "Yu Zhang",
        "date": "2024-10-04T16:48:12-07:00",
        "message": "Handle a possible overflow (#13046)\n\nSummary:\nStress test detects this variable could potentially overflow, so added some runtime handling to avoid it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13046\n\nTest Plan: Existing tests\n\nReviewed By: hx235\n\nDifferential Revision: D63911396\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 7c9abcd74ac9937b211c0ea4bb683677390837c5",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/263fa15b445935e8229063a080e22a405276df2f"
    },
    {
        "hash": "2c2776f1f396e0f23dd4d484b871144a2972d787",
        "author": "Yu Zhang",
        "date": "2024-09-27T14:53:53-07:00",
        "message": "Fix some missing values in stress test (#13039)\n\nSummary:\nWhen `avoid_flush_during_shutdown` is false, DB will flush the memtables if there is some unpersisted data:\nhttps://github.com/facebook/rocksdb/blob/79790cf2a80fb5e5b6799ebd69d3fb2ebe71d612/db/db_impl/db_impl.cc#L505-L510\n\n`has_unpersisted_data_` is a flag that is only turned on for when WAL is disabled, for example:\nhttps://github.com/facebook/rocksdb/blob/79790cf2a80fb5e5b6799ebd69d3fb2ebe71d612/db/db_impl/db_impl_write.cc#L525-L528\nIn other cases, it just has its default false value.\n\nSo if disableWAL is false, and avoid_flush_during_shutdown is false, close won't flush memtables. Stress test is also not flush wal/sync wal. There could be missing data, while reopen in stress test doesn't tolerate missing data. To make the test simpler, this changes it to always flush/sync wal during reopen.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13039\n\nReviewed By: hx235\n\nDifferential Revision: D63494695\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 8f0fd9ed50a482a3955abc0882257ecc2e95926d",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2c2776f1f396e0f23dd4d484b871144a2972d787"
    },
    {
        "hash": "d327d560812be6da0fde11ada256f7088775516d",
        "author": "Jay Huh",
        "date": "2024-09-25T15:32:22-07:00",
        "message": "Remove unnecessary semi-colon (#13034)\n\nSummary:\nAs title\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13034\n\nReviewed By: ltamasi\n\nDifferential Revision: D63413712\n\nPulled By: jaykorean\n\nfbshipit-source-id: 0070761b0d9de1f50fe0baf235643d36aeb9f7f5",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/compaction_job_stats.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d327d560812be6da0fde11ada256f7088775516d"
    },
    {
        "hash": "40adb2bab79375924f1ee6421c236068eda24d12",
        "author": "Nick Brekhus",
        "date": "2024-09-13T14:39:48-07:00",
        "message": "Fix wraparound in SstFileManager (#13010)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/13010\n\nThe OnAddFile cur_compactions_reserved_size_ accounting causes wraparound when re-opening a database with an unowned SstFileManager and during recovery. It was introduced in #4164 which addresses out of space recovery with an unclear purpose. Compaction jobs do this accounting via EnoughRoomForCompaction/OnCompactionCompletion and to my understanding would never reuse a sst file name.\n\nReviewed By: anand1976\n\nDifferential Revision: D62535775\n\nfbshipit-source-id: a7c44d6e0a4b5ff74bc47abfe57c32ca6770243d",
        "modified_files_count": 1,
        "modified_files": [
            "file/sst_file_manager_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/40adb2bab79375924f1ee6421c236068eda24d12"
    },
    {
        "hash": "0d3aaf7c0f9c15cb52954e89c171ac880079a8c7",
        "author": "Peter Dillinger",
        "date": "2024-09-05T10:36:29-07:00",
        "message": "Ensure SSTs compressed in tiered_secondary_cache_test (#12993)\n\nSummary:\nIt appears the arm testsuite is failing because it is building without snappy, which is causing the SST files not to be compressed, which somehow causes these tests to fail. Manually setting LZ4 which is already required.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12993\n\nTest Plan: reproduced and verified fix on ARM laptop\n\nReviewed By: anand1976\n\nDifferential Revision: D62216451\n\nPulled By: pdillinger\n\nfbshipit-source-id: 3f21fcd9be0edaa66c7eca0cb7d56b998171e263",
        "modified_files_count": 1,
        "modified_files": [
            "cache/tiered_secondary_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0d3aaf7c0f9c15cb52954e89c171ac880079a8c7"
    },
    {
        "hash": "c989c51ed7260135777e8a13e1a2f8c85e520920",
        "author": "Symious",
        "date": "2024-09-03T14:41:55-07:00",
        "message": "Fix non-ASCII character (#12972)\n\nSummary:\nMet the following error while compiling the project.\n\n```\nbuild_tools/check-sources.sh\nutilities/fault_injection_fs.cc:509:    // If there<E2><80><99>s no injected error, then cb will be called asynchronously when\nutilities/fault_injection_fs.cc:510:    // target_ actually finishes the read. But if there<E2><80><99>s an injected error, it\nutilities/fault_injection_fs.cc:512:    // isn<E2><80><99>t invoked at all.\n^^^^ Use only ASCII characters in source files\nmake[1]: *** [Makefile:1291: check-sources] Error 1\nmake[1]: Leaving directory '/home/janus/Github/symious/rocksdb'\nmake: *** [Makefile:1084: check] Error 2\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12972\n\nReviewed By: hx235\n\nDifferential Revision: D61923865\n\nPulled By: cbi42\n\nfbshipit-source-id: 63af0a38fea15e09a860895bdd5ed0a57700e447",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/fault_injection_fs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c989c51ed7260135777e8a13e1a2f8c85e520920"
    },
    {
        "hash": "92ad4a88f3199b013532b37d6598c442319355a5",
        "author": "Changyu Bi",
        "date": "2024-08-27T13:57:40-07:00",
        "message": "Small CPU optimization in InlineSkipList::Insert() (#12975)\n\nSummary:\nreuse decode key in more places to avoid decoding length prefixed key x->Key().\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12975\n\nTest Plan:\nran benchmarks simultaneously for \"before\" and \"after\"\n* fillseq:\n```\n(for I in $(seq 1 50); do ./db_bench --benchmarks=fillseq --disable_auto_compactions=1 --min_write_buffer_number_to_merge=100 --max_write_buffer_number=1000  --write_buffer_size=268435456 --num=5000000 --seed=1723056275 --disable_wal=1 2>&1 | grep \"fillseq\"\ndone;) | awk '{ t += $5; c++; print } END { printf (\"%9.3f\\n\", 1.0 * t / c) }';\n\nbefore: 1483191\nafter: 1490555 (+0.5%)\n```\n\n* fillrandom:\n```\n(for I in $(seq 1 2); do ./db_bench_imain --benchmarks=fillrandom --disable_auto_compactions=1 --min_write_buffer_number_to_merge=100 --max_write_buffer_number=1000  --write_buffer_size=268435456 --num=2500000 --seed=1723056275 --disable_wal=1 2>&1 | grep \"fillrandom\"\n\nbefore: 255463\nafter: 256128 (+0.26%)\n```\n\nReviewed By: anand1976\n\nDifferential Revision: D61835340\n\nPulled By: cbi42\n\nfbshipit-source-id: 70345510720e348bacd51269acb5d2dd5a62bf0a",
        "modified_files_count": 1,
        "modified_files": [
            "memtable/inlineskiplist.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/92ad4a88f3199b013532b37d6598c442319355a5"
    },
    {
        "hash": "f31b4d80ff3583a0e45e9024eedb4a53a0e6bd82",
        "author": "anand76",
        "date": "2024-08-27T12:43:47-07:00",
        "message": "Retain previous trace file in db_stress for debugging purposes (#12978)\n\nSummary:\nThere are several crash test failures due to DB verification failure. Retain some trace history in the expected state directory to make debugging easier.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12978\n\nReviewed By: cbi42\n\nDifferential Revision: D61864921\n\nPulled By: anand1976\n\nfbshipit-source-id: 9f3f37b7e1e958bc89a3cf0373182354c2c1aa3b",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/expected_state.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f31b4d80ff3583a0e45e9024eedb4a53a0e6bd82"
    },
    {
        "hash": "d96e67c2bf7f8907c1edfd27d2e6a37b2a2bfce1",
        "author": "Peter Dillinger",
        "date": "2024-08-26T14:08:21-07:00",
        "message": "Fix flaky test DBTest2.VariousFileTemperatures (#12974)\n\nSummary:\n... apparently due to potentially not purging obsolete files after CompactRange\n\nExample: https://github.com/facebook/rocksdb/actions/runs/10564621261/job/29267393711?pr=12959\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12974\n\nTest Plan: reproduced failure with USE_CLANG=1 COERCE_CONTEXT_SWITCH=1, now fixed\n\nReviewed By: cbi42\n\nDifferential Revision: D61812600\n\nPulled By: pdillinger\n\nfbshipit-source-id: d4b23e1a179bb8ec39875ed7a8ce1649fa3344bd",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d96e67c2bf7f8907c1edfd27d2e6a37b2a2bfce1"
    },
    {
        "hash": "4df71db246fb0cb7f92c7b5abbe35e398a67ccde",
        "author": "Jay Huh",
        "date": "2024-08-21T10:27:50-07:00",
        "message": "Fix build for macos-arm64-macosx-clang17-no-san (#12949)\n\nSummary:\nWhen merged into internal code base we see the following error. This should fix it.\n\n```\nActions failed:\n    [2024-08-20T07:45:53.879-07:00] Action failed: fbcode//rocksdb/src:rocksdb_lib (cfg:macos-arm64-macosx-clang17-no-san#e5847010950663ca) (cxx_compile util/write_batch_util.cc)\n[2024-08-20T07:45:53.879-07:00] Remote command returned non-zero exit code 1\n[2024-08-20T07:45:53.879-07:00] Remote action, reproduce with: `frecli cas download-action 2fe3749f2d3ea6107cce103d4e2be1dcc76a9df797bae308cde5eaccc65201b7:145`\nfbcode/rocksdb/src/include/rocksdb/write_batch.h:460:14: error: no template named 'unordered_map' in namespace 'std'; did you mean 'unordered_set'?\n  const std::unordered_map<uint32_t, size_t>& GetColumnFamilyToTimestampSize() {\n        ~~~~~^~~~~~~~~~~~~\nfbcode/rocksdb/src/include/rocksdb/write_batch.h:540:8: error: no template named 'unordered_map' in namespace 'std'; did you mean 'unordered_set'?\n  std::unordered_map<uint32_t, size_t> cf_id_to_ts_sz_;\n  ~~~~~^~~~~~~~~~~~~\n/paragon/pods/259551525/home/execution/3/202ac945754041b6bc424b0c35e42c9d/work/buck-out/v2/gen/fbsource/a90614bbe22ec1d7/xplat/toolchains/minimal_xcode/__clang_genrule__/out/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__memory/compressed_pair.h:113:3: error: static_assert failed due to requirement '!is_same<unsigned long, unsigned long>::value' \"__compressed_pair cannot be instantiated when T1 and T2 are the same type; The current implementation is NOT ABI-compatible with the previous implementation for this configuration\"\n  static_assert((!is_same<_T1, _T2>::value),\n  ^              ~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12949\n\nTest Plan: CI\n\nReviewed By: jowlyzhang, cbi42\n\nDifferential Revision: D61577604\n\nPulled By: jaykorean\n\nfbshipit-source-id: 3584a2cd550a303346d80ccc5cc90f4a9b3e2da2",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/write_batch.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4df71db246fb0cb7f92c7b5abbe35e398a67ccde"
    },
    {
        "hash": "21da4ba4aa27f72635f0f5eead6fe8a99c778d38",
        "author": "Peter Dillinger",
        "date": "2024-08-15T10:55:29-07:00",
        "message": "Attempt fix valgrind FP on std::optional (#12936)\n\nSummary:\n```\n[ RUN      ]\nBlockBasedTableReaderTest/BlockBasedTableReaderTest.MultiGet/347\n==49577== Thread 4:\n==49577== Conditional jump or move depends on uninitialised value(s)\n==49577==    at 0x518AF93: operator!=<long unsigned int, long unsigned int> (optional:1115)\n==49577==    by 0x518AF93: rocksdb::(anonymous namespace)::XXPH3FilterBitsBuilder::AddKeyAndAlt(rocksdb::Slice const&, rocksdb::Slice const&) (filter_policy.cc:100)\n==49577==    by 0x5192722: Add (full_filter_block.cc:37)\n==49577==    by 0x5192722: rocksdb::FullFilterBlockBuilder::Add(rocksdb::Slice const&) (full_filter_block.cc:33)\n==49577==    by 0x5125DDB: rocksdb::BlockBasedTableBuilder::BGWorkWriteMaybeCompressedBlock() (block_based_table_builder.cc:1473)\n==49577==    by 0x570C6B3: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29)\n==49577==    by 0x5617608: start_thread (pthread_create.c:477)\n==49577==    by 0x5988132: clone (clone.S:95)\n==49577==\n```\n\nSeems to be explained by ASM that valgrind doesn't like. https://stackoverflow.com/q/51616179\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12936\n\nTest Plan: Wasn't able to reproduce locally\n\nReviewed By: hx235\n\nDifferential Revision: D61338401\n\nPulled By: pdillinger\n\nfbshipit-source-id: b5b10f7f5c6a8c9eb088c00e5699046100167cb7",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/filter_policy.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/21da4ba4aa27f72635f0f5eead6fe8a99c778d38"
    },
    {
        "hash": "b65e29a4a905dfc94c20a6c6266cd8e9f8ea7448",
        "author": "Hui Xiao",
        "date": "2024-08-12T15:21:27-07:00",
        "message": "Loosen a strong assertion in ExpectedValue::Exists() (#12932)\n\nSummary:\n**Context/Summary:** .... since it won't work in the PrepareDelete() path\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12932\n\nTest Plan: CI\n\nReviewed By: cbi42\n\nDifferential Revision: D61155155\n\nPulled By: hx235\n\nfbshipit-source-id: 99b0784f6c903d70c7b3b88b53ae8e2c885de96f",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/expected_value.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b65e29a4a905dfc94c20a6c6266cd8e9f8ea7448"
    },
    {
        "hash": "6727f0f58a1251028eb22e0d74dc0551925189a2",
        "author": "SGZW",
        "date": "2024-08-09T15:06:37-07:00",
        "message": "fix compaction_picker_test asan heap use after free (#12908)\n\nSummary:\n![image](https://github.com/user-attachments/assets/3290fe18-aca2-4691-b072-fbbc96a15fb1)\n\nthis testcase set syncpoint function which reference this test case heap variable \"enable_per_key_placement_\" and this sync point function will be triggered by another testcase, so asan will report asan heap use after free error\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12908\n\nReviewed By: hx235\n\nDifferential Revision: D60973363\n\nPulled By: cbi42\n\nfbshipit-source-id: df4f488f51e7741784d5a92fc0a5fc538c5d5b1a",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_picker_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6727f0f58a1251028eb22e0d74dc0551925189a2"
    },
    {
        "hash": "5c456c4c08ac046429c38792d242dd095c50b049",
        "author": "SGZW",
        "date": "2024-08-09T15:05:02-07:00",
        "message": "fix compaction speedup for marked files ut (#12912)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/12912\n\nReviewed By: hx235\n\nDifferential Revision: D60973460\n\nPulled By: cbi42\n\nfbshipit-source-id: ebaa343757f09f7281884a512ebe3a7d6845c8b3",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5c456c4c08ac046429c38792d242dd095c50b049"
    },
    {
        "hash": "16c21afc061bffba8ec1a518273080e1d59e3d96",
        "author": "Hui Xiao",
        "date": "2024-08-08T15:37:19-07:00",
        "message": "Fix failure to clean the temporary directory due to NotFound in crash test checkpoint creation (#12919)\n\nSummary:\n**Context/Summary:**\nhttps://github.com/facebook/rocksdb/commit/b26b395e0a15255d322be08110db551976188745 propagates `CleanStagingDirectory()` status to `CreateCheckpoint()`.  However, we didn't return early when `Status s = db_->GetEnv()->FileExists(full_private_path);` return non-NotFound non-ok stratus in `CleanStagingDirectory()`. Therefore we can proceed to the next step when `full_private_path` doesn't exist.\n```\nVerification failed: Checkpoint failed: Operation aborted: Failed to clean the temporary directory /dev/shm/rocksdb.J4Su/rocksdb_crashtest_blackbox/.checkpoint28.tmp needed before checkpoint creation : NotFound:\n\ndb_stress: db_stress_tool/db_stress_test_base.cc:549: void rocksdb::StressTest::ProcessStatus(rocksdb::SharedState*, std::string, const rocksdb::Status&, bool) const: Assertion `false' failed.\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12919\n\nTest Plan:\nBelow failed before the fix and passes after\n\n```\n./db_stress --WAL_size_limit_MB=1 --WAL_ttl_seconds=0 --acquire_snapshot_one_in=100 --adaptive_readahead=1 --adm_policy=1 --advise_random_on_open=0 --allow_data_in_errors=True --allow_fallocate=1 --async_io=1 --auto_readahead_size=0 --avoid_flush_during_recovery=1 --avoid_flush_during_shutdown=0 --avoid_unnecessary_blocking_io=1 --backup_max_size=104857600 --backup_one_in=100000 --batch_protection_bytes_per_key=8 --bgerror_resume_retry_interval=1000000 --block_align=0 --block_protection_bytes_per_key=4 --block_size=16384 --bloom_before_level=2 --bloom_bits=4 --bottommost_compression_type=snappy --bottommost_file_compaction_delay=0 --bytes_per_sync=0 --cache_index_and_filter_blocks=1 --cache_index_and_filter_blocks_with_high_priority=0 --cache_size=8388608 --cache_type=auto_hyper_clock_cache --charge_compression_dictionary_building_buffer=0 --charge_file_metadata=1 --charge_filter_construction=1 --charge_table_reader=1 --check_multiget_consistency=0 --check_multiget_entity_consistency=0 --checkpoint_one_in=10000 --checksum_type=kxxHash64 --clear_column_family_one_in=0 --compact_files_one_in=1000 --compact_range_one_in=1000000 --compaction_pri=3 --compaction_readahead_size=1048576 --compaction_ttl=0 --compress_format_version=2 --compressed_secondary_cache_ratio=0.0 --compressed_secondary_cache_size=0 --compression_checksum=0 --compression_max_dict_buffer_bytes=0 --compression_max_dict_bytes=0 --compression_parallel_threads=1 --compression_type=none --compression_use_zstd_dict_trainer=0 --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --daily_offpeak_time_utc= --data_block_index_type=0 --db=/dev/shm/rocksdb.J4Su/rocksdb_crashtest_blackbox --db_write_buffer_size=134217728 --default_temperature=kUnknown --default_write_temperature=kHot --delete_obsolete_files_period_micros=21600000000 --delpercent=4 --delrangepercent=1 --destroy_db_initially=0 --detect_filter_construct_corruption=0 --disable_file_deletions_one_in=1000000 --disable_manual_compaction_one_in=10000 --disable_wal=0 --dump_malloc_stats=0 --enable_checksum_handoff=0 --enable_compaction_filter=0 --enable_custom_split_merge=0 --enable_do_not_compress_roles=1 --enable_index_compression=1 --enable_memtable_insert_with_hint_prefix_extractor=0 --enable_pipelined_write=0 --enable_sst_partitioner_factory=0 --enable_thread_tracking=0 --enable_write_thread_adaptive_yield=1 --error_recovery_with_no_fault_injection=1 --exclude_wal_from_write_fault_injection=0 --expected_values_dir=/dev/shm/rocksdb.J4Su/rocksdb_crashtest_expected --fail_if_options_file_error=1 --fifo_allow_compaction=1 --file_checksum_impl=xxh64 --fill_cache=1 --flush_one_in=1000000 --format_version=6 --get_all_column_family_metadata_one_in=1000000 --get_current_wal_file_one_in=0 --get_live_files_apis_one_in=1000000 --get_properties_of_all_tables_one_in=1000000 --get_property_one_in=1000000 --get_sorted_wal_files_one_in=0 --hard_pending_compaction_bytes_limit=274877906944 --high_pri_pool_ratio=0.5 --index_block_restart_interval=13 --index_shortening=0 --index_type=3 --ingest_external_file_one_in=0 --initial_auto_readahead_size=16384 --inplace_update_support=0 --iterpercent=10 --key_len_percent_dist=1,30,69 --key_may_exist_one_in=100000 --last_level_temperature=kWarm --level_compaction_dynamic_level_bytes=1 --lock_wal_one_in=1000000 --log_file_time_to_roll=0 --log_readahead_size=0 --long_running_snapshots=0 --low_pri_pool_ratio=0 --lowest_used_cache_tier=0 --manifest_preallocation_size=5120 --manual_wal_flush_one_in=1000 --mark_for_compaction_one_file_in=10 --max_auto_readahead_size=16384 --max_background_compactions=20 --max_bytes_for_level_base=10485760 --max_key=2500000 --max_key_len=3 --max_log_file_size=0 --max_manifest_file_size=1073741824 --max_sequential_skip_in_iterations=8 --max_total_wal_size=0 --max_write_batch_group_size_bytes=16 --max_write_buffer_number=10 --max_write_buffer_size_to_maintain=0 --memtable_insert_hint_per_batch=0 --memtable_max_range_deletions=100 --memtable_prefix_bloom_size_ratio=0.1 --memtable_protection_bytes_per_key=4 --memtable_whole_key_filtering=0 --memtablerep=skip_list --metadata_charge_policy=1 --metadata_read_fault_one_in=32 --metadata_write_fault_one_in=128 --min_write_buffer_number_to_merge=2 --mmap_read=1 --mock_direct_io=False --nooverwritepercent=1 --num_file_reads_for_auto_readahead=2 --open_files=500000 --open_metadata_read_fault_one_in=8 --open_metadata_write_fault_one_in=0 --open_read_fault_one_in=0 --open_write_fault_one_in=16 --ops_per_thread=100000000 --optimize_filters_for_hits=0 --optimize_filters_for_memory=1 --optimize_multiget_for_io=0 --paranoid_file_checks=1 --partition_filters=0 --partition_pinning=0 --pause_background_one_in=10000 --periodic_compaction_seconds=0 --prefix_size=7 --prefixpercent=5 --prepopulate_block_cache=1 --preserve_internal_time_seconds=36000 --progress_reports=0 --promote_l0_one_in=0 --read_amp_bytes_per_bit=0 --read_fault_one_in=0 --readahead_size=0 --readpercent=45 --recycle_log_file_num=1 --reopen=0 --report_bg_io_stats=0 --reset_stats_one_in=10000 --sample_for_compression=5 --secondary_cache_fault_one_in=32 --set_options_one_in=10000 --skip_stats_update_on_db_open=1 --snapshot_hold_ops=100000 --soft_pending_compaction_bytes_limit=68719476736 --sqfc_name=foo --sqfc_version=0 --sst_file_manager_bytes_per_sec=104857600 --sst_file_manager_bytes_per_truncate=0 --stats_dump_period_sec=600 --stats_history_buffer_size=1048576 --strict_bytes_per_sync=1 --subcompactions=3 --sync=0 --sync_fault_injection=0 --table_cache_numshardbits=6 --target_file_size_base=524288 --target_file_size_multiplier=2 --test_batches_snapshots=0 --test_cf_consistency=1 --top_level_index_pinning=1 --uncache_aggressiveness=0 --universal_max_read_amp=0 --unpartitioned_pinning=0 --use_adaptive_mutex=0 --use_adaptive_mutex_lru=1 --use_attribute_group=0 --use_delta_encoding=1 --use_direct_io_for_flush_and_compaction=0 --use_direct_reads=0 --use_full_merge_v1=0 --use_get_entity=1 --use_merge=0 --use_multi_cf_iterator=0 --use_multi_get_entity=0 --use_multiget=0 --use_put_entity_one_in=0 --use_sqfc_for_range_queries=1 --use_timed_put_one_in=1 --use_write_buffer_manager=1 --user_timestamp_size=0 --value_size_mult=32 --verification_only=0 --verify_checksum=1 --verify_checksum_one_in=1000 --verify_compression=1 --verify_db_one_in=100000 --verify_file_checksums_one_in=1000 --verify_iterator_with_expected_state_one_in=0 --verify_sst_unique_id_in_manifest=1 --wal_bytes_per_sync=0 --wal_compression=none --write_buffer_size=1048576 --write_dbid_to_manifest=0 --write_fault_one_in=128 --writepercent=35\n```\n\nReviewed By: cbi42\n\nDifferential Revision: D60938952\n\nPulled By: hx235\n\nfbshipit-source-id: 5696cd6b00f33c9f9a256944fecb4e2f4d52a2e6",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/checkpoint/checkpoint_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/16c21afc061bffba8ec1a518273080e1d59e3d96"
    },
    {
        "hash": "b15f8c7f0e7cb3be54060633a85af6b0e40c7489",
        "author": "Peter Dillinger",
        "date": "2024-08-07T11:28:16-07:00",
        "message": "Refactor db_bloom_filter_test (#12911)\n\nSummary:\nAhead of a \"decoupled\" variant of partitioned filters, refactoring this unit test file to make it easier to incorporate that new variant.\n* bool test param to new enum class FilterPartitioning\n* Some cases of iterating over that bool to new parameterized test\n* Combine some common functionality for configuring parameterized options\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12911\n\nTest Plan: no production changes, and no intentional changes to scope or conditions of tests\n\nDifferential Revision: D60701287\n\nfbshipit-source-id: 3497e3230e29a4f62c934bcb75693965a2df41d8",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bloom_filter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b15f8c7f0e7cb3be54060633a85af6b0e40c7489"
    },
    {
        "hash": "36b061a6c7dbba1460d40c9bae5883740b0076aa",
        "author": "Yu Zhang",
        "date": "2024-08-05T12:26:18-07:00",
        "message": "Fix test breakage (#12915)\n\nSummary:\nhttps://github.com/facebook/rocksdb/issues/12891  updated this deletion rate in the test to be much higher, which makes the test flaky. The rate is being intentionally set to very low to maximize the retention of a \".log.trash\" file after DB closes. This PR just change it back.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12915\n\nReviewed By: ltamasi\n\nDifferential Revision: D60776312\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: d193557a042c65816fcc337cceb09905e042e9f6",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/36b061a6c7dbba1460d40c9bae5883740b0076aa"
    },
    {
        "hash": "5e203c76a2b3be439705770e5ebbc8415b1dadf6",
        "author": "Hui Xiao",
        "date": "2024-08-02T10:45:34-07:00",
        "message": "SyncWAL() before Close() when FLAGS_avoid_flush_during_shutdown=true in crash test (#12900)\n\nSummary:\n**Context/Summary:**\nWhen we use WAL and don't flush data during shutdown `FLAGS_avoid_flush_during_shutdown=true`, then we rely on WAL to recover data in next Open() so will need to sync WAL in crash test. Currently the condition is flipped.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12900\n\nTest Plan:\nBelow fails with data loss `Verification failed. Expected state has key 000000000000015D000000000000012B0000000000000147, iterator is at key 000000000000015D000000000000012B0000000000000152` before the fix but not after the fix\n```\n./db_stress --WAL_size_limit_MB=0 --WAL_ttl_seconds=0 --acquire_snapshot_one_in=10000 --adaptive_readahead=1 --adm_policy=3 --advise_random_on_open=1 --allow_concurrent_memtable_write=0 --allow_data_in_errors=True --allow_fallocate=1 --async_io=1 --auto_readahead_size=1 --avoid_flush_during_recovery=0 --avoid_flush_during_shutdown=1 --avoid_unnecessary_blocking_io=0 --backup_max_size=104857600 --backup_one_in=1000 --batch_protection_bytes_per_key=8 --bgerror_resume_retry_interval=100 --block_align=0 --block_protection_bytes_per_key=4 --block_size=16384 --bloom_before_level=0 --bloom_bits=10 --bottommost_compression_type=disable --bottommost_file_compaction_delay=3600 --bytes_per_sync=262144 --cache_index_and_filter_blocks=1 --cache_index_and_filter_blocks_with_high_priority=0 --cache_size=33554432 --cache_type=tiered_auto_hyper_clock_cache --charge_compression_dictionary_building_buffer=1 --charge_file_metadata=0 --charge_filter_construction=0 --charge_table_reader=0 --check_multiget_consistency=0 --check_multiget_entity_consistency=0 --checkpoint_one_in=1000000 --checksum_type=kxxHash64 --clear_column_family_one_in=0 --column_families=1 --compact_files_one_in=1000000 --compact_range_one_in=1000000 --compaction_pri=3 --compaction_readahead_size=0 --compaction_style=1 --compaction_ttl=0 --compress_format_version=1 --compressed_secondary_cache_ratio=0.3333333333333333 --compressed_secondary_cache_size=0 --compression_checksum=1 --compression_max_dict_buffer_bytes=0 --compression_max_dict_bytes=0 --compression_parallel_threads=8 --compression_type=zlib --compression_use_zstd_dict_trainer=0 --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --daily_offpeak_time_utc= --data_block_index_type=1 --db=/dev/shm/rocksdb_test/rocksdb_crashtest_whitebox_2 --db_write_buffer_size=0 --default_temperature=kUnknown --default_write_temperature=kWarm --delete_obsolete_files_period_micros=30000000 --delpercent=4 --delrangepercent=1 --destroy_db_initially=1 --detect_filter_construct_corruption=0 --disable_file_deletions_one_in=1000000 --disable_manual_compaction_one_in=10000 --disable_wal=0 --dump_malloc_stats=0 --enable_checksum_handoff=0 --enable_compaction_filter=0 --enable_custom_split_merge=0 --enable_do_not_compress_roles=0 --enable_index_compression=1 --enable_memtable_insert_with_hint_prefix_extractor=0 --enable_pipelined_write=0 --enable_sst_partitioner_factory=0 --enable_thread_tracking=1 --enable_write_thread_adaptive_yield=1 --error_recovery_with_no_fault_injection=0 --exclude_wal_from_write_fault_injection=1 --expected_values_dir=/dev/shm/rocksdb_test/rocksdb_crashtest_expected_2 --fail_if_options_file_error=1 --fifo_allow_compaction=1 --file_checksum_impl=none --fill_cache=0 --flush_one_in=1000000 --format_version=5 --get_all_column_family_metadata_one_in=1000000 --get_current_wal_file_one_in=0 --get_live_files_apis_one_in=10000 --get_properties_of_all_tables_one_in=100000 --get_property_one_in=1000000 --get_sorted_wal_files_one_in=0 --hard_pending_compaction_bytes_limit=274877906944 --high_pri_pool_ratio=0.5 --index_block_restart_interval=13 --index_shortening=1 --index_type=2 --ingest_external_file_one_in=0 --initial_auto_readahead_size=524288 --inplace_update_support=0 --iterpercent=10 --key_len_percent_dist=1,30,69 --key_may_exist_one_in=100000 --last_level_temperature=kHot --level_compaction_dynamic_level_bytes=0 --lock_wal_one_in=10000 --log2_keys_per_lock=10 --log_file_time_to_roll=60 --log_readahead_size=16777216 --long_running_snapshots=0 --low_pri_pool_ratio=0.5 --lowest_used_cache_tier=0 --manifest_preallocation_size=0 --manual_wal_flush_one_in=0 --mark_for_compaction_one_file_in=0 --max_auto_readahead_size=0 --max_background_compactions=1 --max_bytes_for_level_base=67108864 --max_key=100000 --max_key_len=3 --max_log_file_size=1048576 --max_manifest_file_size=1073741824 --max_sequential_skip_in_iterations=16 --max_total_wal_size=0 --max_write_batch_group_size_bytes=16 --max_write_buffer_number=3 --max_write_buffer_size_to_maintain=8388608 --memtable_insert_hint_per_batch=0 --memtable_max_range_deletions=0 --memtable_prefix_bloom_size_ratio=0.01 --memtable_protection_bytes_per_key=4 --memtable_whole_key_filtering=1 --memtablerep=skip_list --metadata_charge_policy=1 --metadata_read_fault_one_in=0 --metadata_write_fault_one_in=0 --min_write_buffer_number_to_merge=1 --mmap_read=0 --mock_direct_io=True --nooverwritepercent=1 --num_file_reads_for_auto_readahead=2 --open_files=100 --open_metadata_read_fault_one_in=0 --open_metadata_write_fault_one_in=8 --open_read_fault_one_in=0 --open_write_fault_one_in=0 --ops_per_thread=200000 --optimize_filters_for_hits=1 --optimize_filters_for_memory=1 --optimize_multiget_for_io=0 --paranoid_file_checks=0 --partition_filters=0 --partition_pinning=1 --pause_background_one_in=1000000 --periodic_compaction_seconds=0 --prefix_size=1 --prefixpercent=5 --prepopulate_block_cache=0 --preserve_internal_time_seconds=0 --progress_reports=0 --promote_l0_one_in=0 --read_amp_bytes_per_bit=0 --read_fault_one_in=0 --readahead_size=16384 --readpercent=45 --recycle_log_file_num=1 --reopen=20 --report_bg_io_stats=1 --reset_stats_one_in=1000000 --sample_for_compression=0 --secondary_cache_fault_one_in=32 --secondary_cache_uri= --skip_stats_update_on_db_open=1 --snapshot_hold_ops=100000 --soft_pending_compaction_bytes_limit=68719476736 --sqfc_name=foo --sqfc_version=2 --sst_file_manager_bytes_per_sec=104857600 --sst_file_manager_bytes_per_truncate=0 --stats_dump_period_sec=0 --stats_history_buffer_size=0 --strict_bytes_per_sync=1 --subcompactions=3 --sync=0 --sync_fault_injection=1 --table_cache_numshardbits=6 --target_file_size_base=16777216 --target_file_size_multiplier=1 --test_batches_snapshots=0 --top_level_index_pinning=0 --uncache_aggressiveness=4404 --universal_max_read_amp=-1 --unpartitioned_pinning=2 --use_adaptive_mutex=0 --use_adaptive_mutex_lru=1 --use_attribute_group=0 --use_delta_encoding=1 --use_direct_io_for_flush_and_compaction=1 --use_direct_reads=1 --use_full_merge_v1=1 --use_get_entity=0 --use_merge=0 --use_multi_cf_iterator=1 --use_multi_get_entity=0 --use_multiget=1 --use_put_entity_one_in=0 --use_sqfc_for_range_queries=1 --use_timed_put_one_in=0 --use_write_buffer_manager=0 --user_timestamp_size=0 --value_size_mult=32 --verification_only=0 --verify_checksum=1 --verify_checksum_one_in=1000 --verify_compression=1 --verify_db_one_in=10000 --verify_file_checksums_one_in=0 --verify_iterator_with_expected_state_one_in=5 --verify_sst_unique_id_in_manifest=1 --wal_bytes_per_sync=0 --wal_compression=none --write_buffer_size=33554432 --write_dbid_to_manifest=1 --write_fault_one_in=0 --writepercent=35\n\n```\n\nReviewed By: anand1976, ltamasi\n\nDifferential Revision: D60489038\n\nPulled By: hx235\n\nfbshipit-source-id: fb35889ae1509eb1bac27b015bb24a07d3b95268",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5e203c76a2b3be439705770e5ebbc8415b1dadf6"
    },
    {
        "hash": "005256bcc8242e1033e1bc9c36c8c1f13a6918e9",
        "author": "Yu Zhang",
        "date": "2024-08-01T16:21:39-07:00",
        "message": "Fix same user collected property being re-added in stress tests (#12907)\n\nSummary:\nAs titled. The `emplace_back` below will add the same collector factory again during Reopen.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12907\n\nReviewed By: pdillinger\n\nDifferential Revision: D60614170\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: a79498d209e4910a5e94a5cb742935015277918c",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/005256bcc8242e1033e1bc9c36c8c1f13a6918e9"
    },
    {
        "hash": "259547654123f16c7b080b904a0c10b3b8c7fe93",
        "author": "Peter Dillinger",
        "date": "2024-07-30T17:38:30-07:00",
        "message": "Fix rare WAL handling crash (#12899)\n\nSummary:\nA crash test failure in log sync in DBImpl::WriteToWAL is due to a missed case in https://github.com/facebook/rocksdb/issues/12734. Just need to apply similar logic from DBImpl::SyncWalImpl to check for an already closed WAL (nullptr writer). This is extremely rare because it only comes from failed Sync on a closed WAL.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12899\n\nTest Plan: watch crash test\n\nReviewed By: cbi42\n\nDifferential Revision: D60481652\n\nPulled By: pdillinger\n\nfbshipit-source-id: 4a176bb6a53dcf077f88344710a110c2f946c386",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/259547654123f16c7b080b904a0c10b3b8c7fe93"
    },
    {
        "hash": "9883b5f497a6c451065595c8c668728cfa5b8f59",
        "author": "Yu Zhang",
        "date": "2024-07-24T17:50:08-07:00",
        "message": "Fix manifest_number_ point to invalid file (#12882)\n\nSummary:\nThis PR fix `VersionSet`'s `manifest_number_` could be pointing to an invalid number intermediately. This happens when a new manifest roll is attempted but fast failed after loading table handlers and before the new manifest file creation/writing is actually attempted.\n\nIn theory, a later manifest roll effort will overthrow this intermediate invalid in memory state. There is on harm when the DB crashes in this invalid state either. But efforts that takes a file snapshot of the DB like backup will incorrectly try to copy a non existing manifest file.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12882\n\nReviewed By: cbi42\n\nDifferential Revision: D60204956\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: effbdb124b582f879d114988af06ac63867fc549",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9883b5f497a6c451065595c8c668728cfa5b8f59"
    },
    {
        "hash": "05c9c9aeedf315587af8b22a2e4fe4dc0f6784fa",
        "author": "Yu Zhang",
        "date": "2024-07-24T17:06:16-07:00",
        "message": "Fix race between test and recovery flush switch memtable (#12884)\n\nSummary:\nAs titled, to fix this type of data race:\nhttps://github.com/facebook/rocksdb/actions/runs/10066814221/job/27829003372?pr=12882\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12884\n\nTest Plan:\nCOMPILE_WITH_TSAN=1 make -j10 db_wal_test\n./db_wal_test --gtest_filter=DBWALTest.RecoveryFlushSwitchWALOnEmptyMemtable --gtest_repeat=100\n\nReviewed By: anand1976\n\nDifferential Revision: D60197834\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 89524cdb4d17a1b647295bcccf5eb2d7d425bc6a",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_wal_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/05c9c9aeedf315587af8b22a2e4fe4dc0f6784fa"
    },
    {
        "hash": "21db55f8164d2a6519dcc993f74bf7f49c700854",
        "author": "Hui Xiao",
        "date": "2024-07-17T13:39:14-07:00",
        "message": "Move WAL sync before memtable insertion (#12869)\n\nSummary:\n**Context/Summary:**\nWAL sync currently happens after memtable write. This causes inconvenience in stress test as we can't simply rollback the ExpectedState when write fails due to injected WAL sync error so something complicated like https://github.com/facebook/rocksdb/pull/12838 might be needed. After moving WAL sync before memtable insertion, there should not be injected IO error after memtable insertion so we can keep the current simple way of handling failed write in stress test with ExpectedState rollback.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12869\n\nTest Plan:\n1. Below command failed with `iterator has key 0000000000000207000000000000012B0000000000000013, but expected state does not.` before this PR and passes after\n```\n./db_stress  --WAL_size_limit_MB=0 --WAL_ttl_seconds=0 --acquire_snapshot_one_in=10000 --adaptive_readahead=1 --adm_policy=1 --advise_random_on_open=0 --allow_concurrent_memtable_write=0 --allow_data_in_errors=True --allow_fallocate=0 --async_io=0 --auto_readahead_size=0 --avoid_flush_during_recovery=0 --avoid_flush_during_shutdown=0 --avoid_unnecessary_blocking_io=0 --backup_max_size=104857600 --backup_one_in=0 --batch_protection_bytes_per_key=0 --bgerror_resume_retry_interval=1000000 --block_align=1 --block_protection_bytes_per_key=4 --block_size=16384 --bloom_before_level=4 --bloom_bits=56.810257702625165 --bottommost_compression_type=none --bottommost_file_compaction_delay=0 --bytes_per_sync=262144 --cache_index_and_filter_blocks=1 --cache_index_and_filter_blocks_with_high_priority=1 --cache_size=8388608 --cache_type=auto_hyper_clock_cache --charge_compression_dictionary_building_buffer=1 --charge_file_metadata=1 --charge_filter_construction=1 --charge_table_reader=0 --check_multiget_consistency=0 --check_multiget_entity_consistency=1 --checkpoint_one_in=10000 --checksum_type=kxxHash --clear_column_family_one_in=0 --column_families=1 --compact_files_one_in=1000 --compact_range_one_in=1000 --compaction_pri=4 --compaction_readahead_size=1048576 --compaction_ttl=10 --compress_format_version=1 --compressed_secondary_cache_ratio=0.0 --compressed_secondary_cache_size=0 --compression_checksum=0 --compression_max_dict_buffer_bytes=0 --compression_max_dict_bytes=0 --compression_parallel_threads=1 --compression_type=none --compression_use_zstd_dict_trainer=0 --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --daily_offpeak_time_utc=04:00-08:00 --data_block_index_type=1 --db=/dev/shm/rocksdb_test/rocksdb_crashtest_blackbox --db_write_buffer_size=0 --default_temperature=kWarm --default_write_temperature=kCold --delete_obsolete_files_period_micros=30000000 --delpercent=0 --delrangepercent=0 --destroy_db_initially=0 --detect_filter_construct_corruption=0 --disable_file_deletions_one_in=10000 --disable_manual_compaction_one_in=1000000 --disable_wal=0 --dump_malloc_stats=0 --enable_checksum_handoff=1 --enable_compaction_filter=0 --enable_custom_split_merge=0 --enable_do_not_compress_roles=0 --enable_index_compression=1 --enable_memtable_insert_with_hint_prefix_extractor=0 --enable_pipelined_write=0 --enable_sst_partitioner_factory=0 --enable_thread_tracking=0 --enable_write_thread_adaptive_yield=0 --error_recovery_with_no_fault_injection=1 --exclude_wal_from_write_fault_injection=1 --expected_values_dir=/dev/shm/rocksdb_test/rocksdb_crashtest_expected --fail_if_options_file_error=1 --fifo_allow_compaction=0 --file_checksum_impl=crc32c --fill_cache=1 --flush_one_in=1000000 --format_version=3 --get_all_column_family_metadata_one_in=1000000 --get_current_wal_file_one_in=0 --get_live_files_apis_one_in=1000000 --get_properties_of_all_tables_one_in=1000000 --get_property_one_in=100000 --get_sorted_wal_files_one_in=0 --hard_pending_compaction_bytes_limit=274877906944 --high_pri_pool_ratio=0.5 --index_block_restart_interval=4 --index_shortening=2 --index_type=0 --ingest_external_file_one_in=0 --initial_auto_readahead_size=16384 --inplace_update_support=0 --iterpercent=50 --key_len_percent_dist=1,30,69 --key_may_exist_one_in=100 --last_level_temperature=kWarm --level_compaction_dynamic_level_bytes=1 --lock_wal_one_in=10000 --log_file_time_to_roll=60 --log_readahead_size=16777216 --long_running_snapshots=1 --low_pri_pool_ratio=0 --lowest_used_cache_tier=0 --manifest_preallocation_size=0 --manual_wal_flush_one_in=0 --mark_for_compaction_one_file_in=10 --max_auto_readahead_size=16384 --max_background_compactions=1 --max_bytes_for_level_base=67108864 --max_key=100000 --max_key_len=3 --max_log_file_size=1048576 --max_manifest_file_size=32768 --max_sequential_skip_in_iterations=1 --max_total_wal_size=0 --max_write_batch_group_size_bytes=16 --max_write_buffer_number=10 --max_write_buffer_size_to_maintain=8388608 --memtable_insert_hint_per_batch=1 --memtable_max_range_deletions=0 --memtable_prefix_bloom_size_ratio=0.01 --memtable_protection_bytes_per_key=1 --memtable_whole_key_filtering=1 --memtablerep=skip_list --metadata_charge_policy=1 --metadata_read_fault_one_in=32 --metadata_write_fault_one_in=0 --min_write_buffer_number_to_merge=1 --mmap_read=1 --mock_direct_io=False --nooverwritepercent=1 --num_file_reads_for_auto_readahead=1 --open_files=-1 --open_metadata_read_fault_one_in=0 --open_metadata_write_fault_one_in=0 --open_read_fault_one_in=0 --open_write_fault_one_in=0 --ops_per_thread=100000000 --optimize_filters_for_hits=1 --optimize_filters_for_memory=1 --optimize_multiget_for_io=1 --paranoid_file_checks=0 --partition_filters=0 --partition_pinning=3 --pause_background_one_in=1000000 --periodic_compaction_seconds=2 --prefix_size=7 --prefixpercent=0 --prepopulate_block_cache=0 --preserve_internal_time_seconds=0 --progress_reports=0 --promote_l0_one_in=0 --read_amp_bytes_per_bit=0 --read_fault_one_in=1000 --readahead_size=524288 --readpercent=0 --recycle_log_file_num=1 --reopen=0 --report_bg_io_stats=0 --reset_stats_one_in=1000000 --sample_for_compression=0 --secondary_cache_fault_one_in=0 --set_options_one_in=0 --skip_stats_update_on_db_open=1 --snapshot_hold_ops=100000 --soft_pending_compaction_bytes_limit=68719476736 --sqfc_name=foo --sqfc_version=0 --sst_file_manager_bytes_per_sec=104857600 --sst_file_manager_bytes_per_truncate=0 --stats_dump_period_sec=10 --stats_history_buffer_size=0 --strict_bytes_per_sync=1 --subcompactions=4 --sync=1 --sync_fault_injection=0 --table_cache_numshardbits=6 --target_file_size_base=16777216 --target_file_size_multiplier=1 --test_batches_snapshots=0 --top_level_index_pinning=2 --uncache_aggressiveness=239 --universal_max_read_amp=-1 --unpartitioned_pinning=1 --use_adaptive_mutex=1 --use_adaptive_mutex_lru=1 --use_attribute_group=0 --use_delta_encoding=0 --use_direct_io_for_flush_and_compaction=0 --use_direct_reads=0 --use_full_merge_v1=0 --use_get_entity=0 --use_merge=0 --use_multi_cf_iterator=0 --use_multi_get_entity=0 --use_multiget=0 --use_put_entity_one_in=0 --use_sqfc_for_range_queries=1 --use_timed_put_one_in=0 --use_write_buffer_manager=0 --user_timestamp_size=0 --value_size_mult=32 --verification_only=0 --verify_checksum=1 --verify_checksum_one_in=1000000 --verify_compression=0 --verify_db_one_in=100000 --verify_file_checksums_one_in=1000000 --verify_iterator_with_expected_state_one_in=5 --verify_sst_unique_id_in_manifest=1 --wal_bytes_per_sync=0 --wal_compression=none --write_buffer_size=33554432 --write_dbid_to_manifest=0 --write_fault_one_in=128 --writepercent=50\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D59825730\n\nPulled By: hx235\n\nfbshipit-source-id: 7d77aaf177ded2f99bf1ce19f5a4bd0783b9ca92",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/21db55f8164d2a6519dcc993f74bf7f49c700854"
    },
    {
        "hash": "6870cc1187c12458b3c5b4d2ba2f4ac22d5b0049",
        "author": "Hui Xiao",
        "date": "2024-07-16T12:37:50-07:00",
        "message": "Temporally disable log recycle with testing GetLiveFilesStorageInfo() (#12868)\n\nSummary:\n**Context/Summary:**\nWe recently discovered a case where `GetLiveFilesStorageInfo()` failed when `Options::recycle_log_file_num` > 0. Before fixing the incompatibility, we disable these combination in stress test.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12868\n\nTest Plan: monitor CI\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D59820802\n\nPulled By: hx235\n\nfbshipit-source-id: 7b09063af6d72ae0ba187b4cf8887abd8a78e5e8",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6870cc1187c12458b3c5b4d2ba2f4ac22d5b0049"
    },
    {
        "hash": "9e4ee7f0c6aece9d9b2e8ddebf9511146048bc55",
        "author": "Hui Xiao",
        "date": "2024-07-16T10:55:08-07:00",
        "message": "Fix non-okay status being ignored in write path under two_write_queues_ (#12866)\n\nSummary:\nContext/Summary: see above, though the impact is small.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12866\n\nTest Plan: exiting UT\n\nReviewed By: anand1976\n\nDifferential Revision: D59782913\n\nPulled By: hx235\n\nfbshipit-source-id: ec02843645cce49466bde602035d2e61c31965b8",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9e4ee7f0c6aece9d9b2e8ddebf9511146048bc55"
    },
    {
        "hash": "755010f8d33dca65591ffa77e33fcfb181abce0a",
        "author": "WangQian",
        "date": "2024-07-15T15:13:29-07:00",
        "message": "Fix the bug with using the user comparator to compare prefix. (#12862)\n\nSummary:\nFixes https://github.com/facebook/rocksdb/issues/12855\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12862\n\nReviewed By: cbi42\n\nDifferential Revision: D59771651\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: ffe0025143f51f9ce1b46900c3fef6a20eb34f4a",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/755010f8d33dca65591ffa77e33fcfb181abce0a"
    },
    {
        "hash": "cec28aa90f0e38666c0b3485d197ecbe0c2a025f",
        "author": "Changyu Bi",
        "date": "2024-07-10T21:36:44-07:00",
        "message": "Fix SetOptions() failure in stress test (#12854)\n\nSummary:\nfix SetOptions() so that max_read_amp is at least level0_file_num_compaction_trigger.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12854\n\nTest Plan: monitor stress test new failure\n\nReviewed By: hx235\n\nDifferential Revision: D59618547\n\nPulled By: cbi42\n\nfbshipit-source-id: b83371f293b87097ee9cdd32d662e9965cde57e6",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cec28aa90f0e38666c0b3485d197ecbe0c2a025f"
    },
    {
        "hash": "37b81bd28f03e7ef3744fd9ecc28cb4c4e2ae03a",
        "author": "anand76",
        "date": "2024-07-10T15:59:35-07:00",
        "message": "Avoid SyncWAL if flushing during shutdown (#12853)\n\nSummary:\nhttps://github.com/facebook/rocksdb/issues/12746 added calls to FlushWAL/SyncWAL in db_stress during reopen, in order to ensure persistence of unpersisted data and avoid false alarms due to lack of prefix recovery support in db_stress reopen. However, there's no need to flush/sync the WAL if avoid_flush_during_shutdown is false, as the WAL will not be needed during recovery. This allows file systems that don't support SyncWAL (not thread safe) to avoid the need by requesting flush during shutdown.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12853\n\nReviewed By: hx235\n\nDifferential Revision: D59604138\n\nPulled By: anand1976\n\nfbshipit-source-id: 4c4470b3c956d6bf64f5b8a1a5727a8b888f1a5f",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/37b81bd28f03e7ef3744fd9ecc28cb4c4e2ae03a"
    },
    {
        "hash": "ebe2116240a4efac4226975b975917f889010aa2",
        "author": "Hui Xiao",
        "date": "2024-07-09T15:35:54-07:00",
        "message": "Remove false-postive assertion in `FaultInjectionTestFS::RenameFile` (#12828)\n\nSummary:\n**Context/Summary:**\nThe assertion `tlist.find(tdn.second) == tlist.end()` https://github.com/facebook/rocksdb/blame/9eebaf11cbd875435b572f05f0378ecdb761cc74/utilities/fault_injection_fs.cc#L1003 can catch us false positive.\n\nSome context\n(1) When fault injection is enabled and db open fails because of that, crash test will retry open without injected error in order to proceed with a clean open:\nhttps://github.com/facebook/rocksdb/blob/9eebaf11cbd875435b572f05f0378ecdb761cc74/db_stress_tool/db_stress_test_base.cc#L3559\nhttps://github.com/facebook/rocksdb/blob/9eebaf11cbd875435b572f05f0378ecdb761cc74/db_stress_tool/db_stress_test_base.cc#L3586-L3639\n(2)\na. `FaultInjectionTestFS::dir_to_new_files_since_last_sync` records files that are created but not yet synced.\nb. When we create CURRENT, we will first create a temp file and rename it as \"CURRENT\". As part of the renaming, we will [assert](https://github.com/facebook/rocksdb/blame/9eebaf11cbd875435b572f05f0378ecdb761cc74/utilities/fault_injection_fs.cc#L1003) `FaultInjectionTestFS::dir_to_new_files_since_last_sync ` doesn't already have a file named `CURRENT`.\n\nSuppose the following sequence of events happened:\n\n(1) 1st open, with metadata write error\n1. As part of creating CURRENT file, added \"CURRENT\" to `FaultInjectionTestFS::dir_to_new_files_since_last_sync_`\nhttps://github.com/facebook/rocksdb/blob/9eebaf11cbd875435b572f05f0378ecdb761cc74/utilities/fault_injection_fs.cc#L735\n2.  `SyncDir()` here https://github.com/facebook/rocksdb/blob/9eebaf11cbd875435b572f05f0378ecdb761cc74/file/filename.cc#L412 failed with injected metadata write error. Therefore, \"CURRENT\" file didn't get removed from `FaultInjectionTestFS::dir_to_new_files_since_last_sync_` as it would if `SyncDir()` succeeded https://github.com/facebook/rocksdb/blob/9eebaf11cbd875435b572f05f0378ecdb761cc74/utilities/fault_injection_fs.h#L344\n\n(2) 2st open\n1. Attempted to create a CURRENT file and failed during renaming since `FaultInjectionTestFS::dir_to_new_files_since_last_sync_` already had a file called CURRENT. So  will fail\n```\nassertion failed - tlist.find(tdn.second) == tlist.end()\n```\n\nThis PR fixed this by removing the assertion. It used to catch us some missing sync of some directory (e.,g https://github.com/facebook/rocksdb/pull/10573) so we will keep thinking about a better way to catch that.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12828\n\nTest Plan:\nCommand constantly failed before the fix but passed after the PR running for 10 minutes\n```\npython3 tools/db_crashtest.py --simple blackbox --interval=10 --WAL_size_limit_MB=1 --WAL_ttl_seconds=60 --acquire_snapshot_one_in=100 --adaptive_readahead=1 --adm_policy=2 --advise_random_on_open=1 --allow_concurrent_memtable_write=1 --allow_data_in_errors=True --allow_fallocate=1 --async_io=0 --auto_readahead_size=1 --avoid_flush_during_recovery=0 --avoid_flush_during_shutdown=0 --avoid_unnecessary_blocking_io=0 --backup_max_size=104857600 --backup_one_in=100000 --batch_protection_bytes_per_key=0 --bgerror_resume_retry_interval=100 --block_align=0 --block_protection_bytes_per_key=8 --block_size=16384 --bloom_before_level=1 --bloom_bits=10 --bottommost_compression_type=lz4hc --bottommost_file_compaction_delay=86400 --bytes_per_sync=0 --cache_index_and_filter_blocks=1 --cache_index_and_filter_blocks_with_high_priority=0 --cache_size=8388608 --cache_type=tiered_auto_hyper_clock_cache --charge_compression_dictionary_building_buffer=1 --charge_file_metadata=0 --charge_filter_construction=0 --charge_table_reader=0 --check_multiget_consistency=0 --check_multiget_entity_consistency=0 --checkpoint_one_in=10000 --checksum_type=kCRC32c --clear_column_family_one_in=0 --column_families=1 --compact_files_one_in=1000 --compact_range_one_in=1000000 --compaction_pri=3 --compaction_readahead_size=0 --compaction_ttl=1 --compress_format_version=1 --compressed_secondary_cache_ratio=0.5 --compressed_secondary_cache_size=0 --compression_checksum=0 --compression_max_dict_buffer_bytes=15 --compression_max_dict_bytes=16384 --compression_parallel_threads=1 --compression_type=zstd --compression_use_zstd_dict_trainer=1 --compression_zstd_max_train_bytes=65536 --continuous_verification_interval=0 --daily_offpeak_time_utc= --data_block_index_type=1 --db_write_buffer_size=0 --default_temperature=kHot --default_write_temperature=kUnknown --delete_obsolete_files_period_micros=30000000 --delpercent=4 --delrangepercent=1 --destroy_db_initially=0 --detect_filter_construct_corruption=1 --disable_file_deletions_one_in=10000 --disable_manual_compaction_one_in=10000 --disable_wal=0 --dump_malloc_stats=0 --enable_checksum_handoff=1 --enable_compaction_filter=0 --enable_custom_split_merge=0 --enable_do_not_compress_roles=0 --enable_index_compression=1 --enable_memtable_insert_with_hint_prefix_extractor=0 --enable_pipelined_write=0 --enable_sst_partitioner_factory=1 --enable_thread_tracking=1 --enable_write_thread_adaptive_yield=0 --error_recovery_with_no_fault_injection=1 --exclude_wal_from_write_fault_injection=1 --fail_if_options_file_error=1 --fifo_allow_compaction=0 --file_checksum_impl=crc32c --fill_cache=1 --flush_one_in=1000000 --format_version=3 --get_all_column_family_metadata_one_in=1000000 --get_current_wal_file_one_in=0 --get_live_files_apis_one_in=1000000 --get_properties_of_all_tables_one_in=100000 --get_property_one_in=100000 --get_sorted_wal_files_one_in=0 --hard_pending_compaction_bytes_limit=2097152 --high_pri_pool_ratio=0 --index_block_restart_interval=2 --index_shortening=0 --index_type=2 --ingest_external_file_one_in=0 --initial_auto_readahead_size=16384 --inplace_update_support=0 --iterpercent=10 --key_len_percent_dist=1,30,69 --key_may_exist_one_in=100000 --last_level_temperature=kWarm --level_compaction_dynamic_level_bytes=0 --lock_wal_one_in=10000 --log_file_time_to_roll=60 --log_readahead_size=16777216 --long_running_snapshots=1 --low_pri_pool_ratio=0.5 --lowest_used_cache_tier=1 --manifest_preallocation_size=0 --manual_wal_flush_one_in=0 --mark_for_compaction_one_file_in=10 --max_auto_readahead_size=16384 --max_background_compactions=1 --max_bytes_for_level_base=67108864 --max_key=1000000 --max_key_len=3 --max_log_file_size=0 --max_manifest_file_size=1073741824 --max_sequential_skip_in_iterations=1 --max_total_wal_size=0 --max_write_batch_group_size_bytes=16 --max_write_buffer_number=3 --max_write_buffer_size_to_maintain=2097152 --memtable_insert_hint_per_batch=0 --memtable_max_range_deletions=0 --memtable_prefix_bloom_size_ratio=0.1 --memtable_protection_bytes_per_key=8 --memtable_whole_key_filtering=0 --memtablerep=skip_list --metadata_charge_policy=1 --metadata_read_fault_one_in=32 --metadata_write_fault_one_in=0 --min_write_buffer_number_to_merge=2 --mmap_read=1 --mock_direct_io=False --nooverwritepercent=1 --num_file_reads_for_auto_readahead=1 --open_files=-1 --open_metadata_read_fault_one_in=0 --open_metadata_write_fault_one_in=8 --open_read_fault_one_in=0 --open_write_fault_one_in=0 --ops_per_thread=100000000 --optimize_filters_for_hits=0 --optimize_filters_for_memory=0 --optimize_multiget_for_io=1 --paranoid_file_checks=1 --partition_filters=1 --partition_pinning=3 --pause_background_one_in=1000000 --periodic_compaction_seconds=1000 --prefix_size=5 --prefixpercent=5 --prepopulate_block_cache=1 --preserve_internal_time_seconds=0 --progress_reports=0 --promote_l0_one_in=0 --read_amp_bytes_per_bit=32 --read_fault_one_in=0 --readahead_size=524288 --readpercent=45 --recycle_log_file_num=0 --reopen=0 --report_bg_io_stats=0 --reset_stats_one_in=1000000 --sample_for_compression=0 --secondary_cache_fault_one_in=32 --secondary_cache_uri= --set_options_one_in=0 --skip_stats_update_on_db_open=0 --snapshot_hold_ops=100000 --soft_pending_compaction_bytes_limit=68719476736 --sqfc_name=foo --sqfc_version=1 --sst_file_manager_bytes_per_sec=0 --sst_file_manager_bytes_per_truncate=0 --stats_dump_period_sec=10 --stats_history_buffer_size=1048576 --strict_bytes_per_sync=1 --subcompactions=2 --sync=0 --sync_fault_injection=1 --table_cache_numshardbits=6 --target_file_size_base=16777216 --target_file_size_multiplier=1 --test_batches_snapshots=0 --top_level_index_pinning=2 --uncache_aggressiveness=1582 --universal_max_read_amp=4 --unpartitioned_pinning=0 --use_adaptive_mutex=0 --use_adaptive_mutex_lru=1 --use_attribute_group=1 --use_delta_encoding=0 --use_direct_io_for_flush_and_compaction=0 --use_direct_reads=0 --use_full_merge_v1=0 --use_get_entity=0 --use_merge=0 --use_multi_cf_iterator=1 --use_multi_get_entity=1 --use_multiget=0 --use_put_entity_one_in=1 --use_sqfc_for_range_queries=1 --use_timed_put_one_in=0 --use_write_buffer_manager=0 --user_timestamp_size=0 --value_size_mult=32 --verification_only=0 --verify_checksum=1 --verify_checksum_one_in=1000 --verify_compression=1 --verify_db_one_in=10000 --verify_file_checksums_one_in=1000 --verify_iterator_with_expected_state_one_in=5 --verify_sst_unique_id_in_manifest=1 --wal_bytes_per_sync=0 --wal_compression=none --write_buffer_size=33554432 --write_dbid_to_manifest=1 --write_fault_one_in=8 --writepercent=35\n```\n\nReviewed By: cbi42\n\nDifferential Revision: D59241548\n\nPulled By: hx235\n\nfbshipit-source-id: 5bb49e6a94943273f47578a2caf3d08ca5b67e5f",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/fault_injection_fs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ebe2116240a4efac4226975b975917f889010aa2"
    },
    {
        "hash": "62b62cf135dc4e6b693aa9a07dc94112781fd11b",
        "author": "Jeffery",
        "date": "2024-07-08T21:38:21-07:00",
        "message": "Fix CondVar::TimedWait for Windows (#12815)\n\nSummary:\nBased on https://github.com/microsoft/STL/issues/369\nThey fixed the issue in `std::condition_variable_any` but not in `std::condition_variable`, which is currently used in rocksdb repo. So we need to implement the work around regardless of `_MSVC_STL_UPDATE`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12815\n\nReviewed By: cbi42\n\nDifferential Revision: D59493690\n\nPulled By: ajkr\n\nfbshipit-source-id: ad0fc9ef9f2357347d21e271c2f1d0a3a97d89be",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/port_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/62b62cf135dc4e6b693aa9a07dc94112781fd11b"
    },
    {
        "hash": "f471e561905148d8001ed08e7ac0e80685e572f6",
        "author": "WangQian",
        "date": "2024-07-08T15:59:02-07:00",
        "message": "fix the non initialized bug in StderrLogger. (#12839)\n\nSummary:\nThis PR is intended to fix a potential uninitialized variable bug.\n\nFixes https://github.com/facebook/rocksdb/issues/12837\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12839\n\nReviewed By: ajkr\n\nDifferential Revision: D59398888\n\nPulled By: cbi42\n\nfbshipit-source-id: 337391d7c1e73c0ff61797f88fbb4a8379500211",
        "modified_files_count": 1,
        "modified_files": [
            "util/stderr_logger.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f471e561905148d8001ed08e7ac0e80685e572f6"
    },
    {
        "hash": "1f589a3f730c3013b6b80373471b0cd2ae8fde1a",
        "author": "Hui Xiao",
        "date": "2024-07-02T13:15:00-07:00",
        "message": "Clarify GetProperty API doc (#12829)\n\nSummary:\n**Context/Summary:** as titled since https://github.com/facebook/rocksdb/blob/9eebaf11cbd875435b572f05f0378ecdb761cc74/db/internal_stats.cc#L1162.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12829\n\nTest Plan: no code change\n\nReviewed By: pdillinger\n\nDifferential Revision: D59243565\n\nPulled By: hx235\n\nfbshipit-source-id: 074137b29bb12d9d965d154626a3289f85a39c52",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1f589a3f730c3013b6b80373471b0cd2ae8fde1a"
    },
    {
        "hash": "84296bc2489ab24e023fe3d9bc93160f6b91fe29",
        "author": "Hui Xiao",
        "date": "2024-07-01T16:40:57-07:00",
        "message": "Reset seen_injected_error_ with seen_error_ (#12830)\n\nSummary:\n**Context/Summary** : as titled as seen_injected_error_ is a subcategory of seen_error_\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12830\n\nTest Plan: existing CI as it only affects crash test code\n\nReviewed By: jaykorean\n\nDifferential Revision: D59249018\n\nPulled By: hx235\n\nfbshipit-source-id: 20e4c22cade57e12a104a03999e4c841a3648b11",
        "modified_files_count": 1,
        "modified_files": [
            "file/writable_file_writer.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/84296bc2489ab24e023fe3d9bc93160f6b91fe29"
    },
    {
        "hash": "093f4ef82cdd599896517f5414ee9ae7f6af3b35",
        "author": "Jeffery",
        "date": "2024-07-01T16:14:19-07:00",
        "message": "Fix db_rate_limiter_test for win (#12816)\n\nSummary:\nWe didn't implement file system prefetch for OS Win. During table open, it uses `FilePrefetchBuffer` instead and only do 1 read instead of 4 in BufferedIO.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12816\n\nReviewed By: jaykorean\n\nDifferential Revision: D59181835\n\nPulled By: ajkr\n\nfbshipit-source-id: 18b8f0247408cd1a80f289357ede5232ae5a3c66",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_rate_limiter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/093f4ef82cdd599896517f5414ee9ae7f6af3b35"
    },
    {
        "hash": "9eebaf11cbd875435b572f05f0378ecdb761cc74",
        "author": "Changyu Bi",
        "date": "2024-07-01T12:17:22-07:00",
        "message": "Fix stress test `SetOptions()` setting incompatible options (#12827)\n\nSummary:\nTo fix errors like \"Verification failed: SetOptions failed: Invalid argument: max_successive_merges > 0 is incompatible with unordered_write\".\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12827\n\nTest Plan: no new crash test failure due to this option combination.\n\nReviewed By: hx235\n\nDifferential Revision: D59233002\n\nPulled By: cbi42\n\nfbshipit-source-id: 2a3e4d57a56f07bdda49ea36f0f9f6a30f17bbc3",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9eebaf11cbd875435b572f05f0378ecdb761cc74"
    },
    {
        "hash": "69ad597b4600d17085672d93993ff9e538ed4663",
        "author": "Hui Xiao",
        "date": "2024-07-01T10:53:51-07:00",
        "message": "Disable fault injection for TestGetProperty (#12825)\n\nSummary:\n**Context/Summary:**\nSee titled; along with one more minor fix to other disabling\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12825\n\nTest Plan: CI won't show `Failed to get DB property: rocksdb.aggregated-table-properties`\n\nReviewed By: jaykorean\n\nDifferential Revision: D59231819\n\nPulled By: hx235\n\nfbshipit-source-id: a8e73c9e06eeceb4c6025a4885823a3eba25c359",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/69ad597b4600d17085672d93993ff9e538ed4663"
    },
    {
        "hash": "0b10e7dbbae4773e56ae6de5cb3d699faaa7ac1f",
        "author": "Hui Xiao",
        "date": "2024-06-28T12:01:13-07:00",
        "message": "Ignore more non-critical IO error in BlockCacheLookupForReadAheadSize() in crash test (#12822)\n\nSummary:\n**Context/Summary:**\nSimilar to https://github.com/facebook/rocksdb/pull/12814#issue-2376803461\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12822\n\nTest Plan: CI\n\nReviewed By: jaykorean\n\nDifferential Revision: D59166188\n\nPulled By: hx235\n\nfbshipit-source-id: 68c2eb7b319103ede0ba34944a0737440aecb17f",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0b10e7dbbae4773e56ae6de5cb3d699faaa7ac1f"
    },
    {
        "hash": "aec15eebec08429142fde04a4006303412def90c",
        "author": "Hui Xiao",
        "date": "2024-06-26T23:02:28-07:00",
        "message": "Ignore non-critical IO error in `BlockCacheLookupForReadAheadSize()` in crash test (#12814)\n\nSummary:\n**Context/Summary:**\n\nError in `BlockCacheLookupForReadAheadSize()` is not critical enough to return such error in read path. That's because the worst case is to not have any read ahead. See below comment. https://github.com/facebook/rocksdb/blob/a31fe521732c6150003ea43f1e30f27f13be597c/table/block_based/block_based_table_iterator.cc#L867-L871\n\nTherefore we should allow the read to return ok() even when we inject read error there.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12814\n\nTest Plan:\nBelow command failed with ` Didn't get expected error from PrefixScan` before the fix but passes after\n\n```\n./db_stress --WAL_size_limit_MB=0 --WAL_ttl_seconds=60 --acquire_snapshot_one_in=100 --adaptive_readahead=0 --adm_policy=3 --advise_random_on_open=0 --allow_concurrent_memtable_write=0 --allow_data_in_errors=True --allow_fallocate=1 --async_io=0 --auto_readahead_size=1 --avoid_flush_during_recovery=0 --avoid_flush_during_shutdown=1 --avoid_unnecessary_blocking_io=1 --backup_max_size=104857600 --backup_one_in=1000 --batch_protection_bytes_per_key=8 --bgerror_resume_retry_interval=1000000 --block_align=0 --block_protection_bytes_per_key=1 --block_size=16384 --bloom_before_level=5 --bloom_bits=29.31310447925055 --bottommost_compression_type=lz4hc --bottommost_file_compaction_delay=0 --bytes_per_sync=262144 --cache_index_and_filter_blocks=1 --cache_index_and_filter_blocks_with_high_priority=0 --cache_size=8388608 --cache_type=tiered_auto_hyper_clock_cache --charge_compression_dictionary_building_buffer=0 --charge_file_metadata=1 --charge_filter_construction=0 --charge_table_reader=1 --check_multiget_consistency=0 --check_multiget_entity_consistency=0 --checkpoint_one_in=1000000 --checksum_type=kxxHash64 --clear_column_family_one_in=0 --column_families=1 --compact_files_one_in=1000000 --compact_range_one_in=1000000 --compaction_pri=0 --compaction_readahead_size=0 --compaction_ttl=0 --compress_format_version=2 --compressed_secondary_cache_ratio=0.6666666666666666 --compressed_secondary_cache_size=0 --compression_checksum=1 --compression_max_dict_buffer_bytes=0 --compression_max_dict_bytes=0 --compression_parallel_threads=1 --compression_type=lz4 --compression_use_zstd_dict_trainer=0 --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --daily_offpeak_time_utc= --data_block_index_type=0 --db=/dev/shm/rocksdb_test/rocksdb_crashtest_whitebox --db_write_buffer_size=8388608 --default_temperature=kHot --default_write_temperature=kHot --delete_obsolete_files_period_micros=30000000 --delpercent=4 --delrangepercent=1 --destroy_db_initially=0 --detect_filter_construct_corruption=1 --disable_file_deletions_one_in=10000 --disable_manual_compaction_one_in=10000 --disable_wal=0 --dump_malloc_stats=0 --enable_checksum_handoff=1 --enable_compaction_filter=0 --enable_custom_split_merge=0 --enable_do_not_compress_roles=1 --enable_index_compression=0 --enable_memtable_insert_with_hint_prefix_extractor=0 --enable_pipelined_write=1 --enable_sst_partitioner_factory=0 --enable_thread_tracking=1 --enable_write_thread_adaptive_yield=1 --error_recovery_with_no_fault_injection=0 --exclude_wal_from_write_fault_injection=0 --expected_values_dir=/dev/shm/rocksdb_test/rocksdb_crashtest_expected --fail_if_options_file_error=0 --fifo_allow_compaction=0 --file_checksum_impl=big --fill_cache=1 --flush_one_in=1000 --format_version=3 --get_all_column_family_metadata_one_in=1000000 --get_current_wal_file_one_in=0 --get_live_files_apis_one_in=10000 --get_properties_of_all_tables_one_in=100000 --get_property_one_in=1000000 --get_sorted_wal_files_one_in=0 --hard_pending_compaction_bytes_limit=274877906944 --high_pri_pool_ratio=0 --index_block_restart_interval=2 --index_shortening=0 --index_type=2 --ingest_external_file_one_in=1000 --initial_auto_readahead_size=0 --inplace_update_support=0 --iterpercent=10 --key_len_percent_dist=1,30,69 --key_may_exist_one_in=100 --last_level_temperature=kHot --level_compaction_dynamic_level_bytes=0 --lock_wal_one_in=1000000 --log2_keys_per_lock=10 --log_file_time_to_roll=60 --log_readahead_size=0 --long_running_snapshots=0 --low_pri_pool_ratio=0 --lowest_used_cache_tier=2 --manifest_preallocation_size=0 --manual_wal_flush_one_in=0 --mark_for_compaction_one_file_in=0 --max_auto_readahead_size=16384 --max_background_compactions=1 --max_bytes_for_level_base=67108864 --max_key=100000 --max_key_len=3 --max_log_file_size=0 --max_manifest_file_size=1073741824 --max_sequential_skip_in_iterations=1 --max_total_wal_size=0 --max_write_batch_group_size_bytes=16 --max_write_buffer_number=10 --max_write_buffer_size_to_maintain=2097152 --memtable_insert_hint_per_batch=0 --memtable_max_range_deletions=0 --memtable_prefix_bloom_size_ratio=0.1 --memtable_protection_bytes_per_key=8 --memtable_whole_key_filtering=1 --memtablerep=skip_list --metadata_charge_policy=0 --metadata_read_fault_one_in=32 --metadata_write_fault_one_in=128 --min_write_buffer_number_to_merge=2 --mmap_read=0 --mock_direct_io=True --nooverwritepercent=1 --num_file_reads_for_auto_readahead=1 --open_files=100 --open_metadata_read_fault_one_in=0 --open_metadata_write_fault_one_in=8 --open_read_fault_one_in=0 --open_write_fault_one_in=0 --ops_per_thread=20000000 --optimize_filters_for_hits=0 --optimize_filters_for_memory=1 --optimize_multiget_for_io=0 --paranoid_file_checks=1 --partition_filters=1 --partition_pinning=2 --pause_background_one_in=10000 --periodic_compaction_seconds=0 --prefix_size=5 --prefixpercent=5 --prepopulate_block_cache=1 --preserve_internal_time_seconds=0 --progress_reports=0 --promote_l0_one_in=0 --read_amp_bytes_per_bit=32 --read_fault_one_in=1000 --readahead_size=524288 --readpercent=45 --recycle_log_file_num=0 --reopen=20 --report_bg_io_stats=1 --reset_stats_one_in=1000000 --sample_for_compression=5 --secondary_cache_fault_one_in=32 --secondary_cache_uri= --skip_stats_update_on_db_open=1 --snapshot_hold_ops=100000 --soft_pending_compaction_bytes_limit=1048576 --sqfc_name=foo --sqfc_version=1 --sst_file_manager_bytes_per_sec=0 --sst_file_manager_bytes_per_truncate=0 --stats_dump_period_sec=600 --stats_history_buffer_size=0 --strict_bytes_per_sync=1 --subcompactions=2 --sync=0 --sync_fault_injection=0 --table_cache_numshardbits=6 --target_file_size_base=16777216 --target_file_size_multiplier=1 --test_batches_snapshots=0 --top_level_index_pinning=1 --uncache_aggressiveness=203 --universal_max_read_amp=10 --unpartitioned_pinning=0 --use_adaptive_mutex=1 --use_adaptive_mutex_lru=1 --use_attribute_group=0 --use_delta_encoding=0 --use_direct_io_for_flush_and_compaction=1 --use_direct_reads=0 --use_full_merge_v1=1 --use_get_entity=0 --use_merge=0 --use_multi_cf_iterator=0 --use_multi_get_entity=0 --use_multiget=1 --use_put_entity_one_in=0 --use_sqfc_for_range_queries=1 --use_timed_put_one_in=0 --use_write_buffer_manager=0 --user_timestamp_size=0 --value_size_mult=32 --verification_only=0 --verify_checksum=1 --verify_checksum_one_in=1000000 --verify_compression=1 --verify_db_one_in=10000 --verify_file_checksums_one_in=1000 --verify_iterator_with_expected_state_one_in=5 --verify_sst_unique_id_in_manifest=1 --wal_bytes_per_sync=0 --wal_compression=none --write_buffer_size=33554432 --write_dbid_to_manifest=0 --write_fault_one_in=1000 --writepercent=35\n```\n\nReviewed By: jaykorean\n\nDifferential Revision: D59092430\n\nPulled By: hx235\n\nfbshipit-source-id: 39558c34461ce92275cae706c33dfd00e6f0ecce",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aec15eebec08429142fde04a4006303412def90c"
    },
    {
        "hash": "41c6b4549ab0dccfb15b7af038f7803cbe8c5f23",
        "author": "Hui Xiao",
        "date": "2024-06-26T13:29:10-07:00",
        "message": "Revert back to previous ReadAsync error injection (#12811)\n\nSummary:\n**Context/Summary:**\nhttps://github.com/facebook/rocksdb/pull/12713 adjusted the error injection in ReadAsync. See original behavior here https://github.com/facebook/rocksdb/blob/71f9e6b5b36e3223e8dba29df75e4e5008818d16/utilities/fault_injection_fs.cc#L456-L484\n\nThe PR returns the injected error instead of the ReadAsync() status. It also allows cb to be call in `TestFSRandomAccessFile` layer when ReadAsync() and the cb can called within `FSRandomAccessFile` layer so cb can be double called. It appears to be the root-cause of the following frequent error`AddressSanitizer: heap-use-after-free on rocksdb::RandomAccessFileReader::ReadAsync` though I don't have a confirmed repro yet. Considering this change to mostly revert to previous behavior, it should be safe to proceed anyway.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12811\n\nTest Plan: Monitor CI\n\nReviewed By: jaykorean\n\nDifferential Revision: D59067927\n\nPulled By: hx235\n\nfbshipit-source-id: 8645e5a52d44b7ed2186438f885b4ea13f10b59d",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/fault_injection_fs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/41c6b4549ab0dccfb15b7af038f7803cbe8c5f23"
    },
    {
        "hash": "58bc4db456883f14cf0924ea87126f61e8139656",
        "author": "Hui Xiao",
        "date": "2024-06-26T13:09:23-07:00",
        "message": "Print more debugging info & further disable backup/restore error inejction (#12812)\n\nSummary:\n**Context/Summary:**\nPrint more info for debugging a TestCheckpoint error; further disable backup/restore error injection as it has not been stabilized with our new thread-local error injection. Will need to enable it separately later.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12812\n\nTest Plan: CI\n\nReviewed By: jaykorean\n\nDifferential Revision: D59072678\n\nPulled By: hx235\n\nfbshipit-source-id: 9481ccf62db952288e7f47ee4b68a34ad0651d5c",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/58bc4db456883f14cf0924ea87126f61e8139656"
    },
    {
        "hash": "a06a7fdc888cb7a80c8879c191a6b8c668dc46f4",
        "author": "Richard Barnes",
        "date": "2024-06-26T07:26:20-07:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/util/xxhash.h\n\nSummary:\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: dmm-fb\n\nDifferential Revision: D59007259\n\nfbshipit-source-id: ee0e01e1cc14ebe183d3b74153ef77f11625d983",
        "modified_files_count": 1,
        "modified_files": [
            "util/xxhash.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a06a7fdc888cb7a80c8879c191a6b8c668dc46f4"
    },
    {
        "hash": "e3f5125ff1afea7a1e3c28a7c35f93f947ae0377",
        "author": "Changyu Bi",
        "date": "2024-06-24T14:50:08-07:00",
        "message": "Fix \"no new line at end of file\" (#12806)\n\nSummary:\ninternal CI with -Wnewline-eof complains about this.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12806\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D58969551\n\nPulled By: cbi42\n\nfbshipit-source-id: f97bd23f82129bac8dfd97b0ff4dbf7d2ded95d4",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/user_write_callback.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e3f5125ff1afea7a1e3c28a7c35f93f947ae0377"
    },
    {
        "hash": "fa4ffc816c7801fd8e5dfdeafe29f29d2987f68d",
        "author": "Yu Zhang",
        "date": "2024-06-24T11:45:28-07:00",
        "message": "Fix race condition between event listener and error handler (#12803)\n\nSummary:\nFix a race for accessing `bg_error_` after mutex is released. We make some copies before releasing to avoid this.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12803\n\nReviewed By: cbi42\n\nDifferential Revision: D58957557\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 3c7369a3b8c8707aebc0044ff98288c898c05cb8",
        "modified_files_count": 1,
        "modified_files": [
            "db/event_helpers.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fa4ffc816c7801fd8e5dfdeafe29f29d2987f68d"
    },
    {
        "hash": "5c391c7713aa4d009323448502dabd1055afffbb",
        "author": "Richard Barnes",
        "date": "2024-06-24T09:30:20-07:00",
        "message": "Fix deprecated dynamic exception in infra_asic_fpga/validation/freya/bmtc/ssp/src/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/c++/9.2.1/tr1/special_function_util.h +5\n\nSummary:\nLLVM has detected a violation of `-Wdeprecated-dynamic-exception-spec`. Dynamic exceptions were removed in C++17. This diff fixes the deprecated instance(s).\n\nSee [Dynamic exception specification](https://en.cppreference.com/w/cpp/language/except_spec) and [noexcept specifier](https://en.cppreference.com/w/cpp/language/noexcept_spec).\n\nReviewed By: dmm-fb\n\nDifferential Revision: D58953050\n\nfbshipit-source-id: 8559dc925ea5ed0a6dbf938aa02ee810f01047ae",
        "modified_files_count": 1,
        "modified_files": [
            "port/jemalloc_helper.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5c391c7713aa4d009323448502dabd1055afffbb"
    },
    {
        "hash": "e90e9153d5169f9df8ddd3cf0bf693572768a7b5",
        "author": "Hui Xiao",
        "date": "2024-06-23T21:54:27-07:00",
        "message": "Calculate `injected_error_count` even when `SharedState::ignore_read_error` (#12800)\n\nSummary:\n**Context/Summary:**\n\n`injected_error_count` is needed to verify read error injection. For example, when injected_error_count == 0, the read call should not return error. https://github.com/facebook/rocksdb/commit/981fd432fa2441fc10a59a462bd14906ccb1c0e0 only calculated `injected_error_count` under `SharedState::ignore_read_error=false` so `injected_error_count==0` when `SharedState::ignore_read_error=true`. However  we can still inject read error in critical read path under `SharedState::ignore_read_error=true` so the read call is expected to return injected error. This contradicts to the  `injected_error_count == 0` as we skipped its calculation. As a consequence, we see\n\n```\nTestPrefixScan error: IO error: injected read error;\nVerification failed\n```\nin code paths\n```\nif (s.ok()) {\n    thread->stats.AddPrefixes(1, count);\n  } else if (injected_error_count > 0 && IsRetryableInjectedError(s)) {\n    fprintf(stdout, \"TestPrefixScan error: %s\\n\", s.ToString().c_str());\n  } else {\n    fprintf(stderr, \"TestPrefixScan error: %s\\n\", s.ToString().c_str());\n    thread->shared->SetVerificationFailure();\n}\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12800\n\nTest Plan: CI\n\nReviewed By: cbi42\n\nDifferential Revision: D58918014\n\nPulled By: hx235\n\nfbshipit-source-id: d73139c114fb3f61003dedca116f7ec36309eca4",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e90e9153d5169f9df8ddd3cf0bf693572768a7b5"
    },
    {
        "hash": "9d64ca55b760e0d7386c3cc170ff84495d825238",
        "author": "Hui Xiao",
        "date": "2024-06-22T16:17:59-07:00",
        "message": "Proceed for new memtable on okay status (#12798)\n\nSummary:\n**Context/Summary:**\nThe relevant code logs info of newly created WAL and proceeds to \"ConstructFragmentedRangeTombstones()\" even when the previous step fails. This PR fixes it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12798\n\nTest Plan: Existing tests\n\nReviewed By: cbi42\n\nDifferential Revision: D58917246\n\nPulled By: hx235\n\nfbshipit-source-id: f395210d91e50617195cb9a8047cf5d82db0c40e",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9d64ca55b760e0d7386c3cc170ff84495d825238"
    },
    {
        "hash": "981fd432fa2441fc10a59a462bd14906ccb1c0e0",
        "author": "Hui Xiao",
        "date": "2024-06-21T20:11:57-07:00",
        "message": "Fix not getting expected injected read error (#12793)\n\nSummary:\n**Context/Summary:**\n\nhttps://github.com/facebook/rocksdb/pull/12713 accidentally removed the mechanism of ignoring injected read error on non-critical read path such as read from filter. IO failure in read from filter should not fail the read as we can always read from the actual file. Therefore error injection in filter read path does not need to lead to failure in Get() and crash test should allow that. Otherwise, we will get crash test error \"Didn't get expected error from...\"\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12793\n\nTest Plan: CI\n\nReviewed By: cbi42\n\nDifferential Revision: D58895393\n\nPulled By: hx235\n\nfbshipit-source-id: 5b605d8446e0b8d4149cdbe6f4be3c7534d4acfa",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/981fd432fa2441fc10a59a462bd14906ccb1c0e0"
    },
    {
        "hash": "cce51f06640dc693796d87507b89a315a2a52718",
        "author": "Jay Huh",
        "date": "2024-06-21T11:56:10-07:00",
        "message": "Fix heap-use-after-free in MultiCfIteratorImpl (#12784)\n\nSummary:\n# Summary\n\nWhen changing the direction of the multi-cf-iter, we do this by `Seek(current_key)` (if changing from backward to forward) or `SeekForPrev(current_key)` (if forward -> backward) in the child iters and rebuild the heap.\n\n`Slice target` is just a pointer and contents are not guaranteed to be the same after re-init the heap.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12784\n\nTest Plan:\nI was able to steadily repro by building with `COMPILE_WITH_ASAN=1` running db_stress.\n```\nCOMPILE_WITH_ASAN=1 make -j64 dbg\n```\n```\n./db_stress --WAL_size_limit_MB=1 --WAL_ttl_seconds=60 --acquire_snapshot_one_in=10000 --adaptive_readahead=0 --adm_policy=2 --advise_random_on_open=1 --allow_data_in_errors=True --allow_fallocate=0 --async_io=0 --auto_readahead_size=1 --avoid_flush_during_recovery=0 --avoid_flush_during_shutdown=1 --avoid_unnecessary_blocking_io=1 --backup_max_size=104857600 --backup_one_in=1000 --batch_protection_bytes_per_key=0 --bgerror_resume_retry_interval=100 --block_align=1 --block_protection_bytes_per_key=8 --block_size=16384 --bloom_before_level=2147483646 --bloom_bits=62.9095874568401 --bottommost_compression_type=none --bottommost_file_compaction_delay=600 --bytes_per_sync=0 --cache_index_and_filter_blocks=0 --cache_index_and_filter_blocks_with_high_priority=0 --cache_size=33554432 --cache_type=lru_cache --charge_compression_dictionary_building_buffer=0 --charge_file_metadata=1 --charge_filter_construction=1 --charge_table_reader=0 --check_multiget_consistency=0 --check_multiget_entity_consistency=0 --checkpoint_one_in=10000 --checksum_type=kxxHash64 --clear_column_family_one_in=0 --compact_files_one_in=1000000 --compact_range_one_in=1000000 --compaction_pri=1 --compaction_readahead_size=0 --compaction_ttl=100 --compress_format_version=2 --compressed_secondary_cache_size=8388608 --compression_checksum=1 --compression_max_dict_buffer_bytes=1099511627775 --compression_max_dict_bytes=16384 --compression_parallel_threads=1 --compression_type=none --compression_use_zstd_dict_trainer=1 --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --daily_offpeak_time_utc= --data_block_index_type=1 --db=/dev/shm/rocksdb_test/rocksdb_crashtest_whitebox --db_write_buffer_size=0 --default_temperature=kUnknown --default_write_temperature=kWarm --delete_obsolete_files_period_micros=21600000000 --delpercent=4 --delrangepercent=1 --destroy_db_initially=0 --detect_filter_construct_corruption=1 --disable_file_deletions_one_in=1000000 --disable_manual_compaction_one_in=10000 --disable_wal=0 --dump_malloc_stats=1 --enable_checksum_handoff=0 --enable_compaction_filter=0 --enable_custom_split_merge=1 --enable_do_not_compress_roles=0 --enable_index_compression=0 --enable_memtable_insert_with_hint_prefix_extractor=0 --enable_pipelined_write=1 --enable_sst_partitioner_factory=1 --enable_thread_tracking=1 --enable_write_thread_adaptive_yield=1 --error_recovery_with_no_fault_injection=0 --expected_values_dir=/dev/shm/rocksdb_test/rocksdb_crashtest_expected --fail_if_options_file_error=0 --fifo_allow_compaction=1 --file_checksum_impl=crc32c --fill_cache=0 --flush_one_in=1000000 --format_version=4 --get_all_column_family_metadata_one_in=1000000 --get_current_wal_file_one_in=0 --get_live_files_apis_one_in=10000 --get_properties_of_all_tables_one_in=1000000 --get_property_one_in=1000000 --get_sorted_wal_files_one_in=0 --hard_pending_compaction_bytes_limit=274877906944 --high_pri_pool_ratio=0 --index_block_restart_interval=4 --index_shortening=1 --index_type=0 --ingest_external_file_one_in=0 --initial_auto_readahead_size=524288 --inplace_update_support=0 --iterpercent=10 --key_len_percent_dist=1,30,69 --key_may_exist_one_in=100000 --kill_random_test=888887 --last_level_temperature=kHot --level_compaction_dynamic_level_bytes=1 --lock_wal_one_in=10000 --log2_keys_per_lock=10 --log_file_time_to_roll=60 --log_readahead_size=0 --long_running_snapshots=1 --low_pri_pool_ratio=0 --lowest_used_cache_tier=0 --manifest_preallocation_size=5120 --manual_wal_flush_one_in=0 --mark_for_compaction_one_file_in=0 --max_auto_readahead_size=16384 --max_background_compactions=20 --max_bytes_for_level_base=10485760 --max_key=100000 --max_key_len=3 --max_log_file_size=0 --max_manifest_file_size=1073741824 --max_sequential_skip_in_iterations=1 --max_total_wal_size=0 --max_write_batch_group_size_bytes=64 --max_write_buffer_number=3 --max_write_buffer_size_to_maintain=0 --memtable_insert_hint_per_batch=0 --memtable_max_range_deletions=0 --memtable_prefix_bloom_size_ratio=0 --memtable_protection_bytes_per_key=8 --memtable_whole_key_filtering=0 --memtablerep=skip_list --metadata_charge_policy=0 --metadata_read_fault_one_in=1000 --metadata_write_fault_one_in=128 --min_write_buffer_number_to_merge=1 --mmap_read=0 --mock_direct_io=True --nooverwritepercent=1 --num_file_reads_for_auto_readahead=1 --open_files=-1 --open_metadata_read_fault_one_in=0 --open_metadata_write_fault_one_in=0 --open_read_fault_one_in=0 --open_write_fault_one_in=16 --ops_per_thread=20000000 --optimize_filters_for_hits=0 --optimize_filters_for_memory=0 --optimize_multiget_for_io=0 --paranoid_file_checks=1 --partition_filters=0 --partition_pinning=3 --pause_background_one_in=1000000 --periodic_compaction_seconds=0 --persist_user_defined_timestamps=1 --prefix_size=-1 --prefixpercent=0 --prepopulate_block_cache=1 --preserve_internal_time_seconds=36000 --progress_reports=0 --promote_l0_one_in=0 --read_amp_bytes_per_bit=0 --read_fault_one_in=0 --readahead_size=0 --readpercent=50 --recycle_log_file_num=0 --reopen=20 --report_bg_io_stats=1 --reset_stats_one_in=10000 --sample_for_compression=0 --secondary_cache_fault_one_in=0 --secondary_cache_uri= --skip_stats_update_on_db_open=0 --snapshot_hold_ops=100000 --soft_pending_compaction_bytes_limit=68719476736 --sqfc_name=bar --sqfc_version=0 --sst_file_manager_bytes_per_sec=0 --sst_file_manager_bytes_per_truncate=0 --stats_dump_period_sec=10 --stats_history_buffer_size=1048576 --strict_bytes_per_sync=0 --subcompactions=1 --sync=0 --sync_fault_injection=1 --table_cache_numshardbits=6 --target_file_size_base=2097152 --target_file_size_multiplier=2 --test_batches_snapshots=0 --test_cf_consistency=0 --top_level_index_pinning=0 --uncache_aggressiveness=14 --universal_max_read_amp=-1 --unpartitioned_pinning=2 --use_adaptive_mutex=1 --use_adaptive_mutex_lru=0 --use_attribute_group=0 --use_delta_encoding=1 --use_direct_io_for_flush_and_compaction=0 --use_direct_reads=1 --use_full_merge_v1=0 --use_get_entity=1 --use_merge=0 --use_multi_cf_iterator=1 --use_multi_get_entity=1 --use_multiget=1 --use_put_entity_one_in=0 --use_sqfc_for_range_queries=1 --use_timed_put_one_in=0 --use_txn=0 --use_write_buffer_manager=0 --user_timestamp_size=8 --value_size_mult=32 --verification_only=0 --verify_checksum=1 --verify_checksum_one_in=1000000 --verify_compression=1 --verify_db_one_in=10000 --verify_file_checksums_one_in=1000 --verify_iterator_with_expected_state_one_in=5 --verify_sst_unique_id_in_manifest=1 --wal_bytes_per_sync=0 --wal_compression=zstd --write_buffer_size=4194304 --write_dbid_to_manifest=1 --write_fault_one_in=0 --writepercent=35\n```\n```\n==1606272==ERROR: AddressSanitizer: heap-use-after-free on address 0x6060000b0cc0 at pc 0x7f733469c7de bp 0x7f7311bfcfe0 sp 0x7f7311bfc790\nREAD of size 40 at 0x6060000b0cc0 thread T57\n    #0 0x7f733469c7dd in __interceptor_memcpy /home/engshare/third-party2/gcc/11.x/src/gcc-11.x/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:827\n    https://github.com/facebook/rocksdb/issues/1 0x7f7331f65f7e in rocksdb::IterKey::SetInternalKey(rocksdb::Slice const&, rocksdb::Slice const&, unsigned long, rocksdb::ValueType, rocksdb::Slice const*) db/dbformat.h:761\n    https://github.com/facebook/rocksdb/issues/2 0x7f7331f661ee in rocksdb::IterKey::SetInternalKey(rocksdb::Slice const&, unsigned long, rocksdb::ValueType, rocksdb::Slice const*) db/dbformat.h:776\n    https://github.com/facebook/rocksdb/issues/3 0x7f73323039ff in rocksdb::DBIter::SetSavedKeyToSeekTarget(rocksdb::Slice const&) db/db_iter.cc:1462\n    https://github.com/facebook/rocksdb/issues/4 0x7f7332304eb8 in rocksdb::DBIter::Seek(rocksdb::Slice const&) db/db_iter.cc:1540\n    https://github.com/facebook/rocksdb/issues/5 0x7f7331d94abd in rocksdb::ArenaWrappedDBIter::Seek(rocksdb::Slice const&) (/data/users/jewoongh/rocksdb/librocksdb.so.9.4+0x1394abd)\n    https://github.com/facebook/rocksdb/issues/6 0x7f73320f1a52 in rocksdb::MultiCfIteratorImpl::Seek(rocksdb::Slice const&)::{lambda(rocksdb::Iterator*)https://github.com/facebook/rocksdb/issues/2}::operator()(rocksdb::Iterator*) const db/multi_cf_iterator_impl.h:73\n    https://github.com/facebook/rocksdb/issues/7 0x7f73320fccf0 in void rocksdb::MultiCfIteratorImpl::SeekCommon<rocksdb::BinaryHeap<rocksdb::MultiCfIteratorInfo, rocksdb::MultiCfIteratorImpl::MultiCfHeapItemComparator<std::greater<int> > >, rocksdb::MultiCfIteratorImpl::Seek(rocksdb::Slice const&)::{lambda(rocksdb::Iterator*)https://github.com/facebook/rocksdb/issues/2}>(rocksdb::BinaryHeap<rocksdb::MultiCfIteratorInfo, rocksdb::MultiCfIteratorImpl::MultiCfHeapItemComparator<std::greater<int> > >&, rocksdb::MultiCfIteratorImpl::Seek(rocksdb::Slice const&)::{lambda(rocksdb::Iterator*)https://github.com/facebook/rocksdb/issues/2}) (/data/users/jewoongh/rocksdb/librocksdb.so.9.4+0x16fccf0)\n    https://github.com/facebook/rocksdb/issues/8 0x7f73320f1a93 in rocksdb::MultiCfIteratorImpl::Seek(rocksdb::Slice const&) db/multi_cf_iterator_impl.h:73\n    https://github.com/facebook/rocksdb/issues/9 0x7f73320f1dbe in rocksdb::MultiCfIteratorImpl::Next()::{lambda()https://github.com/facebook/rocksdb/issues/1}::operator()() const db/multi_cf_iterator_impl.h:90\n    https://github.com/facebook/rocksdb/issues/10 0x7f73320fe159 in rocksdb::BinaryHeap<rocksdb::MultiCfIteratorInfo, rocksdb::MultiCfIteratorImpl::MultiCfHeapItemComparator<std::greater<int> > >& rocksdb::MultiCfIteratorImpl::GetHeap<rocksdb::BinaryHeap<rocksdb::MultiCfIteratorInfo, rocksdb::MultiCfIteratorImpl::MultiCfHeapItemComparator<std::greater<int> > >, rocksdb::MultiCfIteratorImpl::Next()::{lambda()https://github.com/facebook/rocksdb/issues/1}>(rocksdb::MultiCfIteratorImpl::Next()::{lambda()https://github.com/facebook/rocksdb/issues/1}) (/data/users/jewoongh/rocksdb/librocksdb.so.9.4+0x16fe159)\n    https://github.com/facebook/rocksdb/issues/11 0x7f73320f1ec9 in rocksdb::MultiCfIteratorImpl::Next() db/multi_cf_iterator_impl.h:87\n    https://github.com/facebook/rocksdb/issues/12 0x7f73320f3255 in rocksdb::CoalescingIterator::Next() db/coalescing_iterator.h:34\n    https://github.com/facebook/rocksdb/issues/13 0x66f28a in TestIterateImpl<rocksdb::Iterator, rocksdb::StressTest::TestIterate(rocksdb::ThreadState*, const rocksdb::ReadOptions&, const std::vector<int>&, const std::vector<long int>&)::<lambda(const rocksdb::ReadOptions&)>, rocksdb::StressTest::TestIterate(rocksdb::ThreadState*, const rocksdb::ReadOptions&, const std::vector<int>&, const std::vector<long int>&)::<lambda(rocksdb::Iterator*)> > db_stress_tool/db_stress_test_base.cc:1718\n    https://github.com/facebook/rocksdb/issues/14 0x6440b4 in rocksdb::StressTest::TestIterate(rocksdb::ThreadState*, rocksdb::ReadOptions const&, std::vector<int, std::allocator<int> > const&, std::vector<long, std::allocator<long> > const&) db_stress_tool/db_stress_test_base.cc:1504\n    https://github.com/facebook/rocksdb/issues/15 0x640cb0 in rocksdb::StressTest::OperateDb(rocksdb::ThreadState*) db_stress_tool/db_stress_test_base.cc:1376\n    https://github.com/facebook/rocksdb/issues/16 0x6004f6 in rocksdb::ThreadBody(void*) db_stress_tool/db_stress_driver.cc:39\n    https://github.com/facebook/rocksdb/issues/17 0x7f73327caed4 in StartThreadWrapper env/env_posix.cc:469\n    https://github.com/facebook/rocksdb/issues/18 0x7f733029abc8 in start_thread /home/engshare/third-party2/glibc/2.34/src/glibc-2.34/nptl/pthread_create.c:434\n    https://github.com/facebook/rocksdb/issues/19 0x7f733032cf5b in __GI___clone3 (/usr/local/fbcode/platform010/lib/libc.so.6+0x12cf5b)\n\n0x6060000b0cc0 is located 0 bytes inside of 55-byte region [0x6060000b0cc0,0x6060000b0cf7)\nfreed by thread T57 here:\n    #0 0x7f73346d1d77 in operator delete[](void*) /home/engshare/third-party2/gcc/11.x/src/gcc-11.x/libsanitizer/asan/asan_new_delete.cpp:163\n    https://github.com/facebook/rocksdb/issues/1 0x7f7331d9274b in rocksdb::IterKey::ResetBuffer() db/dbformat.h:830\n    https://github.com/facebook/rocksdb/issues/2 0x7f73323146b9 in rocksdb::IterKey::EnlargeBuffer(unsigned long) db/dbformat.cc:278\n    https://github.com/facebook/rocksdb/issues/3 0x7f7331f33031 in rocksdb::IterKey::EnlargeBufferIfNeeded(unsigned long) db/dbformat.h:846\n    https://github.com/facebook/rocksdb/issues/4 0x7f7331f65ee0 in rocksdb::IterKey::SetInternalKey(rocksdb::Slice const&, rocksdb::Slice const&, unsigned long, rocksdb::ValueType, rocksdb::Slice const*) db/dbformat.h:757\n    https://github.com/facebook/rocksdb/issues/5 0x7f7331f661ee in rocksdb::IterKey::SetInternalKey(rocksdb::Slice const&, unsigned long, rocksdb::ValueType, rocksdb::Slice const*) db/dbformat.h:776\n    https://github.com/facebook/rocksdb/issues/6 0x7f73323039ff in rocksdb::DBIter::SetSavedKeyToSeekTarget(rocksdb::Slice const&) db/db_iter.cc:1462\n    https://github.com/facebook/rocksdb/issues/7 0x7f7332304eb8 in rocksdb::DBIter::Seek(rocksdb::Slice const&) db/db_iter.cc:1540\n    https://github.com/facebook/rocksdb/issues/8 0x7f7331d94abd in rocksdb::ArenaWrappedDBIter::Seek(rocksdb::Slice const&) (/data/users/jewoongh/rocksdb/librocksdb.so.9.4+0x1394abd)\n    https://github.com/facebook/rocksdb/issues/9 0x7f73320f1a52 in rocksdb::MultiCfIteratorImpl::Seek(rocksdb::Slice const&)::{lambda(rocksdb::Iterator*)https://github.com/facebook/rocksdb/issues/2}::operator()(rocksdb::Iterator*) const db/multi_cf_iterator_impl.h:73\n    https://github.com/facebook/rocksdb/issues/10 0x7f73320fccf0 in void rocksdb::MultiCfIteratorImpl::SeekCommon<rocksdb::BinaryHeap<rocksdb::MultiCfIteratorInfo, rocksdb::MultiCfIteratorImpl::MultiCfHeapItemComparator<std::greater<int> > >, rocksdb::MultiCfIteratorImpl::Seek(rocksdb::Slice const&)::{lambda(rocksdb::Iterator*)https://github.com/facebook/rocksdb/issues/2}>(rocksdb::BinaryHeap<rocksdb::MultiCfIteratorInfo, rocksdb::MultiCfIteratorImpl::MultiCfHeapItemComparator<std::greater<int> > >&, rocksdb::MultiCfIteratorImpl::Seek(rocksdb::Slice const&)::{lambda(rocksdb::Iterator*)https://github.com/facebook/rocksdb/issues/2}) (/data/users/jewoongh/rocksdb/librocksdb.so.9.4+0x16fccf0)\n    https://github.com/facebook/rocksdb/issues/11 0x7f73320f1a93 in rocksdb::MultiCfIteratorImpl::Seek(rocksdb::Slice const&) db/multi_cf_iterator_impl.h:73\n    https://github.com/facebook/rocksdb/issues/12 0x7f73320f1dbe in rocksdb::MultiCfIteratorImpl::Next()::{lambda()https://github.com/facebook/rocksdb/issues/1}::operator()() const db/multi_cf_iterator_impl.h:90\n    https://github.com/facebook/rocksdb/issues/13 0x7f73320fe159 in rocksdb::BinaryHeap<rocksdb::MultiCfIteratorInfo, rocksdb::MultiCfIteratorImpl::MultiCfHeapItemComparator<std::greater<int> > >& rocksdb::MultiCfIteratorImpl::GetHeap<rocksdb::BinaryHeap<rocksdb::MultiCfIteratorInfo, rocksdb::MultiCfIteratorImpl::MultiCfHeapItemComparator<std::greater<int> > >, rocksdb::MultiCfIteratorImpl::Next()::{lambda()https://github.com/facebook/rocksdb/issues/1}>(rocksdb::MultiCfIteratorImpl::Next()::{lambda()https://github.com/facebook/rocksdb/issues/1}) (/data/users/jewoongh/rocksdb/librocksdb.so.9.4+0x16fe159)\n    https://github.com/facebook/rocksdb/issues/14 0x7f73320f1ec9 in rocksdb::MultiCfIteratorImpl::Next() db/multi_cf_iterator_impl.h:87\n    https://github.com/facebook/rocksdb/issues/15 0x7f73320f3255 in rocksdb::CoalescingIterator::Next() db/coalescing_iterator.h:34\n    https://github.com/facebook/rocksdb/issues/16 0x66f28a in TestIterateImpl<rocksdb::Iterator, rocksdb::StressTest::TestIterate(rocksdb::ThreadState*, const rocksdb::ReadOptions&, const std::vector<int>&, const std::vector<long int>&)::<lambda(const rocksdb::ReadOptions&)>, rocksdb::StressTest::TestIterate(rocksdb::ThreadState*, const rocksdb::ReadOptions&, const std::vector<int>&, const std::vector<long int>&)::<lambda(rocksdb::Iterator*)> > db_stress_tool/db_stress_test_base.cc:1718\n    https://github.com/facebook/rocksdb/issues/17 0x6440b4 in rocksdb::StressTest::TestIterate(rocksdb::ThreadState*, rocksdb::ReadOptions const&, std::vector<int, std::allocator<int> > const&, std::vector<long, std::allocator<long> > const&) db_stress_tool/db_stress_test_base.cc:1504\n    https://github.com/facebook/rocksdb/issues/18 0x640cb0 in rocksdb::StressTest::OperateDb(rocksdb::ThreadState*) db_stress_tool/db_stress_test_base.cc:1376\n    https://github.com/facebook/rocksdb/issues/19 0x6004f6 in rocksdb::ThreadBody(void*) db_stress_tool/db_stress_driver.cc:39\n    https://github.com/facebook/rocksdb/issues/20 0x7f73327caed4 in StartThreadWrapper env/env_posix.cc:469\n    https://github.com/facebook/rocksdb/issues/21 0x7f733029abc8 in start_thread /home/engshare/third-party2/glibc/2.34/src/glibc-2.34/nptl/pthread_create.c:434\n\npreviously allocated by thread T57 here:\n    #0 0x7f73346d13b7 in operator new[](unsigned long) /home/engshare/third-party2/gcc/11.x/src/gcc-11.x/libsanitizer/asan/asan_new_delete.cpp:102\n    https://github.com/facebook/rocksdb/issues/1 0x7f73323146c5 in rocksdb::IterKey::EnlargeBuffer(unsigned long) db/dbformat.cc:279\n    https://github.com/facebook/rocksdb/issues/2 0x7f7331f33031 in rocksdb::IterKey::EnlargeBufferIfNeeded(unsigned long) db/dbformat.h:846\n    https://github.com/facebook/rocksdb/issues/3 0x7f7331f65ee0 in rocksdb::IterKey::SetInternalKey(rocksdb::Slice const&, rocksdb::Slice const&, unsigned long, rocksdb::ValueType, rocksdb::Slice const*) db/dbformat.h:757\n    https://github.com/facebook/rocksdb/issues/4 0x7f7331f661ee in rocksdb::IterKey::SetInternalKey(rocksdb::Slice const&, unsigned long, rocksdb::ValueType, rocksdb::Slice const*) db/dbformat.h:776\n    https://github.com/facebook/rocksdb/issues/5 0x7f7332303e1e in rocksdb::DBIter::SetSavedKeyToSeekForPrevTarget(rocksdb::Slice const&) db/db_iter.cc:1479\n    https://github.com/facebook/rocksdb/issues/6 0x7f7332306302 in rocksdb::DBIter::SeekForPrev(rocksdb::Slice const&) db/db_iter.cc:1615\n    https://github.com/facebook/rocksdb/issues/7 0x7f7331d94b0f in rocksdb::ArenaWrappedDBIter::SeekForPrev(rocksdb::Slice const&) (/data/users/jewoongh/rocksdb/librocksdb.so.9.4+0x1394b0f)\n    https://github.com/facebook/rocksdb/issues/8 0x7f73320f1c5a in rocksdb::MultiCfIteratorImpl::SeekForPrev(rocksdb::Slice const&)::{lambda(rocksdb::Iterator*)https://github.com/facebook/rocksdb/issues/2}::operator()(rocksdb::Iterator*) const db/multi_cf_iterator_impl.h:82\n    https://github.com/facebook/rocksdb/issues/9 0x7f73320fdc1e in void rocksdb::MultiCfIteratorImpl::SeekCommon<rocksdb::BinaryHeap<rocksdb::MultiCfIteratorInfo, rocksdb::MultiCfIteratorImpl::MultiCfHeapItemComparator<std::less<int> > >, rocksdb::MultiCfIteratorImpl::SeekForPrev(rocksdb::Slice const&)::{lambda(rocksdb::Iterator*)https://github.com/facebook/rocksdb/issues/2}>(rocksdb::BinaryHeap<rocksdb::MultiCfIteratorInfo, rocksdb::MultiCfIteratorImpl::MultiCfHeapItemComparator<std::less<int> > >&, rocksdb::MultiCfIteratorImpl::SeekForPrev(rocksdb::Slice const&)::{lambda(rocksdb::Iterator*)https://github.com/facebook/rocksdb/issues/2}) (/data/users/jewoongh/rocksdb/librocksdb.so.9.4+0x16fdc1e)\n    https://github.com/facebook/rocksdb/issues/10 0x7f73320f1c9b in rocksdb::MultiCfIteratorImpl::SeekForPrev(rocksdb::Slice const&) db/multi_cf_iterator_impl.h:81\n    https://github.com/facebook/rocksdb/issues/11 0x7f73320f2002 in rocksdb::MultiCfIteratorImpl::Prev()::{lambda()https://github.com/facebook/rocksdb/issues/1}::operator()() const db/multi_cf_iterator_impl.h:99\n    https://github.com/facebook/rocksdb/issues/12 0x7f73320ff223 in rocksdb::BinaryHeap<rocksdb::MultiCfIteratorInfo, rocksdb::MultiCfIteratorImpl::MultiCfHeapItemComparator<std::less<int> > >& rocksdb::MultiCfIteratorImpl::GetHeap<rocksdb::BinaryHeap<rocksdb::MultiCfIteratorInfo, rocksdb::MultiCfIteratorImpl::MultiCfHeapItemComparator<std::less<int> > >, rocksdb::MultiCfIteratorImpl::Prev()::{lambda()https://github.com/facebook/rocksdb/issues/1}>(rocksdb::MultiCfIteratorImpl::Prev()::{lambda()https://github.com/facebook/rocksdb/issues/1}) (/data/users/jewoongh/rocksdb/librocksdb.so.9.4+0x16ff223)\n    https://github.com/facebook/rocksdb/issues/13 0x7f73320f210d in rocksdb::MultiCfIteratorImpl::Prev() db/multi_cf_iterator_impl.h:96\n    https://github.com/facebook/rocksdb/issues/14 0x7f73320f3275 in rocksdb::CoalescingIterator::Prev() db/coalescing_iterator.h:35\n    https://github.com/facebook/rocksdb/issues/15 0x66f440 in TestIterateImpl<rocksdb::Iterator, rocksdb::StressTest::TestIterate(rocksdb::ThreadState*, const rocksdb::ReadOptions&, const std::vector<int>&, const std::vector<long int>&)::<lambda(const rocksdb::ReadOptions&)>, rocksdb::StressTest::TestIterate(rocksdb::ThreadState*, const rocksdb::ReadOptions&, const std::vector<int>&, const std::vector<long int>&)::<lambda(rocksdb::Iterator*)> > db_stress_tool/db_stress_test_base.cc:1725\n    https://github.com/facebook/rocksdb/issues/16 0x6440b4 in rocksdb::StressTest::TestIterate(rocksdb::ThreadState*, rocksdb::ReadOptions const&, std::vector<int, std::allocator<int> > const&, std::vector<long, std::allocator<long> > const&) db_stress_tool/db_stress_test_base.cc:1504\n    https://github.com/facebook/rocksdb/issues/17 0x640cb0 in rocksdb::StressTest::OperateDb(rocksdb::ThreadState*) db_stress_tool/db_stress_test_base.cc:1376\n    https://github.com/facebook/rocksdb/issues/18 0x6004f6 in rocksdb::ThreadBody(void*) db_stress_tool/db_stress_driver.cc:39\n    https://github.com/facebook/rocksdb/issues/19 0x7f73327caed4 in StartThreadWrapper env/env_posix.cc:469\n    https://github.com/facebook/rocksdb/issues/20 0x7f733029abc8 in start_thread /home/engshare/third-party2/glibc/2.34/src/glibc-2.34/nptl/pthread_create.c:434\n\nThread T57 created by T0 here:\n    #0 0x7f7334642136 in __interceptor_pthread_create /home/engshare/third-party2/gcc/11.x/src/gcc-11.x/libsanitizer/asan/asan_interceptors.cpp:216\n    https://github.com/facebook/rocksdb/issues/1 0x7f73327cb008 in StartThread env/env_posix.cc:479\n    https://github.com/facebook/rocksdb/issues/2 0x7f733276b406 in rocksdb::CompositeEnvWrapper::StartThread(void (*)(void*), void*) env/composite_env_wrapper.h:316\n    https://github.com/facebook/rocksdb/issues/3 0x7f733276b406 in rocksdb::CompositeEnvWrapper::StartThread(void (*)(void*), void*) env/composite_env_wrapper.h:316\n    https://github.com/facebook/rocksdb/issues/4 0x6013d9 in rocksdb::RunStressTestImpl(rocksdb::SharedState*) db_stress_tool/db_stress_driver.cc:108\n    https://github.com/facebook/rocksdb/issues/5 0x603083 in rocksdb::RunStressTest(rocksdb::SharedState*) db_stress_tool/db_stress_driver.cc:248\n    https://github.com/facebook/rocksdb/issues/6 0x4e6ab3 in rocksdb::db_stress_tool(int, char**) db_stress_tool/db_stress_tool.cc:365\n    https://github.com/facebook/rocksdb/issues/7 0x4e260a in main db_stress_tool/db_stress.cc:23\n    https://github.com/facebook/rocksdb/issues/8 0x7f733022c656 in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    https://github.com/facebook/rocksdb/issues/9 0x7f733022c717 in __libc_start_main_impl ../csu/libc-start.c:409\n    https://github.com/facebook/rocksdb/issues/10 0x4e2530 in _start (/data/users/jewoongh/rocksdb/db_stress+0x4e2530)\n```\n\n`heap-use-after-free` was no longer happening with the same command after making the change.\n\nReviewed By: pdillinger\n\nDifferential Revision: D58871081\n\nPulled By: jaykorean\n\nfbshipit-source-id: 0194c34ffec5f16a6556c6bf3941a27253a4ecb4",
        "modified_files_count": 1,
        "modified_files": [
            "db/multi_cf_iterator_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cce51f06640dc693796d87507b89a315a2a52718"
    },
    {
        "hash": "3758e31f3f194f3cd7e2b060bdcc1ca39ad90ab6",
        "author": "Peter Dillinger",
        "date": "2024-06-14T20:50:36-07:00",
        "message": "Fix rare failure in DBBlockCacheTypeTest.Uncache (#12775)\n\nSummary:\nFollowing up on https://github.com/facebook/rocksdb/issues/12748 after seeing recurrence in https://github.com/facebook/rocksdb/actions/runs/9522985253/job/26253605587?pr=12774\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12775\n\nTest Plan: Was able to reproduce failure and verify fix this time using COERCE_CONTEXT_SWITCH=1 :)\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D58623461\n\nPulled By: pdillinger\n\nfbshipit-source-id: d93a5e6a4977675eac54bbd42e70ae7b29b950a4",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_block_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3758e31f3f194f3cd7e2b060bdcc1ca39ad90ab6"
    },
    {
        "hash": "a8dd15ad410d1ec4b4c881601056278a146dcd56",
        "author": "Richard Barnes",
        "date": "2024-06-13T12:41:13-07:00",
        "message": "Fix deprecated dynamic exception in internal_repo_rocksdb/repo/java/rocksjni/kv_helper.h +1\n\nSummary:\nLLVM has detected a violation of `-Wdeprecated-dynamic-exception-spec`. Dynamic exceptions were removed in C++17. This diff fixes the deprecated instance(s).\n\nSee [Dynamic exception specification](https://en.cppreference.com/w/cpp/language/except_spec) and [noexcept specifier](https://en.cppreference.com/w/cpp/language/noexcept_spec).\n\nReviewed By: palmje\n\nDifferential Revision: D58528375\n\nfbshipit-source-id: 130fecd3aa556e4cdb955feea53c442bd9fbc864",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/kv_helper.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a8dd15ad410d1ec4b4c881601056278a146dcd56"
    },
    {
        "hash": "a2f772910ed80a3ba357351bf5e835bb73f4fd6d",
        "author": "Hui Xiao",
        "date": "2024-06-12T12:17:45-07:00",
        "message": "Fix manual WAL flush causing false-positive inconsistent values in TestBackupRestore() (#12758)\n\nSummary:\n**Context/Summary:**\nWhen manual WAL flush is used, the following can happen:\n\nt1: Issued Put(k1) to original DB. It entered WAL buffer since manual_wal_flush_one_in > 0. It never made it to WAL file without FlushWAL()\nt2: The same WAL got back-up and restored to restore DB. So the restore DB's WAL does not contain this Put()\nt3: The same WAL in the original DB got FlushWAL() so it got the Put() entry\n\nQuerying k1 in original and restored DB will give different result and fail our consistency check in stress test.\n\n```\nFailure in a backup/restore operation with: Corruption: 0x000000000000000178 exists in original db but not in restore\n```\n\nThis PR fixed it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12758\n\nTest Plan:\n```\n\n./db_stress --WAL_size_limit_MB=0 --WAL_ttl_seconds=0 --acquire_snapshot_one_in=10000 --adaptive_readahead=1 --adm_policy=1 --advise_random_on_open=1 --allow_concurrent_memtable_write=0 --allow_data_in_errors=True --allow_fallocate=1 --async_io=1 --auto_readahead_size=0 --avoid_flush_during_recovery=1 --avoid_flush_during_shutdown=1 --avoid_unnecessary_blocking_io=0 --backup_max_size=104857600 --backup_one_in=100 --batch_protection_bytes_per_key=8 --bgerror_resume_retry_interval=1000000 --block_align=1 --block_protection_bytes_per_key=0 --block_size=16384 --bloom_before_level=2147483646 --bloom_bits=13 --bottommost_compression_type=none --bottommost_file_compaction_delay=600 --bytes_per_sync=262144 --cache_index_and_filter_blocks=0 --cache_index_and_filter_blocks_with_high_priority=0 --cache_size=33554432 --cache_type=auto_hyper_clock_cache --charge_compression_dictionary_building_buffer=0 --charge_file_metadata=0 --charge_filter_construction=1 --charge_table_reader=0 --check_multiget_consistency=0 --check_multiget_entity_consistency=1 --checkpoint_one_in=1000000 --checksum_type=kxxHash --clear_column_family_one_in=0 --column_families=1 --compact_files_one_in=1000 --compact_range_one_in=1000000 --compaction_pri=3 --compaction_readahead_size=0 --compaction_ttl=0 --compress_format_version=1 --compressed_secondary_cache_size=8388608 --compression_checksum=0 --compression_max_dict_buffer_bytes=0 --compression_max_dict_bytes=0 --compression_parallel_threads=4 --compression_type=none --compression_use_zstd_dict_trainer=0 --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --daily_offpeak_time_utc= --data_block_index_type=0 --db=/dev/shm/rocksdb_test/rocksdb_crashtest_blackbox_1 --db_write_buffer_size=0 --default_temperature=kCold --default_write_temperature=kHot --delete_obsolete_files_period_micros=21600000000 --delpercent=40 --delrangepercent=0 --destroy_db_initially=0 --detect_filter_construct_corruption=1 --disable_file_deletions_one_in=1000000 --disable_manual_compaction_one_in=10000 --disable_wal=0 --dump_malloc_stats=0 --enable_checksum_handoff=0 --enable_compaction_filter=0 --enable_custom_split_merge=1 --enable_do_not_compress_roles=1 --enable_index_compression=0 --enable_memtable_insert_with_hint_prefix_extractor=0 --enable_pipelined_write=0 --enable_sst_partitioner_factory=1 --enable_thread_tracking=0 --enable_write_thread_adaptive_yield=1 --expected_values_dir=/dev/shm/rocksdb_test/rocksdb_crashtest_expected_1 --fail_if_options_file_error=1 --fifo_allow_compaction=1 --file_checksum_impl=none --fill_cache=0 --flush_one_in=1000000 --format_version=2 --get_all_column_family_metadata_one_in=1000000 --get_current_wal_file_one_in=0 --get_live_files_apis_one_in=1000000 --get_properties_of_all_tables_one_in=1000000 --get_property_one_in=100000 --get_sorted_wal_files_one_in=0 --hard_pending_compaction_bytes_limit=274877906944 --high_pri_pool_ratio=0.5 --index_block_restart_interval=5 --index_shortening=2 --index_type=0 --ingest_external_file_one_in=0 --initial_auto_readahead_size=16384 --inplace_update_support=0 --iterpercent=10 --key_len_percent_dist=1,30,69 --key_may_exist_one_in=100 --last_level_temperature=kUnknown --level_compaction_dynamic_level_bytes=1 --lock_wal_one_in=0 --log_file_time_to_roll=60 --log_readahead_size=16777216 --long_running_snapshots=0 --low_pri_pool_ratio=0.5 --lowest_used_cache_tier=1 --manifest_preallocation_size=5120 --manual_wal_flush_one_in=100 --mark_for_compaction_one_file_in=10 --max_auto_readahead_size=524288 --max_background_compactions=1 --max_bytes_for_level_base=67108864 --max_key=10 --max_key_len=3 --max_log_file_size=0 --max_manifest_file_size=1073741824 --max_sequential_skip_in_iterations=16 --max_total_wal_size=0 --max_write_batch_group_size_bytes=64 --max_write_buffer_number=10 --max_write_buffer_size_to_maintain=2097152 --memtable_insert_hint_per_batch=1 --memtable_max_range_deletions=0 --memtable_prefix_bloom_size_ratio=0.1 --memtable_protection_bytes_per_key=1 --memtable_whole_key_filtering=0 --memtablerep=skip_list --metadata_charge_policy=1 --min_write_buffer_number_to_merge=1 --mmap_read=1 --mock_direct_io=False --nooverwritepercent=1 --num_file_reads_for_auto_readahead=0 --open_files=-1 --open_metadata_write_fault_one_in=0 --open_read_fault_one_in=0 --open_write_fault_one_in=16 --ops_per_thread=100000000 --optimize_filters_for_hits=0 --optimize_filters_for_memory=0 --optimize_multiget_for_io=1 --paranoid_file_checks=1 --partition_filters=0 --partition_pinning=0 --pause_background_one_in=1000000 --periodic_compaction_seconds=2 --prefix_size=7 --prefixpercent=5 --prepopulate_block_cache=0 --preserve_internal_time_seconds=0 --progress_reports=0 --promote_l0_one_in=0 --read_amp_bytes_per_bit=0 --read_fault_one_in=1000 --readahead_size=16384 --readpercent=0 --recycle_log_file_num=0 --reopen=0 --report_bg_io_stats=0 --reset_stats_one_in=10000 --sample_for_compression=0 --secondary_cache_fault_one_in=0 --secondary_cache_uri= --set_options_one_in=0 --skip_stats_update_on_db_open=1 --snapshot_hold_ops=100000 --soft_pending_compaction_bytes_limit=68719476736 --sst_file_manager_bytes_per_sec=0 --sst_file_manager_bytes_per_truncate=0 --stats_dump_period_sec=600 --stats_history_buffer_size=0 --strict_bytes_per_sync=1 --subcompactions=2 --sync=0 --sync_fault_injection=1 --table_cache_numshardbits=-1 --target_file_size_base=16777216 --target_file_size_multiplier=1 --test_batches_snapshots=0 --top_level_index_pinning=2 --uncache_aggressiveness=709 --universal_max_read_amp=0 --unpartitioned_pinning=0 --use_adaptive_mutex=0 --use_adaptive_mutex_lru=1 --use_attribute_group=1 --use_delta_encoding=1 --use_direct_io_for_flush_and_compaction=0 --use_direct_reads=0 --use_full_merge_v1=0 --use_get_entity=0 --use_merge=1 --use_multi_cf_iterator=0 --use_multi_get_entity=0 --use_multiget=0 --use_put_entity_one_in=0 --use_timed_put_one_in=0 --use_write_buffer_manager=0 --user_timestamp_size=0 --value_size_mult=32 --verification_only=0 --verify_checksum=1 --verify_checksum_one_in=1000 --verify_compression=0 --verify_db_one_in=100000 --verify_file_checksums_one_in=0 --verify_iterator_with_expected_state_one_in=5 --verify_sst_unique_id_in_manifest=1 --wal_bytes_per_sync=0 --wal_compression=none --write_buffer_size=335544 --write_dbid_to_manifest=1 --write_fault_one_in=128 --writepercent=45\n```\nRepro-ed quickly before the fix and stably run after the fix.\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D58426535\n\nPulled By: hx235\n\nfbshipit-source-id: 611e56086e76f8c06d292624e60fd96e511ce723",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a2f772910ed80a3ba357351bf5e835bb73f4fd6d"
    },
    {
        "hash": "d64eac28d32a025770cba641ea04e697f475cdd6",
        "author": "Peter Dillinger",
        "date": "2024-06-11T21:41:21-07:00",
        "message": "Fix a failure to propagate ReadOptions (#12757)\n\nSummary:\nThe crash test revealed a case in which the uncache functionality in ~BlockBasedTableReader could initiate an block read (IO), despite setting ReadOptions::read_tier = kBlockCacheTier.\n\nThe root cause is a place in the code where many people have over time decided to opt-in propagating ReadOptions and no one took the initiative to propagate ReadOptions by default (opt out / override only as needed). The fix is in partitioned_index_reader.cc. Here,\nReadOptions::readahead_size is opted-out to avoid churn in prefetch_test that is not clearly an improvement or regression. It's hard to tell given the poor state of relevant documentation https://github.com/facebook/rocksdb/issues/12756. The affected unit test was added in https://github.com/facebook/rocksdb/issues/10602.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12757\n\nTest Plan: (Now postponed to a follow-up diff) I have added some new infrastructure to DEBUG builds to catch this specific kind of violation in unit tests and in the stress/crash test. `EnforceReadOpts` establishes a thread-local context under which we assert no IOs are performed if ReadOptions said it should be forbidden. With this new checking, the Uncache unit test would catch the critical step toward a violation (inner ReadOptions allowing IO, even if no IO is actually performed), which is fixed with the production code change.\n\nReviewed By: hx235\n\nDifferential Revision: D58421526\n\nPulled By: pdillinger\n\nfbshipit-source-id: 9e9917a0e320c78967e751bd887926a2ed231d37",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/partitioned_index_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d64eac28d32a025770cba641ea04e697f475cdd6"
    },
    {
        "hash": "68112b3beb885c9ec8bc410e15b05e7e27e3c9ee",
        "author": "Peter Dillinger",
        "date": "2024-06-10T13:31:46-07:00",
        "message": "Attempt fix rare failure in DBBlockCacheTypeTest.Uncache (#12748)\n\nSummary:\nI haven't been able to reproduce the failure, seen in https://github.com/facebook/rocksdb/actions/runs/9420830905/job/25953696902?pr=12734\n\n```\n[ RUN      ] DBBlockCacheTypeTestInstance/DBBlockCacheTypeTest.Uncache/2\ndb/db_block_cache_test.cc:1415: Failure\nExpected equality of these values:\n  cache->GetOccupancyCount()\n    Which is: 37\n  kBaselineCount + kNumDataBlocks + meta_blocks_per_file\n    Which is: 15\nGoogle Test trace:\ndb/db_block_cache_test.cc:1346: ua=10000\ndb/db_block_cache_test.cc:1344: partitioned=1\ndb/db_block_cache_test.cc:1418: Failure\n...\n```\n\nBut it's consistent with a SuperVersion reference sticking around beyond the CompactRange, as I can reproduce the result with a dangling Iterator. Like some other tests have had trouble with periodic stats popping up randomly, I suspect that could be the explanation in this case.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12748\n\nTest Plan: Watch for similar future failures\n\nReviewed By: ltamasi\n\nDifferential Revision: D58366031\n\nPulled By: pdillinger\n\nfbshipit-source-id: b812ca8837b8c8b9cbda1b201d76316d145fa3ec",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_block_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/68112b3beb885c9ec8bc410e15b05e7e27e3c9ee"
    },
    {
        "hash": "a211e065520b80a2a5a28a795aae1a71e1b139dc",
        "author": "Adam Kupczyk",
        "date": "2024-06-05T12:52:48-07:00",
        "message": "Remove close when fd == -1. (#12732)\n\nSummary:\nIts polluting my valgrind runs:\n==3733139== Warning: invalid file descriptor -1 in syscall close()\n==3733139== Warning: invalid file descriptor -1 in syscall close()\n==3733139== Warning: invalid file descriptor -1 in syscall close()\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12732\n\nReviewed By: ltamasi\n\nDifferential Revision: D58170009\n\nPulled By: ajkr\n\nfbshipit-source-id: 1fc6944c2667641996676a75aa3e91984070ba49",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a211e065520b80a2a5a28a795aae1a71e1b139dc"
    },
    {
        "hash": "a8a52e5b4d938c1aea28d7a96ec70a459ffaa1a4",
        "author": "Valery Mironov",
        "date": "2024-06-04T09:41:53-07:00",
        "message": "Fix AddressSanitizer container-overflow (#12722)\n\nSummary:\n```\nERROR: AddressSanitizer: container-overflow on address 0x506000682221 at pc 0x5583da569f76 bp 0x7f0ec8a9ffb0 sp 0x7f0ec8a9f780\nWRITE of size 53 at 0x506000682221 thread T29\n    #0 0x5583da569f75 in pread\n    https://github.com/facebook/rocksdb/issues/1 0x5583e334fde4 in rocksdb::PosixRandomAccessFile::Read(unsigned long, unsigned long, rocksdb::IOOptions const&, rocksdb::Slice*, char*, rocksdb::IODebugContext*) const /rocksdb/env/io_posix.cc:580:9\n    https://github.com/facebook/rocksdb/issues/2 0x5583e2cac42b in rocksdb::(anonymous namespace)::CompositeRandomAccessFileWrapper::Read(unsigned long, unsigned long, rocksdb::Slice*, char*) const /rocksdb/env/composite_env.cc:61:21\n    https://github.com/facebook/rocksdb/issues/3 0x5583e2c8a8e4 in rocksdb::(anonymous namespace)::LegacyRandomAccessFileWrapper::Read(unsigned long, unsigned long, rocksdb::IOOptions const&, rocksdb::Slice*, char*, rocksdb::IODebugContext*) const /rocksdb/env/env.cc:152:41\n    https://github.com/facebook/rocksdb/issues/4 0x5583e2d6cbfb in rocksdb::RandomAccessFileReader::Read(rocksdb::IOOptions const&, unsigned long, unsigned long, rocksdb::Slice*, char*, std::__2::unique_ptr<char [], std::__2::default_delete<char []>>*, rocksdb::Env::IOPriority) const /rocksdb/file/random_access_file_reader.cc:204:25\n    https://github.com/facebook/rocksdb/issues/5 0x5583e307c614 in rocksdb::ReadFooterFromFile(rocksdb::IOOptions const&, rocksdb::RandomAccessFileReader*, rocksdb::FilePrefetchBuffer*, unsigned long, rocksdb::Footer*, unsigned long) /rocksdb/table/format.cc:383:17\n    https://github.com/facebook/rocksdb/issues/6 0x5583e2f88456 in rocksdb::BlockBasedTable::Open(rocksdb::ReadOptions const&, rocksdb::ImmutableOptions const&, rocksdb::EnvOptions const&, rocksdb::BlockBasedTableOptions const&, rocksdb::InternalKeyComparator const&, std::__2::unique_ptr<rocksdb::RandomAccessFileReader, std::__2::default_delete<rocksdb::RandomAccessFileReader>>&&, unsigned long, std::__2::unique_ptr<rocksdb::TableReader, std::__2::default_delete<rocksdb::TableReader>>*, std::__2::shared_ptr<rocksdb::CacheReservationManager>, std::__2::shared_ptr<rocksdb::SliceTransform const> const&, bool, bool, int, bool, unsigned long, bool, rocksdb::TailPrefetchStats*, rocksdb::BlockCacheTracer*, unsigned long, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>> const&, unsigned long) /rocksdb/table/block_based/block_based_table_reader.cc:610:9\n    https://github.com/facebook/rocksdb/issues/7 0x5583e2ef7837 in rocksdb::BlockBasedTableFactory::NewTableReader(rocksdb::ReadOptions const&, rocksdb::TableReaderOptions const&, std::__2::unique_ptr<rocksdb::RandomAccessFileReader, std::__2::default_delete<rocksdb::RandomAccessFileReader>>&&, unsigned long, std::__2::unique_ptr<rocksdb::TableReader, std::__2::default_delete<rocksdb::TableReader>>*, bool) const /rocksdb/table/block_based/block_based_table_factory.cc:599:10\n    https://github.com/facebook/rocksdb/issues/8 0x5583e2ab873c in rocksdb::TableCache::GetTableReader(rocksdb::ReadOptions const&, rocksdb::FileOptions const&, rocksdb::InternalKeyComparator const&, rocksdb::FileDescriptor const&, bool, bool, rocksdb::HistogramImpl*, std::__2::unique_ptr<rocksdb::TableReader, std::__2::default_delete<rocksdb::TableReader>>*, std::__2::shared_ptr<rocksdb::SliceTransform const> const&, bool, int, bool, unsigned long, rocksdb::Temperature) /rocksdb/db/table_cache.cc:142:34\n    https://github.com/facebook/rocksdb/issues/9 0x5583e2aba5f6 in rocksdb::TableCache::FindTable(rocksdb::ReadOptions const&, rocksdb::FileOptions const&, rocksdb::InternalKeyComparator const&, rocksdb::FileDescriptor const&, rocksdb::Cache::Handle**, std::__2::shared_ptr<rocksdb::SliceTransform const> const&, bool, bool, rocksdb::HistogramImpl*, bool, int, bool, unsigned long, rocksdb::Temperature) /rocksdb/db/table_cache.cc:190:16\n    https://github.com/facebook/rocksdb/issues/10 0x5583e2abb7e1 in rocksdb::TableCache::NewIterator(rocksdb::ReadOptions const&, rocksdb::FileOptions const&, rocksdb::InternalKeyComparator const&, rocksdb::FileMetaData const&, rocksdb::RangeDelAggregator*, std::__2::shared_ptr<rocksdb::SliceTransform const> const&, rocksdb::TableReader**, rocksdb::HistogramImpl*, rocksdb::TableReaderCaller, rocksdb::Arena*, bool, int, unsigned long, rocksdb::InternalKey const*, rocksdb::InternalKey const*, bool) /rocksdb/db/table_cache.cc:235:9\n    https://github.com/facebook/rocksdb/issues/11 0x5583e28d14cf in rocksdb::BuildTable(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>> const&, rocksdb::VersionSet*, rocksdb::ImmutableDBOptions const&, rocksdb::TableBuilderOptions const&, rocksdb::FileOptions const&, rocksdb::TableCache*, rocksdb::InternalIteratorBase<rocksdb::Slice>*, std::__2::vector<std::__2::unique_ptr<rocksdb::FragmentedRangeTombstoneIterator, std::__2::default_delete<rocksdb::FragmentedRangeTombstoneIterator>>, std::__2::allocator<std::__2::unique_ptr<rocksdb::FragmentedRangeTombstoneIterator, std::__2::default_delete<rocksdb::FragmentedRangeTombstoneIterator>>>>, rocksdb::FileMetaData*, std::__2::vector<rocksdb::BlobFileAddition, std::__2::allocator<rocksdb::BlobFileAddition>>*, std::__2::vector<unsigned long, std::__2::allocator<unsigned long>>, unsigned long, unsigned long, rocksdb::SnapshotChecker*, bool, rocksdb::InternalStats*, rocksdb::IOStatus*, std::__2::shared_ptr<rocksdb::IOTracer> const&, rocksdb::BlobFileCreationReason, rocksdb::EventLogger*, int, rocksdb::Env::IOPriority, rocksdb::TableProperties*, rocksdb::Env::WriteLifeTimeHint, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>> const*, rocksdb::BlobFileCompletionCallback*, unsigned long*, unsigned long*, unsigned long*) /rocksdb/db/builder.cc:335:57\n    https://github.com/facebook/rocksdb/issues/12 0x5583e29bf29d in rocksdb::FlushJob::WriteLevel0Table() /rocksdb/db/flush_job.cc:919:11\n    https://github.com/facebook/rocksdb/issues/13 0x5583e29b33ac in rocksdb::FlushJob::Run(rocksdb::LogsWithPrepTracker*, rocksdb::FileMetaData*, bool*) /rocksdb/db/flush_job.cc:276:9\n    https://github.com/facebook/rocksdb/issues/14 0x5583e27a4781 in rocksdb::DBImpl::FlushMemTableToOutputFile(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&, bool*, rocksdb::JobContext*, rocksdb::SuperVersionContext*, std::__2::vector<unsigned long, std::__2::allocator<unsigned long>>&, unsigned long, rocksdb::SnapshotChecker*, rocksdb::LogBuffer*, rocksdb::Env::Priority) /rocksdb/db/db_impl/db_impl_compaction_flush.cc:258:19\n    https://github.com/facebook/rocksdb/issues/15 0x5583e27a7a96 in rocksdb::DBImpl::FlushMemTablesToOutputFiles(rocksdb::autovector<rocksdb::DBImpl::BGFlushArg, 8ul> const&, bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::Env::Priority) /rocksdb/db/db_impl/db_impl_compaction_flush.cc:377:14\n    https://github.com/facebook/rocksdb/issues/16 0x5583e27d6777 in rocksdb::DBImpl::BackgroundFlush(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::FlushReason*, rocksdb::Env::Priority) /rocksdb/db/db_impl/db_impl_compaction_flush.cc:2778:14\n    https://github.com/facebook/rocksdb/issues/17 0x5583e27d14e2 in rocksdb::DBImpl::BackgroundCallFlush(rocksdb::Env::Priority) /rocksdb/db/db_impl/db_impl_compaction_flush.cc:2817:16\n    https://github.com/facebook/rocksdb/issues/18 0x5583e323d353 in std::__2::__function::__policy_func<void ()>::operator()[abi:ne180100]() const /root/build/3rdParty/llvm/runtimes/include/c++/v1/__functional/function.h:714:12\n    https://github.com/facebook/rocksdb/issues/19 0x5583e323d353 in std::__2::function<void ()>::operator()() const /root/build/3rdParty/llvm/runtimes/include/c++/v1/__functional/function.h:981:10\n    https://github.com/facebook/rocksdb/issues/20 0x5583e323d353 in rocksdb::ThreadPoolImpl::Impl::BGThread(unsigned long) /rocksdb/util/threadpool_imp.cc:266:5\n    https://github.com/facebook/rocksdb/issues/21 0x5583e3243d18 in decltype(std::declval<void (*)(void*)>()(std::declval<rocksdb::BGThreadMetadata*>())) std::__2::__invoke[abi:ne180100]<void (*)(void*), rocksdb::BGThreadMetadata*>(void (*&&)(void*), rocksdb::BGThreadMetadata*&&) /root/build/3rdParty/llvm/runtimes/include/c++/v1/__type_traits/invoke.h:344:25\n    https://github.com/facebook/rocksdb/issues/22 0x5583e3243d18 in void std::__2::__thread_execute[abi:ne180100]<std::__2::unique_ptr<std::__2::__thread_struct, std::__2::default_delete<std::__2::__thread_struct>>, void (*)(void*), rocksdb::BGThreadMetadata*, 2ul>(std::__2::tuple<std::__2::unique_ptr<std::__2::__thread_struct, std::__2::default_delete<std::__2::__thread_struct>>, void (*)(void*), rocksdb::BGThreadMetadata*>&, std::__2::__tuple_indices<2ul>) /root/build/3rdParty/llvm/runtimes/include/c++/v1/__thread/thread.h:193:3\n    https://github.com/facebook/rocksdb/issues/23 0x5583e3243d18 in void* std::__2::__thread_proxy[abi:ne180100]<std::__2::tuple<std::__2::unique_ptr<std::__2::__thread_struct, std::__2::default_delete<std::__2::__thread_struct>>, void (*)(void*), rocksdb::BGThreadMetadata*>>(void*) /root/build/3rdParty/llvm/runtimes/include/c++/v1/__thread/thread.h:202:3\n    https://github.com/facebook/rocksdb/issues/24 0x5583da5e819e in asan_thread_start(void*) crtstuff.c\n    https://github.com/facebook/rocksdb/issues/25 0x7f0eda362a93 in start_thread nptl/pthread_create.c:447:8\n    https://github.com/facebook/rocksdb/issues/26 0x7f0eda3efc3b in clone3 misc/../sysdeps/unix/sysv/linux/x86_64/clone3.S:78\n\n0x506000682221 is located 1 bytes inside of 56-byte region [0x506000682220,0x506000682258)\nallocated by thread T29 here:\n    #0 0x5583da6281d1 in operator new(unsigned long)\n    https://github.com/facebook/rocksdb/issues/1 0x5583da6c987d in __libcpp_operator_new<unsigned long> /root/build/3rdParty/llvm/runtimes/include/c++/v1/new:271:10\n    https://github.com/facebook/rocksdb/issues/2 0x5583da6c987d in __libcpp_allocate /root/build/3rdParty/llvm/runtimes/include/c++/v1/new:295:10\n    https://github.com/facebook/rocksdb/issues/3 0x5583da6c987d in allocate /root/build/3rdParty/llvm/runtimes/include/c++/v1/__memory/allocator.h:125:32\n    https://github.com/facebook/rocksdb/issues/4 0x5583da6c987d in allocate_at_least /root/build/3rdParty/llvm/runtimes/include/c++/v1/__memory/allocator.h:131:13\n    https://github.com/facebook/rocksdb/issues/5 0x5583da6c987d in allocate_at_least<std::__2::allocator<char> > /root/build/3rdParty/llvm/runtimes/include/c++/v1/__memory/allocate_at_least.h:34:20\n    https://github.com/facebook/rocksdb/issues/6 0x5583da6c987d in __allocate_at_least<std::__2::allocator<char> > /root/build/3rdParty/llvm/runtimes/include/c++/v1/__memory/allocate_at_least.h:42:10\n    https://github.com/facebook/rocksdb/issues/7 0x5583da6c987d in std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__shrink_or_extend[abi:ne180100](unsigned long) /root/build/3rdParty/llvm/runtimes/include/c++/v1/string:3236:27\n    https://github.com/facebook/rocksdb/issues/8 0x5583e307c5aa in std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::reserve(unsigned long) /root/build/3rdParty/llvm/runtimes/include/c++/v1/string:3207:3\n    https://github.com/facebook/rocksdb/issues/9 0x5583e307c5aa in rocksdb::ReadFooterFromFile(rocksdb::IOOptions const&, rocksdb::RandomAccessFileReader*, rocksdb::FilePrefetchBuffer*, unsigned long, rocksdb::Footer*, unsigned long) /rocksdb/table/format.cc:382:18\n    https://github.com/facebook/rocksdb/issues/10 0x5583e2f88456 in rocksdb::BlockBasedTable::Open(rocksdb::ReadOptions const&, rocksdb::ImmutableOptions const&, rocksdb::EnvOptions const&, rocksdb::BlockBasedTableOptions const&, rocksdb::InternalKeyComparator const&, std::__2::unique_ptr<rocksdb::RandomAccessFileReader, std::__2::default_delete<rocksdb::RandomAccessFileReader>>&&, unsigned long, std::__2::unique_ptr<rocksdb::TableReader, std::__2::default_delete<rocksdb::TableReader>>*, std::__2::shared_ptr<rocksdb::CacheReservationManager>, std::__2::shared_ptr<rocksdb::SliceTransform const> const&, bool, bool, int, bool, unsigned long, bool, rocksdb::TailPrefetchStats*, rocksdb::BlockCacheTracer*, unsigned long, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>> const&, unsigned long) /rocksdb/table/block_based/block_based_table_reader.cc:610:9\n    https://github.com/facebook/rocksdb/issues/11 0x5583e2ef7837 in rocksdb::BlockBasedTableFactory::NewTableReader(rocksdb::ReadOptions const&, rocksdb::TableReaderOptions const&, std::__2::unique_ptr<rocksdb::RandomAccessFileReader, std::__2::default_delete<rocksdb::RandomAccessFileReader>>&&, unsigned long, std::__2::unique_ptr<rocksdb::TableReader, std::__2::default_delete<rocksdb::TableReader>>*, bool) const /rocksdb/table/block_based/block_based_table_factory.cc:599:10\n    https://github.com/facebook/rocksdb/issues/12 0x5583e2ab873c in rocksdb::TableCache::GetTableReader(rocksdb::ReadOptions const&, rocksdb::FileOptions const&, rocksdb::InternalKeyComparator const&, rocksdb::FileDescriptor const&, bool, bool, rocksdb::HistogramImpl*, std::__2::unique_ptr<rocksdb::TableReader, std::__2::default_delete<rocksdb::TableReader>>*, std::__2::shared_ptr<rocksdb::SliceTransform const> const&, bool, int, bool, unsigned long, rocksdb::Temperature) /rocksdb/db/table_cache.cc:142:34\n    https://github.com/facebook/rocksdb/issues/13 0x5583e2aba5f6 in rocksdb::TableCache::FindTable(rocksdb::ReadOptions const&, rocksdb::FileOptions const&, rocksdb::InternalKeyComparator const&, rocksdb::FileDescriptor const&, rocksdb::Cache::Handle**, std::__2::shared_ptr<rocksdb::SliceTransform const> const&, bool, bool, rocksdb::HistogramImpl*, bool, int, bool, unsigned long, rocksdb::Temperature) /rocksdb/db/table_cache.cc:190:16\n    https://github.com/facebook/rocksdb/issues/14 0x5583e2abb7e1 in rocksdb::TableCache::NewIterator(rocksdb::ReadOptions const&, rocksdb::FileOptions const&, rocksdb::InternalKeyComparator const&, rocksdb::FileMetaData const&, rocksdb::RangeDelAggregator*, std::__2::shared_ptr<rocksdb::SliceTransform const> const&, rocksdb::TableReader**, rocksdb::HistogramImpl*, rocksdb::TableReaderCaller, rocksdb::Arena*, bool, int, unsigned long, rocksdb::InternalKey const*, rocksdb::InternalKey const*, bool) /rocksdb/db/table_cache.cc:235:9\n    https://github.com/facebook/rocksdb/issues/15 0x5583e28d14cf in rocksdb::BuildTable(std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>> const&, rocksdb::VersionSet*, rocksdb::ImmutableDBOptions const&, rocksdb::TableBuilderOptions const&, rocksdb::FileOptions const&, rocksdb::TableCache*, rocksdb::InternalIteratorBase<rocksdb::Slice>*, std::__2::vector<std::__2::unique_ptr<rocksdb::FragmentedRangeTombstoneIterator, std::__2::default_delete<rocksdb::FragmentedRangeTombstoneIterator>>, std::__2::allocator<std::__2::unique_ptr<rocksdb::FragmentedRangeTombstoneIterator, std::__2::default_delete<rocksdb::FragmentedRangeTombstoneIterator>>>>, rocksdb::FileMetaData*, std::__2::vector<rocksdb::BlobFileAddition, std::__2::allocator<rocksdb::BlobFileAddition>>*, std::__2::vector<unsigned long, std::__2::allocator<unsigned long>>, unsigned long, unsigned long, rocksdb::SnapshotChecker*, bool, rocksdb::InternalStats*, rocksdb::IOStatus*, std::__2::shared_ptr<rocksdb::IOTracer> const&, rocksdb::BlobFileCreationReason, rocksdb::EventLogger*, int, rocksdb::Env::IOPriority, rocksdb::TableProperties*, rocksdb::Env::WriteLifeTimeHint, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>> const*, rocksdb::BlobFileCompletionCallback*, unsigned long*, unsigned long*, unsigned long*) /rocksdb/db/builder.cc:335:57\n    https://github.com/facebook/rocksdb/issues/16 0x5583e29bf29d in rocksdb::FlushJob::WriteLevel0Table() /rocksdb/db/flush_job.cc:919:11\n    https://github.com/facebook/rocksdb/issues/17 0x5583e29b33ac in rocksdb::FlushJob::Run(rocksdb::LogsWithPrepTracker*, rocksdb::FileMetaData*, bool*) /rocksdb/db/flush_job.cc:276:9\n    https://github.com/facebook/rocksdb/issues/18 0x5583e27a4781 in rocksdb::DBImpl::FlushMemTableToOutputFile(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&, bool*, rocksdb::JobContext*, rocksdb::SuperVersionContext*, std::__2::vector<unsigned long, std::__2::allocator<unsigned long>>&, unsigned long, rocksdb::SnapshotChecker*, rocksdb::LogBuffer*, rocksdb::Env::Priority) /rocksdb/db/db_impl/db_impl_compaction_flush.cc:258:19\n    https://github.com/facebook/rocksdb/issues/19 0x5583e27a7a96 in rocksdb::DBImpl::FlushMemTablesToOutputFiles(rocksdb::autovector<rocksdb::DBImpl::BGFlushArg, 8ul> const&, bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::Env::Priority) /rocksdb/db/db_impl/db_impl_compaction_flush.cc:377:14\n    https://github.com/facebook/rocksdb/issues/20 0x5583e27d6777 in rocksdb::DBImpl::BackgroundFlush(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::FlushReason*, rocksdb::Env::Priority) /rocksdb/db/db_impl/db_impl_compaction_flush.cc:2778:14\n    https://github.com/facebook/rocksdb/issues/21 0x5583e27d14e2 in rocksdb::DBImpl::BackgroundCallFlush(rocksdb::Env::Priority) /rocksdb/db/db_impl/db_impl_compaction_flush.cc:2817:16\n    https://github.com/facebook/rocksdb/issues/22 0x5583e323d353 in std::__2::__function::__policy_func<void ()>::operator()[abi:ne180100]() const /root/build/3rdParty/llvm/runtimes/include/c++/v1/__functional/function.h:714:12\n    https://github.com/facebook/rocksdb/issues/23 0x5583e323d353 in std::__2::function<void ()>::operator()() const /root/build/3rdParty/llvm/runtimes/include/c++/v1/__functional/function.h:981:10\n    https://github.com/facebook/rocksdb/issues/24 0x5583e323d353 in rocksdb::ThreadPoolImpl::Impl::BGThread(unsigned long) /rocksdb/util/threadpool_imp.cc:266:5\n    https://github.com/facebook/rocksdb/issues/25 0x5583e3243d18 in decltype(std::declval<void (*)(void*)>()(std::declval<rocksdb::BGThreadMetadata*>())) std::__2::__invoke[abi:ne180100]<void (*)(void*), rocksdb::BGThreadMetadata*>(void (*&&)(void*), rocksdb::BGThreadMetadata*&&) /root/build/3rdParty/llvm/runtimes/include/c++/v1/__type_traits/invoke.h:344:25\n    https://github.com/facebook/rocksdb/issues/26 0x5583e3243d18 in void std::__2::__thread_execute[abi:ne180100]<std::__2::unique_ptr<std::__2::__thread_struct, std::__2::default_delete<std::__2::__thread_struct>>, void (*)(void*), rocksdb::BGThreadMetadata*, 2ul>(std::__2::tuple<std::__2::unique_ptr<std::__2::__thread_struct, std::__2::default_delete<std::__2::__thread_struct>>, void (*)(void*), rocksdb::BGThreadMetadata*>&, std::__2::__tuple_indices<2ul>) /root/build/3rdParty/llvm/runtimes/include/c++/v1/__thread/thread.h:193:3\n    https://github.com/facebook/rocksdb/issues/27 0x5583e3243d18 in void* std::__2::__thread_proxy[abi:ne180100]<std::__2::tuple<std::__2::unique_ptr<std::__2::__thread_struct, std::__2::default_delete<std::__2::__thread_struct>>, void (*)(void*), rocksdb::BGThreadMetadata*>>(void*) /root/build/3rdParty/llvm/runtimes/include/c++/v1/__thread/thread.h:202:3\n    https://github.com/facebook/rocksdb/issues/28 0x5583da5e819e in asan_thread_start(void*) crtstuff.c\n\nHINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_container_overflow=0.\nIf you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.\n AddressSanitizer:container-overflow in pread\nShadow bytes around the buggy address:\n  0x506000681f80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x506000682000: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x506000682080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x506000682100: fa fa fa fa fa fa fa fa fa fa fa fa 00 00 00 00\n  0x506000682180: 00 00 00 fa fa fa fa fa fa fa fa fa fa fa fa fa\n=>0x506000682200: fa fa fa fa[01]fc fc fc fc fc fc fa fa fa fa fa\n  0x506000682280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x506000682300: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 01\n  0x506000682380: fa fa fa fa fd fd fd fd fd fd fd fd fa fa fa fa\n  0x506000682400: fd fd fd fd fd fd fd fa fa fa fa fa fd fd fd fd\n  0x506000682480: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fd\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12722\n\nReviewed By: hx235\n\nDifferential Revision: D58118264\n\nPulled By: ajkr\n\nfbshipit-source-id: 0dd914c886c022d82697b769d664ba52de0770de",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a8a52e5b4d938c1aea28d7a96ec70a459ffaa1a4"
    },
    {
        "hash": "b03d4156609dd27f65ad199139eaae722c876b8c",
        "author": "Po-Chuan Hsieh",
        "date": "2024-06-04T09:36:00-07:00",
        "message": "Fix build on i386 (#12719)\n\nSummary:\nCited from https://pkg-status.freebsd.org/beefy21/data/140i386-default/02faf78f4c9b/logs/rocksdb-9.2.1.log\nThe error message is as follows:\n```\nmkdir -p db_stress_tool && clang++ -O2 -pipe  -DOS_FREEBSD -fstack-protector-strong -isystem /usr/local/include -fno-strict-aliasing   -Wno-inconsistent-missing-override -Wno-unused-parameter -Wno-unused-variable -Wno-unused-private-field -isystem /usr/local/include -std=c++17   -fPIC -DROCKSDB_DLL -DROCKSDB_USE_RTTI   -g -W -Wextra -Wall -Wsign-compare -Wshadow -Wunused-parameter -Werror -I. -I./include -std=c++17 -O2 -pipe  -DOS_FREEBSD -fstack-protector-strong -isystem /usr/local/include -fno-strict-aliasing   -Wno-inconsistent-missing-override -Wno-unused-parameter -Wno-unused-variable -Wno-unused-private-field -isystem /usr/local/include -std=c++17  -faligned-new -DHAVE_ALIGNED_NEW -DROCKSDB_PLATFORM_POSIX -DROCKSDB_LIB_IO_POSIX -O2 -pipe  -DOS_FREEBSD -fstack-protector-strong -isystem /usr/local/include -fno-strict-aliasing  -D_REENTRANT -DOS_FREEBSD -DSNAPPY -DGFLAGS=1 -DZLIB -DBZIP2 -DLZ4 -DZSTD -DROCKSDB_MALLOC_USABLE_SIZE -DROCKSDB_PTHREAD_ADAPTIVE_MUTEX -DROCKSDB_BACKTRACE -DROCKSDB_SCHED_GETCPU_PRESENT   -isystem third-party/gtest-1.8.1/fused-src -O2 -fno-omit-frame-pointer -momit-leaf-frame-pointer -DNDEBUG -Woverloaded-virtual -Wnon-virtual-dtor -Wno-missing-field-initializers -Wno-invalid-offsetof -c db_stress_tool/db_stress_common.cc -o db_stress_tool/db_stress_common.o\ndb_stress_tool/db_stress_common.cc:204:17: error: format specifies type 'unsigned long' but the argument has type 'size_t' (aka 'unsigned int') [-Werror,-Wformat]\n                block_cache->GetCapacity());\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~\n1 error generated.\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12719\n\nReviewed By: hx235\n\nDifferential Revision: D58093539\n\nPulled By: jaykorean\n\nfbshipit-source-id: 400cae3a4b0d23b168937a5388065ef1c4b8b56e",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_common.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b03d4156609dd27f65ad199139eaae722c876b8c"
    },
    {
        "hash": "e4428b7eb9b32d85495186757a13cc782f505535",
        "author": "Andrii Lysenko",
        "date": "2024-06-03T11:37:35-07:00",
        "message": "More details for 'tail prefetch size is calculated based on' (#12667)\n\nSummary:\nThese messages indicate that SST file was created by a pre-9.0.0 RocksDB. Eventually, `TailPrefetchStats` might be removed, so it would be more informative if log message also included name of the affected SST file.\n\nIssue: https://github.com/facebook/rocksdb/issues/12664\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12667\n\nReviewed By: ajkr\n\nDifferential Revision: D57464025\n\nPulled By: hx235\n\nfbshipit-source-id: 12f2f2635e3092f8c29362aa132462492b5c1417",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e4428b7eb9b32d85495186757a13cc782f505535"
    },
    {
        "hash": "023a8084173d5c0664c8afafb8634b8b750aca9b",
        "author": "Levi Tamasi",
        "date": "2024-06-01T09:52:48-07:00",
        "message": "Disable iterator refresh for CoalescingIterator in TestIterateAgainstExpected (#12723)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12723\n\n`CoalescingIterator` doesn't support `Refresh` currently; the patch adds a check that was missing from https://github.com/facebook/rocksdb/pull/12721 to disable this operation when multi-CF iterators are in use in the stress test.\n\nReviewed By: jaykorean\n\nDifferential Revision: D58053334\n\nfbshipit-source-id: 3146f0e7e87230b49b244cecdfcee345c0ce78fa",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/023a8084173d5c0664c8afafb8634b8b750aca9b"
    },
    {
        "hash": "f3b7e959b3ee434dbc7217be36ba70a71d8e8697",
        "author": "Jay Huh",
        "date": "2024-05-31T15:17:06-07:00",
        "message": "Add CoalescingIterator to TestIterateAgainstExpected (#12721)\n\nSummary:\nContinuing from https://github.com/facebook/rocksdb/pull/12706. Adding the CoalescingIterator to `TestIterateAgainstExpected` as well when `use_multi_cf_iterator` is set True\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12721\n\nTest Plan:\n```\npython3 tools/db_crashtest.py blackbox --simple --max_key=25000000 --write_buffer_size=4194304 --use_attribute_group=0 --use_put_entity_one_in=1 --use_multi_get=1 --use_multi_cf_iterator=1 --verify_iterator_with_expected_state_one_in=2\n```\n\nReviewed By: ltamasi\n\nDifferential Revision: D58033811\n\nPulled By: jaykorean\n\nfbshipit-source-id: 7caf39883e277e695b653e295ad72b1004169ca0",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f3b7e959b3ee434dbc7217be36ba70a71d8e8697"
    },
    {
        "hash": "6f17056e401f458d9512b9950af46d8b5e3527fe",
        "author": "Levi Tamasi",
        "date": "2024-05-31T12:01:59-07:00",
        "message": "Add transactional/read-your-own-write MultiGetEntity stress test (#12717)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12717\n\nThe PR adds `Transaction::MultiGetEntity` to the stress tests. Similarly to what we do for `Transaction::MultiGet`, in this mode we open a transaction and randomly add writes for some of the queried keys to it while keeping track of the values written on a per-key basis. The results of `Transaction::MultiGetEntity` can then be validated against these expected values (in order to test the read-your-own-writes functionality) as well as the results returned by `Transaction::GetEntity` for the same keys.\n\nReviewed By: jaykorean\n\nDifferential Revision: D57990210\n\nfbshipit-source-id: 9bf3bb292051c2c57757f86b517919197b03c524",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6f17056e401f458d9512b9950af46d8b5e3527fe"
    },
    {
        "hash": "76aa0d9ee237d5ff3acd7b0f51cef7452eb70c7e",
        "author": "Po-Chuan Hsieh",
        "date": "2024-05-30T17:48:17-07:00",
        "message": "Fix build on FreeBSD (#12714)\n\nSummary:\nThe error message is as follows:\n```\nport/stack_trace.cc:286:7: error: use of undeclared identifier 'waitpid'\n      waitpid(child_pid, &wstatus, 0);\n      ^\nport/stack_trace.cc:287:11: error: use of undeclared identifier 'WIFEXITED'\n      if (WIFEXITED(wstatus) && WEXITSTATUS(wstatus) == EXIT_SUCCESS) {\n          ^\nport/stack_trace.cc:287:33: error: use of undeclared identifier 'WEXITSTATUS'\n      if (WIFEXITED(wstatus) && WEXITSTATUS(wstatus) == EXIT_SUCCESS) {\n                                ^\n3 errors generated.\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12714\n\nReviewed By: ajkr\n\nDifferential Revision: D57970244\n\nPulled By: jaykorean\n\nfbshipit-source-id: afdad9af16b4bfe5e059bc82180f74b2c3260ed9",
        "modified_files_count": 1,
        "modified_files": [
            "port/stack_trace.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/76aa0d9ee237d5ff3acd7b0f51cef7452eb70c7e"
    },
    {
        "hash": "8a462eefae03001958ed3a01174d03f169f796c0",
        "author": "Yu Zhang",
        "date": "2024-05-30T17:23:38-07:00",
        "message": "Add user timestamp support into interactive query command (#12716)\n\nSummary:\nAs titled. This PR also makes the interactive query tool more permissive by allowing the user to continue to try out a different command after the previous command received some allowed errors, such as `Status::NotFound`, `Status::InvalidArgument`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12716\n\nTest Plan:\nManually tested:\n```\nyuzhangyu@yuzhangyu-mbp rocksdb % ./ldb --db=$TEST_DB --key_hex --value_hex query\nget 0x0000000000000000 --read_timestamp=1115559245398440\n0x0000000000000000|timestamp:1115559245398440 ==> 0x07000000000102030C0D0E0F08090A0B14151617101112131C1D1E1F18191A1B24252627202122232C2D2E2F28292A2B34353637303132333C3D3E3F38393A3B\nput 0x0000000000000000 0x0000\nput 0x0000000000000000 => 0x0000 failed: Invalid argument: cannot call this method on column family default that enables timestamp\nput 0x0000000000000000 aha 0x0000\nput gets invalid argument: Invalid argument: user provided timestamp is not a valid uint64 value.\nput 0x0000000000000000 1115559245398441 0x08000000000102030C0D0E0F08090A0B14151617101112131C1D1E1F18191A1B24252627202122232C2D2E2F28292A2B34353637303132333C3D3E3F38393A3B\nput 0x0000000000000000 write_ts: 1115559245398441 => 0x08000000000102030C0D0E0F08090A0B14151617101112131C1D1E1F18191A1B24252627202122232C2D2E2F28292A2B34353637303132333C3D3E3F38393A3B succeeded\ndelete 0x0000000000000000\ndelete 0x0000000000000000 failed: Invalid argument: cannot call this method on column family default that enables timestamp\ndelete 0x0000000000000000 1115559245398442\ndelete 0x0000000000000000 write_ts: 1115559245398442 succeeded\nget 0x0000000000000000 --read_timestamp=1115559245398442\nget 0x0000000000000000 read_timestamp: 1115559245398442 status: NotFound:\nget 0x0000000000000000 --read_timestamp=1115559245398441\n0x0000000000000000|timestamp:1115559245398441 ==> 0x08000000000102030C0D0E0F08090A0B14151617101112131C1D1E1F18191A1B24252627202122232C2D2E2F28292A2B34353637303132333C3D3E3F38393A3B\ncount --from=0x0000000000000000 --to=0x0000000000000001\nscan from 0x0000000000000000 to 0x0000000000000001failed: Invalid argument: cannot call this method on column family default that enables timestamp\ncount --from=0x0000000000000000 --to=0x0000000000000001 --read_timestamp=1115559245398442\n0\ncount --from=0x0000000000000000 --to=0x0000000000000001 --read_timestamp=1115559245398441\n1\n```\n\nReviewed By: ltamasi\n\nDifferential Revision: D57992183\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 720525de22412d16aa952870e088f2c371459ece",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8a462eefae03001958ed3a01174d03f169f796c0"
    },
    {
        "hash": "01179678b2446b94237e9f455b5082ea3171e027",
        "author": "Levi Tamasi",
        "date": "2024-05-30T13:31:25-07:00",
        "message": "Refactor the non-attribute-group/attribute-group code paths in NonBatchedOpsStressTest::TestMultiGetEntity (#12715)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12715\n\nThe patch refactors/deduplicates the non-attribute-group and attribute-group code paths in `NonBatchedOpsStressTest::TestMultiGetEntity` by introducing two new generic lambdas `verify_expected_errors` and `check_results` (the latter of which subsumes the existing `handle_results`) that can handle both types of APIs. This change also serves as groundwork for the upcoming transactional `MultiGetEntity` stress tests.\n\nReviewed By: jaykorean\n\nDifferential Revision: D57977700\n\nfbshipit-source-id: 83a18a9e57f46ea92ba07b2f0dca3e9bc353f257",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/01179678b2446b94237e9f455b5082ea3171e027"
    },
    {
        "hash": "b6ea2463331b9e446f6a6d177647325501ebf311",
        "author": "Levi Tamasi",
        "date": "2024-05-29T17:00:11-07:00",
        "message": "Fix NonBatchOpsStressTest::TestGetEntity by adding fuzzy match (#12711)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12711\n\nThe patch adds the missing other half of https://github.com/facebook/rocksdb/pull/12709: when there is no locking in a read test, we have to be more permissive when it comes to values returned by queries. In particular, any expected state value in a small window around the read call should be allowed, and discrepancies in the presence/absence of a key should only be treated as a failure if the key is guaranteed to have not existed/existed during the above window.\n\nReviewed By: hx235\n\nDifferential Revision: D57938678\n\nfbshipit-source-id: cd5c8bc2e014ec12ea4daf441965f3ec2115663e",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b6ea2463331b9e446f6a6d177647325501ebf311"
    },
    {
        "hash": "d9316260e4726832d11e6c33e35067982970555a",
        "author": "Levi Tamasi",
        "date": "2024-05-29T10:16:37-07:00",
        "message": "Remove unneccessary MutexLock from NonBatchedOpStressTest::TestGetEntity (#12709)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12709\n\nThis is most likely copypasta from `TestGet` from before https://github.com/facebook/rocksdb/pull/11058 . There is no need to lock the mutex for the key for reads; in fact, doing so is detrimental to test coverage since it locks out concurrent writers.\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D57915207\n\nfbshipit-source-id: eb0dbf6b84e5408b87d96dd47597511996e206a7",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d9316260e4726832d11e6c33e35067982970555a"
    },
    {
        "hash": "5cec4bbcab07e7ab925513a0dd133f104f91e1a6",
        "author": "Levi Tamasi",
        "date": "2024-05-28T16:54:10-07:00",
        "message": "Support PutEntity as write method in the transactional MultiGet stress test (#12699)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12699\n\nThe patch adds `PutEntity` to the potential write operations used in the read-your-own-writes tests for `Transaction::MultiGet`. Note that since the stress test generates wide-column structures which have the value returned by `GenerateValue` in the default column, this does not affect the results returned by the `MultiGet` API (unless we have a bug).\n\nThe wide-column entity is generated according to the usual rules based on the value base and the `use_put_entity_one_in` flag. The entire entity structure will be validated by the upcoming stress test for `Transaction::MultiGetEntity`, where we also plan to leverage this logic.\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D57799075\n\nfbshipit-source-id: 5f86c2b2b3ceee8e1b8bf7453c02f1f1b1b00751",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5cec4bbcab07e7ab925513a0dd133f104f91e1a6"
    },
    {
        "hash": "8765a0f5467eaed25099de7fdbce9926b2dad32b",
        "author": "HypenZou",
        "date": "2024-05-28T16:44:25-07:00",
        "message": "Fix version edit dump in json (#12703)\n\nSummary:\n**Context/Summary:**\nthe flag --json of manifest_dump in ldb tool has no effect\nThe bug may  be introduced by pr https://github.com/facebook/rocksdb/pull/8378\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12703\n\nReviewed By: cbi42\n\nDifferential Revision: D57848094\n\nPulled By: ajkr\n\nfbshipit-source-id: 3d1ce65528bf4ce9c53593a7208406ab90e8994b",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_edit_handler.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8765a0f5467eaed25099de7fdbce9926b2dad32b"
    },
    {
        "hash": "7c6c632ea982c5d59e02b433f99f778b9623e910",
        "author": "Daniel Vasquez Lopez",
        "date": "2024-05-28T15:31:45-07:00",
        "message": "Use `std::optional` instead of `std::unique_ptr` to conditionally create a read lock. (#12704)\n\nSummary:\nThis change replaces the use of `std::unique_ptr` with `std::optional` for conditionally constructing a `ReadLock` object. The read lock object was recently introduced in PR https://github.com/facebook/rocksdb/issues/12624. This change makes the code more concise and clarifies that the lock is not meant to be transferred (as `std::unique_ptr` is movable). It also avoids a heap allocation.\n\nThere are no functional changes.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12704\n\nReviewed By: cbi42\n\nDifferential Revision: D57848192\n\nPulled By: ajkr\n\nfbshipit-source-id: da48c77aac33b51ba5dcc238f98fc48ccf234a21",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7c6c632ea982c5d59e02b433f99f778b9623e910"
    },
    {
        "hash": "bd801bd98cd9446b05b3444e30957d587f0ba08d",
        "author": "Levi Tamasi",
        "date": "2024-05-24T14:24:17-07:00",
        "message": "Factor out the RYW transaction building logic into a helper (#12697)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12697\n\nAs groundwork for stress testing `Transaction::MultiGetEntity`, the patch factors out the logic for adding transactional writes for some of the keys in a `MultiGet` batch into a separate helper method called `MaybeAddKeyToTxnForRYW`.\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D57791830\n\nfbshipit-source-id: ef347ba6e6e82dfe5cedb4cf67dd6d1503901d89",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bd801bd98cd9446b05b3444e30957d587f0ba08d"
    },
    {
        "hash": "f044b6a6ad812443345ad4a6f680072930379b3b",
        "author": "Levi Tamasi",
        "date": "2024-05-23T16:47:39-07:00",
        "message": "Fix a couple of issues in the stress test for Transaction::MultiGet (#12696)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12696\n\nTwo fixes:\n1) `Random::Uniform(n)` returns an integer from the interval [0, n - 1], so `Uniform(2)` returns 0 or 1, which means is that we have apparently never covered transactions with deletions in the test. (To prevent similar issues, the patch cleans this write logic up a bit using an `enum class` for the type of write.)\n2) The keys passed in to `TestMultiGet` can have duplicates. What this boils down to is that we have to keep track of the latest expected values for read-your-own-writes on a per-key basis.\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D57750212\n\nfbshipit-source-id: e8ab603252c32331f8db0dfb2affcca1e188c790",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f044b6a6ad812443345ad4a6f680072930379b3b"
    },
    {
        "hash": "014368f62c4654c64f1b199faf322b17c6fad56a",
        "author": "Levi Tamasi",
        "date": "2024-05-22T11:06:52-07:00",
        "message": "Fix the names of function objects added in PR 12681 (#12689)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12689\n\nThese should be in `snake_case` (not `camelCase`) per our style guide.\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D57676418\n\nfbshipit-source-id: 82ad6a87d1540f0b29c2f864ca0128287fe95a9e",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/014368f62c4654c64f1b199faf322b17c6fad56a"
    },
    {
        "hash": "1827f3f98374a065cef08faf82dbda006beb2830",
        "author": "Richard Barnes",
        "date": "2024-05-22T07:14:52-07:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/table/sst_file_reader.cc\n\nSummary:\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: palmje\n\nDifferential Revision: D57632757\n\nfbshipit-source-id: 1dbad2a2e185381e225df8b9027033e06aeaf01b",
        "modified_files_count": 1,
        "modified_files": [
            "table/sst_file_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1827f3f98374a065cef08faf82dbda006beb2830"
    },
    {
        "hash": "4dd084f66dcfc747d6a42ebc8cfc576328078f45",
        "author": "raffertyyu",
        "date": "2024-05-18T18:01:19-07:00",
        "message": "fix gcc warning about dangling-reference in backup_engine_test (#12637)\n\nSummary:\ngcc 14.1 reports some warnings about dangling-reference occured in backup_engine_test.\n```c++\n/data/rocksdb/utilities/backup/backup_engine_test.cc: In member function 'virtual void rocksdb::{anonymous}::BackupEngineTest_ExcludeFiles_Test::TestBody()':\n/data/rocksdb/utilities/backup/backup_engine_test.cc:4411:64: error: possibly dangling reference to a temporary [-Werror=dangling-reference]\n 4411 |         std::make_pair(alt_backup_engine, backup_engine_.get())}) {\n      |                                                                ^\n/data/rocksdb/utilities/backup/backup_engine_test.cc:4410:23: note: the temporary was destroyed at the end of the full expression 'std::make_pair<rocksdb::BackupEngine*, rocksdb::BackupEngine*&>(((rocksdb::{anonymous}::BackupEngineTest_ExcludeFiles_Test*)this)->rocksdb::{anonymous}::BackupEngineTest_ExcludeFiles_Test::rocksdb::{anonymous}::BackupEngineTest.rocksdb::{anonymous}::BackupEngineTest::backup_engine_.std::unique_ptr<rocksdb::BackupEngine>::get(), alt_backup_engine)'\n 4410 |        {std::make_pair(backup_engine_.get(), alt_backup_engine),\n      |         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/data/rocksdb/utilities/backup/backup_engine_test.cc:4411:64: error: possibly dangling reference to a temporary [-Werror=dangling-reference]\n 4411 |         std::make_pair(alt_backup_engine, backup_engine_.get())}) {\n      |                                                                ^\n/data/rocksdb/utilities/backup/backup_engine_test.cc:4411:23: note: the temporary was destroyed at the end of the full expression 'std::make_pair<rocksdb::BackupEngine*&, rocksdb::BackupEngine*>(alt_backup_engine, ((rocksdb::{anonymous}::BackupEngineTest_ExcludeFiles_Test*)this)->rocksdb::{anonymous}::BackupEngineTest_ExcludeFiles_Test::rocksdb::{anonymous}::BackupEngineTest.rocksdb::{anonymous}::BackupEngineTest::backup_engine_.std::unique_ptr<rocksdb::BackupEngine>::get())'\n 4411 |         std::make_pair(alt_backup_engine, backup_engine_.get())}) {\n      |         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\nIt seems to be related to this update in gcc:\nhttps://gcc.gnu.org/gcc-14/changes.html#:~:text=%2DWdangling%2Dreference%20false%20positives%20have%20been%20reduced.%20The%20warning%20does%20not%20warn%20about%20std%3A%3Aspan%2Dlike%20classes%3B%20there%20is%20also%20a%20new%20attribute%20gnu%3A%3Ano_dangling%20to%20suppress%20the%20warning.%20See%20the%20manual%20for%20more%20info.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12637\n\nReviewed By: cbi42\n\nDifferential Revision: D57263996\n\nPulled By: ajkr\n\nfbshipit-source-id: 1e416c38240d3d1adda787fc484c0392e28bb7f1",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backup/backup_engine_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4dd084f66dcfc747d6a42ebc8cfc576328078f45"
    },
    {
        "hash": "ffd7930312dffc6fe7a29e05c4f5870db23869b8",
        "author": "Changyu Bi",
        "date": "2024-05-16T17:23:56-07:00",
        "message": "Add more debug print to `DBTestWithParam.ThreadStatusSingleCompaction` (#12661)\n\nSummary:\nThis test is flaky and a recent failure prints the following:\n```\n[ RUN      ] DBTestWithParam/DBTestWithParam.ThreadStatusSingleCompaction/0\nthread id: 1842811, thread status:\nthread id: 1842803, thread status:\ndb/db_test.cc:4697: Failure\nExpected equality of these values:\n  op_count\n    Which is: 0\n  expected_count\n    Which is: 1\n[  FAILED  ] DBTestWithParam/DBTestWithParam.ThreadStatusSingleCompaction/0, where GetParam() = (1, false) (307 ms)\n```\nEmpty thread status implies that operation_type of the threads are all OP_UNKNOWN. From https://github.com/facebook/rocksdb/blob/3ed46e0668f840bea490e29beeac7777c50ae8fb/monitoring/thread_status_updater.cc#L197, this can be due to thread_data->operation_type being OP_UNKNOWN or that thread_data->cf_key it not in `cf_info_map_`, potentially due to how cf_key_ is accessed with relaxed memory order. This PR adds some debug print to print the cf_name to check this.\n\nThis PR also prints num_running_compaction and lsm state to check if a compaction is indeed running, and removes some not needed options and ensures that exactly 4 L0 files are created.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12661\n\nTest Plan:\n- Cannot repro the failure locally: `gtest-parallel --repeat=10000 --workers=200 ./db_test --gtest_filter=\"*ThreadStatusSingleCompaction*\"`\n- New failure message will look like:\n```\n[ RUN      ] DBTestWithParam/DBTestWithParam.ThreadStatusSingleCompaction/0\nop_count: 1, expected_count 2\nthread id: 6104100864, thread status: , cf_name\nthread id: 6103527424, thread status: Compaction, cf_name default\nrunning compaction: 1 lsm state: 4\ndb/db_test.cc:4885: Failure\nValue of: match\n  Actual: false\nExpected: true\n[  FAILED  ] DBTestWithParam/DBTestWithParam.ThreadStatusSingleCompaction/0, where GetParam() = (1, false) (115 ms)\n```\n\nReviewed By: hx235\n\nDifferential Revision: D57422755\n\nPulled By: cbi42\n\nfbshipit-source-id: 635663f26052b20e485dfa06a7c0f1f318ac1099",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ffd7930312dffc6fe7a29e05c4f5870db23869b8"
    },
    {
        "hash": "3ed46e0668f840bea490e29beeac7777c50ae8fb",
        "author": "Peter Dillinger",
        "date": "2024-05-14T16:44:32-07:00",
        "message": "Handle early exit in DBErrorHandlingFSTests (#12655)\n\nSummary:\nTo avoid use-after-free on custom env on ASSERT_WHATEVER failure.\n\nThis is motivated by a rare crash seen in DBErrorHandlingFSTest.WALWriteError (VersionSet::GetObsoleteFiles in a SstFileManagerImpl::ClearError thread) and wanting to rule out this being related to that.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12655\n\nTest Plan: manually seeing ASSERT_WHATEVER failures, especially under ASAN\n\nReviewed By: cbi42\n\nDifferential Revision: D57358202\n\nPulled By: pdillinger\n\nfbshipit-source-id: 4da2a0d73a54380b257e5cc1ab6c666e26b83973",
        "modified_files_count": 1,
        "modified_files": [
            "db/error_handler_fs_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3ed46e0668f840bea490e29beeac7777c50ae8fb"
    },
    {
        "hash": "7d9642d8761725cbc02a6bd6e8011a2865ec4d00",
        "author": "Yu Zhang",
        "date": "2024-05-10T12:34:53-07:00",
        "message": "Add logging for read timestamp during VerifyDB (#12638)\n\nSummary:\nAs titled. To help debug some verification failures.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12638\n\nTest Plan: manually tested\n\nReviewed By: ajkr\n\nDifferential Revision: D57219549\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 59c05ac85fb1c24449e7394ea04172c855d86420",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7d9642d8761725cbc02a6bd6e8011a2865ec4d00"
    },
    {
        "hash": "1a3357648fa2357097330e2abede82be1a749909",
        "author": "Wei Liu",
        "date": "2024-05-09T11:36:24-07:00",
        "message": "Error log update to db_impl_compaction_flush.cc (#12608)\n\nSummary:\nMake the error looks better.\n\nSome inconsistency here and [here](https://github.com/WweiL/rocksdb/blob/e46ab9d4f0a0e63bfc668421e2994efa918d6570/db/db_impl/db_impl_compaction_flush.cc#L2701-L2702)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12608\n\nReviewed By: ajkr\n\nDifferential Revision: D57134933\n\nPulled By: cbi42\n\nfbshipit-source-id: 2f19f077f388d196652a4e3afd2526f18bf75b2d",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1a3357648fa2357097330e2abede82be1a749909"
    },
    {
        "hash": "b8400c9fafc1efdb8b75a8459fc725225f953f95",
        "author": "Hans Holmberg",
        "date": "2024-05-07T17:54:50-07:00",
        "message": "Make linux file write life time hinting work (#12595)\n\nSummary:\nThe life time hint fcntl takes a 64-bit unsigned int, so make sure to pass a uint64_t when doing the syscall.\n\nSee:\n\nhttps://man7.org/linux/man-pages/man2/fcntl.2.html\nhttps://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=c75b1d9421f80f4143e389d2d50ddfc8a28c8c35\n\nThis is one of those \"How did this ever work?\", as Env::WriteLifeTimeHint hint is definitely not the same as an 64-bit unsigned int.\nWhat's surprising is that SetWriteLifeTimeHint does pass a valid hint from time to time.\n\nThanks,\nHans\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12595\n\nReviewed By: cbi42\n\nDifferential Revision: D56901280\n\nPulled By: ajkr\n\nfbshipit-source-id: f276348863cbc29a537bed9450b16b0cc513ea78",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b8400c9fafc1efdb8b75a8459fc725225f953f95"
    },
    {
        "hash": "3fdc7243f3c72ac191a56cfc16b4262b86c3fcb7",
        "author": "Patrik Valo",
        "date": "2024-05-06T08:53:06-07:00",
        "message": "Fix truncating last character in the StderrLogger (#12620)\n\nSummary:\nThis PR fixes a bug in the StderrLogger that truncated the last character in the logline. The problem was that we provided an incorrect max size parameter into the vsnprintf function. The size didn't take into account the null byte that the function automatically adds.\n\nBefore fix\n```\n** File Read Latency Histogram By Level [default] **\n2024/05/04-18:50:24.209304 4788 [/db_impl/db_impl.cc:498] Shutdown: canceling all background wor\n2024/05/04-18:50:24.209598 4788 [/db_impl/db_impl.cc:692] Shutdown complet\n```\n\nAfter fix\n```\n** File Read Latency Histogram By Level [default] **\n\n2024/05/04-18:51:19.814584 4d4d [/db_impl/db_impl.cc:498] Shutdown: canceling all background work\n2024/05/04-18:51:19.815528 4d4d [/db_impl/db_impl.cc:692] Shutdown complete\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12620\n\nTest Plan:\ntested on examples/simple_example.cc with StderrLogger\nFixes: https://github.com/facebook/rocksdb/issues/12576\n\nReviewed By: jaykorean\n\nDifferential Revision: D56972332\n\nPulled By: ajkr\n\nfbshipit-source-id: 70405e8231ae6e90d24fe0b351bc8e749176bd15",
        "modified_files_count": 1,
        "modified_files": [
            "util/stderr_logger.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3fdc7243f3c72ac191a56cfc16b4262b86c3fcb7"
    },
    {
        "hash": "a178d15bafae1c9ea51f19691b2d1fb9dd3b6a3f",
        "author": "Peter Dillinger",
        "date": "2024-05-03T16:40:07-07:00",
        "message": "More checks around num_entries vs. num_deletions (#12600)\n\nSummary:\nWe've seen an internal crash test+sanitizer failure seemingly caused by underflow on `current_num_non_deletions_` which would happen if num_entries < num_deletions. (T186407810)\n\nThis change adds an additional check (fail earlier?) and coerces read table properties to satisfy the invariant that is supposed to be provided by https://github.com/facebook/rocksdb/pull/4841 but could be violated by older files, due to\nhttps://github.com/facebook/rocksdb/pull/4016.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12600\n\nTest Plan: existing tests\n\nReviewed By: ajkr\n\nDifferential Revision: D56796191\n\nPulled By: pdillinger\n\nfbshipit-source-id: 6d22cc40eb74974c42b311293ee2775c6af95afc",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a178d15bafae1c9ea51f19691b2d1fb9dd3b6a3f"
    },
    {
        "hash": "b312dbe9205a617bd45da1bb673a5a194925d3bb",
        "author": "Hui Xiao",
        "date": "2024-05-03T11:33:33-07:00",
        "message": "Remove duplicate inplace_update_support crash/stress test flag (#12610)\n\nSummary:\n**Context/Summary:**\nAs titled. There were two flags serving the same purpose so removed one of them.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12610\n\nTest Plan: CI\n\nReviewed By: jaykorean, ajkr\n\nDifferential Revision: D56916119\n\nPulled By: hx235\n\nfbshipit-source-id: 011140a7945782cc613ca86d4b542db0cf7fb444",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b312dbe9205a617bd45da1bb673a5a194925d3bb"
    },
    {
        "hash": "58627eff2ebbfa0b27baa9cc46fa4f116c2ae2b2",
        "author": "anand76",
        "date": "2024-05-03T10:34:05-07:00",
        "message": "Fix build error due to virtual Iterator destructor (#12612)\n\nSummary:\nFix build error due to virtual Iterator destructor not marked as override.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12612\n\nReviewed By: jaykorean\n\nDifferential Revision: D56939155\n\nPulled By: anand1976\n\nfbshipit-source-id: 2921d6facc296c69215de45151b08e279a1a98a2",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/iterator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/58627eff2ebbfa0b27baa9cc46fa4f116c2ae2b2"
    },
    {
        "hash": "e2ef349f56f99ae83d2ded1de23ff0684c66e1bb",
        "author": "Changyu Bi",
        "date": "2024-05-02T17:10:06-07:00",
        "message": "Deflake unit test `DBCompactionTest.CompactionLimiter` (#12596)\n\nSummary:\nThe test has been flaky for a long time. A recent [failure](https://github.com/facebook/rocksdb/actions/runs/8820808355/job/24215219590?pr=12578) shows that there is still flush running when the assertion fails. I think this is because `WaitForFlushMemTable()` may return before the a flush schedules the next compaction.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12596\n\nTest Plan: I could not repro the failure locally: `gtest-parallel --repeat=8000 --workers=100 ./db_compaction_test --gtest_filter=\"*CompactionLimiter*\"`\n\nReviewed By: ajkr\n\nDifferential Revision: D56715874\n\nPulled By: cbi42\n\nfbshipit-source-id: f5f64eb30fff7e115c19beedad2dc22afa06258d",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e2ef349f56f99ae83d2ded1de23ff0684c66e1bb"
    },
    {
        "hash": "2cd4346df6703b190d1497719bb1e3fa4336cd42",
        "author": "Jaepil Jeong",
        "date": "2024-05-02T16:54:21-07:00",
        "message": "Fix compile error in Clang (#12588)\n\nSummary:\nThis PR fixes the following compile errors with Clang:\n\n```\n.../rocksdb/env/fs_on_demand.cc:184:5: error: no member named 'for_each' in namespace 'std'; did you mean 'std::ranges::for_each'?\n  184 |     std::for_each(rchildren.begin(), rchildren.end(), [&](std::string& name) {\n      |     ^~~~~~~~~~~~~\n      |     std::ranges::for_each\n/opt/homebrew/opt/llvm@17/bin/../include/c++/v1/__algorithm/ranges_for_each.h:68:23: note: 'std::ranges::for_each' declared here\n   68 | inline constexpr auto for_each = __for_each::__fn{};\n      |                       ^\n.../rocksdb/env/fs_on_demand.cc:188:10: error: no member named 'sort' in namespace 'std'\n  188 |     std::sort(result->begin(), result->end());\n      |     ~~~~~^\n.../rocksdb/env/fs_on_demand.cc:189:10: error: no member named 'sort' in namespace 'std'\n  189 |     std::sort(rchildren.begin(), rchildren.end());\n      |     ~~~~~^\n.../rocksdb/env/fs_on_demand.cc:193:10: error: no member named 'set_union' in namespace 'std'\n  193 |     std::set_union(result->begin(), result->end(), rchildren.begin(),\n      |     ~~~~~^\n.../rocksdb/env/fs_on_demand.cc:221:5: error: no member named 'for_each' in namespace 'std'; did you mean 'std::ranges::for_each'?\n  221 |     std::for_each(\n      |     ^~~~~~~~~~~~~\n      |     std::ranges::for_each\n/opt/homebrew/opt/llvm@17/bin/../include/c++/v1/__algorithm/ranges_for_each.h:68:23: note: 'std::ranges::for_each' declared here\n   68 | inline constexpr auto for_each = __for_each::__fn{};\n      |                       ^\n.../rocksdb/env/fs_on_demand.cc:226:10: error: no member named 'sort' in namespace 'std'\n  226 |     std::sort(result->begin(), result->end(), file_attr_sorter);\n      |     ~~~~~^\n.../rocksdb/env/fs_on_demand.cc:227:10: error: no member named 'sort' in namespace 'std'\n  227 |     std::sort(rchildren.begin(), rchildren.end(), file_attr_sorter);\n      |     ~~~~~^\n.../rocksdb/env/fs_on_demand.cc:231:10: error: no member named 'set_union' in namespace 'std'\n  231 |     std::set_union(rchildren.begin(), rchildren.end(), result->begin(),\n      |     ~~~~~^\n8 errors generated.\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12588\n\nReviewed By: jaykorean\n\nDifferential Revision: D56656222\n\nPulled By: ajkr\n\nfbshipit-source-id: 7e94b6250fc9edfe597a61b7622f09d6b6cd9cbd",
        "modified_files_count": 1,
        "modified_files": [
            "env/fs_on_demand.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2cd4346df6703b190d1497719bb1e3fa4336cd42"
    },
    {
        "hash": "8e1bd022795fbb9ebcc782b8c69ed234a77d6360",
        "author": "Richard Barnes",
        "date": "2024-04-26T15:34:49-07:00",
        "message": "Fix deprecated use of 0/NULL in internal_repo_rocksdb/repo/util/xxhash.h + 1\n\nSummary:\n`nullptr` is typesafe. `0` and `NULL` are not. In the future, only `nullptr` will be allowed.\n\nThis diff helps us embrace the future _now_ in service of enabling `-Wzero-as-null-pointer-constant`.\n\nReviewed By: palmje\n\nDifferential Revision: D56650257\n\nfbshipit-source-id: ce628fbf12ea5846bb7103455ab859c5ed7e3598",
        "modified_files_count": 1,
        "modified_files": [
            "util/xxhash.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8e1bd022795fbb9ebcc782b8c69ed234a77d6360"
    },
    {
        "hash": "3fa2ff304675e7d9d0505e19630f27f9cb86ca22",
        "author": "Richard Barnes",
        "date": "2024-04-26T15:33:38-07:00",
        "message": "Fix deprecated use of 0/NULL in internal_repo_rocksdb/repo/include/rocksdb/utilities/env_mirror.h + 1\n\nSummary:\n`nullptr` is typesafe. `0` and `NULL` are not. In the future, only `nullptr` will be allowed.\n\nThis diff helps us embrace the future _now_ in service of enabling `-Wzero-as-null-pointer-constant`.\n\nReviewed By: palmje\n\nDifferential Revision: D56650296\n\nfbshipit-source-id: ee3491d30e6c1fdefb3010c8ae1104b3f45e70f6",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/env_mirror.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3fa2ff304675e7d9d0505e19630f27f9cb86ca22"
    },
    {
        "hash": "177ccd39043a969c15252bda9b960240c6ed19b9",
        "author": "Andrew Kryczka",
        "date": "2024-04-25T14:34:11-07:00",
        "message": "Print more debug info in test when `SyncWAL()` fails (#12580)\n\nSummary:\nExample failure (cannot reproduce):\n\n```\n[==========] Running 1 test from 1 test case.\n[----------] Global test environment set-up.\n[----------] 1 test from DBWriteTestInstance/DBWriteTest\n[ RUN      ] DBWriteTestInstance/DBWriteTest.ConcurrentlyDisabledWAL/0\ndb/db_write_test.cc:809: Failure\ndbfull()->SyncWAL()\nNot implemented: SyncWAL() is not supported for this implementation of WAL file\ndb/db_write_test.cc:809: Failure\ndbfull()->SyncWAL()\nNot implemented: SyncWAL() is not supported for this implementation of WAL file\ndb/db_write_test.cc:809: Failure\ndbfull()->SyncWAL()\nNot implemented: SyncWAL() is not supported for this implementation of WAL file\ndb/db_write_test.cc:809: Failure\ndbfull()->SyncWAL()\nNot implemented: SyncWAL() is not supported for this implementation of WAL file\ndb/db_write_test.cc:809: Failure\ndbfull()->SyncWAL()\nNot implemented: SyncWAL() is not supported for this implementation of WAL file\ndb/db_write_test.cc:809: Failure\ndbfull()->SyncWAL()\nNot implemented: SyncWAL() is not supported for this implementation of WAL file\ndb/db_write_test.cc:809: Failure\ndbfull()->SyncWAL()\nNot implemented: SyncWAL() is not supported for this implementation of WAL file\ndb/db_write_test.cc:809: Failure\ndbfull()->SyncWAL()\nNot implemented: SyncWAL() is not supported for this implementation of WAL file\ndb/db_write_test.cc:809: Failure\ndbfull()->SyncWAL()\nNot implemented: SyncWAL() is not supported for this implementation of WAL file\ndb/db_write_test.cc:809: Failure\ndbfull()->SyncWAL()\nNot implemented: SyncWAL() is not supported for this implementation of WAL file\n[  FAILED  ] DBWriteTestInstance/DBWriteTest.ConcurrentlyDisabledWAL/0, where GetParam() = 0 (49 ms)\n[----------] 1 test from DBWriteTestInstance/DBWriteTest (49 ms total)\n\n[----------] Global test environment tear-down\n[==========] 1 test from 1 test case ran. (49 ms total)\n[  PASSED  ] 0 tests.\n[  FAILED  ] 1 test, listed below:\n[  FAILED  ] DBWriteTestInstance/DBWriteTest.ConcurrentlyDisabledWAL/0, where GetParam() = 0\n```\n\nI have no idea why `SyncWAL()` would not be supported from what is presumably a `SpecialEnv` so added more debug info in case it fails again in CI. The last failure was https://github.com/facebook/rocksdb/actions/runs/8731304938/job/23956487511?fbclid=IwAR2jyXgVQtCezri3axV5MwMdI7D6VIudMk1xkiN_FL9-x2dkBv4IqIjjgB4 and it only happened once ever AFAIK.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12580\n\nReviewed By: hx235\n\nDifferential Revision: D56541996\n\nPulled By: ajkr\n\nfbshipit-source-id: 1eab17567db783c11054fa85dd8b8880eacd3a50",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_write_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/177ccd39043a969c15252bda9b960240c6ed19b9"
    },
    {
        "hash": "f75f033d74989143601fa344c29d989809579ca9",
        "author": "Andrew Kryczka",
        "date": "2024-04-25T10:24:34-07:00",
        "message": "initialize member variables in `PerfContext`'s default constructor (#12581)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/12581\n\nReviewed By: jaykorean\n\nDifferential Revision: D56555535\n\nPulled By: ajkr\n\nfbshipit-source-id: 8bff376247736a8da69c79b20f6f334f47d896ca",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/perf_context.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f75f033d74989143601fa344c29d989809579ca9"
    },
    {
        "hash": "bcfe4a0dcfbd5aa44263c4a4bb0acddee725d5b0",
        "author": "Levi Tamasi",
        "date": "2024-04-22T12:02:28-07:00",
        "message": "Make sure DBImplFollower::stop_requested_ is initialized (#12572)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/12572\n\nReviewed By: jowlyzhang, anand1976\n\nDifferential Revision: D56426800\n\nfbshipit-source-id: a31f86d8869148092325924db4e7fbfad28777a4",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_follower.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bcfe4a0dcfbd5aa44263c4a4bb0acddee725d5b0"
    },
    {
        "hash": "ef38d99edcf6cbcdb05cc265ee5bc58404986ba5",
        "author": "Levi Tamasi",
        "date": "2024-04-18T14:26:58-07:00",
        "message": "Sanity check the keys parameter in MultiGetEntityFromBatchAndDB (#12564)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12564\n\nSimilarly to how `db`, `column_family`, and `results` are handled, bail out early from `WriteBatchWithIndex::MultiGetEntityFromBatchAndDB` if `keys` is `nullptr`. Note that these checks are best effort in the sense that with the current method signature, the callee has no way of reporting an error if `statuses` is `nullptr` or catching other types of invalid pointers (e.g. when `keys` and/or `results` is non-`nullptr` but do not point to a contiguous range of `num_keys` objects). We can improve this (and many similar RocksDB APIs) using `std::span` in a major release once we move to C++20.\n\nReviewed By: jaykorean\n\nDifferential Revision: D56318179\n\nfbshipit-source-id: bc7a258eda82b5f6c839f212ab824130e773a4f0",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/write_batch_with_index/write_batch_with_index.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ef38d99edcf6cbcdb05cc265ee5bc58404986ba5"
    },
    {
        "hash": "02ea0d636767050cd309f892f2e8b7ec1980f342",
        "author": "Jay Huh",
        "date": "2024-04-17T11:01:06-07:00",
        "message": "Reserve vector in advance to avoid resizing in GetLiveFilesMetaData (#12554)\n\nSummary:\nAs title\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12554\n\nTest Plan: Existing CI\n\nReviewed By: ajkr\n\nDifferential Revision: D56252201\n\nPulled By: jaykorean\n\nfbshipit-source-id: 06211555a54ce5e6bf656b81109022494e6787ea",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/02ea0d636767050cd309f892f2e8b7ec1980f342"
    },
    {
        "hash": "87e164f39afc9e1a1fbbe2fb599507083ab15e11",
        "author": "Levi Tamasi",
        "date": "2024-04-16T14:30:22-07:00",
        "message": "Add a couple of missing (Multi)GetEntity overloads to StackableDB (#12551)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/12551\n\nReviewed By: jaykorean\n\nDifferential Revision: D56206320\n\nfbshipit-source-id: f5d25732d5a138d2460cb2e1820830701fd05c78",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/stackable_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/87e164f39afc9e1a1fbbe2fb599507083ab15e11"
    },
    {
        "hash": "b166ca8b74b91468e3ea0ffee0c1850eeaabec62",
        "author": "Yu Zhang",
        "date": "2024-04-12T10:14:44-07:00",
        "message": "Second attempt #12386 (#12529)\n\nSummary:\nCheck https://github.com/facebook/rocksdb/issues/12386 back in now that we have figured out MyRocks build's failure and unblocked it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12529\n\nReviewed By: ajkr\n\nDifferential Revision: D56047495\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: f90664b9e72c085e068f174720f126b80ad4e8ea",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b166ca8b74b91468e3ea0ffee0c1850eeaabec62"
    },
    {
        "hash": "fab9dd96354334573d7feb3e268a68ecfd5b207c",
        "author": "Yu Zhang",
        "date": "2024-04-10T13:47:52-07:00",
        "message": "Temporary revert #12386 to unblock MyRocks build (#12523)\n\nSummary:\nMyRocks reports build failure with this change (build failures in this diff: https://www.internalfb.com/diff/D55924596) https://github.com/facebook/rocksdb/issues/12386, we haven't figured out how to fix it yet. So we are temporarily reverting it to unblock them.\n\nThis reverts commit 3104e55f298c9af087a0d07b99627aa476db6e27.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12523\n\nReviewed By: hx235\n\nDifferential Revision: D55981751\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 1d7edd42b65ca847cec67549644a2b1e5775841e",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fab9dd96354334573d7feb3e268a68ecfd5b207c"
    },
    {
        "hash": "72c1376fcf751c89a3e70ba30abd36668025e1bc",
        "author": "Hui Xiao",
        "date": "2024-04-08T13:45:41-07:00",
        "message": "Fix \"assertion failed - iter != ROCKSDB_NAMESPACE::OptionsHelper::temperature_to_string.end()\" (#12519)\n\nSummary:\nContext/Summary: for unknown reason, calling a db stress common function in db stress flag file for temperature-related flags will cause some weird behavior in some compilation/build.\n```\nassertion failed - iter != ROCKSDB_NAMESPACE::OptionsHelper::temperature_to_string.end()\n```\nFor now, we decide not to call such function by hard-coding their default stress test values.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12519\n\nTest Plan: - Run a rehearsal stress test with this fix and weird behavior is gone.\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D55884693\n\nPulled By: hx235\n\nfbshipit-source-id: ba5135f5b37a9fa686b3ccae8d3f77e62d6562c9",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_gflags.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/72c1376fcf751c89a3e70ba30abd36668025e1bc"
    },
    {
        "hash": "2207a66fe5f96ed2eb7f3579f225dab92407713c",
        "author": "Yu Zhang",
        "date": "2024-04-04T12:33:05-07:00",
        "message": "Make autovector call default constructor explicitly before move/copy (#12499)\n\nSummary:\nMake `autovector` constructs the stack based element in place before move or copy another `autovector`'s stack based elements. This is already done in  the move/copy version of `autovector::push_back` when adding item to the stack based memory\nhttps://github.com/facebook/rocksdb/blob/8e6e8957fbb90992d1ac0c9996c70998751bd621/util/autovector.h#L269-L285\n\nThe ` values_ = reinterpret_cast<pointer>(buf_);` statement is not sufficient to ensure the class's member variables are properly constructed. I'm able to reproduce this consistently in a unit test in this change: https://github.com/facebook/rocksdb/compare/main...jowlyzhang:fix_sv_install with unit test:\n`./tiered_compaction_test --gtest_filter=\"\\*FastTrack\\*\"\n\nWith below stack trace P1203997597 showing the `std::string` copy destination is invalid, which indicates the object in the destination `autovector` is not constructed properly.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12499\n\nTest Plan: Existing unit tests.\n\nReviewed By: anand1976\n\nDifferential Revision: D55662354\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 581ceb11155d3dd711998607ec6950c0e327556a",
        "modified_files_count": 1,
        "modified_files": [
            "util/autovector.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2207a66fe5f96ed2eb7f3579f225dab92407713c"
    },
    {
        "hash": "ee3159e7dddca6e5eebed0482a268862ed1d2ad5",
        "author": "Richard Barnes",
        "date": "2024-03-31T10:26:34-07:00",
        "message": "Remove extra semi colon from icsp/lib/logging/IcspLogRpcMessage.cpp\n\nSummary:\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: palmje\n\nDifferential Revision: D55534619\n\nfbshipit-source-id: 26f3c35a51b38a3cbfa12a6f76a2bb783a7b4d8e",
        "modified_files_count": 1,
        "modified_files": [
            "cache/cache_reservation_manager_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ee3159e7dddca6e5eebed0482a268862ed1d2ad5"
    },
    {
        "hash": "7e8003296a053ea17d2e1b5814ac8100297dbc2f",
        "author": "Richard Barnes",
        "date": "2024-03-30T07:17:52-07:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/util/coding_test.cc\n\nSummary:\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: palmje\n\nDifferential Revision: D55534622\n\nfbshipit-source-id: dfff34924da6f2cdad34ed21f8f08a9bab9189a7",
        "modified_files_count": 1,
        "modified_files": [
            "util/coding_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7e8003296a053ea17d2e1b5814ac8100297dbc2f"
    },
    {
        "hash": "4e226c97b8328fdfccd2357ebdf3658b46806014",
        "author": "anand76",
        "date": "2024-03-28T13:56:28-07:00",
        "message": "Don't swallow errors in BlockBasedTable::MultiGet (#12486)\n\nSummary:\nErrors were being swallowed in `BlockBasedTable::MultiGet` under some circumstances, such as error when parsing the internal key from the block, or IO error when reading the blob value. We need to set the status for the key to the observed error.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12486\n\nTest Plan: Run db_stress and verify the expected error failure before, and no failures after the change.\n\nReviewed By: jaykorean, ajkr\n\nDifferential Revision: D55483940\n\nPulled By: anand1976\n\nfbshipit-source-id: 493e44db507d5db45e8d1ef2e67808d2c4046318",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader_sync_and_async.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4e226c97b8328fdfccd2357ebdf3658b46806014"
    },
    {
        "hash": "6a1c2abe9dc13396786cf8930d0f6e4697addab7",
        "author": "Richard Barnes",
        "date": "2024-03-20T12:44:50-07:00",
        "message": "Remove extra semi colon from hbt/src/tagstack/tests/SlicerTest.cpp (#12461)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12461\n\nX-link: https://github.com/facebookincubator/dynolog/pull/233\n\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: rahku\n\nDifferential Revision: D55087324\n\nfbshipit-source-id: e8a03d33cad72a7d378e58f85eb550a03f6c2897",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_edit.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6a1c2abe9dc13396786cf8930d0f6e4697addab7"
    },
    {
        "hash": "3f3f4660bd9028e4d387ecd434d4ee3fa2e20c41",
        "author": "Jay Huh",
        "date": "2024-03-20T08:09:09-07:00",
        "message": "wal_read_status check in RecoverLogFiles (#12460)\n\nSummary:\nFixing the not-checked status failure as in https://github.com/facebook/rocksdb/actions/runs/8334988399/job/22809612148.\n\nWhen the status is not ok() for any reason, we do not check the `wal_read_status` because it's not necessary. It's causing the test failure when running with `ASSERT_STATUS_CHECKED=1`\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12460\n\nTest Plan: Existing tests\n\nReviewed By: ajkr\n\nDifferential Revision: D55104844\n\nPulled By: jaykorean\n\nfbshipit-source-id: 919b1fddca835494f9087c51c4da6eabc9e8df2b",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_secondary.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3f3f4660bd9028e4d387ecd434d4ee3fa2e20c41"
    },
    {
        "hash": "2443ebf8106f8e29218c7260958431f21299961a",
        "author": "Hui Xiao",
        "date": "2024-03-18T12:27:49-07:00",
        "message": "Don't write to WAL after previous WAL write error (#12448)\n\nSummary:\n**Context/Summary:**\nWAL write can continue onto the the WAL file that has encountered error and thus crash at https://github.com/facebook/rocksdb/blob/3f5bd46a07843e2117deb373008e63c38a393648/file/writable_file_writer.cc#L67 in below scenario:\n<img width=\"698\" alt=\"Screenshot 2024-03-15 at 1 52 45 PM\" src=\"https://github.com/facebook/rocksdb/assets/83968999/cd631ef2-c87c-4926-91ab-a0dc10f1eb14\">\n\nNote that GetLiveFilesStorageInfo() can happen concurrently with PUT() for the non-WAL-write part where db lock isn't held\n\nThis PR added an error check in LogWriter layer to prevent thread 2 from starting to write WAL after thread 1's write error.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12448\n\nTest Plan:\nStep 1 Apply the patch below to simulate frequent WAL write error for the purpose of repro\n```\n diff --git a/db_stress_tool/db_stress_driver.cc b/db_stress_tool/db_stress_driver.cc\nindex b47fa89e6..31930e976 100644\n --- a/db_stress_tool/db_stress_driver.cc\n+++ b/db_stress_tool/db_stress_driver.cc\n@@ -98,7 +98,7 @@ bool RunStressTestImpl(SharedState* shared) {\n     //  MANIFEST, CURRENT, and WAL files.\n     fault_fs_guard->SetRandomWriteError(\n         shared->GetSeed(), FLAGS_write_fault_one_in, error_msg,\n-        /*inject_for_all_file_types=*/false, {FileType::kTableFile});\n+        /*inject_for_all_file_types=*/false, {FileType::kWalFile});\n     fault_fs_guard->SetFilesystemDirectWritable(false);\n     fault_fs_guard->EnableWriteErrorInjection();\n   }\n\n diff --git a/utilities/fault_injection_fs.cc b/utilities/fault_injection_fs.cc\nindex 0ffb43ea6..589912cf4 100644\n --- a/utilities/fault_injection_fs.cc\n+++ b/utilities/fault_injection_fs.cc\n@@ -1042,7 +1042,7 @@ IOStatus FaultInjectionTestFS::InjectWriteError(const std::string& file_name) {\n   }\n\n   if (allowed_type) {\n-    if (write_error_rand_.OneIn(write_error_one_in_)) {\n+    if (write_error_rand_.OneIn(1)) {\n       return GetError();\n     }\n   }\n```\nStep 2 Run below\n```\n./db_stress --WAL_size_limit_MB=1 --WAL_ttl_seconds=60 --acquire_snapshot_one_in=100 --adaptive_readahead=1 --advise_random_on_open=1 --allow_concurrent_memtable_write=1 --allow_data_in_errors=True --allow_fallocate=1 --async_io=1 --auto_readahead_size=0 --avoid_flush_during_recovery=0 --avoid_flush_during_shutdown=0 --avoid_unnecessary_blocking_io=0 --backup_max_size=104857600 --backup_one_in=1000 --batch_protection_bytes_per_key=8 --bgerror_resume_retry_interval=1000000 --block_protection_bytes_per_key=8 --block_size=16384 --bloom_before_level=2147483646 --bloom_bits=41.19540459544058 --bottommost_compression_type=disable --bottommost_file_compaction_delay=3600 --bytes_per_sync=0 --cache_index_and_filter_blocks=1 --cache_index_and_filter_blocks_with_high_priority=1 --cache_size=33554432 --cache_type=fixed_hyper_clock_cache --charge_compression_dictionary_building_buffer=0 --charge_file_metadata=0 --charge_filter_construction=0 --charge_table_reader=1 --checkpoint_one_in=1000000 --checksum_type=kCRC32c --clear_column_family_one_in=0 --column_families=1 --compact_files_one_in=1000000 --compact_range_one_in=1000 --compaction_pri=0 --compaction_readahead_size=1048576 --compaction_ttl=0 --compress_format_version=1 --compressed_secondary_cache_size=8388608 --compression_checksum=1 --compression_max_dict_buffer_bytes=68719476735 --compression_max_dict_bytes=16384 --compression_parallel_threads=1 --compression_type=zlib --compression_use_zstd_dict_trainer=0 --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --data_block_index_type=0 --db=/dev/shm/rocksdb_test/rocksdb_crashtest_whitebox --db_write_buffer_size=1048576 --delete_obsolete_files_period_micros=30000000 --delpercent=4 --delrangepercent=1 --destroy_db_initially=0 --detect_filter_construct_corruption=1 --disable_wal=0 --dump_malloc_stats=0 --enable_checksum_handoff=1 --enable_compaction_filter=0 --enable_index_compression=1 --enable_pipelined_write=1 --enable_thread_tracking=1 --enable_write_thread_adaptive_yield=0 --expected_values_dir=/dev/shm/rocksdb_test/rocksdb_crashtest_expected --fail_if_options_file_error=0 --fifo_allow_compaction=1 --file_checksum_impl=big --fill_cache=1 --flush_one_in=1000 --format_version=6 --get_current_wal_file_one_in=0 --get_live_files_one_in=10000 --get_property_one_in=100000 --get_sorted_wal_files_one_in=0 --hard_pending_compaction_bytes_limit=274877906944 --high_pri_pool_ratio=0.5 --index_block_restart_interval=15 --index_shortening=2 --index_type=0 --ingest_external_file_one_in=0 --initial_auto_readahead_size=524288 --iterpercent=10 --key_len_percent_dist=1,30,69 --kill_random_test=888887 --level_compaction_dynamic_level_bytes=1 --lock_wal_one_in=10000 --log2_keys_per_lock=10 --log_file_time_to_roll=0 --log_readahead_size=16777216 --long_running_snapshots=0 --low_pri_pool_ratio=0.5 --manifest_preallocation_size=5120 --manual_wal_flush_one_in=1000 --mark_for_compaction_one_file_in=0 --max_auto_readahead_size=524288 --max_background_compactions=1 --max_bytes_for_level_base=67108864 --max_key=100000 --max_key_len=3 --max_log_file_size=1048576 --max_manifest_file_size=1073741824 --max_total_wal_size=0 --max_write_batch_group_size_bytes=64 --max_write_buffer_number=10 --max_write_buffer_size_to_maintain=1048576 --memtable_insert_hint_per_batch=1 --memtable_max_range_deletions=0 --memtable_prefix_bloom_size_ratio=0.5 --memtable_protection_bytes_per_key=8 --memtable_whole_key_filtering=0 --memtablerep=skip_list --metadata_charge_policy=0 --min_write_buffer_number_to_merge=2 --mmap_read=0 --mock_direct_io=True --nooverwritepercent=1 --num_file_reads_for_auto_readahead=2 --open_files=500000 --open_metadata_write_fault_one_in=8 --open_read_fault_one_in=32 --open_write_fault_one_in=0 --ops_per_thread=20000000 --optimize_filters_for_hits=1 --optimize_filters_for_memory=1 --optimize_multiget_for_io=0 --paranoid_file_checks=1 --partition_filters=0 --partition_pinning=3 --pause_background_one_in=10000 --periodic_compaction_seconds=0 --prefix_size=5 --prefixpercent=5 --prepopulate_block_cache=0 --preserve_internal_time_seconds=3600 --progress_reports=0 --read_amp_bytes_per_bit=0 --read_fault_one_in=1000 --readahead_size=16384 --readpercent=45 --recycle_log_file_num=0 --reopen=20 --report_bg_io_stats=0 --sample_for_compression=5 --secondary_cache_fault_one_in=32 --secondary_cache_uri= --skip_stats_update_on_db_open=1 --snapshot_hold_ops=100000 --soft_pending_compaction_bytes_limit=68719476736 --sst_file_manager_bytes_per_sec=0 --sst_file_manager_bytes_per_truncate=0 --stats_dump_period_sec=600 --stats_history_buffer_size=0 --strict_bytes_per_sync=0 --subcompactions=4 --sync=0 --sync_fault_injection=1 --table_cache_numshardbits=-1 --target_file_size_base=16777216 --target_file_size_multiplier=1 --test_batches_snapshots=0 --top_level_index_pinning=1 --unpartitioned_pinning=1 --use_adaptive_mutex=1 --use_adaptive_mutex_lru=1 --use_delta_encoding=1 --use_direct_io_for_flush_and_compaction=1 --use_direct_reads=1 --use_full_merge_v1=0 --use_get_entity=0 --use_merge=1 --use_multi_get_entity=0 --use_multiget=0 --use_put_entity_one_in=1 --use_write_buffer_manager=1 --user_timestamp_size=0 --value_size_mult=32 --verification_only=0 --verify_checksum=1 --verify_checksum_one_in=1000000 --verify_compression=1 --verify_db_one_in=100000 --verify_file_checksums_one_in=1000000 --verify_iterator_with_expected_state_one_in=5 --verify_sst_unique_id_in_manifest=1 --wal_bytes_per_sync=0 --wal_compression=none --write_buffer_size=33554432 --write_dbid_to_manifest=1 --write_fault_one_in=1000 --writepercent=35\n```\nPre-PR:\n```\ndb_stress: ./file/writable_file_writer.h:309: rocksdb::IOStatus rocksdb::WritableFileWriter::AssertFalseAndGetStatusForPrevError(): Assertion `sync_without_flush_called_' failed.\n```\nPost-PR\n```\n2024/03/15-13:44:08  Starting database operations\nput or merge error: IO error: Retryable injected write error\n```\n\nNote: The patch is NOT included in the PR as we first need to figure out how to handle this type of failed write in stress test (planned for the near future). It's sufficient to show the stress test does not crash as pre-PR for the purpose of this PR.\n\nReviewed By: ajkr\n\nDifferential Revision: D54969287\n\nPulled By: hx235\n\nfbshipit-source-id: 0ba4eabfec44ea7656d4d7117836f388897562f2",
        "modified_files_count": 1,
        "modified_files": [
            "db/log_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2443ebf8106f8e29218c7260958431f21299961a"
    },
    {
        "hash": "fa4978c5660fecd9a29aea9edee4e89769ea2118",
        "author": "Hui Xiao",
        "date": "2024-03-14T14:50:56-07:00",
        "message": "Re-suppress tolerable manual compaction stress test failures (#12437)\n\nSummary:\n**Context/Summary:**\nPreviously manual compaction stress test failures won't terminate stress test. https://github.com/facebook/rocksdb/pull/12414 made more manual compaction failures terminate the stress test for signal boosting. A downside to that PR: some tolerable manual compaction stress test failures also unnecessarily terminate stress test.\n\nIdeally we should exclude exactly those tolerable errors (left as a TODO) from being able to terminate. For now we approximate those errors by Aborted(), InvalidArgument(), NotSupported() etc. It's still an improvement to pre-https://github.com/facebook/rocksdb/pull/12414 situation.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12437\n\nTest Plan: - No more tolerable manual compaction stress test failures terminating stress test.\n\nReviewed By: cbi42\n\nDifferential Revision: D54913010\n\nPulled By: hx235\n\nfbshipit-source-id: c43fa79d8f9c1c8b4f8786f8f46508b0ad619a9e",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fa4978c5660fecd9a29aea9edee4e89769ea2118"
    },
    {
        "hash": "c0ae5be93486a722300df27e81d1919e30ad1487",
        "author": "Peter Dillinger",
        "date": "2024-03-12T12:54:53-07:00",
        "message": "Disable flaky part of TransactionLogIteratorCheckWhenArchive (#12423)\n\nSummary:\nhttps://github.com/facebook/rocksdb/issues/12397 attempted to make the test more honest about its failures, and they're really showing up in CI now (but not locally). Disable pending investigation\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12423\n\nTest Plan: watch CI\n\nReviewed By: ltamasi\n\nDifferential Revision: D54817705\n\nPulled By: pdillinger\n\nfbshipit-source-id: 4721834c49b225ac52d1a28ecb06b9d05de977b3",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_log_iter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c0ae5be93486a722300df27e81d1919e30ad1487"
    },
    {
        "hash": "7622029101e8e93d89b6d3778a53ff0f68580067",
        "author": "Peter Dillinger",
        "date": "2024-03-12T08:43:47-07:00",
        "message": "Fix flaky TransactionLogIteratorCheckWhenArchive (#12397)\n\nSummary:\nSeen in https://github.com/facebook/rocksdb/actions/runs/8086592802/job/22096691572?pr=12388\n\n```\n[ RUN      ] DBTestXactLogIterator.TransactionLogIteratorCheckWhenArchive\ndb/db_log_iter_test.cc:173:23: runtime error: member call on address 0x0000023956f0 which does not point to an object of type 'rocksdb::DBTestXactLogIterator'\n0x0000023956f0: note: object is of type 'rocksdb::DBTestBase'\n 00 00 00 00  98 ae f7 da 75 7f 00 00  a0 5d 39 02 00 00 00 00  80 ff 39 02 00 00 00 00  95 00 00 00\n              ^~~~~~~~~~~~~~~~~~~~~~~\n              vptr for 'rocksdb::DBTestBase'\n UndefinedBehaviorSanitizer: undefined-behavior db/db_log_iter_test.cc:173:23 in\n```\n\nThis is almost certainly caused by the sync point callback happening on asynchronous file deletion in the DB while the end of the test is reached and the destruction of the `DBTestXactLogIterator` has reached `DBTestBase::~DBTestBase()`. Either closing the DB or disabling sync points before the end of the test should suffice to fix, and we'll do both. And assert that the sync point callback is actually hit each time.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12397\n\nTest Plan: unable to reproduce, but ran 1000 iterations of the test with UBSAN\n\nReviewed By: ltamasi\n\nDifferential Revision: D54326687\n\nPulled By: pdillinger\n\nfbshipit-source-id: cc09a4dcd2f237d5b45d910364d6aa56bbd46d50",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_log_iter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7622029101e8e93d89b6d3778a53ff0f68580067"
    },
    {
        "hash": "179afd5bef7a043e10c9af322cf620ce11a7322f",
        "author": "anand76",
        "date": "2024-03-11T11:26:24-07:00",
        "message": "Add a FS flag to detect and correct corruption (#12408)\n\nSummary:\nAdd a flag in `IOOptions` to request the file system to make best efforts to detect data corruption and reconstruct the data if possible. This will be used by RocksDB to retry a read if the previous read returns corrupt data (checksum mismatch). Add a new op to `FSSupportedOps` that, if supported, will trigger this behavior in RocksDB.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12408\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D54564218\n\nPulled By: anand1976\n\nfbshipit-source-id: bc401dcd22a7d320bf63b5183c41714acdce39f5",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/file_system.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/179afd5bef7a043e10c9af322cf620ce11a7322f"
    },
    {
        "hash": "3fff57fa6afadf4d7743378b70579a1650ea12a5",
        "author": "jsteemann",
        "date": "2024-03-04T17:39:03-08:00",
        "message": "fix linking without thread status support (#12400)\n\nSummary:\nWhen compiling with `-DNROCKSDB_THREAD_STATUS`, some functions in ThreadStatusUtil are declared but their definition is missing. Their definitions are only compiled when not defining `NROCKSDB_THREAD_STATUS`. This causes problems on linking, when the linker cannot find the definitions of\n\n- ThreadStatusUtil::GetThreadOperation\n- ThreadStatusUtil::SetEnableTracking\n\nThis PR fixes it by adding stubs for these functions in case `NROCKSDB_THREAD_STATUS` is defined.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12400\n\nReviewed By: ajkr\n\nDifferential Revision: D54510769\n\nPulled By: cbi42\n\nfbshipit-source-id: e79e9257492d3dba59615e9e306df7e79838d73b",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/thread_status_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3fff57fa6afadf4d7743378b70579a1650ea12a5"
    },
    {
        "hash": "965364972d76840d9ecaeb339b2092795d9f9bda",
        "author": "jsteemann",
        "date": "2024-03-01T11:25:16-08:00",
        "message": "fix compile warning (#12399)\n\nSummary:\nFix compile warning\n```\nmonitoring/thread_status_util.cc: In static member function ‘static void rocksdb::ThreadStatusUtil::NewColumnFamilyInfo(const rocksdb::DB*, const rocksdb::ColumnFamilyData*, const std::string&, const rocksdb::Env*)’: monitoring/thread_status_util.cc:193:55: warning: unused parameter ‘env’ [-Wunused-parameter]\n  193 |                                            const Env* env) {}\n      |                                            ~~~~~~~~~~~^~~\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12399\n\nReviewed By: jaykorean\n\nDifferential Revision: D54424333\n\nPulled By: cbi42\n\nfbshipit-source-id: 3dcb89f85d3a63b1b0d0d6a8b277f49ce03b6d1a",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/thread_status_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/965364972d76840d9ecaeb339b2092795d9f9bda"
    },
    {
        "hash": "1fa5dff7d1ce7be64555e7bdc8371be562b3eac6",
        "author": "奏之章",
        "date": "2024-02-27T15:23:54-08:00",
        "message": "WriteThread::EnterAsBatchGroupLeader reorder writers (#12138)\n\nSummary:\nReorder writers list to allow a leader can take as more commits as possible to maximize the throughput of the system and reduce IOPS.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12138\n\nReviewed By: hx235\n\nDifferential Revision: D53955592\n\nPulled By: ajkr\n\nfbshipit-source-id: 4d899d038faef691b63801d9d85f5cc079b7bbb5",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_thread.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1fa5dff7d1ce7be64555e7bdc8371be562b3eac6"
    },
    {
        "hash": "3104e55f298c9af087a0d07b99627aa476db6e27",
        "author": "zaidoon",
        "date": "2024-02-27T15:07:00-08:00",
        "message": "update DB::DumpSupportInfo to log whether jemalloc is supported or not (#12386)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/12386\n\nReviewed By: cbi42\n\nDifferential Revision: D54231896\n\nPulled By: ajkr\n\nfbshipit-source-id: 6b3357b2e97d3599955e303810088bb5d5896199",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3104e55f298c9af087a0d07b99627aa476db6e27"
    },
    {
        "hash": "41849210e9acaba9a0d5bf842cf321f9328a212b",
        "author": "Peter Dillinger",
        "date": "2024-02-26T16:08:21-08:00",
        "message": "Fix ArenaTest.UnmappedAllocation in some cases (#12378)\n\nSummary:\nFix compatibility with transparent huge pages by allocating in increments (1MiB) smaller than the\ntypical smallest huge page size of 2MiB.\n\nAlso, bypass the test when jemalloc config.fill is used, which means the allocator is explicitly\nconfigured to write to memory before we get it, which is not what this test expects.\n\nFixes https://github.com/facebook/rocksdb/issues/12351\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12378\n\nTest Plan:\n```\nsudo bash -c 'echo \"always\" > /sys/kernel/mm/transparent_hugepage/enabled'\n```\nAnd see unit test fails before this change, passes after this change\n\nAlso tested internal buck build with dbg mode (previously failing).\n\nReviewed By: jaykorean, hx235\n\nDifferential Revision: D54139634\n\nPulled By: pdillinger\n\nfbshipit-source-id: 179accebe918d8eecd46a979fcf21d356f9b5519",
        "modified_files_count": 1,
        "modified_files": [
            "memory/arena_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/41849210e9acaba9a0d5bf842cf321f9328a212b"
    },
    {
        "hash": "f300438c209b312b074ec45659ee7e8a3d207276",
        "author": "Jay Huh",
        "date": "2024-02-23T13:26:22-08:00",
        "message": "Mark offpeak feature production-ready (#12375)\n\nSummary:\nThe feature was released in 8.9.0 and verified at Meta internally (via ZippyDB test tier). Marking the feature ready in production.\n\nWiki has been added in https://github.com/facebook/rocksdb/wiki/Daily-Off%E2%80%90peak-Time-Option\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12375\n\nTest Plan: No code change. N/A\n\nReviewed By: cbi42\n\nDifferential Revision: D54128890\n\nPulled By: jaykorean\n\nfbshipit-source-id: a6c728ab87657fc5263048e21c366053ec5717af",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f300438c209b312b074ec45659ee7e8a3d207276"
    },
    {
        "hash": "395d24f0fa2d68420cd2b72bdf68ed533b4b83b0",
        "author": "Yaroslav Stepanchuk",
        "date": "2024-02-12T11:24:56-08:00",
        "message": "Fix build on alpine 3.19 (#12345)\n\nSummary:\nAdd missing include of the cstdint header.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12345\n\nReviewed By: ltamasi\n\nDifferential Revision: D53672261\n\nPulled By: cbi42\n\nfbshipit-source-id: 758944c0b51b9701a129e7b88f692103bbce11d3",
        "modified_files_count": 1,
        "modified_files": [
            "options/offpeak_time_info.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/395d24f0fa2d68420cd2b72bdf68ed533b4b83b0"
    },
    {
        "hash": "42a8e583c9cc7007b791ee883566c559daf85731",
        "author": "Changyu Bi",
        "date": "2024-02-07T14:17:51-08:00",
        "message": "Print zstd warning to stdout in stress test (#12338)\n\nSummary:\nso the stress test does not fail.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12338\n\nReviewed By: jaykorean\n\nDifferential Revision: D53542941\n\nPulled By: cbi42\n\nfbshipit-source-id: 83b2eb3cb5cc4c5a268da386c22c4aadeb039a74",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/42a8e583c9cc7007b791ee883566c559daf85731"
    },
    {
        "hash": "3a287796e3e6533f0f9d46cf13c2b0e97e7c3cdd",
        "author": "马越",
        "date": "2024-02-05T11:05:57-08:00",
        "message": "Fix the problem that wrong Key may be passed when using CompactRange JAVA API (#12328)\n\nSummary:\nWhen using the Rocksdb Java API.\n\nWhen we use Java code to call `db.compactRange (columnFamilyHandle, start, null)` which means we hope to perform range compaction on keys bigger than **start**.\nwe expected call to the corresponding C++ code : `db->compactRange (columnFamilyHandle, &start, nullptr)`\nBut in reality, what is being called is\n`db ->compactRange (columnFamilyHandle,start,\"\")`\n\nThe problem here is the `null` in Java are not converted to `nullptr`, but rather to `\"\"`, which may result in some unexpected results\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12328\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D53432749\n\nPulled By: cbi42\n\nfbshipit-source-id: eeadd19d05667230568668946d2ef1d5b2568268",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/rocksjni.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3a287796e3e6533f0f9d46cf13c2b0e97e7c3cdd"
    },
    {
        "hash": "6e88126dd33219727021d9d9f84b42a47cc647b1",
        "author": "Peter Dillinger",
        "date": "2024-02-05T10:26:41-08:00",
        "message": "Don't log an error when an auxiliary dir is missing (#12326)\n\nSummary:\ninfo_log gets an error logged when wal_dir or a db_path/cf_path is missing. Under this condition, the directory is created later (in DBImpl::Recover -> Directories::SetDirectories) with no error status returned.\n\nTo avoid error spam in logs, change these to a descriptive \"header\" log entry.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12326\n\nTest Plan: manual with DBBasicTest.DBCloseAllDirectoryFDs which exercises this code\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D53374743\n\nPulled By: pdillinger\n\nfbshipit-source-id: 32d1ce18809da13a25bdd6183d661f66a3b6a111",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_info_dumper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6e88126dd33219727021d9d9f84b42a47cc647b1"
    },
    {
        "hash": "d11584e42e75d1a785286e2ecc5c8445042f42ac",
        "author": "Yu Zhang",
        "date": "2024-01-31T11:12:52-08:00",
        "message": "Be consistent in key range overlap check (#12315)\n\nSummary:\nWe should be consistent in how we check key range overlap in memtables and in sst files. While all the sst file key range overlap check compares the user key without timestamp, for example:\nhttps://github.com/facebook/rocksdb/blob/377eee77f8da3f5d232cf014db0c4ca232352883/db/version_set.cc#L129-L130\n\nThis key range overlap check for memtable is comparing the whole user key. Currently it happen to achieve the same effect because this function is only called by `ExternalSstFileIngestionJob` and `DBImpl::CompactRange`, which takes a user key without timestamp as the range end, pad a max or min timestamp to it depending on whether the end is exclusive. So use `Compartor::Compare` here is working too, but we should update it to `Comparator::CompareWithoutTimestamp` to be consistent with all the other file key range overlapping check functions.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12315\n\nTest Plan: existing tests\n\nReviewed By: ltamasi\n\nDifferential Revision: D53273456\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: c094ae1f0c195d52542124c4fb03fdca14241e85",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d11584e42e75d1a785286e2ecc5c8445042f42ac"
    },
    {
        "hash": "acf77e1bfee9ebb0867ac277927ed2e37276c493",
        "author": "Peter Dillinger",
        "date": "2024-01-30T16:16:04-08:00",
        "message": "Fix possible crash test segfault in FileExpectedStateManager::Restore() (#12314)\n\nSummary:\n`replayer` could be `nullptr` if `!s.ok()` from an earlier failure. Also consider status returned from `record->Accept()`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12314\n\nTest Plan: blackbox_crash_test run\n\nReviewed By: hx235\n\nDifferential Revision: D53241506\n\nPulled By: pdillinger\n\nfbshipit-source-id: fd330417c23391ca819c3ee0f69e4156d81934dc",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/expected_state.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/acf77e1bfee9ebb0867ac277927ed2e37276c493"
    },
    {
        "hash": "377eee77f8da3f5d232cf014db0c4ca232352883",
        "author": "Yu Zhang",
        "date": "2024-01-30T12:55:41-08:00",
        "message": "Fix race condition for accessing file size in TestFSWritableFile (#12312)\n\nSummary:\nFix a race condition reported by thread sanitizer for accessing an underlying file's size from `TestFSWritableFile`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12312\n\nTest Plan:\nCOMPILE_WITH_TSAN=1 make -j10 transaction_test\n./transaction_test --gtest_filter=\"DBAsBaseDB/TransactionTest.UnlockWALStallCleared/4\" --gtest_repeat=100\n\nReviewed By: pdillinger\n\nDifferential Revision: D53235231\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 35133cd97f8cbb48746ca3b42baeedecb36beb7b",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/fault_injection_fs.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/377eee77f8da3f5d232cf014db0c4ca232352883"
    },
    {
        "hash": "2233a2f4c0161d13ed4831a7a0a45e3a0fd0f740",
        "author": "Changyu Bi",
        "date": "2024-01-26T09:12:07-08:00",
        "message": "Enhance corruption status message for record mismatch in compaction (#12297)\n\nSummary:\n... to include the actual numbers of processed and expected records, and the file number for input files. The purpose is to be able to find the offending files even when the relevant LOG file is gone.\n\nAnother change is to check the record count even when `compaction_verify_record_count` is false, and log a warning message without setting corruption status if there is a mismatch. This is consistent with how we check the record count for flush.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12297\n\nTest Plan:\nprint the status message in `DBCompactionTest.VerifyRecordCount`\n```\nbefore\nCorruption: Compaction number of input keys does not match number of keys processed.\nafter\nCompaction number of input keys does not match number of keys processed. Expected 20 but processed 10. Compaction summary: Base version 4 Base level 0, inputs: [11(2156B) 9(2156B)]\n```\n\nReviewed By: ajkr\n\nDifferential Revision: D53110130\n\nPulled By: cbi42\n\nfbshipit-source-id: 6325cbfb8f71f25ce37f23f8277ebe9264863c3b",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2233a2f4c0161d13ed4831a7a0a45e3a0fd0f740"
    },
    {
        "hash": "3812a77771f875895f7be50293c3865a29916aac",
        "author": "Changyu Bi",
        "date": "2024-01-25T10:37:11-08:00",
        "message": "Deflake `DBCompactionTest.BottomPriCompactionCountsTowardConcurrencyLimit` (#12289)\n\nSummary:\nThe test has been failing with\n```\n[ RUN      ] DBCompactionTest.BottomPriCompactionCountsTowardConcurrencyLimit\ndb/db_compaction_test.cc:9661: Failure\nExpected equality of these values:\n  0u\n    Which is: 0\n  env_->GetThreadPoolQueueLen(Env::Priority::LOW)\n    Which is: 1\n```\nThis can happen when thread pool queue len is checked before `test::SleepingBackgroundTask::DoSleepTask` is scheduled.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12289\n\nReviewed By: ajkr\n\nDifferential Revision: D53064300\n\nPulled By: cbi42\n\nfbshipit-source-id: 9ed1b714243880f82bd1cc1584b402ac9cf57507",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3812a77771f875895f7be50293c3865a29916aac"
    },
    {
        "hash": "438fc3d9b7fda27dc6099c5263a6b3cf35e611af",
        "author": "Hui Xiao",
        "date": "2024-01-25T09:58:25-08:00",
        "message": "No consistency check when compaction filter is enabled in stress test (#12291)\n\nSummary:\n**Context/Summary:**\n[Consistency check between Multiget and Get](https://github.com/facebook/rocksdb/blob/d82d179a5edc57e7de395e5db6f224d53e87c0cd/db_stress_tool/no_batched_ops_stress.cc#L585-L591) requires snapshot to be repeatable, that is, no keys being protected by this snapshot is deleted. However compaction filter can remove keys under snapshot, e,g,[DBStressCompactionFilter](https://github.com/facebook/rocksdb/blob/d82d179a5edc57e7de395e5db6f224d53e87c0cd/db_stress_tool/db_stress_compaction_filter.h#L59), which makes consistency check fail meaninglessly. This is noted in https://github.com/facebook/rocksdb/wiki/Compaction-Filter - \"Since release 6.0, with compaction filter enabled, RocksDB always invoke filtering for any key, even if it knows it will make a snapshot not repeatable.\"\n\nThis PR makes consistency check happens only when compaction filter is not enabled in stress test\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12291\n\nTest Plan:\n- Make the stress test command that fails on consistency check pass\n```\n ./db_stress --preserve_unverified_changes=1 --acquire_snapshot_one_in=0 --adaptive_readahead=0 --allow_concurrent_memtable_write=0 --allow_data_in_errors=True --async_io=0 --auto_readahead_size=0 --avoid_flush_during_recovery=0 --avoid_unnecessary_blocking_io=1 --backup_max_size=104857600 --backup_one_in=0 --batch_protection_bytes_per_key=0 --block_protection_bytes_per_key=0 --block_size=16384 --bloom_before_level=2147483647 --bloom_bits=30.729729833325962 --bottommost_compression_type=disable --bottommost_file_compaction_delay=0 --bytes_per_sync=0 --cache_index_and_filter_blocks=1 --cache_size=33554432 --cache_type=lru_cache --charge_compression_dictionary_building_buffer=0 --charge_file_metadata=1 --charge_filter_construction=0 --charge_table_reader=1 --checkpoint_one_in=0 --checksum_type=kCRC32c --clear_column_family_one_in=0 --column_families=1 --compact_files_one_in=0 --compact_range_one_in=0 --compaction_pri=4 --compaction_readahead_size=0 --compaction_ttl=0 --compressed_secondary_cache_size=8388608 --compression_checksum=0 --compression_max_dict_buffer_bytes=0 --compression_max_dict_bytes=0 --compression_parallel_threads=1 --compression_type=zlib --compression_use_zstd_dict_trainer=0 --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --data_block_index_type=0 --db=$db --db_write_buffer_size=0 --delpercent=0 --delrangepercent=50 --destroy_db_initially=0 --detect_filter_construct_corruption=1 --disable_wal=0 --enable_compaction_filter=1 --disable_auto_compactions=1 --enable_pipelined_write=0 --enable_thread_tracking=0 --expected_values_dir=$expected --fail_if_options_file_error=1 --fifo_allow_compaction=0 --file_checksum_impl=xxh64 --flush_one_in=0 --format_version=5 --get_current_wal_file_one_in=0 --get_live_files_one_in=0 --get_property_one_in=0 --get_sorted_wal_files_one_in=0 --index_block_restart_interval=3 --index_type=0 --ingest_external_file_one_in=100 --initial_auto_readahead_size=0 --iterpercent=0 --key_len_percent_dist=1,30,69 --level_compaction_dynamic_level_bytes=1 --lock_wal_one_in=0 --long_running_snapshots=0 --manual_wal_flush_one_in=0 --mark_for_compaction_one_file_in=0 --max_auto_readahead_size=0 --max_background_compactions=1 --max_bytes_for_level_base=67108864 --max_key=1000 --max_key_len=3 --max_manifest_file_size=1073741824 --max_write_batch_group_size_bytes=64 --max_write_buffer_number=10 --max_write_buffer_size_to_maintain=2097152 --memtable_max_range_deletions=0 --memtable_prefix_bloom_size_ratio=0.01 --memtable_protection_bytes_per_key=8 --memtable_whole_key_filtering=0 --memtablerep=skip_list --min_write_buffer_number_to_merge=1 --mmap_read=0 --mock_direct_io=True --nooverwritepercent=1 --num_file_reads_for_auto_readahead=1 --open_files=-1 --open_metadata_write_fault_one_in=0 --open_read_fault_one_in=0 --open_write_fault_one_in=0 --ops_per_thread=100000 --optimize_filters_for_memory=0 --paranoid_file_checks=0 --partition_filters=0 --partition_pinning=2 --pause_background_one_in=0 --periodic_compaction_seconds=0 --prefix_size=8 --prefixpercent=0 --prepopulate_block_cache=0 --preserve_internal_time_seconds=0 --progress_reports=0 --read_fault_one_in=0 --readahead_size=0 --readpercent=45 --recycle_log_file_num=0 --reopen=0 --secondary_cache_fault_one_in=0 --secondary_cache_uri= --set_options_one_in=0 --snapshot_hold_ops=0 --sst_file_manager_bytes_per_sec=104857600 --sst_file_manager_bytes_per_truncate=1048576 --stats_dump_period_sec=0 --subcompactions=1 --sync=0 --sync_fault_injection=0 --target_file_size_base=167772 --target_file_size_multiplier=1 --test_batches_snapshots=0 --top_level_index_pinning=0 --unpartitioned_pinning=3 --use_direct_io_for_flush_and_compaction=0 --use_direct_reads=0 --use_full_merge_v1=0 --use_get_entity=0 --use_merge=0 --use_multi_get_entity=0 --use_multiget=1 --use_put_entity_one_in=0 --use_write_buffer_manager=0 --user_timestamp_size=0 --value_size_mult=32 --verification_only=0 --verify_checksum=0 --verify_checksum_one_in=0 --verify_db_one_in=0 --verify_file_checksums_one_in=0 --verify_iterator_with_expected_state_one_in=0 --verify_sst_unique_id_in_manifest=0 --wal_bytes_per_sync=0 --wal_compression=none --write_buffer_size=335544 --write_dbid_to_manifest=1 --write_fault_one_in=0 --writepercent=5\n ```\n\nReviewed By: jaykorean, ajkr\n\nDifferential Revision: D53075223\n\nPulled By: hx235\n\nfbshipit-source-id: 61aa4a79de5d123a55eb5ac08b449a8362cc91ae",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/438fc3d9b7fda27dc6099c5263a6b3cf35e611af"
    },
    {
        "hash": "b31f3245f191af08d0e05e5676d0e068d8f4ff3b",
        "author": "Peter Dillinger",
        "date": "2024-01-24T10:14:22-08:00",
        "message": "Fix flaky test shutdown race in seqno_time_test (#12282)\n\nSummary:\nSeen in build-macos-cmake:\n\n```\nReceived signal 11 (Segmentation fault: 11)\n\thttps://github.com/facebook/rocksdb/issues/1   rocksdb::MockSystemClock::InstallTimedWaitFixCallback()::$_0::operator()(void*) const (in seqno_time_test) (mock_time_env.cc:29)\n\thttps://github.com/facebook/rocksdb/issues/2   decltype(std::declval<rocksdb::MockSystemClock::InstallTimedWaitFixCallback()::$_0&>()(std::declval<void*>())) std::__1::__invoke[abi:v15006]<rocksdb::MockSystemClock::InstallTimedWaitFixCallback()::$_0&, void*>(rocksdb::MockSystemClock::InstallTimedWait\tixCallback()::$_0&, void*&&) (in seqno_time_test) (invoke.h:394)\n...\n```\n\nThis is presumably because the std::function from the lambda only saves a copy of the SeqnoTimeTest* this pointer, which doesn't prevent it from being reclaimed on parallel shutdown. If we instead save a copy of the `std::shared_ptr<MockSystemClock>` in the std::function, this should prevent the crash. (Note that in `SyncPoint::Data::Process()` copies the std::function before releasing the mutex for calling the callback.)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12282\n\nTest Plan: watch CI\n\nReviewed By: cbi42\n\nDifferential Revision: D53027136\n\nPulled By: pdillinger\n\nfbshipit-source-id: 26cd9c0352541d806d42bb061dd349d3b47171a5",
        "modified_files_count": 1,
        "modified_files": [
            "db/seqno_time_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b31f3245f191af08d0e05e5676d0e068d8f4ff3b"
    },
    {
        "hash": "fc25ac0f3b17bae1943e5dc0ec90dc0b1c85f30d",
        "author": "Richard Barnes",
        "date": "2024-01-24T08:20:50-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/util/ribbon_impl.h (#12269)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12269\n\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: jaykorean\n\nDifferential Revision: D52969093\n\nfbshipit-source-id: 0520085819fa785679c859b63b877931d3f71f2c",
        "modified_files_count": 1,
        "modified_files": [
            "util/ribbon_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fc25ac0f3b17bae1943e5dc0ec90dc0b1c85f30d"
    },
    {
        "hash": "14633148a7bec6d778319e2d653d0b1b3af19f32",
        "author": "Richard Barnes",
        "date": "2024-01-24T07:39:59-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/util/murmurhash.cc (#12270)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12270\n\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: jaykorean\n\nDifferential Revision: D52965944\n\nfbshipit-source-id: 625d47662e984db9ce06e72ff39025b8a24aa246",
        "modified_files_count": 1,
        "modified_files": [
            "util/murmurhash.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/14633148a7bec6d778319e2d653d0b1b3af19f32"
    },
    {
        "hash": "28ba896f1906f4e94e4a289a661de1ccd6b5e15e",
        "author": "Richard Barnes",
        "date": "2024-01-24T07:38:17-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/include/rocksdb/slice_transform.h (#12275)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12275\n\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: jaykorean\n\nDifferential Revision: D52969065\n\nfbshipit-source-id: cf2fcdc006d3b45fb54fb700a8ebefb14b42de0d",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/slice_transform.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/28ba896f1906f4e94e4a289a661de1ccd6b5e15e"
    },
    {
        "hash": "f0990321311d87cff830a911712043a95495f7a7",
        "author": "Richard Barnes",
        "date": "2024-01-24T07:37:31-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/utilities/env_mirror.cc (#12271)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12271\n\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: jaykorean\n\nDifferential Revision: D52969070\n\nfbshipit-source-id: 22e0958ad6ced5c021ef7dafbe16a17c282935d8",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/env_mirror.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f0990321311d87cff830a911712043a95495f7a7"
    },
    {
        "hash": "502a1754c48531157941c07a032f4f8ccf8e8515",
        "author": "Richard Barnes",
        "date": "2024-01-24T07:25:27-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/utilities/transactions/lock/range/range_tree/lib/locktree/manager.cc (#12276)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12276\n\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: jaykorean\n\nDifferential Revision: D52969073\n\nfbshipit-source-id: 1b2495548d939c32e7a89a6424767497fab9550e",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/lock/range/range_tree/lib/locktree/manager.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/502a1754c48531157941c07a032f4f8ccf8e8515"
    },
    {
        "hash": "0797616de081016798fbdbe5bc40cf89834da0d4",
        "author": "Richard Barnes",
        "date": "2024-01-24T07:24:06-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/utilities/transactions/write_unprepared_txn.h (#12273)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12273\n\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: jaykorean\n\nDifferential Revision: D52969166\n\nfbshipit-source-id: 129715bfe69735b83b077c7d6cbf1786c1dfc410",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_unprepared_txn.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0797616de081016798fbdbe5bc40cf89834da0d4"
    },
    {
        "hash": "1f3e3ead3fc088cde93ff2a0bcfaf7cf3e2ecba9",
        "author": "Richard Barnes",
        "date": "2024-01-24T07:22:49-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/env/env_encryption.cc (#12274)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12274\n\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: jaykorean\n\nDifferential Revision: D52969133\n\nfbshipit-source-id: f5a8452af25a5a51d5c7e4045baef12575022da9",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_encryption.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1f3e3ead3fc088cde93ff2a0bcfaf7cf3e2ecba9"
    },
    {
        "hash": "532c940b795b0f99d6182b7ae7557c44b3958bf1",
        "author": "Richard Barnes",
        "date": "2024-01-24T07:22:45-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/utilities/transactions/transaction_base.h (#12272)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12272\n\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: jaykorean\n\nDifferential Revision: D52969170\n\nfbshipit-source-id: 581304039be789cbce6760740e9557a925e02722",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_base.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/532c940b795b0f99d6182b7ae7557c44b3958bf1"
    },
    {
        "hash": "8c01cb79da8b05e18338e0ef2f70a13a5fe75ce4",
        "author": "Richard Barnes",
        "date": "2024-01-24T07:22:31-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/include/rocksdb/table.h (#12277)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12277\n\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: jaykorean\n\nDifferential Revision: D52969088\n\nfbshipit-source-id: cd83cb3cd98b1389ddfe3e5e316f088eb5975b9f",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/table.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8c01cb79da8b05e18338e0ef2f70a13a5fe75ce4"
    },
    {
        "hash": "3079a7e7c272b952f7f0a920f41e6687a4544964",
        "author": "Richard Barnes",
        "date": "2024-01-24T07:22:10-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/db/internal_stats.h (#12278)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12278\n\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: jaykorean\n\nDifferential Revision: D52969116\n\nfbshipit-source-id: 8cb28dafdbede54e8cb59c2b8d461b1eddb3de68",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3079a7e7c272b952f7f0a920f41e6687a4544964"
    },
    {
        "hash": "5eebfaaa09ccffc7b5832a476f5deaa905fe4f9a",
        "author": "Richard Barnes",
        "date": "2024-01-24T07:16:00-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/utilities/fault_injection_fs.h (#12279)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12279\n\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: jaykorean\n\nDifferential Revision: D52969150\n\nfbshipit-source-id: a66326e2f8285625c4260f4d23df678a25bcfe29",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/fault_injection_fs.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5eebfaaa09ccffc7b5832a476f5deaa905fe4f9a"
    },
    {
        "hash": "3ef909248736eb80e7c6b3c7a19753c4dbe9d0c5",
        "author": "Changyu Bi",
        "date": "2024-01-23T10:07:06-08:00",
        "message": "Print additional information when flaky test DBTestWithParam.ThreadStatusSingleCompaction fails (#12268)\n\nSummary:\nThe test is [flaky](https://github.com/facebook/rocksdb/actions/runs/7616272304/job/20742657041?pr=12257&fbclid=IwAR1vNI1rSRVKnOsXs0WCPklqTkBXxlwS1GMJgWWe7D8dtAvh6e6wxk067FY) but I could not reproduce the test failure. Add some debug print to make the next failure more helpful\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12268\n\nTest Plan:\n```\ncheck print works when test fails:\n[ RUN      ] DBTestWithParam/DBTestWithParam.ThreadStatusSingleCompaction/0\nthread id: 6134067200, thread status:\nthread id: 6133493760, thread status: Compaction\ndb/db_test.cc:4680: Failure\nExpected equality of these values:\n  op_count\n    Which is: 1\n  expected_count\n    Which is: 0\n```\n\nReviewed By: hx235\n\nDifferential Revision: D52987503\n\nPulled By: cbi42\n\nfbshipit-source-id: 33b369796f9b97155578b45167e722ddcde93594",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3ef909248736eb80e7c6b3c7a19753c4dbe9d0c5"
    },
    {
        "hash": "dee46863ba4b0f858a22e20a79f306a882de566f",
        "author": "Richard Barnes",
        "date": "2024-01-23T09:41:29-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/port/lang.h\n\nSummary:\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: dmm-fb\n\nDifferential Revision: D52968990\n\nfbshipit-source-id: 58d344b719734c736cd80d47eeb6965557ce344b",
        "modified_files_count": 1,
        "modified_files": [
            "port/lang.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dee46863ba4b0f858a22e20a79f306a882de566f"
    },
    {
        "hash": "84711e2f6a023590e468958ad51e67d879fafbe0",
        "author": "Richard Barnes",
        "date": "2024-01-23T08:42:15-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/monitoring/histogram.h\n\nSummary:\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: dmm-fb\n\nDifferential Revision: D52968964\n\nfbshipit-source-id: 2cb8c683f958742e2f151db8ef6824ab622528e6",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/histogram.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/84711e2f6a023590e468958ad51e67d879fafbe0"
    },
    {
        "hash": "c057c2e81d1dadcfac3772a8ae7f037cef7fcd16",
        "author": "Richard Barnes",
        "date": "2024-01-23T08:40:00-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/include/rocksdb/file_system.h\n\nSummary:\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: dmm-fb\n\nDifferential Revision: D52969123\n\nfbshipit-source-id: d9e22dff70644dad0173ee8f6f9b64021f4b2551",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/file_system.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c057c2e81d1dadcfac3772a8ae7f037cef7fcd16"
    },
    {
        "hash": "186344196b2ccda1ec79fa87644a3418f8773778",
        "author": "Richard Barnes",
        "date": "2024-01-23T08:37:47-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/monitoring/histogram.cc\n\nSummary:\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: dmm-fb\n\nDifferential Revision: D52969001\n\nfbshipit-source-id: d628fa6c5e5d01657fcb7aff7b05dea704ed2025",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/histogram.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/186344196b2ccda1ec79fa87644a3418f8773778"
    },
    {
        "hash": "b60cb55889ecd7ab82a5cafae2193bbc6cd9ab16",
        "author": "Richard Barnes",
        "date": "2024-01-23T08:36:43-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/util/xxhash.h\n\nSummary:\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: dmm-fb\n\nDifferential Revision: D52967247\n\nfbshipit-source-id: 4a67cb9719e092ad9bbe9c7e1d060e3f9042ecf7",
        "modified_files_count": 1,
        "modified_files": [
            "util/xxhash.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b60cb55889ecd7ab82a5cafae2193bbc6cd9ab16"
    },
    {
        "hash": "24e7e7be044bc5916356b1258339b65fa5aa1cd9",
        "author": "Richard Barnes",
        "date": "2024-01-23T08:35:47-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/include/rocksdb/env_encryption.h\n\nSummary:\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: dmm-fb\n\nDifferential Revision: D52969125\n\nfbshipit-source-id: f8b6090393459b8d2973e54fac488290a54bf752",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env_encryption.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/24e7e7be044bc5916356b1258339b65fa5aa1cd9"
    },
    {
        "hash": "51ecdd3e8f8eca912c87dfd96e129c57cec14689",
        "author": "Richard Barnes",
        "date": "2024-01-23T06:07:30-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/env/env_encryption_ctr.h\n\nSummary:\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: jaykorean\n\nDifferential Revision: D52969018\n\nfbshipit-source-id: 0b79c1599fef4eb902c9ef3fac827f1ed4ea94ed",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_encryption_ctr.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/51ecdd3e8f8eca912c87dfd96e129c57cec14689"
    },
    {
        "hash": "a29db3048fbc020f16700681d9d4742ba5540d79",
        "author": "Changyu Bi",
        "date": "2024-01-22T12:15:17-08:00",
        "message": "Fix TestGetEntity failure with UDT (#12264)\n\nSummary:\nUse the read option with right timestamp and skip verification when using old timestamps.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12264\n\nTest Plan:\nI can repro with small keyspace:\n```\n./db_stress --acquire_snapshot_one_in=10000 --adaptive_readahead=0 --allow_data_in_errors=True --async_io=0 --auto_readahead_size=1 --avoid_flush_during_recovery=0 --avoid_unnecessary_blocking_io=0 --backup_max_size=104857600 --backup_one_in=1000 --batch_protection_bytes_per_key=0 --block_protection_bytes_per_key=4 --block_size=16384 --bloom_before_level=7 --bloom_bits=15 --bottommost_compression_type=xpress --bottommost_file_compaction_delay=0 --bytes_per_sync=262144 --cache_index_and_filter_blocks=1 --cache_size=33554432 --cache_type=fixed_hyper_clock_cache --charge_compression_dictionary_building_buffer=1 --charge_file_metadata=0 --charge_filter_construction=1 --charge_table_reader=1 --checkpoint_one_in=10000 --checksum_type=kXXH3 --clear_column_family_one_in=0 --compact_files_one_in=1000000 --compact_range_one_in=1000000 --compaction_pri=4 --compaction_readahead_size=0 --compaction_style=1 --compaction_ttl=0 --compressed_secondary_cache_size=16777216 --compression_checksum=1 --compression_max_dict_buffer_bytes=0 --compression_max_dict_bytes=0 --compression_parallel_threads=1 --compression_type=snappy --compression_use_zstd_dict_trainer=0 --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --data_block_index_type=1 --db_write_buffer_size=0 --delpercent=4 --delrangepercent=1 --destroy_db_initially=1 --detect_filter_construct_corruption=1 --disable_wal=0 --enable_compaction_filter=0 --enable_pipelined_write=1 --enable_thread_tracking=0 --fail_if_options_file_error=1 --fifo_allow_compaction=1 --file_checksum_impl=big --flush_one_in=1000 --format_version=2 --get_current_wal_file_one_in=0 --get_live_files_one_in=10000 --get_property_one_in=100000 --get_sorted_wal_files_one_in=0 --index_block_restart_interval=13 --index_type=0 --ingest_external_file_one_in=0 --initial_auto_readahead_size=16384 --iterpercent=10 --key_len_percent_dist=1,30,69 --level_compaction_dynamic_level_bytes=0 --lock_wal_one_in=10000 --log2_keys_per_lock=10 --long_running_snapshots=0 --manual_wal_flush_one_in=1000 --mark_for_compaction_one_file_in=0 --max_auto_readahead_size=0 --max_background_compactions=20 --max_bytes_for_level_base=10485760 --max_key=1000 --max_key_len=3 --max_manifest_file_size=16384 --max_write_batch_group_size_bytes=1048576 --max_write_buffer_number=3 --max_write_buffer_size_to_maintain=2097152 --memtable_max_range_deletions=0 --memtable_prefix_bloom_size_ratio=0.01 --memtable_protection_bytes_per_key=0 --memtable_whole_key_filtering=0 --memtablerep=skip_list --min_write_buffer_number_to_merge=2 --mmap_read=1 --mock_direct_io=False --nooverwritepercent=1 --num_file_reads_for_auto_readahead=1 --open_files=100 --open_metadata_write_fault_one_in=0 --open_read_fault_one_in=32 --open_write_fault_one_in=16 --ops_per_thread=200000 --optimize_filters_for_memory=0 --paranoid_file_checks=0 --partition_filters=0 --partition_pinning=2 --pause_background_one_in=1000000 --periodic_compaction_seconds=0 --persist_user_defined_timestamps=1 --prefix_size=8 --prefixpercent=5 --prepopulate_block_cache=1 --preserve_internal_time_seconds=3600 --progress_reports=0 --read_fault_one_in=0 --readahead_size=16384 --readpercent=45 --recycle_log_file_num=1 --reopen=20 --secondary_cache_fault_one_in=32 --secondary_cache_uri= --snapshot_hold_ops=100000 --sst_file_manager_bytes_per_sec=0 --sst_file_manager_bytes_per_truncate=0 --stats_dump_period_sec=0 --subcompactions=3 --sync=0 --sync_fault_injection=0 --target_file_size_base=524288 --target_file_size_multiplier=2 --test_batches_snapshots=0 --test_cf_consistency=0 --top_level_index_pinning=1 --unpartitioned_pinning=1 --use_direct_io_for_flush_and_compaction=0 --use_direct_reads=0 --use_full_merge_v1=0 --use_get_entity=1 --use_merge=0 --use_multi_get_entity=0 --use_multiget=1 --use_put_entity_one_in=0 --use_txn=0 --use_write_buffer_manager=0 --user_timestamp_size=8 --value_size_mult=32 --verification_only=0 --verify_checksum=1 --verify_checksum_one_in=1000000 --verify_db_one_in=100000 --verify_file_checksums_one_in=100000 --verify_iterator_with_expected_state_one_in=5 --verify_sst_unique_id_in_manifest=1 --wal_bytes_per_sync=524288 --wal_compression=zstd --write_buffer_size=4194304 --write_dbid_to_manifest=0 --write_fault_one_in=0 --writepercent=35 --db=/dev/shm/rocksdb_test/rocksdb_crashtest_whitebox --expected_values_dir=/dev/shm/rocksdb_test/rocksdb_crashtest_expected\n\nErrors when run with main:\nerror : inconsistent values for key 0x00000000000000E5000000000000012B000000000000014D: expected state has the key, GetEntity returns NotFound.\n\nerror : inconsistent values for key 0x0000000000000009000000000000012B0000000000000254: GetEntity returns :0x010000000504070609080B0A0D0C0F0E111013121514171619181B1A1D1C1F1E212023222524272629282B2A2D2C2F2E313033323534373639383B3A3D3C3F3E, expected state does not have the key.\n```\n\nReviewed By: jaykorean\n\nDifferential Revision: D52966251\n\nPulled By: cbi42\n\nfbshipit-source-id: 09436a1b747f1ac545140fc83a2fa4555fef51c1",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a29db3048fbc020f16700681d9d4742ba5540d79"
    },
    {
        "hash": "ec5b1be18dabb99acfc52872db36d9d163baea84",
        "author": "Changyu Bi",
        "date": "2024-01-19T10:13:52-08:00",
        "message": "Deflake `PerfContextTest.CPUTimer` (#12252)\n\nSummary:\nWe saw failures like\n```\ndb/perf_context_test.cc:952: Failure\nExpected: (next_count) > (count), actual: 26699 vs 26699\n```\nI can repro by running the test repeatedly and the test fails with different seek keys. So\nthe cause is likely not with Seek() implementation. I found that\n`clock_gettime(CLOCK_THREAD_CPUTIME_ID, &ts);` can return the same time when\ncalled repeatedly. However, I don't know if Seek() is fast enough that this happened during\ncontinuous test.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12252\n\nTest Plan: `gtest_parallel.py --repeat=10000 --workers=1 ./perf_context_test --gtest_filter=\"PerfContextTest.CPUTimer\"`\n\nReviewed By: ajkr\n\nDifferential Revision: D52912751\n\nPulled By: cbi42\n\nfbshipit-source-id: 8985ae93baa99cdf4b9136ea38addd2e41f4b202",
        "modified_files_count": 1,
        "modified_files": [
            "db/perf_context_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ec5b1be18dabb99acfc52872db36d9d163baea84"
    },
    {
        "hash": "59ba1d200d657d328e91b18cc2a71cf7062a3745",
        "author": "Richard Barnes",
        "date": "2024-01-17T14:08:07-08:00",
        "message": "Remove unused variables in internal_repo_rocksdb/repo/env/env_posix.cc (#12243)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12243\n\nLLVM-15 has a warning `-Wunused-but-set-variable` which we treat as an error because it's so often diagnostic of a code issue. Unused variables can compromise readability or, worse, performance.\n\nThis diff either (a) removes an unused variable and, possibly, it's associated code, or (b) qualifies the variable with `[[maybe_unused]]`, mostly in cases where the variable _is_ used, but, eg, in an `assert` statement that isn't present in production code.\n\n - If you approve of this diff, please use the \"Accept & Ship\" button :-)\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D52847993\n\nfbshipit-source-id: 221da13c6ca9967e3b934f98f318a832a144df39",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/59ba1d200d657d328e91b18cc2a71cf7062a3745"
    },
    {
        "hash": "21d5a8f54f06e01ca49d4e6bae89bb42ba78dfdd",
        "author": "Chdy",
        "date": "2024-01-12T14:56:10-08:00",
        "message": "Fix a bug in sst_dump when parsing PlainTable (#12223)\n\nSummary:\n### Summary: The sst_dump tool occur IO Error when reading data in PlainTable, as shown in the follow\n```bash\n❯ ./sst_dump --file=/tmp/write_example  --command=scan --show_properties --verify_checksum\noptions.env is 0x60000282dc00\nProcess /tmp/write_example/001630.sst\nSst file format: plain table\n/tmp/filepicker_example/001630.sst: IO error: While pread offset 0 len 758: /tmp/filepicker_example/001630.sst: Bad address\nProcess /tmp/filepicker_example/001624.sst\n```\n\n#### Reason\nThe root cause is that `fopts.use_mmap_reads` is false, `NewRandomAccessFile` will produce an `PosixRandomAccessFile` file. but `soptions_.use_mmap_reads` is true, This will result in unexpected calls in the `MmapDataIfNeeded` function.\n```c++\nStatus SstFileDumper::GetTableReader(const std::string& file_path) {\n\t...\n\n  if (s.ok()) {\n    if (magic_number == kPlainTableMagicNumber ||\n        magic_number == kLegacyPlainTableMagicNumber ||\n\t\t\t  magic_number == kCuckooTableMagicNumber) {\n      soptions_.use_mmap_reads = true;\n     ...\n\n     // WARN: fopts.use_mmap_reads is false\n      fs->NewRandomAccessFile(file_path, fopts, &file, nullptr);\n      file_.reset(new RandomAccessFileReader(std::move(file), file_path));\n    }\n    ...\n\n  }\n\n  if (s.ok()) {\n    // soptions_.use_mmap_reads is true\n    s = NewTableReader(ioptions_, soptions_, internal_comparator_, file_size,\n                       &table_reader_);\n  }\n  return s;\n}\n```\n\nThe following read logic was executed on a `PosixRandomAccessFile` file, Eventually, `PosixRandomAccessFile::Read` will be called with a `nullptr` `scratch`\n```c++\nStatus PlainTableReader::MmapDataIfNeeded() {\n  if (file_info_.is_mmap_mode) {\n    // Get mmapped memory.\n    // Executing the following logic on the PosixRandomAccessFile file is incorrect\n    return file_info_.file->Read(\n        IOOptions(), 0, static_cast<size_t>(file_size_), &file_info_.file_data,\n        nullptr, nullptr, Env::IO_TOTAL /* rate_limiter_priority */);\n  }\n  return Status::OK();\n}\n```\n\n#### Fix:\nWhen parsing PlainTable, set the variable `fopts.use_mmap_reads` equal `soptions_.use_mmap_reads`,  When the `soptions_.use_mmap_reads` is true, `NewRandomAccessFile` will produce an `PosixMmapReadableFile` file. This will work correctly in the `MmapDataIfNeeded` function\n```\n❯ ./sst_dump --file=/tmp/write_example  --command=scan --show_properties --verify_checksum\noptions.env is 0x6000009323e0\nProcess /tmp/write_example/001630.sst\nSst file format: plain table\nfrom [] to []\n'keys496' seq:0, type:1 => values1496\n'keys497' seq:0, type:1 => values1497\n'keys498' seq:0, type:1 => values1498\nTable Properties:\n------------------------------\n  # data blocks: 1\n  # entries: 3\n  # deletions: 0\n  # merge operands: 0\n  # range deletions: 0\n  raw key size: 45\n  raw average key size: 15.000000\n  raw value size: 42\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12223\n\nReviewed By: cbi42\n\nDifferential Revision: D52706238\n\nPulled By: ajkr\n\nfbshipit-source-id: 2f9f518ec81d1cbde00bd65ab6bd304796836c0a",
        "modified_files_count": 1,
        "modified_files": [
            "table/sst_file_dumper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/21d5a8f54f06e01ca49d4e6bae89bb42ba78dfdd"
    },
    {
        "hash": "8d0c09d7e6a6ecc409f578f9166e438391d34b74",
        "author": "Yu Zhang",
        "date": "2024-01-12T12:23:09-08:00",
        "message": "Abort verification when expected state has pending writes / db return non OK(NotFound) status (#12232)\n\nSummary:\nIn the current flow, the verification will pass and continue the test when db return non Ok(NotFound) status while expected state has pending writes.\n\nhttps://github.com/facebook/rocksdb/blob/fdfd044bb2c53a322a2b104891a997f6c569c989/db_stress_tool/no_batched_ops_stress.cc#L2054-L2065\n\nWe can just abort when such a db status is ever encountered. This can prevent follow up tests like `TestCheckpoint` and `TestBackupRestore` to consider such a key as existing in the db via the `ExpectedState::Exists` API. This could be a reason for some recent test failures in this path.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12232\n\nReviewed By: cbi42\n\nDifferential Revision: D52737393\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: f2658c5332ccd42f6190783960e2dc6fcd81ccc5",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8d0c09d7e6a6ecc409f578f9166e438391d34b74"
    },
    {
        "hash": "fdfd044bb2c53a322a2b104891a997f6c569c989",
        "author": "Jay Huh",
        "date": "2024-01-11T18:15:17-08:00",
        "message": "Logging for test failure due to get/multiget inconsistency (#12228)\n\nSummary:\nAdditional logging for debugging purpose\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12228\n\nTest Plan: CI\n\nReviewed By: cbi42\n\nDifferential Revision: D52713401\n\nPulled By: jaykorean\n\nfbshipit-source-id: 535972d60debb70c220887f0f4c06a32f7668f72",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fdfd044bb2c53a322a2b104891a997f6c569c989"
    },
    {
        "hash": "0758271d519bcc5d7266fec26ae1f3ab887aa130",
        "author": "Jay Huh",
        "date": "2024-01-10T16:35:54-08:00",
        "message": "Fix TestGetEntity in stress test when UDT is enabled (#12222)\n\nSummary:\nSimilar to https://github.com/facebook/rocksdb/issues/11249 , we started to get failures from `TestGetEntity` when the User-defined-timestamp was enabled. Applying the same fix as the `TestGet`\n\n_Scenario copied from  #11249_\n\n<table>\n  <tr>\n    <th>TestGet thread</th>\n    <th> A writing thread</th>\n  </tr>\n  <tr>\n    <td>read_opts.timestamp = GetNow()</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>Lock key, do write</td>\n  </tr>\n  <tr>\n    <td>Lock key, read(read_opts) return NotFound</td>\n    <td></td>\n  </tr>\n</table>\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12222\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D52678830\n\nPulled By: jaykorean\n\nfbshipit-source-id: 6e154f67bb32968add8fea0b7ae7c4858ea64ee7",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0758271d519bcc5d7266fec26ae1f3ab887aa130"
    },
    {
        "hash": "513aae1a319886bb81b3ee6ef9b5459d71e6818c",
        "author": "leipeng",
        "date": "2024-01-10T15:59:01-08:00",
        "message": "env.h: static constexpr kDoNotSupportGetLogFileSize (#12203)\n\nSummary:\nkDoNotSupportGetLogFileSize should be static constexpr\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12203\n\nReviewed By: jaykorean\n\nDifferential Revision: D52616556\n\nPulled By: anand1976\n\nfbshipit-source-id: 56583b2b1fbe41022d951b6334b2264c1559a88e",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/513aae1a319886bb81b3ee6ef9b5459d71e6818c"
    },
    {
        "hash": "1a1f9f166093e36541df0886505d9a87a4fbb887",
        "author": "马越",
        "date": "2024-01-10T14:34:12-08:00",
        "message": "Fix the compactRange with wrong cf handle when ClipColumnFamily (#12219)\n\nSummary:\n- **Context**:\n\nIn ClipColumnFamily, the DeleteRange API will be used to delete data, and then CompactRange will be called for physical deletion. But now However, the ColumnFamilyHandle is not passed , so by default only the DefaultColumnFamily will be CompactRanged. Therefore, it may cause that the data in some sst files of CompactionRange cannot be physically deleted.\n\n- **In this change**\n\nPass the ColumnFamilyHandle when call CompactRange\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12219\n\nReviewed By: ajkr\n\nDifferential Revision: D52665162\n\nPulled By: cbi42\n\nfbshipit-source-id: e8e997aa25ec4ca40e347be89edc7e84a7a0edce",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1a1f9f166093e36541df0886505d9a87a4fbb887"
    },
    {
        "hash": "cd15331711351ac4548899afd1283dfe9480a94d",
        "author": "Changyu Bi",
        "date": "2024-01-09T14:20:08-08:00",
        "message": "Print status when VerifyOrSyncValue() fails with non-OK status (#12217)\n\nSummary:\nThis should print more helpful message when a non-ok status like Corruption is returned.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12217\n\nTest Plan: CI passes.\n\nReviewed By: jaykorean\n\nDifferential Revision: D52637595\n\nPulled By: cbi42\n\nfbshipit-source-id: e810eeb4cba633d4d4c5d198da4468995e4ed427",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cd15331711351ac4548899afd1283dfe9480a94d"
    },
    {
        "hash": "1de69409805e196dae4daad4975f6f83080f8a7c",
        "author": "akankshamahajan",
        "date": "2024-01-05T18:10:58-08:00",
        "message": "Fix heap use after free error in FilePrefetchBuffer (#12211)\n\nSummary:\nFix heap use after free error in FilePrefetchBuffer\nFix heap use after free error in FilePrefetchBuffer\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12211\n\nTest Plan:\nRan db_stress in ASAN mode\n```\n==652957==ERROR: AddressSanitizer: heap-use-after-free on address 0x6150006d8578 at pc 0x7f91f74ae85b bp 0x7f91c25f90c0 sp 0x7f91c25f90b8\nREAD of size 8 at 0x6150006d8578 thread T48\n    #0 0x7f91f74ae85a in void __gnu_cxx::new_allocator<rocksdb::BufferInfo*>::construct<rocksdb::BufferInfo*, rocksdb::BufferInfo*&>(rocksdb::BufferInfo**, rocksdb::BufferInfo*&) /mnt/gvfs/third-party2/libgcc/c00dcc6a3e4125c7e8b248e9a79c14b78ac9e0ca/11.x/platform010/5684a5a/include/c++/trunk/ext/new_allocator.h:163\n    https://github.com/facebook/rocksdb/issues/1 0x7f91f74ae85a in void std::allocator_traits<std::allocator<rocksdb::BufferInfo*> >::construct<rocksdb::BufferInfo*, rocksdb::BufferInfo*&>(std::allocator<rocksdb::BufferInfo*>&, rocksdb::BufferInfo**, rocksdb::BufferInfo*&) /mnt/gvfs/third-party2/libgcc/c00dcc6a3e4125c7e8b248e9a79c14b78ac9e0ca/11.x/platform010/5684a5a/include/c++/trunk/bits/alloc_traits.h:512\n    https://github.com/facebook/rocksdb/issues/2 0x7f91f74ae85a in rocksdb::BufferInfo*& std::deque<rocksdb::BufferInfo*, std::allocator<rocksdb::BufferInfo*> >::emplace_back<rocksdb::BufferInfo*&>(rocksdb::BufferInfo*&) /mnt/gvfs/third-party2/libgcc/c00dcc6a3e4125c7e8b248e9a79c14b78ac9e0ca/11.x/platform010/5684a5a/include/c++/trunk/bits/deque.tcc:170\n    https://github.com/facebook/rocksdb/issues/3 0x7f91f74b93d8 in rocksdb::FilePrefetchBuffer::FreeAllBuffers() file/file_prefetch_buffer.h:557\n```\n\nReviewed By: ajkr\n\nDifferential Revision: D52575217\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 6811ec10a393f5a62fedaff0fab5fd6e823c2687",
        "modified_files_count": 1,
        "modified_files": [
            "file/file_prefetch_buffer.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1de69409805e196dae4daad4975f6f83080f8a7c"
    },
    {
        "hash": "f11a0237b68a03a4dbd489f40a70d6831e855b92",
        "author": "git-hulk",
        "date": "2024-01-04T14:11:15-08:00",
        "message": "sst_dump: display metaindex_handle and the index_handle's offset and size in footer information (#12204)\n\nSummary:\nBefore applying this PR, the footer details:\n\n```\nFooter Details:\n--------------------------------------\n  metaindex handle: B0E499405C\n  index handle: 8AC49940CD17\n  table_magic_number: 9863518390377041911\n  format version: 5\n```\n\nand after\n\n```\nFooter Details:\n--------------------------------------\n  metaindex handle: B0E499405C offset: 134640176 size: 92\n  index handle: 8AC49940CD17 offset: 134636042 size: 3021\n  table_magic_number: 9863518390377041911\n  format version: 5\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12204\n\nReviewed By: cbi42\n\nDifferential Revision: D52547832\n\nPulled By: ajkr\n\nfbshipit-source-id: 5ff58ed347f9caf919bbdc6b242e3306d2525653",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f11a0237b68a03a4dbd489f40a70d6831e855b92"
    },
    {
        "hash": "81b6296c7e5a6a4a0241559d2de878677f160b38",
        "author": "Hui Xiao",
        "date": "2024-01-02T17:33:00-08:00",
        "message": "Pass flush IO activity enum in FlushJob::MaybeIncreaseFullHistoryTsLowToAboveCutoffUDT...() (#12197)\n\nSummary:\n**Context/Summary:** as titled\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12197\n\nTest Plan:\n```\n./db_stress --acquire_snapshot_one_in=100 --adaptive_readahead=0 --allow_concurrent_memtable_write=0 --allow_data_in_errors=True --async_io=1 --atomic_flush=0 --auto_readahead_size=1 --avoid_flush_during_recovery=0 --avoid_unnecessary_blocking_io=0 --backup_max_size=104857600 --backup_one_in=100000 --batch_protection_bytes_per_key=0 --block_protection_bytes_per_key=0 --block_size=16384 --bloom_before_level=2147483647 --bloom_bits=4.393039399748979 --bottommost_compression_type=disable --bottommost_file_compaction_delay=86400 --bytes_per_sync=262144 --cache_index_and_filter_blocks=0 --cache_size=33554432 --cache_type=fixed_hyper_clock_cache --charge_compression_dictionary_building_buffer=1 --charge_file_metadata=0 --charge_filter_construction=0 --charge_table_reader=1 --checkpoint_one_in=1000000 --checksum_type=kxxHash64 --clear_column_family_one_in=0 --compact_files_one_in=1000 --compact_range_one_in=1000 --compaction_pri=3 --compaction_readahead_size=1048576 --compaction_ttl=0 --compressed_secondary_cache_ratio=0.0 --compressed_secondary_cache_size=0 --compression_checksum=0 --compression_max_dict_buffer_bytes=0 --compression_max_dict_bytes=0 --compression_parallel_threads=1 --compression_type=lz4hc --compression_use_zstd_dict_trainer=1 --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --data_block_index_type=1 --db=/dev/shm/rocksdb_test/rocksdb_crashtest_blackbox --db_write_buffer_size=0 --delpercent=5 --delrangepercent=0 --destroy_db_initially=0 --detect_filter_construct_corruption=0 --disable_wal=0 --enable_blob_files=0 --enable_compaction_filter=0 --enable_pipelined_write=0 --enable_thread_tracking=1 --expected_values_dir=/dev/shm/rocksdb_test/rocksdb_crashtest_expected --fail_if_options_file_error=1 --fifo_allow_compaction=0 --file_checksum_impl=none --flush_one_in=1000 --format_version=6 --get_current_wal_file_one_in=0 --get_live_files_one_in=1000000 --get_property_one_in=100000 --get_sorted_wal_files_one_in=0 --index_block_restart_interval=13 --index_type=0 --ingest_external_file_one_in=0 --initial_auto_readahead_size=16384 --iterpercent=0 --key_len_percent_dist=1,30,69 --level_compaction_dynamic_level_bytes=1 --lock_wal_one_in=10000 --long_running_snapshots=0 --manual_wal_flush_one_in=0 --mark_for_compaction_one_file_in=10 --max_auto_readahead_size=524288 --max_background_compactions=20 --max_bytes_for_level_base=10485760 --max_key=100000 --max_key_len=3 --max_manifest_file_size=1073741824 --max_write_batch_group_size_bytes=64 --max_write_buffer_number=10 --max_write_buffer_size_to_maintain=8388608 --memtable_max_range_deletions=0 --memtable_prefix_bloom_size_ratio=0.1 --memtable_protection_bytes_per_key=2 --memtable_whole_key_filtering=1 --memtablerep=skip_list --min_write_buffer_number_to_merge=2 --mmap_read=1 --mock_direct_io=False --nooverwritepercent=1 --num_file_reads_for_auto_readahead=2 --open_files=100 --open_metadata_write_fault_one_in=0 --open_read_fault_one_in=0 --open_write_fault_one_in=16 --ops_per_thread=100000000 --optimize_filters_for_memory=0 --paranoid_file_checks=0 --partition_filters=0 --partition_pinning=2 --pause_background_one_in=10000 --periodic_compaction_seconds=0 --persist_user_defined_timestamps=0 --prefix_size=5 --prefixpercent=5 --prepopulate_block_cache=0 --preserve_internal_time_seconds=0 --progress_reports=0 --read_fault_one_in=0 --readahead_size=16384 --readpercent=55 --recycle_log_file_num=0 --reopen=0 --secondary_cache_fault_one_in=0 --set_options_one_in=10000 --snapshot_hold_ops=100000 --sst_file_manager_bytes_per_sec=0 --sst_file_manager_bytes_per_truncate=0 --stats_dump_period_sec=10 --subcompactions=1 --sync=0 --sync_fault_injection=0 --target_file_size_base=2097152 --target_file_size_multiplier=2 --test_batches_snapshots=0 --test_cf_consistency=0 --top_level_index_pinning=3 --unpartitioned_pinning=1 --use_direct_io_for_flush_and_compaction=0 --use_direct_reads=0 --use_full_merge_v1=0 --use_get_entity=0 --use_merge=0 --use_multi_get_entity=0 --use_multiget=0 --use_put_entity_one_in=0 --use_txn=0 --use_write_buffer_manager=0 --user_timestamp_size=8 --value_size_mult=32 --verification_only=0 --verify_checksum=1 --verify_checksum_one_in=1000000 --verify_db_one_in=10000 --verify_file_checksums_one_in=0 --verify_iterator_with_expected_state_one_in=5 --verify_sst_unique_id_in_manifest=1 --wal_bytes_per_sync=524288 --wal_compression=zstd --write_buffer_size=1048576 --write_dbid_to_manifest=1 --write_fault_one_in=128 --writepercent=35\n```\n\nBefore fix:\n```\ndb_stress_tool/db_stress_env_wrapper.h:92: virtual rocksdb::IOStatus rocksdb::DbStressWritableFileWrapper::Append(const rocksdb::Slice &, const rocksdb::IOOptions &, rocksdb::IODebugContext *): Assertion `io_activity == Env::IOActivity::kUnknown || io_activity == options.io_activity' failed.\n```\n\nAfter fix:\nSucceed\n\nReviewed By: ajkr\n\nDifferential Revision: D52492030\n\nPulled By: hx235\n\nfbshipit-source-id: 842a0dcbdf135838b57ddb4a3a6f1effc8dd3e82",
        "modified_files_count": 1,
        "modified_files": [
            "db/flush_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/81b6296c7e5a6a4a0241559d2de878677f160b38"
    },
    {
        "hash": "d411fc4dd6c57c3cb449ab6bdfab1a20cc95690d",
        "author": "leipeng",
        "date": "2024-01-02T11:18:11-08:00",
        "message": "column_family.cc: SanitizeOptions(dbo, cfo): WARN msg: add missing spaces (#12193)\n\nSummary:\nFix for multi line strings missing spaces.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12193\n\nReviewed By: cbi42\n\nDifferential Revision: D52457430\n\nPulled By: ajkr\n\nfbshipit-source-id: 4ca75a14e61c09819e5d821da6137f4536e9e76e",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d411fc4dd6c57c3cb449ab6bdfab1a20cc95690d"
    },
    {
        "hash": "906c6683ed9ea08302fb02afa98cee1f5b1d4323",
        "author": "leipeng",
        "date": "2024-01-02T11:17:39-08:00",
        "message": "InternalKey::Set: remove redundant assign (#12194)\n\nSummary:\nInternalKey::Set: remove redundant assign\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12194\n\nReviewed By: cbi42\n\nDifferential Revision: D52457542\n\nPulled By: ajkr\n\nfbshipit-source-id: 329983a8734ff38ffd93018bbbe112b4a23b5c11",
        "modified_files_count": 1,
        "modified_files": [
            "db/dbformat.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/906c6683ed9ea08302fb02afa98cee1f5b1d4323"
    },
    {
        "hash": "01f2edd145e318228936b89834d058060ed600c6",
        "author": "darionyaphet",
        "date": "2023-12-27T10:40:33-08:00",
        "message": "Replace push_back by emplace_back in wal manager (#10805)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/10805\n\nReviewed By: ajkr\n\nDifferential Revision: D52424928\n\nPulled By: hx235\n\nfbshipit-source-id: 548e3304ca721a3907be3696d12735929aca8490",
        "modified_files_count": 1,
        "modified_files": [
            "db/wal_manager.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/01f2edd145e318228936b89834d058060ed600c6"
    },
    {
        "hash": "4fefe1fed9092be69d9771f2df7cdfadcf604bc3",
        "author": "Andrew Kryczka",
        "date": "2023-12-26T15:13:42-08:00",
        "message": "Downgrade warning for dynamic leveling with non-leveled compaction (#12186)\n\nSummary:\nNow that `level_compaction_dynamic_level_bytes`'s default value is true, users who do not touch that setting and use non-leveled compaction will also see this log message. It can be info level rather than warning since, in the case mentioned, there is nothing the user needs to be warned about.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12186\n\nReviewed By: cbi42\n\nDifferential Revision: D52422499\n\nPulled By: ajkr\n\nfbshipit-source-id: 8dbfcd102aab671b881ba047fb4a0a555b3e0a78",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4fefe1fed9092be69d9771f2df7cdfadcf604bc3"
    },
    {
        "hash": "83e38c0a580b2018acea1e58d99628bbc3993363",
        "author": "Jason Volk",
        "date": "2023-12-26T14:32:53-08:00",
        "message": "Fix SystemClock not passed from environment to PERF_CPU_TIMER_GUARD. (#12180)\n\nSummary:\nThe hardcoded nullptr argument for SystemClock to PERF_CPU_TIMER_GUARD ignored any SystemClock instance provided by the env; this was probably an oversight.\n\nIn practice, the defaulting SystemClock could lead to excessive `clock_gettime(CLOCK_THREAD_CPUTIME_ID)` syscalls if `report_bg_io_stats=true` which cannot be mitigated by the embedder.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12180\n\nReviewed By: hx235\n\nDifferential Revision: D52421750\n\nPulled By: ajkr\n\nfbshipit-source-id: 92f8a93cebe9f8030ea5f6c3bf35398078e6bdfe",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_fetcher.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/83e38c0a580b2018acea1e58d99628bbc3993363"
    },
    {
        "hash": "15487b84e44669a8741fa28d201b77606de8ef8d",
        "author": "Andrew Kryczka",
        "date": "2023-12-21T12:22:02-08:00",
        "message": "fix ldb_cmd_test.cc build with nondefault -DROCKSDB_NAMESPACE (#12173)\n\nSummary:\nI landed https://github.com/facebook/rocksdb/issues/12159 which had the below compiler error when using `-DROCKSDB_NAMESPACE`, which broke the CircleCI \"build-linux-static_lib-alt_namespace-status_checked\" job:\n\n```\ntools/ldb_cmd_test.cc:1213:21: error: 'rocksdb' does not name a type\n 1213 |   int Compare(const rocksdb::Slice& a, const rocksdb::Slice& b) const override {\n      |                     ^~~~~~~\ntools/ldb_cmd_test.cc:1213:35: error: expected unqualified-id before '&' token\n 1213 |   int Compare(const rocksdb::Slice& a, const rocksdb::Slice& b) const override {\n      |                                   ^\ntools/ldb_cmd_test.cc:1213:35: error: expected ')' before '&' token\n 1213 |   int Compare(const rocksdb::Slice& a, const rocksdb::Slice& b) const override {\n      |              ~                    ^\n      |                                   )\ntools/ldb_cmd_test.cc:1213:35: error: expected ';' at end of member declaration\n 1213 |   int Compare(const rocksdb::Slice& a, const rocksdb::Slice& b) const override {\n      |                                   ^\n      |                                    ;\ntools/ldb_cmd_test.cc:1213:37: error: 'a' does not name a type\n 1213 |   int Compare(const rocksdb::Slice& a, const rocksdb::Slice& b) const override {\n      |                                     ^\n...\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12173\n\nTest Plan:\n```\n$ make clean && make OPT=\"-DROCKSDB_NAMESPACE=alternative_rocksdb_ns\" ldb_cmd_test -j56\n```\n\nReviewed By: pdillinger\n\nDifferential Revision: D52373797\n\nPulled By: ajkr\n\nfbshipit-source-id: 8597aaae65a5333831fef66d85072827c5fb1187",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/15487b84e44669a8741fa28d201b77606de8ef8d"
    },
    {
        "hash": "8c568bac61a6308e791a00796f72cc95b1798046",
        "author": "Andrew Kryczka",
        "date": "2023-12-18T11:53:27-08:00",
        "message": "Sync a source file license from percona/PerconaFT (#12103)\n\nSummary:\nFixes https://github.com/facebook/rocksdb/issues/10478\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12103\n\nReviewed By: cbi42\n\nDifferential Revision: D51623089\n\nPulled By: ajkr\n\nfbshipit-source-id: 81f88262ed247144ae063a0552e0162db90c0e43",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/lock/range/range_tree/lib/util/dbt.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8c568bac61a6308e791a00796f72cc95b1798046"
    },
    {
        "hash": "cd21e4e69d76ec4ec3b080c8cdae016ac2309cc5",
        "author": "Levi Tamasi",
        "date": "2023-12-13T17:34:18-08:00",
        "message": "Some further cleanup in WriteBatchWithIndex::MultiGetFromBatchAndDB (#12143)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12143\n\nhttps://github.com/facebook/rocksdb/pull/11982 changed `WriteBatchWithIndex::MultiGetFromBatchDB` to preallocate space in the `autovector`s `key_contexts` and `merges` in order to prevent any reallocations, both as an optimization and in order to prevent pointers into the container from being invalidated during subsequent insertions. On second thought, this preallocation can actually be a pessimization in cases when only a small subset of keys require querying the underlying database. To prevent any memory regressions, the PR reverts this preallocation. In addition, it makes some small code hygiene improvements like incorporating the `PinnableWideColumns` object into `MergeTuple`.\n\nReviewed By: jaykorean\n\nDifferential Revision: D52136513\n\nfbshipit-source-id: 21aa835084433feab27b501d9d1fc5434acea609",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/write_batch_with_index/write_batch_with_index.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cd21e4e69d76ec4ec3b080c8cdae016ac2309cc5"
    },
    {
        "hash": "dce3ca5ab8e3ac93c9e2071e0be8392a52fbab23",
        "author": "Richard Barnes",
        "date": "2023-12-01T22:35:34-08:00",
        "message": "Remove extra semi colon from internal_repo_rocksdb/repo/monitoring/perf_context_imp.h\n\nSummary:\n`-Wextra-semi` or `-Wextra-semi-stmt`\n\nIf the code compiles, this is safe to land.\n\nReviewed By: dmm-fb\n\nDifferential Revision: D51778007\n\nfbshipit-source-id: 5d1b20a3acc4bcc7cd7c204f2f73a14fc8f81883",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/perf_context_imp.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dce3ca5ab8e3ac93c9e2071e0be8392a52fbab23"
    },
    {
        "hash": "d68f45e777563018453c1506a94dc3a4f2cc7b82",
        "author": "Yu Zhang",
        "date": "2023-11-29T11:35:59-08:00",
        "message": "Flush buffered logs when FlushRequest is rescheduled (#12105)\n\nSummary:\nThe optimization to not find and delete obsolete files when FlushRequest is re-scheduled also inadvertently skipped flushing the `LogBuffer`, resulting in missed logs. This PR fixes the issue.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12105\n\nTest Plan:\nmanually check this test has the correct info log after the fix\n`./column_family_test --gtest_filter=ColumnFamilyRetainUDTTest.NotAllKeysExpiredFlushRescheduled`\n\nReviewed By: ajkr\n\nDifferential Revision: D51671079\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: da0640e07e35c69c08988772ed611ec9e67f2e92",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d68f45e777563018453c1506a94dc3a4f2cc7b82"
    },
    {
        "hash": "acc078f8784d87a4703ff5ecd04df349ef0f44b4",
        "author": "anand76",
        "date": "2023-11-28T14:54:08-08:00",
        "message": "Add tiered cache options to db_bench (#12104)\n\nSummary:\nAdd the option to have a 3-tier block cache (uncompressed RAM, compressed RAM, and local flash) in db_bench, as well as specifying secondary cache admission policy.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12104\n\nReviewed By: ajkr\n\nDifferential Revision: D51629092\n\nPulled By: anand1976\n\nfbshipit-source-id: 6a208f853bc85d3d8b437d91cb1b0142d9a99e53",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/acc078f8784d87a4703ff5ecd04df349ef0f44b4"
    },
    {
        "hash": "4d041385129b626be318610511f14344c500fc0c",
        "author": "anand76",
        "date": "2023-11-27T13:00:15-08:00",
        "message": "Add dynamic disabling of compressed cache to db_stress (#12102)\n\nSummary:\nWe now support re-enabling the compressed portion of the `TieredCache` after dynamically disabling it. Add it to db_stress for testing purposes.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12102\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D51594259\n\nPulled By: anand1976\n\nfbshipit-source-id: ea544e30a5ebd6290fc9ed46a241f09634764d2a",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_common.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4d041385129b626be318610511f14344c500fc0c"
    },
    {
        "hash": "4dd2bb8f701b8f0ecc20feb47d8245f7fd27709e",
        "author": "Peter Dillinger",
        "date": "2023-11-27T11:49:52-08:00",
        "message": "Fix stack trace trimming with LLDB (#12101)\n\nSummary:\nI must have chosen trimming before frame 8 based on assertion failures, but that trims too many frame for a general segfault. So this changes to start printing at frame 4, as in this example where I've seeded a null deref:\n\n```\nReceived signal 11 (Segmentation fault)\nInvoking LLDB for stack trace...\nProcess 873208 stopped\n* thread #1, name = 'db_stress', stop reason = signal SIGSTOP\n    frame #0: 0x00007fb1fe8f1033 libc.so.6`__GI___wait4(pid=873478, stat_loc=0x00007fb1fb114030, options=0, usage=0x0000000000000000) at wait4.c:30:10\n  thread #2, name = 'rocksdb:low', stop reason = signal SIGSTOP\n    frame #0: 0x00007fb1fe8972a1 libc.so.6`__GI___futex_abstimed_wait_cancelable64 at futex-internal.c:57:12\nExecutable module set to \"/data/users/peterd/rocksdb/db_stress\".\nArchitecture set to: x86_64-unknown-linux-gnu.\nTrue\nframe #4: 0x00007fb1fe844540 libc.so.6`__restore_rt at libc_sigaction.c:13\nframe #5: 0x0000000000608514 db_stress`rocksdb::StressTest::InitDb(rocksdb::SharedState*) at db_stress_test_base.cc:345:18\nframe #6: 0x0000000000585d62 db_stress`rocksdb::RunStressTestImpl(rocksdb::SharedState*) at db_stress_driver.cc:84:17\nframe #7: 0x000000000058dd69 db_stress`rocksdb::RunStressTest(shared=0x00006120000001c0) at db_stress_driver.cc:266:34\nframe #8: 0x0000000000453b34 db_stress`rocksdb::db_stress_tool(int, char**) at db_stress_tool.cc:370:20\n...\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12101\n\nTest Plan: manual (see above)\n\nReviewed By: ajkr\n\nDifferential Revision: D51593217\n\nPulled By: pdillinger\n\nfbshipit-source-id: 4a71eb8e516edbc32e682f9537bc77d073a7b4ed",
        "modified_files_count": 1,
        "modified_files": [
            "port/stack_trace.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4dd2bb8f701b8f0ecc20feb47d8245f7fd27709e"
    },
    {
        "hash": "f6fd4b9dbd15dba36f7e5ad23de407b5c26b1460",
        "author": "Peter Dillinger",
        "date": "2023-11-22T11:55:10-08:00",
        "message": "Print stack traces more reliably with concurrency (#12086)\n\nSummary:\nIt's been relatively easy to break our stack trace printer:\n* If another thread reaches a signal condition such as a related SEGV or assertion failure while one is trying to print a stack trace from the signal handler, it seems to end the process abruptly without a stack trace.\n* If the process exits normally in one thread (such as main finishing) while another is trying to print a stack trace from the signal handler, it seems the process will often end normally without a stack trace.\n\nThis change attempts to fix these issues, with\n* Keep the custom signal handler installed as long as possible, so that other threads will most likely re-enter our custom handler. (We only switch back to default for triggering core dump or whatever after stack trace.)\n* Use atomics and sleeps to implement a crude recursive mutex for ensuring all threads hitting the custom signal handler wait on the first that is trying to print a stack trace, while recursive signals in the same thread can still be handled cleanly.\n* Use an atexit handler to hook into normal exit to (a) wait on a pending printing of stack trace when detectable and applicable, and (b) detect and warn when printing a stack trace might be interrupted by a process exit in progress. (I don't know how to pause that *after* our atexit handler has been called; the best I know how to do is warn, \"In a race with process already exiting...\".)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12086\n\nTest Plan:\nmanual, including with TSAN. I added this code to the end of a unit test file:\n```\n  for (size_t i = 0; i < 3; ++i) {\n    std::thread t([]() { assert(false); });\n    t.detach();\n  }\n```\nFollowed by either `sleep(100)` or `usleep(100)` or usual process exit. And for recursive signal testing, inject `abort()` at various places in the handler.\n\nReviewed By: cbi42\n\nDifferential Revision: D51531882\n\nPulled By: pdillinger\n\nfbshipit-source-id: 3473b863a43e61b722dfb7a2ed12a8120949b09c",
        "modified_files_count": 1,
        "modified_files": [
            "port/stack_trace.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f6fd4b9dbd15dba36f7e5ad23de407b5c26b1460"
    },
    {
        "hash": "d3e015fe06a6ba01e0c93687416deb1d70c57769",
        "author": "songqing",
        "date": "2023-11-21T09:34:59-08:00",
        "message": "Fix compact_files_example (#12084)\n\nSummary:\nThe option \"write_buffer_size\" has changed from 4MB for 64MB by default, and the compact_files_example will not work as expected, as the test data written is only about 50MB and will not trigger compaction.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12084\n\nReviewed By: cbi42\n\nDifferential Revision: D51499959\n\nPulled By: ajkr\n\nfbshipit-source-id: 4f4b25ebc4b6bb568501adc8e97813edcddceea8",
        "modified_files_count": 1,
        "modified_files": [
            "examples/compact_files_example.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d3e015fe06a6ba01e0c93687416deb1d70c57769"
    },
    {
        "hash": "336a74db604f10e1a4cc5d2e480fc8a895137f69",
        "author": "anand76",
        "date": "2023-11-20T17:48:17-08:00",
        "message": "Add some asserts in ~CacheWithSecondaryAdapter (#12082)\n\nSummary:\nAdd some asserts in the `CacheWithSecondaryAdapter` destructor to help debug a crash test failure.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12082\n\nReviewed By: cbi42\n\nDifferential Revision: D51486041\n\nPulled By: anand1976\n\nfbshipit-source-id: 76537beed31ba27ab9ac8b4ce6deb775629e3be5",
        "modified_files_count": 1,
        "modified_files": [
            "cache/secondary_cache_adapter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/336a74db604f10e1a4cc5d2e480fc8a895137f69"
    },
    {
        "hash": "39d33475da7b6db8372ebd3c4db74993aacc18a2",
        "author": "Timo Riski",
        "date": "2023-11-20T10:11:16-08:00",
        "message": "Fix build on FreeBSD (#11218) (#12078)\n\nSummary:\nFixes https://github.com/facebook/rocksdb/issues/11218\n\nChanges from https://github.com/facebook/rocksdb/issues/10881 broke FreeBSD builds with:\n\n    env/io_posix.h:39:9: error: 'POSIX_MADV_NORMAL' macro redefined [-Werror,-Wmacro-redefined]\n\nThis commit fixes FreeBSD builds by ignoring MADV defines.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12078\n\nReviewed By: cbi42\n\nDifferential Revision: D51452802\n\nPulled By: ajkr\n\nfbshipit-source-id: 0a1f5a90954e7d257a95794277a843ac77f3a709",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/39d33475da7b6db8372ebd3c4db74993aacc18a2"
    },
    {
        "hash": "e7896f03ad8fc50962909483fc0069d6ecead50d",
        "author": "Changyu Bi",
        "date": "2023-11-13T15:26:52-08:00",
        "message": "Enable unit test `PrecludeLastLevelTest.RangeDelsCauseFileEndpointsToOverlap` (#12064)\n\nSummary:\nFixes https://github.com/facebook/rocksdb/issues/11909. The test passes after the change in https://github.com/facebook/rocksdb/issues/11917 to start mock clock from a non-zero time.\n\nThe reason for test failing is a bit complicated:\n- The Put here https://github.com/pdillinger/rocksdb/blob/e4ad4a0ef1b852dc203311fb885c673c891f08e0/db/compaction/tiered_compaction_test.cc#L2045 happens before mock clock advances beyond 0.\n- This causes oldest_key_time_ to be 0 for memtable.\n- oldest_ancester_time of the first L0 file becomes 0\n- L0 -> L5/6 compaction output files sets `oldest_ancestoer_time` to the current time due to these lines: https://github.com/facebook/rocksdb/blob/509947ce2c970d296fd0d868455d560c7f778a57/db/compaction/compaction_job.cc#L1898C34-L1904.\n- This causes some small sequence number to be mapped to current time: https://github.com/facebook/rocksdb/blob/509947ce2c970d296fd0d868455d560c7f778a57/db/compaction/compaction_job.cc#L301\n- Keys in L6 is being moved up to L5 due to the unexpected seqno_to_time mapping\n- When compacting keys from last level to the penultimate level, we only check keys to be within user key range of penultimate level input files. If we compact the following file 3 with file 1 and output keys to L5, we can get the reported inconsistency bug.\n```\nL5: file 1 [K5@20, K10@kMaxSeqno], file 2 [K10@30, K14@34)\nL6: file 3 [K6@5, K10@20]\n```\n\nhttps://github.com/facebook/rocksdb/issues/12063 will add fixes to check internal key range when compacting keys from last level up to the penultimate level.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12064\n\nTest Plan: the unit test passes\n\nReviewed By: ajkr\n\nDifferential Revision: D51281149\n\nPulled By: cbi42\n\nfbshipit-source-id: 00b7f026c453454d9f3af5b2de441383a96f0c62",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/tiered_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e7896f03ad8fc50962909483fc0069d6ecead50d"
    },
    {
        "hash": "b3ffca0e298225631ed131805acb8b1335130413",
        "author": "leipeng",
        "date": "2023-11-13T12:48:44-08:00",
        "message": "DBImpl::DelayWrite: Remove bad WRITE_STALL histogram (#12067)\n\nSummary:\nWhen delay didn't happen, histogram WRITE_STALL is still recorded, and ticker STALL_MICROS is not recorded.\n\nThis is a bug, neither WRITE_STALL or STALL_MICROS should not be recorded when delay did not happen.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12067\n\nReviewed By: cbi42\n\nDifferential Revision: D51263133\n\nPulled By: ajkr\n\nfbshipit-source-id: bd82d8328fe088d613991966e83854afdabc6a25",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b3ffca0e298225631ed131805acb8b1335130413"
    },
    {
        "hash": "9fb6851918e12f5c14dd017803d93e2ad6f592ad",
        "author": "brodyhuang",
        "date": "2023-11-13T12:09:58-08:00",
        "message": "fix(StackableDB): Resume API (#12060)\n\nSummary:\nWhen I call `DBWithTTLImpl::Resume()`, it returns `Status::NotSupported`.  Did `StackableDB` miss this API ?\nThanks !\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12060\n\nReviewed By: jaykorean\n\nDifferential Revision: D51202742\n\nPulled By: ajkr\n\nfbshipit-source-id: 5e01a54a42efd81fd57b3c992b9af8bc45c59c9c",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/stackable_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9fb6851918e12f5c14dd017803d93e2ad6f592ad"
    },
    {
        "hash": "c4c62c230438b06bae67189baaa5a7661e590160",
        "author": "Yingchun Lai",
        "date": "2023-11-09T10:45:13-08:00",
        "message": "Support to use environment variable to test customer encryption plugins (#12025)\n\nSummary:\nThe CreateEnvTest.CreateEncryptedFileSystem unit test is to verify the creation functionality of EncryptedFileSystem, but now it just support the builtin CTREncryptionProvider class.\nThis patch make it flexible to use environment variable `TEST_FS_URI`, it is useful to test customer encryption plugins.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12025\n\nReviewed By: anand1976\n\nDifferential Revision: D50799656\n\nPulled By: ajkr\n\nfbshipit-source-id: dbcacfefbf07de9c7803f7707b34c5193bec17bf",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c4c62c230438b06bae67189baaa5a7661e590160"
    },
    {
        "hash": "e90e9825b4addbc0eb3131bc9b08cba849546816",
        "author": "brodyhuang",
        "date": "2023-11-09T10:43:16-08:00",
        "message": "Drop wal record when sequence is illegal (#11985)\n\nSummary:\n- Our database is corrupted, causing some sequences of wal record to be invalid (but the `record_checksum` looks fine).\n- When we RecoverLogFiles in WALRecoveryMode::kPointInTimeRecovery, `assert(seq <= kMaxSequenceNumber)` will be failed.\n- When it is found that sequence is illegal, can we drop the file  to recover as much data as possible ?  Thx !\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11985\n\nReviewed By: anand1976\n\nDifferential Revision: D50698039\n\nPulled By: ajkr\n\nfbshipit-source-id: 1e42113b58823088d7c0c3a92af5b3efbb5f5296",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_open.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e90e9825b4addbc0eb3131bc9b08cba849546816"
    },
    {
        "hash": "9af25a392b9565f2f66566b4df3b33c8b7bfaf29",
        "author": "Peter Dillinger",
        "date": "2023-11-07T16:35:19-08:00",
        "message": "Clean up AutoHyperClockTable::PurgeImpl (#12052)\n\nSummary:\nThere was some unncessary logic (e.g. a dead assignment to home_shift) left over from earlier revision of the code.\n\nAlso, rename confusing ChainRewriteLock::new_head_ / GetNewHead() to saved_head_ / GetSavedHead().\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12052\n\nTest Plan: existing tests\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D51091499\n\nPulled By: pdillinger\n\nfbshipit-source-id: 4b191b60a2b16085681e59d49c4d97e802869db8",
        "modified_files_count": 1,
        "modified_files": [
            "cache/clock_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9af25a392b9565f2f66566b4df3b33c8b7bfaf29"
    },
    {
        "hash": "0b057a7accbf3f7a123432277a8586e9236714ac",
        "author": "Yu Zhang",
        "date": "2023-10-31T16:10:48-07:00",
        "message": "Initialize comparator explicitly in PrepareOptionsForRestoredDB() (#12034)\n\nSummary:\nThis is to fix below error seeing in stress test:\n```\nFailure in DB::Open in backup/restore with: Invalid argument: Cannot open a column family and disable user-defined timestamps feature if its existing persist_user_defined_timestamps flag is not false.\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12034\n\nReviewed By: cbi42\n\nDifferential Revision: D50860689\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: ebc6cf0a75caa43d3d3bd58e3d5c2ac754cc637c",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0b057a7accbf3f7a123432277a8586e9236714ac"
    },
    {
        "hash": "2818a74b95f0bab434dc65f0d271ac7a27c787a7",
        "author": "Changyu Bi",
        "date": "2023-10-31T07:39:41-07:00",
        "message": "Initialize merge operator explicitly in PrepareOptionsForRestoredDB() (#12033)\n\nSummary:\nWe are seeing the following stress test failure: `Failure in DB::Get in backup/restore with: Invalid argument: merge_operator is not properly initialized. Verification failed: Backup/restore failed: Invalid argument: merge_operator is not properly initialized.`. The reason is likely that `GetColumnFamilyOptionsFromString()` does not set merge operator if it's a customized merge operator. Fixing it by initializing merge operator explicitly.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12033\n\nTest Plan:\nthis repro gives the error consistently before this PR\n```\n./db_stress --acquire_snapshot_one_in=10000 --adaptive_readahead=0 --allow_concurrent_memtable_write=1 --allow_data_in_errors=True --async_io=0 --atomic_flush=1 --auto_readahead_size=1 --avoid_flush_during_recovery=0 --avoid_unnecessary_blocking_io=1 --backup_max_size=1048576000000 --backup_one_in=50 --batch_protection_bytes_per_key=8 --block_protection_bytes_per_key=2 --block_size=16384 --bloom_before_level=2147483646 --bloom_bits=31.014388066505518 --bottommost_compression_type=lz4hc --bottommost_file_compaction_delay=0 --bytes_per_sync=0 --cache_index_and_filter_blocks=0 --cache_size=33554432 --cache_type=fixed_hyper_clock_cache --charge_compression_dictionary_building_buffer=1 --charge_file_metadata=1 --charge_filter_construction=0 --charge_table_reader=1 --checkpoint_one_in=1000000 --checksum_type=kxxHash --clear_column_family_one_in=0 --column_families=1 --compact_files_one_in=1000000 --compact_range_one_in=1000000 --compaction_pri=3 --compaction_readahead_size=0 --compaction_ttl=10 --compressed_secondary_cache_ratio=0.0 --compressed_secondary_cache_size=0 --compression_checksum=1 --compression_max_dict_buffer_bytes=4095 --compression_max_dict_bytes=16384 --compression_parallel_threads=1 --compression_type=none --compression_use_zstd_dict_trainer=1 --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --data_block_index_type=0 --db=/dev/shm/rocksdb_test/rocksdb_crashtest_blackbox --db_write_buffer_size=0 --delpercent=4 --delrangepercent=1 --destroy_db_initially=1 --detect_filter_construct_corruption=0 --disable_wal=1 --enable_compaction_filter=0 --enable_pipelined_write=0 --enable_thread_tracking=0 --expected_values_dir=/dev/shm/rocksdb_test/rocksdb_crashtest_expected --fail_if_options_file_error=1 --fifo_allow_compaction=0 --file_checksum_impl=xxh64 --flush_one_in=1000000 --format_version=2 --get_current_wal_file_one_in=0 --get_live_files_one_in=1000000 --get_property_one_in=1000000 --get_sorted_wal_files_one_in=0 --index_block_restart_interval=10 --index_type=2 --ingest_external_file_one_in=0 --initial_auto_readahead_size=16384 --iterpercent=10 --key_len_percent_dist=1,30,69 --level_compaction_dynamic_level_bytes=1 --lock_wal_one_in=1000000 --long_running_snapshots=1 --manual_wal_flush_one_in=0 --mark_for_compaction_one_file_in=10 --max_auto_readahead_size=524288 --max_background_compactions=1 --max_bytes_for_level_base=67108864 --max_key=100 --max_key_len=3 --max_manifest_file_size=1073741824 --max_write_batch_group_size_bytes=1048576 --max_write_buffer_number=3 --max_write_buffer_size_to_maintain=8388608 --memtable_max_range_deletions=1000 --memtable_prefix_bloom_size_ratio=0 --memtable_protection_bytes_per_key=2 --memtable_whole_key_filtering=0 --memtablerep=skip_list --min_write_buffer_number_to_merge=2 --mmap_read=1 --mock_direct_io=False --nooverwritepercent=1 --num_file_reads_for_auto_readahead=0 --open_files=-1 --open_metadata_write_fault_one_in=0 --open_read_fault_one_in=0 --open_write_fault_one_in=16 --ops_per_thread=100000000 --optimize_filters_for_memory=1 --paranoid_file_checks=0 --partition_filters=0 --partition_pinning=0 --pause_background_one_in=1000000 --periodic_compaction_seconds=0 --prefix_size=-1 --prefixpercent=0 --prepopulate_block_cache=1 --preserve_internal_time_seconds=0 --progress_reports=0 --read_fault_one_in=0 --readahead_size=0 --readpercent=50 --recycle_log_file_num=0 --reopen=0 --secondary_cache_fault_one_in=0 --set_options_one_in=0 --snapshot_hold_ops=100000 --sst_file_manager_bytes_per_sec=0 --sst_file_manager_bytes_per_truncate=0 --stats_dump_period_sec=0 --subcompactions=1 --sync=0 --sync_fault_injection=1 --target_file_size_base=16777216 --target_file_size_multiplier=1 --test_batches_snapshots=0 --top_level_index_pinning=0 --unpartitioned_pinning=1 --use_direct_io_for_flush_and_compaction=0 --use_direct_reads=0 --use_full_merge_v1=0 --use_get_entity=0 --use_merge=1 --use_multi_get_entity=0 --use_multiget=1 --use_put_entity_one_in=10 --use_write_buffer_manager=0 --user_timestamp_size=0 --value_size_mult=32 --verification_only=0 --verify_checksum=1 --verify_checksum_one_in=1000000 --verify_db_one_in=100000 --verify_file_checksums_one_in=1000000 --verify_iterator_with_expected_state_one_in=5 --verify_sst_unique_id_in_manifest=1 --wal_bytes_per_sync=524288 --wal_compression=zstd --write_buffer_size=33554432 --write_dbid_to_manifest=0 --write_fault_one_in=0 --writepercent=35\n```\n\nReviewed By: hx235\n\nDifferential Revision: D50825558\n\nPulled By: cbi42\n\nfbshipit-source-id: 8468dc0444c112415a515af8291ef3abec8a42de",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2818a74b95f0bab434dc65f0d271ac7a27c787a7"
    },
    {
        "hash": "76402c034e8fa75809df3ed89a5742f044e980e9",
        "author": "Yingchun Lai",
        "date": "2023-10-30T10:47:04-07:00",
        "message": "Fix incorrect parameters order in env_basic_test.cc (#11997)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/11997\n\nReviewed By: jaykorean\n\nDifferential Revision: D50608182\n\nPulled By: ajkr\n\nfbshipit-source-id: d33cfdb5adfea91175c8fa21e8b80e22f728f6c6",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/76402c034e8fa75809df3ed89a5742f044e980e9"
    },
    {
        "hash": "526f36b48381dd640a0426bd748dbc0bb5797c75",
        "author": "Yu Zhang",
        "date": "2023-10-25T17:48:21-07:00",
        "message": "Remove extra semicolon (#12017)\n\nSummary:\nAs titled.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12017\n\nReviewed By: hx235\n\nDifferential Revision: D50670406\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 28b3acd930ee676d78ebb47144047ce233fc11c5",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/526f36b48381dd640a0426bd748dbc0bb5797c75"
    },
    {
        "hash": "f2c9075d16d17a14598246cfc6e620d60135849d",
        "author": "qiuchengxuan",
        "date": "2023-10-25T09:16:24-07:00",
        "message": "Fix dead loop with kSkipAnyCorruptedRecords mode selected in some cases (#11955) (#11979)\n\nSummary:\nWith fragmented record span across multiple blocks, if any following blocks corrupted with arbitary data, and intepreted log number less than the current log number, program will fall into infinite loop due to\nnot skipping buffer leading bytes\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11979\n\nTest Plan: existing unit tests\n\nReviewed By: ajkr\n\nDifferential Revision: D50604408\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: e50a0c7e7c3d293fb9d5afec0a3eb4a1835b7a3b",
        "modified_files_count": 1,
        "modified_files": [
            "db/log_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f2c9075d16d17a14598246cfc6e620d60135849d"
    },
    {
        "hash": "ef0c3f08fae318d1b1e4159e0437579a36c6cfd8",
        "author": "Peter Dillinger",
        "date": "2023-10-19T14:51:22-07:00",
        "message": "Fix rare destructor bug in AutoHCC (#11988)\n\nSummary:\nand some other small enhancements/fixes:\n* The main bug fixed is that in some rare cases, the \"published\" table size might be smaller than the actual table size. This is a transient state that can happen with concurrent growth that is normally fixed after enough insertions, but if the cache is destroyed soon enough after growth, it could fail to fully destroy some entries and cause assertion failures. We can fix this by detecting the true table size in the destructor.\n* Change the \"too many iterations\" debug threshold from 512 to 768. We might have hit at least one false positive failure. (Failed despite legitimate operation.)\n* Added some stronger assertions in some places to aid in debugging.\n* Use COERCE_CONTEXT_SWITCH to make behavior of Grow less predictable in terms of thread interleaving. (Might add in more places.) This was useful in reproducing the destructor bug.\n* Fix some comments with typos or that were based on earlier revisions of the code.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11988\n\nTest Plan:\nVariants of this bug-finding command:\n```\nUSE_CLANG=1 COMPILE_WITH_ASAN=1 COMPILE_WITH_UBSAN=1 COERCE_CONTEXT_SWITCH=1 DEBUG_LEVEL=2 make -j32 cache_bench && while ROCKSDB_DEBUG=1 ./cache_bench -cache_type=auto_hyper_clock_cache -histograms=0 -cache_size=80000000 -threads=32 -populate_cache=0 -ops_per_thread=1000 -num_shard_bits=0; do :; done\n```\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D50470318\n\nPulled By: pdillinger\n\nfbshipit-source-id: d407a8bb0b6d2ddc598a954c319a1640136f12f2",
        "modified_files_count": 1,
        "modified_files": [
            "cache/clock_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ef0c3f08fae318d1b1e4159e0437579a36c6cfd8"
    },
    {
        "hash": "018eede679f6df74f78b158caf21f76c00c1bad7",
        "author": "Akanksha Mahajan",
        "date": "2023-10-16T15:14:58-07:00",
        "message": "Remove assertion from PrefetchAsync (#11965)\n\nSummary:\nRemove assertion from PrefetchAsync (roundup_len2 >= alignment) as for non direct_io, buffer size can be less than alignment resulting in assertion.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11965\n\nTest Plan: Ran the issue causing db_stress without this assertion and the verification completes successfully.\n\nReviewed By: anand1976\n\nDifferential Revision: D50328955\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 65f55ca230d2bbc63f4e2cc34c7273b22b515879",
        "modified_files_count": 1,
        "modified_files": [
            "file/file_prefetch_buffer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/018eede679f6df74f78b158caf21f76c00c1bad7"
    },
    {
        "hash": "9ded9f789ff9805236669963c3f4bde811d71f54",
        "author": "Changyu Bi",
        "date": "2023-10-14T13:33:55-07:00",
        "message": "Fix db_stress FaultInjectionTestFS set up before DB open (#11958)\n\nSummary:\nWe saw frequent stress test failures with error messages like:\n```\nVerification failed for column family 0 key ...: value_from_db: , value_from_expected: ..., msg: GetEntity verification: Value not found: NotFound:\n```\nOne cause for this is that data in WAL is lost after a crash. We initialize FaultInjectionTestFS to be not direct writable when write_fault_injection is enabled (see code change). This can cause the first WAL created during DB open to be lost if a db_stress is killed before the first WAL is synced. This PR initializes FaultInjectionTestFS to be direct writable. Note that FaultInjectionTestFS will be configured propertly for write fault injection after DB open in `RunStressTestImpl()`. So this change should not affect write fault injection coverage.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11958\n\nTest Plan:\na repro for the above bug:\n```\nSimulate crash before first WAL is sealed:\n\n --- a/db_stress_tool/db_stress_driver.cc\n+++ b/db_stress_tool/db_stress_driver.cc\n@@ -256,6 +256,7 @@ bool RunStressTestImpl(SharedState* shared) {\n     fprintf(stderr, \"Verification failed :(\\n\");\n     return false;\n   }\n+  exit(1);\n   return true;\n }\n\n./db_stress --clear_column_family_one_in=0 --column_families=1 --preserve_internal_time_seconds=60 --destroy_db_initially=0 --db=/dev/shm/rocksdb_crashtest_blackbox --db_write_buffer_size=2097152 --destroy_db_initially=0 --expected_values_dir=/dev/shm/rocksdb_crashtest_expected --reopen=0 --test_batches_snapshots=0 --threads=1 --ops_per_thread=100 --write_fault_one_in=1000 --sync_fault_injection=0\n\n./db_stress_main  --clear_column_family_one_in=0 --column_families=1 --preserve_internal_time_seconds=60 --destroy_db_initially=0 --db=/dev/shm/rocksdb_crashtest_blackbox --db_write_buffer_size=2097152 --destroy_db_initially=0 --expected_values_dir=/dev/shm/rocksdb_crashtest_expected --reopen=0 --test_batches_snapshots=0 --sync_fault_injection=1\n```\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D50300347\n\nPulled By: cbi42\n\nfbshipit-source-id: 3a4881d72197f5ece82364382a0100912e16c2d6",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9ded9f789ff9805236669963c3f4bde811d71f54"
    },
    {
        "hash": "f3aef8cad7ba550743ce8b0755c767917a92fd5f",
        "author": "Changyu Bi",
        "date": "2023-10-14T12:00:31-07:00",
        "message": "Add write operation to tracer only after successful callback (#11954)\n\nSummary:\nWe saw optimistic transaction stress test failures like the following:\n```\nVerification failed for column family 0 key 000000000001E9AF000000000000012B00000000000000B5 (12535491): value_from_db: 010000000504070609080B0A0D0C0F0E111013121514171619181B1A1D1C1F1E212023222524272629282B2A2D2C2F2E313033323534373639383B3A3D3C3F3E, value_from_expected: , msg: Iterator verification: Unexpected value found```\n```\nWith ajkr's repro (see test plan), I found that we record duplicated writes to tracer when an optimistic transaction conflict checking fails. This PR fixes it by checking callback status before record a write operation to tracer.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11954\n\nTest Plan:\nthis reproduces the failure consistently\n```\n#!/bin/bash\ndb=/dev/shm/rocksdb_crashtest_blackbox exp=/dev/shm/rocksdb_crashtest_expected\nrm -rf $db $exp && mkdir -p $exp && while ./db_stress \\\n        --atomic_flush=1 \\\n        --clear_column_family_one_in=0 \\\n        --db=$db \\\n        --db_write_buffer_size=2097152 \\\n        --delpercent=0 \\\n        --delrangepercent=0 \\\n        --destroy_db_initially=0 \\\n        --disable_wal=1 \\\n        --expected_values_dir=$exp \\\n        --iterpercent=0 \\\n        --max_bytes_for_level_base=2097152 \\\n        --max_key=250000 \\\n        --memtable_prefix_bloom_size_ratio=0.5 \\\n        --memtable_whole_key_filtering=1 \\\n        --occ_lock_bucket_count=100 \\\n        --occ_validation_policy=0 \\\n        --ops_per_thread=10 \\\n        --prefixpercent=0 \\\n        --readpercent=0 \\\n        --reopen=0 \\\n        --target_file_size_base=524288 \\\n        --test_batches_snapshots=0 \\\n        --use_optimistic_txn=1 \\\n        --use_txn=1 \\\n        --value_size_mult=32 \\\n        --write_buffer_size=524288 \\\n        --writepercent=100 ; do : ; done\n```\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D50284976\n\nPulled By: cbi42\n\nfbshipit-source-id: 793e3cee186c8b4f406b29166efd8d9028695206",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f3aef8cad7ba550743ce8b0755c767917a92fd5f"
    },
    {
        "hash": "50b0879d5052bc332c20e9c9d2f92283e5b93e77",
        "author": "Changyu Bi",
        "date": "2023-10-14T10:08:03-07:00",
        "message": "Do not fail stress test when file ingestion return injected error (#11956)\n\nSummary:\nCurrently, if file ingestion hit injected error, stress test is considered failed since it prints a message to stderr containing the keyword \"error\" and db_crashtest.py looks for it in stderr. This PR fixes it by print injected error to stdout.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11956\n\nTest Plan: Check future stress test runs.\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D50293537\n\nPulled By: cbi42\n\nfbshipit-source-id: e74915b1b3c6876a61ab6933c4529780362ec02b",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/50b0879d5052bc332c20e9c9d2f92283e5b93e77"
    },
    {
        "hash": "dc576af0fde98ed38d544c380d0ae39a0bc8b347",
        "author": "Peter Dillinger",
        "date": "2023-10-13T09:52:33-07:00",
        "message": "AutoHCC - fix a rare loop condition in Lookup (#11948)\n\nSummary:\nSaw this in stress test:\n```\ndb_stress: cache/clock_cache.cc:3152:[...] Assertion `i < 0x2000' failed.\n```\n\nThe problem is related to Lookups on a chain currently involved in a Grow operation. To avoid Lookup waiting on Grow, Lookup is able to walk a chain whose first part is already migrated and tail is not yet migrated, so is mixed with entries with a different destination home (according to `home_shift`) than what we're looking for. This is fine until we save one of these entries as a safe point in the chain to backtrack to (`read_ref_on_chain`) in case of concurrent modification and end up backtracking to it. In that case, we can get stuck on the wrong destination chain and keep trying to backtrack to an entry that is supposed to be on the correct chain but is not (anymore).\n\nFor some reason I haven't quite worked out, I believe it's usually able to recover after some 1000+ looop iterations, so reproducibility depends on the threshold at which we consider a Lookup loop to be too many iterations for a plausibly valid Lookup.\n\nDetecting and working around this case is relatively simple. We can (and must) keep going on the chain but ensure we don't save it as a safe entry to backtrack to.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11948\n\nTest Plan:\nThe problem could be reproduced in a few minutes with this (debug build):\n```\n$ while ./cache_bench -cache_type=auto_hyper_clock_cache -histograms=0 -cache_size=80000000 -threads=32 -populate_cache=0 -ops_per_thread=10000 -degenerate_hash_bits=6 -num_shard_bits=0; do :; done\n```\n\nAt least with a lower threshold on suspiciously high number of iterations. I've lowered the thresholds quite a bit and no longer able to reproduce a failure.\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D50236574\n\nPulled By: pdillinger\n\nfbshipit-source-id: 2cb54a4e02bb51d5933eea41fcd489ab9d34aa96",
        "modified_files_count": 1,
        "modified_files": [
            "cache/clock_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dc576af0fde98ed38d544c380d0ae39a0bc8b347"
    },
    {
        "hash": "d367b34cc921f4ac2aa358c324a8a8f1f47589f0",
        "author": "anand76",
        "date": "2023-10-11T13:28:10-07:00",
        "message": "Fix TSAN crash test false positive (#11941)\n\nSummary:\nFix the TSAN false positive caused by reading a bool flag without synchronization.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11941\n\nTest Plan: Run tsan crash test locally\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D50181799\n\nPulled By: anand1976\n\nfbshipit-source-id: 889e7237e9f3c9452a9df94a0d949db5fe13bb57",
        "modified_files_count": 1,
        "modified_files": [
            "cache/compressed_secondary_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d367b34cc921f4ac2aa358c324a8a8f1f47589f0"
    },
    {
        "hash": "4bd5aa4f5541d22ae52ff1ee2f6c9b782cf5ccdc",
        "author": "Andrew Kryczka",
        "date": "2023-10-11T09:42:48-07:00",
        "message": "Fix two `ErrorHandler` race conditions (#11939)\n\nSummary:\n1. Prevent a double join on a `port::Thread`\n2. Ensure `recovery_in_prog_` and `bg_error_` are both set under same lock hold. This is useful for writers who see a non-OK `bg_error_` and are deciding whether to stall based on whether the error will be auto-recovered.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11939\n\nReviewed By: cbi42\n\nDifferential Revision: D50155484\n\nPulled By: ajkr\n\nfbshipit-source-id: fbc1f85c50e7eaee27ee0e376aee688d8a06c93b",
        "modified_files_count": 1,
        "modified_files": [
            "db/error_handler.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4bd5aa4f5541d22ae52ff1ee2f6c9b782cf5ccdc"
    },
    {
        "hash": "ee0829ba76a1edc3257fd3078262b7e064aede82",
        "author": "darionyaphet",
        "date": "2023-10-09T19:10:06-07:00",
        "message": "fix typo snapshto (#11817)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/11817\n\nReviewed By: jaykorean\n\nDifferential Revision: D50103497\n\nPulled By: ltamasi\n\nfbshipit-source-id: 77c5cf86ff7eb5021fc91b03225882536163af7b",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ee0829ba76a1edc3257fd3078262b7e064aede82"
    },
    {
        "hash": "229a6e5f55a0a67f87c5f3a22da9f46305164291",
        "author": "darionyaphet",
        "date": "2023-10-09T19:05:48-07:00",
        "message": "Remove unnecessary comments (#11833)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/11833\n\nReviewed By: jaykorean\n\nDifferential Revision: D50103376\n\nPulled By: ltamasi\n\nfbshipit-source-id: 0da49252c3e584b9d77e9fd3f27453d4b24afe6e",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/advanced_cache.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/229a6e5f55a0a67f87c5f3a22da9f46305164291"
    },
    {
        "hash": "2dc63c891170a15c672ef16390db73982c7ae975",
        "author": "Yu Zhang",
        "date": "2023-10-06T10:34:44-07:00",
        "message": "Add the default WritableFile::GetFileSize implementation back for com… (#11927)\n\nSummary:\nAs mentioned in https://github.com/facebook/rocksdb/issues/11726, we should defer user feasible API changes to major release.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11927\n\nReviewed By: anand1976\n\nDifferential Revision: D50016723\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 59781442602fadb9906e37aad2021e3178723db5",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2dc63c891170a15c672ef16390db73982c7ae975"
    },
    {
        "hash": "be879cc56baafcfd8672ff526fb5b8422aef98cc",
        "author": "Andrew Kryczka",
        "date": "2023-10-02T16:07:39-07:00",
        "message": "stress test verification value mismatch message (#11912)\n\nSummary:\nSeparate the message for value mismatch from the message for an extra value in the DB\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11912\n\nReviewed By: hx235\n\nDifferential Revision: D49792137\n\nPulled By: ajkr\n\nfbshipit-source-id: 311bc1801843a15367f409ead88ef755acbde468",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/be879cc56baafcfd8672ff526fb5b8422aef98cc"
    },
    {
        "hash": "2cfe53ec05639ff04d8922399b5e5f0fb8f76edb",
        "author": "Jay Huh",
        "date": "2023-09-29T09:58:40-07:00",
        "message": "Add helpful message for ldb when unknown option found (#11907)\n\nSummary:\nUsers may run into an issue when running ldb on db that's in a different version and they have different set of options: `Failed: Invalid argument: Could not find option: <MISSING_OPTION>`\n\nThey can work around this by setting `--ignore_unknown_options`, but the error message is not clear for users to find why the option is missing. It's also hard for the users to find the `ignore_unknown_options` option especially if they are not familiar with the codebase or `ldb` tool.\n\nThis PR changes the error message to help users to find out what's wrong and possible workaround for the issue\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11907\n\nTest Plan:\nTesting by reproducing the issue locally\n```\n❯./ldb --db=/data/users/jewoongh/db_crash_whitebox_T164195541/ get a\nFailed: Invalid argument: Could not find option: : unknown_option_test\nThis tool was built with version 8.8.0. If your db is in a different version, please try again with option --ignore_unknown_options.\n```\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D49762291\n\nPulled By: jaykorean\n\nfbshipit-source-id: 895570150fde886d5ec524908c4b2664c9230ac9",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2cfe53ec05639ff04d8922399b5e5f0fb8f76edb"
    },
    {
        "hash": "6b4315ee8badc2fd4dea2cade6cdd1acfb92db78",
        "author": "Levi Tamasi",
        "date": "2023-09-27T14:53:25-07:00",
        "message": "Extend the test coverage of FullMergeV3 (#11896)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11896\n\nThe patch extends the test coverage of the wide column aware merge logic by adding two new tests that perform general transformations during merge by implementing the `FullMergeV3` interface. The first one uses a merge operator that produces a wide-column entity as result in all cases (i.e. even if the base value is a plain key-value, or if there is no base value). The second one uses a merge operator that results in a plain key-value in all cases.\n\nReviewed By: jaykorean\n\nDifferential Revision: D49665946\n\nfbshipit-source-id: 419b9e557c064525b659685eb8c09ae446656439",
        "modified_files_count": 1,
        "modified_files": [
            "db/wide/db_wide_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6b4315ee8badc2fd4dea2cade6cdd1acfb92db78"
    },
    {
        "hash": "7ea6e724faddac7f864c73afd2ce3710e02ef1ed",
        "author": "Yu Zhang",
        "date": "2023-09-25T20:15:40-07:00",
        "message": "Mark recovery_in_prog_ to false whenever recovery thread joins (#11890)\n\nSummary:\nMake the `RecoverFromRetryableBGIOError` function always mark `recovery_in_prog_` to false when it returns.\nOtherwise, in below code snippet, when db closes and the `error_handler_.CancelErrorRecovery()` call successfully joined the recovery thread, the immediately following while loop will incorrectly think the error recovery is still in progress and loops in `bg_cv_.Wait()`.\n\nhttps://github.com/facebook/rocksdb/blob/1c871a4d8682ea260ba3b18ed43cd525a2141733/db/db_impl/db_impl.cc#L542-L545\n\nThis is the issue https://github.com/facebook/rocksdb/issues/11440\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11890\n\nReviewed By: anand1976\n\nDifferential Revision: D49624216\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: ee10cf6527d95b8dd4705a326eb6208d741fe002",
        "modified_files_count": 1,
        "modified_files": [
            "db/error_handler.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7ea6e724faddac7f864c73afd2ce3710e02ef1ed"
    },
    {
        "hash": "77a1d6eafb95b2ff7dc84b9e8b46faa746f67315",
        "author": "Peter Dillinger",
        "date": "2023-09-22T16:42:52-07:00",
        "message": "Fix assertion failure in AutoHCC (#11877)\n\nSummary:\nExample crash seen in crash test:\n\n```\ndb_stress: cache/clock_cache.cc:237: bool rocksdb::clock_cache::{anonymous}::BeginSlotInsert(const rocksdb::clock_cache::ClockHandleBasicData&, rocksdb::clock_cache::ClockHandle&, uint64_t, bool*): Assertion `*already_matches == false' failed.\n```\n\nI was intentionally ignoring `already_matches` without resetting it to false for the next call.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11877\n\nTest Plan:\nReproducer no longer reproduces:\n\n```\nwhile ./cache_bench -cache_type=auto_hyper_clock_cache -threads=32 -populate_cache=0 -histograms=0 -report_problems -insert_percent=87 -lookup_insert_percent=2 -skew=10 -ops_per_thread=100 -cache_size=1000000; do echo hi; done\n```\n\nReviewed By: cbi42\n\nDifferential Revision: D49562065\n\nPulled By: pdillinger\n\nfbshipit-source-id: 941062e6eac7a4b56157925b1cf2a0b15ff9cc9d",
        "modified_files_count": 1,
        "modified_files": [
            "cache/clock_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/77a1d6eafb95b2ff7dc84b9e8b46faa746f67315"
    },
    {
        "hash": "32fc1e6cdc153be990bd34c38a3713ee22e1941b",
        "author": "Yu Zhang",
        "date": "2023-09-21T14:59:58-07:00",
        "message": "Add unit test for the multiget fix when ReadOptions.read_tier == kPersistedTier and disableWAL == true (#11854)\n\nSummary:\nAdd unit tests for the fix in https://github.com/facebook/rocksdb/pull/11700\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11854\n\nReviewed By: anand1976\n\nDifferential Revision: D49392462\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: bd6978e4888074fa5417f3ccda7a78a2c7eee9c6",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/32fc1e6cdc153be990bd34c38a3713ee22e1941b"
    },
    {
        "hash": "cfe0e0b037cfd4067985b19409a077bde799e847",
        "author": "Changyu Bi",
        "date": "2023-09-19T12:23:38-07:00",
        "message": "Initialize FaultInjectionTestFS DirectWritable field (#11862)\n\nSummary:\nFaultInjectionTestFS is not directly writable by default. Should set it to direct writable if there is no write fault injection.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11862\n\nTest Plan: internal stress test failure reduces.\n\nReviewed By: jaykorean\n\nDifferential Revision: D49428108\n\nPulled By: cbi42\n\nfbshipit-source-id: 5dfa1fbb454272a14f8228a5c496d480d7138ef1",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cfe0e0b037cfd4067985b19409a077bde799e847"
    },
    {
        "hash": "20dbf512473b570c62b83258c058eff448779601",
        "author": "Jay Huh",
        "date": "2023-09-18T23:04:38-07:00",
        "message": "DB Stress Fix - Commit pending value after checking for status (#11856)\n\nSummary:\nWe've seen occasional crash test failure in optimistic transaction DB with the following error message.\n\n```\nstderr:\nWARNING: prefix_size is non-zero but memtablerep != prefix_hash\nVerification failed for column family 0 key 0000000000001EDB0000000000000036787878787878 (789064): value_from_db: 010000000504070609080B0A0D0C0F0E111013121514171619181B1A1D1C1F1E212023222524272629282B2A2D2C2F2E313033323534373639383B3A3D3C3F3E, value_from_expected: , msg: MultiGet verification: Unexpected value found\nCrash-recovery verification failed :(\nNo writes or ops?\nVerification failed :(\n```\n\nThere was a possibility if the db stress crashes after `pending_expected_value.Commit()` but before `thread->shared->SafeTerminate();`, we may have expected value committed while actual DB value was not.\n\nMoving the `pending_expected_value.Commit()` after `s.ok()` check to fix the test.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11856\n\nTest Plan:\nRan the following in a script with while loop. (It doesn't always repro the issue even without this fix, though..)\n```\n./db_stress --acquire_snapshot_one_in=10000 --adaptive_readahead=0 --allow_data_in_errors=True --async_io=1 --atomic_flush=1 --auto_readahead_size=1 --avoid_flush_during_recovery=0 --avoid_unnecessary_blocking_io=1 --backup_max_size=104857600 --backup_one_in=100000 --batch_protection_bytes_per_key=0 --block_protection_bytes_per_key=0 --block_size=16384 --bloom_before_level=8 --bloom_bits=11 --bottommost_compression_type=lz4 --bottommost_file_compaction_delay=0 --bytes_per_sync=0 --cache_index_and_filter_blocks=0 --cache_size=8388608 --cache_type=auto_hyper_clock_cache --charge_compression_dictionary_building_buffer=0 --charge_file_metadata=0 --charge_filter_construction=0 --charge_table_reader=0 --checkpoint_one_in=1000000 --checksum_type=kxxHash --clear_column_family_one_in=0 --compact_files_one_in=1000000 --compact_range_one_in=1000000 --compaction_pri=4 --compaction_readahead_size=0 --compaction_ttl=100 --compression_checksum=0 --compression_max_dict_buffer_bytes=2097151 --compression_max_dict_bytes=16384 --compression_parallel_threads=1 --compression_type=lz4 --compression_use_zstd_dict_trainer=0 --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --data_block_index_type=0 --db=/dev/shm/rocksdb_test/rocksdb_crashtest_blackbox --db_write_buffer_size=1048576 --delpercent=5 --delrangepercent=0 --destroy_db_initially=0 --detect_filter_construct_corruption=0 --disable_wal=1 --enable_compaction_filter=0 --enable_pipelined_write=0 --enable_thread_tracking=1 --expected_values_dir=/dev/shm/rocksdb_test/rocksdb_crashtest_expected --fail_if_options_file_error=1 --fifo_allow_compaction=1 --file_checksum_impl=crc32c --flush_one_in=1000000 --format_version=5 --get_current_wal_file_one_in=0 --get_live_files_one_in=1000000 --get_property_one_in=1000000 --get_sorted_wal_files_one_in=0 --index_block_restart_interval=3 --index_type=2 --ingest_external_file_one_in=0 --initial_auto_readahead_size=524288 --iterpercent=10 --key_len_percent_dist=1,30,69 --level_compaction_dynamic_level_bytes=0 --lock_wal_one_in=1000000 --long_running_snapshots=0 --manual_wal_flush_one_in=0 --mark_for_compaction_one_file_in=10 --max_auto_readahead_size=524288 --max_background_compactions=20 --max_bytes_for_level_base=10485760 --max_key=25000000 --max_key_len=3 --max_manifest_file_size=1073741824 --max_write_batch_group_size_bytes=16777216 --max_write_buffer_number=3 --max_write_buffer_size_to_maintain=2097152 --memtable_max_range_deletions=0 --memtable_prefix_bloom_size_ratio=0.001 --memtable_protection_bytes_per_key=2 --memtable_whole_key_filtering=0 --memtablerep=skip_list --min_write_buffer_number_to_merge=1 --mmap_read=1 --mock_direct_io=False --nooverwritepercent=1 --num_file_reads_for_auto_readahead=1 --occ_lock_bucket_count=500 --occ_validation_policy=0 --open_files=-1 --open_metadata_write_fault_one_in=8 --open_read_fault_one_in=0 --open_write_fault_one_in=0 --ops_per_thread=100000000 --optimize_filters_for_memory=1 --paranoid_file_checks=1 --partition_filters=0 --partition_pinning=1 --pause_background_one_in=1000000 --periodic_compaction_seconds=2 --prefix_size=5 --prefixpercent=5 --prepopulate_block_cache=1 --preserve_internal_time_seconds=36000 --progress_reports=0 --read_fault_one_in=0 --readahead_size=0 --readpercent=45 --recycle_log_file_num=1 --reopen=0 --secondary_cache_fault_one_in=0 --secondary_cache_uri=compressed_secondary_cache://capacity=8388608;enable_custom_split_merge=true --set_options_one_in=10000 --share_occ_lock_buckets=0 --snapshot_hold_ops=100000 --sst_file_manager_bytes_per_sec=0 --sst_file_manager_bytes_per_truncate=0 --stats_dump_period_sec=0 --subcompactions=3 --sync=0 --sync_fault_injection=0 --target_file_size_base=2097152 --target_file_size_multiplier=2 --test_batches_snapshots=0 --top_level_index_pinning=3 --unpartitioned_pinning=2 --use_direct_io_for_flush_and_compaction=0 --use_direct_reads=0 --use_full_merge_v1=0 --use_get_entity=0 --use_merge=0 --use_multi_get_entity=0 --use_multiget=1 --use_optimistic_txn=1 --use_put_entity_one_in=0 --use_txn=1 --user_timestamp_size=0 --value_size_mult=32 --verification_only=0 --verify_checksum=1 --verify_checksum_one_in=1000000 --verify_db_one_in=100000 --verify_file_checksums_one_in=1000000 --verify_sst_unique_id_in_manifest=1 --wal_bytes_per_sync=0 --wal_compression=zstd --write_buffer_size=4194304 --write_dbid_to_manifest=1 --write_fault_one_in=0 --writepercent=35&\n```\n```\npid=$!\nsleep 10\nkill -9 $pid\nsleep 1\n```\n```\ndb_stress --acquire_snapshot_one_in=10000 --adaptive_readahead=1 --allow_data_in_errors=True --async_io=0 --atomic_flush=1 --auto_readahead_size=1 --avoid_flush_during_recovery=0 --avoid_unnecessary_blocking_io=1 --backup_max_size=104857600 --backup_one_in=100000 --batch_protection_bytes_per_key=8 --block_protection_bytes_per_key=0 --block_size=16384 --bloom_before_level=2147483647 --bloom_bits=75.01353068032098 --bottommost_compression_type=xpress --bottommost_file_compaction_delay=3600 --bytes_per_sync=262144 --cache_index_and_filter_blocks=0 --cache_size=8388608 --cache_type=auto_hyper_clock_cache --charge_compression_dictionary_building_buffer=1 --charge_file_metadata=0 --charge_filter_construction=1 --charge_table_reader=0 --checkpoint_one_in=1000000 --checksum_type=kCRC32c --clear_column_family_one_in=0 --compact_files_one_in=1000000 --compact_range_one_in=1000000 --compaction_pri=4 --compaction_readahead_size=0 --compaction_ttl=0 --compression_checksum=0 --compression_max_dict_buffer_bytes=0 --compression_max_dict_bytes=0 --compression_parallel_threads=1 --compression_type=xpress --compression_use_zstd_dict_trainer=0 --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --data_block_index_type=1 --db=/dev/shm/rocksdb_test/rocksdb_crashtest_blackbox --db_write_buffer_size=134217728 --delpercent=5 --delrangepercent=0 --destroy_db_initially=0 --detect_filter_construct_corruption=1 --disable_wal=1 --enable_compaction_filter=0 --enable_pipelined_write=0 --enable_thread_tracking=1 --expected_values_dir=/dev/shm/rocksdb_test/rocksdb_crashtest_expected --fail_if_options_file_error=1 --fifo_allow_compaction=0 --file_checksum_impl=none --flush_one_in=1000000 --format_version=5 --get_current_wal_file_one_in=0 --get_live_files_one_in=1000000 --get_property_one_in=1000000 --get_sorted_wal_files_one_in=0 --index_block_restart_interval=10 --index_type=0 --ingest_external_file_one_in=0 --initial_auto_readahead_size=524288 --iterpercent=10 --key_len_percent_dist=1,30,69 --level_compaction_dynamic_level_bytes=1 --lock_wal_one_in=1000000 --long_running_snapshots=0 --manual_wal_flush_one_in=0 --mark_for_compaction_one_file_in=10 --max_auto_readahead_size=524288 --max_background_compactions=20 --max_bytes_for_level_base=10485760 --max_key=25000000 --max_key_len=3 --max_manifest_file_size=1073741824 --max_write_batch_group_size_bytes=1048576 --max_write_buffer_number=3 --max_write_buffer_size_to_maintain=1048576 --memtable_max_range_deletions=100 --memtable_prefix_bloom_size_ratio=0.01 --memtable_protection_bytes_per_key=8 --memtable_whole_key_filtering=0 --memtablerep=skip_list --min_write_buffer_number_to_merge=2 --mmap_read=0 --mock_direct_io=True --nooverwritepercent=1 --num_file_reads_for_auto_readahead=2 --occ_lock_bucket_count=10 --occ_validation_policy=0 --open_files=-1 --open_metadata_write_fault_one_in=0 --open_read_fault_one_in=32 --open_write_fault_one_in=16 --ops_per_thread=100000000 --optimize_filters_for_memory=0 --paranoid_file_checks=1 --partition_filters=0 --partition_pinning=0 --pause_background_one_in=1000000 --periodic_compaction_seconds=0 --prefix_size=1 --prefixpercent=5 --prepopulate_block_cache=0 --preserve_internal_time_seconds=36000 --progress_reports=0 --read_fault_one_in=32 --readahead_size=0 --readpercent=45 --recycle_log_file_num=1 --reopen=0 --secondary_cache_fault_one_in=0 --secondary_cache_uri=compressed_secondary_cache://capacity=8388608;enable_custom_split_merge=true --set_options_one_in=10000 --share_occ_lock_buckets=0 --snapshot_hold_ops=100000 --sst_file_manager_bytes_per_sec=104857600 --sst_file_manager_bytes_per_truncate=0 --stats_dump_period_sec=0 --subcompactions=4 --sync=0 --sync_fault_injection=0 --target_file_size_base=2097152 --target_file_size_multiplier=2 --test_batches_snapshots=0 --top_level_index_pinning=1 --unpartitioned_pinning=1 --use_direct_io_for_flush_and_compaction=1 --use_direct_reads=0 --use_full_merge_v1=1 --use_get_entity=0 --use_merge=1 --use_multi_get_entity=0 --use_multiget=1 --use_optimistic_txn=1 --use_put_entity_one_in=0 --use_txn=1 --user_timestamp_size=0 --value_size_mult=32 --verification_only=0 --verify_checksum=1 --verify_checksum_one_in=1000000 --verify_db_one_in=100000 --verify_file_checksums_one_in=0 --verify_sst_unique_id_in_manifest=1 --wal_bytes_per_sync=524288 --wal_compression=zstd --write_buffer_size=4194304 --write_dbid_to_manifest=1 --write_fault_one_in=0 --writepercent=35\n```\n\nReviewed By: cbi42\n\nDifferential Revision: D49403091\n\nPulled By: jaykorean\n\nfbshipit-source-id: 5ee6136133bbdc46aa733e5101c1f998f658c200",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/20dbf512473b570c62b83258c058eff448779601"
    },
    {
        "hash": "0dac75d54232cac007cb9a2ca0a3962a83d8caa9",
        "author": "dengyan",
        "date": "2023-09-18T12:06:58-07:00",
        "message": "Fix a bug in MultiGet when skip_memtable is true (#11700)\n\nSummary:\nWhen skip_memtable is true in MultiGetImpl, The lookup_current is always false, Causes data to be unable to be queried in super_version->current。\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11700\n\nReviewed By: anand1976\n\nDifferential Revision: D49342877\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 270a36d049b4cb7fd151a1fa3080300310111271",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0dac75d54232cac007cb9a2ca0a3962a83d8caa9"
    },
    {
        "hash": "60de713e1555ad48779c1b2ccec4d1491e64e21a",
        "author": "Changyu Bi",
        "date": "2023-09-16T12:08:55-07:00",
        "message": "Use uint64_t for `compaction_readahead_size` in stress test (#11849)\n\nSummary:\nInternal clang check complains: `tools/db_bench_tool.cc:722:43: error: implicit conversion loses integer precision: 'size_t' (aka 'unsigned long') to 'const gflags::int32' (aka 'const int') [-Werror,-Wshorten-64-to-32]\n             ROCKSDB_NAMESPACE::Options().compaction_readahead_size,`\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11849\n\nTest Plan: `make -C internal_repo_rocksdb/repo -j64 USE_CLANG=1 J=40 check`, I can only repro when using on-demand devserver.\n\nReviewed By: hx235\n\nDifferential Revision: D49344491\n\nPulled By: cbi42\n\nfbshipit-source-id: 8c2c0bf2a075c3190b8b91f14f64e26ee252f20f",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/60de713e1555ad48779c1b2ccec4d1491e64e21a"
    },
    {
        "hash": "99f8820054898d44e5cd5f67edd8c940ce1633bb",
        "author": "Jay Huh",
        "date": "2023-09-15T22:50:49-07:00",
        "message": "Fix test on IOActivity check for MultiGetEntity (#11850)\n\nSummary:\nAfter https://github.com/facebook/rocksdb/issues/11842  merged, we started to see some crash_test failures.\n\nThere is a flow inside `TestMultiGetEntity()` that it calls `GetEntity()` to compare the result between `MultiGetEntity()` and `GetEntity()` https://github.com/facebook/rocksdb/blob/1c6faf35871a236222bcbf0b69718ee43376a951/db_stress_tool/no_batched_ops_stress.cc#L1068-L1072\n\nHowever, IOActivity check inside DbStressRandomAccessFileWrapper was expecting IOActivity::MultiGet when GetEntity() was called. We are fixing the test by setting expected operation to be GetEntity before calling GetEntity()\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11850\n\nTest Plan:\nError repro'ed by the following run before fix and no more error after the fix.\n\n```\n./db_stress --acquire_snapshot_one_in=10000 --adaptive_readahead=0 --allow_concurrent_memtable_write=0 --allow_data_in_errors=True --async_io=1 --auto_readahead_size=1 --avoid_flush_during_recovery=0 --avoid_unnecessary_blocking_io=1 --backup_max_size=104857600 --backup_one_in=100000 --batch_protection_bytes_per_key=8 --block_protection_bytes_per_key=0 --block_size=16384 --bloom_before_level=1 --bloom_bits=9.880688060667444 --bottommost_compression_type=zstd --bottommost_file_compaction_delay=86400 --bytes_per_sync=262144 --cache_index_and_filter_blocks=0 --cache_size=8388608 --cache_type=auto_hyper_clock_cache --charge_compression_dictionary_building_buffer=1 --charge_file_metadata=0 --charge_filter_construction=0 --charge_table_reader=1 --checkpoint_one_in=1000000 --checksum_type=kxxHash64 --clear_column_family_one_in=0 --column_families=1 --compact_files_one_in=1000000 --compact_range_one_in=1000000 --compaction_pri=3 --compaction_readahead_size=1048576 --compaction_ttl=0 --compression_checksum=0 --compression_max_dict_buffer_bytes=0 --compression_max_dict_bytes=0 --compression_parallel_threads=1 --compression_type=none --compression_use_zstd_dict_trainer=1 --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --data_block_index_type=1 --db=/dev/shm/rocksdb_test/rocksdb_crashtest_blackbox --db_write_buffer_size=0 --delpercent=4 --delrangepercent=1 --destroy_db_initially=0 --detect_filter_construct_corruption=1 --disable_wal=0 --enable_compaction_filter=0 --enable_pipelined_write=0 --enable_thread_tracking=1 --expected_values_dir=/dev/shm/rocksdb_test/rocksdb_crashtest_expected --fail_if_options_file_error=0 --fifo_allow_compaction=1 --file_checksum_impl=big --flush_one_in=1000000 --format_version=6 --get_current_wal_file_one_in=0 --get_live_files_one_in=1000000 --get_property_one_in=1000000 --get_sorted_wal_files_one_in=0 --index_block_restart_interval=4 --index_type=0 --ingest_external_file_one_in=0 --initial_auto_readahead_size=0 --iterpercent=10 --key_len_percent_dist=1,30,69 --level_compaction_dynamic_level_bytes=0 --lock_wal_one_in=1000000 --long_running_snapshots=0 --manual_wal_flush_one_in=0 --mark_for_compaction_one_file_in=0 --max_auto_readahead_size=524288 --max_background_compactions=1 --max_bytes_for_level_base=67108864 --max_key=25000000 --max_key_len=3 --max_manifest_file_size=1073741824 --max_write_batch_group_size_bytes=16777216 --max_write_buffer_number=3 --max_write_buffer_size_to_maintain=2097152 --memtable_max_range_deletions=0 --memtable_prefix_bloom_size_ratio=0 --memtable_protection_bytes_per_key=2 --memtable_whole_key_filtering=0 --memtablerep=skip_list --min_write_buffer_number_to_merge=2 --mmap_read=1 --mock_direct_io=False --nooverwritepercent=1 --num_file_reads_for_auto_readahead=0 --open_files=-1 --open_metadata_write_fault_one_in=0 --open_read_fault_one_in=0 --open_write_fault_one_in=0 --ops_per_thread=100000000 --optimize_filters_for_memory=0 --paranoid_file_checks=1 --partition_filters=0 --partition_pinning=3 --pause_background_one_in=1000000 --periodic_compaction_seconds=1 --prefix_size=-1 --prefixpercent=0 --prepopulate_block_cache=0 --preserve_internal_time_seconds=0 --progress_reports=0 --read_fault_one_in=32 --readahead_size=16384 --readpercent=50 --recycle_log_file_num=1 --reopen=0 --secondary_cache_fault_one_in=0 --secondary_cache_uri=compressed_secondary_cache://capacity=8388608;enable_custom_split_merge=true --set_options_one_in=0 --snapshot_hold_ops=100000 --sst_file_manager_bytes_per_sec=104857600 --sst_file_manager_bytes_per_truncate=0 --stats_dump_period_sec=0 --subcompactions=2 --sync=0 --sync_fault_injection=1 --target_file_size_base=16777216 --target_file_size_multiplier=1 --test_batches_snapshots=0 --top_level_index_pinning=3 --unpartitioned_pinning=0 --use_direct_io_for_flush_and_compaction=0 --use_direct_reads=0 --use_full_merge_v1=0 --use_get_entity=0 --use_merge=1 --use_multi_get_entity=1 --use_multiget=1 --use_put_entity_one_in=0 --user_timestamp_size=0 --value_size_mult=32 --verification_only=0 --verify_checksum=1 --verify_checksum_one_in=1000000 --verify_db_one_in=100000 --verify_file_checksums_one_in=1000000 --verify_iterator_with_expected_state_one_in=5 --verify_sst_unique_id_in_manifest=1 --wal_bytes_per_sync=524288 --wal_compression=none --write_buffer_size=33554432 --write_dbid_to_manifest=0 --writepercent=35\n```\n\nReviewed By: cbi42\n\nDifferential Revision: D49344996\n\nPulled By: jaykorean\n\nfbshipit-source-id: 8059b8127c0e3cb8af96cf222f47398413c92c50",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/99f8820054898d44e5cd5f67edd8c940ce1633bb"
    },
    {
        "hash": "051cad3867efbfe1a589d4773fae43b9b74d1e76",
        "author": "Changyu Bi",
        "date": "2023-09-15T13:05:23-07:00",
        "message": "Fix CI failure due to transaction_test (#11843)\n\nSummary:\nTest ` build-linux-static_lib-alt_namespace-status_checked` has been failing in main branch.\n\n```\nutilities/transactions/transaction_test.cc:6777:3: error: 'rocksdb' has not been declared\n 6777 |   rocksdb::GetMergeOperandsOptions mergeOperandOptions;\n      |   ^~~~~~~\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11843\n\nTest Plan: `ASSERT_STATUS_CHECKED=1 TEST_UINT128_COMPAT=1 ROCKSDB_MODIFY_NPHASH=1 LIB_MODE=static OPT=\"-DROCKSDB_NAMESPACE=alternative_rocksdb_ns\" make V=1 -j24 J=24 transaction_test`\n\nReviewed By: sarangbh\n\nDifferential Revision: D49330210\n\nPulled By: cbi42\n\nfbshipit-source-id: 85c99236eeca6a777af0101684fbab5a33cca1c9",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/051cad3867efbfe1a589d4773fae43b9b74d1e76"
    },
    {
        "hash": "b050751f762ad4a6744452a935f7c98c029c1b9e",
        "author": "Hui Xiao",
        "date": "2023-09-15T10:38:37-07:00",
        "message": "Use default value instead of hard-coded 0 for compaction_readhead_size in db bench (#11831)\n\nSummary:\n**Context/Summary:**\nIt allows db bench reflect the default behavior of this option. For example, we recently changed its default value.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11831\n\nTest Plan: No code change\n\nReviewed By: cbi42\n\nDifferential Revision: D49253690\n\nPulled By: hx235\n\nfbshipit-source-id: 445d4e54f62b4b538626e301a3014d2f00849d30",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b050751f762ad4a6744452a935f7c98c029c1b9e"
    },
    {
        "hash": "3ebf10e0ac8b4c4522c43a0e56145bccab0ad010",
        "author": "Hui Xiao",
        "date": "2023-09-15T10:37:25-07:00",
        "message": "Info-log stats level on db open (#11840)\n\nSummary:\n**Context/Summary:**\nIt is useful to ensure users set the stats level right for enable detailed timers like ``rocksdb.file.read.{get|multiget|db.iterator|verify.checksum|verify.file.checksums}.micros`\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11840\n\nTest Plan:\n- Manually checking LOG with db bench\n```\n./db_bench --benchmarks=\"fillrandom\" --file_checksum=1 --num=100 --db=/dev/shm/rocksdb --statistics=0 --stats_level=2\n\n2023/09/14-15:30:17.139022 2353133                              Options.statistics: (nil)\n2023/09/14-15:30:17.139025 2353133                              Options.use_fsync: 0\n\n./db_bench --benchmarks=\"fillrandom\" --file_checksum=1 --num=100 --db=/dev/shm/rocksdb --statistics=1 --stats_level=0\n\n2023/09/14-15:30:44.390827 2355026                              Options.statistics: 0x7f7c6d449290\n2023/09/14-15:30:44.390830 2355026                              Options.statistics stats level: 0\n2023/09/14-15:30:44.390833 2355026                              Options.use_fsync: 0\n\n./db_bench --benchmarks=\"fillrandom\" --file_checksum=1 --num=100 --db=/dev/shm/rocksdb --statistics=1 --stats_level=4\n\n2023/09/14-15:31:04.466116 2356374                              Options.statistics: 0x7f84c8649290\n2023/09/14-15:31:04.466119 2356374                              Options.statistics stats level: 4\n2023/09/14-15:31:04.466122 2356374                              Options.use_fsync: 0\n```\n\nReviewed By: ajkr\n\nDifferential Revision: D49296354\n\nPulled By: hx235\n\nfbshipit-source-id: b1b4b911544b6fa8c3fe1dbbd65c3bedfef4b50a",
        "modified_files_count": 1,
        "modified_files": [
            "options/db_options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3ebf10e0ac8b4c4522c43a0e56145bccab0ad010"
    },
    {
        "hash": "3c27f56d0b7e359defbc25bf90061214c889f40b",
        "author": "马越",
        "date": "2023-09-14T13:36:39-07:00",
        "message": "Fix the problem that some keys of ClipColumnFamily may not be deleted (#11811)\n\nSummary:\nWhen executing ClipColumnFamily, if end_key is equal to largest_user_key in a file, this key will not be deleted. So we need to change less than to less than or equal to\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11811\n\nReviewed By: ajkr\n\nDifferential Revision: D49206936\n\nPulled By: cbi42\n\nfbshipit-source-id: 3e8bcb7b52040a9b4d1176de727616cc298d3445",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3c27f56d0b7e359defbc25bf90061214c889f40b"
    },
    {
        "hash": "3285ba7a29166377557acb47f576d6fe0ea69a43",
        "author": "Changyu Bi",
        "date": "2023-09-13T15:53:05-07:00",
        "message": "Fix unit test tsan failure (#11828)\n\nSummary:\nThe test DBCompactionWaitForCompactTest.WaitForCompactWithOptionToFlushAndCloseDB failed tsan in https://app.circleci.com/pipelines/github/facebook/rocksdb/32009/workflows/577e4e1f-a909-4e80-8ef4-af98b5ff7446/jobs/660989. I cannot repro locally, but this should be the fix.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11828\n\nTest Plan: `./db_compaction_test --gtest_filter=\"*DBCompactionWaitForCompactTest/DBCompactionWaitForCompactTest.*\"`\n\nReviewed By: jaykorean\n\nDifferential Revision: D49241904\n\nPulled By: cbi42\n\nfbshipit-source-id: 68714c836d982dcb3946da104533d5c0594980de",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3285ba7a29166377557acb47f576d6fe0ea69a43"
    },
    {
        "hash": "3db2cf113d7c19661058cd09924c47edd4441f5a",
        "author": "Levi Tamasi",
        "date": "2023-09-13T09:50:44-07:00",
        "message": "Fix copyright header in util/overload.h (#11826)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/11826\n\nReviewed By: jaykorean\n\nDifferential Revision: D49233043\n\nfbshipit-source-id: cadf6cda3b9720789609e3d3d9404822c6681da2",
        "modified_files_count": 1,
        "modified_files": [
            "util/overload.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3db2cf113d7c19661058cd09924c47edd4441f5a"
    },
    {
        "hash": "4b123f3a54b8a5980b24c9c58f44b3227aa72c6d",
        "author": "Hui Xiao",
        "date": "2023-09-12T10:00:57-07:00",
        "message": "Change file size related variables type to uint64_t in PickCompactionToReduceSizeAmp() (#11814)\n\nSummary:\n**Context/Summary:**\nsize_t is not most likely not needed as SortedRun::size/compensated_file_size is uint64_t. This is a pre-requisite to addressing https://github.com/facebook/rocksdb/pull/11749/files#r1321828933.  Other places already uses uint64_t e.g, https://github.com/facebook/rocksdb/blob/8.6.fb/db/compaction/compaction_picker_universal.cc#L349-L353\n\n**Test**\nCI\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11814\n\nReviewed By: ajkr\n\nDifferential Revision: D49169155\n\nPulled By: hx235\n\nfbshipit-source-id: 2b3ad70e6f18aa360e94ed8907c8534ad2797e62",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_picker_universal.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4b123f3a54b8a5980b24c9c58f44b3227aa72c6d"
    },
    {
        "hash": "195f35c08be7e376891ef13e2c6ea2a2c823de3a",
        "author": "Changyu Bi",
        "date": "2023-09-06T15:22:39-07:00",
        "message": "Add a unit test for the fix in #11786 (#11790)\n\nSummary:\nTests a scenario where range tombstone reseek used to cause MergingIterator to discard non-ok status.\n\nRan on main without https://github.com/facebook/rocksdb/issues/11786:\n```\n./db_range_del_test --gtest_filter=\"*RangeDelReseekAfterFileReadError*\"\nNote: Google Test filter = *RangeDelReseekAfterFileReadError*\n[==========] Running 1 test from 1 test case.\n[----------] Global test environment set-up.\n[----------] 1 test from DBRangeDelTest\n[ RUN      ] DBRangeDelTest.RangeDelReseekAfterFileReadError\ndb/db_range_del_test.cc:3577: Failure\nValue of: iter->Valid()\n  Actual: true\nExpected: false\n[  FAILED  ] DBRangeDelTest.RangeDelReseekAfterFileReadError (64 ms)\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11790\n\nReviewed By: ajkr\n\nDifferential Revision: D48972869\n\nPulled By: cbi42\n\nfbshipit-source-id: b1a71867533b0fb60af86f8ce8a9e391ba84dd57",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_range_del_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/195f35c08be7e376891ef13e2c6ea2a2c823de3a"
    },
    {
        "hash": "137cd4bb750bec6071254f3b47e89db4d2b58593",
        "author": "anand76",
        "date": "2023-09-06T12:57:10-07:00",
        "message": "Disable error injection after compaction completion (#11798)\n\nSummary:\nhttps://github.com/facebook/rocksdb/issues/11789 added error injection during compaction to db_stress. However, error injection was not disabled after compaction completion, which resulted in some test failures due to stale errors.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11798\n\nReviewed By: cbi42\n\nDifferential Revision: D49022821\n\nPulled By: anand1976\n\nfbshipit-source-id: 3cbfe18d55bee393697e063d05e7a7a7f88b7635",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_listener.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/137cd4bb750bec6071254f3b47e89db4d2b58593"
    },
    {
        "hash": "3f54b9696c964393b310c5c239420d2397a13430",
        "author": "git-hulk",
        "date": "2023-09-06T10:07:21-07:00",
        "message": "Export GetCompactionReasonString/GetFlushReasonString by moving them into listener.h (#11778)\n\nSummary:\nCurrently, rocksdb users would use the event listener to catch the compaction/flush event and log them if any. But now the reason is an integer type instead of a human-readable string, so we would like to convert them into a human-readable string.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11778\n\nReviewed By: jaykorean\n\nDifferential Revision: D49012934\n\nPulled By: ajkr\n\nfbshipit-source-id: a4935b95d70c1be02aec65da7bf1c98a8cf8b933",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/listener.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3f54b9696c964393b310c5c239420d2397a13430"
    },
    {
        "hash": "83eb7b8c2cf13ad8c8326a2e7a869837a535f7e2",
        "author": "Peter Dillinger",
        "date": "2023-08-31T08:39:09-07:00",
        "message": "Log host name (#11776)\n\nSummary:\n... in info_log. Becoming more important with disaggregated storage.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11776\n\nTest Plan: manual\n\nReviewed By: jaykorean\n\nDifferential Revision: D48849471\n\nPulled By: pdillinger\n\nfbshipit-source-id: 9a8fd8b2564a4f133526ecd7c1414cb667e4ba54",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_info_dumper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/83eb7b8c2cf13ad8c8326a2e7a869837a535f7e2"
    },
    {
        "hash": "c1e6ffc40a2898e6b97ecdb4528f523c3debc875",
        "author": "jsteemann",
        "date": "2023-08-29T18:40:13-07:00",
        "message": "remove a sub-condition that is always true (#11746)\n\nSummary:\nthe value of `done` is always false here, so the sub-condition `!done` will always be true and the check can be removed.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11746\n\nReviewed By: anand1976\n\nDifferential Revision: D48656845\n\nPulled By: ajkr\n\nfbshipit-source-id: 523ba3d07b3af7880c8c8ccb20442fd7c0f49417",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable_list.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c1e6ffc40a2898e6b97ecdb4528f523c3debc875"
    },
    {
        "hash": "0b8b17a9d15d6d65f6483aa692284e51a244865f",
        "author": "jsteemann",
        "date": "2023-08-29T18:34:59-07:00",
        "message": "avoid find() -> insert() sequence (#11743)\n\nSummary:\nwhen a key is recorded for locking in a pessimistic transaction, the key is first looked up in a map, and then inserted into the map if it was not already contained.\nthis can be simplified to an unconditional insert. in the ideal case that all keys are unique, this saves all the find() operations.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11743\n\nReviewed By: anand1976\n\nDifferential Revision: D48656798\n\nPulled By: ajkr\n\nfbshipit-source-id: d0150de2db757e0c05e1797cfc24380790c71276",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/pessimistic_transaction.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0b8b17a9d15d6d65f6483aa692284e51a244865f"
    },
    {
        "hash": "ba597514309b686d8addb59616f067d5522186b7",
        "author": "Jan",
        "date": "2023-08-25T18:01:14-07:00",
        "message": "remove an unused typedef (#11286)\n\nSummary:\n`VersionBuilderMap` type alias definition seem unused.\nIf this PR can be compiled fine then the alias is probably not needed anymore.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11286\n\nReviewed By: jaykorean\n\nDifferential Revision: D48656747\n\nPulled By: ajkr\n\nfbshipit-source-id: ac8554922aead7dc3d24fe7e6544a4622578c514",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ba597514309b686d8addb59616f067d5522186b7"
    },
    {
        "hash": "6cbb10466368217a91d3f293d62f48a47862f8e5",
        "author": "akankshamahajan",
        "date": "2023-08-25T13:50:48-07:00",
        "message": "Fix seg fault in auto_readahead_size during IOError (#11761)\n\nSummary:\nFix seg fault in auto_readahead_size\n```\ndb_stress:\ninternal_repo_rocksdb/repo/table/block_based/partitioned_index_iterator.h:70: virtual rocksdb::IndexValue rocksdb::PartitionedIndexIterator::value() const: Assertion `Valid()' failed.\n```\n\nDuring seek, after calculating readahead_size, db_stress can inject IOError resulting in failure to index_iter_->Seek and making index_iter_ invalid.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11761\n\nTest Plan: Reproducible locally and passed with this fix\n\nReviewed By: anand1976\n\nDifferential Revision: D48696248\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 2be43bf56ad0fc2f95f9093c19c9a1b15a716091",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6cbb10466368217a91d3f293d62f48a47862f8e5"
    },
    {
        "hash": "f833ca3878ecff6ce7ca66319bc30255aeefcdad",
        "author": "Hui Xiao",
        "date": "2023-08-23T11:27:48-07:00",
        "message": "Pick files from the last sorted run in size amp compaction picker (#11740)\n\nSummary:\n**Context/Summary:**\nSame intention as https://github.com/facebook/rocksdb/pull/2693 - basically we now pick from the last sorted run and expand forward till we can't\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11740\n\nTest Plan:\nExisting UT\nStress test\n\nReviewed By: ajkr\n\nDifferential Revision: D48586475\n\nPulled By: hx235\n\nfbshipit-source-id: 3eb3c3ee1d5f7e0b0d6d649baaeb8c6990fee398",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_picker_universal.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f833ca3878ecff6ce7ca66319bc30255aeefcdad"
    },
    {
        "hash": "2a9f3b6cc5aa072ce823fd35dcdb0e00c88c9279",
        "author": "Yu Zhang",
        "date": "2023-08-21T15:04:22-07:00",
        "message": "Try to use a db's OPTIONS file for some ldb commands (#11721)\n\nSummary:\nFor some ldb commands that doesn't need to open the DB, it's still useful to use the DB's existing OPTIONS file if it's available.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11721\n\nReviewed By: pdillinger\n\nDifferential Revision: D48485540\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 2d2db837523044066f1a2c4b59a5c03f6cd35e6b",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2a9f3b6cc5aa072ce823fd35dcdb0e00c88c9279"
    },
    {
        "hash": "4fa2c017190a99a9ad44562b12aeef6f6d2a1d16",
        "author": "Jay Huh",
        "date": "2023-08-21T12:14:57-07:00",
        "message": "Replace existing waitforcompaction with new WaitForCompact API in db_bench_tool (#11727)\n\nSummary:\nAs the new API to wait for compaction is available (https://github.com/facebook/rocksdb/issues/11436), we can now replace the existing logic of waiting in db_bench_tool with the new API.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11727\n\nTest Plan:\n```\n./db_bench --benchmarks=\"fillrandom,compactall,waitforcompaction,readrandom\"\n```\n**Before change**\n```\nSet seed to 1692635571470041 because --seed was 0\nInitializing RocksDB Options from the specified file\nInitializing RocksDB Options from command-line flags\nIntegrated BlobDB: blob cache disabled\nRocksDB:    version 8.6.0\nDate:       Mon Aug 21 09:33:40 2023\nCPU:        80 * Intel(R) Xeon(R) Gold 6138 CPU @ 2.00GHz\nCPUCache:   28160 KB\nKeys:       16 bytes each (+ 0 bytes user-defined timestamp)\nValues:     100 bytes each (50 bytes after compression)\nEntries:    1000000\nPrefix:    0 bytes\nKeys per prefix:    0\nRawSize:    110.6 MB (estimated)\nFileSize:   62.9 MB (estimated)\nWrite rate: 0 bytes/second\nRead rate: 0 ops/second\nCompression: Snappy\nCompression sampling rate: 0\nMemtablerep: SkipListFactory\nPerf Level: 1\nWARNING: Optimization is disabled: benchmarks unnecessarily slow\nWARNING: Assertions are enabled; benchmarks unnecessarily slow\n------------------------------------------------\nInitializing RocksDB Options from the specified file\nInitializing RocksDB Options from command-line flags\nIntegrated BlobDB: blob cache disabled\nDB path: [/tmp/rocksdbtest-226125/dbbench]\nfillrandom   :      51.826 micros/op 19295 ops/sec 51.826 seconds 1000000 operations;    2.1 MB/s\nwaitforcompaction(/tmp/rocksdbtest-226125/dbbench): started\nwaitforcompaction(/tmp/rocksdbtest-226125/dbbench): finished\nwaitforcompaction(/tmp/rocksdbtest-226125/dbbench): started\nwaitforcompaction(/tmp/rocksdbtest-226125/dbbench): finished\nDB path: [/tmp/rocksdbtest-226125/dbbench]\nreadrandom   :      39.042 micros/op 25613 ops/sec 39.042 seconds 1000000 operations;    1.8 MB/s (632886 of 1000000 found)\n```\n**After change**\n```\nSet seed to 1692636574431745 because --seed was 0\nInitializing RocksDB Options from the specified file\nInitializing RocksDB Options from command-line flags\nIntegrated BlobDB: blob cache disabled\nRocksDB:    version 8.6.0\nDate:       Mon Aug 21 09:49:34 2023\nCPU:        80 * Intel(R) Xeon(R) Gold 6138 CPU @ 2.00GHz\nCPUCache:   28160 KB\nKeys:       16 bytes each (+ 0 bytes user-defined timestamp)\nValues:     100 bytes each (50 bytes after compression)\nEntries:    1000000\nPrefix:    0 bytes\nKeys per prefix:    0\nRawSize:    110.6 MB (estimated)\nFileSize:   62.9 MB (estimated)\nWrite rate: 0 bytes/second\nRead rate: 0 ops/second\nCompression: Snappy\nCompression sampling rate: 0\nMemtablerep: SkipListFactory\nPerf Level: 1\nWARNING: Optimization is disabled: benchmarks unnecessarily slow\nWARNING: Assertions are enabled; benchmarks unnecessarily slow\n------------------------------------------------\nInitializing RocksDB Options from the specified file\nInitializing RocksDB Options from command-line flags\nIntegrated BlobDB: blob cache disabled\nDB path: [/tmp/rocksdbtest-226125/dbbench]\nfillrandom   :      51.271 micros/op 19504 ops/sec 51.271 seconds 1000000 operations;    2.2 MB/s\nwaitforcompaction(/tmp/rocksdbtest-226125/dbbench): started\nwaitforcompaction(/tmp/rocksdbtest-226125/dbbench): finished with status (OK)\nDB path: [/tmp/rocksdbtest-226125/dbbench]\nreadrandom   :      39.264 micros/op 25468 ops/sec 39.264 seconds 1000000 operations;    1.8 MB/s (632921 of 1000000 found)\n```\n\nReviewed By: ajkr\n\nDifferential Revision: D48524667\n\nPulled By: jaykorean\n\nfbshipit-source-id: 1052a15b2ed79a35165ec4d9998d0454b2552ef4",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4fa2c017190a99a9ad44562b12aeef6f6d2a1d16"
    },
    {
        "hash": "f53018c0c8a312be86eb0df956e03d4c81706030",
        "author": "Hui Xiao",
        "date": "2023-08-18T17:47:22-07:00",
        "message": "Improve PrefetchTest.Basic with explicit flush and file num variable (#11720)\n\nSummary:\n**Context/Summary:** as title, should be harmless. And it's a guessed fix to https://github.com/facebook/rocksdb/issues/11717 while no repro has obtained on my end yet.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11720\n\nTest Plan: existing tests\n\nReviewed By: cbi42\n\nDifferential Revision: D48475661\n\nPulled By: hx235\n\nfbshipit-source-id: 7c7390319f094c540e703fe2e78a8d601b7a894b",
        "modified_files_count": 1,
        "modified_files": [
            "file/prefetch_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f53018c0c8a312be86eb0df956e03d4c81706030"
    },
    {
        "hash": "a67ef998dc231f60d12eb43eedb61bf9728b51b7",
        "author": "Han Zhu",
        "date": "2023-08-18T10:19:33-07:00",
        "message": "Explicitly instantiate MaybeReadBlockAndLoadToCache as well (#11714)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11714\n\nFixes T161017540.\n\nThe staging build starts failing with an undefined symbol error:\n```\nld.lld: error: undefined symbol: std::enable_if<rocksdb::ParsedFullFilterBlock::kCacheEntryRole == (rocksdb::CacheEntryRole)13 || true, rocksdb::Status>::type rocksdb::BlockBasedTable::MaybeReadBlockAndLoadToCache<rocksdb::ParsedFullFilterBlock>(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&, rocksdb::BlockHandle const&, rocksdb::UncompressionDict const&, bool, rocksdb::CachableEntry<rocksdb::ParsedFullFilterBlock>*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::BlockContents*, bool) const\n```\nThis is the `MaybeReadBlockAndLoadToCache` function where `TBlocklike = ParsedFullFilterBlock`. The trigger was an FDO profile update D48261413.\n\n`MaybeReadBlockAndLoadToCache` is used in the same translation unit `block_based_table_reader.cc`, and also in another file `partitioned_filter_block.cc`. The later was the file that couldn't find the symbol. It seems after the FDO profile update, `MaybeReadBlockAndLoadToCache` may've got inlined into its caller in `block_based_table_reader.cc`. And with no knowledge of other usages, the symbol got stripped.\n\nExplicitly instantiate the template similar to how `RetrieveBlock` was handled.\n\nReviewed By: pdillinger, akankshamahajan15\n\nDifferential Revision: D48400574\n\nfbshipit-source-id: d4a80999bfb6ce4afa80678444139fcd8ae84aa4",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a67ef998dc231f60d12eb43eedb61bf9728b51b7"
    },
    {
        "hash": "407efb021c82d60b8ead34e725f7dfa901bd2ee5",
        "author": "Yu Zhang",
        "date": "2023-08-15T13:44:13-07:00",
        "message": "Expose the root comparator for built-in With64Ts comparators (#11704)\n\nSummary:\nAs titled. User-defined timestamp feature users sometimes directly call the user comparator to do validation on their side too. Having access to the root comparator can help make their code consistent for when UDT is enabled and disabled.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11704\n\nReviewed By: ltamasi\n\nDifferential Revision: D48355090\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 26bc73543bfb379ef548d1361803d6f8c308cef6",
        "modified_files_count": 1,
        "modified_files": [
            "util/comparator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/407efb021c82d60b8ead34e725f7dfa901bd2ee5"
    },
    {
        "hash": "a09c141dde51372d14bcfd3affdd242f1248c761",
        "author": "Andrew Kryczka",
        "date": "2023-08-14T14:57:28-07:00",
        "message": "In TestIterateAgainstExpected(), verify iterator moves in expected direction (#11698)\n\nSummary:\nIt's a bit repetitive in order to give reasonably informative error messages.\n\nI also removed total_order_seek in cases where it's not needed, just to make sure a case that shouldn't matter really doesn't.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11698\n\nTest Plan:\nrun it -\n\n```\n$ DEBUG_LEVEL=0 TEST_TMPDIR=/dev/shm python3 tools/db_crashtest.py blackbox --max_key=100000 --duration=86400 --interval=10 --write_buffer_size=524288 --target_file_size_base=524288 --max_bytes_for_level_base=2097152 --compression_type=none --blob_compression_type=none --writepercent=50 -iterpercent=45 -readpercent=0 -prefixpercent=0 --prefix_size=0 --verify_iterator_with_expected_state_one_in=10 --test_batches_snapshots=0 -enable_compaction_filter=0\n```\n\nReviewed By: cbi42\n\nDifferential Revision: D48285036\n\nPulled By: ajkr\n\nfbshipit-source-id: 51b147bd7c8011740629ae2fd8114d3d48ce7137",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a09c141dde51372d14bcfd3affdd242f1248c761"
    },
    {
        "hash": "793a786fa3c16a2be782024446bd3f8bb5162875",
        "author": "Jay Huh",
        "date": "2023-08-11T19:59:56-07:00",
        "message": "Fix for unchecked status in CancelAllBackgroundWork (#11699)\n\nSummary:\n## Summary\nPR https://github.com/facebook/rocksdb/issues/11497 introduced this. Status from `CancelPeriodicTaskScheduler()` is unchecked and causing test failure like https://app.circleci.com/pipelines/github/facebook/rocksdb/30743/workflows/24443a9b-6fc3-41e6-86c1-992d766eb1ec/jobs/642419\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11699\n\nTest Plan: Existing tests\n\nReviewed By: cbi42\n\nDifferential Revision: D48287188\n\nPulled By: jaykorean\n\nfbshipit-source-id: b6bcf6e3c3c47f126c34c24a3dfed2649635cc8c",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/793a786fa3c16a2be782024446bd3f8bb5162875"
    },
    {
        "hash": "36f48d16a8a14fb3bb22c6d9ed5ba4ad1f01bc50",
        "author": "Yu Zhang",
        "date": "2023-08-10T15:37:28-07:00",
        "message": "Add consistent ways to access the builtin UDT comparators (#11690)\n\nSummary:\nExpose the functions that creates these UDT aware comparators so that users can create all the RocksDB builtin comparators in consistent ways.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11690\n\nReviewed By: ltamasi\n\nDifferential Revision: D48212021\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: a17a9a11e36e4267551e193f1b22647414acf467",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/comparator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/36f48d16a8a14fb3bb22c6d9ed5ba4ad1f01bc50"
    },
    {
        "hash": "a85eccc6d6837f5ffb69427eb4074e13fa0dde10",
        "author": "Peter Dillinger",
        "date": "2023-08-10T13:05:45-07:00",
        "message": "Adjust db_stress handling of TryAgain from optimistic txn (#11691)\n\nSummary:\nWe're still getting some rare cases of 5x TryAgains in a row. Here I'm boosting the failure threshold to 10 in a row and adding more info in the output, to help us manually verify whether there's anything suspicous about the sequence of TryAgains, such as if Rollback failed to reset to new sequence numbers.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11691\n\nTest Plan: By lowering the threshold to 2 and adjusting some other db_crashtest parameters, I was able to hit my new code and saw fresh sequence number on the subsequent TryAgain.\n\nReviewed By: cbi42\n\nDifferential Revision: D48236153\n\nPulled By: pdillinger\n\nfbshipit-source-id: c0530e969ddcf8de7348e5cf7daf5d6d5dec24f4",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a85eccc6d6837f5ffb69427eb4074e13fa0dde10"
    },
    {
        "hash": "6d1effaf01f4f82b54fcb9b6bfcfdffe31da30e4",
        "author": "tabokie",
        "date": "2023-08-07T12:35:42-07:00",
        "message": "exclude uninitialized files when estimating compression ratio (#11664)\n\nSummary:\nExclude files with uninitialized table properties when estimating compression ratio.\n\nCherry-picking downstream PR: https://github.com/tikv/rocksdb/pull/335\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11664\n\nReviewed By: cbi42\n\nDifferential Revision: D48002518\n\nPulled By: ajkr\n\nfbshipit-source-id: 931fac8a06b4ed7b7b605cf79903302f1b8babfd",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6d1effaf01f4f82b54fcb9b6bfcfdffe31da30e4"
    },
    {
        "hash": "d2b0652b32b8671c9ec4057e6da2fa564d1cc610",
        "author": "Xinye Tao",
        "date": "2023-08-07T12:29:31-07:00",
        "message": "compute compaction score once for a batch of range file deletes (#10744)\n\nSummary:\nOnly re-calculate compaction score once for a batch of deletions. Fix performance regression brought by https://github.com/facebook/rocksdb/pull/8434.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10744\n\nTest Plan:\nIn one of our production cluster that recently upgraded to RocksDB 6.29, it takes more than 10 minutes to delete files in 30,000 ranges. The RocksDB instance contains approximately 80,000 files. After this patch, the duration reduces to 100+ ms, which is on par with RocksDB 6.4.\n\nCherry-picking downstream PR: https://github.com/tikv/rocksdb/pull/316\n\nSigned-off-by: tabokie <xy.tao@outlook.com>\n\nReviewed By: cbi42\n\nDifferential Revision: D48002581\n\nPulled By: ajkr\n\nfbshipit-source-id: 7245607ee3ad79c53b648a6396c9159f166b9437",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d2b0652b32b8671c9ec4057e6da2fa564d1cc610"
    },
    {
        "hash": "4500a0d6ec836b68cb0b6c464b3239d67f7ff0b3",
        "author": "Andrew Kryczka",
        "date": "2023-08-06T18:01:08-07:00",
        "message": "Avoid an std::map copy in persistent stats (#11681)\n\nSummary:\nAn internal user reported this copy showing up in a CPU profile. We can use move instead.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11681\n\nDifferential Revision: D48103170\n\nPulled By: ajkr\n\nfbshipit-source-id: 083d6470181a0041bb5275b657aa61bee23a3729",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4500a0d6ec836b68cb0b6c464b3239d67f7ff0b3"
    },
    {
        "hash": "f9de217353f2d45f06fe5b9eab50b191f1a2d7a2",
        "author": "Peter Dillinger",
        "date": "2023-08-02T13:19:20-07:00",
        "message": "Some cache_bench enhancements (#11661)\n\nSummary:\n... used in validating some HyperClockCache development in progress.\n\n* Revamp the \"populate cache\" step to avoid redundant insertions (very rare in practice) and more consistently approach the desired resident_ratio while maintaining appropriate skew (still not perfect).\n* Track and print hit ratio on lookups, to ensure a fair comparison is happening between implementations etc.\n* Add an option to disable tracking and printing histograms (lots of output)\n* Add an option to specify a random seed (for more reproducibility)\n* Remove confusing/redundant \"-skewed\" option\n\nUses BitwiseAnd from https://github.com/facebook/rocksdb/issues/11660 (tested there)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11661\n\nTest Plan: manual\n\nReviewed By: akankshamahajan15, jowlyzhang\n\nDifferential Revision: D47937671\n\nPulled By: pdillinger\n\nfbshipit-source-id: 85a2bb881b1bca4f63e015bac684105fd91c9f35",
        "modified_files_count": 1,
        "modified_files": [
            "cache/cache_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f9de217353f2d45f06fe5b9eab50b191f1a2d7a2"
    },
    {
        "hash": "9a2a6db2a9c5e628b38a5c8cceb90e1e5dbc39a4",
        "author": "Jay Huh",
        "date": "2023-08-01T14:49:06-07:00",
        "message": "Use C++17 [[fallthrough]] in transaction_test.cc (#11663)\n\nSummary:\n(Copied from https://www.internalfb.com/diff/D46606060)\n\nThis diff makes its files safe for use with -Wimplicit-fallthrough. Now that we're using C+20 there's no reason not to use this C++17 feature to make our code safer.\nIt's currently possible to write code like this:\n```\nswitch(x){\n  case 1:\n    foo1();\n  case 2:\n    foo2();\n    break;\n  case 3:\n    foo3();\n}\n```\nBut that's scary because we don't know whether the fallthrough from case 1 was intentional or not.\nThe -Wimplicit-fallthrough flag will make this an error. The solution is to either  fix the bug by inserting break or indicating intention by using [[fallthrough]]; (from C++17).\n```\nswitch(x){\n  case 1:\n    foo1();\n    [[fallthrough]]; // Solution if we intended to fallthrough\n    break;           // Solution if we did not intend to fallthrough\n  case 2:\n    foo2();\n    break;\n  case 3:\n    foo3();\n}\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11663\n\nTest Plan: Existing tests\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D47961248\n\nPulled By: jaykorean\n\nfbshipit-source-id: 0d374c721bf1b328c14949dc5c17693da7311d03",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9a2a6db2a9c5e628b38a5c8cceb90e1e5dbc39a4"
    },
    {
        "hash": "9cc0986ae2e652c8d121fcebdd027ac281849e2a",
        "author": "ywave",
        "date": "2023-07-24T10:19:37-07:00",
        "message": "Fix comment in WriteBatchWithIndex::NewIteratorWithBase (#11636)\n\nSummary:\nRemove obsolete comment.\n\nSupport for WriteBatchWithIndex::NewIteratorWithBase when overwrite_key=false is added in https://github.com/facebook/rocksdb/pull/8135, as you can clearly see in the HISTORY.md.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11636\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D47722955\n\nPulled By: ajkr\n\nfbshipit-source-id: 4fa44a309d9708e9f4a1530918a9aaf7114c9032",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/write_batch_with_index.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9cc0986ae2e652c8d121fcebdd027ac281849e2a"
    },
    {
        "hash": "1567108fc10e50c68f6d9df1223c1c6e2d6aab2e",
        "author": "zhangyuxiang.ax",
        "date": "2023-07-21T17:55:25-07:00",
        "message": "Add missing table properties in plaintable GetTableProperties() (#11267)\n\nSummary:\nPlaintable will miss properties.\nIt should have some behavior like blockbasedtable.\nHere is a unit test for reproduce this bug.\n\n```\n#include <gflags/gflags.h>\n#include \"rocksdb/db.h\"\n#include \"rocksdb/options.h\"\n#include \"rocksdb/table.h\"\n#include \"rocksdb/slice_transform.h\"\n#include <iostream>\n#include <thread>\n#include <csignal>\nconst std::string kKey = \"key\";\n\nDEFINE_bool(use_plaintable, true, \"use plain table\");\nDEFINE_string(db_path, \"/dev/shm/test_zyx_path\", \"db_path\");\n\nrocksdb::DB* db = nullptr;\n\nclass NoopTransform : public rocksdb::SliceTransform {\npublic:\n    explicit NoopTransform() {\n    }\n\n    virtual const char* Name() const override {\n        return \"rocksdb.Noop\";\n    }\n\n    virtual rocksdb::Slice Transform(const rocksdb::Slice& src) const override {\n        return src;\n    }\n\n    virtual bool InDomain(const rocksdb::Slice& src) const override {\n        return true;\n    }\n\n    virtual bool InRange(const rocksdb::Slice& dst) const override {\n        return true;\n    }\n\n    virtual bool SameResultWhenAppended(const rocksdb::Slice& prefix) const override {\n        return false;\n    }\n};\n\nclass TestPropertiesCollector : public ::rocksdb::TablePropertiesCollector {\npublic:\n    explicit TestPropertiesCollector() {\n    }\n\nprivate:\n    ::rocksdb::Status AddUserKey(const ::rocksdb::Slice& key, const ::rocksdb::Slice& value, ::rocksdb::EntryType type,\n                                 ::rocksdb::SequenceNumber seq, uint64_t file_size) override {\n        count++;\n        return ::rocksdb::Status::OK();\n    }\n\n    ::rocksdb::Status Finish(::rocksdb::UserCollectedProperties* properties) override {\n        properties->insert({kKey, std::to_string(count)});\n        return ::rocksdb::Status::OK();\n    }\n\n    ::rocksdb::UserCollectedProperties GetReadableProperties() const override {\n        ::rocksdb::UserCollectedProperties properties;\n        properties.insert({kKey, std::to_string(count)});\n        return properties;\n    }\n\n    const char* Name() const override {\n        return \"TestPropertiesCollector\";\n    }\n    int count = 0;\n};\n\nclass TestTablePropertiesCollectorFactory : public ::rocksdb::TablePropertiesCollectorFactory {\npublic:\n    explicit TestTablePropertiesCollectorFactory() {\n    }\n\nprivate:\n    ::rocksdb::TablePropertiesCollector* CreateTablePropertiesCollector(\n            ::rocksdb::TablePropertiesCollectorFactory::Context context) override {\n        return new TestPropertiesCollector();\n    }\n\n    const char* Name() const override {\n        return \"test.TablePropertiesCollectorFactory\";\n    }\n};\n\nclass TestFlushListener : rocksdb::EventListener {\npublic:\n    const char* Name() const override {\n        return \"TestFlushListener\";\n    }\n    void OnFlushCompleted(rocksdb::DB* /*db*/, const rocksdb::FlushJobInfo& flush_job_info) override {\n        if (flush_job_info.table_properties.user_collected_properties.find(kKey) ==\n            flush_job_info.table_properties.user_collected_properties.end()) {\n            std::cerr << \"OnFlushCompleted: properties not found\" << std::endl;\n            return;\n        }\n        std::cerr << \"OnFlushCompleted: properties found \"\n                  << flush_job_info.table_properties.user_collected_properties.at(kKey) << std::endl;\n    }\n    explicit TestFlushListener() {\n    }\n};\n\nint main(int argc, char* argv[]) {\n    gflags::ParseCommandLineFlags(&argc, &argv, true);\n    rocksdb::DBOptions rocksdb_options;\n    std::shared_ptr<rocksdb::EventListener> flush_offset;\n    rocksdb_options.create_if_missing = true;\n    rocksdb_options.create_missing_column_families = true;\n    std::shared_ptr<::rocksdb::TablePropertiesCollectorFactory> properties_collector(\n            new TestTablePropertiesCollectorFactory());\n    rocksdb::ColumnFamilyOptions cfoptions;\n    cfoptions.table_properties_collector_factories.emplace_back(properties_collector);\n    std::shared_ptr<rocksdb::EventListener> test_cleaner;\n    test_cleaner.reset((rocksdb::EventListener*)new TestFlushListener());\n    rocksdb_options.listeners.emplace_back(test_cleaner);\n\n    std::vector<rocksdb::ColumnFamilyDescriptor> cf_desc_;\n    cf_desc_.emplace_back(rocksdb::kDefaultColumnFamilyName, cfoptions);\n    std::vector<rocksdb::ColumnFamilyHandle*> cfhs;\n    cfoptions.prefix_extractor.reset(new NoopTransform());\n    if (FLAGS_use_plaintable) {\n        cfoptions.table_factory.reset(rocksdb::NewPlainTableFactory());\n        std::cerr << \"use plaintable\" << std::endl;\n    } else {\n        cfoptions.table_factory.reset(rocksdb::NewBlockBasedTableFactory());\n        std::cerr << \"use blockbasedtable\" << std::endl;\n    }\n\n    auto s = rocksdb::DB::Open(rocksdb_options, FLAGS_db_path, cf_desc_, &cfhs, &db);\n    if (s.ok()) {\n        rocksdb::WriteOptions wops;\n        wops.disableWAL = true;\n        for (int i = 0; i < 1000000; i++) {\n            auto status = db->Put(wops, std::to_string(i), std::string(1024, '3'));\n            if (!status.ok()) {\n                std::cerr << \"write fail \" << status.getState() << std::endl;\n            }\n        }\n    } else {\n        std::cerr << \"open rocksdb failed\" << s.getState() << std::endl;\n    }\n    std::this_thread::sleep_for(std::chrono::seconds(1000));\n    delete db;\n}\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11267\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D47689943\n\nPulled By: hx235\n\nfbshipit-source-id: 585589cc48f8b26c7dd2323fc7ac4a0c3d4df6bb",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain/plain_table_builder.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1567108fc10e50c68f6d9df1223c1c6e2d6aab2e"
    },
    {
        "hash": "df543460d58510e1a77ea277003f6ac95cfbefbf",
        "author": "darionyaphet",
        "date": "2023-07-20T13:43:26-07:00",
        "message": "Remove some useless qualifier (#11596)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/11596\n\nReviewed By: ajkr\n\nDifferential Revision: D47635614\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 651a06049a54d15fd4b4f010bb4b82f53ff9c9d4",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/index_builder.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/df543460d58510e1a77ea277003f6ac95cfbefbf"
    },
    {
        "hash": "86634885ebb59bd7a7950db9a540d80a3ac4ad7e",
        "author": "ywave",
        "date": "2023-07-19T13:52:41-07:00",
        "message": "Fix typo in comment (#11617)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/11617\n\nTest Plan: make check\n\nReviewed By: ajkr\n\nDifferential Revision: D47599209\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 00e96266c75128875663083a2877d27fd7392eea",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/86634885ebb59bd7a7950db9a540d80a3ac4ad7e"
    },
    {
        "hash": "64b0439bc1a0ff9f1853a0676884b545feb70639",
        "author": "darionyaphet",
        "date": "2023-07-19T13:04:48-07:00",
        "message": "fix typo (#11595)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/11595\n\nReviewed By: ajkr\n\nDifferential Revision: D47600701\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 22375b51c726b176e4bc502b49cf3343f45f8a0a",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_factory.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/64b0439bc1a0ff9f1853a0676884b545feb70639"
    },
    {
        "hash": "2f712235ab48783af5d85e65e2fb43448d61859f",
        "author": "shuzz",
        "date": "2023-07-19T12:52:39-07:00",
        "message": "optimized code (#11614)\n\nSummary:\nimprovement code by std::move and c++17\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11614\n\nReviewed By: ajkr\n\nDifferential Revision: D47599519\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 6b897876f4e87e94a74c53d8db2a01303d500bff",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2f712235ab48783af5d85e65e2fb43448d61859f"
    },
    {
        "hash": "8a7b9888d46dfaf547f1bdc083a30f7ded334bf5",
        "author": "Dan Wang",
        "date": "2023-07-19T10:41:09-07:00",
        "message": "Fix the sync point SanitizeOptions::AfterChangeMaxOpenFiles which is not executed in db_compaction_test (#11583)\n\nSummary:\nIn [db_impl_open.cc](https://github.com/facebook/rocksdb/blob/main/db/db_impl/db_impl_open.cc), the sync point `SanitizeOptions::AfterChangeMaxOpenFiles` is used to set `max_open_files` with some specified \"**invalid**\" value even if it has been sanitized.\n\nHowever,  in [db_compaction_test.cc](https://github.com/facebook/rocksdb/blob/main/db/db_compaction_test.cc), `SanitizeOptions::AfterChangeMaxOpenFiles` would not be executed since `SyncPoint::EnableProcessing()` is run after `DBTestBase::Reopen()`.  To enable `SanitizeOptions::AfterChangeMaxOpenFiles`,  `SyncPoint::EnableProcessing()` should be put ahead of `DBTestBase::Reopen()`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11583\n\nTest Plan:\nrun unit tests locally as below:\n```\nmake J=1 check\n\n[ RUN      ] DBCompactionTest.LevelTtlCascadingCompactions\n[       OK ] DBCompactionTest.LevelTtlCascadingCompactions (85 ms)\n[ RUN      ] DBCompactionTest.LevelPeriodicCompaction\n[       OK ] DBCompactionTest.LevelPeriodicCompaction (57 ms)\n```\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D47311827\n\nPulled By: ajkr\n\nfbshipit-source-id: 99165e87a8129e404af06fdf9b4c96eca540fd23",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8a7b9888d46dfaf547f1bdc083a30f7ded334bf5"
    },
    {
        "hash": "ff0d618c7f55a610018d07ea8e090e8b285dea6c",
        "author": "Chad Austin",
        "date": "2023-07-18T15:38:52-07:00",
        "message": "add a missing include (#11624)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11624\n\n<queue> must be included to use std::queue.\n\nReviewed By: pdillinger\n\nDifferential Revision: D47562433\n\nfbshipit-source-id: 7c5b19fd9e411694c782dfc0dff0231d4f92ef24",
        "modified_files_count": 1,
        "modified_files": [
            "util/single_thread_executor.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ff0d618c7f55a610018d07ea8e090e8b285dea6c"
    },
    {
        "hash": "662a1c99f6457106d2ea1cd21a8a9d1370cb0722",
        "author": "Changyu Bi",
        "date": "2023-07-18T10:39:11-07:00",
        "message": "Verify number of keys flushed during DB open (#11611)\n\nSummary:\nExtend the coverage for option `flush_verify_memtable_count`. The verification code is similar to the ones for regular flush: https://github.com/facebook/rocksdb/blob/c3c84b3397a0eaa6450340ecea3b267c0e6c1f3c/db/flush_job.cc#L956-L965\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11611\n\nTest Plan: existing tests.\n\nReviewed By: ajkr\n\nDifferential Revision: D47478893\n\nPulled By: cbi42\n\nfbshipit-source-id: ca580c9dbcd6e91facf2e49210661336a79a248e",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_open.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/662a1c99f6457106d2ea1cd21a8a9d1370cb0722"
    },
    {
        "hash": "baf37a0e818dc334a0ed94f3d315155e2c138c93",
        "author": "Yu Zhang",
        "date": "2023-07-07T16:47:49-07:00",
        "message": "Fix a unit test hole for recovering UDTs with WAL files (#11577)\n\nSummary:\nThanks pdillinger for pointing out this test hole. The test `DBWALTestWithTimestamp.Recover` that is intended to test recovery from WAL including user-defined timestamps doesn't achieve its promised coverage. Specifically, after https://github.com/facebook/rocksdb/issues/11557, timestamps will be removed during flush, and RocksDB by default flush memtables during recovery with `avoid_flush_during_recovery` defaults to false.  This test didn't fail even if all the timestamps are quickly lost due to the default flush behavior.\n\nThis PR renamed test `Recover` to `RecoverAndNoFlush`, and updated it to verify timestamps are successfully recovered from WAL with some time-travel reads. `avoid_flush_during_recovery` is set to true to help do this verification.\n\nOn the other hand, for test `DBWALTestWithTimestamp.RecoverAndFlush`, since flush on reopen is DB's default behavior. Setting the flags `max_write_buffer` and `arena_block_size` are not really the factors that enforces the flush, so these flags are removed.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11577\n\nTest Plan: ./db_wal_test\n\nReviewed By: pdillinger\n\nDifferential Revision: D47142892\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 9465e278806faa5885b541b4e32d99e698edef7d",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_wal_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/baf37a0e818dc334a0ed94f3d315155e2c138c93"
    },
    {
        "hash": "25b08eb4386768b05a0748bfdb505ab58921281a",
        "author": "leipeng",
        "date": "2023-07-03T15:05:38-07:00",
        "message": "MemTable::Add: first_seqno_.compare_exchange_weak to earliest_seqno_ (#11398)\n\nSummary:\nThis should be a benign bug caused by a long lived typo, this PR fix this issue.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11398\n\nReviewed By: ajkr\n\nDifferential Revision: D47163379\n\nPulled By: cbi42\n\nfbshipit-source-id: 531728cae496fd7ac1371bbbd64fc103c3a90dcf",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/25b08eb4386768b05a0748bfdb505ab58921281a"
    },
    {
        "hash": "f4e304f987590ef89dcd31f4f7c36b71d496a1ef",
        "author": "darionyaphet",
        "date": "2023-07-03T09:41:48-07:00",
        "message": "Simplify conditional judgment (#11580)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/11580\n\nReviewed By: ajkr\n\nDifferential Revision: D47158687\n\nPulled By: cbi42\n\nfbshipit-source-id: 4841b77eee78ddcf35da6ea33da71861c5f1e773",
        "modified_files_count": 1,
        "modified_files": [
            "db/file_indexer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f4e304f987590ef89dcd31f4f7c36b71d496a1ef"
    },
    {
        "hash": "b14c0b0602341c15b161bd1163857b0724b7bf89",
        "author": "JUBIN CHHEDA",
        "date": "2023-06-27T10:42:42-07:00",
        "message": "Update secondary_cache_adapter.cc (#11566)\n\nSummary:\nInfer detected a(n) [Unnecessary Copy Intermediate](https://fbinfer.com/docs/next/all-issue-types#unnecessary copy intermediate) issue. variable &my_secondary_handles is copied unnecessarily into an intermediate on line 268. To avoid the copy, try moving it by calling std::move instead or alternatively change the callee's parameter type to const &.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11566\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D47057361\n\nPulled By: ajkr\n\nfbshipit-source-id: bc5d7a71638aecbf976f1a163128b489c9e87fd8",
        "modified_files_count": 1,
        "modified_files": [
            "cache/secondary_cache_adapter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b14c0b0602341c15b161bd1163857b0724b7bf89"
    },
    {
        "hash": "fb5748decfbe7d42f9a4dfd4925b5bc61bb2ea45",
        "author": "Yu Zhang",
        "date": "2023-06-22T12:36:22-07:00",
        "message": "Fix crash_test crash (#11554)\n\nSummary:\n`table_properties_` is not guaranteed to be available.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11554\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D46944170\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 609d598e75b417471c9cd964cc316453776a2135",
        "modified_files_count": 1,
        "modified_files": [
            "table/sst_file_dumper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fb5748decfbe7d42f9a4dfd4925b5bc61bb2ea45"
    },
    {
        "hash": "022d89549db57bdc6b99b5daed4a9b71a9cfba2f",
        "author": "Levi Tamasi",
        "date": "2023-06-19T16:04:49-07:00",
        "message": "Attempt to deflake DBWALTestWithEnrichedEnv.SkipDeletedWALs (#11537)\n\nSummary:\nCalling `Flush` (even with `wait==true`) does not guarantee that obsolete WAL files are physically deleted before the call returns. The patch attempts to fix the resulting flakiness by using `SyncPoint`s to make sure `PurgeObsoleteFiles` finishes before checking for WAL deletions.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11537\n\nTest Plan:\n```\ngtest-parallel --repeat=1000 ./db_wal_test --gtest_filter=\"*SkipDeletedWALs*\"\n```\n\nReviewed By: pdillinger\n\nDifferential Revision: D46736050\n\nPulled By: ltamasi\n\nfbshipit-source-id: 47a931b7a3a03ef681fbf4adb5a0b223d452703e",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_wal_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/022d89549db57bdc6b99b5daed4a9b71a9cfba2f"
    },
    {
        "hash": "b3edb87341fee82a2cd811953bb404765f8a77c8",
        "author": "Levi Tamasi",
        "date": "2023-06-19T15:41:30-07:00",
        "message": "Initialize StressTest::optimistic_txn_db_ in ctor (#11547)\n\nSummary:\n`StressTest::optimistic_txn_db_` is currently not initialized by the constructor, which\ncan lead to assertion failures down the line in `StressTest::Open`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11547\n\nReviewed By: cbi42\n\nDifferential Revision: D46845658\n\nPulled By: ltamasi\n\nfbshipit-source-id: 578b0f24fc00e3e97f24221fcdd003cc529439c2",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b3edb87341fee82a2cd811953bb404765f8a77c8"
    },
    {
        "hash": "66499780b21f6240d2a8c67f0dfb6af52131c174",
        "author": "Yu Zhang",
        "date": "2023-06-16T11:47:19-07:00",
        "message": "Fix error case memory bug in GetHostName() (#11544)\n\nSummary:\nFix the error handling in `GetHostName` for non EFAULT, non EINVAL error. Current handling will cause stack overflow when non null-terminated c style string is in `name`, e.g. ENAMETOOLONG, when the `name` buffer is not big enough and the host name is truncated.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11544\n\nTest Plan:\n```\nCOMPILE_WITH_ASAN=1 make all check\n```\n\nReviewed By: pdillinger\n\nDifferential Revision: D46775799\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: e0fc9400c50fe38bc1fd888b4fea5fe8706165bf",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/66499780b21f6240d2a8c67f0dfb6af52131c174"
    },
    {
        "hash": "253bc91953a0accb4f1a1643543b4676e59445d8",
        "author": "yaphet",
        "date": "2023-06-15T16:55:38-07:00",
        "message": "Move the status judgment into the block (#11534)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/11534\n\nReviewed By: cbi42\n\nDifferential Revision: D46732248\n\nPulled By: ajkr\n\nfbshipit-source-id: c9360866c35a2c436ab83b85a14ed7bd43a88d95",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_ingestion_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/253bc91953a0accb4f1a1643543b4676e59445d8"
    },
    {
        "hash": "9f774baaa8aa4010f77d601b291d08a37ef65d46",
        "author": "darionyaphet",
        "date": "2023-06-15T16:53:44-07:00",
        "message": "Support Error Recovery Retry Flush in GetFlushReasonString (#11536)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/11536\n\nReviewed By: cbi42\n\nDifferential Revision: D46732297\n\nPulled By: ajkr\n\nfbshipit-source-id: 82bb078f189da233addc4f483eaa6eaf7fdd3910",
        "modified_files_count": 1,
        "modified_files": [
            "db/flush_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9f774baaa8aa4010f77d601b291d08a37ef65d46"
    },
    {
        "hash": "6041e50eba2aff99208b53da6e8d0329d2076784",
        "author": "Hui Xiao",
        "date": "2023-06-13T14:14:51-07:00",
        "message": "Fix info_log comment in SSTFileManager (#11530)\n\nSummary:\n**Context/Summary:** as title\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11530\n\nTest Plan: no code change\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D46655670\n\nPulled By: hx235\n\nfbshipit-source-id: 3dfea5485a9a6a8ce0de1f6296c4cf31aedfa116",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/sst_file_manager.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6041e50eba2aff99208b53da6e8d0329d2076784"
    },
    {
        "hash": "05fcacdb425230f458a3b273de3abecc70dbdea0",
        "author": "Ignat Loskutov",
        "date": "2023-06-08T17:40:56-07:00",
        "message": "Add missing stopwatch and perf timer to DBImplReadOnly (#11521)\n\nSummary:\nThe `rocksdb.db.get.micros` histogram is never updated if the DB is open in ReadOnly mode, as well as the `get_cpu_nanos` perf counter. An earlier PR (https://github.com/facebook/rocksdb/issues/4260) for some reason has only added the TODO line, not the accounting itself, so this one is intended to fix it, adding two lines to match [DBImplSecondary](https://github.com/facebook/rocksdb/blob/4dafa5b220c439b7f05eb598a2ab32b3152bedb5/db/db_impl/db_impl_secondary.cc#L366-L367).\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11521\n\nReviewed By: cbi42\n\nDifferential Revision: D46577330\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: be147923e763af32bbc18fd6bdf3aff8ebf08aee",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_readonly.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/05fcacdb425230f458a3b273de3abecc70dbdea0"
    },
    {
        "hash": "2b2994c8db34db051e496413f4582855dbc3d200",
        "author": "Peter Dillinger",
        "date": "2023-06-07T13:21:31-07:00",
        "message": "Fix old comment about HyperClockCache and SecondaryCache (#11517)\n\nSummary:\nSupport was added in 8.1.0\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11517\n\nTest Plan: comments only\n\nReviewed By: anand1976\n\nDifferential Revision: D46489929\n\nPulled By: pdillinger\n\nfbshipit-source-id: 4fd30078389065c9ec225bf55b6773f1641f0646",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/cache.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2b2994c8db34db051e496413f4582855dbc3d200"
    },
    {
        "hash": "ddfcbea3e120f68d34ddb23cef77f514617912a4",
        "author": "leipeng",
        "date": "2023-06-06T11:19:15-07:00",
        "message": "IterKey: change space_[32] to 39 to utilize padding space (#10633)\n\nSummary:\nThis PR utilize padding space.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10633\n\nReviewed By: pdillinger\n\nDifferential Revision: D46410978\n\nPulled By: ajkr\n\nfbshipit-source-id: 23ec757b1eea9221c1390971e39d341c6b7f2003",
        "modified_files_count": 1,
        "modified_files": [
            "db/dbformat.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ddfcbea3e120f68d34ddb23cef77f514617912a4"
    },
    {
        "hash": "633c738a989dee67051faeaefb10c5ec185e2f22",
        "author": "Changyu Bi",
        "date": "2023-06-05T15:20:57-07:00",
        "message": "Fix unit test `DBRangeDelTest.NonBottommostCompactionDropRangetombstone` (#11512)\n\nSummary:\nFix the test added in https://github.com/facebook/rocksdb/issues/11459 that is failing.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11512\n\nTest Plan: `./db_range_del_test --gtest_filter=\"*NonBottommostCompactionDropRangetombstone\"`\n\nReviewed By: pdillinger\n\nDifferential Revision: D46451450\n\nPulled By: cbi42\n\nfbshipit-source-id: bcad20b8fd21c4f71924cec6cb045ee4b2038b90",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_range_del_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/633c738a989dee67051faeaefb10c5ec185e2f22"
    },
    {
        "hash": "687a2a0d9ad5b0a3588e331ecd15317f3384def0",
        "author": "Andrew Kryczka",
        "date": "2023-06-02T16:39:14-07:00",
        "message": "Small improvements to DBGet microbenchmark (#11498)\n\nSummary:\nFollow a couple best practices:\n\n- Allowed Google benchmark to decide number of iterations. Previously we hardcoded a value, which circumvented benchmark's heuristic for iterating until the result is stable.\n- Made each iteration do similar work. Previously, an iteration could do different work depending if the key was found in the first, second, third, or no L0 file.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11498\n\nTest Plan: none as I am unable to prove it is better\n\nReviewed By: hx235\n\nDifferential Revision: D46339050\n\nPulled By: ajkr\n\nfbshipit-source-id: fcfc6da4111c5b3ae86d79d908afc5f61f96675b",
        "modified_files_count": 1,
        "modified_files": [
            "microbench/db_basic_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/687a2a0d9ad5b0a3588e331ecd15317f3384def0"
    },
    {
        "hash": "71ca9a1dcde32ebf3a41dc019f6b08614bc13e9f",
        "author": "Changyu Bi",
        "date": "2023-06-01T15:36:19-07:00",
        "message": "Log correct compaction score for Universal Compaction (#11487)\n\nSummary:\ncurrently 0 is incorrectly logged as the compaction score for L0 when num_levels > 1. This PR fixes the issue to log the correct score.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11487\n\nTest Plan:\n```\n./db_bench --benchmarks=fillrandom --max_background_jobs=8 --num=1000000  --compaction_style=1 --stats_dump_period_sec=20 --num_levels=7 --write_buffer_size=1048576\n\ngrep \"L0   \" /tmp/rocksdbtest-543376/dbbench/LOG\n\nbefore:\n** Compaction Stats [default] **\nPriority    Files   Size     Score Read(GB)  Rn(GB) Rnp1(GB) Write(GB) Wnew(GB) Moved(GB) W-Amp Rd(MB/s) Wr(MB/s) Comp(sec) CompMergeCPU(sec) Comp(cnt) Avg(sec) KeyIn KeyDrop Rblob(GB) Wblob(GB)\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nL0      0/0    0.00 KB   0.0      0.0     0.0      0.0       0.0      0.0       0.0   1.0      0.0      9.9      0.42              0.33         9    0.046       0      0       0.0       0.0\nL0      3/1    1.37 MB   0.0      0.0     0.0      0.0       0.0      0.0       0.0   1.1      0.6      9.6      3.76              3.03        76    0.050     34K    140       0.0       0.0\nL0      2/0    2.26 MB   0.0      0.0     0.0      0.0       0.1      0.1       0.0   1.6      3.2      8.2     12.59             11.17       163    0.077    619K   5499       0.0       0.0\n\nafter: compaction scores are non-zero\nL0      0/0    0.00 KB   0.8      0.0     0.0      0.0       0.0      0.0       0.0   1.0      0.0      9.6      0.43              0.34         9    0.048       0      0       0.0       0.0\nL0      2/1   937.08 KB   1.0      0.0     0.0      0.0       0.0      0.0       0.0   1.1      0.6      9.3      3.85              3.07        75    0.051     34K    165       0.0       0.0\nL0      2/2    1.82 MB   1.0      0.0     0.0      0.0       0.1      0.1       0.0   1.6      3.0      8.0     12.45             10.99       160    0.078    577K   5399       0.0       0.0\n\n```\n\nReviewed By: ajkr\n\nDifferential Revision: D46293993\n\nPulled By: cbi42\n\nfbshipit-source-id: 19753f7df68c5f54a84c4ed52794f83e510c9721",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/71ca9a1dcde32ebf3a41dc019f6b08614bc13e9f"
    },
    {
        "hash": "68a9cd21f2f6af4c6ab8724a19fbd4ea8ae89bdd",
        "author": "darionyaphet",
        "date": "2023-05-31T14:24:54-07:00",
        "message": "Support single delete help message in ldb (#11493)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/11493\n\nReviewed By: jowlyzhang\n\nDifferential Revision: D46325687\n\nPulled By: ajkr\n\nfbshipit-source-id: ebf08477f5209104aee605496d751c857f4bb0a2",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/68a9cd21f2f6af4c6ab8724a19fbd4ea8ae89bdd"
    },
    {
        "hash": "e1c7209bebfde34a03b397cf6cb6e02aeb864118",
        "author": "Changyu Bi",
        "date": "2023-05-30T15:00:05-07:00",
        "message": "Fix flaky test: `DBCompactionTest.WaitForCompactShutdownWhileWaiting` (#11488)\n\nSummary:\ntsan complains with the following error message. This is likely due to DB object destroyed while WaitForCompact() is still running.\n```\n[ RUN      ] DBCompactionTest.WaitForCompactShutdownWhileWaiting\n==================\nWARNING: ThreadSanitizer: data race (pid=1128703)\n  Atomic read of size 1 at 0x7b8c00000740 by thread T4:\n    #0 pthread_cond_wait <null> (db_compaction_test+0x46970a)\n    https://github.com/facebook/rocksdb/issues/1 rocksdb::port::CondVar::Wait() /root/project/port/port_posix.cc:119:23 (librocksdb.so.8.4+0x7c4c60)\n    https://github.com/facebook/rocksdb/issues/2 rocksdb::InstrumentedCondVar::WaitInternal() /root/project/monitoring/instrumented_mutex.cc:69:9 (librocksdb.so.8.4+0x75f697)\n    https://github.com/facebook/rocksdb/issues/3 rocksdb::InstrumentedCondVar::Wait() /root/project/monitoring/instrumented_mutex.cc:62:3 (librocksdb.so.8.4+0x75f697)\n    https://github.com/facebook/rocksdb/issues/4 rocksdb::DBImpl::WaitForCompact(rocksdb::WaitForCompactOptions const&) /root/project/db/db_impl/db_impl_compaction_flush.cc:3978:14 (librocksdb.so.8.4+0x494174)\n    https://github.com/facebook/rocksdb/issues/5 rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_30::operator()() const /root/project/db/db_compaction_test.cc:3479:26 (db_compaction_test+0x5cdc90)\n    https://github.com/facebook/rocksdb/issues/6 void std::__invoke_impl<void, rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_30>(std::__invoke_other, rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_30&&) /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/invoke.h:61:14 (db_compaction_test+0x5cdc90)\n    https://github.com/facebook/rocksdb/issues/7 std::__invoke_result<rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_30>::type std::__invoke<rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_30>(rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_30&&) /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/invoke.h:96:14 (db_compaction_test+0x5cdc90)\n    https://github.com/facebook/rocksdb/issues/8 void std::thread::_Invoker<std::tuple<rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_30> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/std_thread.h:253:13 (db_compaction_test+0x5cdc90)\n    https://github.com/facebook/rocksdb/issues/9 std::thread::_Invoker<std::tuple<rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_30> >::operator()() /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/std_thread.h:260:11 (db_compaction_test+0x5cdc90)\n    https://github.com/facebook/rocksdb/issues/10 std::thread::_State_impl<std::thread::_Invoker<std::tuple<rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_30> > >::_M_run() /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/std_thread.h:211:13 (db_compaction_test+0x5cdc90)\n    https://github.com/facebook/rocksdb/issues/11 <null> <null> (libstdc++.so.6+0xda6b3)\n\n  Previous write of size 1 at 0x7b8c00000740 by thread T5:\n    #0 pthread_mutex_destroy <null> (db_compaction_test+0x46a4f8)\n    https://github.com/facebook/rocksdb/issues/1 rocksdb::port::Mutex::~Mutex() /root/project/port/port_posix.cc:77:48 (librocksdb.so.8.4+0x7c480e)\n    https://github.com/facebook/rocksdb/issues/2 rocksdb::InstrumentedMutex::~InstrumentedMutex() /root/project/./monitoring/instrumented_mutex.h:20:7 (librocksdb.so.8.4+0x41fda6)\n    https://github.com/facebook/rocksdb/issues/3 rocksdb::DBImpl::~DBImpl() /root/project/db/db_impl/db_impl.cc:755:1 (librocksdb.so.8.4+0x41fda6)\n    https://github.com/facebook/rocksdb/issues/4 rocksdb::DBImpl::~DBImpl() /root/project/db/db_impl/db_impl.cc:737:19 (librocksdb.so.8.4+0x4203d9)\n    https://github.com/facebook/rocksdb/issues/5 rocksdb::DBTestBase::Close() /root/project/db/db_test_util.cc:670:3 (librocksdb_test_debug.so+0x57413)\n    https://github.com/facebook/rocksdb/issues/6 rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_31::operator()() const /root/project/db/db_compaction_test.cc:3485:49 (db_compaction_test+0x5cdf03)\n    https://github.com/facebook/rocksdb/issues/7 void std::__invoke_impl<void, rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_31>(std::__invoke_other, rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_31&&) /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/invoke.h:61:14 (db_compaction_test+0x5cdf03)\n    https://github.com/facebook/rocksdb/issues/8 std::__invoke_result<rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_31>::type std::__invoke<rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_31>(rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_31&&) /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/invoke.h:96:14 (db_compaction_test+0x5cdf03)\n    https://github.com/facebook/rocksdb/issues/9 void std::thread::_Invoker<std::tuple<rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_31> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/std_thread.h:253:13 (db_compaction_test+0x5cdf03)\n    https://github.com/facebook/rocksdb/issues/10 std::thread::_Invoker<std::tuple<rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_31> >::operator()() /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/std_thread.h:260:11 (db_compaction_test+0x5cdf03)\n    https://github.com/facebook/rocksdb/issues/11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<rocksdb::DBCompactionTest_WaitForCompactShutdownWhileWaiting_Test::TestBody()::$_31> > >::_M_run() /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/std_thread.h:211:13 (db_compaction_test+0x5cdf03)\n    https://github.com/facebook/rocksdb/issues/12 <null> <null> (libstdc++.so.6+0xda6b3)\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11488\n\nTest Plan:\n```\nCOMPILE_WITH_TSAN=1 CC=clang-13 CXX=clang++-13 ROCKSDB_DISABLE_ALIGNED_NEW=1 USE_CLANG=1 make V=1 -j32 db_compaction_test\n\ngtest-parallel --repeat=10000 ./db_compaction_test --gtest_filter=\"*WaitForCompactShutdownWhileWaiting*\" -w200\n```\n\nReviewed By: jaykorean\n\nDifferential Revision: D46293891\n\nPulled By: cbi42\n\nfbshipit-source-id: 8ca259cb1e09a9e4f4095b2d084f2ba92b710b97",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e1c7209bebfde34a03b397cf6cb6e02aeb864118"
    },
    {
        "hash": "e8710303d9fbe5e659afece7717a46c1bb9926fd",
        "author": "Peter Dillinger",
        "date": "2023-05-24T16:49:17-07:00",
        "message": "Document SyncPoint::LoadDependency (#11477)\n\nSummary:\nIt's easy to mix up the ordering when it's undocumented. For an example of the meaning of the order, see DBTest.ThreadStatusFlush.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11477\n\nTest Plan: comments only\n\nReviewed By: jaykorean\n\nDifferential Revision: D46166683\n\nPulled By: pdillinger\n\nfbshipit-source-id: 33118ba7ef1b08eab7b077548fe2e70f2c309e3f",
        "modified_files_count": 1,
        "modified_files": [
            "test_util/sync_point.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e8710303d9fbe5e659afece7717a46c1bb9926fd"
    },
    {
        "hash": "28bf7ba77d7fe1c20370ec1282903dffe90ef3e1",
        "author": "rogertyang",
        "date": "2023-05-23T12:16:24-07:00",
        "message": "remove unnecessary code in super version getter (#11452)\n\nSummary:\nDo not bother comparing the version of the local super version handle with the global one.\n\nAn inequality comparison result indicates nothing but a spurious obsoleteness. It only happens when the writer has increased the `ColumnFamilyData::super_version_number_`(https://github.com/facebook/rocksdb/blob/5fc57eec2b44337289f25c1b5687beb54ad709a2/db/column_family.cc#L1309) but has not yet called `ResetThreadLocalSuperVersions()`(https://github.com/facebook/rocksdb/blob/5fc57eec2b44337289f25c1b5687beb54ad709a2/db/column_family.cc#L1328) at the time when a reader reads the local handle(`void* ptr = local_sv_->Swap(SuperVersion::kSVInUse);`). In other words, the existence of a local handle is a sufficent evidence of its fressness.\n\nWith this PR, we save one or even two atomic instructions when getting a handle of super version.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11452\n\nReviewed By: ajkr\n\nDifferential Revision: D46059317\n\nPulled By: cbi42\n\nfbshipit-source-id: 68b4b1ca8a9929a4aa470105c37a09e0625b014d",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/28bf7ba77d7fe1c20370ec1282903dffe90ef3e1"
    },
    {
        "hash": "68cc429be27a124a3704ae16bd53a773d47a161b",
        "author": "Yu Zhang",
        "date": "2023-05-22T15:47:28-07:00",
        "message": "Fix stress test failure caused by #11424 (#11470)\n\nSummary:\nThe `ryw_expected_values` check only applies to when transaction is used.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11470\n\nReviewed By: hx235\n\nDifferential Revision: D46085614\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 4757896c3a62975641adcf97db077a04a0f33030",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/68cc429be27a124a3704ae16bd53a773d47a161b"
    },
    {
        "hash": "fb636f24981e997a52bb106a30c3a9a07cbbc614",
        "author": "Andrew Kryczka",
        "date": "2023-05-15T11:47:17-07:00",
        "message": "Fix write stall stats dump format (#11445)\n\nSummary:\nI noticed in https://github.com/facebook/rocksdb/issues/11426 there is a missing line break. Before this PR the output looked like\n\n```\n$ ./db_bench -stats_per_interval=1 -stats_interval=100000\n...\nWrite Stall (count): cf-l0-file-count-limit-delays-with-ongoing-compaction: 0, cf-l0-file-count-limit-stops-with-ongoing-compaction: 0, l0-file-count-limit-delays: 0, l0-file-count-limit-stops: 0, memtable-limit-delays: 0, memtable-limit-stops: 0, pending-compaction-bytes-delays: 0, pending-compaction-bytes-stops: 0, total-delays: 0, total-stops: 0, Block cache LRUCache@0x7f8695831b50#2766536 capacity: 32.00 MB seed: 1155354975 usage: 0.09 KB table_size: 1024 occupancy: 1 collections: 1 last_copies: 0 last_secs: 9.3e-05 secs_since: 2\n...\nWrite Stall (count): write-buffer-manager-limit-stops: 0, num-running-compactions: 0\n...\n```\n\nAfter this PR it looks like\n\n```\n$ ./db_bench -stats_per_interval=1 -stats_interval=100000\n...\nWrite Stall (count): cf-l0-file-count-limit-delays-with-ongoing-compaction: 0, cf-l0-file-count-limit-stops-with-ongoing-compaction: 0, l0-file-count-limit-delays: 0, l0-file-count-limit-stops: 0, memtable-limit-delays: 0, memtable-limit-stops: 0, pending-compaction-bytes-delays: 0, pending-compaction-bytes-stops: 0, total-delays: 0, total-stops: 0\nBlock cache LRUCache@0x7f8e0d231b50#2736585 capacity: 32.00 MB seed: 920433955 usage: 0.09 KB table_size: 1024 occupancy: 1 collections: 1 last_copies: 1 last_secs: 6.5e-05 secs_since: 4\n...\nWrite Stall (count): write-buffer-manager-limit-stops: 0\nnum-running-compactions: 0\n...\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11445\n\nReviewed By: hx235\n\nDifferential Revision: D45844752\n\nPulled By: ajkr\n\nfbshipit-source-id: 1c708cb05b6e270922ac2fa95f5d011f273347eb",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fb636f24981e997a52bb106a30c3a9a07cbbc614"
    },
    {
        "hash": "6ba4717f3594756c8e8ff4e38adc0d5453c77581",
        "author": "akankshamahajan",
        "date": "2023-05-09T15:43:43-07:00",
        "message": "Fix build error: variable 'base_level' may be uninitialized (#11435)\n\nSummary:\nFix build error: variable 'base_level' may be uninitialized\n```\n db_impl_compaction_flush.cc:1195:21: error: variable 'base_level' may be uninitialized when used here [-Werror,-Wconditional-uninitialized]\n            level = base_level;\n```\n                    ^~~~~~~~~~\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11435\n\nTest Plan: CircleCI jobs\n\nReviewed By: cbi42\n\nDifferential Revision: D45708176\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 851b1205b22b63d728495e5735fa91b0ad8e012b",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6ba4717f3594756c8e8ff4e38adc0d5453c77581"
    },
    {
        "hash": "a475e9f746ade38fd6f4167af0719b8304731de2",
        "author": "leipeng",
        "date": "2023-05-03T08:52:03-07:00",
        "message": "DBIter::FindValueForCurrentKey: remove unused Status s (#11394)\n\nSummary:\nThis PR remove a historical useless code\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11394\n\nReviewed By: ajkr\n\nDifferential Revision: D45506226\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 32c98627100c9ad131bf65c4a1fe97ab61502daf",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a475e9f746ade38fd6f4167af0719b8304731de2"
    },
    {
        "hash": "e0e318f37072ba5f45a156eb45c0075e212b5b9f",
        "author": "Peter Dillinger",
        "date": "2023-05-01T14:12:40-07:00",
        "message": "Optionally support lldb for stack traces and debugger attach (#11413)\n\nSummary:\nlldb is more supported for Meta infrastructure than gdb, so adding support for it in generating stack traces and attaching debugger on crash. For now you need to set ROCKSDB_LLDB_STACK=1 for stack traces or ROCKSDB_DEBUG=lldb for interactive debugging.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11413\n\nTest Plan: some manual testing (no production code changes)\n\nReviewed By: ajkr\n\nDifferential Revision: D45360952\n\nPulled By: pdillinger\n\nfbshipit-source-id: 862bc8800eb03e3bdc1be8c0702960a19db45be8",
        "modified_files_count": 1,
        "modified_files": [
            "port/stack_trace.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e0e318f37072ba5f45a156eb45c0075e212b5b9f"
    },
    {
        "hash": "d3ed796855ef4615426cba9ba3188b7c43beb37b",
        "author": "Levi Tamasi",
        "date": "2023-04-28T14:07:45-07:00",
        "message": "Deflake some old BlobDB test cases (#11417)\n\nSummary:\nThe old `StackableDB` based BlobDB implementation relies on a DB listener to track the total size of the SST files in the database and to trigger FIFO eviction. Some test cases in `BlobDBTest` assume that the listener is notified by the time `DB::Flush` returns, which is not guaranteed (side note: `TEST_WaitForFlushMemTable` would not guarantee this either). The patch fixes these tests by using `SyncPoint`s to make sure the listener is actually called before verifying the FIFO behavior.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11417\n\nTest Plan:\n```\nmake -j56 COERCE_CONTEXT_SWITCH=1 blob_db_test\n./blob_db_test --gtest_filter=BlobDBTest.FIFOEviction_TriggerOnSSTSizeChange\n./blob_db_test --gtest_filter=BlobDBTest.FilterForFIFOEviction\n./blob_db_test --gtest_filter=BlobDBTest.FIFOEviction_NoEnoughBlobFilesToEvict\n```\n\nReviewed By: ajkr\n\nDifferential Revision: D45407135\n\nPulled By: ltamasi\n\nfbshipit-source-id: fcd63d76937d2c975f569a6635ce8730772a3d75",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d3ed796855ef4615426cba9ba3188b7c43beb37b"
    },
    {
        "hash": "40d69b59ad87730b13259209a59eb8aaa8d1b71a",
        "author": "leipeng",
        "date": "2023-04-25T10:46:29-07:00",
        "message": "DBImpl::MultiGet: delete unused var `superversions_to_delete` (#11395)\n\nSummary:\nIn db_impl.cc DBImpl::MultiGet: delete unused var `superversions_to_delete`\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11395\n\nReviewed By: ajkr\n\nDifferential Revision: D45240896\n\nPulled By: cbi42\n\nfbshipit-source-id: 0fff99b0d794b6f6d4aadee6036bddd6cb19eb31",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/40d69b59ad87730b13259209a59eb8aaa8d1b71a"
    },
    {
        "hash": "3622cfa34aca061eaf0595c5fa711f2b34fd3a07",
        "author": "Hui Xiao",
        "date": "2023-04-24T15:14:23-07:00",
        "message": "Add back io_uring stress test hack with DbStressFSWrapper for FS not supporting read async (#11404)\n\nSummary:\n**Context/Summary:**\nTo better utilize `DbStressFSWrapper` for some assertion, https://github.com/facebook/rocksdb/pull/11288 removed an io_uring stress test hack for POSIX FS not supporting read async added in https://github.com/facebook/rocksdb/pull/11242 = It was removed based on the assumption that a later PR https://github.com/facebook/rocksdb/pull/11296 is sufficient to serve as an alternative workaround.\n\nBut recent stress tests has shown the opposite, mostly because 11296  approach might be subjected to incompleteness when more `ReadOptions` are passed down as what https://github.com/facebook/rocksdb/pull/11288 has done.\n\nAs a short-term solution to both work around POSIX FS constraint above and utilize `DbStressFSWrapper` for 11288 assertion, I proposed this PR.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11404\n\nTest Plan:\n- Stress test ensures 11288's assertion is still effective in `DbStressFSWrapper`\n```\n./db_stress --acquire_snapshot_one_in=10000 --adaptive_readahead=0 --allow_data_in_errors=True --async_io=1 --avoid_flush_during_recovery=1 --avoid_unnecessary_blocking_io=0 --backup_max_size=104857600 --backup_one_in=100000 --batch_protection_bytes_per_key=8 --block_size=16384 --bloom_bits=16 --bottommost_compression_type=disable --bytes_per_sync=0 --cache_index_and_filter_blocks=0 --cache_size=8388608 --cache_type=hyper_clock_cache --charge_compression_dictionary_building_buffer=0 --charge_file_metadata=1 --charge_filter_construction=1 --charge_table_reader=0 --checkpoint_one_in=1000000 --checksum_type=kxxHash64 --clear_column_family_one_in=0 --compact_files_one_in=1000000 --compact_range_one_in=1000000 --compaction_pri=1 --compaction_ttl=0 --compression_max_dict_buffer_bytes=32767 --compression_max_dict_bytes=16384 --compression_parallel_threads=1 --compression_type=lz4 --compression_use_zstd_dict_trainer=1 --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --data_block_index_type=0 --db=$db --db_write_buffer_size=0 --delpercent=4 --delrangepercent=1 --destroy_db_initially=0 --detect_filter_construct_corruption=1 --disable_wal=0 --enable_compaction_filter=0 --enable_pipelined_write=1 --enable_thread_tracking=0 --expected_values_dir=$exp --fail_if_options_file_error=1 --fifo_allow_compaction=0 --file_checksum_impl=crc32c --flush_one_in=1000000 --format_version=4 --get_current_wal_file_one_in=0 --get_live_files_one_in=1000000 --get_property_one_in=1000000 --get_sorted_wal_files_one_in=0 --index_block_restart_interval=4 --index_type=0 --ingest_external_file_one_in=0 --initial_auto_readahead_size=16384 --iterpercent=10 --key_len_percent_dist=1,30,69 --kill_random_test=888887 --level_compaction_dynamic_level_bytes=0 --lock_wal_one_in=1000000 --log2_keys_per_lock=10 --long_running_snapshots=0 --manual_wal_flush_one_in=1000 --mark_for_compaction_one_file_in=10 --max_auto_readahead_size=16384 --max_background_compactions=20 --max_bytes_for_level_base=10485760 --max_key=25000000 --max_key_len=3 --max_manifest_file_size=1073741824 --max_write_batch_group_size_bytes=1048576 --max_write_buffer_number=3 --max_write_buffer_size_to_maintain=8388608 --memtable_prefix_bloom_size_ratio=0.1 --memtable_protection_bytes_per_key=4 --memtable_whole_key_filtering=0 --memtablerep=skip_list --min_write_buffer_number_to_merge=2 --mmap_read=0 --mock_direct_io=True --nooverwritepercent=1 --num_file_reads_for_auto_readahead=0 --open_files=100 --open_metadata_write_fault_one_in=0 --open_read_fault_one_in=0 --open_write_fault_one_in=0 --ops_per_thread=20000000 --optimize_filters_for_memory=0 --paranoid_file_checks=0 --partition_filters=0 --partition_pinning=0 --pause_background_one_in=1000000 --periodic_compaction_seconds=0 --prefix_size=1 --prefixpercent=5 --prepopulate_block_cache=1 --preserve_internal_time_seconds=36000 --progress_reports=0 --read_fault_one_in=32 --readahead_size=16384 --readpercent=45 --recycle_log_file_num=0 --reopen=20 --ribbon_starting_level=1 --secondary_cache_fault_one_in=32 --secondary_cache_uri=compressed_secondary_cache://capacity=8388608 --snapshot_hold_ops=100000 --sst_file_manager_bytes_per_sec=0 --sst_file_manager_bytes_per_truncate=0 --stats_dump_period_sec=10 --subcompactions=1 --sync=0 --sync_fault_injection=1 --target_file_size_base=2097152 --target_file_size_multiplier=2 --test_batches_snapshots=0 --top_level_index_pinning=2 --unpartitioned_pinning=3 --use_direct_io_for_flush_and_compaction=0 --use_direct_reads=1 --use_full_merge_v1=0 --use_get_entity=0 --use_merge=1 --use_multi_get_entity=0 --use_multiget=1 --use_put_entity_one_in=0 --user_timestamp_size=0 --value_size_mult=32 --verify_checksum=1 --verify_checksum_one_in=1000000 --verify_db_one_in=100000 --verify_sst_unique_id_in_manifest=1 --wal_bytes_per_sync=524288 --wal_compression=none --write_buffer_size=4194304 --write_dbid_to_manifest=1 --writepercent=35\n```\n- Monitor future stress test to show `MultiGet error: Not implemented: ReadAsync` is gone\n\nReviewed By: ltamasi\n\nDifferential Revision: D45242280\n\nPulled By: hx235\n\nfbshipit-source-id: 9823e3fbd4e9672efdd31478a2f2cbd68a98bdf5",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3622cfa34aca061eaf0595c5fa711f2b34fd3a07"
    },
    {
        "hash": "a2c1f5735857f5a621982f316c57859f292969ea",
        "author": "Peter Dillinger",
        "date": "2023-04-24T09:33:33-07:00",
        "message": "Fix compression tests^2 (#11403)\n\nSummary:\nThis time a particular version of bzip2 is under-compressing vs. expectation in BlockBasedTableTest.CompressionRatioThreshold. We'll exempt that algorithm like I did for DBStatisticsTest.CompressionStatsTest.\n\nhttps://app.circleci.com/pipelines/github/facebook/rocksdb/26869/workflows/a46246db-73c7-4946-af82-10a78a7df6af/jobs/596124\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11403\n\nTest Plan: CI\n\nReviewed By: ltamasi\n\nDifferential Revision: D45233441\n\nPulled By: pdillinger\n\nfbshipit-source-id: 506c8dfe5e0397c78193359df6288397bf0667c9",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a2c1f5735857f5a621982f316c57859f292969ea"
    },
    {
        "hash": "6cac4c79d457f199271e05caca07539fc588e7d0",
        "author": "Andrew Kryczka",
        "date": "2023-04-20T12:48:53-07:00",
        "message": "Fix race condition in db_stress checkpoint cleanup (#11389)\n\nSummary:\nThe old cleanup code had a race condition:\n\n1. Test thread: DestroyDB() marked a file as trash\n2. DeleteScheduler thread: Got the file's size and decided to delete it in chunks\n3. Test thread: DestroyDir() deleted that trash file\n4. DeleteScheduler thread: Began deleting in chunks starting by calling ReopenWritableFile(). Unfortunately this recreates the deleted trash file\n5. Test thread: DestroyDir() fails to remove the parent directory because it contains the file created in 4.\n6. Test thread: Checkpoint::Create() fails due to the directory already existing\n\nIt could be repro'd with the following patch/command.\n\nPatch:\n\n```\n diff --git a/file/delete_scheduler.cc b/file/delete_scheduler.cc\nindex 8a2d1615d..337d24a60 100644\n --- a/file/delete_scheduler.cc\n+++ b/file/delete_scheduler.cc\n@@ -317,6 +317,12 @@ Status DeleteScheduler::DeleteTrashFile(const std::string& path_in_trash,\n                                            &num_hard_links, nullptr);\n       if (my_status.ok()) {\n         if (num_hard_links == 1) {\n+          // Give some time for DestroyDir() to delete file entries. Then, the\n+          // below `ReopenWritableFile()` will recreate files, preventing the\n+          // parent directory from being deleted.\n+          if (rand() % 2 == 0) {\n+            usleep(1000);\n+          }\n           std::unique_ptr<FSWritableFile> wf;\n           my_status = fs_->ReopenWritableFile(path_in_trash, FileOptions(), &wf,\n                                               nullptr);\n diff --git a/file/file_util.cc b/file/file_util.cc\nindex 43608fcdc..2cee1ad8e 100644\n --- a/file/file_util.cc\n+++ b/file/file_util.cc\n@@ -263,6 +263,13 @@ Status DestroyDir(Env* env, const std::string& dir) {\n     }\n   }\n\n+  // Give some time for the DeleteScheduler thread's ReopenWritableFile() to\n+  // recreate deleted files\n+  if (dir.find(\"checkpoint\") != std::string::npos) {\n+    fprintf(stderr, \"waiting to destroy %s\\n\", dir.c_str());\n+    usleep(10000);\n+  }\n+\n   if (s.ok()) {\n     s = env->DeleteDir(dir);\n     // DeleteDir might or might not report NotFound\n```\n\nCommand:\n\n```\nTEST_TMPDIR=/dev/shm python3 tools/db_crashtest.py blackbox --simple --write_buffer_size=131072 --target_file_size_base=131072 --max_bytes_for_level_base=524288 --checkpoint_one_in=100 --clear_column_family_one_in=0  --max_key=1000 --value_size_mult=33 --sst_file_manager_bytes_per_truncate=4096 --sst_file_manager_bytes_per_sec=1048576  --interval=3 --compression_type=none --sync_fault_injection=1\n```\n\nObviously we don't want to use scheduled deletion here as we need the checkpoint directory deleted immediately. I suspect the DestroyDir() was an attempt to fixup incomplete DestroyDB()s. Now that we expect DestroyDB() to be complete I removed that code.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11389\n\nReviewed By: hx235\n\nDifferential Revision: D45137142\n\nPulled By: ajkr\n\nfbshipit-source-id: 2af743d342c77cc414fd25fc4c9d7c9c6079ad24",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6cac4c79d457f199271e05caca07539fc588e7d0"
    },
    {
        "hash": "9b698cda512ed0aed702ffeed941d621bd142f9e",
        "author": "Peter Dillinger",
        "date": "2023-04-17T14:17:18-07:00",
        "message": "Update GeneralTableTest::ApproximateOffsetOfCompressed values (#11384)\n\nSummary:\nBecause of this failure with snappy 1.1.8, ROCKSDB_NO_FBCODE=1\n\n```\nValue 3531 is not in range [2000, 3525]\ntable/table_test.cc:4231: Failure\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11384\n\nTest Plan: run updated test in failing configuration\n\nReviewed By: ajkr\n\nDifferential Revision: D45057161\n\nPulled By: pdillinger\n\nfbshipit-source-id: 397054f08033315e2e2bd9410f1fa32ddbf3b9c8",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9b698cda512ed0aed702ffeed941d621bd142f9e"
    },
    {
        "hash": "f3818948e8166a0ff123f7a44eb537abcd998c81",
        "author": "Andrew Kryczka",
        "date": "2023-04-17T11:00:08-07:00",
        "message": "Deflake DBWriteTest.LockWALInEffect (#11382)\n\nSummary:\nThis test exhibited the following flaky failure:\n\n```\ndb/db_write_test.cc:653: Failure\ndb_->Resume()\nCorruption: Not active\n```\n\nI was able to repro it by applying the following patch to coerce a specific race condition:\n\n```\n diff --git a/db/db_write_test.cc b/db/db_write_test.cc\nindex d82c57376..775ba3cde 100644\n --- a/db/db_write_test.cc\n+++ b/db/db_write_test.cc\n@@ -636,6 +636,10 @@ TEST_P(DBWriteTest, LockWALInEffect) {\n   ASSERT_TRUE(dbfull()->WALBufferIsEmpty());\n   ASSERT_OK(db_->UnlockWAL());\n\n+  // Test thread: sleep interval: [0, 3)\n+  // In this interval, the file system is active\n+  sleep(3);\n+\n   // Fail the WAL flush if applicable\n   fault_fs->SetFilesystemActive(false);\n   Status s = Put(\"key2\", \"value\");\n@@ -649,6 +653,11 @@ TEST_P(DBWriteTest, LockWALInEffect) {\n     ASSERT_OK(db_->LockWAL());\n     ASSERT_OK(db_->UnlockWAL());\n   }\n+\n+  // Test thread: sleep interval: [3, 6)\n+  // In this interval, the file system is inactive\n+  sleep(3);\n+\n   fault_fs->SetFilesystemActive(true);\n   ASSERT_OK(db_->Resume());\n   // Writes should work again\n diff --git a/db/flush_job.cc b/db/flush_job.cc\nindex 8193f594f..602ee2c9f 100644\n --- a/db/flush_job.cc\n+++ b/db/flush_job.cc\n@@ -979,6 +979,10 @@ Status FlushJob::WriteLevel0Table() {\n           DirFsyncOptions(DirFsyncOptions::FsyncReason::kNewFileSynced));\n     }\n     TEST_SYNC_POINT_CALLBACK(\"FlushJob::WriteLevel0Table\", &mems_);\n+    // Flush thread: sleep interval: [0, 4)\n+    // Upon awakening, the file system will be inactive. Then the MANIFEST\n+    // update will fail.\n+    sleep(4);\n     db_mutex_->Lock();\n   }\n   base_->Unref();\n```\n\nThe fix for this scenario is explained in the code change.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11382\n\nReviewed By: cbi42\n\nDifferential Revision: D45027632\n\nPulled By: ajkr\n\nfbshipit-source-id: 6bfa35a5781c0c080fb74e13f2b2c9f871f7effb",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_write_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f3818948e8166a0ff123f7a44eb537abcd998c81"
    },
    {
        "hash": "b8555ba470ba0592c66a3caafd4d8ea74387d565",
        "author": "Andrew Kryczka",
        "date": "2023-04-17T10:36:22-07:00",
        "message": "Deflake DBBloomFilterTest.OptimizeFiltersForHits (#11383)\n\nSummary:\nIn CircleCI build-linux-arm-test-full job (https://app.circleci.com/pipelines/github/facebook/rocksdb/26462/workflows/a9d39d2c-c970-4b0f-9c10-7743beb9771b/jobs/591722), this test exhibited the following flaky failure:\n\n```\ndb/db_bloom_filter_test.cc:2506: Failure\nExpected: (TestGetTickerCount(options, BLOOM_FILTER_USEFUL)) > (65000 * 2), actual: 120558 vs 130000\n```\n\nI ssh'd to an instance and observed it cuts memtables at slightly different points across runs. Logging in `ConcurrentArena` pointed to `try_lock()` returning false at different points across runs.\n\nThis PR changes the approach to allow a fixed number of keys per memtable flush. I verified the bloom filter useful count is deterministic now even on the CircleCI ARM instance.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11383\n\nReviewed By: cbi42\n\nDifferential Revision: D45036829\n\nPulled By: ajkr\n\nfbshipit-source-id: b602dacb63955f1af09bf0ed409cde0552805a08",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bloom_filter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b8555ba470ba0592c66a3caafd4d8ea74387d565"
    },
    {
        "hash": "760b773f58277f9ce449389c0773a1eee2d14363",
        "author": "Andrew Kryczka",
        "date": "2023-04-10T13:59:44-07:00",
        "message": "fix optimization-disabled test builds with platform010 (#11361)\n\nSummary:\nFixed the following failure:\n\n```\nthird-party/gtest-1.8.1/fused-src/gtest/gtest-all.cc: In function ‘bool testing::internal::StackGrowsDown()’:\nthird-party/gtest-1.8.1/fused-src/gtest/gtest-all.cc:8681:24: error: ‘dummy’ may be used uninitialized [-Werror=maybe-uninitialized]\n 8681 |   StackLowerThanAddress(&dummy, &result);\n      |   ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\nthird-party/gtest-1.8.1/fused-src/gtest/gtest-all.cc:8671:13: note: by argument 1 of type ‘const void*’ to ‘void testing::internal::StackLowerThanAddress(const void*, bool*)’ declared here\n 8671 | static void StackLowerThanAddress(const void* ptr, bool* result) {\n      |             ^~~~~~~~~~~~~~~~~~~~~\nthird-party/gtest-1.8.1/fused-src/gtest/gtest-all.cc:8679:7: note: ‘dummy’ declared here\n 8679 |   int dummy;\n      |       ^~~~~\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11361\n\nReviewed By: cbi42\n\nDifferential Revision: D44838033\n\nPulled By: ajkr\n\nfbshipit-source-id: 27d68b5a24a15723bbaaa7de45ccd70a60fe259e",
        "modified_files_count": 1,
        "modified_files": [
            "third-party/gtest-1.8.1/fused-src/gtest/gtest-all.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/760b773f58277f9ce449389c0773a1eee2d14363"
    },
    {
        "hash": "c8552d8c636c4fb5f8094df7b9065ae6e99fbb10",
        "author": "Zdenek Korcak",
        "date": "2023-04-07T18:28:19-07:00",
        "message": "fix bad implementation of ShardedCache::GetOccupancyCount (#11325)\n\nSummary:\ncopy paste typo\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11325\n\nReviewed By: hx235\n\nDifferential Revision: D44378512\n\nPulled By: ajkr\n\nfbshipit-source-id: 509ed2697c06eed975914359ece0459a0ea40312",
        "modified_files_count": 1,
        "modified_files": [
            "cache/sharded_cache.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c8552d8c636c4fb5f8094df7b9065ae6e99fbb10"
    },
    {
        "hash": "64cead919fb3ef4a8d31c74b97c267dd02379f38",
        "author": "Changyu Bi",
        "date": "2023-04-07T15:17:18-07:00",
        "message": "Initialize `lowest_unnecessary_level_` in `VersionStorageInfo` constructor (#11359)\n\nSummary:\nvalgrind complains \"Conditional jump or move depends on uninitialised value(s)\". A sample error message:\n\n```\n[ RUN      ] DBCompactionTest.DrainUnnecessaryLevelsAfterDBBecomesSmall\n==3353864== Conditional jump or move depends on uninitialised value(s)\n==3353864==    at 0x8647B4: rocksdb::VersionStorageInfo::ComputeCompactionScore(rocksdb::ImmutableOptions const&, rocksdb::MutableCFOptions const&) (version_set.cc:3414)\n==3353864==    by 0x86B340: rocksdb::VersionSet::AppendVersion(rocksdb::ColumnFamilyData*, rocksdb::Version*) (version_set.cc:4946)\n==3353864==    by 0x876B88: rocksdb::VersionSet::CreateColumnFamily(rocksdb::ColumnFamilyOptions const&, rocksdb::VersionEdit const*) (version_set.cc:6876)\n==3353864==    by 0xBA66FE: rocksdb::VersionEditHandler::CreateCfAndInit(rocksdb::ColumnFamilyOptions const&, rocksdb::VersionEdit const&) (version_edit_handler.cc:483)\n==3353864==    by 0xBA4A81: rocksdb::VersionEditHandler::Initialize() (version_edit_handler.cc:187)\n==3353864==    by 0xBA3927: rocksdb::VersionEditHandlerBase::Iterate(rocksdb::log::Reader&, rocksdb::Status*) (version_edit_handler.cc:31)\n==3353864==    by 0x870173: rocksdb::VersionSet::Recover(std::vector<rocksdb::ColumnFamilyDescriptor, std::allocator<rocksdb::ColumnFamilyDescriptor> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, bool) (version_set.cc:5729)\n==3353864==    by 0x7538FA: rocksdb::DBImpl::Recover(std::vector<rocksdb::ColumnFamilyDescriptor, std::allocator<rocksdb::ColumnFamilyDescriptor> > const&, bool, bool, bool, unsigned long*, rocksdb::DBImpl::RecoveryContext*) (db_impl_open.cc:522)\n==3353864==    by 0x75BA0F: rocksdb::DBImpl::Open(rocksdb::DBOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<rocksdb::ColumnFamilyDescriptor, std::allocator<rocksdb::ColumnFamilyDescriptor> > const&, std::vector<rocksdb::ColumnFamilyHandle*, std::allocator<rocksdb::ColumnFamilyHandle*> >*, rocksdb::DB**, bool, bool) (db_impl_open.cc:1928)\n==3353864==    by 0x75A735: rocksdb::DB::Open(rocksdb::DBOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<rocksdb::ColumnFamilyDescriptor, std::allocator<rocksdb::ColumnFamilyDescriptor> > const&, std::vector<rocksdb::ColumnFamilyHandle*, std::allocator<rocksdb::ColumnFamilyHandle*> >*, rocksdb::DB**) (db_impl_open.cc:1743)\n==3353864==    by 0x75A510: rocksdb::DB::Open(rocksdb::Options const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rocksdb::DB**) (db_impl_open.cc:1720)\n==3353864==    by 0x5925FD: rocksdb::DBTestBase::TryReopen(rocksdb::Options const&) (db_test_util.cc:710)\n==3353864==  Uninitialised value was created by a heap allocation\n==3353864==    at 0x4842F0F: operator new(unsigned long) (vg_replace_malloc.c:422)\n==3353864==    by 0x876AF4: rocksdb::VersionSet::CreateColumnFamily(rocksdb::ColumnFamilyOptions const&, rocksdb::VersionEdit const*) (version_set.cc:6870)\n==3353864==    by 0xBA66FE: rocksdb::VersionEditHandler::CreateCfAndInit(rocksdb::ColumnFamilyOptions const&, rocksdb::VersionEdit const&) (version_edit_handler.cc:483)\n==3353864==    by 0xBA4A81: rocksdb::VersionEditHandler::Initialize() (version_edit_handler.cc:187)\n==3353864==    by 0xBA3927: rocksdb::VersionEditHandlerBase::Iterate(rocksdb::log::Reader&, rocksdb::Status*) (version_edit_handler.cc:31)\n==3353864==    by 0x870173: rocksdb::VersionSet::Recover(std::vector<rocksdb::ColumnFamilyDescriptor, std::allocator<rocksdb::ColumnFamilyDescriptor> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, bool) (version_set.cc:5729)\n==3353864==    by 0x7538FA: rocksdb::DBImpl::Recover(std::vector<rocksdb::ColumnFamilyDescriptor, std::allocator<rocksdb::ColumnFamilyDescriptor> > const&, bool, bool, bool, unsigned long*, rocksdb::DBImpl::RecoveryContext*) (db_impl_open.cc:522)\n==3353864==    by 0x75BA0F: rocksdb::DBImpl::Open(rocksdb::DBOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<rocksdb::ColumnFamilyDescriptor, std::allocator<rocksdb::ColumnFamilyDescriptor> > const&, std::vector<rocksdb::ColumnFamilyHandle*, std::allocator<rocksdb::ColumnFamilyHandle*> >*, rocksdb::DB**, bool, bool) (db_impl_open.cc:1928)\n==3353864==    by 0x75A735: rocksdb::DB::Open(rocksdb::DBOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<rocksdb::ColumnFamilyDescriptor, std::allocator<rocksdb::ColumnFamilyDescriptor> > const&, std::vector<rocksdb::ColumnFamilyHandle*, std::allocator<rocksdb::ColumnFamilyHandle*> >*, rocksdb::DB**) (db_impl_open.cc:1743)\n==3353864==    by 0x75A510: rocksdb::DB::Open(rocksdb::Options const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rocksdb::DB**) (db_impl_open.cc:1720)\n==3353864==    by 0x5925FD: rocksdb::DBTestBase::TryReopen(rocksdb::Options const&) (db_test_util.cc:710)\n==3353864==    by 0x591F73: rocksdb::DBTestBase::Reopen(rocksdb::Options const&) (db_test_util.cc:662)\n```\n\nThis is likely about `lowest_unnecessary_level_` even though it would be initialized in `CalculateBaseBytes()` before being used in `ComputeCompactionScore()`. Initialize it also in VersionStorageInfo constructor to prevent valgrind from  complaining.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11359\n\nTest Plan: - ran a test with valgrind which gave the error message above before this PR: `valgrind --track-origins=yes ./db_compaction_test  --gtest_filter=\"*DrainUnnecessaryLevelsAfterDBBecomesSmall*\"`\n\nReviewed By: hx235\n\nDifferential Revision: D44799112\n\nPulled By: cbi42\n\nfbshipit-source-id: 557208a66f04a2163b418b2a651bdb7e777c4511",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/64cead919fb3ef4a8d31c74b97c267dd02379f38"
    },
    {
        "hash": "b4d78189b348144723264025ad549800a340e2ae",
        "author": "Peter Dillinger",
        "date": "2023-04-03T10:41:00-07:00",
        "message": "Fix gflags_compat.h (#11346)\n\nSummary:\nWas getting compilation failure with old verison of gflags, examples in https://github.com/facebook/rocksdb/issues/11344.  Perhaps this is new since enabling C++17. Getting rid of std::reference_wrapper from https://github.com/facebook/rocksdb/issues/10729 seems to fix it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11346\n\nTest Plan: manual, CI\n\nReviewed By: guowentian\n\nDifferential Revision: D44632776\n\nPulled By: pdillinger\n\nfbshipit-source-id: 5c1f3f79a055698574538b6342c912a627b6d061",
        "modified_files_count": 1,
        "modified_files": [
            "util/gflags_compat.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b4d78189b348144723264025ad549800a340e2ae"
    },
    {
        "hash": "8f6c2a2cc0b27437b64bcd5664be812d178bec6b",
        "author": "Tobias Ruck",
        "date": "2023-03-22T12:22:54-07:00",
        "message": "Remove unused `#include <stdarg.h>` in include/rocksdb/c.h (#11302)\n\nSummary:\nThis include is unused in the header. In one build environment of ours, stdarg.h is actually not present, and this include prevents us from building rocksdb dependencies.\n\nWe're currently monkey-patching this line out in our build script (still WIP), which of course is not good. https://github.com/raipay/rust-rocksdb/commit/ec2852caa3074a3309881acf26284a60672e0b1b\n\nNote that removing this include might break builds in unexpected ways that include rocksdb/c.h and then use `va_start`, `va_end`, etc. However, if you're using these functions, you really should include stdarg.h yourself, so I don't think this should prevent this PR.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11302\n\nReviewed By: ajkr\n\nDifferential Revision: D44139819\n\nPulled By: cbi42\n\nfbshipit-source-id: 10c40b0b0260b23ccb7dc84e55a993c7dfbdc4cf",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8f6c2a2cc0b27437b64bcd5664be812d178bec6b"
    },
    {
        "hash": "b92bc04ab000d4e4d64605ca8123f41940d4a5e7",
        "author": "sdong",
        "date": "2023-03-21T15:38:33-07:00",
        "message": "Deflake DBCompactionTest.CancelCompactionWaitingOnConflict (#11318)\n\nSummary:\nIn DBCompactionTest::CancelCompactionWaitingOnConflict, when generating SST files to trigger a compaction, we don't wait after each file, which may cause multiple memtables going to the same SST file, causing insufficient files to trigger the compaction. We do the waiting instead, except the last one, which would trigger compaction.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11318\n\nTest Plan: Run DBCompactionTest.CancelCompactionWaitingOnConflict multiple times.\n\nReviewed By: ajkr\n\nDifferential Revision: D44267273\n\nfbshipit-source-id: 86af49b05fc67ea3335312f0f5f3d22df1520bf8",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b92bc04ab000d4e4d64605ca8123f41940d4a5e7"
    },
    {
        "hash": "cea81cad661f3cecafc1f944240e80d34422d4c8",
        "author": "sdong",
        "date": "2023-03-20T13:23:29-07:00",
        "message": "Disabling some IO error assertion in EnvLogger (#11314)\n\nSummary:\nRight now, EnvLogger has the same IO error assertion as most other places: if we are writing to the file after we've seen an IO error, the assertion would trigger. This is too strict for info logger: we would not fail DB if info logger fails and we would try the best to continue logging. For now, we simplify the problem by disabling the assertion for EnvLogger.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11314\n\nTest Plan: Run env_logger_test to make sure at least it doesn't fail in normal cases.\n\nReviewed By: anand1976\n\nDifferential Revision: D44227732\n\nfbshipit-source-id: e3d31a221a5757f018a67ccaa96dcf89eb981f66",
        "modified_files_count": 1,
        "modified_files": [
            "logging/env_logger.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cea81cad661f3cecafc1f944240e80d34422d4c8"
    },
    {
        "hash": "e01073252b4162b6e6a53e40edc8e7341f6dd32c",
        "author": "Peter Dillinger",
        "date": "2023-03-06T11:53:09-08:00",
        "message": "Tests verifying non-zero checksums of zero bytes (#11260)\n\nSummary:\nAdds unit tests verifying that a block payload and checksum of all zeros is not falsely considered valid data. The test exhaustively checks that for blocks up to some length (default 20K, more exhaustively 10M) of all zeros do not produce a block checksum of all zeros.\n\nAlso small refactoring of an existing checksum test to use parameterized test. (Suggest hiding whitespace changes for review.)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11260\n\nTest Plan:\nthis is the test, manual run with\n`ROCKSDB_THOROUGH_CHECKSUM_TEST=1` to verify up to 10M.\n\nReviewed By: hx235\n\nDifferential Revision: D43706192\n\nPulled By: pdillinger\n\nfbshipit-source-id: 95e721c320ca928e7fa2400c2570fb359cc30b1f",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e01073252b4162b6e6a53e40edc8e7341f6dd32c"
    },
    {
        "hash": "a1a3b23346cb6499b5b07ac7dcccf9a83e7ad336",
        "author": "Levi Tamasi",
        "date": "2023-03-06T09:50:39-08:00",
        "message": "Deflake/fix BlobSourceCacheReservationTest.IncreaseCacheReservationOnFullCache (#11273)\n\nSummary:\n`BlobSourceCacheReservationTest.IncreaseCacheReservationOnFullCache` is both flaky and also doesn't do what its name says. The patch changes this test so it actually tests increasing the cache reservation, hopefully also deflaking it in the process.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11273\n\nTest Plan: `make check`\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D43800935\n\nPulled By: ltamasi\n\nfbshipit-source-id: 5eb54130dfbe227285b0e14f2084aa4b89f0b107",
        "modified_files_count": 1,
        "modified_files": [
            "db/blob/blob_source_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a1a3b23346cb6499b5b07ac7dcccf9a83e7ad336"
    },
    {
        "hash": "50e9b3f9c7e9198257d0398bf14c8ddad70527cb",
        "author": "Peter Dillinger",
        "date": "2023-03-05T08:21:57-08:00",
        "message": "Default print stack traces with GDB on Linux (#11272)\n\nSummary:\nOn Linux systems using full ASLR, including CircleCI, the old backtrace()+addr2line stack traces are pretty useless, as seen in some failures under ASSERT_STATUS_CHECKED=1 LIB_MODE=static. Use gdb by default for stack traces under Linux. More detail in code comments.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11272\n\nTest Plan: manual testing locally and on CircleCI with ssh\n\nReviewed By: anand1976\n\nDifferential Revision: D43786211\n\nPulled By: pdillinger\n\nfbshipit-source-id: f8c7c77f774b504fbdf7c786ff2430cbc8f5b939",
        "modified_files_count": 1,
        "modified_files": [
            "port/stack_trace.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/50e9b3f9c7e9198257d0398bf14c8ddad70527cb"
    },
    {
        "hash": "e168c1b1a4fe59b55a4250076e67e560b811f88a",
        "author": "Peter Dillinger",
        "date": "2023-03-05T08:21:16-08:00",
        "message": "Use FaultInjectionTestFS in DBWriteTest.LockWALInEffect (#11271)\n\nSummary:\nExisting use of FaultInjectionTestEnv shows rare TSAN errors with parallel Sync and Flush. This appears to be fixed in FaultInjectionTestFS. (Sigh, code duplication and divergence.)\n\nExample failure:\nhttps://app.circleci.com/pipelines/github/facebook/rocksdb/24631/workflows/fc2a66f0-f21c-48d6-a944-3885bcff50a4/jobs/571928\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11271\n\nTest Plan: wasn't able to reproduce locally but stress tested the updated test with gtest-parallel -r1000 and TSAN.\n\nReviewed By: ajkr\n\nDifferential Revision: D43779477\n\nPulled By: pdillinger\n\nfbshipit-source-id: a019b0f1d4045a26a15ab08aab63828a398f6d3e",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_write_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e168c1b1a4fe59b55a4250076e67e560b811f88a"
    },
    {
        "hash": "ddde1e6af824a81d7dcc6d42b349d637933e10dd",
        "author": "Igor Canadi",
        "date": "2023-03-03T20:55:31-08:00",
        "message": "Avoid ColumnFamilyDescriptor copy (#10978)\n\nSummary:\nHi. :) Noticed we are copying ColumnFamilyDescriptor here because my process crashed during copy constructor (cause unrelated)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10978\n\nReviewed By: cbi42\n\nDifferential Revision: D41473924\n\nPulled By: ajkr\n\nfbshipit-source-id: 58a3473f2d7b24918f79d4b2726c20081c5e95b4",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_open.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ddde1e6af824a81d7dcc6d42b349d637933e10dd"
    },
    {
        "hash": "95d67f3646111bc9939b2e3e910759cb1ced2389",
        "author": "Levi Tamasi",
        "date": "2023-03-03T09:53:13-08:00",
        "message": "Fix/clarify/extend the API comments of CompactionFilter (#11261)\n\nSummary:\nThe patch makes the following changes to the API comments:\n* Some general comments about snapshots, thread safety, and user-defined timestamps are moved to a more prominent place at the top of the file.\n* Detailed descriptions are added for each `ValueType` and `Decision`, fixing and extending some existing comments (e.g. that of `kRemove`, which suggested that key-values are simply removed from the output, while in reality base values are converted to tombstones) and adding detailed comments that were missing (e.g. `kPurge` and `kChangeWideColumnEntity`).\n* Updated/extended the comments of `FilterV2/V3` and `FilterBlobByKey`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11261\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D43714314\n\nPulled By: ltamasi\n\nfbshipit-source-id: 835f4b1bdac1ce0e291155186095211303260729",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/compaction_filter.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/95d67f3646111bc9939b2e3e910759cb1ced2389"
    },
    {
        "hash": "b7e73501d82661455755b532dff8557e82cb1165",
        "author": "yihuang",
        "date": "2023-02-27T11:39:38-08:00",
        "message": "fix: add extern and ROCKSDB_LIBRARY_API to two c apis (#11217)\n\nSummary:\nadd extern and `ROCKSDB_LIBRARY_API ` to `rocksdb_property_int` and `rocksdb_property_int_cf`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11217\n\nReviewed By: cbi42\n\nDifferential Revision: D43522968\n\nPulled By: ajkr\n\nfbshipit-source-id: 4cd4e136f3890fc17e0a1f9e7ac4e517e4d79afa",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b7e73501d82661455755b532dff8557e82cb1165"
    },
    {
        "hash": "af7872ffd1fb437c663430d29a5d6e674db1ca90",
        "author": "Yu Zhang",
        "date": "2023-02-23T17:00:04-08:00",
        "message": "Fix a TestGet failure when user defined timestamp is enabled (#11249)\n\nSummary:\nStressing small DB with small number of keys and user-defined timestamp enabled usually fails pretty quickly in TestGet.\n\nExample command to reproduce the failure:\n\n` tools/db_crashtest.py blackbox --enable_ts --simple --delrangepercent=0 --delpercent=5 --max_key=100 --interval=3 --write_buffer_size=262144 --target_file_size_base=262144 --max_bytes_for_level_base=262144 --subcompactions=1`\n\nExample failure: `error : inconsistent values for key 0000000000000009000000000000000A7878: expected state has the key, Get() returns NotFound.`\n\nFixes this test failure by refreshing the read up to timestamp to the most up to date timestamp, a.k.a now, after a key is locked.  Without this, things could happen in this order and cause a test failure:\n\n<table>\n  <tr>\n    <th>TestGet thread</th>\n    <th> A writing thread</th>\n  </tr>\n  <tr>\n    <td>read_opts.timestamp = GetNow()</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>Lock key, do write</td>\n  </tr>\n  <tr>\n    <td>Lock key, read(read_opts) return NotFound</td>\n    <td></td>\n  </tr>\n</table>\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11249\n\nReviewed By: ltamasi\n\nDifferential Revision: D43551302\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 26877ab379bdb97acd2682a2632bc29718427f38",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/af7872ffd1fb437c663430d29a5d6e674db1ca90"
    },
    {
        "hash": "9fa9becf5314c209abec0a37529db3752fabaf80",
        "author": "ywave",
        "date": "2023-02-22T05:44:03-08:00",
        "message": "fix -Wrange-loop-analysis in Apple clang version 12.0.0 (clang-1200.0.32.29) (#11240)\n\nSummary:\nFix complain\n```\ndb/db_impl/db_impl_compaction_flush.cc:417:19: error: loop variable 'bg_flush_arg' of type 'const rocksdb::DBImpl::BGFlushArg' creates a copy from type\n      'const rocksdb::DBImpl::BGFlushArg' [-Werror,-Wrange-loop-analysis]\n  for (const auto bg_flush_arg : bg_flush_args) {\n                  ^\ndb/db_impl/db_impl_compaction_flush.cc:417:8: note: use reference type 'const rocksdb::DBImpl::BGFlushArg &' to prevent copying\n  for (const auto bg_flush_arg : bg_flush_args) {\n       ^~~~~~~~~~~~~~~~~~~~~~~~~\n                  &\ndb/db_impl/db_impl_compaction_flush.cc:2911:21: error: loop variable 'bg_flush_arg' of type 'const rocksdb::DBImpl::BGFlushArg' creates a copy from type\n      'const rocksdb::DBImpl::BGFlushArg' [-Werror,-Wrange-loop-analysis]\n    for (const auto bg_flush_arg : bg_flush_args) {\n                    ^\ndb/db_impl/db_impl_compaction_flush.cc:2911:10: note: use reference type 'const rocksdb::DBImpl::BGFlushArg &' to prevent copying\n    for (const auto bg_flush_arg : bg_flush_args) {\n         ^~~~~~~~~~~~~~~~~~~~~~~~~\n                    &\n```\nfrom\n\n```sh\nxxx@MacBook-Pro / % g++ -v\nConfigured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/4.2.1\nApple clang version 12.0.0 (clang-1200.0.32.29)\nTarget: x86_64-apple-darwin21.6.0\nThread model: posix\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11240\n\nReviewed By: cbi42\n\nDifferential Revision: D43458729\n\nPulled By: ajkr\n\nfbshipit-source-id: 26e110f83451509463a1bc308f737ccb693c9f45",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9fa9becf5314c209abec0a37529db3752fabaf80"
    },
    {
        "hash": "ea85148b7848d22e321988173fa5c14038169a45",
        "author": "leipeng",
        "date": "2023-02-21T11:26:30-08:00",
        "message": "DBIter::FindNextUserEntryInternal: do not PrepareValue for `Delete` (#11211)\n\nSummary:\n`kTypeDeletion/kTypeDeletionWithTimestamp/kTypeSingleDeletion` does not need access iter value, so omit `PrepareValue`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11211\n\nReviewed By: ajkr\n\nDifferential Revision: D43253068\n\nPulled By: cbi42\n\nfbshipit-source-id: 1945c7f8a90b6909128a0553b62d9fd1078b0a08",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ea85148b7848d22e321988173fa5c14038169a45"
    },
    {
        "hash": "ebfca2cf0049e65a823b365f98ea5d5c4eab9a54",
        "author": "Changyu Bi",
        "date": "2023-02-21T11:12:22-08:00",
        "message": "Fix comment for option `periodic_compaction_seconds` (#11227)\n\nSummary:\nthe comment for option `periodic_compaction_seconds` only mentions support for Leveled and FIFO compaction, while the implementation supports all compaction styles after https://github.com/facebook/rocksdb/issues/5970. This PR updates comment to reflect this.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11227\n\nReviewed By: ajkr\n\nDifferential Revision: D43325046\n\nPulled By: cbi42\n\nfbshipit-source-id: 2364dcb5a01cd098ad52c818fe10d621445e2188",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/advanced_options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ebfca2cf0049e65a823b365f98ea5d5c4eab9a54"
    },
    {
        "hash": "fcd816d534cd10fdcc4b52472d17a1228382bcf1",
        "author": "Andrew Kryczka",
        "date": "2023-02-18T17:30:15-08:00",
        "message": "Add missing override keyword in env_win.h functions (#11232)\n\nSummary:\nI couldn't figure out why this causes failures in our 8.0 release to fbcode while this issue appears to not be new in 8.0. Anyways, we can add the missing `override` keywords to these functions as the compiler insists.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11232\n\nReviewed By: pdillinger\n\nDifferential Revision: D43420656\n\nPulled By: ajkr\n\nfbshipit-source-id: da748eeef6ba38dd113dbe4b5143d7558daf38dd",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fcd816d534cd10fdcc4b52472d17a1228382bcf1"
    },
    {
        "hash": "88056ea6cb158a31e4e40bf8b47bdcbc5b8391d7",
        "author": "Peter Dillinger",
        "date": "2023-02-16T08:07:45-08:00",
        "message": "Re-add memory_allocator.h include from cache.h (#11229)\n\nSummary:\nEnough users of NewJemallocNodumpAllocator() with cache.h to justify keeping it. (Reverting one little part of https://github.com/facebook/rocksdb/issues/11192)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11229\n\nTest Plan: CI\n\nReviewed By: ajkr\n\nDifferential Revision: D43337140\n\nPulled By: pdillinger\n\nfbshipit-source-id: 886b27b96b395619a4209f51b9b7787f4fe89e57",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/cache.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/88056ea6cb158a31e4e40bf8b47bdcbc5b8391d7"
    },
    {
        "hash": "ab22e798246e7175e24a899735a3bbfb34d11ec0",
        "author": "Levi Tamasi",
        "date": "2023-02-15T17:08:25-08:00",
        "message": "Support using MultiGetEntity as verification method in stress tests (#11228)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/11228\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D43332120\n\nPulled By: ltamasi\n\nfbshipit-source-id: 15f32cf335aecb7e654da24ecafc6e010dc65194",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ab22e798246e7175e24a899735a3bbfb34d11ec0"
    },
    {
        "hash": "c19672c187e59700c18f98da068fa0425cef9ded",
        "author": "Yu Zhang",
        "date": "2023-02-13T13:40:02-08:00",
        "message": "Enable crash test to run BlobDB together with user-defined timestamp (#11199)\n\nSummary:\nI missed a stress test code sanity check when enabling this combination of tests. This PR addresses that, the \"iter_start_ts\" function for user defined timestamp feature is not supported when BlobDB is enabled. It's disabled for now.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11199\n\nTest Plan:\nLocally always enable BlobDB and run\ntools/db_crashtest.py --stress_cmd=./db_stress --cleanup_cmd='' --enable_ts whitebox --random_kill_odd 888887\n\nReviewed By: ltamasi\n\nDifferential Revision: D43245657\n\nPulled By: jowlyzhang\n\nfbshipit-source-id: 4cae19817bb1afd50a76f9e0e49f006fb5c0b211",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c19672c187e59700c18f98da068fa0425cef9ded"
    },
    {
        "hash": "b7747bbc9f49761b75ae6ae2bdaebda960cda37d",
        "author": "Peter Dillinger",
        "date": "2023-02-09T09:21:55-08:00",
        "message": "Attempt fix flaky DBWriteTest.LockWALInEffect (#11209)\n\nSummary:\nExample failure:\n```\n[ RUN      ] DBWriteTestInstance/DBWriteTest.LockWALInEffect/1\ndb/db_write_test.cc:646: Failure\nPut(\"key3\", \"value\")\nCorruption: Not active\n```\nPresumably from a background compaction prior to Put.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11209\n\nTest Plan: watch CI\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D43147727\n\nPulled By: pdillinger\n\nfbshipit-source-id: a1c34ac5ab124bfe2f23205a30777990056e9082",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_write_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b7747bbc9f49761b75ae6ae2bdaebda960cda37d"
    },
    {
        "hash": "27cf09172c4f212d0aef23b23c802bb791ec9209",
        "author": "Peter Dillinger",
        "date": "2023-02-03T16:49:54-08:00",
        "message": "Fix compile gettid on older Linux (#11184)\n\nSummary:\nSeen only in post-PR CI job benchmark-linux. Some context: https://stackoverflow.com/questions/30680550/c-gettid-was-not-declared-in-this-scope\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11184\n\nTest Plan: watch CI\n\nReviewed By: cbi42\n\nDifferential Revision: D43013891\n\nPulled By: pdillinger\n\nfbshipit-source-id: 48b3b7231080a0f803fdc36d13946d5524770302",
        "modified_files_count": 1,
        "modified_files": [
            "port/stack_trace.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/27cf09172c4f212d0aef23b23c802bb791ec9209"
    },
    {
        "hash": "e17f31057b63a96aed50b0b4469f9629e0089093",
        "author": "Peter Dillinger",
        "date": "2023-02-03T13:21:03-08:00",
        "message": "Support stack traces with gdb (and debugger invocation) (#11150)\n\nSummary:\nLIB_MODE=shared is much more efficient for building all the unit tests but comes with the downside of ugly stack traces, generally missing name demangling and source line info. Searching the internet suggests the reliable way to get stack traces with dynamic loading is with gdb.\n\nThis change automatically tries to use gdb to get a stack trace if built with LIB_MODE=shared, and only on Linux because that's where we have the capability to attach to the proper thread. (We could revise the exact conditions in the future.) If there's a failure invoking gdb, it falls back on the old method. Obscure details of making the output reasonable / pretty are in the source code comments.\n\nBased on this, it was easy to make it so that running a test command with ROCKSDB_DEBUG=1 would invoke gdb whenever the stack trace handler was invoked, so I included that.\n\nIntended follow-up: make LIB_MODE=shared the new default `make` build config\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11150\n\nTest Plan:\nmanual, mostly by injecting an \"assert(false)\" into a unit test and trying different build modes etc.\n\nAlthough gdb is slower to start showing stack trace output, it seems overall faster in many if not most cases, presumably because it doesn't reload the symbol table for each stack entry. At least with parallel test runs, having many tests dumping stacks with the old method can take so long it appears to hang the test run.\n\nReviewed By: cbi42\n\nDifferential Revision: D42894064\n\nPulled By: pdillinger\n\nfbshipit-source-id: 608143309d8c69c40049c9a4abcde4f22e87b4d8",
        "modified_files_count": 1,
        "modified_files": [
            "port/stack_trace.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e17f31057b63a96aed50b0b4469f9629e0089093"
    },
    {
        "hash": "df680b24ef2bbd8c9ee8cf882baa7636bcc21be4",
        "author": "Levi Tamasi",
        "date": "2023-02-01T10:03:07-08:00",
        "message": "Clean up InvokeFilterIfNeeded a bit (#11174)\n\nSummary:\nThe patch makes some code quality enhancements in `CompactionIterator::InvokeFilterIfNeeded`\nincluding the renaming of `filter` (which is most likely a remnant of the days before the `FilterV2`\nAPI when the compaction filter used to return a boolean) to `decision`, the removal of some\noutdated comments, the elimination of an `error` flag which was only used in one failure case\nout of many, as well as some small stylistic improvements. (Some the above will also come in\nhandy when adding compaction filter support for wide-column entities.)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11174\n\nTest Plan: `make check`\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D42901408\n\nPulled By: ltamasi\n\nfbshipit-source-id: ab382d59a4990c5dfe1cee219d49e1d80902b666",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/df680b24ef2bbd8c9ee8cf882baa7636bcc21be4"
    },
    {
        "hash": "753d4d507892e8059a17258ea03505dee396b033",
        "author": "Levi Tamasi",
        "date": "2023-01-31T10:17:48-08:00",
        "message": "Support using GetEntity as a verification method in the non-batched stress tests (#11144)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/11144\n\nTest Plan: Ran a simple blackbox crash test.\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D42791464\n\nPulled By: ltamasi\n\nfbshipit-source-id: 8eb6e62f0bc47f709816136ff3ded0a41d04fab8",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/753d4d507892e8059a17258ea03505dee396b033"
    },
    {
        "hash": "36174d89a6000723f3ad6bdb3d25f64866cab0f2",
        "author": "sdong",
        "date": "2023-01-30T19:45:47-08:00",
        "message": "DB Stress to fix a false assertion (#11164)\n\nSummary:\nSeeting this error in stress test:\n\ndb_stress: internal_repo_rocksdb/repo/db_stress_tool/db_stress_test_base.cc:2459: void rocksdb::StressTest::Open(rocksdb::SharedState *): Assertion `txn_db_ == nullptr' failed. Received signal 6 (Aborted)\n......\n\nIt doesn't appear that txn_db_ is set to nullptr at all. We set ithere.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11164\n\nTest Plan: Run db_stress transaction and non-transation with low kill rate and see restarting without assertion\n\nReviewed By: ajkr\n\nDifferential Revision: D42855662\n\nfbshipit-source-id: 06816d37cce9c94a81cb54ab238fb73aa102ed46",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/36174d89a6000723f3ad6bdb3d25f64866cab0f2"
    },
    {
        "hash": "79e57a39a33dbe17c8f51167e40e66d6c91f8eb4",
        "author": "akankshamahajan",
        "date": "2023-01-27T14:51:39-08:00",
        "message": "Move ExternalSSTTestEnv to FileSystemWrapper (#11139)\n\nSummary:\nMigrate ExternalSSTTestEnv to FileSystemWrapper\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11139\n\nReviewed By: anand1976\n\nDifferential Revision: D42780180\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 9a4448c9fe5186b518235fe11e1a34dcad897cdd",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/79e57a39a33dbe17c8f51167e40e66d6c91f8eb4"
    },
    {
        "hash": "97c1024d3e8dcc77c135899e00a35f5aeee4322c",
        "author": "Andrew Kryczka",
        "date": "2023-01-27T07:45:25-08:00",
        "message": "Include db_stress verification method in failure message (#11133)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/11133\n\nTest Plan:\n- ran it a few times on a mismatching DB+expected state; verified error messages look right:\n\n```\nVerification failed for column family 0 key 000000000000D553000000000000014C0000000000000142 (163988): value_from_db: , value_from_expected: 25E7B53421202322, msg: GetMergeOperands verification: Value not found: NotFound:\nVerification failed for column family 0 key 000000000000AAE2787878 (131123): value_from_db: , value_from_expected: B2A69C18B6B7B4B5BABBB8B9BEBFBCBDA2A3A0A1A6A7A4A5, msg: Iterator verification: Value not found: NotFound:\nVerification failed for column family 0 key 00000000000080C6000000000000004C78787878 (98409): value_from_db: , value_from_expected: 67AB7E1E636261606F6E6D6C6B6A6968, msg: Get verification: Value not found: NotFound:\n```\n\nReviewed By: hx235\n\nDifferential Revision: D42757072\n\nPulled By: ajkr\n\nfbshipit-source-id: b0a4a0aaa5be5d110434324853ac92aaa6972d89",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/97c1024d3e8dcc77c135899e00a35f5aeee4322c"
    },
    {
        "hash": "986c5b9d4ece56046db516f943f3c2d46e3f6c4c",
        "author": "akankshamahajan",
        "date": "2023-01-25T22:42:22-08:00",
        "message": "Migrate TestEnv in listener_test.cc to FileSystemWrapper (#11125)\n\nSummary:\nMigrate derived classes from EnvWrapper to FileSystemWrapper so we can eventually deprecate the storage methods in Env.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11125\n\nTest Plan: CircleCI jobs\n\nReviewed By: anand1976\n\nDifferential Revision: D42732241\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: c89a70a79fcfb13e158bf8919b1a87a9de133222",
        "modified_files_count": 1,
        "modified_files": [
            "db/listener_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/986c5b9d4ece56046db516f943f3c2d46e3f6c4c"
    },
    {
        "hash": "bcbab59c55187978a3f62afacaad8af96f5b4887",
        "author": "anand76",
        "date": "2023-01-24T17:14:35-08:00",
        "message": "Migrate ErrorEnv from EnvWrapper to FileSystemWrapper (#11124)\n\nSummary:\nMigrate ErrorEnv from EnvWrapper to FileSystemWrapper so we can eventually deprecate the storage methods in Env.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11124\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D42727791\n\nPulled By: anand1976\n\nfbshipit-source-id: e8362ad624dc28e55c99fc35eda12866755f62c6",
        "modified_files_count": 1,
        "modified_files": [
            "db/corruption_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bcbab59c55187978a3f62afacaad8af96f5b4887"
    },
    {
        "hash": "e0ea0dc6bdb6c7160914800823ac0755f26bb4fc",
        "author": "Changyu Bi",
        "date": "2023-01-24T12:12:19-08:00",
        "message": "Improve documentation for `allow_ingest_behind` (#11119)\n\nSummary:\nupdate documentation to mention that only universal compaction is supported.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11119\n\nReviewed By: ajkr\n\nDifferential Revision: D42715986\n\nPulled By: cbi42\n\nfbshipit-source-id: 91b145d3318334cb92857c5c0ffc0efed6fa4363",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e0ea0dc6bdb6c7160914800823ac0755f26bb4fc"
    },
    {
        "hash": "f4a5446cab9a5797758e5fd491917280a39359ca",
        "author": "codeoos",
        "date": "2023-01-19T13:59:48-08:00",
        "message": "Fix error maybe-uninitialized #11100 (#11101)\n\nSummary:\nIn this issue [11100](https://github.com/facebook/rocksdb/issues/11100)\nI try to upgrade dependencies of [BaikalDB](https://github.com/baidu/BaikalDB) and tool chain to gcc-12.I found that when I build rocksdb v6.26.0(maybe I can use newer version),I found that in file trace_replay/trace_replay.cc,the compiler tell me \"error mybe-uninitialized\".I dound that it can be fixed very easy,so I make this pull request.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11101\n\nReviewed By: ajkr\n\nDifferential Revision: D42583031\n\nPulled By: cbi42\n\nfbshipit-source-id: 7f399f09441a30fe88b83cec5e2fd9885bad5c06",
        "modified_files_count": 1,
        "modified_files": [
            "trace_replay/trace_replay.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f4a5446cab9a5797758e5fd491917280a39359ca"
    },
    {
        "hash": "a5bcbcd8bee480fe193718372caf4de18bf6f7f8",
        "author": "leipeng",
        "date": "2023-01-19T13:28:58-08:00",
        "message": "remove unused InternalIteratorBase::is_mutable_ (#11104)\n\nSummary:\n`InternalIteratorBase::is_mutable_` is not used any more, remove it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11104\n\nReviewed By: ajkr\n\nDifferential Revision: D42582747\n\nPulled By: cbi42\n\nfbshipit-source-id: d30bf75151fc8414df0ae112a6ec4943b5b7330b",
        "modified_files_count": 1,
        "modified_files": [
            "table/internal_iterator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a5bcbcd8bee480fe193718372caf4de18bf6f7f8"
    },
    {
        "hash": "3941c349501c516bdbfb06d3821bbbdb0d0d821c",
        "author": "leipeng",
        "date": "2023-01-13T11:47:26-08:00",
        "message": "db_bench: let -benchmark=compact respect -subcompactions (#11077)\n\nSummary:\nWhen running `-benchmarks=compact`, `-subcompactions` does not take effect.\n\n`-subcompactions` option comment says it is for L0-L1 compactions, it is natural to extend it to CompactionRangeOptions.max_subcompactions.\n\nThis PR set CompactionRangeOptions.max_subcompactions = FLAGS_subcompactions\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11077\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D42506251\n\nPulled By: ajkr\n\nfbshipit-source-id: f77c9a99d32ff7af59f3c452c9e16aaeb0360304",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3941c349501c516bdbfb06d3821bbbdb0d0d821c"
    },
    {
        "hash": "a510880346d68b7710078bf99240e560610c02b3",
        "author": "anand76",
        "date": "2023-01-12T18:09:07-08:00",
        "message": "Add a unit test for async prefetch fix in #11049 (#11084)\n\nSummary:\nAdd a unit test in prefetch_test for https://github.com/facebook/rocksdb/issues/11049\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11084\n\nTest Plan: Verify the test fails without https://github.com/facebook/rocksdb/issues/11049 and passes with it\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D42485828\n\nPulled By: anand1976\n\nfbshipit-source-id: ae512f2d121745a1f5212645a9b58868976c1f83",
        "modified_files_count": 1,
        "modified_files": [
            "file/prefetch_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a510880346d68b7710078bf99240e560610c02b3"
    },
    {
        "hash": "0a2d3b663a962cf86af5ad82c80baf1cd71f7766",
        "author": "Changyu Bi",
        "date": "2023-01-05T12:10:02-08:00",
        "message": "Fix some unit test failure in ExternalSSTFileBasicTest (#11070)\n\nSummary:\nvalgrind build for `ExternalSSTFileBasicTest/ExternalSSTFileBasicTest.IngestFileWithMixedValueType` and `ExternalSSTFileBasicTest/ExternalSSTFileBasicTest.IngestFileWithGlobalSeqnoPickedSeqno` started failing (see error message in T141554665). I could not repro but I suspect it is due to file ingestion range overlapping with ongoing compaction, which caused a new global seqno being assigned after https://github.com/facebook/rocksdb/issues/10988.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11070\n\nTest Plan: monitor future valgrind tests result.\n\nReviewed By: hx235\n\nDifferential Revision: D42319056\n\nPulled By: cbi42\n\nfbshipit-source-id: acbcd841a2a15e36b278f39ba514f4b9a6ee43ca",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0a2d3b663a962cf86af5ad82c80baf1cd71f7766"
    },
    {
        "hash": "f24ef5d6ab8bcde242508536ff504f2c3e304600",
        "author": "Changyu Bi",
        "date": "2022-12-31T10:56:55-08:00",
        "message": "Fix BackupEngineTest.ExcludeFiles memory leak (#11066)\n\nSummary:\nValgrind was complaining about the test BackupEngineTest.ExcludeFiles. The cause is backup_engine not being freed similar to https://github.com/facebook/rocksdb/issues/9610.\n```\n==18228== Command: ./backup_engine_test --gtest_filter=BackupEngineTest.ExcludeFiles\n==18228==\nNote: Google Test filter = BackupEngineTest.ExcludeFiles\n[==========] Running 1 test from 1 test case.\n[----------] Global test environment set-up.\n[----------] 1 test from BackupEngineTest\n[ RUN      ] BackupEngineTest.ExcludeFiles\n[       OK ] BackupEngineTest.ExcludeFiles (16264 ms)\n[----------] 1 test from BackupEngineTest (16273 ms total)\n\n[----------] Global test environment tear-down\n[==========] 1 test from 1 test case ran. (16306 ms total)\n[  PASSED  ] 1 test.\n==18228==\n==18228== HEAP SUMMARY:\n==18228==     in use at exit: 14,099 bytes in 159 blocks\n==18228==   total heap usage: 255,328 allocs, 255,169 frees, 497,538,546 bytes allocated\n==18228==\n==18228== 19 bytes in 1 blocks are possibly lost in loss record 4 of 67\n==18228==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\n==18228==    by 0x1E752D: void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.0] (basic_string.tcc:219)\n==18228==    by 0x1F1898: _M_construct_aux<char*> (basic_string.h:251)\n==18228==    by 0x1F1898: _M_construct<char*> (basic_string.h:270)\n==18228==    by 0x1F1898: basic_string (basic_string.h:455)\n==18228==    by 0x1F1898: construct<std::__cxx11::basic_string<char>, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&> (new_allocator.h:146)\n==18228==    by 0x1F1898: construct<std::__cxx11::basic_string<char>, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&> (alloc_traits.h:483)\n==18228==    by 0x1F1898: push_back (stl_vector.h:1189)\n==18228==    by 0x1F1898: rocksdb::(anonymous namespace)::TestFs::NewWritableFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rocksdb::FileOptions const&, std::unique_ptr<rocksdb::FSWritableFile, std::default_delete<rocksdb::FSWritableFile> >*, rocksdb::IODebugContext*) (backup_engine_test.cc:208)\n==18228==    by 0x4B3583: rocksdb::NewWritableFile(rocksdb::FileSystem*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<rocksdb::FSWritableFile, std::default_delete<rocksdb::FSWritableFile> >*, rocksdb::FileOptions const&) (read_write_util.cc:23)\n==18228==    by 0x31C3A8: rocksdb::DBImpl::CreateWAL(unsigned long, unsigned long, unsigned long, rocksdb::log::Writer**) (db_impl_open.cc:1752)\n==18228==    by 0x321A8C: rocksdb::DBImpl::Open(rocksdb::DBOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<rocksdb::ColumnFamilyDescriptor, std::allocator<rocksdb::ColumnFamilyDescriptor> > const&, std::vector<rocksdb::ColumnFamilyHandle*, std::allocator<rocksdb::ColumnFamilyHandle*> >*, rocksdb::DB**, bool, bool) (db_impl_open.cc:1852)\n==18228==    by 0x322E7F: Open (db_impl_open.cc:1660)\n==18228==    by 0x322E7F: rocksdb::DB::Open(rocksdb::Options const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rocksdb::DB**) (db_impl_open.cc:1637)\n==18228==    by 0x1EE1CD: InitializeDBAndBackupEngine (backup_engine_test.cc:724)\n==18228==    by 0x1EE1CD: rocksdb::(anonymous namespace)::BackupEngineTest::OpenDBAndBackupEngine(bool, bool, rocksdb::(anonymous namespace)::BackupEngineTest::ShareOption) (backup_engine_test.cc:732)\n==18228==    by 0x217585: rocksdb::(anonymous namespace)::BackupEngineTest_ExcludeFiles_Test::TestBody() (backup_engine_test.cc:4232)\n==18228==    by 0x296143: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest-all.cc:3899)\n==18228==    by 0x296143: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest-all.cc:3935)\n==18228==    by 0x28A0A5: testing::Test::Run() [clone .part.0] (gtest-all.cc:3973)\n==18228==    by 0x28A364: Run (gtest-all.cc:3965)\n==18228==    by 0x28A364: testing::TestInfo::Run() [clone .part.0] (gtest-all.cc:4149)\n...\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11066\n\nTest Plan: make -j24 J=24 ROCKSDBTESTS_SUBSET=backup_engine_test valgrind_check_some\n\nReviewed By: ajkr\n\nDifferential Revision: D42297791\n\nPulled By: cbi42\n\nfbshipit-source-id: db67982b27b91cc78e1a9f4a96da0cba7c9785b7",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backup/backup_engine_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f24ef5d6ab8bcde242508536ff504f2c3e304600"
    },
    {
        "hash": "7f71880de918e182a16223cb50114f0764106ac4",
        "author": "ywave",
        "date": "2022-12-30T16:55:55-08:00",
        "message": "Fix typo in flushing stats CF (#11055)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/11055\n\nTest Plan: make check\n\nReviewed By: cbi42\n\nDifferential Revision: D42232828\n\nPulled By: ajkr\n\nfbshipit-source-id: 3b46514aebff4da7e47b9954b90800ba4a3ba30b",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7f71880de918e182a16223cb50114f0764106ac4"
    },
    {
        "hash": "53b703eafef16c20bad64171f1dcca8cc98eefa0",
        "author": "Changyu Bi",
        "date": "2022-12-19T16:36:39-08:00",
        "message": "Fix an assertion failure in `CompactionOutputs::AddRangeDels()` (#11040)\n\nSummary:\nthe [assertion](https://github.com/facebook/rocksdb/blob/c3f720c60db59c27486d8f18e094f9d1eb3c33cf/db/compaction/compaction_outputs.cc#L643) in `CompactionOutputs::AddRangeDels()` can fail after https://github.com/facebook/rocksdb/pull/10802. The assertion fails when `lower_bound_from_range_tombstone` is true during `AddRangeDels()` for a new compaction output file, while the lower bound range tombstone key has seqno 0 and op_type kTypeRangeDeletion. It can have seqno 0 when it was truncated at a point key whose seqno was zeroed out during compaction, the seqno and op_type could be set [here](https://github.com/facebook/rocksdb/blob/c3f720c60db59c27486d8f18e094f9d1eb3c33cf/db/compaction/compaction_outputs.cc#L594). This PR fixes the assertion excluding the case when `lower_bound_from_range_tombstone` is true.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11040\n\nTest Plan: CI\n\nReviewed By: ajkr\n\nDifferential Revision: D42119914\n\nPulled By: cbi42\n\nfbshipit-source-id: 0897e71b5304cb02aac30f71667b590c37b72baf",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_outputs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/53b703eafef16c20bad64171f1dcca8cc98eefa0"
    },
    {
        "hash": "ddad943c2972059393802b114414bd2b573d4621",
        "author": "ehds",
        "date": "2022-12-19T15:06:22-08:00",
        "message": "snapshots of FragmentedRangeTombstoneList must in ascending order (#11046)\n\nSummary:\n`snapshots` argument of `FragmentedRangeTombstoneList` should be in ascending order.\n\nIf we pass it in descending order order， it will not work.\n\nfor example:\n\n```\n  auto range_del_iter = MakeRangeDelIter({{\"a\", \"e\", 3},{\"a\",\"e\", 6}});\n\n  FragmentedRangeTombstoneList fragment_list(\n      std::move(range_del_iter), bytewise_icmp, true /* for_compaction */,\n      {8 ,7 ,4} /* snapshots */);\n    FragmentedRangeTombstoneIterator iter(&fragment_list, bytewise_icmp,\n                                        kMaxSequenceNumber /* upper_bound */);\n  VerifyFragmentedRangeDels(&iter, {{\"a\", \"e\", 6}, {\"a\", \"e\", 3}});\n```\nVerifyFragmentedRangeDels will fail.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11046\n\nReviewed By: ajkr\n\nDifferential Revision: D42148654\n\nPulled By: cbi42\n\nfbshipit-source-id: a2e76f96dccf56fcca1a91cb8da9b99145f68026",
        "modified_files_count": 1,
        "modified_files": [
            "db/range_tombstone_fragmenter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ddad943c2972059393802b114414bd2b573d4621"
    },
    {
        "hash": "692d6be3586fd03ba955f8afe8cdccadf742cc58",
        "author": "anand76",
        "date": "2022-12-19T11:38:42-08:00",
        "message": "Prevent db_stress failure when io_uring is disabled (#11045)\n\nSummary:\nThe IO uring usage is disabled in RocksDB by default and, as a result, PosixRandomAccessFile::ReadAsync returns a NotSupported() status. This was causing stress test failures with MultiGet and async_io combination. Fix it by relying on redirection of ReadAsync to Read when default Env is used in db_stress.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11045\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D42136213\n\nPulled By: anand1976\n\nfbshipit-source-id: fc7904d8ece74d7e8f2e1a34c3d70bd5774fb45f",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/692d6be3586fd03ba955f8afe8cdccadf742cc58"
    },
    {
        "hash": "1928902a6f3a33647b3b2a67cd13282f5b1f320f",
        "author": "sdong",
        "date": "2022-12-14T12:06:24-08:00",
        "message": "~SleepingBackgroundTask() to wake up the sleeping task (#11036)\n\nSummary:\nRight now, in unit tests, when background tests are sleeping using SleepingBackgroundTask, and the test exits with test assertion failure, the process will hang and it might prevent us to see the test failure message in CI runs. Try to wake up the thread so that the test can exit correctly.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11036\n\nTest Plan: Watch CI succeeds\n\nReviewed By: riversand963\n\nDifferential Revision: D42020489\n\nfbshipit-source-id: 5b8441b18d5f67bbb3ade59a1225a8d3c860c2eb",
        "modified_files_count": 1,
        "modified_files": [
            "test_util/testutil.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1928902a6f3a33647b3b2a67cd13282f5b1f320f"
    },
    {
        "hash": "00238a386b79af797f2276180bf1f3cb8c826cfc",
        "author": "Arvid Lunnemark",
        "date": "2022-12-12T10:39:53-08:00",
        "message": "replace sprintf with its safe version snprintf (v2) (#11011)\n\nSummary:\nsame motivations as https://github.com/facebook/rocksdb/pull/5475, applied to the last remaining `sprintf`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/11011\n\nReviewed By: pdillinger\n\nDifferential Revision: D41673500\n\nPulled By: ajkr\n\nfbshipit-source-id: 88618ea791cafad86a9a491799c45979d46e3544",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/00238a386b79af797f2276180bf1f3cb8c826cfc"
    },
    {
        "hash": "be3a62a2e7f70b573c8d977a90650bb217c62aa8",
        "author": "WLeoo",
        "date": "2022-11-30T19:27:28-08:00",
        "message": "Fix an uninitialized variable warning for g++ 12.2.0 (#10995)\n\nSummary:\n/home/wl/rocksdbtry/rocksdb-WL/util/bloom_test.cc: In constructor ‘rocksdb::RawFilterTester::RawFilterTester()’:\n/home/wl/rocksdbtry/rocksdb-WL/util/bloom_test.cc:813:40: error: member ‘rocksdb::RawFilterTester::data_’ is used uninitialized [-Werror=uninitialized]\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10995\n\nReviewed By: cbi42\n\nDifferential Revision: D41620186\n\nPulled By: ajkr\n\nfbshipit-source-id: a6ebd3820ef12e0af322cbfb7eb553de5bdfcb29",
        "modified_files_count": 1,
        "modified_files": [
            "util/bloom_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/be3a62a2e7f70b573c8d977a90650bb217c62aa8"
    },
    {
        "hash": "d8e792e4cfab21888418e6e510222977beeee6e3",
        "author": "jsteemann",
        "date": "2022-11-22T15:51:01-08:00",
        "message": "fix compile warnings (#10976)\n\nSummary:\nFixes lots of compile warnings related to missing override specifiers, e.g.\n```\n./3rdParty/rocksdb/trace_replay/block_cache_tracer.h:130:10: warning: ‘virtual rocksdb::Status rocksdb::BlockCacheTraceWriterImpl::WriteBlockAccess(const rocksdb::BlockCacheTraceRecord&, const rocksdb::Slice&, const rocksdb::Slice&, const rocksdb::Slice&)’ can be marked override [-Wsuggest-override]\n  130 |   Status WriteBlockAccess(const BlockCacheTraceRecord& record,\n      |          ^~~~~~~~~~~~~~~~\n./3rdParty/rocksdb/trace_replay/block_cache_tracer.h:136:10: warning: ‘virtual rocksdb::Status rocksdb::BlockCacheTraceWriterImpl::WriteHeader()’ can be marked override [-Wsuggest-override]\n  136 |   Status WriteHeader();\n      |          ^~~~~~~~~~~\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10976\n\nReviewed By: riversand963\n\nDifferential Revision: D41478588\n\nPulled By: ajkr\n\nfbshipit-source-id: d30b0457241999e38b16aacf6dabe3e691f7c46f",
        "modified_files_count": 1,
        "modified_files": [
            "trace_replay/block_cache_tracer.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d8e792e4cfab21888418e6e510222977beeee6e3"
    },
    {
        "hash": "db9cbddc6fbf95d9baee7c51ff0bda3e9d36982d",
        "author": "Andrew Kryczka",
        "date": "2022-11-22T13:07:17-08:00",
        "message": "Deflake DBTest2.TraceAndReplay by relaxing latency checks (#10979)\n\nSummary:\nSince the latency measurement uses real time it is possible for the operation to complete in zero microseconds and then fail these checks. We saw this with the operation that invokes Get() on an invalid CF. This PR relaxes the assertions to allow for operations completing in zero microseconds.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10979\n\nReviewed By: riversand963\n\nDifferential Revision: D41478300\n\nPulled By: ajkr\n\nfbshipit-source-id: 50ef096bd8f0162b31adb46f54ae6ddc337d0a5e",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/db9cbddc6fbf95d9baee7c51ff0bda3e9d36982d"
    },
    {
        "hash": "b55e70357cacba44f47edec2a7d0f8696e2154ac",
        "author": "Peter Dillinger",
        "date": "2022-11-15T10:47:15-08:00",
        "message": "Re-arrange cache.h to prepare for refactoring (#10942)\n\nSummary:\nNo material changes to code or comments, just re-arranging things to prepare for a big refactoring, making it easier to what changed. Some specifics:\n* This groups things together in Cache in anticipation of secondary cache features being marked production-ready (vs. experimental).\n* CacheEntryRole will be needed in definition of class Cache, so that has been moved above it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10942\n\nTest Plan: existing tests\n\nReviewed By: anand1976\n\nDifferential Revision: D41205509\n\nPulled By: pdillinger\n\nfbshipit-source-id: 3f2559ab1651c758918dc97056951fa2b5eb0348",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/cache.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b55e70357cacba44f47edec2a7d0f8696e2154ac"
    },
    {
        "hash": "b644baa1eb1291adf20c1b9d36c74d4341e55e11",
        "author": "Levi Tamasi",
        "date": "2022-11-15T08:06:41-08:00",
        "message": "Support using GetMergeOperands for verification with wide columns (#10952)\n\nSummary:\nWith the recent changes, `GetMergeOperands` is now supported for wide-column entities as well, so we can use it for verification purposes in the non-batched stress tests.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10952\n\nTest Plan: Ran a simple non-batched ops blackbox crash test.\n\nReviewed By: riversand963\n\nDifferential Revision: D41292114\n\nPulled By: ltamasi\n\nfbshipit-source-id: 70b4c756a4a1fecb445c16c7096aad805a51203c",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b644baa1eb1291adf20c1b9d36c74d4341e55e11"
    },
    {
        "hash": "1562524e63229f41547f8d72c88001a4e259a4c3",
        "author": "Akanksha Mahajan",
        "date": "2022-11-14T16:14:41-08:00",
        "message": "Fix db_stress failure in async_io in FilePrefetchBuffer (#10949)\n\nSummary:\nFix db_stress failure in async_io in FilePrefetchBuffer.\n\nFrom the logs, assertion was caused when\n- prev_offset_ = offset but somehow prev_len != 0 and explicit_prefetch_submitted_ = true. That scenario is when we send async request to prefetch buffer during seek but in second seek that data is found in cache. prev_offset_ and prev_len_ get updated but we were not setting explicit_prefetch_submitted_ = false because of which buffers were getting out of sync.\nIt's possible a read by another thread might have loaded the block into the cache in the meantime.\n\nParticular assertion example:\n```\nprev_offset: 0, prev_len_: 8097 , offset: 0, length: 8097, actual_length: 8097 , actual_offset: 0 ,\ncurr_: 0, bufs_[curr_].offset_: 4096 ,bufs_[curr_].CurrentSize(): 48541 , async_len_to_read: 278528, bufs_[curr_].async_in_progress_: false\nsecond: 1, bufs_[second].offset_: 282624 ,bufs_[second].CurrentSize(): 0, async_len_to_read: 262144 ,bufs_[second].async_in_progress_: true ,\nexplicit_prefetch_submitted_: true , copy_to_third_buffer: false\n```\nAs we can see curr_ was expected to read 278528 but it read 48541. Also buffers are out of sync.\nAlso `explicit_prefetch_submitted_` is set true but prev_len not 0.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10949\n\nTest Plan:\n- Ran db_bench for regression to make sure there is no regression;\n- Ran db_stress failing without this fix,\n- Ran build-linux-mini-crashtest 7- 8 times locally + CircleCI\n\nReviewed By: anand1976\n\nDifferential Revision: D41257786\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 1d100f94f8c06bbbe4cc76ca27f1bbc820c2494f",
        "modified_files_count": 1,
        "modified_files": [
            "file/file_prefetch_buffer.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1562524e63229f41547f8d72c88001a4e259a4c3"
    },
    {
        "hash": "8515437594c572153a1473dad87b583d39f9a95d",
        "author": "akankshamahajan",
        "date": "2022-11-14T11:39:22-08:00",
        "message": "Update unit test to avoid timeout (#10950)\n\nSummary:\nUpdate unit test to avoid timeout\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10950\n\nReviewed By: hx235\n\nDifferential Revision: D41258892\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: cbfe94da63e9e54544a307845deb79ba42458301",
        "modified_files_count": 1,
        "modified_files": [
            "file/prefetch_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8515437594c572153a1473dad87b583d39f9a95d"
    },
    {
        "hash": "9460d4b77ea06bfd7be3d334944d023f5509424e",
        "author": "Levi Tamasi",
        "date": "2022-11-10T17:29:57-08:00",
        "message": "Refactor MergeHelper::MergeUntil a bit (#10943)\n\nSummary:\nThe patch untangles some nested ifs in `MergeHelper::MergeUntil`. This will come in handy when extending the compaction logic to support `Merge` for wide-column entities, and also enables us to eliminate some repeated branching on value type and to decrease the scope of some variables.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10943\n\nTest Plan: `make check`\n\nReviewed By: riversand963\n\nDifferential Revision: D41201946\n\nPulled By: ltamasi\n\nfbshipit-source-id: 890bd3d4e31cdccadca614489a94686d76485ba9",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9460d4b77ea06bfd7be3d334944d023f5509424e"
    },
    {
        "hash": "c62f3221698fd273b673d4f7e54eabb8329a4369",
        "author": "Levi Tamasi",
        "date": "2022-11-08T14:49:16-08:00",
        "message": "Clear saved value in DBIter::{Next, Prev} (#10934)\n\nSummary:\n`DBIter::saved_value_` stores the result of any `Merge` that was performed to compute the iterator's current value. This value can be ditched whenever the iterator's position is changed, and is already cleared in `Seek`, `SeekForPrev`, `SeekToFirst`, and `SeekToLast`. With the patch, it is also cleared in `Next` and `Prev`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10934\n\nTest Plan: `make check`\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D41133473\n\nPulled By: ltamasi\n\nfbshipit-source-id: cf9e936f48151e64e455cc1664d6e9f4a03aa308",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c62f3221698fd273b673d4f7e54eabb8329a4369"
    },
    {
        "hash": "aafe7bd3760f58a60a010984492377c30e9b0b14",
        "author": "anand76",
        "date": "2022-11-04T11:01:33-07:00",
        "message": "Add multireadwhilewriting benchmark to db_bench (#10919)\n\nSummary:\nAdd the new benchmark\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10919\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D41017025\n\nPulled By: anand1976\n\nfbshipit-source-id: 5220815d66de1f689b7f09d9c5266cebf4e345d1",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aafe7bd3760f58a60a010984492377c30e9b0b14"
    },
    {
        "hash": "0547cecb8190b09089cfa28ce8facdb4be41b115",
        "author": "Yanqin Jin",
        "date": "2022-11-02T14:54:58-07:00",
        "message": "Reduce access to atomic variables in a test (#10909)\n\nSummary:\nWith TSAN build on CircleCI (see mini-tsan in .circleci/config).\nSometimes `SeqAdvanceConcurrentTest.SeqAdvanceConcurrent` will get stuck when an experimental feature called\n\"unordered write\" is enabled. Stack trace will be the following\n```\nThread 7 (Thread 0x7f2284a1c700 (LWP 481523) \"write_prepared_\"):\n#0  0x00000000004fa3f5 in __tsan_atomic64_load () at ./db/merge_context.h:15\nhttps://github.com/facebook/rocksdb/issues/1  0x00000000005e5942 in std::__atomic_base<unsigned long>::load (this=0x7b74000012f8, __m=std::memory_order_seq_cst) at /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:481\nhttps://github.com/facebook/rocksdb/issues/2  std::__atomic_base<unsigned long>::operator unsigned long (this=0x7b74000012f8) at /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:341\nhttps://github.com/facebook/rocksdb/issues/3  0x00000000005bf001 in rocksdb::SeqAdvanceConcurrentTest_SeqAdvanceConcurrent_Test::TestBody()::$_9::operator()(void*) const (this=0x7b14000085e8) at utilities/transactions/write_prepared_transaction_test.cc:1702\n\nThread 6 (Thread 0x7f228421b700 (LWP 481521) \"write_prepared_\"):\n#0  0x000000000052178c in __tsan::MetaMap::GetAndLock(__tsan::ThreadState*, unsigned long, unsigned long, bool, bool) () at ./db/merge_context.h:15\nhttps://github.com/facebook/rocksdb/issues/1  0x00000000004fa48e in __tsan_atomic64_load () at ./db/merge_context.h:15\nhttps://github.com/facebook/rocksdb/issues/2  0x00000000005e5942 in std::__atomic_base<unsigned long>::load (this=0x7b74000012f8, __m=std::memory_order_seq_cst) at /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:481\nhttps://github.com/facebook/rocksdb/issues/3  std::__atomic_base<unsigned long>::operator unsigned long (this=0x7b74000012f8) at /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h:341\nhttps://github.com/facebook/rocksdb/issues/4  0x00000000005bf001 in rocksdb::SeqAdvanceConcurrentTest_SeqAdvanceConcurrent_Test::TestBody()::$_9::operator()(void*) const (this=0x7b14000085e8) at utilities/transactions/write_prepared_transaction_test.cc:1702\n```\n\nThis is problematic and suspicious. Two threads will get stuck in the same place trying to load from an atomic variable.\nhttps://github.com/facebook/rocksdb/blob/7.8.fb/utilities/transactions/write_prepared_transaction_test.cc#L1694:L1707. Not sure why two threads can reach the same point.\n\nThe stack trace shows that there may be a deadlock, since the two threads are on the same write thread (one is doing Prepare, while the other is trying to commit).\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10909\n\nTest Plan:\nOn CircleCI mini-tsan, apply a patch first so that we have a higher chance of hitting the same problematic situation,\n```\n diff --git a/utilities/transactions/write_prepared_transaction_test.cc b/utilities/transactions/write_prepared_transaction_test.cc\nindex 4bc1f3744..bd5dc4924 100644\n --- a/utilities/transactions/write_prepared_transaction_test.cc\n+++ b/utilities/transactions/write_prepared_transaction_test.cc\n@@ -1714,13 +1714,13 @@ TEST_P(SeqAdvanceConcurrentTest, SeqAdvanceConcurrent) {\n       size_t d = (n % base[bi + 1]) / base[bi];\n       switch (d) {\n         case 0:\n-          threads.emplace_back(txn_t0, bi);\n+          threads.emplace_back(txn_t3, bi);\n           break;\n         case 1:\n-          threads.emplace_back(txn_t1, bi);\n+          threads.emplace_back(txn_t3, bi);\n           break;\n         case 2:\n-          threads.emplace_back(txn_t2, bi);\n+          threads.emplace_back(txn_t3, bi);\n           break;\n         case 3:\n           threads.emplace_back(txn_t3, bi);\n```\nthen build and run tests\n```\nCOMPILE_WITH_TSAN=1 CC=clang-13 CXX=clang++-13 ROCKSDB_DISABLE_ALIGNED_NEW=1 USE_CLANG=1 make V=1 -j32 check\ngtest-parallel -r 100 ./write_prepared_transaction_test --gtest_filter=TwoWriteQueues/SeqAdvanceConcurrentTest.SeqAdvanceConcurrent/19\n```\nIn the above, `SeqAdvanceConcurrent/19`. The tests 10 to 19 correspond to unordered write in which Prepare() and Commit() can both enter the same write thread.\nBefore this PR, there is a high chance of hitting the deadlock. With this PR, no deadlock has been encountered so far.\n\nReviewed By: ltamasi\n\nDifferential Revision: D40869387\n\nPulled By: riversand963\n\nfbshipit-source-id: 81e82a70c263e4f3417597a201b081ee54f1deab",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0547cecb8190b09089cfa28ce8facdb4be41b115"
    },
    {
        "hash": "d80baa139638a93e22b4572f5645b48036adb829",
        "author": "Brord van Wierst",
        "date": "2022-11-02T14:42:42-07:00",
        "message": "Added placeholders for MADV defines (#10881)\n\nSummary:\nCross compiling rocksdb with rust bindings to android leads to an error since 7.4.0 (Incusion of madvise)\nThis is due to missing placeholders for non-linux platforms.\n\nThis PR adds the missing placeholders.\n\nSee https://github.com/rust-rocksdb/rust-rocksdb/issues/697 for the specific error thrown.\n\nI have just completed the CLA :)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10881\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D40726103\n\nPulled By: ajkr\n\nfbshipit-source-id: 6b391636a74ef7e20d0daf47d332ddf0c14d5c34",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d80baa139638a93e22b4572f5645b48036adb829"
    },
    {
        "hash": "4a6906e28ce058f6cea085b394a1adbd19aa468e",
        "author": "Brad Smith",
        "date": "2022-11-02T14:35:27-07:00",
        "message": "Add OpenBSD/arm64 support for detection of CRC32 and PMULL (#10902)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/10902\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D40839659\n\nPulled By: ajkr\n\nfbshipit-source-id: 06be5919622f8cce1fce1097c5e654900bf7f8fb",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c_arm64.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4a6906e28ce058f6cea085b394a1adbd19aa468e"
    },
    {
        "hash": "36f5e19e33added8f1f5eefcf54ea76735822dd3",
        "author": "Jay Zhuang",
        "date": "2022-10-28T14:24:48-07:00",
        "message": "Fix a Windows build error (#10897)\n\nSummary:\nThe for loop is marked as unreachable code because it will never call the increment. Switch it to `if`.\n\n```\n\\table\\merging_iterator.cc(823): error C2220: the following warning is treated as an error\n\\table\\merging_iterator.cc(823): warning C4702: unreachable code\n\\table\\merging_iterator.cc(1030): error C2220: the following warning is treated as an error\n\\table\\merging_iterator.cc(1030): warning C4702: unreachable code\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10897\n\nReviewed By: cbi42\n\nDifferential Revision: D40811790\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: fe8fd3e7cf3d6f710360c402b79763854d5120df",
        "modified_files_count": 1,
        "modified_files": [
            "table/merging_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/36f5e19e33added8f1f5eefcf54ea76735822dd3"
    },
    {
        "hash": "3e686c7cbee8d500f33293149bbb87de169cb3e0",
        "author": "sdong",
        "date": "2022-10-27T11:56:09-07:00",
        "message": "sst_dump --command=raw to add index offset information (#10873)\n\nSummary:\nAdd some extra information in outputs of \"sst_dump --command=raw\" to help debug some issues. Right now, encoded block handle is printed out. It is more useful to directly print out offset and size.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10873\n\nTest Plan: Manually run it against a file and check the output.\n\nReviewed By: anand1976\n\nDifferential Revision: D40742289\n\nfbshipit-source-id: 04d7de26e7f27e1595a7cc3ac1c1082e4e835b93",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3e686c7cbee8d500f33293149bbb87de169cb3e0"
    },
    {
        "hash": "5fef34fd3a42b31abb0e454d467e0128b115a69c",
        "author": "anand76",
        "date": "2022-10-26T22:34:36-07:00",
        "message": "Fix a potential std::vector use after move bug (#10845)\n\nSummary:\nThe call to `folly::coro::collectAllRange()` should move the input `mget_tasks`. But just in case, assert and clear the std::vector before reusing.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10845\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D40611719\n\nPulled By: anand1976\n\nfbshipit-source-id: 0f32b387cf5a2894b13389016c020b01ab479b5e",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5fef34fd3a42b31abb0e454d467e0128b115a69c"
    },
    {
        "hash": "5d3953114ff0dc147a818c789b2e9c96051ccde8",
        "author": "Peter Dillinger",
        "date": "2022-10-26T18:07:57-07:00",
        "message": "Fix include of windows.h in mmap.h (#10885)\n\nSummary:\nIf windows.h is not included in a particular way, it can conflict with other code including it. I don't know all the details, but having just one standard place where we include windows.h in header files seems best and seems to fix the internal issue we hit.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10885\n\nTest Plan: CI and internal validation\n\nReviewed By: anand1976\n\nDifferential Revision: D40738945\n\nPulled By: pdillinger\n\nfbshipit-source-id: 88f635e895b1c7b810baad159e6dbb8351344cac",
        "modified_files_count": 1,
        "modified_files": [
            "port/mmap.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5d3953114ff0dc147a818c789b2e9c96051ccde8"
    },
    {
        "hash": "0ed1a800edd41f07a033f46fa379744f55aa269f",
        "author": "akankshamahajan",
        "date": "2022-10-24T17:13:26-07:00",
        "message": "Fix override error in system_clock.h (#10858)\n\nSummary:\nFix error\n```\n rocksdb/system_clock.h:30:11: error: '~SystemClock' overrides a destructor but is not marked 'override' [-Werror,-Wsuggest-destructor-override]\nvirtual ~SystemClock() {}\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10858\n\nTest Plan: Ran internally\n\nReviewed By: siying\n\nDifferential Revision: D40652374\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 5dda8ca03ea57d709442c87e23e5fe097d7db672",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/system_clock.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ed1a800edd41f07a033f46fa379744f55aa269f"
    },
    {
        "hash": "966cd42c7d58bca3af9c16b5d6d5df49a72ef7b4",
        "author": "akankshamahajan",
        "date": "2022-10-24T16:13:16-07:00",
        "message": "Update header file to include right copyright (#10854)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/10854\n\nReviewed By: siying\n\nDifferential Revision: D40651483\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 95ce53297e9699a34cc80439bc7553f6cc3ac957",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/block_cache_trace_writer.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/966cd42c7d58bca3af9c16b5d6d5df49a72ef7b4"
    },
    {
        "hash": "b6e33dbc0e9787213b9a0ca8f232592ded68a30f",
        "author": "Peter Dillinger",
        "date": "2022-10-21T12:09:03-07:00",
        "message": "Fix HyperClockCache Rollback bug in #10801 (#10843)\n\nSummary:\nIn https://github.com/facebook/rocksdb/issues/10801 in ClockHandleTable::Evict, we saved a reference to the hash value (`const UniqueId64x2& hashed_key`) instead of saving the hash value itself before marking the handle as empty and thus free for use by other threads. This could lead to Rollback seeing the wrong hash value for updating the `displacements` after an entry is removed.\n\nThe fix is (like other places) to copy the hash value before it's released. (We could Rollback while we own the entry, but that creates more dependences between atomic updates, because in that case, based on the code, the Rollback writes would have to happen before or after the entry is released by marking empty. By doing the relaxed Rollback after marking empty, there's more opportunity for re-ordering / ILP.)\n\nIntended follow-up: refactoring for better code sharing in clock_cache.cc\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10843\n\nTest Plan: watch for clean crash test, TSAN\n\nReviewed By: siying\n\nDifferential Revision: D40579680\n\nPulled By: pdillinger\n\nfbshipit-source-id: 258e43b3b80bc980a161d5c675ccc6708ecb8025",
        "modified_files_count": 1,
        "modified_files": [
            "cache/clock_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b6e33dbc0e9787213b9a0ca8f232592ded68a30f"
    },
    {
        "hash": "8dd4bf6cffcd88776e42f46702f6625222273287",
        "author": "Levi Tamasi",
        "date": "2022-10-21T10:05:46-07:00",
        "message": "Separate the handling of value types in SaveValue (#10840)\n\nSummary:\nCurrently, the code in `SaveValue` that handles `kTypeValue` and\n`kTypeBlobIndex` (and more recently, `kTypeWideColumnEntity`) is\nmostly shared. This made sense originally; however, by now the\nhandling of these three value types has diverged significantly. The\npatch makes the logic cleaner and also eliminates quite a bit of branching\nby giving each value type its own `case` and removing a fall-through.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10840\n\nTest Plan: `make check`\n\nReviewed By: riversand963\n\nDifferential Revision: D40568420\n\nPulled By: ltamasi\n\nfbshipit-source-id: 2e614606afd1c3d9c76d9b5f1efa0959fc174103",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8dd4bf6cffcd88776e42f46702f6625222273287"
    },
    {
        "hash": "1ee747d7950d04d324437e86448d98763b3147a9",
        "author": "Peter Dillinger",
        "date": "2022-10-13T09:08:09-07:00",
        "message": "Deflake^2 DBBloomFilterTest.OptimizeFiltersForHits (#10816)\n\nSummary:\nThis reverts https://github.com/facebook/rocksdb/issues/10792 and uses a different strategy to stabilize the test: remove the unnecessary randomness by providing a constant seed for shuffling keys.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10816\n\nTest Plan: `gtest-parallel ./db_bloom_filter_test -r1000 --gtest_filter=*ForHits*`\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D40347957\n\nPulled By: pdillinger\n\nfbshipit-source-id: a270e157485cbd94ed03b80cdd21b954ebd57d57",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bloom_filter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1ee747d7950d04d324437e86448d98763b3147a9"
    },
    {
        "hash": "23b7dc2f4ffb0c8c8b114ca35b28767299442720",
        "author": "Levi Tamasi",
        "date": "2022-10-12T11:43:34-07:00",
        "message": "Check columns in CfConsistencyStressTest::VerifyDb (#10804)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/10804\n\nReviewed By: riversand963\n\nDifferential Revision: D40279057\n\nPulled By: ltamasi\n\nfbshipit-source-id: 9efc3dae7f5eaab162d55a41c58c2535b0a53054",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/cf_consistency_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/23b7dc2f4ffb0c8c8b114ca35b28767299442720"
    },
    {
        "hash": "5182bf3f83c17946887dcb3e881bd7e64bfd0aae",
        "author": "Levi Tamasi",
        "date": "2022-10-10T15:07:07-07:00",
        "message": "Skip column validation for non-value types when iter_start_ts is set (#10799)\n\nSummary:\nWhen the `iter_start_ts` read option is set, iterator exposes internal keys. This also includes tombstones, which by definition do not have a value (or columns). The patch makes sure we skip the wide-column consistency check in this case.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10799\n\nTest Plan: Tested using a simple blackbox crash test with timestamps enabled.\n\nReviewed By: jay-zhuang, riversand963\n\nDifferential Revision: D40235628\n\nfbshipit-source-id: 49519fb55d8fe2bb9249ced809f7a81bff2b9df2",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5182bf3f83c17946887dcb3e881bd7e64bfd0aae"
    },
    {
        "hash": "a6ce1955b135ab863268be13e01e23fbea3bf665",
        "author": "Changyu Bi",
        "date": "2022-10-10T13:58:55-07:00",
        "message": "Fix flaky test ShuttingDownNotBlockStalledWrites (#10800)\n\nSummary:\nDBTest::ShuttingDownNotBlockStalledWrites is flaky, added new sync point dependency to fix it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10800\n\nTest Plan: gtest-parallel --repeat=1000 ./db_test --gtest_filter=\"*ShuttingDownNotBlockStalledWrites\"\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D40239116\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 8c2d7e7df58f202d287bd9f5c9b60b7eff270d0c",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a6ce1955b135ab863268be13e01e23fbea3bf665"
    },
    {
        "hash": "62ba5c80343e5ab097415f709f92043309c86d6e",
        "author": "Jay Zhuang",
        "date": "2022-10-10T12:34:25-07:00",
        "message": "Deflake DBBloomFilterTest.OptimizeFiltersForHits (#10792)\n\nSummary:\nThe test may fail because the L5 files may only cover small portion of the whole key range.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10792\n\nTest Plan:\n```\ngtest-parallel ./db_bloom_filter_test --gtest_filter=DBBloomFilterTest.OptimizeFiltersForHits -r 1000 -w 100\n```\n\nReviewed By: siying\n\nDifferential Revision: D40217600\n\nPulled By: siying\n\nfbshipit-source-id: 18db549184bccf5e513eaa7e31ab17385b71ef71",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bloom_filter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/62ba5c80343e5ab097415f709f92043309c86d6e"
    },
    {
        "hash": "8b430e01dc91ec95194df71a794dfd3088afdfe6",
        "author": "Changyu Bi",
        "date": "2022-10-03T16:22:39-07:00",
        "message": "Add iterator refresh to stress test (#10766)\n\nSummary:\nadded calls to `Iterator::Refresh()` in `NonBatchedOpsStressTest::TestIterateAgainstExpected()`. The testing key range is locked in `TestIterateAgainstExpected` so I do not expect this change to provide thorough stress test to `Iterator::Refresh()`. However, it can still be helpful for catching bugs like https://github.com/facebook/rocksdb/issues/10739. Will add calls to refresh in `TestIterate` once we support iterator refresh with snapshots.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10766\n\nTest Plan: `python3 tools/db_crashtest.py whitebox --simple --verify_iterator_with_expected_state_one_in=2`\n\nReviewed By: ajkr\n\nDifferential Revision: D40008320\n\nPulled By: ajkr\n\nfbshipit-source-id: cec93b07f915ef6476d41c1fee9b23c115188085",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8b430e01dc91ec95194df71a794dfd3088afdfe6"
    },
    {
        "hash": "793fd097838fe6e25e0ac33744b7adad63eb0c16",
        "author": "anand76",
        "date": "2022-09-30T13:37:05-07:00",
        "message": "Track expected state only if expected values dir is non-empty (#10764)\n\nSummary:\nIf the `-expected_values_dir` argument to db_stress is empty, then verification against expected state is effectively disabled. But `RunStressTest` still calls `TrackExpectedState`, which returns `NotSupported` causing a the crash test to fail with a false alarm. Fix it by only calling `TrackExpectedState` if necessary.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10764\n\nReviewed By: ajkr\n\nDifferential Revision: D39980129\n\nPulled By: anand1976\n\nfbshipit-source-id: d02651746fe3a297877a4b2b2fbcb7274860f49c",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_driver.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/793fd097838fe6e25e0ac33744b7adad63eb0c16"
    },
    {
        "hash": "dc9f499639ee437006aed36d31eb4887511777aa",
        "author": "Andrew Kryczka",
        "date": "2022-09-28T16:21:43-07:00",
        "message": "db_stress TestIngestExternalFile avoid empty files (#10754)\n\nSummary:\nIf all the keys in range [key_base, shared->GetMaxKey()) are non-overwritable `TestIngestExternalFile()` would attempt to ingest a file with zero keys, leading to the following error: \"Cannot create sst file with no entries\". This PR changes `TestIngestExternalFile()` to return early in that case instead of going through with the ingestion attempt.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10754\n\nReviewed By: hx235\n\nDifferential Revision: D39909195\n\nPulled By: ajkr\n\nfbshipit-source-id: e06e6b9cc24826fbd450e5130885e6f07164badd",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dc9f499639ee437006aed36d31eb4887511777aa"
    },
    {
        "hash": "b0d8ccbbcaf14cb68dd11cfa7a7586732d180df9",
        "author": "Andrew Kryczka",
        "date": "2022-09-28T15:17:12-07:00",
        "message": "db_stress print TestMultiGet error value in hex (#10753)\n\nSummary:\nWithout this fix, db_crashtest.py could fail with useless output such as: `UnicodeDecodeError: 'utf-8' codec can't decode byte 0xa0 in position 267: invalid start byte`\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10753\n\nReviewed By: hx235\n\nDifferential Revision: D39905809\n\nPulled By: ajkr\n\nfbshipit-source-id: 50ba2cf20d206eeb168309cec137e827a34c8f0b",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b0d8ccbbcaf14cb68dd11cfa7a7586732d180df9"
    },
    {
        "hash": "d2578ab195a9c108444392de0752faf58e9c0ea5",
        "author": "Yanqin Jin",
        "date": "2022-09-27T20:12:13-07:00",
        "message": "Add DECLARE_uint32 to gflags compatibility (#10729)\n\nSummary:\nOlder versions of gflags do not have `DEFINE_uint32` and `DECLARE_uint32`. In util/gflag_compat.h, we already add a hack for `DEFINE_uint32`. This PR adds a hack for `DECLARE_uint32`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10729\n\nTest Plan:\nROCKSDB_NO_FBCODE=1 make V=1 -j16 db_stress\nmake check\n\nResolves https://github.com/facebook/rocksdb/issues/10704\n\nReviewed By: pdillinger\n\nDifferential Revision: D39789183\n\nPulled By: riversand963\n\nfbshipit-source-id: a58747e0163dcf55dd762733aa5c40d8f0ae70a6",
        "modified_files_count": 1,
        "modified_files": [
            "util/gflags_compat.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d2578ab195a9c108444392de0752faf58e9c0ea5"
    },
    {
        "hash": "2280b2612a1be080d5219762e0ded53a2c2c974d",
        "author": "Levi Tamasi",
        "date": "2022-09-26T15:33:36-07:00",
        "message": "Small cleanup in NonBatchedOpsStressTest::VerifyDb (#10740)\n\nSummary:\nThe PR cleans up the logic in `NonBatchedOpsStressTest::VerifyDb` so that\nthe verification method is picked using a single random number generation.\nIt also eliminates some repeated key comparisons and makes some small\ncode hygiene improvements.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10740\n\nTest Plan: Ran a simple blackbox crash test.\n\nReviewed By: riversand963\n\nDifferential Revision: D39828646\n\nPulled By: ltamasi\n\nfbshipit-source-id: 60ee5a3bb1851278f62c7d83b0c93b902ed9702e",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2280b2612a1be080d5219762e0ded53a2c2c974d"
    },
    {
        "hash": "6d2a9832d95617cbce414bd59f5cd373c7709c36",
        "author": "Levi Tamasi",
        "date": "2022-09-23T08:27:41-07:00",
        "message": "Clarify API comments for blob_cache/prepopulate_blob_cache (#10723)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/10723\n\nReviewed By: riversand963\n\nDifferential Revision: D39749277\n\nPulled By: ltamasi\n\nfbshipit-source-id: 4bda94b4620a0db1fcd4309c7ad03fc23e8718cb",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/advanced_options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6d2a9832d95617cbce414bd59f5cd373c7709c36"
    },
    {
        "hash": "013305af1325388bd1fb5d62c1045f7fdb0a7afc",
        "author": "Changyu Bi",
        "date": "2022-09-21T14:08:10-07:00",
        "message": "Fix potential memory leak in ArenaWrappedDBIter::Refresh() (#10716)\n\nSummary:\nFix potential memory leak in ArenaWrappedDBIter::Refresh() introduced in https://github.com/facebook/rocksdb/issues/10705. See https://github.com/facebook/rocksdb/pull/10705#discussion_r976765905 for detail.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10716\n\nTest Plan: make check\n\nReviewed By: ajkr\n\nDifferential Revision: D39698561\n\nPulled By: cbi42\n\nfbshipit-source-id: dc0d0c6e3878eaa84f87623fbe4916b9b08b077a",
        "modified_files_count": 1,
        "modified_files": [
            "db/arena_wrapped_db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/013305af1325388bd1fb5d62c1045f7fdb0a7afc"
    },
    {
        "hash": "92df36985dc098e4390d3ac4b607adabb3d1df24",
        "author": "Jay Zhuang",
        "date": "2022-09-19T14:10:05-07:00",
        "message": "Deflake CompactionServiceTest.BasicCompactions (#10697)\n\nSummary:\nThe background compaction may still running while the test end, which would cause ASAN stack-use-after-scope error.\nExplicitly close the DB before test end.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10697\n\nTest Plan:\nable to reproduce with:\n```\ngtest-parallel ./compaction_service_test --gtest_filter=CompactionServiceTest.BasicCompactions -r 10000 -w 100\n```\n\nReviewed By: gitbw95\n\nDifferential Revision: D39590974\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: da264b2e6a276afbda7d5ff7adb9d7b8d4213d90",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_service_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/92df36985dc098e4390d3ac4b607adabb3d1df24"
    },
    {
        "hash": "01ebe8a5f7e3902fe2c58eaaf3fd712697849997",
        "author": "anand76",
        "date": "2022-09-18T19:00:48-07:00",
        "message": "Fix invalid reference in MultiGet due to vector resizing (#10702)\n\nSummary:\nFix invalid reference in MultiGet due to resizing of the ```batches``` autovector.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10702\n\nTest Plan: Run asan crash test\n\nReviewed By: riversand963\n\nDifferential Revision: D39608753\n\nPulled By: anand1976\n\nfbshipit-source-id: 7a9e7fc6f436f08eb22003d0e6b0e1e4dcdc1a2a",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/01ebe8a5f7e3902fe2c58eaaf3fd712697849997"
    },
    {
        "hash": "e053ccde997e01d02f9e3a5d07f9a31e15e8a129",
        "author": "anand76",
        "date": "2022-09-16T13:18:42-07:00",
        "message": "Fix an incorrect MultiGet assertion (#10695)\n\nSummary:\nThe assertion in ```FilePickerMultiGet::ReplaceRange()``` was incorrect. The function should only be called to replace the range after finishing the search in the current level, which is indicated by ```hit_file_ == nullptr``` i.e no more overlapping files in this level.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10695\n\nReviewed By: gitbw95\n\nDifferential Revision: D39583217\n\nPulled By: anand1976\n\nfbshipit-source-id: d4cedfb2b62fb9f3a083e9848a403ae6342f0519",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e053ccde997e01d02f9e3a5d07f9a31e15e8a129"
    },
    {
        "hash": "c206aebd0bf77554c5f8d76ed7567cfccf0597ab",
        "author": "anand76",
        "date": "2022-09-15T19:18:52-07:00",
        "message": "Fix a MultiGet crash (#10688)\n\nSummary:\nFix a bug in the async IO/coroutine version of MultiGet that may cause a segfault or assertion failure due to accessing an invalid file index in a LevelFilesBrief. The bug is that when a MultiGetRange is split into two, we may re-process keys in the original range that were already marked to be skipped (in ```current_level_range_```) due to not overlapping the level.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10688\n\nReviewed By: gitbw95\n\nDifferential Revision: D39556131\n\nPulled By: anand1976\n\nfbshipit-source-id: 65e79438508a283cb19e64eca5c91d0714b81458",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c206aebd0bf77554c5f8d76ed7567cfccf0597ab"
    },
    {
        "hash": "7dad48527853ba8c89fb32e0fcdb4fc1cd8e7e37",
        "author": "Levi Tamasi",
        "date": "2022-09-15T13:44:46-07:00",
        "message": "Support JemallocNodumpAllocator for the block/blob cache in db_bench (#10685)\n\nSummary:\nThe patch makes it possible to use the `JemallocNodumpAllocator` with the\nblock/blob caches in `db_bench`. In addition to its stated purpose of excluding\ncache contents from core dumps, `JemallocNodumpAllocator` also uses\na dedicated arena and jemalloc tcaches for cache allocations, which can\nreduce fragmentation and thus memory usage.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10685\n\nReviewed By: riversand963\n\nDifferential Revision: D39552261\n\nPulled By: ltamasi\n\nfbshipit-source-id: b5c58eab6b7c1baa9a307d9f1248df1d7a77d2b5",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7dad48527853ba8c89fb32e0fcdb4fc1cd8e7e37"
    },
    {
        "hash": "b418ace3528460e668d089bb2c300c3f070c2648",
        "author": "Bo Wang",
        "date": "2022-09-15T11:14:48-07:00",
        "message": "Disable PersistentCacheTierTest.BasicTest (#10683)\n\nSummary:\nDisable this flaky test since PersistentCache is not used.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10683\n\nTest Plan: Unit Tests\n\nReviewed By: cbi42\n\nDifferential Revision: D39545974\n\nPulled By: gitbw95\n\nfbshipit-source-id: ac53e96f6ba880e7612e325eb5ff22ee2799efed",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/persistent_cache/persistent_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b418ace3528460e668d089bb2c300c3f070c2648"
    },
    {
        "hash": "bb9a6d4e4be301f7c743a3399e39752784b659ef",
        "author": "anand76",
        "date": "2022-09-14T09:59:54-07:00",
        "message": "Bypass a MultiGet test when async_io is used (#10669)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/10669\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D39492658\n\nPulled By: anand1976\n\nfbshipit-source-id: abef79808e30762654680f7dd7e46487c631febc",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bb9a6d4e4be301f7c743a3399e39752784b659ef"
    },
    {
        "hash": "bd2ad2f9a0bc368aa1c183ac9acb8215dc3fc0d7",
        "author": "Akanksha Mahajan",
        "date": "2022-09-12T14:48:06-07:00",
        "message": "Fix stress test failure for async_io (#10660)\n\nSummary:\nSanitize initial_auto_readahead_size if its greater than max_auto_readahead_size in case of async_io\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10660\n\nTest Plan: Ran db_stress with intitial_auto_readahead_size  greater than max_auto_readahead_size.\n\nReviewed By: anand1976\n\nDifferential Revision: D39408095\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 07f933242f636cfbc7ccf042e0c8b959a8ec5f3a",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_prefetcher.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bd2ad2f9a0bc368aa1c183ac9acb8215dc3fc0d7"
    },
    {
        "hash": "5a97e6b1d23fec6ce70bb919e67878cbc2444372",
        "author": "Andrew Kryczka",
        "date": "2022-09-06T13:01:05-07:00",
        "message": "Deflake blob caching tests (#10636)\n\nSummary:\nExample failure:\n\n```\ndb/blob/db_blob_basic_test.cc:226: Failure\nExpected equality of these values:\n  i\n    Which is: 1\n  num_blobs\n    Which is: 5\n```\n\nI can't repro locally, but it looks like the 2KB cache is too small to guarantee no eviction happens between loading all the data into cache and reading from `kBlockCacheTier`. This 2KB setting appears to have come from a test where the cached entries are pinned, where it makes sense to have a small setting. However, such a small setting makes less sense when the blocks are evictable but must remain cached per the test's expectation. This PR increases the capacity setting to 2MB for those cases.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10636\n\nReviewed By: cbi42\n\nDifferential Revision: D39250976\n\nPulled By: ajkr\n\nfbshipit-source-id: 769309f9a19cfac20b67b927805c8df5c1d2d1f5",
        "modified_files_count": 1,
        "modified_files": [
            "db/blob/db_blob_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5a97e6b1d23fec6ce70bb919e67878cbc2444372"
    },
    {
        "hash": "1ffadbe9fcee94b8537bcf8cb7a1e2075d112bf7",
        "author": "Andrew Kryczka",
        "date": "2022-09-06T12:59:02-07:00",
        "message": "Deflake DBErrorHandlingFSTest.*WALWriteError (#10642)\n\nSummary:\nExample flake: https://app.circleci.com/pipelines/github/facebook/rocksdb/17660/workflows/7a891875-f07b-4a67-b204-eaa7ca9f9aa2/jobs/467496\n\nThe test could get stuck in out-of-space due to a callback executing `SetFilesystemActive(false /* active */)` after the test executed `SetFilesystemActive(true /* active */)`. This could happen because background info logging went through the SyncPoint callback \"WritableFileWriter::Append:BeforePrepareWrite\", probably unintentionally. The solution of this PR is to call `ClearAllCallBacks()` to wait for any such pending callbacks to drain before calling `SetFilesystemActive(true /* active */)`\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10642\n\nReviewed By: cbi42\n\nDifferential Revision: D39265381\n\nPulled By: ajkr\n\nfbshipit-source-id: 9a2f4916ab19726c8fb4b3a3b590b1b9ed93de1b",
        "modified_files_count": 1,
        "modified_files": [
            "db/error_handler_fs_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1ffadbe9fcee94b8537bcf8cb7a1e2075d112bf7"
    },
    {
        "hash": "36dec11bc6401897b75286d552716927da6c3c5e",
        "author": "Andrew Kryczka",
        "date": "2022-09-04T22:15:14-07:00",
        "message": "Disable RateLimiterTest.Rate with valgrind (#10637)\n\nSummary:\nExample valgrind flake: https://app.circleci.com/pipelines/github/facebook/rocksdb/18073/workflows/3794e569-45cb-4621-a2b4-df1dcdf5cb19/jobs/475569\n\n```\nutil/rate_limiter_test.cc:358\nExpected equality of these values:\n  samples_at_minimum\n    Which is: 9\n  samples\n    Which is: 10\n```\n\nSome other runs of `RateLimiterTest.Rate` already skip this check due to its reliance on a minimum execution speed. We know valgrind slows execution a lot so can disable the check in that case.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10637\n\nReviewed By: cbi42\n\nDifferential Revision: D39251350\n\nPulled By: ajkr\n\nfbshipit-source-id: 41ae1ea4cd91992ea57df902f9f7fd6d182a5932",
        "modified_files_count": 1,
        "modified_files": [
            "util/rate_limiter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/36dec11bc6401897b75286d552716927da6c3c5e"
    },
    {
        "hash": "fe5fbe32cb56c5c0990b843572112e963e17af5f",
        "author": "Andrew Kryczka",
        "date": "2022-09-04T14:55:09-07:00",
        "message": "Deflake DBBlockCacheTest1.WarmCacheWithBlocksDuringFlush (#10635)\n\nSummary:\nPreviously, automatic compaction could be triggered prior to the test invoking CompactRange(). It could lead to the following flaky failure:\n\n```\n/root/project/db/db_block_cache_test.cc:753: Failure\nExpected equality of these values:\n  1 + kNumBlocks\n    Which is: 11\n  options.statistics->getTickerCount(BLOCK_CACHE_INDEX_ADD)\n    Which is: 10\n```\n\nA sequence leading to this failure was:\n\n* Automatic compaction\n  * files [1] [2] trivially moved\n  * files [3] [4] [5] [6] trivially moved\n* CompactRange()\n  * files [7] [8] [9] trivially moved\n  * file [10] trivially moved\n\nIn such a case, the index/filter block adds that the test expected did not happen since there were no new files.\n\nThis PR just tweaks settings to ensure the `CompactRange()` produces one new file.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10635\n\nReviewed By: cbi42\n\nDifferential Revision: D39250869\n\nPulled By: ajkr\n\nfbshipit-source-id: a3c94c49069e28c49c40b4b80dae0059739d19fd",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_block_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fe5fbe32cb56c5c0990b843572112e963e17af5f"
    },
    {
        "hash": "8a85946f58bc8db59c35685672ead1b5cae15c23",
        "author": "Hui Xiao",
        "date": "2022-08-30T16:24:01-07:00",
        "message": "Add missing mutex when reading from shared variable bg_bottom_compaction_scheduled_, bg_compaction_scheduled_ (#10610)\n\nSummary:\n**Context/Summary:**\nAccording to https://github.com/facebook/rocksdb/blob/7.6.fb/db/compaction/compaction_job.h#L328-L332, any reading in the form of `*bg_compaction_scheduled_` , `*bg_bottom_compaction_scheduled_` should be protected by mutex, which isn't the case for some assert statement. This leads to a data race that can be repro-ed by the following command (command coming soon)\n\n```\ndb=/dev/shm/rocksdb_crashtest_blackbox\nexp=/dev/shm/rocksdb_crashtest_expected\nrm -rf $db $exp\nmkdir -p $exp\n\n./db_stress --clear_column_family_one_in=0 --column_families=1 --db=$db --delpercent=10 --delrangepercent=0 --destroy_db_initially=1 --expected_values_dir=$exp --iterpercent=0 --key_len_percent_dist=1,30,69 --max_key=1000000 --max_key_len=3 --prefixpercent=0 --readpercent=0 --reopen=0 --ops_per_thread=100000000 --value_size_mult=32 --writepercent=90  --compaction_pri=4 --use_txn=1 --level_compaction_dynamic_level_bytes=True  --compaction_ttl=0  --compact_files_one_in=1000000 --compact_range_one_in=1000000 --value_size_mult=32 --verify_db_one_in=1000  --write_buffer_size=65536 --mark_for_compaction_one_file_in=10 --max_background_compactions=20 --max_key=25000000 --max_key_len=3 --max_write_buffer_number=3 --max_write_buffer_size_to_maintain=2097152 --target_file_size_base=2097152 --target_file_size_multiplier=2\n```\n```\nWARNING: ThreadSanitizer: data race (pid=73424)\n  Read of size 4 at 0x7b8c0000151c by thread T13:\n    #0 ReleaseSubcompactionResources internal_repo_rocksdb/repo/db/compaction/compaction_job.cc:390 (db_stress+0x630aa3)\n    https://github.com/facebook/rocksdb/issues/1 rocksdb::CompactionJob::Run() internal_repo_rocksdb/repo/db/compaction/compaction_job.cc:741 (db_stress+0x630aa3)\n    https://github.com/facebook/rocksdb/issues/2 rocksdb::DBImpl::BackgroundCompaction(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::DBImpl::PrepickedCompaction*, rocksdb::Env::Priority) internal_repo_rocksdb/repo/db/db_impl/db_impl_compaction_flush.cc:3436 (db_stress+0x60b2cc)\n    https://github.com/facebook/rocksdb/issues/3 rocksdb::DBImpl::BackgroundCallCompaction(rocksdb::DBImpl::PrepickedCompaction*, rocksdb::Env::Priority) internal_repo_rocksdb/repo/db/db_impl/db_impl_compaction_flush.cc:2950 (db_stress+0x606d79)\n    https://github.com/facebook/rocksdb/issues/4 rocksdb::DBImpl::BGWorkCompaction(void*) internal_repo_rocksdb/repo/db/db_impl/db_impl_compaction_flush.cc:2693 (db_stress+0x60356a)\n\n  Previous write of size 4 at 0x7b8c0000151c by thread T12 (mutexes: write M438955329917552448):\n    #0 rocksdb::DBImpl::BackgroundCallCompaction(rocksdb::DBImpl::PrepickedCompaction*, rocksdb::Env::Priority) internal_repo_rocksdb/repo/db/db_impl/db_impl_compaction_flush.cc:3018 (db_stress+0x6072a1)\n    https://github.com/facebook/rocksdb/issues/1 rocksdb::DBImpl::BGWorkCompaction(void*) internal_repo_rocksdb/repo/db/db_impl/db_impl_compaction_flush.cc:2693 (db_stress+0x60356a)\n\nLocation is heap block of size 6720 at 0x7b8c00000000 allocated by main thread:\n    #0 operator new(unsigned long, std::align_val_t) <null> (db_stress+0xbab5bb)\n    https://github.com/facebook/rocksdb/issues/1 rocksdb::DBImpl::Open(rocksdb::DBOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<rocksdb::ColumnFamilyDescriptor, std::allocator<rocksdb::ColumnFamilyDescriptor> > const&, std::vector<rocksdb::ColumnFamilyHandle*, std::allocator<rocksdb::ColumnFamilyHandle*> >*, rocksdb::DB**, bool, bool) internal_repo_rocksdb/repo/db/db_impl/db_impl_open.cc:1811 (db_stress+0x69769a)\n    https://github.com/facebook/rocksdb/issues/2 rocksdb::TransactionDB::Open(rocksdb::DBOptions const&, rocksdb::TransactionDBOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<rocksdb::ColumnFamilyDescriptor, std::allocator<rocksdb::ColumnFamilyDescriptor> > const&, std::vector<rocksdb::ColumnFamilyHandle*, std::allocator<rocksdb::ColumnFamilyHandle*> >*, rocksdb::TransactionDB**) internal_repo_rocksdb/repo/utilities/transactions/pessimistic_transaction_db.cc:258 (db_stress+0x8ae1f4)\n    https://github.com/facebook/rocksdb/issues/3 rocksdb::StressTest::Open(rocksdb::SharedState*) internal_repo_rocksdb/repo/db_stress_tool/db_stress_test_base.cc:2611 (db_stress+0x32b927)\n    https://github.com/facebook/rocksdb/issues/4 rocksdb::StressTest::InitDb(rocksdb::SharedState*) internal_repo_rocksdb/repo/db_stress_tool/db_stress_test_base.cc:290 (db_stress+0x34712c)\n```\nThis PR added all the missing mutex that should've been in place\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10610\n\nTest Plan:\n- Past repro command\n- Existing CI\n\nReviewed By: riversand963\n\nDifferential Revision: D39143016\n\nPulled By: hx235\n\nfbshipit-source-id: 51dd4db55ad306f3dbda5d0dd54d6f2513cf70f2",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8a85946f58bc8db59c35685672ead1b5cae15c23"
    },
    {
        "hash": "5532b462c492aae772ea28fea3bd8c3d9b8b43bb",
        "author": "Changyu Bi",
        "date": "2022-08-29T09:51:40-07:00",
        "message": "Verify Iterator/Get() against expected state in only `no_batched_ops_test` (#10590)\n\nSummary:\nhttps://github.com/facebook/rocksdb/issues/10538 added `TestIterateAgainstExpected()` in `no_batched_ops_test` to verify iterator correctness against the in memory expected state. It is not compatible when run after some other stress tests, e.g. `TestPut()` in `batched_op_stress`, that either do not set expected state when writing to DB or use keys that cannot be parsed by `GetIntVal()`. The assert [here](https://github.com/facebook/rocksdb/blob/d17be55aab80b856f96f4af89f8d18fef96646b4/db_stress_tool/db_stress_common.h#L520) could fail. This PR fixed this issue by setting iterator upperbound to `max_key` when `destroy_db_initially=0` to avoid the key space that `batched_op_stress` touches.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10590\n\nTest Plan:\n```\n# set up DB with batched_op_stress\n./db_stress --test_batches_snapshots=1 --verify_iterator_with_expected_state_one_in=1 --max_key_len=3 --max_key=100000000 --skip_verifydb=1 --continuous_verification_interval=0 --writepercent=85 --delpercent=3 --delrangepercent=0 --iterpercent=10 --nooverwritepercent=1 --prefixpercent=0 --readpercent=2 --key_len_percent_dist=1,30,69\n\n# Before this PR, the following test will fail the asserts with error msg like the following\n# Assertion failed: (size_key <= key_gen_ctx.weights.size() * sizeof(uint64_t)), function GetIntVal, file db_stress_common.h, line 524.\n./db_stress --verify_iterator_with_expected_state_one_in=1 --max_key_len=3 --max_key=100000000 --skip_verifydb=1 --continuous_verification_interval=0 --writepercent=0 --delpercent=3 --delrangepercent=0 --iterpercent=95 --nooverwritepercent=1 --prefixpercent=0 --readpercent=2 --key_len_percent_dist=1,30,69 --destroy_db_initially=0\n```\n\nReviewed By: ajkr\n\nDifferential Revision: D39085243\n\nPulled By: cbi42\n\nfbshipit-source-id: a7dfee2320c330773b623b442d730fd014ec7056",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5532b462c492aae772ea28fea3bd8c3d9b8b43bb"
    },
    {
        "hash": "ce529a4ce1029d3041214b559c2bef0f36646189",
        "author": "Andrew Hutchings",
        "date": "2022-08-28T00:05:51-07:00",
        "message": "Fix FreeBSD building (#10575)\n\nSummary:\nFreeBSD doesn't have `JEMALLOC_USABLE_SIZE_CONST` so we need to define\nit.\n\nThis fixes MariaDB MDEV-20248.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10575\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D39057665\n\nPulled By: ajkr\n\nfbshipit-source-id: 3874779d12a1dd5036324947f6372e6ad57a7b08",
        "modified_files_count": 1,
        "modified_files": [
            "port/jemalloc_helper.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ce529a4ce1029d3041214b559c2bef0f36646189"
    },
    {
        "hash": "7670fdd6907df2de42e558be0e09736f341debc5",
        "author": "bilyz",
        "date": "2022-08-26T08:44:52-07:00",
        "message": "fix trace_analyzer_tool args column position (#10576)\n\nSummary:\nThe column  meaning explanation is not correct according to the parsed human-readable trace file.\n\nFollowing are the results data from parsed trace human-readable file format.\nThe key is in the first column.\n\n```\n0x00000005 6 1 0 1661317998095439\n0x00000007 0 1 0 1661317998095479\n0x00000008 6 1 0 1661317998095493\n0x0000000300000001 1 1 6 1661317998101508\n0x0000000300000000 1 1 6 1661317998101508\n0x0000000300000001 0 1 0 1661317998106486\n0x0000000300000000 0 1 0 1661317998106498\n0x0000000A 6 1 0 1661317998106515\n0x00000007 0 1 0 1661317998111887\n0x00000001 6 1 0 1661317998111923\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10576\n\nReviewed By: ajkr\n\nDifferential Revision: D39039110\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: eade6394c7870005b717846af09a848be6f677ce",
        "modified_files_count": 1,
        "modified_files": [
            "tools/trace_analyzer_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7670fdd6907df2de42e558be0e09736f341debc5"
    },
    {
        "hash": "78bbdef530bd36fa299d496bd1013cf39d8e203a",
        "author": "Levi Tamasi",
        "date": "2022-08-24T13:08:43-07:00",
        "message": "Fix a typo in BlobSecondaryCacheTest (#10566)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/10566\n\nTest Plan: `make check`\n\nReviewed By: riversand963\n\nDifferential Revision: D38989926\n\nPulled By: ltamasi\n\nfbshipit-source-id: 6402635fe745e4e7eb3083ef9ad9f04c0177d762",
        "modified_files_count": 1,
        "modified_files": [
            "db/blob/blob_source_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/78bbdef530bd36fa299d496bd1013cf39d8e203a"
    },
    {
        "hash": "06f73d257565d4758baadef6685586bdb94a9382",
        "author": "Ryan Mack",
        "date": "2022-08-23T14:58:16-07:00",
        "message": "Fix autovector::emplace_back return type for C++17 (#10542)\n\nSummary:\nC++17 changes emplace_back API to return the new object. Needed to compile rocksdb on recent compilers.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10542\n\nReviewed By: hx235\n\nDifferential Revision: D38896019\n\nPulled By: ajkr\n\nfbshipit-source-id: cd7ddf34c0dcd449ecedc41e89a37b3a270a5603",
        "modified_files_count": 1,
        "modified_files": [
            "util/autovector.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/06f73d257565d4758baadef6685586bdb94a9382"
    },
    {
        "hash": "9593fd1c82362f42a4c8282d84c902194e9efe4a",
        "author": "Chen Lixiang",
        "date": "2022-08-23T14:58:02-07:00",
        "message": "Fix wrong compression type and options in universal compaction picker (#10515)\n\nSummary:\nIn UniversalCompactionBuilder::PickCompactionToReduceSortedRuns, we passed start_level to get compression type and options. I think that is wrong and we should use output_level instead.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10515\n\nReviewed By: hx235\n\nDifferential Revision: D38611335\n\nPulled By: ajkr\n\nfbshipit-source-id: bb860caed4b6c6bbde8f75fc50cf875a9f04723d",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_picker_universal.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9593fd1c82362f42a4c8282d84c902194e9efe4a"
    },
    {
        "hash": "7b9e970042c8eb610cd355f5b7b038d5d4845b0c",
        "author": "Changyu Bi",
        "date": "2022-08-23T11:06:09-07:00",
        "message": "Optionally issue `DeleteRange` in `*whilewriting` benchmarks (#10552)\n\nSummary:\nOptionally issue DeleteRange in `*whilewriting` benchmarks. This happens in `BGWriter` and uses similar logic as in `DoWrite` to issue DeleteRange operations. I added this when I was benchmarking https://github.com/facebook/rocksdb/issues/10547, but this should be an independent PR.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10552\n\nTest Plan: ran some benchmarks with various delete range options, e.g. `./db_bench --benchmarks=readwhilewriting --writes_per_range_tombstone=100 --writes=200000 --reads=1000000 --disable_auto_compactions --max_num_range_tombstones=10000`\n\nReviewed By: ajkr\n\nDifferential Revision: D38927020\n\nPulled By: cbi42\n\nfbshipit-source-id: 31ee20cb8127f7173f0816ea0cc2a204ec02aad6",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7b9e970042c8eb610cd355f5b7b038d5d4845b0c"
    },
    {
        "hash": "5956ef008983aa709ef1fca6ea388f7f0f452666",
        "author": "Akanksha Mahajan",
        "date": "2022-08-18T18:03:44-07:00",
        "message": "Add initial_auto_readahead_size and max_auto_readahead_size to db_bench (#10539)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/10539\n\nReviewed By: anand1976\n\nDifferential Revision: D38837111\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: eb845c6e15a3c823ff6113395817388ff15a20b1",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5956ef008983aa709ef1fca6ea388f7f0f452666"
    },
    {
        "hash": "2297769b387af3c8f70ec12c10f17589f5daaf47",
        "author": "sdong",
        "date": "2022-08-11T17:10:36-07:00",
        "message": "Fix regression issue of too large score (#10518)\n\nSummary:\nhttps://github.com/facebook/rocksdb/pull/10057 caused a regression bug: since the base level size is not adjusted based on L0 size anymore, L0 score might become very large. This makes compaction heavily favor L0->L1 compaction against L1->L2 compaction, and cause in some cases, data stuck in L1 without being moved down. We fix calculating a score of L0 by size(L0)/size(L1) in the case where L0 is large..\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10518\n\nTest Plan: run db_bench against data on tmpfs and watch the behavior of data stuck in L1 goes away.\n\nReviewed By: ajkr\n\nDifferential Revision: D38603145\n\nfbshipit-source-id: 4949e52dc28b54aacfe08417c6e6cc7e40a27225",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2297769b387af3c8f70ec12c10f17589f5daaf47"
    },
    {
        "hash": "edae671ce020a060b86db919068ee132d70eb837",
        "author": "Jay Zhuang",
        "date": "2022-08-05T13:16:58-07:00",
        "message": "Re-enable SuggestCompactRangeTest and add Universal Compaction test (#10473)\n\nSummary:\nThe feature `SuggestCompactRange()` is still experimental. Just\nre-add the test back.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10473\n\nTest Plan: CI\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D38427153\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 0b4491c947cbce6c18ff147b167e3c678633129a",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/edae671ce020a060b86db919068ee132d70eb837"
    },
    {
        "hash": "56dbcb4f72b96c74906a1b30408a045a30ca5a9a",
        "author": "Hui Xiao",
        "date": "2022-08-05T12:58:07-07:00",
        "message": "Deflake ChargeFileMetadataTestWithParam/ChargeFileMetadataTestWithParam.Basic/0 (#10481)\n\nSummary:\n**Context/summary:**\n`ChargeFileMetadataTestWithParam/ChargeFileMetadataTestWithParam.Basic/0 ` relies on `DBImpl::BackgroundCallCompaction:PurgedObsoleteFiles` happens before verifying `EXPECT_EQ(file_metadata_charge_only_cache->GetCacheCharge(),\n              1 * CacheReservationManagerImpl<\n                      CacheEntryRole::kFileMetadata>::GetDummyEntrySize());` or `EXPECT_EQ(file_metadata_charge_only_cache->GetCacheCharge(), 0);` to ensure appropriate cache reservation release is done before checking.\n\nHowever, this might not be the case under some timing delay and spurious wake-up as coerced below.\n\n```\n diff --git a/db/db_impl/db_impl_compaction_flush.cc b/db/db_impl/db_impl_compaction_flush.cc\nindex 4378f3212..3e4f60853 100644\n --- a/db/db_impl/db_impl_compaction_flush.cc\n+++ b/db/db_impl/db_impl_compaction_flush.cc\n@@ -2989,6 +2989,8 @@ void DBImpl::BackgroundCallCompaction(PrepickedCompaction* prepicked_compaction,\n     if (job_context.HaveSomethingToClean() ||\n         job_context.HaveSomethingToDelete() || !log_buffer.IsEmpty()) {\n       mutex_.Unlock();\n+      bg_cv_.SignalAll();\n+      usleep(1000);\n         // Have to flush the info logs before bg_compaction_scheduled_--\n        // because if bg_flush_scheduled_ becomes 0 and the lock is\n        // released, the deconstructor of DB can kick in and destroy all the\n        // states of DB so info_log might not be available after that point.\n        // It also applies to access other states that DB owns.\n        log_buffer.FlushBufferToLog();\n        if (job_context.HaveSomethingToDelete()) {\n          PurgeObsoleteFiles(job_context);\n          TEST_SYNC_POINT(\"DBImpl::BackgroundCallCompaction:PurgedObsoleteFiles\");\n        }\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10481\n\nTest Plan:\nThe test of interest failed often at the above coercion:\n\nAfter fix, the test of interest passed at the above coercion:\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D38438256\n\nPulled By: hx235\n\nfbshipit-source-id: de80ecdb250174f00e7c2f5e4d952695ed56f51e",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/56dbcb4f72b96c74906a1b30408a045a30ca5a9a"
    },
    {
        "hash": "8d664ccb071f2b6844a765835f14c19336426121",
        "author": "Vladimir Kikhtenko",
        "date": "2022-08-02T17:18:18-07:00",
        "message": "increase buffer size in PosixFileSystem::GetAbsolutePath to PATH_MAX (#10413)\n\nSummary:\nRocksDB fails to open database with relative path when length of cwd\nis longer than 256 bytes. This happens due to ERANGE in getcwd call.\nHere we simply increase buffer size to the most common PATH_MAX value.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10413\n\nReviewed By: riversand963\n\nDifferential Revision: D38189254\n\nPulled By: ajkr\n\nfbshipit-source-id: 8a0d3a78bbe87645499fbf29fb12bd3d04cd4657",
        "modified_files_count": 1,
        "modified_files": [
            "env/fs_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8d664ccb071f2b6844a765835f14c19336426121"
    },
    {
        "hash": "aec28ebae60401987bc59acd212ca33597020204",
        "author": "sdong",
        "date": "2022-07-29T11:24:52-07:00",
        "message": "db_bench -use_stderr_info_logger to print timestamp (#10435)\n\nSummary:\nRight now db_bench -use_stderr_info_logger would redirect RocksDB info logging to stderr but no timetamp is printed out. Add timestamp to there.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10435\n\nTest Plan: Run \"db_bench -use_stderr_info_logger\"\n\nReviewed By: riversand963\n\nDifferential Revision: D38258699\n\nfbshipit-source-id: 3fee6eb1205127b923bc6a660f86bd2742519aec",
        "modified_files_count": 1,
        "modified_files": [
            "util/stderr_logger.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aec28ebae60401987bc59acd212ca33597020204"
    },
    {
        "hash": "3134471457455006947f566590e8ee3326b699a2",
        "author": "Jay Zhuang",
        "date": "2022-07-26T12:50:27-07:00",
        "message": "Deflake FlushStaleColumnFamilies test (#10409)\n\nSummary:\nMake the Stale Flush test more robust by explicitly checking the target CF is\nflushed.  Currently it's flaky because the default CF may have more than 3\nSSTs.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10409\n\nTest Plan:\nthe test more likely to fail on a resource limited host:\n```\ngtest-parallel ./column_family_test --gtest_filter=FormatDef/ColumnFamilyTest.FlushStaleColumnFamilies/0 -r 1000 -w 100\n```\n\nReviewed By: ajkr\n\nDifferential Revision: D38116383\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: e27cc56f76f14d0936504f126104e3d87e3d0d5f",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3134471457455006947f566590e8ee3326b699a2"
    },
    {
        "hash": "84e9b6ee2dc0318a8d09b5a7dd337880ebc80e92",
        "author": "Jay Lee",
        "date": "2022-07-25T17:38:39-07:00",
        "message": "full_history_ts_low should be const (#10411)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/10411\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D38131644\n\nPulled By: riversand963\n\nfbshipit-source-id: d241521dccff1ab8882ae0726ec368f84b7e8311",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/84e9b6ee2dc0318a8d09b5a7dd337880ebc80e92"
    },
    {
        "hash": "01a2e202994ffe540d55181f1da1d70d955956c6",
        "author": "Peter Dillinger",
        "date": "2022-07-25T13:03:55-07:00",
        "message": "Account for DB ID in stress testing block cache keys (#10388)\n\nSummary:\nI recently discovered that block cache keys are slightly lower\nquality than previously thought, because my stress testing tool failed\nto simulate the effect of DB ID differences. This change updates the\ntool and gives us data to guide future developments. (No changes to\nproduction code here and now.)\n\nNevertheless, the following promise still holds\n\n```\n// In fact, if our SST files are all < 4TB (see\n// BlockBasedTable::kMaxFileSizeStandardEncoding), then SST files generated\n// in a single process are guaranteed to have unique cache keys, unless/until\n// number session ids * max file number = 2**86 ...\n```\n\nbecause although different DB IDs could cause collision in file number\nand offset data, that would have to be using the same DB session (lower)\nto cause a block cache key collision, which is not possible in the same\nprocess. (A session is associated with only one DB ID.)\n\nThis change fixes cache_bench -stress_cache_key to set and reset DB IDs in\na parameterized way to evaluate the effect. Previous results assumed to\nbe representative (using -sck_keep_bits=43):\n\n```\n15 collisions after 15 x 90 days, est 90 days between (1.03763e+20 corrected)\n```\n\nor expected collision on a single machine every 104 billion billion\ndays (see \"corrected\" value).\n\nAfter accounting for DB IDs, test never really changing, intermediate, and very\nfrequently changing (using default -sck_db_count=100):\n\n```\n-sck_newdb_nreopen=1000000000:\n15 collisions after 2 x 90 days, est 12 days between (1.38351e+19 corrected)\n-sck_newdb_nreopen=10000:\n17 collisions after 2 x 90 days, est 10.5882 days between (1.22074e+19 corrected)\n-sck_newdb_nreopen=100:\n19 collisions after 2 x 90 days, est 9.47368 days between (1.09224e+19 corrected)\n```\n\nor roughly 10x more often than previously thought (still extremely if\nnot impossibly rare), and better than random base cache keys\n(with -sck_randomize), though < 10x better than random:\n\n```\n31 collisions after 1 x 90 days, est 2.90323 days between (3.34719e+18 corrected)\n```\n\nIf we simply fixed this by ignoring DB ID for cache keys, we would\npotentially have a shortage of entropy for some cases, such as small\nfile numbers and offsets (e.g. many short-lived processes each using\nSstFileWriter to create a small file), because existing DB session IDs\nonly provide ~103 bits of entropy. We could upgrade the entropy in DB\nsession IDs to accommodate, but it's not known what all would be\naffected by changing from 20 digit session IDs to something larger.\n\nInstead, my plan is to\n1) Move to block cache keys derived from SST unique IDs (so that we can\nderive block cache keys from manifest data without reading file on\nstorage), and show no significant regression in expected collision\nrate.\n2) Generate better SST unique IDs in format_version=6 (https://github.com/facebook/rocksdb/issues/9058),\nwhich should have ~100x lower expected/predicted collision rate based\non simulations with this stress test:\n```\n./cache_bench -stress_cache_key -sck_keep_bits=39 -sck_newdb_nreopen=100 -sck_footer_unique_id\n...\n15 collisions after 19 x 90 days, est 114 days between (2.10293e+21 corrected)\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10388\n\nTest Plan: no production changes\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D37986714\n\nPulled By: pdillinger\n\nfbshipit-source-id: e759b2469e3365cb01c6661a69e0ab849ef4c3df",
        "modified_files_count": 1,
        "modified_files": [
            "cache/cache_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/01a2e202994ffe540d55181f1da1d70d955956c6"
    },
    {
        "hash": "7b44724205f71dd0ce62984eba29cf44e845d07e",
        "author": "Andrew Kryczka",
        "date": "2022-07-22T11:05:55-07:00",
        "message": "Fix WAL compression fragmentation test (#10402)\n\nSummary:\nPreviously the \"Fragmentation\" test didn't cover fragmentation because the WAL data was compressible into trivial size. This PR changes it to use random data so the post-compression size is large enough to require fragmentation.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10402\n\nReviewed By: cbi42\n\nDifferential Revision: D38065596\n\nPulled By: ajkr\n\nfbshipit-source-id: 0d5f89ca14d33546501a74b5d4fafbadc28a46a7",
        "modified_files_count": 1,
        "modified_files": [
            "db/log_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7b44724205f71dd0ce62984eba29cf44e845d07e"
    },
    {
        "hash": "5cf18c7634fc65f85a6130429c274d580a507bda",
        "author": "Jun He",
        "date": "2022-07-22T09:24:13-07:00",
        "message": "Fix build error due to uninitialized read_req (#10312)\n\nSummary:\nGCC-12 has strick check on variables, and thus\nbuild fails when it finds read_req is not properly\ninitialized (-Werror=maybe-uninitialized). Add\ndefault value to fix this.\n\nChange-Id: Ib8a9085e2d613ee7b943b58a6a58e1bc351725d7\nSigned-off-by: Jun He <jun.he@arm.com>\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10312\n\nReviewed By: riversand963\n\nDifferential Revision: D37656997\n\nPulled By: ajkr\n\nfbshipit-source-id: fe47492c913b34b3a03c04beeec9ec57831dcaff",
        "modified_files_count": 1,
        "modified_files": [
            "db/blob/blob_file_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5cf18c7634fc65f85a6130429c274d580a507bda"
    },
    {
        "hash": "dd759537d04d9770eac1a2c654a53334c5fde00b",
        "author": "Yanqin Jin",
        "date": "2022-07-22T09:19:25-07:00",
        "message": "Print perf context for all benchmarks if enabled (#10396)\n\nSummary:\nIf user runs `db_bench` with `-perf_level=2` or higher, db_bench should\nprint perf context after each of all benchmarks.\n\nOr make `-perf_level` a per-benchmark switch.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10396\n\nTest Plan: ./db_bench -benchmarks=fillseq,readseq -perf_level=2\n\nReviewed By: ajkr\n\nDifferential Revision: D38016324\n\nPulled By: riversand963\n\nfbshipit-source-id: d83ea4abc34d40ffea394ca6abf0814bc5c0a2e0",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dd759537d04d9770eac1a2c654a53334c5fde00b"
    },
    {
        "hash": "fb579a221cd8b26fbdb98502ccd2cb2eb59b0f4e",
        "author": "Jay Zhuang",
        "date": "2022-07-15T14:47:36-07:00",
        "message": "Remove fixed TODO (#10241)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/10241\n\nReviewed By: gitbw95\n\nDifferential Revision: D37369726\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 1e94f0e2433aee42e9871043fa434291ce948eac",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fb579a221cd8b26fbdb98502ccd2cb2eb59b0f4e"
    },
    {
        "hash": "a543773bbc9f6cc6be500477da312b48eb6b4e07",
        "author": "Guido Tagliavini Ponce",
        "date": "2022-07-15T09:33:32-07:00",
        "message": "Add lean option to cache_bench (#10363)\n\nSummary:\nSometimes we may not want to include extra computation in our cache_bench experiments. Here we add a flag to avoid any extra work. We also moved the timer start after the key generation.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10363\n\nTest Plan: Run cache_bench with and without the new flag and check that the appropriate code is being executed.\n\nReviewed By: pdillinger\n\nDifferential Revision: D37870416\n\nPulled By: guidotag\n\nfbshipit-source-id: f853207b6643b9328e774251c3f679b1fd78a11a",
        "modified_files_count": 1,
        "modified_files": [
            "cache/cache_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a543773bbc9f6cc6be500477da312b48eb6b4e07"
    },
    {
        "hash": "00e68e7a30f1488f86e72bf5990326e6678c6a86",
        "author": "sdong",
        "date": "2022-07-14T22:24:02-07:00",
        "message": "DB::PutEntity() shouldn't be defined as =0 (#10364)\n\nSummary:\nDB::PutEntity() is defined as 0, but it is actually implemented in db/db_impl/db_impl_write.cc. It is incorrect, and might cause problems when users implement class DB themselves.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10364\n\nTest Plan: See existing tests pass\n\nReviewed By: riversand963\n\nDifferential Revision: D37874886\n\nfbshipit-source-id: b81713ddb707720b52d57a15de56a59414c24f66",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/00e68e7a30f1488f86e72bf5990326e6678c6a86"
    },
    {
        "hash": "fc51b7f33adcba7ac725ed0e7fe8b8155aaeaee4",
        "author": "Akanksha Mahajan",
        "date": "2022-07-07T11:35:15-07:00",
        "message": "Fix clang error implicit conversion loses integer precision (#10323)\n\nSummary:\nFix  error: implicit conversion loses integer precision:\n'size_t' (aka 'unsigned long') to 'uint32_t' (aka 'unsigned int')\n[-Werror,-Wshorten-64-to-32]\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10323\n\nTest Plan: USE_CLANG=1 make -j32\n\nReviewed By: gitbw95\n\nDifferential Revision: D37688250\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 443873e41279ee8bdbe8452818549792047532fb",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fc51b7f33adcba7ac725ed0e7fe8b8155aaeaee4"
    },
    {
        "hash": "177b2fa341483dcfa1d70be447f94e0ef7c85588",
        "author": "Mark Callaghan",
        "date": "2022-07-06T09:58:45-07:00",
        "message": "Set the value for --version, add --build_info (#10275)\n\nSummary:\n./db_bench --version\ndb_bench version 7.5.0\n\n./db_bench --build_info\n (RocksDB) 7.5.0\n    rocksdb_build_date: 2022-06-29 09:58:04\n    rocksdb_build_git_sha: d96febeeaa73057a9acb575f73c8140911298cf3\n    rocksdb_build_git_tag: print_version_githash\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10275\n\nTest Plan: run it\n\nReviewed By: ajkr\n\nDifferential Revision: D37524720\n\nPulled By: mdcallag\n\nfbshipit-source-id: 0f6c819dbadf7b033a4a3ba2941992bb76b4ff99",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/177b2fa341483dcfa1d70be447f94e0ef7c85588"
    },
    {
        "hash": "f9cfc6a808c9dc3ab7366edb10368559155d5172",
        "author": "Changyu Bi",
        "date": "2022-07-06T09:30:25-07:00",
        "message": "Updated NewDataBlockIterator to not fetch compression dict for non-da… (#10310)\n\nSummary:\n…ta blocks\n\nDuring MyShadow testing, ajkr helped me find out that with partitioned index and dictionary compression enabled, `PartitionedIndexIterator::InitPartitionedIndexBlock()` spent considerable amount of time (1-2% CPU) on fetching uncompression dictionary. Fetching uncompression dict was not needed since the index blocks were not compressed (and even if they were, they use empty dictionary). This should only affect use cases with partitioned index, dictionary compression and without uncompression dictionary pinned. This PR updates NewDataBlockIterator to not fetch uncompression dictionary when it is not for data blocks.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10310\n\nTest Plan:\n1. `make check`\n2. Perf benchmark: 1.5% (143950 -> 146176) improvement in op/sec for partitioned index + dict compression benchmark.\nFor default config without partitioned index and without dict compression, there is no regression in readrandom perf from multiple runs of db_bench.\n\n```\n# Set up for partitioned index with dictionary compression\nTEST_TMPDIR=/dev/shm ./db_bench_main -benchmarks=filluniquerandom,compact -max_background_jobs=24 -memtablerep=vector -allow_concurrent_memtable_write=false -partition_index=true  -compression_max_dict_bytes=16384 -compression_zstd_max_train_bytes=1638400\n\n# Pre PR\nTEST_TMPDIR=/dev/shm ./db_bench_main -use_existing_db=true -benchmarks=readrandom[-X50] -partition_index=true\nreadrandom [AVG    50 runs] : 143950 (± 1108) ops/sec;   15.9 (± 0.1) MB/sec\nreadrandom [MEDIAN 50 runs] : 144406 ops/sec;   16.0 MB/sec\n\n# Post PR\nTEST_TMPDIR=/dev/shm ./db_bench_opt -use_existing_db=true -benchmarks=readrandom[-X50] -partition_index=true\nreadrandom [AVG    50 runs] : 146176 (± 1121) ops/sec;   16.2 (± 0.1) MB/sec\nreadrandom [MEDIAN 50 runs] : 146014 ops/sec;   16.2 MB/sec\n\n# Set up for no partitioned index and no dictionary compression\nTEST_TMPDIR=/dev/shm/baseline ./db_bench_main -benchmarks=filluniquerandom,compact -max_background_jobs=24 -memtablerep=vector -allow_concurrent_memtable_write=false\n# Pre PR\nTEST_TMPDIR=/dev/shm/baseline/ ./db_bench_main --use_existing_db=true \"--benchmarks=readrandom[-X50]\"\nreadrandom [AVG    50 runs] : 158546 (± 1000) ops/sec;   17.5 (± 0.1) MB/sec\nreadrandom [MEDIAN 50 runs] : 158280 ops/sec;   17.5 MB/sec\n\n# Post PR\nTEST_TMPDIR=/dev/shm/baseline/ ./db_bench_opt --use_existing_db=true \"--benchmarks=readrandom[-X50]\"\nreadrandom [AVG    50 runs] : 161061 (± 1520) ops/sec;   17.8 (± 0.2) MB/sec\nreadrandom [MEDIAN 50 runs] : 161596 ops/sec;   17.9 MB/sec\n```\n\nReviewed By: ajkr\n\nDifferential Revision: D37631358\n\nPulled By: cbi42\n\nfbshipit-source-id: 6ca2665e270e63871968e061ba4a99d3136785d9",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f9cfc6a808c9dc3ab7366edb10368559155d5172"
    },
    {
        "hash": "a9117a3490e8e051c64f709bde3285b010c6f1c9",
        "author": "yite.gu",
        "date": "2022-07-03T23:16:09-07:00",
        "message": "BackupEngine: we can return immediately if GetFileSize failed (#10176)\n\nSummary:\nIn some case, GetFileSize would be failure in copy_file_cb.\nIf failure, we can return immediately, the subsequent code\nis meaningless, and add a log info let user know that problem\nhappen here.\n\nSinged-off-by: Yite Gu <ess_gyt@qq.com>\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10176\n\nReviewed By: cbi42\n\nDifferential Revision: D37510888\n\nPulled By: ajkr\n\nfbshipit-source-id: 044ad8c45852fd19b8cd564b11f65d40c39e296f",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backup/backup_engine.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a9117a3490e8e051c64f709bde3285b010c6f1c9"
    },
    {
        "hash": "4f51101d31c4950a5dc77c55a3e2af2ac6dcc184",
        "author": "zczhu",
        "date": "2022-06-30T15:36:46-07:00",
        "message": "Remove compact cursor when split sub-compactions (#10289)\n\nSummary:\nIn round-robin compaction priority, when splitting the compaction into sub-compactions, the earlier implementation takes into account the compact cursor to have full use of available sub-compactions. But this may result in unbalanced sub-compactions, so we remove this here.  The removal does not affect the cursor-based splitting mechanism within a sub-compaction, and thus the output files are still ensured to be split according to the cursor.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10289\n\nReviewed By: ajkr\n\nDifferential Revision: D37559091\n\nPulled By: littlepig2013\n\nfbshipit-source-id: b8b45b99f63b09cf873f7f049bcb4ab13871fffc",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4f51101d31c4950a5dc77c55a3e2af2ac6dcc184"
    },
    {
        "hash": "20754b3654aac4a8f45741fb616f2f9a36a96aab",
        "author": "Andrew Kryczka",
        "date": "2022-06-30T12:46:45-07:00",
        "message": "include compaction cursors in VersionEdit debug string (#10288)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/10288\n\nTest Plan:\ntry it out -\n\n```\n$ ldb manifest_dump --db=/dev/shm/rocksdb.0uWV/rocksdb_crashtest_whitebox/ --hex --verbose | grep CompactCursor | head -3\n  CompactCursor: 1 '00000000000011D9000000000000012B0000000000000266' seq:0, type:1\n  CompactCursor: 1 '0000000000001F35000000000000012B0000000000000022' seq:0, type:1\n  CompactCursor: 2 '00000000000011D9000000000000012B0000000000000266' seq:0, type:1\n```\n\nReviewed By: littlepig2013\n\nDifferential Revision: D37557177\n\nPulled By: ajkr\n\nfbshipit-source-id: 7b76b857d9e7a9f3d53398a61bb1d4b78873b91e",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_edit.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/20754b3654aac4a8f45741fb616f2f9a36a96aab"
    },
    {
        "hash": "c2dc4c0c52ac9af7d355d28fe5ad5a49c3619465",
        "author": "Johnny Shaw",
        "date": "2022-06-29T20:41:54-07:00",
        "message": "Fix GetWindowsErrSz nullptr bug (#10282)\n\nSummary:\n`GetWindowsErrSz` may assign a `nullptr` to `std::string` in the event it cannot format the error code to a string. This will result in a crash when `std::string` attempts to calculate the length from `nullptr`.\n\nThe change here checks the output from `FormatMessageA` and only assigns to the otuput `std::string` if it is not null. Additionally, the call to free the buffer is only made if a non-null value is returned from `FormatMessageA`. In the event `FormatMessageA` does not output a string, an empty string is returned instead.\n\nFixes https://github.com/facebook/rocksdb/issues/10274\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10282\n\nReviewed By: riversand963\n\nDifferential Revision: D37542143\n\nPulled By: ajkr\n\nfbshipit-source-id: c21f5119ddb451f76960acec94639d0f538052f2",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/io_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c2dc4c0c52ac9af7d355d28fe5ad5a49c3619465"
    },
    {
        "hash": "490fcac07832205cb0bdb7ade24118d6567544fa",
        "author": "leipeng",
        "date": "2022-06-29T13:02:48-07:00",
        "message": "WriteBatch reorder fields to reduce padding (#10266)\n\nSummary:\nthis reorder reduces sizeof(WriteBatch) by 16 bytes\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10266\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D37505201\n\nPulled By: ajkr\n\nfbshipit-source-id: 6cb6c3735073fcb63921f822d5e15670fecb1c26",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/write_batch.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/490fcac07832205cb0bdb7ade24118d6567544fa"
    },
    {
        "hash": "ca81b80d83f4344c2b7665e57d5ce188751695b3",
        "author": "Andrew Kryczka",
        "date": "2022-06-28T14:27:49-07:00",
        "message": "Deflake RateLimiting/BackupEngineRateLimitingTestWithParam (#10271)\n\nSummary:\nWe saw flakes with the following failure:\n\n```\n[ RUN      ] RateLimiting/BackupEngineRateLimitingTestWithParam.RateLimiting/1\nutilities/backup/backup_engine_test.cc:2667: Failure\nExpected: (restore_time) > (0.8 * rate_limited_restore_time), actual: 48269 vs 60470.4\nterminate called after throwing an instance of 'testing::internal::GoogleTestFailureException'\nwhat():  utilities/backup/backup_engine_test.cc:2667: Failure\nExpected: (restore_time) > (0.8 * rate_limited_restore_time), actual: 48269 vs 60470.4\nReceived signal 6 (Aborted)\nt/run-backup_engine_test-RateLimiting-BackupEngineRateLimitingTestWithParam.RateLimiting-1: line 4: 1032887 Aborted                 (core dumped) TEST_TMPDIR=$d ./backup_engine_test --gtest_filter=RateLimiting/BackupEngineRateLimitingTestWithParam.RateLimiting/1\n```\n\nInvestigation revealed we forgot to use the mock time `SystemClock` for\nrestore rate limiting. Then the test used wall clock time, which made\nthe execution of \"GenericRateLimiter::Request:PostTimedWait\"\nnon-deterministic as wall clock time might have advanced enough that\nwaiting was not needed.\n\nThis PR changes restore rate limiting to use\nmock time, which guarantees we always execute\n\"GenericRateLimiter::Request:PostTimedWait\". Then the assertions that\nrely on times recorded inside that callback should be robust.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10271\n\nTest Plan:\nApplied the following patch which guaranteed repro before the fix.\nVerified the test passes after this PR even with that patch applied.\n\n```\n diff --git a/util/rate_limiter.cc b/util/rate_limiter.cc\nindex f369e3220..6b3ed82fa 100644\n --- a/util/rate_limiter.cc\n+++ b/util/rate_limiter.cc\n@@ -158,6 +158,7 @@ void GenericRateLimiter::SetBytesPerSecond(int64_t bytes_per_second) {\n\n void GenericRateLimiter::Request(int64_t bytes, const Env::IOPriority pri,\n                                  Statistics* stats) {\n+  usleep(100000);\n   assert(bytes <= refill_bytes_per_period_.load(std::memory_order_relaxed));\n   bytes = std::max(static_cast<int64_t>(0), bytes);\n   TEST_SYNC_POINT(\"GenericRateLimiter::Request\");\n```\n\nReviewed By: hx235\n\nDifferential Revision: D37499848\n\nPulled By: ajkr\n\nfbshipit-source-id: fd790d5a192996be8ba13b656751ccc7d8cb8f6e",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backup/backup_engine_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ca81b80d83f4344c2b7665e57d5ce188751695b3"
    },
    {
        "hash": "410ca2efd2b1181827ea1148b88e82dc62bf85c6",
        "author": "zczhu",
        "date": "2022-06-24T14:02:33-07:00",
        "message": "Fix the flaky cursor persist test (#10250)\n\nSummary:\nThe 'PersistRoundRobinCompactCursor' unit test in `db_compaction_test` may occasionally fail due to the inconsistent LSM state. The issue is fixed by adding `Flush()` and `WaitForFlushMemTable()` to produce a more predictable and stable LSM state.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10250\n\nTest Plan: 'PersistRoundRobinCompactCursor' unit test in `db_compaction_test`\n\nReviewed By: jay-zhuang, riversand963\n\nDifferential Revision: D37426091\n\nPulled By: littlepig2013\n\nfbshipit-source-id: 56fbaab0384c380c1f279a16dc8732b139c9f611",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/410ca2efd2b1181827ea1148b88e82dc62bf85c6"
    },
    {
        "hash": "052666aed510c03e5e9266b2a283ed7f59501328",
        "author": "Gang Liao",
        "date": "2022-06-23T22:02:16-07:00",
        "message": "BlobDB in crash test hitting assertion (#10249)\n\nSummary:\nThis task is to fix assertion failures during the crash test runs. The cache entry size might not match value size because value size can include the on-disk (possibly compressed) size. Therefore, we removed the assertions.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10249\n\nReviewed By: ltamasi\n\nDifferential Revision: D37407576\n\nPulled By: gangliao\n\nfbshipit-source-id: 577559f267c5b2437bcd0631cd0efabb6dde3b69",
        "modified_files_count": 1,
        "modified_files": [
            "db/blob/blob_source.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/052666aed510c03e5e9266b2a283ed7f59501328"
    },
    {
        "hash": "36fefd7e22dcf2bd10065ba800f1ce501a9d843d",
        "author": "Yanqin Jin",
        "date": "2022-06-22T08:50:05-07:00",
        "message": "Continue to deflake BackupEngineTest.Concurrency (#10228)\n\nSummary:\nEven after https://github.com/facebook/rocksdb/issues/10069, `BackupEngineTest.Concurrency` is still flaky with decreased probability of failure.\n\nRepro steps as follows\n```bash\nmake backup_engine_test\ngtest-parallel -r 1000 -w 64 ./backup_engine_test --gtest_filter=BackupEngineTest.Concurrency\n```\n\nThe first two commits of this PR demonstrate how the test is flaky. https://github.com/facebook/rocksdb/issues/10069 handles the case in which\n`Rename()` file returns `IOError` with subcode `PathNotFound`, and `CreateLoggerFromOptions()`\nallows the operation to succeed, as expected by the test. However, `BackupEngineTest` uses\n`RemapFileSystem` on top of `ChrootFileSystem` which can return `NotFound` instead of `IOError`.\n\nThis behavior is different from `Env::Default()` which returns PathNotFound if the src of `rename()`\ndoes not exist. We should make the behaviors of the test Env/FS match a real Env/FS.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10228\n\nTest Plan:\n```bash\nmake check\ngtest-parallel -r 1000 -w 64 ./backup_engine_test --gtest_filter=BackupEngineTest.Concurrency\n```\n\nReviewed By: pdillinger\n\nDifferential Revision: D37337241\n\nPulled By: riversand963\n\nfbshipit-source-id: 07a53115e424467b55a731866e571f0ad4c6635d",
        "modified_files_count": 1,
        "modified_files": [
            "env/fs_remap.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/36fefd7e22dcf2bd10065ba800f1ce501a9d843d"
    },
    {
        "hash": "42c631b339f0119bb6e4e05d58b23cc3e5ee9bcf",
        "author": "Yanqin Jin",
        "date": "2022-06-21T23:34:39-07:00",
        "message": "Update API comment about Options::best_efforts_recovery (#10180)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/10180\n\nReviewed By: pdillinger\n\nDifferential Revision: D37182037\n\nPulled By: riversand963\n\nfbshipit-source-id: a8dc865b86e2249beb7a543c317e94a14781e910",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/42c631b339f0119bb6e4e05d58b23cc3e5ee9bcf"
    },
    {
        "hash": "b012d2355738e91d49c2b36fe01a60ef6af8a521",
        "author": "Yanqin Jin",
        "date": "2022-06-21T11:27:10-07:00",
        "message": "Destroy iniital db dir for a test in DBWALTest (#10221)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/10221\n\nReviewed By: hx235\n\nDifferential Revision: D37316280\n\nPulled By: riversand963\n\nfbshipit-source-id: 062781acec2f36beebc62003bcc8ec280488d572",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_wal_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b012d2355738e91d49c2b36fe01a60ef6af8a521"
    },
    {
        "hash": "4207872fc32a2b27ab511fd74380238ba1b55dc9",
        "author": "sdong",
        "date": "2022-06-20T19:15:59-07:00",
        "message": "Reduce a duplicate consistency check when applying a new version (#10169)\n\nSummary:\nOne consistency check in SaveTo() is dupilcated with the one within Apply(). Remove one of then in release mode to reduce time spent in DB mutex.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10169\n\nTest Plan: Run existing tests and see nothing breaks.\n\nReviewed By: ltamasi\n\nDifferential Revision: D37157821\n\nfbshipit-source-id: 73b89443a20b43362ff66d10b9212022034a8234",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4207872fc32a2b27ab511fd74380238ba1b55dc9"
    },
    {
        "hash": "f87adcfb3f247a02c9b08a662c4b8aca971e620e",
        "author": "Peter Dillinger",
        "date": "2022-06-17T12:53:57-07:00",
        "message": "Fix overflow in ribbon_bench after #10184 (#10195)\n\nSummary:\nRibbon micro-bench needs updating after re-numbering\n`BloomLikeFilterPolicy::GetAllFixedImpls()` entries. (CircleCI nightly\nfailure.)\n\nAlso fixed memory leaks while using ASAN to validate my fix. (I assume\nthe leaks weren't intentional for some performance characteristic.)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10195\n\nTest Plan: run with ASAN\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D37244459\n\nPulled By: pdillinger\n\nfbshipit-source-id: 5a363e10de3c4c9c88099c937e3dc3b4cf24fd30",
        "modified_files_count": 1,
        "modified_files": [
            "microbench/ribbon_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f87adcfb3f247a02c9b08a662c4b8aca971e620e"
    },
    {
        "hash": "f62c1e1e5666b1a0e19c221f0f52c22e6ad1f806",
        "author": "Peter Dillinger",
        "date": "2022-06-16T21:14:10-07:00",
        "message": "Fix a false negative merge conflict (#10192)\n\nSummary:\n.. between https://github.com/facebook/rocksdb/issues/10184 and https://github.com/facebook/rocksdb/issues/10122 not detected by source control,\nleading to non-compiling code.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10192\n\nTest Plan: updated test\n\nReviewed By: hx235\n\nDifferential Revision: D37231921\n\nPulled By: pdillinger\n\nfbshipit-source-id: fa21488716f4c006b111b8c4127d71c757c935c3",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bloom_filter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f62c1e1e5666b1a0e19c221f0f52c22e6ad1f806"
    },
    {
        "hash": "4d31d3c2ed392657a2c28fe7362f00bced7f19c9",
        "author": "Yanqin Jin",
        "date": "2022-06-15T22:00:24-07:00",
        "message": "Abort in dbg mode after logging (#10183)\n\nSummary:\nIn CompactionIterator code, there are multiple places where the process\nwill abort in dbg mode before logging the error message describing the\ncause. This PR changes only the logging behavior for compaction iterator so\nthat error message is written to LOG before the process aborts in debug\nmode.\n\nAlso updated the triggering condition for an assertion for single delete with\nuser-defined timestamp.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10183\n\nTest Plan: make check\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D37190218\n\nPulled By: riversand963\n\nfbshipit-source-id: 741bb007067be7cfbe94ac9e530ad4b2b339c009",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4d31d3c2ed392657a2c28fe7362f00bced7f19c9"
    },
    {
        "hash": "2e5a323dbd4dbfad5b1e3d45d489e6dca37f4257",
        "author": "Ali Saidi",
        "date": "2022-06-15T13:08:11-07:00",
        "message": "Change the instruction used for a pause on arm64 (#10118)\n\nSummary:\nWhile the yield instruction conseptually sounds correct on most platforms it is\na simple nop that doesn't delay the execution anywhere close to what an x86\npause instruction does. In other projects with spin-wait loops an isb has been\nobserved to be much closer to the x86 behavior.\n\nOn a Graviton3 system the following test improves on average by 2x with this\nchange averaged over 20 runs:\n\n```\n./db_bench  -benchmarks=fillrandom -threads=64 -batch_size=1\n-memtablerep=skip_list -value_size=100 --num=100000\nlevel0_slowdown_writes_trigger=9999 -level0_stop_writes_trigger=9999\n-disable_auto_compactions --max_write_buffer_number=8 -max_background_flushes=8\n--disable_wal --write_buffer_size=160000000 --block_size=16384\n--allow_concurrent_memtable_write -compression_type none\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10118\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D37120578\n\nfbshipit-source-id: c20bde4298222edfab7ff7cb6d42497e7012400d",
        "modified_files_count": 1,
        "modified_files": [
            "port/port_posix.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2e5a323dbd4dbfad5b1e3d45d489e6dca37f4257"
    },
    {
        "hash": "69a32eecab2aa96f26b596c4996c556a6f8693bf",
        "author": "sdong",
        "date": "2022-06-15T13:05:58-07:00",
        "message": "Use madvise() for mmaped file advise (#10170)\n\nSummary:\nA recent PR https://github.com/facebook/rocksdb/pull/10142 enabled fadvise for mmaped file. However, we were told that it might not take effective and madvise() should be used.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10170\n\nTest Plan:\nRun existing tests\nRun a benchmark using mmap with advise random and see I/O size is indeed small.\n\nReviewed By: anand1976\n\nDifferential Revision: D37158582\n\nfbshipit-source-id: 8b3a74f0e89d2e16aac78ee4124c05841d4135c3",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/69a32eecab2aa96f26b596c4996c556a6f8693bf"
    },
    {
        "hash": "19345de60dab6a9841e2bb04826ed87b2c44a64e",
        "author": "Akanksha Mahajan",
        "date": "2022-06-15T09:10:19-07:00",
        "message": "fix cancel argument for latest liburing (#10168)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10168\n\nthe arg changed to u64\n\nReviewed By: ajkr\n\nDifferential Revision: D37155407\n\nfbshipit-source-id: 464eab2806675f148fce075a6fea369fa3d7a9bb",
        "modified_files_count": 1,
        "modified_files": [
            "env/fs_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/19345de60dab6a9841e2bb04826ed87b2c44a64e"
    },
    {
        "hash": "40dfa260497c9f482c5dd3a2eb4c362914edeb9f",
        "author": "iseki",
        "date": "2022-06-14T21:32:10-07:00",
        "message": "Fix C4702 on windows (#10146)\n\nSummary:\nThis code is unreachable when `ROCKSDB_LITE` not defined. And it cause build fail on my environment VS2019 16.11.15.\n```\n-- Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.19044.\n-- The CXX compiler identification is MSVC 19.29.30145.0\n-- The C compiler identification is MSVC 19.29.30145.0\n-- The ASM compiler identification is MSVC\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10146\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D37112916\n\nPulled By: ajkr\n\nfbshipit-source-id: e0b2bf3055d6fac1b3fb40b9f02c4cbae3f82757",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/40dfa260497c9f482c5dd3a2eb4c362914edeb9f"
    },
    {
        "hash": "b550fc0b090f63e95b567d34bdc3be258fbfe43a",
        "author": "Ali Saidi",
        "date": "2022-06-14T17:58:44-07:00",
        "message": "Modify the instructions emited for PREFETCH on arm64 (#10117)\n\nSummary:\n__builtin_prefetch(...., 1) prefetches into the L2 cache on x86 while the same\nemits a pldl3keep instruction on arm64 which doesn't seem to be close enough.\n\nTesting on a Graviton3, and M1 system with memtablerep_bench fillrandom and\nskiplist througpuh increased as follows adjusting the 1 to 2 or 3:\n```\n           1 -> 2     1 -> 3\n----------------------------\nGraviton3   +10%        +15%\nM1          +10%        +10%\n```\n\nGiven that prefetching into the L1 cache seems to help, I chose that conversion\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10117\n\nReviewed By: pdillinger\n\nDifferential Revision: D37120475\n\nfbshipit-source-id: db1ef43f941445019c68316500a2250acc643d5e",
        "modified_files_count": 1,
        "modified_files": [
            "port/port_posix.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b550fc0b090f63e95b567d34bdc3be258fbfe43a"
    },
    {
        "hash": "40d19bc12c7617fa5a9f5c394458adc9d062a210",
        "author": "Akanksha Mahajan",
        "date": "2022-06-14T12:35:11-07:00",
        "message": "Fix the failure related to io_uring_prep_cancel (#10165)\n\nSummary:\nFix for Internal jobs are failing with\n```\n error: no matching function for call to 'io_uring_prep_cancel'\n      io_uring_prep_cancel(sqe, posix_handle, 0);\n      ^~~~~~~~~~~~~~~~~~~~\nnote: candidate function not viable: no known conversion from 'rocksdb::Posix_IOHandle *' to '__u64' (aka 'unsigned long long') for 2nd argument\nstatic inline void io_uring_prep_cancel(struct io_uring_sqe *sqe,\n```\n\nUser data is set using `io_uring_set_data` API so no need to pass posix_handle here.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10165\n\nTest Plan: CircleCI jobs\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D37145233\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 05da650e1240e9c6fcc8aed5f0067308dccb164a",
        "modified_files_count": 1,
        "modified_files": [
            "env/fs_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/40d19bc12c7617fa5a9f5c394458adc9d062a210"
    },
    {
        "hash": "8273435c220c9dcd20cfac7f908b51b203e39df1",
        "author": "Akanksha Mahajan",
        "date": "2022-06-12T12:05:11-07:00",
        "message": "Bypass tests instead of skipping to resolve internal failure (#10148)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/10148\n\nReviewed By: hx235\n\nDifferential Revision: D37092202\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 12fae5641a1c4ab584e586db95f4044273aba23a",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_wal_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8273435c220c9dcd20cfac7f908b51b203e39df1"
    },
    {
        "hash": "5fa6ef7f1897b73732190c69f3ca4d3dc1795b25",
        "author": "Peter Dillinger",
        "date": "2022-06-09T19:43:19-07:00",
        "message": "Fix fragile CacheTest::ApplyToAllEntriesDuringResize (#10145)\n\nSummary:\nAs seen in https://github.com/facebook/rocksdb/issues/10137, simply churning the cache key hashes (e.g.\nby changing the raw cache keys) could trigger failure in this test, due\nto possibility of some cache shard exceeding its portion of capacity\nand evicting entries. Updated the test to be less fragile by using\ngreater margins, and added a pre-check for evictions, which doesn't\nmanifest as a race condition, before the main check that can race.\n\nAlso added stack trace handler to cache_test for debugging.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10145\n\nTest Plan:\ntest thousands of iterations with gtest-parallel, including\nwith changes in https://github.com/facebook/rocksdb/issues/10137 that were surfacing the problem. Pre-check\nwithout the fix would always fail with https://github.com/facebook/rocksdb/issues/10137\n\nReviewed By: guidotag\n\nDifferential Revision: D37058771\n\nPulled By: pdillinger\n\nfbshipit-source-id: a7cf137967aef49c07ae9602d8523c63e7388fab",
        "modified_files_count": 1,
        "modified_files": [
            "cache/cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5fa6ef7f1897b73732190c69f3ca4d3dc1795b25"
    },
    {
        "hash": "ff32346415b147bd7d596728a645dc502af95ac8",
        "author": "Andrew Kryczka",
        "date": "2022-06-07T15:15:09-07:00",
        "message": "Set db_stress defaults for TSAN deadlock detector (#10131)\n\nSummary:\nAfter https://github.com/facebook/rocksdb/issues/9357 we began seeing the following error attempting to acquire\nlocks for file ingestion:\n\n```\nFATAL: ThreadSanitizer CHECK failed: /home/engshare/third-party2/llvm-fb/12/src/llvm/compiler-rt/lib/sanitizer_common/sanitizer_deadlock_detector.h:67 \"((n_all_locks_)) < (((sizeof(all_locks_with_contexts_)/sizeof((all_locks_with_contexts_)[0]))))\" (0x40, 0x40)\n```\n\nThe command was using default values for `ingest_external_file_width`\n(1000) and `log2_keys_per_lock` (2). The expected number of locks needed\nto update those keys is then (1000 / 2^2) = 250, which is above the 0x40 (64)\nlimit. This PR reduces the default value of `ingest_external_file_width`\nto 100 so the expected number of locks is 25, which is within the limit.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10131\n\nReviewed By: ltamasi\n\nDifferential Revision: D36986307\n\nPulled By: ajkr\n\nfbshipit-source-id: e918cdb2fcc39517d585f1e5fd2539e185ada7c1",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_gflags.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ff32346415b147bd7d596728a645dc502af95ac8"
    },
    {
        "hash": "5cbee1f6097a93214e37c1bce0a796ae96825401",
        "author": "gitbw95",
        "date": "2022-06-07T11:57:12-07:00",
        "message": "Add unit test to verify that the dynamic priority can be passed from compaction to FS (#10088)\n\nSummary:\n**Summary:**\nAdd unit tests to verify that the dynamic priority can be passed from compaction to FS. Compaction reads&writes and other DB reads&writes share the same read&write paths to FSRandomAccessFile or FSWritableFile, so a MockTestFileSystem is added to replace the default filesystem from Env to intercept and verify the io_priority. To prepare the compaction input files, use the default filesystem from Env. To test the io priority of the compaction reads and writes, db_options_.fs is set as MockTestFileSystem.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10088\n\nTest Plan: Add unit tests.\n\nReviewed By: anand1976\n\nDifferential Revision: D36882528\n\nPulled By: gitbw95\n\nfbshipit-source-id: 120adc15801966f2b8c9fc45285f590a3fff96d1",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_job_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5cbee1f6097a93214e37c1bce0a796ae96825401"
    },
    {
        "hash": "4bdcc80192447546f001bb3d775af4f583d0524c",
        "author": "Hui Xiao",
        "date": "2022-06-03T19:42:22-07:00",
        "message": "Increase ChargeTableReaderTest/ChargeTableReaderTest.Basic error tolerance rate from 1% to 5% (#10113)\n\nSummary:\n**Context:**\nhttps://github.com/facebook/rocksdb/pull/9748 added support to charge table reader memory to block cache. In the test `ChargeTableReaderTest/ChargeTableReaderTest.Basic`, it estimated the table reader memory, calculated the expected number of table reader opened based on this estimation and asserted this number with actual number. The expected number of table reader opened calculated based on estimated table reader memory will not be 100% accurate and should have tolerance for error. It was previously set to 1% and recently encountered an assertion failure that `(opened_table_reader_num) <= (max_table_reader_num_capped_upper_bound), actual: 375 or 376 vs 374` where `opened_table_reader_num` is the actual opened one and `max_table_reader_num_capped_upper_bound` is the estimated opened one (=371 * 1.01). I believe it's safe to increase error tolerance from 1% to 5% hence there is this PR.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10113\n\nTest Plan: - CI again succeeds.\n\nReviewed By: ajkr\n\nDifferential Revision: D36911556\n\nPulled By: hx235\n\nfbshipit-source-id: 259687dd77b450fea0f5658a5b567a1d31d4b1f7",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4bdcc80192447546f001bb3d775af4f583d0524c"
    },
    {
        "hash": "eb99e080760bf86a9fd2b725df2fdeb1dd4df884",
        "author": "Guido Tagliavini Ponce",
        "date": "2022-06-03T13:40:09-07:00",
        "message": "Add support for FastLRUCache in cache_bench (#10095)\n\nSummary:\ncache_bench can now run with FastLRUCache.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10095\n\nTest Plan:\n- Temporarily add an ``assert(false)`` in the execution path that sets up the FastLRUCache. Run ``make -j24 cache_bench``. Then test the appropriate code is used by running ``./cache_bench -cache_type=fast_lru_cache`` and checking that the assert is called. Repeat for LRUCache.\n- Verify that FastLRUCache (currently a clone of LRUCache) has similar latency distribution than LRUCache, by comparing the outputs of ``./cache_bench -cache_type=fast_lru_cache`` and ``./cache_bench -cache_type=lru_cache``.\n\nReviewed By: pdillinger\n\nDifferential Revision: D36875834\n\nPulled By: guidotag\n\nfbshipit-source-id: eb2ad0bb32c2717a258a6ac66ed736e06f826cd8",
        "modified_files_count": 1,
        "modified_files": [
            "cache/cache_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eb99e080760bf86a9fd2b725df2fdeb1dd4df884"
    },
    {
        "hash": "cf856077956c9852a56e91199f4c7c4d710c01a5",
        "author": "Guido Tagliavini Ponce",
        "date": "2022-06-03T11:16:49-07:00",
        "message": "Add support for FastLRUCache in db_bench. (#10096)\n\nSummary:\ndb_bench can now run with FastLRUCache.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10096\n\nTest Plan:\n- Temporarily add an ``assert(false)`` in the execution path that sets up the FastLRUCache. Run ``make -j24 db_bench``. Then test the appropriate code is used by running ``./db_bench -cache_type=fast_lru_cache`` and checking that the assert is called. Repeat for LRUCache.\n- Verify that FastLRUCache (currently a clone of LRUCache) produces similar benchmark data than LRUCache, by comparing the outputs of ``./db_bench -benchmarks=fillseq,fillrandom,readseq,readrandom -cache_type=fast_lru_cache`` and ``./db_bench -benchmarks=fillseq,fillrandom,readseq,readrandom -cache_type=lru_cache``.\n\nReviewed By: gitbw95\n\nDifferential Revision: D36898774\n\nPulled By: guidotag\n\nfbshipit-source-id: f9f6b6f6da124f88b21b3c8dee742fbb04eff773",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cf856077956c9852a56e91199f4c7c4d710c01a5"
    },
    {
        "hash": "b8fe7df2e5e0a020e910c08909bbccb99c483fd3",
        "author": "Levi Tamasi",
        "date": "2022-06-02T23:42:41-07:00",
        "message": "Fix LITE build (#10106)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/10106\n\nReviewed By: cbi42\n\nDifferential Revision: D36891284\n\nPulled By: ltamasi\n\nfbshipit-source-id: 304ffa84549201659feb0b74d6ba54a83f08906b",
        "modified_files_count": 1,
        "modified_files": [
            "db/blob/db_blob_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b8fe7df2e5e0a020e910c08909bbccb99c483fd3"
    },
    {
        "hash": "151dc0038a83a933e91658340b0af6e5ad39410d",
        "author": "Jay Zhuang",
        "date": "2022-05-31T13:02:50-07:00",
        "message": "Bypass tests instead of skipping (#10076)\n\nSummary:\nMake fb test infra happy, more details: https://github.com/facebook/rocksdb/issues/8048\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10076\n\nTest Plan: CI\n\nReviewed By: ajkr\n\nDifferential Revision: D36768766\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 4f039a5c623abb6d4a7d09bbf97077618e7ec2c8",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/151dc0038a83a933e91658340b0af6e5ad39410d"
    },
    {
        "hash": "5ab5537d79bdccf207d61094d0cba3bc58e77285",
        "author": "Yanqin Jin",
        "date": "2022-05-31T09:36:32-07:00",
        "message": "Deflake unit test BackupEngineTest.Concurrency (#10069)\n\nSummary:\nAfter https://github.com/facebook/rocksdb/issues/9984, BackupEngineTest.Concurrency becomes flaky.\n\nDuring DB::Open(), someone else can rename/remove the LOG file, causing\nthis thread's `CreateLoggerFromOptions()` to fail. The reason is that the operation sequence\nof \"FileExists -> Rename\" is not atomic. It's possible that a FileExists() returns OK, but the file\ngets deleted before Rename(), causing the latter to return IOError with PathNotFound subcode.\n\nAlthough it's not encouraged to concurrently modify the contents of the directories managed by\nthe database instance in this case, we can still perform some simple handling to make DB::Open()\nmore robust. In this case, we can check if a racing thread has deleted the original LOG file, we can\nallow this thread to continue creating a new LOG file.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10069\n\nTest Plan: ~/gtest-parallel/gtest-parallel -r 100 ./backup_engine_test --gtest_filter=BackupEngineTest.Concurrency\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D36736913\n\nPulled By: riversand963\n\nfbshipit-source-id: 3cbe92d77ca175e55e586bdb1a32ac8107217ae6",
        "modified_files_count": 1,
        "modified_files": [
            "logging/auto_roll_logger.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5ab5537d79bdccf207d61094d0cba3bc58e77285"
    },
    {
        "hash": "9baeef712fcb6280513fbed2951d7079a74528b7",
        "author": "Changyu Bi",
        "date": "2022-05-31T08:48:57-07:00",
        "message": "Fix unittest ExternalSSTFileBasicTest.StableSnapshotWhileLoggingToManifest (#10066)\n\nSummary:\nFix the unittest `ExternalSSTFileBasicTest.StableSnapshotWhileLoggingToManifest` introduced in https://github.com/facebook/rocksdb/issues/10051 that is failing.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10066\n\nTest Plan: CI\n\nReviewed By: ajkr\n\nDifferential Revision: D36720669\n\nPulled By: cbi42\n\nfbshipit-source-id: 47a6d2c161f27b605ede5c62d1776eecaf0d5363",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9baeef712fcb6280513fbed2951d7079a74528b7"
    },
    {
        "hash": "0adac6f88eb5f0b68cda6b5cc8dbaa18794478e5",
        "author": "Jay Zhuang",
        "date": "2022-05-30T12:34:43-07:00",
        "message": "Deflake Transaction stress tests (#10063)\n\nSummary:\nTSAN test is slower, for `TransactionStressTest` and\n`DeadlockStress`, they're reaching the timeout limit of 600 seconds.\nDecreasing the transaction test number.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10063\n\nTest Plan: CI\n\nReviewed By: ajkr\n\nDifferential Revision: D36711727\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 600f82a6d32108f52fbe5572fcc7497607b7fe98",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0adac6f88eb5f0b68cda6b5cc8dbaa18794478e5"
    },
    {
        "hash": "460b44c07f1fb653b5935961fac4dc3ecd95a9d4",
        "author": "Jay Zhuang",
        "date": "2022-05-30T12:31:46-07:00",
        "message": "Deflake column_family_test to avoid hang (#10060)\n\nSummary:\nTests could hang because of flags are not test and set\natomiclly, so it's waiting for a sync point forever.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10060\n\nTest Plan: CI\n\nReviewed By: ajkr\n\nDifferential Revision: D36706311\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: d54b8053ce51b2de74162b28f496c048519b6cde",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/460b44c07f1fb653b5935961fac4dc3ecd95a9d4"
    },
    {
        "hash": "4eb7b35f6d47f9a19a7f080d2ebbfdfb31430417",
        "author": "Jaepil Jeong",
        "date": "2022-05-28T00:15:28-07:00",
        "message": "Fix compile error in Clang 13 (#10033)\n\nSummary:\nThis PR fixes the following compilation error in Clang 13, which was tested on macOS 12.4.\n\n```\n❯ ninja clean && ninja\n[1/1] Cleaning all built files...\nCleaning... 0 files.\n[198/315] Building CXX object CMakeFiles/rocksdb.dir/util/cleanable.cc.o\nFAILED: CMakeFiles/rocksdb.dir/util/cleanable.cc.o\nccache /opt/homebrew/opt/llvm/bin/clang++ -DGFLAGS=1 -DGFLAGS_IS_A_DLL=0 -DHAVE_FULLFSYNC -DJEMALLOC_NO_DEMANGLE -DLZ4 -DOS_MACOSX -DROCKSDB_JEMALLOC -DROCKSDB_LIB_IO_POSIX -DROCKSDB_NO_DYNAMIC_EXTENSION -DROCKSDB_PLATFORM_POSIX -DSNAPPY -DTBB -DZLIB -DZSTD -I/Users/jaepil/work/deepsearch/deps/cpp/rocksdb -I/Users/jaepil/work/deepsearch/deps/cpp/rocksdb/include -I/Users/jaepil/app/include -I/opt/homebrew/include -I/opt/homebrew/opt/llvm/include -W -Wextra -Wall -pthread -Wsign-compare -Wshadow -Wno-unused-parameter -Wno-unused-variable -Woverloaded-virtual -Wnon-virtual-dtor -Wno-missing-field-initializers -Wno-strict-aliasing -Wno-invalid-offsetof -fno-omit-frame-pointer -momit-leaf-frame-pointer -march=armv8-a+crc+crypto -Wno-unused-function -Werror -O3 -DNDEBUG -DROCKSDB_USE_RTTI -arch arm64 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX12.3.sdk -std=gnu++17 -MD -MT CMakeFiles/rocksdb.dir/util/cleanable.cc.o -MF CMakeFiles/rocksdb.dir/util/cleanable.cc.o.d -o CMakeFiles/rocksdb.dir/util/cleanable.cc.o -c /Users/jaepil/work/deepsearch/deps/cpp/rocksdb/util/cleanable.cc\n/Users/jaepil/work/deepsearch/deps/cpp/rocksdb/util/cleanable.cc:24:65: error: no member named 'move' in namespace 'std'\nCleanable::Cleanable(Cleanable&& other) noexcept { *this = std::move(other); }\n                                                           ~~~~~^\n/Users/jaepil/work/deepsearch/deps/cpp/rocksdb/util/cleanable.cc:126:16: error: no member named 'move' in namespace 'std'\n  *this = std::move(from);\n          ~~~~~^\n2 errors generated.\n[209/315] Building CXX object CMakeFiles/rocksdb.dir/tools/block_cache_analyzer/block_cache_trace_analyzer.cc.o\nninja: build stopped: subcommand failed.\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10033\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D36580562\n\nPulled By: ajkr\n\nfbshipit-source-id: 0f6b241d186ed528ad62d259af2857d2c2b4ded1",
        "modified_files_count": 1,
        "modified_files": [
            "util/cleanable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4eb7b35f6d47f9a19a7f080d2ebbfdfb31430417"
    },
    {
        "hash": "5490da20a561bba2863c9c547193af48db6d8660",
        "author": "Jay Zhuang",
        "date": "2022-05-25T18:02:04-07:00",
        "message": "Fix flaky db_basic_bench caused by unreleased iterator (#10058)\n\nSummary:\nIterator is not freed after test is done (after the main for\nloop), which could cause db close failed.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10058\n\nTest Plan:\nAble to reproduce consistently with higher thread number,\nlike 100, make sure it passes after the fix\n\nReviewed By: ajkr\n\nDifferential Revision: D36685823\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 4c98b8758d106bfe40cae670e689c3d284765bcf",
        "modified_files_count": 1,
        "modified_files": [
            "microbench/db_basic_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5490da20a561bba2863c9c547193af48db6d8660"
    },
    {
        "hash": "a96a4a2f7ba7633ab2cc51defd1e923e20d239a6",
        "author": "Jay Zhuang",
        "date": "2022-05-24T16:35:58-07:00",
        "message": "Fix ApproximateOffsetOfCompressed test (#10048)\n\nSummary:\nhttps://github.com/facebook/rocksdb/issues/9857 introduced new an option `use_zstd_dict_trainer`, which\nis stored in SST as text, e.g.:\n```\n...  zstd_max_train_bytes=0; enabled=0;...\n```\nit increased the sst size a little bit and cause\n`ApproximateOffsetOfCompressed` test to fail:\n```\nValue 7053 is not in range [4000, 7050]\ntable/table_test.cc:4019: Failure\nValue of: Between(c.ApproximateOffsetOf(\"xyz\"), 4000, 7050)\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10048\n\nTest Plan: verified the test pass after the change\n\nReviewed By: cbi42\n\nDifferential Revision: D36643688\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: bf12d211f6ae71937259ef21b1226bd06e8da717",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a96a4a2f7ba7633ab2cc51defd1e923e20d239a6"
    },
    {
        "hash": "23f34c7ae5dfa40cf3e7031bfc3b5c6fb957fbdc",
        "author": "Jay Zhuang",
        "date": "2022-05-24T15:44:49-07:00",
        "message": "Skip ZSTD dict tests if the version doesn't support it (#10046)\n\nSummary:\nFor example, the default ZSTD version for ubuntu20 is 1.4.4, which will\nfail the test `PresetCompressionDict`:\n\n```\ndb/db_test_util.cc:607: Failure\nInvalid argument: zstd finalizeDictionary cannot be used because ZSTD 1.4.5+ is not linked with the binary.\nterminate called after throwing an instance of 'testing::internal::GoogleTestFailureException'\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10046\n\nTest Plan: test pass with old zstd\n\nReviewed By: cbi42\n\nDifferential Revision: D36640067\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: b1c49fb7295f57f4515ce4eb3a52ae7d7e45da86",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/23f34c7ae5dfa40cf3e7031bfc3b5c6fb957fbdc"
    },
    {
        "hash": "8e9d9156b0e3b0ece173726924c49d0aca227546",
        "author": "anand76",
        "date": "2022-05-23T20:06:14-07:00",
        "message": "Fix fbcode internal build failure (#10041)\n\nSummary:\nThe build failed due to different namespaces for coroutines (std::experimental vs std) based on compiler version.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10041\n\nReviewed By: ltamasi\n\nDifferential Revision: D36617212\n\nPulled By: anand1976\n\nfbshipit-source-id: dfb25320788d32969317d5651173059e2cbd8bd5",
        "modified_files_count": 1,
        "modified_files": [
            "util/async_file_reader.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8e9d9156b0e3b0ece173726924c49d0aca227546"
    },
    {
        "hash": "dde774db646d74054a312878244206431ee939e4",
        "author": "Hui Xiao",
        "date": "2022-05-18T22:25:54-07:00",
        "message": "Mark old reserve* option deprecated (#10016)\n\nSummary:\n**Context/Summary:**\nhttps://github.com/facebook/rocksdb/pull/9926 removed inefficient `reserve*` option API but forgot to mark them deprecated in `block_based_table_type_info` for compatible table format.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10016\n\nTest Plan: build-format-compatible\n\nReviewed By: pdillinger\n\nDifferential Revision: D36484247\n\nPulled By: hx235\n\nfbshipit-source-id: c41b90cc99fb7ab7098934052f0af7290b221f98",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_factory.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dde774db646d74054a312878244206431ee939e4"
    },
    {
        "hash": "8b1df101da2752ea966b3b75cbc8c98e347ac304",
        "author": "XieJiSS",
        "date": "2022-05-17T17:33:01-07:00",
        "message": "fix: build on risc-v (#9215)\n\nSummary:\nPatch is modified from ~~https://reviews.llvm.org/file/data/du5ol5zctyqw53ma7dwz/PHID-FILE-knherxziu4tl4erti5ab/file~~\n\nTested on Arch Linux riscv64gc (qemu)\n\nUPDATE: Seems like the above link is broken, so I tried to search for a link pointing to the original merge request. It turned out to me that the LLVM guys are cherry-picking from `google/benchmark`, and the upstream should be this:\n\nhttps://github.com/google/benchmark/blob/808571a52fd6cc7e9f0788e08f71f0f4175b6673/src/cycleclock.h#L190\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9215\n\nReviewed By: siying, jay-zhuang\n\nDifferential Revision: D34170586\n\nPulled By: riversand963\n\nfbshipit-source-id: 41b16b9f7f3bb0f3e7b26bb078eb575499c0f0f4",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/lock/range/range_tree/lib/portability/toku_time.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8b1df101da2752ea966b3b75cbc8c98e347ac304"
    },
    {
        "hash": "f6339de0d2e0383faa90fdf011a665c94be8f692",
        "author": "Hui Xiao",
        "date": "2022-05-17T10:24:04-07:00",
        "message": "Clarify some SequentialFileReader::Read logic (#10002)\n\nSummary:\n**Context/Summary:**\nThe logic related to PositionedRead in SequentialFileReader::Read confused me a bit as discussed here https://github.com/facebook/rocksdb/pull/9973#discussion_r872869256. Therefore I added a drawing with help from cbi42.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/10002\n\nTest Plan: - no code change\n\nReviewed By: anand1976, cbi42\n\nDifferential Revision: D36422632\n\nPulled By: hx235\n\nfbshipit-source-id: 9a8311d2365564f90d216c430f542fc11b2d9cde",
        "modified_files_count": 1,
        "modified_files": [
            "file/sequence_file_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f6339de0d2e0383faa90fdf011a665c94be8f692"
    },
    {
        "hash": "7b7a37c0694255498c1d28bce069eb9b01ff2cbe",
        "author": "Andrew Kryczka",
        "date": "2022-05-09T15:17:19-07:00",
        "message": "Add microbenchmarks for `DB::GetMergeOperands()` (#9971)\n\nSummary:\nThe new microbenchmarks, DBGetMergeOperandsInMemtable and DBGetMergeOperandsInSstFile, correspond to the two different LSMs tested: all data in one memtable and all data in one SST file, respectively. Both cases are parameterized by thread count (1 or 8) and merge operands per key (1, 32, or 1024). The SST file case is additionally parameterized by whether data is in block cache or mmap'd memory.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9971\n\nTest Plan:\n```\n$ TEST_TMPDIR=/dev/shm/db_basic_bench/ ./db_basic_bench --benchmark_filter=DBGetMergeOperands\nThe number of inputs is very large. DBGet will be repeated at least 192 times.\nThe number of inputs is very large. DBGet will be repeated at least 192 times.\n2022-05-09T13:15:40-07:00\nRunning ./db_basic_bench\nRun on (36 X 2570.91 MHz CPU s)\nCPU Caches:\n  L1 Data 32 KiB (x18)\n  L1 Instruction 32 KiB (x18)\n  L2 Unified 1024 KiB (x18)\n  L3 Unified 25344 KiB (x1)\nLoad Average: 4.50, 4.33, 4.37\n----------------------------------------------------------------------------------------------------------------------------\nBenchmark                                                                  Time             CPU   Iterations UserCounters...\n----------------------------------------------------------------------------------------------------------------------------\nDBGetMergeOperandsInMemtable/entries_per_key:1/threads:1                 846 ns          846 ns       849893 db_size=0\nDBGetMergeOperandsInMemtable/entries_per_key:32/threads:1               2436 ns         2436 ns       305779 db_size=0\nDBGetMergeOperandsInMemtable/entries_per_key:1024/threads:1            77226 ns        77224 ns         8152 db_size=0\nDBGetMergeOperandsInMemtable/entries_per_key:1/threads:8                 116 ns          929 ns       779368 db_size=0\nDBGetMergeOperandsInMemtable/entries_per_key:32/threads:8                330 ns         2644 ns       280824 db_size=0\nDBGetMergeOperandsInMemtable/entries_per_key:1024/threads:8            12466 ns        99718 ns         7200 db_size=0\nDBGetMergeOperandsInSstFile/entries_per_key:1/mmap:0/threads:1          1640 ns         1640 ns       461262 db_size=21.7826M\nDBGetMergeOperandsInSstFile/entries_per_key:1/mmap:1/threads:1          1693 ns         1693 ns       439936 db_size=21.7826M\nDBGetMergeOperandsInSstFile/entries_per_key:32/mmap:0/threads:1         3999 ns         3999 ns       172881 db_size=19.6981M\nDBGetMergeOperandsInSstFile/entries_per_key:32/mmap:1/threads:1         5544 ns         5543 ns       135657 db_size=19.6981M\nDBGetMergeOperandsInSstFile/entries_per_key:1024/mmap:0/threads:1      78767 ns        78761 ns         8395 db_size=19.6389M\nDBGetMergeOperandsInSstFile/entries_per_key:1024/mmap:1/threads:1     157242 ns       157238 ns         4495 db_size=19.6389M\nDBGetMergeOperandsInSstFile/entries_per_key:1/mmap:0/threads:8           231 ns         1848 ns       347768 db_size=21.7826M\nDBGetMergeOperandsInSstFile/entries_per_key:1/mmap:1/threads:8           214 ns         1715 ns       393312 db_size=21.7826M\nDBGetMergeOperandsInSstFile/entries_per_key:32/mmap:0/threads:8          596 ns         4767 ns       142088 db_size=19.6981M\nDBGetMergeOperandsInSstFile/entries_per_key:32/mmap:1/threads:8          720 ns         5757 ns       118200 db_size=19.6981M\nDBGetMergeOperandsInSstFile/entries_per_key:1024/mmap:0/threads:8      11613 ns        92460 ns         7344 db_size=19.6389M\nDBGetMergeOperandsInSstFile/entries_per_key:1024/mmap:1/threads:8      19989 ns       159908 ns         4440 db_size=19.6389M\n```\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D36258861\n\nPulled By: ajkr\n\nfbshipit-source-id: 04b733e1cc3a4a70ed9baa894c50fdf96c0d6064",
        "modified_files_count": 1,
        "modified_files": [
            "microbench/db_basic_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7b7a37c0694255498c1d28bce069eb9b01ff2cbe"
    },
    {
        "hash": "89571b30e520571600074d6de7d68983533ca280",
        "author": "Wang Yuan",
        "date": "2022-05-09T12:27:38-07:00",
        "message": "Improve the precision of row entry charge in row_cache (#9337)\n\nSummary:\n- For entry charge, we should only calculate the value size instead of including key size in LRUCache\n- The capacity of string could show the memory usage precisely\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9337\n\nReviewed By: ajkr\n\nDifferential Revision: D36219855\n\nfbshipit-source-id: 393e48ca419d230dc552ae62dd0eb1cc9f45961d",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/89571b30e520571600074d6de7d68983533ca280"
    },
    {
        "hash": "9f7968b2ed39ed312d35d8c983a18db746168b30",
        "author": "leipeng",
        "date": "2022-05-09T12:21:21-07:00",
        "message": "arena.h: fix Arena::IsInInlineBlock() (#9317)\n\nSummary:\nWhen I enable hugepage on my box, unit test fails, this PR fixes this issue:\n\n[  FAILED  ] ArenaTest.ApproximateMemoryUsage (1 ms)\n\nmemory/arena_test.cc:127: Failure\nValue of: arena.IsInInlineBlock()\n  Actual: true\nExpected: false\narena.IsInInlineBlock() = 1\nmemory/arena_test.cc:127: Failure\nValue of: arena.IsInInlineBlock()\n  Actual: true\nExpected: false\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9317\n\nReviewed By: ajkr\n\nDifferential Revision: D36219813\n\nfbshipit-source-id: 08d040d9f37ec4c16987e4150c2db876180d163d",
        "modified_files_count": 1,
        "modified_files": [
            "memory/arena.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9f7968b2ed39ed312d35d8c983a18db746168b30"
    },
    {
        "hash": "7b55b508390d792ff31a416b63d474a2a6780588",
        "author": "Qingyou Meng",
        "date": "2022-05-06T18:38:13-07:00",
        "message": "util/ribbon_alg.h: removed duplicate word \"vector\" (#9216)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/9216\n\nReviewed By: riversand963\n\nDifferential Revision: D36219934\n\nfbshipit-source-id: 8253b4e3eacceb8b040eeaa45cd5a50570a4eba6",
        "modified_files_count": 1,
        "modified_files": [
            "util/ribbon_alg.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7b55b508390d792ff31a416b63d474a2a6780588"
    },
    {
        "hash": "d1cc91c142dac40bcc568094e906177aecb14ea8",
        "author": "aierui",
        "date": "2022-05-06T18:29:33-07:00",
        "message": "typo fix: delete duplicate comment word (#9249)\n\nSummary:\ntypo fix: delete duplicate comment word\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9249\n\nReviewed By: riversand963\n\nDifferential Revision: D36219911\n\nfbshipit-source-id: 01e2fda65590f18fe46eefb56e049e6f2d028ae8",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d1cc91c142dac40bcc568094e906177aecb14ea8"
    },
    {
        "hash": "68ac507f96f26c9e757be0cbb410662bf05b9475",
        "author": "sdong",
        "date": "2022-05-04T10:19:53-07:00",
        "message": "Printing IO Error in DumpDBFileSummary (#9940)\n\nSummary:\nRight now in DumpDBFileSummary, IO error isn't printed out, but they are sometimes helpful. Print it out instead.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9940\n\nTest Plan: Watch existing tests to pass.\n\nReviewed By: riversand963\n\nDifferential Revision: D36113016\n\nfbshipit-source-id: 13002080fa4dc76589e2c1c5a1079df8a3c9391c",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_info_dumper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/68ac507f96f26c9e757be0cbb410662bf05b9475"
    },
    {
        "hash": "bf68d1c93d0a15ea6bdf3e630215b113d90cba66",
        "author": "Mark Callaghan",
        "date": "2022-05-04T10:15:49-07:00",
        "message": "Print elapsed time and number of operations completed (#9886)\n\nSummary:\nThis is inspired by debugging a regression test that runs for ~0.05 seconds and the short\nrunning time makes it prone to variance. While db_bench ran for ~60 seconds, 59.95 seconds\nwas spent opening 128 databases (and doing recovery). So it was harder to notice that the\nbenchmark only ran for 0.05 seconds.\n\nNormally I add output to the end of the line to make life easier for existing tools that parse it\nbut in this case the output near the end of the line has two optional parts and one of the optional\nparts adds an extra newline.\n\nThis is for https://github.com/facebook/rocksdb/issues/9856\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9886\n\nTest Plan:\n./db_bench --benchmarks=overwrite,readrandom --num=1000000 --threads=4\n\nold output:\n DB path: [/tmp/rocksdbtest-2260/dbbench]\n overwrite    :      14.108 micros/op 283338 ops/sec;   31.3 MB/s\n DB path: [/tmp/rocksdbtest-2260/dbbench]\n readrandom   :       7.994 micros/op 496788 ops/sec;   55.0 MB/s (1000000 of 1000000 found)\n\nnew output:\n DB path: [/tmp/rocksdbtest-2260/dbbench]\n overwrite    :      14.117 micros/op 282862 ops/sec 14.141 seconds 4000000 operations;   31.3 MB/s\n DB path: [/tmp/rocksdbtest-2260/dbbench]\n readrandom   :       8.649 micros/op 458475 ops/sec 8.725 seconds 4000000 operations;   49.8 MB/s (981548 of 1000000 found)\n\nReviewed By: ajkr\n\nDifferential Revision: D36102269\n\nPulled By: mdcallag\n\nfbshipit-source-id: 5cd8a9e11f5cbe2a46809571afd83335b6b0caa0",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bf68d1c93d0a15ea6bdf3e630215b113d90cba66"
    },
    {
        "hash": "de537dcaf1dffa6c333114d26b0ba64361f34143",
        "author": "Hui Xiao",
        "date": "2022-05-04T10:10:36-07:00",
        "message": "Fix a comment in RateLimiter::RequestToken (#9933)\n\nSummary:\n**Context/Summary:**\n- As titled\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9933\n\nTest Plan: - No code change\n\nReviewed By: ajkr\n\nDifferential Revision: D36086544\n\nPulled By: hx235\n\nfbshipit-source-id: 2bdd19f67e45df1e3af4121b0c1a5e866a57826d",
        "modified_files_count": 1,
        "modified_files": [
            "util/rate_limiter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/de537dcaf1dffa6c333114d26b0ba64361f34143"
    },
    {
        "hash": "b82edffc7b48145f1a9818a69d04e23228002896",
        "author": "Siying Dong",
        "date": "2022-05-03T16:21:31-07:00",
        "message": "Improve comments to options.allow_mmap_reads (#9936)\n\nSummary:\nIt confused users and use that with options.allow_mmap_reads = true, CPU is high with checksum verification. Add a comment to explain it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9936\n\nReviewed By: anand1976\n\nDifferential Revision: D36106529\n\nfbshipit-source-id: 3d723bd686f96a84c694c8b2d91ad28d9ccfd979",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b82edffc7b48145f1a9818a69d04e23228002896"
    },
    {
        "hash": "440c7f630633e85d0a32f982779ab40fa56fd8d5",
        "author": "Andrew Kryczka",
        "date": "2022-05-03T13:38:38-07:00",
        "message": "db_basic_bench fix for DB object cleanup (#9939)\n\nSummary:\nUse `unique_ptr<DB>` to make sure the DB object is deleted. Previously it was not, which led to accumulating file descriptors for deleted directories because a `DBImpl::db_dir_` from each test remained alive.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9939\n\nTest Plan: run `lsof -p $(pidof db_basic_bench)` while benchmark runs; verify no FDs for deleted directories.\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D36108761\n\nPulled By: ajkr\n\nfbshipit-source-id: cfe02646b038a445af7d5db8989eb1f40d658359",
        "modified_files_count": 1,
        "modified_files": [
            "microbench/db_basic_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/440c7f630633e85d0a32f982779ab40fa56fd8d5"
    },
    {
        "hash": "b6ec3328af25290fe1190b1d3f20503b76ed9ff7",
        "author": "Mark Callaghan",
        "date": "2022-05-03T09:37:49-07:00",
        "message": "Make --benchmarks=flush flush the default column family (#9887)\n\nSummary:\ndb_bench --benchmarks=flush wasn't flushing the default column family.\n\nThis is for https://github.com/facebook/rocksdb/issues/9880\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9887\n\nTest Plan:\nConfirm that flush works (*.log is empty) when \"flush\" added to benchmark list\nConfirm that *.log is not empty otherwise.\n\nRepeat for all combinations for: uses column families, uses multiple databases\n\n./db_bench --benchmarks=overwrite --num=10000\nls -lrt /tmp/rocksdbtest-2260/dbbench/*.log\n-rw-r--r-- 1 me users 1380286 Apr 21 10:47 /tmp/rocksdbtest-2260/dbbench/000004.log\n\n./db_bench --benchmarks=overwrite,flush --num=10000\nls -lrt /tmp/rocksdbtest-2260/dbbench/*.log\n -rw-r--r-- 1 me users 0 Apr 21 10:48 /tmp/rocksdbtest-2260/dbbench/000008.log\n\n./db_bench --benchmarks=overwrite --num=10000 --num_column_families=4\nls -lrt /tmp/rocksdbtest-2260/dbbench/*.log\n  -rw-r--r-- 1 me users 1387823 Apr 21 10:49 /tmp/rocksdbtest-2260/dbbench/000004.log\n\n./db_bench --benchmarks=overwrite,flush --num=10000 --num_column_families=4\nls -lrt /tmp/rocksdbtest-2260/dbbench/*.log\n-rw-r--r-- 1 me users 0 Apr 21 10:51 /tmp/rocksdbtest-2260/dbbench/000014.log\n\n./db_bench --benchmarks=overwrite --num=10000 --num_multi_db=2\nls -lrt /tmp/rocksdbtest-2260/dbbench/[01]/*.log\n -rw-r--r-- 1 me users 1380838 Apr 21 10:55 /tmp/rocksdbtest-2260/dbbench/0/000004.log\n -rw-r--r-- 1 me users 1379734 Apr 21 10:55 /tmp/rocksdbtest-2260/dbbench/1/000004.log\n\n./db_bench --benchmarks=overwrite,flush --num=10000 --num_multi_db=2\nls -lrt /tmp/rocksdbtest-2260/dbbench/[01]/*.log\n-rw-r--r-- 1 me users 0 Apr 21 10:57 /tmp/rocksdbtest-2260/dbbench/0/000013.log\n-rw-r--r-- 1 me users 0 Apr 21 10:57 /tmp/rocksdbtest-2260/dbbench/1/000013.log\n\n./db_bench --benchmarks=overwrite --num=10000 --num_column_families=4 --num_multi_db=2\nls -lrt /tmp/rocksdbtest-2260/dbbench/[01]/*.log\n-rw-r--r-- 1 me users 1395108 Apr 21 10:52 /tmp/rocksdbtest-2260/dbbench/1/000004.log\n-rw-r--r-- 1 me users 1380411 Apr 21 10:52 /tmp/rocksdbtest-2260/dbbench/0/000004.log\n\n./db_bench --benchmarks=overwrite,flush --num=10000 --num_column_families=4 --num_multi_db=2\nls -lrt /tmp/rocksdbtest-2260/dbbench/[01]/*.log\n-rw-r--r-- 1 me users 0 Apr 21 10:54 /tmp/rocksdbtest-2260/dbbench/0/000022.log\n-rw-r--r-- 1 me users 0 Apr 21 10:54 /tmp/rocksdbtest-2260/dbbench/1/000022.log\n\nReviewed By: ajkr\n\nDifferential Revision: D36026777\n\nPulled By: mdcallag\n\nfbshipit-source-id: d42d3d7efceea7b9a25bbbc0f04461d2b7301122",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b6ec3328af25290fe1190b1d3f20503b76ed9ff7"
    },
    {
        "hash": "2b5df21e95096fbfc25e8aac33b2153302e710e9",
        "author": "Yanqin Jin",
        "date": "2022-05-02T19:39:24-07:00",
        "message": "Remove ifdef for try_emplace after upgrading to c++17 (#9932)\n\nSummary:\nTest plan\nmake check\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9932\n\nReviewed By: ajkr\n\nDifferential Revision: D36085404\n\nPulled By: riversand963\n\nfbshipit-source-id: 2ece14ca0e2e4c1288339ff79e7e126b76eaf786",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/lock/point/point_lock_tracker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2b5df21e95096fbfc25e8aac33b2153302e710e9"
    },
    {
        "hash": "cda34dd64ab5d58394d3aa6bdc61def5ef204d23",
        "author": "Andrew Kryczka",
        "date": "2022-05-02T16:19:00-07:00",
        "message": "Allow consecutive SingleDelete() in stress/crash test (#9930)\n\nSummary:\nWe need to support consecutive SingleDelete(), so this PR adds it to the stress/crash tests.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9930\n\nTest Plan: `python3 tools/db_crashtest.py blackbox --simple --nooverwritepercent=50 --writepercent=90 --delpercent=10 --readpercent=0 --prefixpercent=0 --delrangepercent=0 --iterpercent=0 --max_key=1000000 --duration=3600 --interval=10 --write_buffer_size=1048576 --target_file_size_base=1048576 --max_bytes_for_level_base=4194304 --value_size_mult=33`\n\nReviewed By: riversand963\n\nDifferential Revision: D36081863\n\nPulled By: ajkr\n\nfbshipit-source-id: 3566cdbaed375b8003126fc298968eb1a854317f",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cda34dd64ab5d58394d3aa6bdc61def5ef204d23"
    },
    {
        "hash": "68ee228dec7ec4dad595d3c583ee314018540c5c",
        "author": "Paras Sethia",
        "date": "2022-04-27T06:01:09-07:00",
        "message": "RocksDB: fix bug in crash-recovery correctness testing (#9897)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9897\n\nFixes https://github.com/facebook/rocksdb/issues/9385.\n\nUpdate State to reflect the value in the DB after a crash\n\nReviewed By: ajkr\n\nDifferential Revision: D35788808\n\nfbshipit-source-id: 2d21d8537ab380a17cad3e90ac72b3eb1b56de9f",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/68ee228dec7ec4dad595d3c583ee314018540c5c"
    },
    {
        "hash": "ce2d8a423967d0a207a90ac5810c7de0d7f97280",
        "author": "Andrew Kryczka",
        "date": "2022-04-26T19:21:34-07:00",
        "message": "fix clang-analyze in corruption_test (#9908)\n\nSummary:\nThis PR fixes a clang-analyze error that I introduced in https://github.com/facebook/rocksdb/issues/9906:\n\n```\ndb/corruption_test.cc:358:15: warning: Called C++ object pointer is null\n    ASSERT_OK(db_->Put(WriteOptions(), cfhs[0], \"k\", \"v\"));\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n./test_util/testharness.h:76:62: note: expanded from macro 'ASSERT_OK'\n  ASSERT_PRED_FORMAT1(ROCKSDB_NAMESPACE::test::AssertStatus, s)\n                                                             ^\nthird-party/gtest-1.8.1/fused-src/gtest/gtest.h:19909:36: note: expanded\nfrom macro 'ASSERT_PRED_FORMAT1'\n  GTEST_PRED_FORMAT1_(pred_format, v1, GTEST_FATAL_FAILURE_)\n                                   ^~\nthird-party/gtest-1.8.1/fused-src/gtest/gtest.h:19892:34: note: expanded\nfrom macro 'GTEST_PRED_FORMAT1_'\n  GTEST_ASSERT_(pred_format(#v1, v1), \\\n                                 ^~\nthird-party/gtest-1.8.1/fused-src/gtest/gtest.h:19868:52: note: expanded\nfrom macro 'GTEST_ASSERT_'\n  if (const ::testing::AssertionResult gtest_ar = (expression)) \\\n                                                   ^~~~~~~~~~\n1 warning generated.\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9908\n\nReviewed By: riversand963\n\nDifferential Revision: D35953147\n\nPulled By: ajkr\n\nfbshipit-source-id: 9b837bd7581c6e1e2cdbc961c099652256eb9d4b",
        "modified_files_count": 1,
        "modified_files": [
            "db/corruption_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ce2d8a423967d0a207a90ac5810c7de0d7f97280"
    },
    {
        "hash": "1eb279dcce448fb19bb34e6c1ce00d868991979f",
        "author": "Andrew Kryczka",
        "date": "2022-04-26T16:46:39-07:00",
        "message": "Add mmap DBGet microbench parameters (#9903)\n\nSummary:\nI tried evaluating https://github.com/facebook/rocksdb/issues/9611 using DBGet microbenchmarks but mostly found the change is well within the noise even for hundreds of repetitions; meanwhile, the InternalKeyComparator CPU it saves is 1-2% according to perf so it should be measurable. In this PR I tried adding a mmap mode that will bypass compression/checksum/block cache/file read to focus more on the block lookup paths, and also increased the Get() count.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9903\n\nReviewed By: jay-zhuang, riversand963\n\nDifferential Revision: D35907375\n\nPulled By: ajkr\n\nfbshipit-source-id: 69490d5040ef0863e1ce296724104d0aa7667215",
        "modified_files_count": 1,
        "modified_files": [
            "microbench/db_basic_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1eb279dcce448fb19bb34e6c1ce00d868991979f"
    },
    {
        "hash": "fb9a167a55e0970b1ef6f67c1600c8d9c4c6114f",
        "author": "Jaromir Vanek",
        "date": "2022-04-25T14:49:54-07:00",
        "message": "Add 95% confidence intervals to db_bench output (#9882)\n\nSummary:\nEnhancing `db_bench` output with 95% statistical confidence intervals for better performance evaluation. The goal is to unambiguously separate random variance when running benchmark over multiple iterations.\n\nOutput enhanced with confidence intervals exposed in brackets:\n\n```\n$ ./db_bench --benchmarks=fillseq[-X10]\n\nRunning benchmark for 10 times\nfillseq      :       4.961 micros/op 201578 ops/sec;   22.3 MB/s\nfillseq      :       5.030 micros/op 198824 ops/sec;   22.0 MB/s\nfillseq [AVG 2 runs] : 200201 (± 2698) ops/sec;   22.1 (± 0.3) MB/sec\nfillseq      :       4.963 micros/op 201471 ops/sec;   22.3 MB/s\nfillseq [AVG 3 runs] : 200624 (± 1765) ops/sec;   22.2 (± 0.2) MB/sec\nfillseq      :       5.035 micros/op 198625 ops/sec;   22.0 MB/s\nfillseq [AVG 4 runs] : 200124 (± 1586) ops/sec;   22.1 (± 0.2) MB/sec\nfillseq      :       4.979 micros/op 200861 ops/sec;   22.2 MB/s\nfillseq [AVG 5 runs] : 200272 (± 1262) ops/sec;   22.2 (± 0.1) MB/sec\nfillseq      :       4.893 micros/op 204367 ops/sec;   22.6 MB/s\nfillseq [AVG 6 runs] : 200954 (± 1688) ops/sec;   22.2 (± 0.2) MB/sec\nfillseq      :       4.914 micros/op 203502 ops/sec;   22.5 MB/s\nfillseq [AVG 7 runs] : 201318 (± 1595) ops/sec;   22.3 (± 0.2) MB/sec\nfillseq      :       4.998 micros/op 200074 ops/sec;   22.1 MB/s\nfillseq [AVG 8 runs] : 201163 (± 1415) ops/sec;   22.3 (± 0.2) MB/sec\nfillseq      :       4.946 micros/op 202188 ops/sec;   22.4 MB/s\nfillseq [AVG 9 runs] : 201277 (± 1267) ops/sec;   22.3 (± 0.1) MB/sec\nfillseq      :       5.093 micros/op 196331 ops/sec;   21.7 MB/s\nfillseq [AVG 10 runs] : 200782 (± 1491) ops/sec;   22.2 (± 0.2) MB/sec\nfillseq [AVG    10 runs] : 200782 (± 1491) ops/sec;   22.2 (± 0.2) MB/sec\nfillseq [MEDIAN 10 runs] : 201166 ops/sec;   22.3 MB/s\n```\n\nFor more explicit interval representation, use `--confidence_interval_only` flag:\n\n```\n$ ./db_bench --benchmarks=fillseq[-X10] --confidence_interval_only\n\nRunning benchmark for 10 times\nfillseq      :       4.935 micros/op 202648 ops/sec;   22.4 MB/s\nfillseq      :       5.078 micros/op 196943 ops/sec;   21.8 MB/s\nfillseq [CI95 2 runs] : (194205, 205385) ops/sec; (21.5, 22.7) MB/sec\nfillseq      :       5.159 micros/op 193816 ops/sec;   21.4 MB/s\nfillseq [CI95 3 runs] : (192735, 202869) ops/sec; (21.3, 22.4) MB/sec\nfillseq      :       4.947 micros/op 202158 ops/sec;   22.4 MB/s\nfillseq [CI95 4 runs] : (194721, 203061) ops/sec; (21.5, 22.5) MB/sec\nfillseq      :       4.908 micros/op 203756 ops/sec;   22.5 MB/s\nfillseq [CI95 5 runs] : (196113, 203615) ops/sec; (21.7, 22.5) MB/sec\nfillseq      :       5.063 micros/op 197528 ops/sec;   21.9 MB/s\nfillseq [CI95 6 runs] : (196319, 202631) ops/sec; (21.7, 22.4) MB/sec\nfillseq      :       5.214 micros/op 191799 ops/sec;   21.2 MB/s\nfillseq [CI95 7 runs] : (194953, 201803) ops/sec; (21.6, 22.3) MB/sec\nfillseq      :       5.260 micros/op 190095 ops/sec;   21.0 MB/s\nfillseq [CI95 8 runs] : (193749, 200937) ops/sec; (21.4, 22.2) MB/sec\nfillseq      :       5.076 micros/op 196992 ops/sec;   21.8 MB/s\nfillseq [CI95 9 runs] : (194134, 200474) ops/sec; (21.5, 22.2) MB/sec\nfillseq      :       5.388 micros/op 185603 ops/sec;   20.5 MB/s\nfillseq [CI95 10 runs] : (192487, 199781) ops/sec; (21.3, 22.1) MB/sec\nfillseq [AVG    10 runs] : 196134 (± 3647) ops/sec;   21.7 (± 0.4) MB/sec\nfillseq [MEDIAN 10 runs] : 196968 ops/sec;   21.8 MB/sec\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9882\n\nReviewed By: pdillinger\n\nDifferential Revision: D35796148\n\nPulled By: vanekjar\n\nfbshipit-source-id: 8313712d16728ff982b8aff28195ee56622385b8",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fb9a167a55e0970b1ef6f67c1600c8d9c4c6114f"
    },
    {
        "hash": "a5063c89311a6cea0babca3abe809dbade866b0b",
        "author": "Hui Xiao",
        "date": "2022-04-19T19:02:00-07:00",
        "message": "Fix issue of opening too many files in BlockBasedTableReaderCapMemoryTest.CapMemoryUsageUnderCacheCapacity (#9869)\n\nSummary:\n**Context:**\nUnit test for https://github.com/facebook/rocksdb/pull/9748 keeps opening new files to see whether the new feature is able to correctly constrain the opening based on block cache capacity.\n\nHowever, the unit test has two places written inefficiently that can lead to opening too many new files relative to underlying operating system/file system constraint, even before hitting the block cache capacity:\n(1) [opened_table_reader_num < 2 * max_table_reader_num](https://github.com/facebook/rocksdb/pull/9748/files?show-viewed-files=true&file-filters%5B%5D=#diff-ec9f5353e317df71093094734ba29193b94a998f0f9c9af924e4c99692195eeaR438), which can leads to 1200 + open files because of (2) below\n(2) NewLRUCache(6 * CacheReservationManagerImpl<CacheEntryRole::kBlockBasedTableReader>::GetDummyEntrySize()) in [here](https://github.com/facebook/rocksdb/pull/9748/files?show-viewed-files=true&file-filters%5B%5D=#diff-ec9f5353e317df71093094734ba29193b94a998f0f9c9af924e4c99692195eeaR364)\n\nTherefore we see CI failures like this on machine with a strict open file limit ~1000 (see the \"table_1021\" naming in following error msg)\nhttps://app.circleci.com/pipelines/github/facebook/rocksdb/12886/workflows/75524682-3fa4-41ee-9a61-81827b51d99b/jobs/345270\n```\nfs_->NewWritableFile(path, foptions, &file, nullptr)\nIO error: While open a file for appending: /dev/shm/rocksdb.Jedwt/run-block_based_table_reader_test-CapMemoryUsageUnderCacheCapacity-BlockBasedTableReaderCapMemoryTest.CapMemoryUsageUnderCacheCapacity-0/block_based_table_reader_test_1668910_829492452552920927/**table_1021**: Too many open files\n```\n\n**Summary:**\n- Revised the test more efficiently on the above 2 places,  including using 1.1 instead 2 in the threshold and lowering down the block cache capacity a bit\n- Renamed some variables for clarity\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9869\n\nTest Plan:\n- Manual inspection of max opened table reader in all test case, which is around ~389\n- Circle CI to see if error is gone\n\nReviewed By: ajkr\n\nDifferential Revision: D35752655\n\nPulled By: hx235\n\nfbshipit-source-id: 8a0953d39d561babfa4257b8ed8550bb21b04839",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a5063c89311a6cea0babca3abe809dbade866b0b"
    },
    {
        "hash": "690f1edf373a5bb42381ebfefb2935e55d1360e7",
        "author": "Andrew Kryczka",
        "date": "2022-04-18T23:46:16-07:00",
        "message": "Avoid overwriting OPTIONS file settings in db_bench (#9862)\n\nSummary:\n`InitializeOptionsGeneral()` was overwriting many options that were already configured by OPTIONS file, potentially with the flag default values. This PR changes that function to only overwrite options in limited scenarios, as described at the top of its definition. Block cache is still a violation.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9862\n\nTest Plan: ran under various scenarios (multi-DB, single DB, OPTIONS file, flags) and verified options are set as expected\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D35736960\n\nPulled By: ajkr\n\nfbshipit-source-id: 75b77740af37e6f5741618f8a8f5685df2417d03",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/690f1edf373a5bb42381ebfefb2935e55d1360e7"
    },
    {
        "hash": "e83c55439ad492c5cec13d45c4d13bdb5ae64ce9",
        "author": "Hui Xiao",
        "date": "2022-04-18T14:16:35-07:00",
        "message": "Conditionally declare and define variable that is unused in LITE mode (#9854)\n\nSummary:\nContext:\nAs mentioned in https://github.com/facebook/rocksdb/issues/9701, we have the following in LITE=1 make static_lib for v7.0.2\n```\n  CC       file/sequence_file_reader.o\n  CC       file/sst_file_manager_impl.o\n  CC       file/writable_file_writer.o\nIn file included from file/writable_file_writer.cc:10:\n./file/writable_file_writer.h:163:15: error: private field 'temperature_' is not used [-Werror,-Wunused-private-field]\n  Temperature temperature_;\n              ^\n1 error generated.\nmake: *** [file/writable_file_writer.o] Error 1\n```\n\n as titled\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9854\n\nTest Plan:\n- Local `LITE=1 make static_lib` reveals the same error and error is gone after this fix\n- CI\n\nReviewed By: ajkr, jay-zhuang\n\nDifferential Revision: D35706585\n\nPulled By: hx235\n\nfbshipit-source-id: 7743310298231ad6866304ffa2225c8abdc91d9a",
        "modified_files_count": 1,
        "modified_files": [
            "file/writable_file_writer.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e83c55439ad492c5cec13d45c4d13bdb5ae64ce9"
    },
    {
        "hash": "3d473235d488c999221ab38a58b92bfca567f2a0",
        "author": "Jay Zhuang",
        "date": "2022-04-18T10:26:21-07:00",
        "message": "Update main version.h to NEXT release (7.3) (#9852)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/9852\n\nReviewed By: ajkr\n\nDifferential Revision: D35694753\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 729d416afc588e5db2367e899589bbb5419820d6",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3d473235d488c999221ab38a58b92bfca567f2a0"
    },
    {
        "hash": "844a35108b6539062d9942bedaecb5a6ab0b79f0",
        "author": "Jonathan Albrecht",
        "date": "2022-04-14T11:05:39-07:00",
        "message": "Fix minimum libzstd version that supports ZSTD_STREAMING (#9841)\n\nSummary:\nThe minimum libzstd version that has `ZSTD_compressStream2` is\n1.4.0 so only define ZSTD_STREAMING in that case.\n\nFixes building on Ubuntu 18.04 which has libzstd 1.3.3 as its\nrepository version.\n\nFixes https://github.com/facebook/rocksdb/issues/9795\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9841\n\nTest Plan:\nBuild and test on Ubuntu 18.04 with:\n  apt-get install libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev \\\n    libzstd-dev libgflags-dev g++ make curl\n\nReviewed By: ajkr\n\nDifferential Revision: D35648738\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 2a9e969bcc17a7dc10172f3817283409de885811",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/844a35108b6539062d9942bedaecb5a6ab0b79f0"
    },
    {
        "hash": "7c7df1850ac3a2a7137a777bd8cdc14d7613e9d7",
        "author": "Peter Dillinger",
        "date": "2022-04-13T12:16:07-07:00",
        "message": "Update main version.h to NEXT release (#9834)\n\nSummary:\nHenceforth, the version number in version.h shall reflect the\n*next* version number to be tagged (to the best of our knowledge) rather\nthan the *previous* (unpatched) version.\n\nThe primary advantage is being able to distinguish (in source code `#if`s\nor human running tools) the development version from the last released\nversion.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9834\n\nTest Plan: CI\n\nReviewed By: ajkr\n\nDifferential Revision: D35617373\n\nPulled By: pdillinger\n\nfbshipit-source-id: f3286089d17b82409e6af08e5aa9c1affefe2862",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7c7df1850ac3a2a7137a777bd8cdc14d7613e9d7"
    },
    {
        "hash": "f3bcac39a601585dadbf27f632522bb48d622d13",
        "author": "Akanksha Mahajan",
        "date": "2022-04-11T10:56:11-07:00",
        "message": "Fix stress test failure in ReadAsync. (#9824)\n\nSummary:\nFix stress test failure in ReadAsync by ignoring errors\ninjected during async read by FaultInjectionFS.\nFailure:\n```\n WARNING: prefix_size is non-zero but memtablerep != prefix_hash\nDidn't get expected error from MultiGet.\nnum_keys 14 Expected 1 errors, seen 0\nCallstack that injected the fault\nInjected error type = 32538\nMessage: error;\n#0   ./db_stress() [0x6f7dd4] rocksdb::port::SaveStack(int*, int)\t/data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/port/stack_trace.cc:152\nhttps://github.com/facebook/rocksdb/issues/1   ./db_stress() [0x7f2bda] rocksdb::FaultInjectionTestFS::InjectThreadSpecificReadError(rocksdb::FaultInjectionTestFS::ErrorOperation, rocksdb::Slice*, bool, char*, bool, bool*)\t/data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/utilities/fault_injection_fs.cc:891\nhttps://github.com/facebook/rocksdb/issues/2   ./db_stress() [0x7f2e78] rocksdb::TestFSRandomAccessFile::Read(unsigned long, unsigned long, rocksdb::IOOptions const&, rocksdb::Slice*, char*, rocksdb::IODebugContext*) const\t/data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/utilities/fault_injection_fs.cc:367\nhttps://github.com/facebook/rocksdb/issues/3   ./db_stress() [0x6483d7] rocksdb::(anonymous namespace)::CompositeRandomAccessFileWrapper::Read(unsigned long, unsigned long, rocksdb::Slice*, char*) const\t/data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/env/composite_env.cc:61\nhttps://github.com/facebook/rocksdb/issues/4   ./db_stress() [0x654564] rocksdb::(anonymous namespace)::LegacyRandomAccessFileWrapper::Read(unsigned long, unsigned long, rocksdb::IOOptions const&, rocksdb::Slice*, char*, rocksdb::IODebugContext*) const\t/data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/env/env.cc:152\nhttps://github.com/facebook/rocksdb/issues/5   ./db_stress() [0x659b3b] rocksdb::FSRandomAccessFile::ReadAsync(rocksdb::FSReadRequest&, rocksdb::IOOptions const&, std::function<void (rocksdb::FSReadRequest const&, void*)>, void*, void**, std::function<void (void*)>*, rocksdb::IODebugContext*)\t/data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/./include/rocksdb/file_system.h:896\nhttps://github.com/facebook/rocksdb/issues/6   ./db_stress() [0x8b8bab] rocksdb::RandomAccessFileReader::ReadAsync(rocksdb::FSReadRequest&, rocksdb::IOOptions const&, std::function<void (rocksdb::FSReadRequest const&, void*)>, void*, void**, std::function<void (void*)>*, rocksdb::Env::IOPriority)\t/data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/file/random_access_file_reader.cc:459\nhttps://github.com/facebook/rocksdb/issues/7   ./db_stress() [0x8b501f] rocksdb::FilePrefetchBuffer::ReadAsync(rocksdb::IOOptions const&, rocksdb::RandomAccessFileReader*, rocksdb::Env::IOPriority, unsigned long, unsigned long, unsigned long, unsigned int)\t/data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/file/file_prefetch_buffer.cc:124\nhttps://github.com/facebook/rocksdb/issues/8   ./db_stress() [0x8b55fc] rocksdb::FilePrefetchBuffer::PrefetchAsync(rocksdb::IOOptions const&, rocksdb::RandomAccessFileReader*, unsigned long, unsigned long, unsigned long, rocksdb::Env::IOPriority, bool&)\t/data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/file/file_prefetch_buffer.cc:363\nhttps://github.com/facebook/rocksdb/issues/9   ./db_stress() [0x8b61f8] rocksdb::FilePrefetchBuffer::TryReadFromCacheAsync(rocksdb::IOOptions const&, rocksdb::RandomAccessFileReader*, unsigned long, unsigned long, rocksdb::Slice*, rocksdb::Status*, rocksdb::Env::IOPriority, bool)\t/data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/file/file_prefetch_buffer.cc:482\nhttps://github.com/facebook/rocksdb/issues/10  ./db_stress() [0x745e04] rocksdb::BlockFetcher::TryGetFromPrefetchBuffer()\t/data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/table/block_fetcher.cc:76\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9824\n\nTest Plan:\n```\n./db_stress --acquire_snapshot_one_in=10000 --adaptive_readahead=1 --allow_concurrent_memtable_write=0 --async_io=1 --atomic_flush=1 --avoid_flush_during_recovery=0 --avoid_unnecessary_blocking_io=0 -- backup_max_size=104857600 --backup_one_in=100000 --batch_protection_bytes_per_key=0 --block_size=16384 --bloom_bits=5.037629726741734 --bottommost_compression_type=lz4hc --cache_index_and_filter_blocks=0 --cache_size=8388608 --checkpoint_one_in=1000000 --checksum_type=kxxHash --clear_column_family_one_in=0 --column_families=1 --compact_files_one_in=1000000 --compact_range_one_in=1000000 --compaction_ttl=100 --compression_max_dict_buffer_bytes=1073741823 --compression_max_dict_bytes=16384 --compression_parallel_threads=1 --compression_type=zstd --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --db=/home/akankshamahajan/dev/shm/rocksdb/rocksdb_crashtest_blackbox --db_write_buffer_size=8388608 --delpercent=0 --delrangepercent=0 --destroy_db_initially=0 - detect_filter_construct_corruption=1 --disable_wal=1 --enable_compaction_filter=0 --enable_pipelined_write=0 --expected_values_dir=/home/akankshamahajan/dev/shm/rocksdb/rocksdb_crashtest_expected --experimental_mempurge_threshold=8.772789063014715 --fail_if_options_file_error=0 --file_checksum_impl=crc32c --flush_one_in=1000000 --format_version=3 --get_current_wal_file_one_in=0 --get_live_files_one_in=1000000 --get_property_one_in=1000000 --get_sorted_wal_files_one_in=0 --index_block_restart_interval=15 --index_type=3 --iterpercent=0 --key_len_percent_dist=1,30,69 --level_compaction_dynamic_level_bytes=False --long_running_snapshots=0 --mark_for_compaction_one_file_in=0 --max_background_compactions=1 --max_bytes_for_level_base=67108864 --max_key=25000000 --max_key_len=3 --max_manifest_file_size=1073741824 --max_write_batch_group_size_bytes=16777216 --max_write_buffer_number=3 --max_write_buffer_size_to_maintain=2097152 --memtable_prefix_bloom_size_ratio=0.001 --memtable_whole_key_filtering=1 --memtablerep=skip_list --mmap_read=0 --mock_direct_io=True --nooverwritepercent=1 --open_files=-1 --open_metadata_write_fault_one_in=0 --open_read_fault_one_in=0 --open_write_fault_one_in=0 --ops_per_thread=100000000 --optimize_filters_for_memory=0 --paranoid_file_checks=1 --partition_filters=0 --partition_pinning=2 --pause_background_one_in=1000000 --periodic_compaction_seconds=1000 --prefix_size=-1 --prefixpercent=0 --prepopulate_block_cache=0 --progress_reports=0 --read_fault_one_in=32 --readpercent=100 --recycle_log_file_num=1 --reopen=0 --reserve_table_reader_memory=1 --ribbon_starting_level=999 --secondary_cache_fault_one_in=0 --set_options_one_in=0 --snapshot_hold_ops=100000 --sst_file_manager_bytes_per_sec=0 --sst_file_manager_bytes_per_truncate=0 --subcompactions=2 --sync=0 --sync_fault_injection=False --target_file_size_base=16777216 --target_file_size_multiplier=1 --test_batches_snapshots=0 --top_level_index_pinning=3 --unpartitioned_pinning=2 --use_block_based_filter=0 --use_clock_cache=0 --use_direct_io_for_flush_and_compaction=1 --use_direct_reads=0 --use_full_merge_v1=0 --use_merge=1 --use_multiget=1 --user_timestamp_size=0 --value_size_mult=32 --verify_checksum=1 --verify_checksum_one_in=1000000 --verify_db_one_in=100000 --wal_compression=none --write_buffer_size=33554432 --write_dbid_to_manifest=1 --write_fault_one_in=0 --writepercent=0\n```\n\nReviewed By: anand1976\n\nDifferential Revision: D35514566\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: e2a868fdd7422604774c1419738f9926a21e92a4",
        "modified_files_count": 1,
        "modified_files": [
            "file/file_prefetch_buffer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f3bcac39a601585dadbf27f632522bb48d622d13"
    },
    {
        "hash": "25e31d1a942b6937d683f9360a58d1448659b478",
        "author": "Duncan Bellamy",
        "date": "2022-04-08T13:29:19-07:00",
        "message": "tools/db_bench_tool.cc use uint64_t instead of size_t (#9800)\n\nSummary:\nto fix compilation for 32bit\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9800\n\nReviewed By: riversand963\n\nDifferential Revision: D35404447\n\nfbshipit-source-id: 6a1185bb38f3a718357aa120e3b26a1ea77f023d",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/25e31d1a942b6937d683f9360a58d1448659b478"
    },
    {
        "hash": "f3375429480f1864bbc4e0c57fc78e96ec9bc618",
        "author": "Hui Xiao",
        "date": "2022-04-07T12:25:43-07:00",
        "message": "Fix a bug of TEST_SetRandomTableProperties due to non-zero padding between fields in TableProperties struct (#9812)\n\nSummary:\nContext:\nhttps://github.com/facebook/rocksdb/pull/9748#discussion_r843134214 reveals an issue with TEST_SetRandomTableProperties when non-zero padding is used between the last string field and first non-string field in TableProperties.\nFixed by https://github.com/facebook/rocksdb/pull/9748#discussion_r843244375\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9812\n\nTest Plan: No production code changes and rely on existing CI\n\nReviewed By: ajkr\n\nDifferential Revision: D35423680\n\nPulled By: hx235\n\nfbshipit-source-id: fd855eef3d32771bb79c65bd7012ab8bb3c400ab",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_properties.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f3375429480f1864bbc4e0c57fc78e96ec9bc618"
    },
    {
        "hash": "3fc2eaf5612de7077446a55a00ba80744ccd0ce6",
        "author": "Akanksha Mahajan",
        "date": "2022-04-07T10:31:50-07:00",
        "message": "Fix valgrind test failure for async read (#9819)\n\nSummary:\nSince all plaftorms don't support io_uring. So updated the unit\ntest to take that into consideration when testing async reads in unit tests.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9819\n\nTest Plan:\nvalgrind --error-exitcode=2 --leak-check=full ./prefetch_test\n--gtest_filter=PrefetchTest2.ReadAsyncWithPosixFS\nCircleCI jobs\n\nReviewed By: pdillinger\n\nDifferential Revision: D35469959\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: b170459ec816487fc0a13b1d55dbbe4f754b2eba",
        "modified_files_count": 1,
        "modified_files": [
            "file/prefetch_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3fc2eaf5612de7077446a55a00ba80744ccd0ce6"
    },
    {
        "hash": "7ea26abb8b8625ccd4916f95fbd9466c8947f5bd",
        "author": "Akanksha Mahajan",
        "date": "2022-04-06T18:36:23-07:00",
        "message": "Fix reseting of async_read_in_progress_ variable in FilePrefetchBuffer to call Poll API (#9815)\n\nSummary:\nCurrently RocksDB reset async_read_in_progress_ in callback\ndue to which underlying filesystem relying on Poll API won't be called\nleading to stale memory access.\nIn order to fix it, async_read_in_progress_ will be reset after Poll API\nis called to make sure underlying file_system waiting on Poll can clear\nits state or take appropriate action.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9815\n\nTest Plan: CircleCI tests\n\nReviewed By: anand1976\n\nDifferential Revision: D35451534\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: b70ef6251a7aa9ed4876ba5e5100baa33d7d474c",
        "modified_files_count": 1,
        "modified_files": [
            "file/file_prefetch_buffer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7ea26abb8b8625ccd4916f95fbd9466c8947f5bd"
    },
    {
        "hash": "633b7f15d5938ce509686916f2edb6dd8d0e3516",
        "author": "Ramkumar Vadivelu",
        "date": "2022-04-05T20:22:47-07:00",
        "message": "Update/Fix API comments for OpenForReadOnly() and OpenAsSecondary() (#9807)\n\nSummary:\nUpdates/fixes to API comments for OpenForReadOnly() and OpenAsSecondary()\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9807\n\nReviewed By: ajkr\n\nDifferential Revision: D35419206\n\nPulled By: ramvadiv\n\nfbshipit-source-id: ac2514a14e4ec77b2ed34c5dca6251528c5b92f1",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/633b7f15d5938ce509686916f2edb6dd8d0e3516"
    },
    {
        "hash": "3ae9c5309bee6fa3a68ba8934664adcf885f12fa",
        "author": "Andrew Kryczka",
        "date": "2022-04-05T18:32:05-07:00",
        "message": "Remove explicit padding from CacheAlignedInstrumentedMutex (#9809)\n\nSummary:\nFixes https://github.com/facebook/rocksdb/issues/9779.\n\nThe padding at the end of a struct is added implicitly according to the\nsizeof spec: \"When applied to a class, the result is the\nnumber of bytes in an object of that class including any padding\nrequired for placing objects of that type in an array\"\n(https://eel.is/c++draft/expr.sizeof#2.sentence-2). We should drop the\nexplicit padding since it assumed support for zero-length arrays, which\nis non-standard.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9809\n\nTest Plan: rely on CI\n\nReviewed By: riversand963\n\nDifferential Revision: D35413496\n\nPulled By: ajkr\n\nfbshipit-source-id: 25d52ca45e648ad0d5657149f26f6adecbed1cb4",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/instrumented_mutex.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3ae9c5309bee6fa3a68ba8934664adcf885f12fa"
    },
    {
        "hash": "60ceb8d0e2bed9c895d10cb44f299eeffe8d44f1",
        "author": "gukaifeng",
        "date": "2022-04-05T17:16:47-07:00",
        "message": "rename property \"kIsFileDeletionsEnabled\" to \"kIsFileDeletionsDisabled\" (#9791)\n\nSummary:\nThe name of this property \"kIsFileDeletionsEnabled\" is very, very easy to misunderstand.\n\nI think 0 represents false (i.e. disabled) and non-0 means true (enabled), and this property is just the opposite.\n\nI modified the name of this property, and as few other positions as possible, so that the final meaning remains the same, but the name of this property is more common sense.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9791\n\nReviewed By: ajkr\n\nDifferential Revision: D35362166\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 85310d88bdd131893effb64e1adb7d0d7b202f88",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/60ceb8d0e2bed9c895d10cb44f299eeffe8d44f1"
    },
    {
        "hash": "a180c5cc3a3e12e5197a85dbc3b556b8c7e8bd12",
        "author": "Changyu Bi",
        "date": "2022-04-05T14:56:28-07:00",
        "message": "Added GetMergeOperands() to stress test (#9804)\n\nSummary:\ndb_stress does not yet cover is GetMergeOperands(), added GetMergeOperands() to db_stress.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9804\n\nTest Plan:\n```make -j32 db_stress```\n\n```python3 tools/db_crashtest.py blackbox --simple --interval=30 --duration=2400 --max_key=100000 --write_buffer_size=524288 --target_file_size_base=524288 --max_bytes_for_level_base=2097152 --value_size_mult=33```\n\nReviewed By: ajkr\n\nDifferential Revision: D35387137\n\nPulled By: cbi42\n\nfbshipit-source-id: 8f851ef68b5af4d824128ad55ebe564f7ad6f7e6",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a180c5cc3a3e12e5197a85dbc3b556b8c7e8bd12"
    },
    {
        "hash": "9cd47ce554d7ef92e01f11566ae24312335aa824",
        "author": "Hui Xiao",
        "date": "2022-04-05T08:46:48-07:00",
        "message": "Add Env::IOPriority to IOOptions (#9806)\n\nSummary:\n**Context/Todo:**\nAs requested, allow IOOptions to take in an Env::IOPriority for convenience to pass down rate limiter related hint to file system level and for future interaction between RocksDB internal's rate limiting and custom file system level's rate-limiting.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9806\n\nTest Plan: No actual code changes in RocksDB internals\n\nReviewed By: ajkr\n\nDifferential Revision: D35388966\n\nPulled By: hx235\n\nfbshipit-source-id: 5891c97c3f9184cd221a9ab8536ce8dfa8526c08",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/file_system.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9cd47ce554d7ef92e01f11566ae24312335aa824"
    },
    {
        "hash": "f68706409d4b68d4807da123c4f52f00eea42512",
        "author": "SGZW",
        "date": "2022-04-04T09:57:33-07:00",
        "message": "Fix typo about file/sst_file_manager_impl.h (#9799)\n\nSummary:\nFix typo deletition-> deletion\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9799\n\nReviewed By: ajkr\n\nDifferential Revision: D35341617\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 32bc384b99e5564f6a673076c6a4f160ee6c2e46",
        "modified_files_count": 1,
        "modified_files": [
            "file/sst_file_manager_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f68706409d4b68d4807da123c4f52f00eea42512"
    },
    {
        "hash": "bfea9e7c025416e694eb26f0ff29a2a8e2f7aef1",
        "author": "Andrew Kryczka",
        "date": "2022-03-31T21:23:58-07:00",
        "message": "Add benchmark for GetMergeOperands() (#9785)\n\nSummary:\nThere's an existing benchmark, \"getmergeoperands\", but it is unconventional in that it has multiple phases and hardcoded setup parameters.\n\nThis PR adds a different one, \"readrandomoperands\", that follows the pattern of other benchmarks of having a single phase and taking its configuration from existing flags.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9785\n\nTest Plan:\n```\n$ ./db_bench -benchmarks=mergerandom -merge_operator=StringAppendOperator -write_buffer_size=1048576 -max_bytes_for_level_base=4194304 -target_file_size_base=1048576 -compression_type=none -disable_auto_compactions=true\n$ ./db_bench -use_existing_db=true -benchmarks=readrandomoperands -merge_operator=StringAppendOperator -disable_auto_compactions=true -duration=10\n...\nreadrandomoperands :     542.082 micros/op 1844 ops/sec;    0.2 MB/s (11980 of 18999 found)\n```\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D35290412\n\nPulled By: ajkr\n\nfbshipit-source-id: fb367ca614b128cef844a75f0e5d9dd7c3328d85",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bfea9e7c025416e694eb26f0ff29a2a8e2f7aef1"
    },
    {
        "hash": "bbcf7b192c12f4ad99e57f5727dd8e1429e206b3",
        "author": "sdong",
        "date": "2022-03-31T15:52:01-07:00",
        "message": "Fix DB::Open() error logging (#9784)\n\nSummary:\nRight now we log a wrong error when DB::Open() fails. Fix it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9784\n\nTest Plan: CI runs should pass\n\nReviewed By: ajkr, riversand963\n\nDifferential Revision: D35290203\n\nfbshipit-source-id: ffc640afa27f6b0a2382ee153dc43f28d9e242be",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_open.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bbcf7b192c12f4ad99e57f5727dd8e1429e206b3"
    },
    {
        "hash": "de9df6e818774998c50e715c73736531ea42ad44",
        "author": "Yanqin Jin",
        "date": "2022-03-30T20:48:23-07:00",
        "message": "Do not release and re-acquire dbmutex on memtable-switch if no listener (#9758)\n\nSummary:\nThere is no need to release-and-acquire immediately when no listener is registered. This is\nwhat we have been doing for `NotifyOnFlushBegin()`, `NotifyOnFlushCompleted()`, `NotifyOnCompactionBegin()`,\n`NotifyOnCompactionCompleted()`, and some other `NotifyOnXX` methods in event_helpers.cc.\nDo the same for `NotifyOnMemTableSealed ()`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9758\n\nTest Plan: make check\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D35159552\n\nPulled By: riversand963\n\nfbshipit-source-id: 6e0aac50bd5c8f506d809b6638c33a7a28d1e87f",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/de9df6e818774998c50e715c73736531ea42ad44"
    },
    {
        "hash": "5a085d789d0ec5c896acfd1560bb0701c5de6a42",
        "author": "Jingjing Wang",
        "date": "2022-03-29T15:06:17-07:00",
        "message": "pristine code\n\nSummary:\nThis commit was generated using `mgt import`.\npristine code for third-party libraries:\nthird-party/benchmark\n\nupgrade google benchmark to v1.6.1\n\ncontains a local patch that reverts [this](https://github.com/google/benchmark/pull/1227?fbclid=IwAR2CCmIJmjU62SPPQQf_t8kdAsMjYv_Pa_GxabYUOdQpGPZUHKwbnYS_1oE) and changs `enum Flags` to be `enum Flags : uint32_t`.\n\nReviewed By: chadaustin\n\nDifferential Revision: D35136540\n\nfbshipit-source-id: f3662f953cd87956e5e9b767e55e3697f99d3b49",
        "modified_files_count": 1,
        "modified_files": [
            "microbench/db_basic_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5a085d789d0ec5c896acfd1560bb0701c5de6a42"
    },
    {
        "hash": "33f8a08af22620702e81ad3b16deec04f5690992",
        "author": "Akanksha Mahajan",
        "date": "2022-03-25T18:26:22-07:00",
        "message": "Fix some errors in async prefetching in FilePrefetchBuffer (#9734)\n\nSummary:\nIn ReadOption `async_io` which prefetches the data asynchronously, db_bench and db_stress runs were failing  because wrong data was prefetched which resulted in Error: Checksum mismatched. Wrong data was copied because capacity was less than actual size needed. It has been fixed in this PR.\n\nSince there are two separate methods for async and sync prefetching, these changes are in async prefetching methods and any changes would not effect normal prefetching. I ran the regressions to make sure normal prefetching is fine.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9734\n\nTest Plan:\n1. CircleCI jobs\n\n2.  Ran db_bench\n```\n. /db_bench -use_existing_db=true\n-db=/tmp/prefix_scan_prefetch_main -benchmarks=\"seekrandom\" -key_size=32\n-value_size=512 -num=5000000 -use_direct_reads=true -seek_nexts=327680\n-duration=120 -ops_between_duration_checks=1 -async_io=1 -adaptive_readahead=1\n\n```\n3. Ran db_stress test\n```\nexport CRASH_TEST_EXT_ARGS=\" --async_io=1 --adaptive_readahead=1\"\nmake crash_test -j\n```\n\n4. Run regressions for async_io disabled.\n\nOld flow without any async changes:\n```\n./db_bench -use_existing_db=true -db=/tmp/prefix_scan_prefetch_main -benchmarks=\"seekrandom\" -key_size=32 -value_size=512 -num=5000000 -use_direct_reads=true -seek_nexts=327680 -duration=120 -ops_between_duration_checks=1\nInitializing RocksDB Options from the specified file\nInitializing RocksDB Options from command-line flags\nRocksDB:    version 7.0\nDate:       Thu Mar 17 13:11:34 2022\nCPU:        24 * Intel Core Processor (Broadwell)\nCPUCache:   16384 KB\nKeys:       32 bytes each (+ 0 bytes user-defined timestamp)\nValues:     512 bytes each (256 bytes after compression)\nEntries:    5000000\nPrefix:    0 bytes\nKeys per prefix:    0\nRawSize:    2594.0 MB (estimated)\nFileSize:   1373.3 MB (estimated)\nWrite rate: 0 bytes/second\nRead rate: 0 ops/second\nCompression: Snappy\nCompression sampling rate: 0\nMemtablerep: SkipListFactory\nPerf Level: 1\n------------------------------------------------\nDB path: [/tmp/prefix_scan_prefetch_main]\nseekrandom   :  483618.390 micros/op 2 ops/sec;  338.9 MB/s (249 of 249 found)\n```\n\nWith async prefetching changes and async_io disabled to make sure in normal prefetching there is no regression.\n ```\n ./db_bench -use_existing_db=true -db=/tmp/prefix_scan_prefetch_main -benchmarks=\"seekrandom\" -key_size=32 -value_size=512 -num=5000000 -use_direct_reads=true -seek_nexts=327680 -duration=120 -ops_between_duration_checks=1 --async_io=0\nInitializing RocksDB Options from the specified file\nInitializing RocksDB Options from command-line flags\nRocksDB:    version 7.1\nDate:       Wed Mar 23 15:56:37 2022\nCPU:        24 * Intel Core Processor (Broadwell)\nCPUCache:   16384 KB\nKeys:       32 bytes each (+ 0 bytes user-defined timestamp)\nValues:     512 bytes each (256 bytes after compression)\nEntries:    5000000\nPrefix:    0 bytes\nKeys per prefix:    0\nRawSize:    2594.0 MB (estimated)\nFileSize:   1373.3 MB (estimated)\nWrite rate: 0 bytes/second\nRead rate: 0 ops/second\nCompression: Snappy\nCompression sampling rate: 0\nMemtablerep: SkipListFactory\nPerf Level: 1\n------------------------------------------------\nDB path: [/tmp/prefix_scan_prefetch_main]\nseekrandom   :  481819.816 micros/op 2 ops/sec;  340.2 MB/s (250 of 250 found)\n```\n\nReviewed By: riversand963\n\nDifferential Revision: D35058471\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 9233a1e6d97cea0c7a8111bfb9e8ac3251c341ce",
        "modified_files_count": 1,
        "modified_files": [
            "file/file_prefetch_buffer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/33f8a08af22620702e81ad3b16deec04f5690992"
    },
    {
        "hash": "37de4e1d084349db225c26101737c6e73b7595bd",
        "author": "Mark Callaghan",
        "date": "2022-03-25T15:30:28-07:00",
        "message": "Correctly set ThreadState::tid (#9757)\n\nSummary:\nFixes a bug introduced by me in https://github.com/facebook/rocksdb/pull/9733\nThat PR added a counter so that the per-thread seeds in ThreadState would\nbe unique even when --benchmarks had more than one test. But it incorrectly\nused this counter as the value for ThreadState::tid as well.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9757\n\nTest Plan:\nConfirm that unexpectedly good QPS results on the regression tests return\nto normal with this fix. I have confirmed that the QPS increase starts with\nthe PR 9733 diff.\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D35149303\n\nPulled By: mdcallag\n\nfbshipit-source-id: dee5cc36b7faaba6c3be6d6a253d3c2eaad72864",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/37de4e1d084349db225c26101737c6e73b7595bd"
    },
    {
        "hash": "e2cb9aa27cdee2cc3e13a133ba4b3d82d49526b7",
        "author": "Hui Xiao",
        "date": "2022-03-25T15:16:07-07:00",
        "message": "Clarify Options::rate_limiter api doc for #9607 Rate-limit automatic WAL flush after each user write (#9745)\n\nSummary:\nAs title for https://github.com/facebook/rocksdb/pull/9607\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9745\n\nTest Plan: No code change\n\nReviewed By: ajkr\n\nDifferential Revision: D35096901\n\nPulled By: hx235\n\nfbshipit-source-id: 6bd3671baecfdc04579b0a81a957bfaa7bed81e1",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e2cb9aa27cdee2cc3e13a133ba4b3d82d49526b7"
    },
    {
        "hash": "1a130fa3c11ac9b93cd138ec28bb319ce37326b1",
        "author": "Mark Callaghan",
        "date": "2022-03-25T10:12:27-07:00",
        "message": "db_bench should use a good seed when --seed is not set or set to 0 (#9740)\n\nSummary:\nThis is for https://github.com/facebook/rocksdb/issues/9737\n\nI have wasted more than a few hours running db_bench benchmarks where --seed was not set\nand getting better than expected results because cache hit rates are great because\nmultiple invocations of db_bench used the same value for --seed or did not set it,\nand then all used 0. The result is that all see the same sequence of keys.\n\nOthers have done the same. The problem is worse in that it is easy to miss and the result is a benchmark with results that are misleading.\n\nA good way to avoid this is to set it to the equivalent of gettimeofday() when either\n--seed is not set or it is set to 0 (the default).\n\nWith this change the actual seed is printed when it was 0 at process start:\n  Set seed to 1647992570365606 because --seed was 0\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9740\n\nTest Plan:\nPerf results:\n\n./db_bench --benchmarks=fillseq,readrandom --num=1000000 --reads=4000000\n  readrandom   :       6.469 micros/op 154583 ops/sec;   17.1 MB/s (4000000 of 4000000 found)\n\n./db_bench --benchmarks=fillseq,readrandom --num=1000000 --reads=4000000 --seed=0\n  readrandom   :       6.565 micros/op 152321 ops/sec;   16.9 MB/s (4000000 of 4000000 found)\n\n./db_bench --benchmarks=fillseq,readrandom --num=1000000 --reads=4000000 --seed=1\n  readrandom   :       6.461 micros/op 154777 ops/sec;   17.1 MB/s (4000000 of 4000000 found)\n\n./db_bench --benchmarks=fillseq,readrandom --num=1000000 --reads=4000000 --seed=2\n  readrandom   :       6.525 micros/op 153244 ops/sec;   17.0 MB/s (4000000 of 4000000 found)\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D35145361\n\nPulled By: mdcallag\n\nfbshipit-source-id: 2b35b153ccec46b27d7c9405997523555fc51267",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1a130fa3c11ac9b93cd138ec28bb319ce37326b1"
    },
    {
        "hash": "409635cb2a0f607b9c3687f4b3657edede0160ec",
        "author": "Mark Callaghan",
        "date": "2022-03-24T13:39:01-07:00",
        "message": "Add --slow_usecs option to determine when long op message is printed (#9732)\n\nSummary:\nThis adds the --slow_usecs option with a default value of 1M. Operations that\ntake this much time have a message printed when --histogram=1, --stats_interval=0\nand --stats_interval_seconds=0. The current code hardwired this to 20,000 usecs\nand for some stress tests that reduced throughput by 20% or more.\n\nThis is for https://github.com/facebook/rocksdb/issues/9620\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9732\n\nTest Plan:\n./db_bench --benchmarks=fillrandom,readrandom --compression_type=lz4 --slow_usecs=100 --histogram=1\n./db_bench --benchmarks=fillrandom,readrandom --compression_type=lz4 --slow_usecs=100000 --histogram=1\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D35121522\n\nPulled By: mdcallag\n\nfbshipit-source-id: daf27f937efd748980545d6395db332712fc078b",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/409635cb2a0f607b9c3687f4b3657edede0160ec"
    },
    {
        "hash": "f219e3d5d8888b3922e9d0e52eaae32f03485aed",
        "author": "Mark Callaghan",
        "date": "2022-03-24T11:46:27-07:00",
        "message": "db_bench should fail on bad values for --compaction_fadvice and --value_size_distribution_type (#9741)\n\nSummary:\ndb_bench quietly parses and ignores bad values for --compaction_fadvice and --value_size_distribution_type\nI prefer that it fail for them as it does for bad option values in most other cases. Otherwise a benchmark\nresult will be provided for the wrong configuration and the result will be misleading.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9741\n\nTest Plan:\nThese now fail:\n./db_bench --compaction_fadvice=noney\nUnknown compaction fadvice:noney\n\n./db_bench --value_size_distribution_type=norma\nCannot parse distribution type 'norma'\n\nWhile correct values continue to work:\n ./db_bench --value_size_distribution_type=normal\nInitializing RocksDB Options from the specified file\nInitializing RocksDB Options from command-line flags\n\n./db_bench --compaction_fadvice=none\nInitializing RocksDB Options from the specified file\nInitializing RocksDB Options from command-line flags\n\nReviewed By: siying\n\nDifferential Revision: D35115973\n\nPulled By: mdcallag\n\nfbshipit-source-id: c2b10de5c2d1ea7c7539e676f5bd556351f5d370",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f219e3d5d8888b3922e9d0e52eaae32f03485aed"
    },
    {
        "hash": "d583d23d86f43b0c6e474dce0e4a1ceba83abf07",
        "author": "Mark Callaghan",
        "date": "2022-03-24T08:57:48-07:00",
        "message": "Avoid seed reuse when --benchmarks has more than one test (#9733)\n\nSummary:\nWhen --benchmarks has more than one test then the threads in one benchmark\nwill use the same set of seeds as the threads in the previous benchmark.\nThis diff fixe that.\n\nThis fixes https://github.com/facebook/rocksdb/issues/9632\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9733\n\nTest Plan:\nFor this command line the block cache is 8GB, so it caches at most 1024 8KB blocks. Note that without\nthis diff the second run of readrandom has a much better response time because seed reuse means the\nsecond run reads the same 1000 blocks as the first run and they are cached at that point. But with\nthis diff that does not happen.\n\n./db_bench --benchmarks=fillseq,flush,compact0,waitforcompaction,levelstats,readrandom,readrandom --compression_type=zlib --num=10000000 --reads=1000 --block_size=8192\n\n...\n\n```\nLevel Files Size(MB)\n--------------------\n  0        0        0\n  1       11      238\n  2        9      253\n  3        0        0\n  4        0        0\n  5        0        0\n  6        0        0\n```\n\n --- perf results without this diff\n\nDB path: [/tmp/rocksdbtest-2260/dbbench]\nreadrandom   :      46.212 micros/op 21618 ops/sec;    2.4 MB/s (1000 of 1000 found)\n\nDB path: [/tmp/rocksdbtest-2260/dbbench]\nreadrandom   :      21.963 micros/op 45450 ops/sec;    5.0 MB/s (1000 of 1000 found)\n\n --- perf results with this diff\n\nDB path: [/tmp/rocksdbtest-2260/dbbench]\nreadrandom   :      47.213 micros/op 21126 ops/sec;    2.3 MB/s (1000 of 1000 found)\n\nDB path: [/tmp/rocksdbtest-2260/dbbench]\nreadrandom   :      42.880 micros/op 23299 ops/sec;    2.6 MB/s (1000 of 1000 found)\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D35089763\n\nPulled By: mdcallag\n\nfbshipit-source-id: 1b50143a07afe876b8c8e5fa50dd94a8ce57fc6b",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d583d23d86f43b0c6e474dce0e4a1ceba83abf07"
    },
    {
        "hash": "29bec740f5be36417e9bdaf0a44f3f9e6757d1a4",
        "author": "Yanqin Jin",
        "date": "2022-03-23T14:28:13-07:00",
        "message": "Return invalid argument if batch is null (#9744)\n\nSummary:\nOriginally, a corruption will be returned by `DBImpl::WriteImpl(batch...)` if batch is\nnull. This is inaccurate since there is no data corruption.\nReturn `Status::InvalidArgument()` instead.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9744\n\nTest Plan: make check\n\nReviewed By: ltamasi\n\nDifferential Revision: D35086268\n\nPulled By: riversand963\n\nfbshipit-source-id: 677397b007a53bc25210eac0178d49c9797b5951",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/29bec740f5be36417e9bdaf0a44f3f9e6757d1a4"
    },
    {
        "hash": "6904fd0c86958ed5c629274bc94b75c24b83ceb6",
        "author": "Mark Callaghan",
        "date": "2022-03-23T12:26:34-07:00",
        "message": "db_bench should fail when an option uses an invalid compression type (#9729)\n\nSummary:\nThis changes db_bench to fail at startup for invalid compression types. It had been\nchanging them to Snappy. For other invalid options it fails at startup.\n\nThis is for https://github.com/facebook/rocksdb/issues/9621\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9729\n\nTest Plan:\nThis continues to work:\n./db_bench --benchmarks=fillrandom --compression_type=lz4\n\nThis now fails rather than changing the compression type to Snappy\n./db_bench --benchmarks=fillrandom --compression_type=lz44\nCannot parse compression type 'lz44'\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D35081323\n\nPulled By: mdcallag\n\nfbshipit-source-id: 9b38c835abddce11aa7feb235df63f53cf829981",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6904fd0c86958ed5c629274bc94b75c24b83ceb6"
    },
    {
        "hash": "d71e5a5beb94d73e8fd3acd36faa33adbb5d1fd8",
        "author": "Mark Callaghan",
        "date": "2022-03-23T09:33:41-07:00",
        "message": "Add number of running flushes & compactions to --stats_per_interval output (#9726)\n\nSummary:\nThis is for https://github.com/facebook/rocksdb/issues/9709 and add two lines to the end of DB Stats\nfor num-running-compactions and num-running-flushes.\n\nFor example ...\n\n** DB Stats **\nUptime(secs): 6.0 total, 1.0 interval\nCumulative writes: 915K writes, 915K keys, 915K commit groups, 1.0 writes per commit group, ingest: 0.11 GB, 18.95 MB/s\nCumulative WAL: 915K writes, 0 syncs, 915000.00 writes per sync, written: 0.11 GB, 18.95 MB/s\nCumulative stall: 00:00:0.000 H:M:S, 0.0 percent\nInterval writes: 133K writes, 133K keys, 133K commit groups, 1.0 writes per commit group, ingest: 16.62 MB, 16.53 MB/s\nInterval WAL: 133K writes, 0 syncs, 133000.00 writes per sync, written: 0.02 GB, 16.53 MB/s\nInterval stall: 00:00:0.000 H:M:S, 0.0 percent\nnum-running-compactions: 0\nnum-running-flushes: 0\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9726\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D35066759\n\nPulled By: mdcallag\n\nfbshipit-source-id: c161fadd3c15c5aa715a820dab6bfedb46dc099b",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d71e5a5beb94d73e8fd3acd36faa33adbb5d1fd8"
    },
    {
        "hash": "f07eec1bf88f0a8250e9e0ecbd01946bd767e0d9",
        "author": "Akanksha Mahajan",
        "date": "2022-03-22T17:21:35-07:00",
        "message": "Add async_io read option in db_bench (#9735)\n\nSummary:\nAdd async_io Read option in db_bench\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9735\n\nTest Plan:\n./db_bench -use_existing_db=true\n-db=/tmp/prefix_scan_prefetch_main -benchmarks=\"seekrandom\" -key_size=32\n-value_size=512 -num=5000000 -use_direct_reads=true -seek_nexts=327680\n-duration=120 -ops_between_duration_checks=1 -async_io=1\n\nReviewed By: riversand963\n\nDifferential Revision: D35058482\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 1522b638c79f6d85bb7408c67f6ab76dbabeeee7",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f07eec1bf88f0a8250e9e0ecbd01946bd767e0d9"
    },
    {
        "hash": "63a284a6ad979c0018a15fcd29ec0f03b8a2f0d1",
        "author": "Mark Callaghan",
        "date": "2022-03-22T10:36:24-07:00",
        "message": "For db_bench --benchmarks=fillseq with --num_multi_db load databases … (#9713)\n\nSummary:\n…in order\n\nThis fixes https://github.com/facebook/rocksdb/issues/9650\nFor db_bench --benchmarks=fillseq --num_multi_db=X it loads databases in sequence\nrather than randomly choosing a database per Put. The benefits are:\n1) avoids long delays between flushing memtables\n2) avoids flushing memtables for all of them at the same point in time\n3) puts same number of keys per database so that query tests will find keys as expected\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9713\n\nTest Plan:\nUsing db_bench.1 without the change and db_bench.2 with the change:\n\nfor i in 1 2; do rm -rf /data/m/rx/* ; time ./db_bench.$i --db=/data/m/rx --benchmarks=fillseq --num_multi_db=4 --num=10000000; du -hs /data/m/rx ; done\n\n --- without the change\n    fillseq      :       3.188 micros/op 313682 ops/sec;   34.7 MB/s\n    real    2m7.787s\n    user    1m52.776s\n    sys     0m46.549s\n    2.7G    /data/m/rx\n\n --- with the change\n\n    fillseq      :       3.149 micros/op 317563 ops/sec;   35.1 MB/s\n    real    2m6.196s\n    user    1m51.482s\n    sys     0m46.003s\n    2.7G    /data/m/rx\n\n    Also, temporarily added a printf to confirm that the code switches to the next database at the right time\n    ZZ switch to db 1 at 10000000\n    ZZ switch to db 2 at 20000000\n    ZZ switch to db 3 at 30000000\n\nfor i in 1 2; do rm -rf /data/m/rx/* ; time ./db_bench.$i --db=/data/m/rx --benchmarks=fillseq,readrandom --num_multi_db=4 --num=100000; du -hs /data/m/rx ; done\n\n --- without the change, smaller database, note that not all keys are found by readrandom because databases have < and > --num keys\n\n    fillseq      :       3.176 micros/op 314805 ops/sec;   34.8 MB/s\n    readrandom   :       1.913 micros/op 522616 ops/sec;   57.7 MB/s (99873 of 100000 found)\n\n --- with the change, smaller database, note that all keys are found by readrandom\n\n    fillseq      :       3.110 micros/op 321566 ops/sec;   35.6 MB/s\n    readrandom   :       1.714 micros/op 583257 ops/sec;   64.5 MB/s (100000 of 100000 found)\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D35030168\n\nPulled By: mdcallag\n\nfbshipit-source-id: 2a18c4ec571d954cf5a57b00a11802a3608823ee",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/63a284a6ad979c0018a15fcd29ec0f03b8a2f0d1"
    },
    {
        "hash": "1ca1562e3565ac3d9ccfeeec2e206a21791f3aa3",
        "author": "Mark Callaghan",
        "date": "2022-03-21T17:30:51-07:00",
        "message": "Make mixgraph easier to use (#9711)\n\nSummary:\nChanges:\n* improves monitoring by displaying average size of a Put value and average scan length\n* forces the minimum value size to be 10. Before this it was 0 if you didn't set the distribution parameters.\n* uses reasonable defaults for the distribution parameters that determine value size and scan length\n* includes seeks in \"reads ... found\" message, before this they were missing\n\nThis is for https://github.com/facebook/rocksdb/issues/9672\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9711\n\nTest Plan:\nBefore this change:\n\n./db_bench --benchmarks=fillseq,mixgraph --mix_get_ratio=50 --mix_put_ratio=25 --mix_seek_ratio=25 --num=100000 --value_k=0.2615 --value_sigma=25.45 --iter_k=2.517 --iter_sigma=14.236\nfillseq      :       4.289 micros/op 233138 ops/sec;   25.8 MB/s\nmixgraph     :      18.461 micros/op 54166 ops/sec;  755.0 MB/s ( Gets:50164 Puts:24919 Seek:24917 of 50164 in 75081 found)\n\nAfter this change:\n\n./db_bench --benchmarks=fillseq,mixgraph --mix_get_ratio=50 --mix_put_ratio=25 --mix_seek_ratio=25 --num=100000 --value_k=0.2615 --value_sigma=25.45 --iter_k=2.517 --iter_sigma=14.236\nfillseq      :       3.974 micros/op 251553 ops/sec;   27.8 MB/s\nmixgraph     :      16.722 micros/op 59795 ops/sec;  833.5 MB/s ( Gets:50164 Puts:24919 Seek:24917, reads 75081 in 75081 found, avg size: 36.0 value, 504.9 scan)\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D35030190\n\nPulled By: mdcallag\n\nfbshipit-source-id: d8f555f28d869f752ddb674a524108884511b151",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1ca1562e3565ac3d9ccfeeec2e206a21791f3aa3"
    },
    {
        "hash": "b2aacaf9235b4e54cec5e8c8321bfa840ec882d7",
        "author": "Yanqin Jin",
        "date": "2022-03-18T13:11:57-07:00",
        "message": "Fix assertion error by doing comparison with mutex (#9717)\n\nSummary:\nOn CircleCI MacOS instances, we have been seeing the following assertion error:\n```\nAssertion failed: (alive_log_files_tail_ == alive_log_files_.rbegin()), function WriteToWAL, file /Users/distiller/project/db/db_impl/db_impl_write.cc, line 1213.\nReceived signal 6 (Abort trap: 6)\n#0   0x1\nhttps://github.com/facebook/rocksdb/issues/1   abort (in libsystem_c.dylib) + 120\nhttps://github.com/facebook/rocksdb/issues/2   err (in libsystem_c.dylib) + 0\nhttps://github.com/facebook/rocksdb/issues/3   rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&, rocksdb::log::Writer*, unsigned long long*, unsigned long long*, rocksdb::Env::IOPriority, bool, bool) (in librocksdb.7.0.0.dylib) (db_impl_write.cc:1213)\nhttps://github.com/facebook/rocksdb/issues/4   rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (in librocksdb.7.0.0.dylib) (db_impl_write.cc:1251)\nhttps://github.com/facebook/rocksdb/issues/5   rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (in librocksdb.7.0.0.dylib) (db_impl_\trite.cc:421)\nhttps://github.com/facebook/rocksdb/issues/6   rocksdb::DBImpl::Write(rocksdb::WriteOptions const&, rocksdb::WriteBatch*) (in librocksdb.7.0.0.dylib) (db_impl_write.cc:109)\nhttps://github.com/facebook/rocksdb/issues/7   rocksdb::DB::Put(rocksdb::WriteOptions const&, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&, rocksdb::Slice const&, rocksdb::Slice const&) (in librocksdb.7.0.0.dylib) (db_impl_write.cc:2159)\nhttps://github.com/facebook/rocksdb/issues/8   rocksdb::DBImpl::Put(rocksdb::WriteOptions const&, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&, rocksdb::Slice const&, rocksdb::Slice const&) (in librocksdb.7.0.0.dylib) (db_impl_write.cc:37)\nhttps://github.com/facebook/rocksdb/issues/9   rocksdb::DB::Put(rocksdb::WriteOptions const&, rocksdb::Slice const&, rocksdb::Slice const&, rocksdb::Slice const&) (in librocksdb.7.0.0.dylib) (db.h:382)\nhttps://github.com/facebook/rocksdb/issues/10  rocksdb::DBBasicTestWithTimestampPrefixSeek_IterateWithPrefix_Test::TestBody() (in db_with_timestamp_basic_test) (db_with_timestamp_basic_test.cc:2926)\nhttps://github.com/facebook/rocksdb/issues/11  void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (in db_with_timestamp_basic_test) (gtest-all.cc:3899)\nhttps://github.com/facebook/rocksdb/issues/12  void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (in db_with_timestamp_basic_test) (gtest-all.cc:3935)\nhttps://github.com/facebook/rocksdb/issues/13  testing::Test::Run() (in db_with_timestamp_basic_test) (gtest-all.cc:3980)\nhttps://github.com/facebook/rocksdb/issues/14  testing::TestInfo::Run() (in db_with_timestamp_basic_test) (gtest-all.cc:4153)\nhttps://github.com/facebook/rocksdb/issues/15  testing::TestCase::Run() (in db_with_timestamp_basic_test) (gtest-all.cc:4266)\nhttps://github.com/facebook/rocksdb/issues/16  testing::internal::UnitTestImpl::RunAllTests() (in db_with_timestamp_basic_test) (gtest-all.cc:6632)\nhttps://github.com/facebook/rocksdb/issues/17  bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (in db_with_timestamp_basic_test) (gtest-all.cc:3899)\nhttps://github.com/facebook/rocksdb/issues/18  bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (in db_with_timestamp_basic_test) (gtest-all.cc:3935)\nhttps://github.com/facebook/rocksdb/issues/19  testing::UnitTest::Run() (in db_with_timestamp_basic_test) (gtest-all.cc:6242)\nhttps://github.com/facebook/rocksdb/issues/20  RUN_ALL_TESTS() (in db_with_timestamp_basic_test) (gtest.h:22110)\nhttps://github.com/facebook/rocksdb/issues/21  main (in db_with_timestamp_basic_test) (db_with_timestamp_basic_test.cc:3150)\nhttps://github.com/facebook/rocksdb/issues/22  start (in libdyld.dylib) + 1\n```\n\nIt's likely caused by concurrent, unprotected access to the deque, even though `back()` is never popped,\nand we are comparing `rbegin()` with a cached `riterator`. To be safe, do the comparison only if we have mutex.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9717\n\nTest Plan:\nOne example\nSsh to one CircleCI MacOS instance.\n```\ngtest-parallel -r 1000 -w 8 ./db_test --gtest_filter=DBTest.FlushesInParallelWithCompactRange\n```\n\nReviewed By: pdillinger\n\nDifferential Revision: D34990696\n\nPulled By: riversand963\n\nfbshipit-source-id: 62dd48ae6fedbda53d0a64d73de9b948b4c26eee",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b2aacaf9235b4e54cec5e8c8321bfa840ec882d7"
    },
    {
        "hash": "f0fca81fc6f3f06340eeb2d81e8c92f169a3d515",
        "author": "Jay Zhuang",
        "date": "2022-03-17T13:30:28-07:00",
        "message": "Deflake DeleteSchedulerTest.StartBGEmptyTrashMultipleTimes (#9706)\n\nSummary:\nThe designed sync point may not be hit if trash file is generated faster\nthan deleting. Then the file will be deleted directly instead of waiting\nfor background trash empty thread to do it.\nIncrease SstFileManager Trash/DB ratio to avoid that.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9706\n\nTest Plan:\n`gtest-parallel ./delete_scheduler_test\n--gtest_filter=DeleteSchedulerTest.StartBGEmptyTrashMultipleTimes -r\n10000 -w 100`\nIt was likely to happen on one of the host.\n\nReviewed By: riversand963\n\nDifferential Revision: D34964735\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: bb78015489b5f6b3f11783aae7e5853ea197702c",
        "modified_files_count": 1,
        "modified_files": [
            "file/delete_scheduler_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f0fca81fc6f3f06340eeb2d81e8c92f169a3d515"
    },
    {
        "hash": "2586585b0c9e5a2d7df776ccdf18e6a3f9ddc05e",
        "author": "Jay Zhuang",
        "date": "2022-03-16T21:16:12-07:00",
        "message": "Minor fix for Windows build with zlib (#9699)\n\nSummary:\n```\nconversion from 'size_t' to 'uLong', possible loss of data\n```\n\nFix https://github.com/facebook/rocksdb/issues/9688\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9699\n\nReviewed By: riversand963\n\nDifferential Revision: D34901116\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 969148a7a8c023449bd85055a1f0eec71d0a9b3f",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2586585b0c9e5a2d7df776ccdf18e6a3f9ddc05e"
    },
    {
        "hash": "6a760083699e693136f8efad47bf306d2aeaf630",
        "author": "Yanqin Jin",
        "date": "2022-03-15T12:16:40-07:00",
        "message": "Fix TSAN caused by calling `rend()` and `pop_front()`. (#9698)\n\nSummary:\nPR9686 makes `WriteToWAL()` call `assert(...!=rend())` while not holding\ndb mutex or log mutex. Another thread may concurrently call\n`pop_front()`, causing race condition.\nTo fix, assert only if mutex is held.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9698\n\nTest Plan: COMPILE_WITH_TSAN=1 make check\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D34898535\n\nPulled By: riversand963\n\nfbshipit-source-id: 1ddfa5bf1b6ae8d409cab6ff6e1b5321c6803da9",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6a760083699e693136f8efad47bf306d2aeaf630"
    },
    {
        "hash": "89429a90811f0fb57a024d384948abc936f9a227",
        "author": "gukaifeng",
        "date": "2022-03-15T09:55:49-07:00",
        "message": "fix a bug of the ticker NO_FILE_OPENS (#9677)\n\nSummary:\nIn the original code, the value of `NO_FILE_OPENS` corresponding to the Ticker item will be increased regardless of whether the file is successfully opened or not. Even counts are repeated, which can lead to skewed counts.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9677\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D34725733\n\nPulled By: ajkr\n\nfbshipit-source-id: 841234ed03802c0105fd2107d82a740265ead576",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/89429a90811f0fb57a024d384948abc936f9a227"
    },
    {
        "hash": "a6a179859e612856f9de8b7667dd0a2cfddd286a",
        "author": "Yuriy Chernyshov",
        "date": "2022-03-13T17:01:21-07:00",
        "message": "#include <winioctl.h> as MSDN prescribes (#9612)\n\nSummary:\nThe recommendation can be found e. g. [here](https://docs.microsoft.com/en-us/windows/win32/api/winioctl/ns-winioctl-storage_property_query).\n\nWhile `<windows.h>` transitively includes `<winioctl.h>` by default, this can be switched off by `/DWIN32_LEAN_AND_MEAN` which forces the user to include-what-you-use.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9612\n\nReviewed By: riversand963\n\nDifferential Revision: D34845629\n\nPulled By: ajkr\n\nfbshipit-source-id: 1ef9273074e3d84864c6833a7de6eb9df81e29d9",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a6a179859e612856f9de8b7667dd0a2cfddd286a"
    },
    {
        "hash": "efd767d14ab8d8edfef1b54829cfb3c310b30207",
        "author": "Jay Zhuang",
        "date": "2022-03-12T22:12:18-08:00",
        "message": "Fix build for io_uring (#9690)\n\nSummary:\nMinor fix for build failure:\n```\n./env/io_posix.h:68:33: error: unused parameter 'len' [-Werror=unused-parameter]\n   68 |                          size_t len, size_t iov_len, bool async_read,\n      |                          ~~~~~~~^~~\n```\nOnly happens for release build with io_uring.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9690\n\nTest Plan: build pass with io_uring\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D34846347\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 2d7afb585097262d7722ef1beac486fc8ef28419",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/efd767d14ab8d8edfef1b54829cfb3c310b30207"
    },
    {
        "hash": "565fcead22f819e0df9c7cbaadfdf84b2feea8be",
        "author": "Yanqin Jin",
        "date": "2022-03-09T10:13:02-08:00",
        "message": "Fix clang-analyze by adding assertion (#9682)\n\nSummary:\nClang-analyze complains about potential nullptr dereference.\nFix by adding an assertion to make clang happy.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9682\n\nTest Plan: USE_CLANG=1 make -j20 analyze_incremental\n\nReviewed By: ltamasi\n\nDifferential Revision: D34755210\n\nPulled By: riversand963\n\nfbshipit-source-id: 948e1899846ee1aa05a1b500a11ff43b0b412e0a",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_committed_transaction_ts_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/565fcead22f819e0df9c7cbaadfdf84b2feea8be"
    },
    {
        "hash": "27d6ef8e60cdc4205e07f96430676e37593a4f9f",
        "author": "Ezgi Çiçek",
        "date": "2022-03-08T11:26:40-08:00",
        "message": "Rename mutable_cf_options to signify explicity copy (#9666)\n\nSummary:\nSignify explicit copy with comment and better name for variable `mutable_cf_options`\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9666\n\nReviewed By: riversand963\n\nDifferential Revision: D34680934\n\nPulled By: ezgicicek\n\nfbshipit-source-id: b64ef18725fe523835d14ceb4b29bcdfe493f8ed",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/27d6ef8e60cdc4205e07f96430676e37593a4f9f"
    },
    {
        "hash": "c967436453bcabd8f5e38a26097adc960145ad3b",
        "author": "GuKaifeng",
        "date": "2022-03-08T11:03:56-08:00",
        "message": "remove redundant assignment code for member state (#9665)\n\nSummary:\nRemove redundant assignment code for member `state` in the constructor of `ImmutableDBOptions`.\nThere are two identical and redundant statements `stats = statistics.get();` in lines 740 and 748 of the code.\nThis commit removed the line 740.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9665\n\nReviewed By: ajkr\n\nDifferential Revision: D34686649\n\nPulled By: riversand963\n\nfbshipit-source-id: 8f246ece382b6845528f4e2c843ce09bb66b2b0f",
        "modified_files_count": 1,
        "modified_files": [
            "options/db_options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c967436453bcabd8f5e38a26097adc960145ad3b"
    },
    {
        "hash": "4a9ae4f71379d643a8e22b353a274f36b7914b72",
        "author": "Peter Dillinger",
        "date": "2022-03-08T08:36:25-08:00",
        "message": "Avoid .trash handling race in db_stress Checkpoint (#9673)\n\nSummary:\nThe shared SstFileManager in db_stress can create background\nwork that races with TestCheckpoint such that DestroyDir fails because\nof file rename while it is running. Analogous to change already made\nfor TestBackupRestore\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9673\n\nTest Plan:\nmake blackbox_crash_test for a while with\ncheckpoint_one_in=100\n\nReviewed By: ajkr\n\nDifferential Revision: D34702215\n\nPulled By: pdillinger\n\nfbshipit-source-id: ac3e166efa28cba6c6f4b9b391e799394603ebfd",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4a9ae4f71379d643a8e22b353a274f36b7914b72"
    },
    {
        "hash": "7574841aacc86ca8c6a1e156cb66b0950abbb58f",
        "author": "anand76",
        "date": "2022-03-07T11:39:31-08:00",
        "message": "Fix issue #9627 (#9657)\n\nSummary:\nSMB mounts do not support hard links. The ENOTSUP error code is\nreturned, which should be interpreted by PosixFileSystem as\nIOStatus::NotSupported().\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9657\n\nReviewed By: mrambacher\n\nDifferential Revision: D34634783\n\nPulled By: anand1976\n\nfbshipit-source-id: 0d57f5b2e6118e4c20e9ed1a293327428c3aecac",
        "modified_files_count": 1,
        "modified_files": [
            "env/fs_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7574841aacc86ca8c6a1e156cb66b0950abbb58f"
    },
    {
        "hash": "fc61e98ae698ae1443aa799abf09a5146a6e6838",
        "author": "Hui Xiao",
        "date": "2022-03-04T11:35:28-08:00",
        "message": "Attempt to deflake DBLogicalBlockSizeCacheTest.CreateColumnFamilies (#9516)\n\nSummary:\n**Context:**\n`DBLogicalBlockSizeCacheTest.CreateColumnFamilies` is flaky on a rare occurrence of assertion failure below\n```\ndb/db_logical_block_size_cache_test.cc:210\nExpected equality of these values:\n  1\n  cache_->GetRefCount(cf_path_0_)\n    Which is: 2\n```\n\nRoot-cause: `ASSERT_OK(db->DestroyColumnFamilyHandle(cfs[0]));` in the test may not successfully decrease the ref count of `cf_path_0_` since the decreasing only happens in the clean-up of `ColumnFamilyData` when `ColumnFamilyData` has no referencing to it, which may not be true when `db->DestroyColumnFamilyHandle(cfs[0])` is called since background work such as `DumpStats()` can hold reference to that `ColumnFamilyData` (suggested and repro-d by ajkr ). Similar case `ASSERT_OK(db->DestroyColumnFamilyHandle(cfs[1]));`.\n\nSee following for a deterministic repro:\n```\n diff --git a/db/db_impl/db_impl.cc b/db/db_impl/db_impl.cc\nindex 196b428a3..4e7a834c4 100644\n --- a/db/db_impl/db_impl.cc\n+++ b/db/db_impl/db_impl.cc\n@@ -956,10 +956,16 @@ void DBImpl::DumpStats() {\n         // near-atomically.\n         // Get a ref before unlocking\n         cfd->Ref();\n+        if (cfd->GetName() == \"cf1\" || cfd->GetName() == \"cf2\") {\n+          TEST_SYNC_POINT(\"DBImpl::DumpStats:PostCFDRef\");\n+        }\n         {\n           InstrumentedMutexUnlock u(&mutex_);\n           cfd->internal_stats()->CollectCacheEntryStats(/*foreground=*/false);\n         }\n+        if (cfd->GetName() == \"cf1\" || cfd->GetName() == \"cf2\") {\n+          TEST_SYNC_POINT(\"DBImpl::DumpStats::PreCFDUnrefAndTryDelete\");\n+        }\n         cfd->UnrefAndTryDelete();\n       }\n     }\n diff --git a/db/db_logical_block_size_cache_test.cc b/db/db_logical_block_size_cache_test.cc\nindex 1057871c9..c3872c036 100644\n --- a/db/db_logical_block_size_cache_test.cc\n+++ b/db/db_logical_block_size_cache_test.cc\n@@ -9,6 +9,7 @@\n #include \"env/io_posix.h\"\n #include \"rocksdb/db.h\"\n #include \"rocksdb/env.h\"\n+#include \"test_util/sync_point.h\"\n\n namespace ROCKSDB_NAMESPACE {\n class EnvWithCustomLogicalBlockSizeCache : public EnvWrapper {\n@@ -183,6 +184,15 @@ TEST_F(DBLogicalBlockSizeCacheTest, CreateColumnFamilies) {\n   ASSERT_EQ(1, cache_->GetRefCount(dbname_));\n\n   std::vector<ColumnFamilyHandle*> cfs;\n+  ROCKSDB_NAMESPACE::SyncPoint::GetInstance()->EnableProcessing();\n+  ROCKSDB_NAMESPACE::SyncPoint::GetInstance()->LoadDependency(\n+      {{\"DBLogicalBlockSizeCacheTest::CreateColumnFamilies::PostSetupTwoCFH\",\n+        \"DBImpl::DumpStats:StartRunning\"},\n+       {\"DBImpl::DumpStats:PostCFDRef\",\n+        \"DBLogicalBlockSizeCacheTest::CreateColumnFamilies::PreDeleteTwoCFH\"},\n+       {\"DBLogicalBlockSizeCacheTest::CreateColumnFamilies::\"\n+        \"PostFinishCheckingRef\",\n+        \"DBImpl::DumpStats::PreCFDUnrefAndTryDelete\"}});\n   ASSERT_OK(db->CreateColumnFamilies(cf_options, {\"cf1\", \"cf2\"}, &cfs));\n   ASSERT_EQ(2, cache_->Size());\n   ASSERT_TRUE(cache_->Contains(dbname_));\n@@ -190,7 +200,7 @@ TEST_F(DBLogicalBlockSizeCacheTest, CreateColumnFamilies) {\n   ASSERT_TRUE(cache_->Contains(cf_path_0_));\n   ASSERT_EQ(2, cache_->GetRefCount(cf_path_0_));\n   }\n\n    // Delete one handle will not drop cache because another handle is still\n   // referencing cf_path_0_.\n+  TEST_SYNC_POINT(\n+      \"DBLogicalBlockSizeCacheTest::CreateColumnFamilies::PostSetupTwoCFH\");\n+  TEST_SYNC_POINT(\n+      \"DBLogicalBlockSizeCacheTest::CreateColumnFamilies::PreDeleteTwoCFH\");\n   ASSERT_OK(db->DestroyColumnFamilyHandle(cfs[0]));\n   ASSERT_EQ(2, cache_->Size());\n   ASSERT_TRUE(cache_->Contains(dbname_));\n@@ -209,16 +221,20 @@ TEST_F(DBLogicalBlockSizeCacheTest, CreateColumnFamilies) {\n   ASSERT_TRUE(cache_->Contains(cf_path_0_));\n    // Will fail\n   ASSERT_EQ(1, cache_->GetRefCount(cf_path_0_));\n\n   // Delete the last handle will drop cache.\n   ASSERT_OK(db->DestroyColumnFamilyHandle(cfs[1]));\n   ASSERT_EQ(1, cache_->Size());\n   ASSERT_TRUE(cache_->Contains(dbname_));\n   // Will fail\n   ASSERT_EQ(1, cache_->GetRefCount(dbname_));\n\n+  TEST_SYNC_POINT(\n+      \"DBLogicalBlockSizeCacheTest::CreateColumnFamilies::\"\n+      \"PostFinishCheckingRef\");\n   delete db;\n   ASSERT_EQ(0, cache_->Size());\n   ASSERT_OK(DestroyDB(dbname_, options,\n       {{\"cf1\", cf_options}, {\"cf2\", cf_options}}));\n+  ROCKSDB_NAMESPACE::SyncPoint::GetInstance()->DisableProcessing();\n }\n```\n\n**Summary**\n- Removed the flaky assertion\n- Clarified the comments for the test\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9516\n\nTest Plan:\n- CI\n- Monitor for future flakiness\n\nReviewed By: ajkr\n\nDifferential Revision: D34055232\n\nPulled By: hx235\n\nfbshipit-source-id: 9bf83ae5fa88bf6fc829876494d4692082e4c357",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_logical_block_size_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fc61e98ae698ae1443aa799abf09a5146a6e6838"
    },
    {
        "hash": "73fd589b1a5d508ec12ae2d8e8fea556b6eb0eca",
        "author": "Yuriy Chernyshov",
        "date": "2022-03-02T17:41:02-08:00",
        "message": "Do not rely on ADL when invoking std::max_element (#9608)\n\nSummary:\nCertain STLs use raw pointers and ADL does not work for them.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9608\n\nReviewed By: ajkr\n\nDifferential Revision: D34583012\n\nPulled By: riversand963\n\nfbshipit-source-id: 7de6bbc8a080c3e7243ce0d758fe83f1663168aa",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_ingestion_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/73fd589b1a5d508ec12ae2d8e8fea556b6eb0eca"
    },
    {
        "hash": "926ee138115e568284f57c9e103ec289410847f1",
        "author": "jingkai.yuan",
        "date": "2022-03-02T16:35:21-08:00",
        "message": "Fix corruption error when compressing blob data with zlib. (#9572)\n\nSummary:\nThe plain data length may not be big enough if the compression actually expands data. So use deflateBound() to get the upper limit on the compressed output before deflate().\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9572\n\nReviewed By: riversand963\n\nDifferential Revision: D34326475\n\nPulled By: ajkr\n\nfbshipit-source-id: 4b679cb7a83a62782a127785b4d5eb9aa4646449",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/926ee138115e568284f57c9e103ec289410847f1"
    },
    {
        "hash": "d95e13e9cc23fde91cee26283de3289bda10c1ab",
        "author": "ehds@qq.com",
        "date": "2022-03-01T10:57:09-08:00",
        "message": "typo(clock_cache) fix incomplete message typo (#9638)\n\nSummary:\n`LRU` should be `CLOCK`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9638\n\nReviewed By: mrambacher\n\nDifferential Revision: D34523550\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: ca06ada1aac45d3707016c1590541287dab6ef79",
        "modified_files_count": 1,
        "modified_files": [
            "cache/clock_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d95e13e9cc23fde91cee26283de3289bda10c1ab"
    },
    {
        "hash": "0a89cea5f55b6a57036236cc5995a0634c980735",
        "author": "Andrew Kryczka",
        "date": "2022-02-28T23:45:08-08:00",
        "message": "Handle failures in block-based table size/offset approximation (#9615)\n\nSummary:\nIn crash test with fault injection, we were seeing stack traces like the following:\n\n```\nhttps://github.com/facebook/rocksdb/issues/3 0x00007f75f763c533 in __GI___assert_fail (assertion=assertion@entry=0x1c5b2a0 \"end_offset >= start_offset\", file=file@entry=0x1c580a0 \"table/block_based/block_based_table_reader.cc\", line=line@entry=3245,\nfunction=function@entry=0x1c60e60 \"virtual uint64_t rocksdb::BlockBasedTable::ApproximateSize(const rocksdb::Slice&, const rocksdb::Slice&, rocksdb::TableReaderCaller)\") at assert.c:101\nhttps://github.com/facebook/rocksdb/issues/4 0x00000000010ea9b4 in rocksdb::BlockBasedTable::ApproximateSize (this=<optimized out>, start=..., end=..., caller=<optimized out>) at table/block_based/block_based_table_reader.cc:3224\nhttps://github.com/facebook/rocksdb/issues/5 0x0000000000be61fb in rocksdb::TableCache::ApproximateSize (this=0x60f0000161b0, start=..., end=..., fd=..., caller=caller@entry=rocksdb::kCompaction, internal_comparator=..., prefix_extractor=...) at db/table_cache.cc:719\nhttps://github.com/facebook/rocksdb/issues/6 0x0000000000c3eaec in rocksdb::VersionSet::ApproximateSize (this=<optimized out>, v=<optimized out>, f=..., start=..., end=..., caller=<optimized out>) at ./db/version_set.h:850\nhttps://github.com/facebook/rocksdb/issues/7 0x0000000000c6ebc3 in rocksdb::VersionSet::ApproximateSize (this=<optimized out>, options=..., v=v@entry=0x621000047500, start=..., end=..., start_level=start_level@entry=0, end_level=<optimized out>, caller=<optimized out>)\nat db/version_set.cc:5657\nhttps://github.com/facebook/rocksdb/issues/8 0x000000000166e894 in rocksdb::CompactionJob::GenSubcompactionBoundaries (this=<optimized out>) at ./include/rocksdb/options.h:1869\nhttps://github.com/facebook/rocksdb/issues/9 0x000000000168c526 in rocksdb::CompactionJob::Prepare (this=this@entry=0x7f75f3ffcf00) at db/compaction/compaction_job.cc:546\n```\n\nThe problem occurred in `ApproximateSize()` when the index `Seek()` for the first `ApproximateDataOffsetOf()` encountered an I/O error, while the second `Seek()` did not. In the old code that scenario caused `start_offset == data_size` , thus it was easy to trip the assertion that `end_offset >= start_offset`.\n\nThe fix is to set `start_offset == 0` when the first index `Seek()` fails, and `end_offset == data_size` when the second index `Seek()` fails. I doubt these give an \"on average correct\" answer for how this function is used, but I/O errors in index seeks are hopefully rare, it looked consistent with what was already there, and it was easier to calculate.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9615\n\nTest Plan:\nrun the repro command for a while and stopped seeing coredumps -\n\n```\n$ while !  ./db_stress --block_size=128 --cache_size=32768 --clear_column_family_one_in=0 --column_families=1 --continuous_verification_interval=0 --db=/dev/shm/rocksdb_crashtest --delpercent=4 --delrangepercent=1 --destroy_db_initially=0 --expected_values_dir=/dev/shm/rocksdb_crashtest_expected --index_type=2 --iterpercent=10  --kill_random_test=18887 --max_key=1000000 --max_bytes_for_level_base=2048576 --nooverwritepercent=1 --open_files=-1 --open_read_fault_one_in=32 --ops_per_thread=1000000 --prefixpercent=5 --read_fault_one_in=0 --readpercent=45 --reopen=0 --skip_verifydb=1 --subcompactions=2 --target_file_size_base=524288 --test_batches_snapshots=0 --value_size_mult=32 --write_buffer_size=524288 --writepercent=35  ; do : ; done\n```\n\nReviewed By: pdillinger\n\nDifferential Revision: D34383069\n\nPulled By: ajkr\n\nfbshipit-source-id: fac26c3b20ea962e75387515ba5f2724dc48719f",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0a89cea5f55b6a57036236cc5995a0634c980735"
    },
    {
        "hash": "3379d1466f357ae4e1e15f068a35d7ea2fddb4d1",
        "author": "Andrew Kryczka",
        "date": "2022-02-21T19:23:19-08:00",
        "message": "Fix DBTest2.BackupFileTemperature memory leak (#9610)\n\nSummary:\nValgrind was failing with the below error because we forgot to destroy\nthe `BackupEngine` object:\n\n```\n==421173== Command: ./db_test2 --gtest_filter=DBTest2.BackupFileTemperature\n==421173==\nNote: Google Test filter = DBTest2.BackupFileTemperature\n[==========] Running 1 test from 1 test case.\n[----------] Global test environment set-up.\n[----------] 1 test from DBTest2\n[ RUN      ] DBTest2.BackupFileTemperature\n--421173-- WARNING: unhandled amd64-linux syscall: 425\n--421173-- You may be able to write your own handler.\n--421173-- Read the file README_MISSING_SYSCALL_OR_IOCTL.\n--421173-- Nevertheless we consider this a bug.  Please report\n--421173-- it at http://valgrind.org/support/bug_reports.html.\n[       OK ] DBTest2.BackupFileTemperature (3366 ms)\n[----------] 1 test from DBTest2 (3371 ms total)\n\n[----------] Global test environment tear-down\n[==========] 1 test from 1 test case ran. (3413 ms total)\n[  PASSED  ] 1 test.\n==421173==\n==421173== HEAP SUMMARY:\n==421173==     in use at exit: 13,042 bytes in 195 blocks\n==421173==   total heap usage: 26,022 allocs, 25,827 frees, 27,555,265 bytes allocated\n==421173==\n==421173== 8 bytes in 1 blocks are possibly lost in loss record 6 of 167\n==421173==    at 0x4838DBF: operator new(unsigned long) (vg_replace_malloc.c:344)\n==421173==    by 0x8D4606: allocate (new_allocator.h:114)\n==421173==    by 0x8D4606: allocate (alloc_traits.h:445)\n==421173==    by 0x8D4606: _M_allocate (stl_vector.h:343)\n==421173==    by 0x8D4606: reserve (vector.tcc:78)\n==421173==    by 0x8D4606: rocksdb::BackupEngineImpl::Initialize() (backupable_db.cc:1174)\n==421173==    by 0x8D5473: Initialize (backupable_db.cc:918)\n==421173==    by 0x8D5473: rocksdb::BackupEngine::Open(rocksdb::BackupEngineOptions const&, rocksdb::Env*, rocksdb::BackupEngine**) (backupable_db.cc:937)\n==421173==    by 0x50AC8F: Open (backup_engine.h:585)\n==421173==    by 0x50AC8F: rocksdb::DBTest2_BackupFileTemperature_Test::TestBody() (db_test2.cc:6996)\n...\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9610\n\nTest Plan:\n```\n$ make -j24 ROCKSDBTESTS_SUBSET=db_test2 valgrind_check_some\n```\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D34371210\n\nPulled By: ajkr\n\nfbshipit-source-id: 68154fcb0c51b28222efa23fa4ee02df8d925a18",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3379d1466f357ae4e1e15f068a35d7ea2fddb4d1"
    },
    {
        "hash": "67f071faded6738fc970d9fb8c965f632b5ee0a5",
        "author": "Bo Wang",
        "date": "2022-02-18T14:23:07-08:00",
        "message": "Fixes #9565 (#9586)\n\nSummary:\n[Compaction::IsTrivialMove](https://github.com/facebook/rocksdb/blob/a2b9be42b6d5ac4d44bcc6a9451a825440000769/db/compaction/compaction.cc#L318) checks whether allow_trivial_move is set, and if so it returns the value of is_trivial_move_. The allow_trivial_move option is there for universal compaction. So when this is set and leveled compaction is enabled, then useful code that follows this block never gets a chance to run.\n\nA check that [compaction_style == kCompactionStyleUniversal](https://github.com/facebook/rocksdb/blob/320d9a8e8a1b6998f92934f87fc71ad8bd6d4596/db/db_impl/db_impl_compaction_flush.cc#L1030) should be added to avoid doing the wrong thing for leveled.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9586\n\nTest Plan:\nTo reproduce this:\nFirst edit db/compaction/compaction.cc with\n```\n diff --git a/db/compaction/compaction.cc b/db/compaction/compaction.cc\nindex 7ae50b91e..52dd489b1 100644\n --- a/db/compaction/compaction.cc\n+++ b/db/compaction/compaction.cc\n@@ -319,6 +319,8 @@ bool Compaction::IsTrivialMove() const {\n   // input files are non overlapping\n   if ((mutable_cf_options_.compaction_options_universal.allow_trivial_move) &&\n       (output_level_ != 0)) {\n+    printf(\"IsTrivialMove:: return %d because universal allow_trivial_move\\n\", (int) is_trivial_move_);\n+    // abort();\n     return is_trivial_move_;\n   }\n```\n\nAnd then run\n```\n./db_bench --benchmarks=fillseq --allow_concurrent_memtable_write=false --level0_file_num_compaction_trigger=4 --level0_slowdown_writes_trigger=20 --level0_stop_writes_trigger=30 --max_background_jobs=8 --max_write_buffer_number=8 --db=/data/m/rx --wal_dir=/data/m/rx --num=800000000 --num_levels=8 --key_size=20 --value_size=400 --block_size=8192 --cache_size=51539607552 --cache_numshardbits=6 --compression_max_dict_bytes=0 --compression_ratio=0.5 --compression_type=lz4 --bytes_per_sync=8388608 --cache_index_and_filter_blocks=1 --cache_high_pri_pool_ratio=0.5 --benchmark_write_rate_limit=0 --write_buffer_size=16777216 --target_file_size_base=16777216 --max_bytes_for_level_base=67108864 --verify_checksum=1 --delete_obsolete_files_period_micros=62914560 --max_bytes_for_level_multiplier=8 --statistics=0 --stats_per_interval=1 --stats_interval_seconds=20 --histogram=1 --memtablerep=skip_list --bloom_bits=10 --open_files=-1 --subcompactions=1 --compaction_style=0 --min_level_to_compress=3 --level_compaction_dynamic_level_bytes=true --pin_l0_filter_and_index_blocks_in_cache=1 --soft_pending_compaction_bytes_limit=167503724544 --hard_pending_compaction_bytes_limit=335007449088 --min_level_to_compress=0 --use_existing_db=0 --sync=0 --threads=1 --memtablerep=vector --allow_concurrent_memtable_write=false --disable_wal=1 --seed=1641328309 --universal_allow_trivial_move=1\n```\nExample output with the debug code added\n\n```\nIsTrivialMove:: return 0 because universal allow_trivial_move\nIsTrivialMove:: return 0 because universal allow_trivial_move\n```\n\nAfter this PR, the bug is fixed.\n\nReviewed By: ajkr\n\nDifferential Revision: D34350451\n\nPulled By: gitbw95\n\nfbshipit-source-id: 3232005cc47c40a7e75d316cfc7960beb5bdff3a",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/67f071faded6738fc970d9fb8c965f632b5ee0a5"
    },
    {
        "hash": "8286469b9a72cd19d13eb52ed80af71c9e0235b0",
        "author": "sdong",
        "date": "2022-02-16T17:07:37-08:00",
        "message": "LDB to add --secondary_path to help (#9582)\n\nSummary:\nOpening DB as seconeary instance has been supported in ldb but it is not mentioned in --help. Mention it there. The part of the help message after the modification:\n\n```\ncommands MUST specify --db=<full_path_to_db_directory> when necessary\n\ncommands can optionally specify\n  --env_uri=<uri_of_environment> or --fs_uri=<uri_of_filesystem> if necessary\n  --secondary_path=<secondary_path> to open DB as secondary instance. Operations not supported in secondary instance will fail.\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9582\n\nTest Plan: Build and run ldb --help\n\nReviewed By: riversand963\n\nDifferential Revision: D34286427\n\nfbshipit-source-id: e56c5290d0548098ab6acc6dde2167f5a64f34f3",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8286469b9a72cd19d13eb52ed80af71c9e0235b0"
    },
    {
        "hash": "241b5aa15aaf1569ff13a2da2e13a34f90de7aa6",
        "author": "Yanqin Jin",
        "date": "2022-02-14T17:32:47-08:00",
        "message": "Timestamp-based validation for pessimistic txn (#9562)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9562\n\nWith per-transaction `read_timestamp_`, it is possible to perform transaction validation after\nlocking a key in addition to sequence-based validation. Specifically, if a transaction has a\nread_timestamp, then we perform timestamp-based validation as well after the key is locked\nvia `GetForUpdate()`. This is to make sure that no other transaction has modified the key and\ncommitted successfully since the read timestamp (but before the locking operation) which\n represents a consistent view of the database.\n\nReviewed By: ltamasi\n\nDifferential Revision: D31822034\n\nfbshipit-source-id: c6f1828b7fc23e4f85e2d1ed73ff51464a058d91",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/pessimistic_transaction.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/241b5aa15aaf1569ff13a2da2e13a34f90de7aa6"
    },
    {
        "hash": "95d9cb8357d8950b89d3d7bc98cb7a0bd03a1247",
        "author": "Ezgi Çiçek",
        "date": "2022-02-11T09:15:27-08:00",
        "message": "Avoid unnecessary copy of sample_slice map (#9551)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/9551\n\nReviewed By: riversand963\n\nDifferential Revision: D34169574\n\nPulled By: ezgicicek\n\nfbshipit-source-id: 2e88db59b65bda269917a9b0bed17181a4afd281",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/95d9cb8357d8950b89d3d7bc98cb7a0bd03a1247"
    },
    {
        "hash": "b2423f8ddea1d70d859c5571640fae68c79161ea",
        "author": "Levi Tamasi",
        "date": "2022-02-10T11:13:25-08:00",
        "message": "Fix off-by-one bug in VersionStorageInfo::ComputeFilesMarkedForForcedBlobGC (#9542)\n\nSummary:\nFixes a bug introduced in https://github.com/facebook/rocksdb/issues/9526 where we index one position past the\nend of a `vector`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9542\n\nTest Plan:\n`make asan_check`\n\nWill add a unit test in a separate PR.\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D34145825\n\nPulled By: ltamasi\n\nfbshipit-source-id: 4e87c948407dee489d669a3e41f59e2fcc1228d8",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b2423f8ddea1d70d859c5571640fae68c79161ea"
    },
    {
        "hash": "bd08374130a56b47635404d9dfc6cd17749b9867",
        "author": "Peter Dillinger",
        "date": "2022-02-07T10:40:31-08:00",
        "message": "Add GetTemperature on existing files (#9498)\n\nSummary:\nFor tiered storage\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9498\n\nTest Plan: Just API placeholders for now\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D33993094\n\nPulled By: pdillinger\n\nfbshipit-source-id: 3cf19a450c7232e05306e94018559b26e9fd35db",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/file_system.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bd08374130a56b47635404d9dfc6cd17749b9867"
    },
    {
        "hash": "b69f4360ea2e671b3bbbf4e8df70471a3e113b44",
        "author": "Jay Zhuang",
        "date": "2022-02-07T09:07:59-08:00",
        "message": "Fix flaky test EnvPosixTestWithParam.RunMany (#9502)\n\nSummary:\nThread-pool pops a thread function and then run the function,\nwhich may cause thread-pool is empty but the last function is still\nrunning.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9502\n\nTest Plan:\n`gtest-parallel ./env_test\n--gtest_filter=DefaultEnvWithoutDirectIO/EnvPosixTestWithParam.RunMany/0\n-r 10000 -w 1000`\n\nReviewed By: ajkr\n\nDifferential Revision: D34011184\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 8c38bef155205bef96fd1c988dcc643a6b2ac270",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b69f4360ea2e671b3bbbf4e8df70471a3e113b44"
    },
    {
        "hash": "7cd576327415508a64442a98c0504ad04dc82c64",
        "author": "Levi Tamasi",
        "date": "2022-02-01T15:56:17-08:00",
        "message": "Fix a copy-paste bug related to background threads in db_stress (#9485)\n\nSummary:\nFixes a typo introduced in https://github.com/facebook/rocksdb/pull/9466.\n\nFixes https://github.com/facebook/rocksdb/issues/9482\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9485\n\nTest Plan:\n```\nCOMPILE_WITH_TSAN=1 make db_stress -j24\n./db_stress --ops_per_thread=1000 --reopen=5\n```\n\nReviewed By: ajkr\n\nDifferential Revision: D33928601\n\nPulled By: ltamasi\n\nfbshipit-source-id: 3e01a0ca5fffb56c268c811cbe045413b225059a",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_driver.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7cd576327415508a64442a98c0504ad04dc82c64"
    },
    {
        "hash": "a3de7ae49f59d517e3640695ca250d61e14feb56",
        "author": "Hui Xiao",
        "date": "2022-01-31T10:14:35-08:00",
        "message": "Mark virtual ~Env() override (#9467)\n\nSummary:\n**Context:**\n\nCompiling RocksDB with -Winconsistent-missing-destructor-override reveals the following :\n\n```\n./include/rocksdb/env.h:174:11: error: '~Env' overrides a destructor but is not marked 'override' [-Werror,-Winconsistent-missing-destructor-override]\n  virtual ~Env();\n          ^\n./include/rocksdb/customizable.h:58:3: note: overridden virtual function is here\n  ~Customizable() override {}\n```\n\nThe need of overriding the Env's destructor seems to be introduced by https://github.com/facebook/rocksdb/pull/9293 and surfaced by -Winconsistent-missing-destructor-override, which is not turned on by default.\n\n**Summary:**\nMark  ~Env() override\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9467\n\nTest Plan: - Turn on -Winconsistent-missing-destructor-override and USE_CLANG=1 make -jN env/env.o to see whether the error shows up\n\nReviewed By: jay-zhuang, riversand963, george-reynya\n\nDifferential Revision: D33864985\n\nPulled By: hx235\n\nfbshipit-source-id: 4a78bd161ff153902b2676829723e9a1c33dd749",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a3de7ae49f59d517e3640695ca250d61e14feb56"
    },
    {
        "hash": "e58cc56fb50ce9389445169da913b88045a557d5",
        "author": "anand76",
        "date": "2022-01-28T12:48:52-08:00",
        "message": "Use == operator for shared_ptr nullptr comparison (#9465)\n\nSummary:\nFrom C++ 20 onwards, the != operator is not supported for a shared_ptr.\nSo switch to using ==.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9465\n\nTest Plan: make check\n\nReviewed By: riversand963\n\nDifferential Revision: D33850596\n\nPulled By: anand1976\n\nfbshipit-source-id: eec16d1aa6c39a315ec2d44d233d7518f9c1ddcb",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/object_registry.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e58cc56fb50ce9389445169da913b88045a557d5"
    },
    {
        "hash": "7d7085c4e83b9561f8616d38daaefeef39171f4f",
        "author": "mrambacher",
        "date": "2022-01-27T16:58:22-08:00",
        "message": "Fix LITE build for SliceTransform::AsString (#9460)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/9460\n\nReviewed By: pdillinger\n\nDifferential Revision: D33830275\n\nPulled By: mrambacher\n\nfbshipit-source-id: 65dd1496e0291013085fdc3cce6ae3bf6dc955b5",
        "modified_files_count": 1,
        "modified_files": [
            "util/slice.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7d7085c4e83b9561f8616d38daaefeef39171f4f"
    },
    {
        "hash": "11d73295030bfd8ac80397862200db35547bf018",
        "author": "Hui Xiao",
        "date": "2022-01-26T10:24:16-08:00",
        "message": "Clarify status-handling logic in BlockBasedTableBuilder::WriteRawBlock (#9393)\n\nSummary:\n**Context:**\nInside `BlockBasedTableBuilder::WriteRawBlock`, there are multiple places that change local variables `io_s` and `s` while\ndepend on them. This PR attempts to clarify the relevant logics so that it's easier to read and add places of changing these local variables later (like https://github.com/facebook/rocksdb/pull/9342.) without changing the current behavior.\n\n**Summary:**\n- Shorten the lifetime of local var `io_s` and `s` as much as possible to avoid if-else branches by early return\n\n**Test**\n- Reasoned against original behavior to verify new changes do not break existing behaviors.\n- Rely on CI tests since we are not changing current behavior.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9393\n\nReviewed By: pdillinger\n\nDifferential Revision: D33626095\n\nPulled By: hx235\n\nfbshipit-source-id: 6184d1e1d85d2650d16617c449971988d062ed3f",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/11d73295030bfd8ac80397862200db35547bf018"
    },
    {
        "hash": "5d10a53b4212df01e7612ab8b959e9c5e643e33a",
        "author": "sdong",
        "date": "2022-01-25T10:22:32-08:00",
        "message": "Not try to finish index builder after errors (#9426)\n\nSummary:\nRight now, when error happens in block based table reader, we still call index_builder->Finish(), this causes one assertion in one stress test:\n\ndb_stress: table/block_based/index_builder.cc:202: virtual rocksdb::Status rocksdb::PartitionedIndexBuilder::Finish(rocksdb::IndexBuilder::IndexBlocks*, const rocksdb::BlockHandle&): Assertion `sub_index_builder_ == nullptr' failed.\n\nThis unlikely causes any corruption as we would finally abandon the file, but the code is confusing and it is hard to understand what would happen. Changing the behavior.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9426\n\nTest Plan: Run existing tests\n\nReviewed By: pdillinger\n\nDifferential Revision: D33751929\n\nfbshipit-source-id: 3c916b9444a4171010fc53df40496570bef5ae7a",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5d10a53b4212df01e7612ab8b959e9c5e643e33a"
    },
    {
        "hash": "1cecd22de9b036002b3f349bd2a77dd014036070",
        "author": "sdong",
        "date": "2022-01-24T12:50:18-08:00",
        "message": "Increase wait time within EnvPosixTestWithParam.RunMany (#9413)\n\nSummary:\nWe see:\n\n[ RUN      ] ChrootEnvWithDirectIO/EnvPosixTestWithParam.RunMany/0\nenv/env_test.cc:464: Failure\nExpected equality of these values:\n  4\n  cur\n    Which is: 0\n\nThe suspicious is that the wait time is not long enough. Increase the wait time to 10s and allows earlier check.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9413\n\nTest Plan: Run the test\n\nReviewed By: riversand963\n\nDifferential Revision: D33697715\n\nfbshipit-source-id: 3d71715562a8cceb694b773276dd9e4e451a18bc",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1cecd22de9b036002b3f349bd2a77dd014036070"
    },
    {
        "hash": "f61df25cc242360aea4906af15a8dd7b01358d64",
        "author": "Hui Xiao",
        "date": "2022-01-19T10:09:49-08:00",
        "message": "Add missing comment to RateLimiter::Request() (#9392)\n\nSummary:\n**Context/Summary:**\nThere are two `RateLimiter::Request()` in public header. One of them is missing some comment that the other one has.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9392\n\nTest Plan: rely on CI test\n\nReviewed By: pdillinger\n\nDifferential Revision: D33623609\n\nPulled By: hx235\n\nfbshipit-source-id: 42dc06308ff0bcf5ee7ef67e0b1c0172fc239b20",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/rate_limiter.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f61df25cc242360aea4906af15a8dd7b01358d64"
    },
    {
        "hash": "21e71d1c7341c48dd7e5a9614b48ac0deea9913c",
        "author": "Yanqin Jin",
        "date": "2022-01-12T09:04:01-08:00",
        "message": "Fix compilation error when building static_lib (#9377)\n\nSummary:\nWith memkind installed, either on a non-fb machine or using `ROCKSDB_NO_FBCODE=1`.\n\n```\nROCKSDB_NO_FBCODE=1 make static_lib\n```\n\nCompilation failed due to unused variable warning treated as error. To bypass this, we need to\ndisable warning-as-error, which is not ideal.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9377\n\nTest Plan: Repeat the above command, and rely on CI.\n\nReviewed By: ajkr\n\nDifferential Revision: D33543343\n\nPulled By: riversand963\n\nfbshipit-source-id: 9a2790b38c00b8696c7910287f4ae5a9b394341d",
        "modified_files_count": 1,
        "modified_files": [
            "memory/memkind_kmem_allocator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/21e71d1c7341c48dd7e5a9614b48ac0deea9913c"
    },
    {
        "hash": "3dfee770c677a37863cd7bf9e84fdaaf6ecf1076",
        "author": "Youngjae Lee",
        "date": "2022-01-07T18:06:10-08:00",
        "message": "Remove obsolete function declaration (#8724)\n\nSummary:\nFunction `Version::UpdateFilesByCompactionPri()` is never called and not implemented.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8724\n\nReviewed By: ajkr\n\nDifferential Revision: D30643943\n\nPulled By: riversand963\n\nfbshipit-source-id: 174b2d9a2a42e286222909a035cc74a7b5602335",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3dfee770c677a37863cd7bf9e84fdaaf6ecf1076"
    },
    {
        "hash": "f62efb9d35b8066b4d792de22882b5b939478df0",
        "author": "Hui Xiao",
        "date": "2022-01-06T10:13:53-08:00",
        "message": "Clarify Options::rate_limiter api (#9361)\n\nSummary:\nContext/Summary:\nI believe we also rate-limit read rate using the rate limiter passed into db options, e.g, https://github.com/facebook/rocksdb/blob/6.27.fb/file/random_access_file_reader.cc#L159\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9361\n\nTest Plan: Existing tests\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D33420803\n\nPulled By: hx235\n\nfbshipit-source-id: 0ef3c4d0aaacb9bee9a5d2caceddfc76588c8949",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f62efb9d35b8066b4d792de22882b5b939478df0"
    },
    {
        "hash": "fb0a76a9e2010def0348e63bfc1a6b2c4866bfa3",
        "author": "Hui Xiao",
        "date": "2022-01-06T10:10:44-08:00",
        "message": "Always check previous conditionally unchecked status due to shortcut evaluation in BlockBasedTableBuilder::WriteIndexBlock (#9349)\n\nSummary:\nNote: part of https://github.com/facebook/rocksdb/pull/9342\n**Context/Summary:**\nDue to shortcut evaluation in `ok() && s.IsIncomplete()`, status `s` remains unchecked if `ok()==false`, which is the case in https://app.circleci.com/pipelines/github/facebook/rocksdb/10718/workflows/429f7ad4-6b9a-446b-b9b3-710d51b90409/jobs/265508 revealed by the change in the corresponding PR https://github.com/facebook/rocksdb/pull/9342.\n\nAs suggested by reviewers, separation and clarification of status checking for partitioned index building from general table building status is added.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9349\n\nTest Plan:\n- The newly added if-else code is an equivalent translation of the existing logic plus always checking the conditionally unchecked status so relying on existing tests should be fine\n- https://github.com/facebook/rocksdb/pull/9342's `[build-linux-shared_lib-alt_namespace-status_checked](https://app.circleci.com/pipelines/github/facebook/rocksdb/10721/workflows/a200efe0-d545-4075-8c42-26dd3dc00f27/jobs/265625)` test should now pass after rebasing on this change\n\nReviewed By: pdillinger\n\nDifferential Revision: D33377223\n\nPulled By: hx235\n\nfbshipit-source-id: cb81da9709ae9185e9cea89776e3012e915d6ef9",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fb0a76a9e2010def0348e63bfc1a6b2c4866bfa3"
    },
    {
        "hash": "0a563ae2781728a8548225a46a4703bde4b75c90",
        "author": "mrambacher",
        "date": "2021-12-29T03:41:39-08:00",
        "message": "Change GTEST_SKIP to BYPASS for MemoryAllocatorTest (#9340)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/9340\n\nReviewed By: riversand963\n\nDifferential Revision: D33344152\n\nPulled By: mrambacher\n\nfbshipit-source-id: 283637625b86c33497571c5f52cac3ddf910b6f3",
        "modified_files_count": 1,
        "modified_files": [
            "memory/memory_allocator_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0a563ae2781728a8548225a46a4703bde4b75c90"
    },
    {
        "hash": "dfff1cecff78c32b180d4812f61c9219a7e59ced",
        "author": "Andrew Kryczka",
        "date": "2021-12-22T14:17:45-08:00",
        "message": "Filter `Get()`s from `db_stress` traces (#9315)\n\nSummary:\n`db_stress` traces are used for tracking unsynced changes. For that purpose, we\nonly need to track writes and not reads. Currently `TraceOptions` only\nsupports excluding `Get()`s from the trace, so this PR only excludes\n`Get()`s. In the future it would be good to exclude `MultiGet()`s and\niterator operations too.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9315\n\nTest Plan:\n- trace-heavy `db_stress` command elapsed time reduced 37%\n\nBenchmark:\n```\nTEST_TMPDIR=/dev/shm /usr/bin/time ./db_stress -ops_per_thread=100000 -sync_fault_injection=1 -expected_values_dir=/dev/shm/dbstress_expected --clear_column_family_one_in=0\n```\n\n- replay-heavy `db_stress` command elapsed time reduced 38%\n\nSetup:\n```\nTEST_TMPDIR=/dev/shm /usr/bin/time ./db_stress -ops_per_thread=100000000 -sync_fault_injection=1 -expected_values_dir=/dev/shm/dbstress_expected --clear_column_family_one_in=0 & sleep 120; pkill -9 db_stress\n```\nBenchmark:\n```\nTEST_TMPDIR=/dev/shm /usr/bin/time ./db_stress -ops_per_thread=1 -reopen=0 -expected_values_dir=/dev/shm/dbstress_expected --clear_column_family_one_in=0 --destroy_db_initially=0\n```\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D33229900\n\nPulled By: ajkr\n\nfbshipit-source-id: 0e4251c674d236ddbc4548e9bbfdd608bf3cdc93",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/expected_state.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dfff1cecff78c32b180d4812f61c9219a7e59ced"
    },
    {
        "hash": "393fc231afb0d5dc101ad9949a50099e637781d6",
        "author": "Andrew Kryczka",
        "date": "2021-12-21T12:27:54-08:00",
        "message": "More asserts in listener_test for debuggability (#9320)\n\nSummary:\nWe ran into a flake I could not debug so instead added assertions in\ncase it happens again.\n\nCommand was:\n\n```\nTEST_TMPDIR=/dev/shm/rocksdb COMPILE_WITH_UBSAN=1 USE_CLANG=1 OPT=-g SKIP_FORMAT_BUCK_CHECKS=1 make J=80 -j80 ubsan_check\n```\n\nFailure output was:\n\n```\n[==========] Running 1 test from 1 test case.\n[----------] Global test environment set-up.\n[----------] 1 test from EventListenerTest\n[ RUN      ] EventListenerTest.DisableBGCompaction\nUndefinedBehaviorSanitizer:DEADLYSIGNAL\n==1558126==ERROR: UndefinedBehaviorSanitizer: SEGV on unknown address 0x000000000031 (pc 0x7fd9c04dda22 bp 0x7fd9bf8aa580 sp 0x7fd9bf8aa540 T1558147)\n==1558126==The signal is caused by a READ memory access.\n==1558126==Hint: address points to the zero page.\n    #0 0x7fd9c04dda21 in __dynamic_cast /home/engshare/third-party2/libgcc/9.x/src/gcc-9.x/x86_64-facebook-linux/libstdc++-v3/libsupc++/../../.././libstdc++-v3/libsupc++/dyncast.cc:49:3\n    https://github.com/facebook/rocksdb/issues/1 0x510c53 in __ubsan::checkDynamicType(void*, void*, unsigned long) (/data/sandcastle/boxes/eden-trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/listener_test+0x510c53)\n    https://github.com/facebook/rocksdb/issues/2 0x50fb32 in HandleDynamicTypeCacheMiss(__ubsan::DynamicTypeCacheMissData*, unsigned long, unsigned long, __ubsan::ReportOptions) (/data/sandcastle/boxes/eden-trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/listener_test+0x50fb32)\n    https://github.com/facebook/rocksdb/issues/3 0x510230 in __ubsan_handle_dynamic_type_cache_miss_abort (/data/sandcastle/boxes/eden-trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/listener_test+0x510230)\n    https://github.com/facebook/rocksdb/issues/4 0x63221a in rocksdb::ColumnFamilyHandleImpl* rocksdb::static_cast_with_check<rocksdb::ColumnFamilyHandleImpl, rocksdb::ColumnFamilyHandle>(rocksdb::ColumnFamilyHandle*) /data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/./util/cast_util.h:19:20\n    https://github.com/facebook/rocksdb/issues/5 0x71cafa in rocksdb::DBImpl::TEST_GetFilesMetaData(rocksdb::ColumnFamilyHandle*, std::vector<std::vector<rocksdb::FileMetaData, std::allocator<rocksdb::FileMetaData> >, std::allocator<std::vector<rocksdb::FileMetaData, std::allocator<rocksdb::FileMetaData> > > >*, std::vector<std::shared_ptr<rocksdb::BlobFileMetaData>, std::allocator<std::shared_ptr<rocksdb::BlobFileMetaData> > >*) /data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/db/db_impl/db_impl_debug.cc:63:14\n    https://github.com/facebook/rocksdb/issues/6 0x53f6b4 in rocksdb::TestFlushListener::OnFlushCompleted(rocksdb::DB*, rocksdb::FlushJobInfo const&) /data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/db/listener_test.cc:277:24\n    https://github.com/facebook/rocksdb/issues/7 0x6e2f7d in rocksdb::DBImpl::NotifyOnFlushCompleted(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&, std::__cxx11::list<std::unique_ptr<rocksdb::FlushJobInfo, std::default_delete<rocksdb::FlushJobInfo> >, std::allocator<std::unique_ptr<rocksdb::FlushJobInfo, std::default_delete<rocksdb::FlushJobInfo> > > >*) /data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/db/db_impl/db_impl_compaction_flush.cc:863:19\n    https://github.com/facebook/rocksdb/issues/8 0x6e1074 in rocksdb::DBImpl::FlushMemTableToOutputFile(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&, bool*, rocksdb::JobContext*, rocksdb::SuperVersionContext*, std::vector<unsigned long, std::allocator<unsigned long> >&, unsigned long, rocksdb::SnapshotChecker*, rocksdb::LogBuffer*, rocksdb::Env::Priority) /data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/db/db_impl/db_impl_compaction_flush.cc:314:5\n    https://github.com/facebook/rocksdb/issues/9 0x6e3412 in rocksdb::DBImpl::FlushMemTablesToOutputFiles(rocksdb::autovector<rocksdb::DBImpl::BGFlushArg, 8ul> const&, bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::Env::Priority) /data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/db/db_impl/db_impl_compaction_flush.cc:359:14\n    https://github.com/facebook/rocksdb/issues/10 0x700df6 in rocksdb::DBImpl::BackgroundFlush(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::FlushReason*, rocksdb::Env::Priority) /data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/db/db_impl/db_impl_compaction_flush.cc:2703:14\n    https://github.com/facebook/rocksdb/issues/11 0x6fe1f0 in rocksdb::DBImpl::BackgroundCallFlush(rocksdb::Env::Priority) /data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/db/db_impl/db_impl_compaction_flush.cc:2742:16\n    https://github.com/facebook/rocksdb/issues/12 0x6fc732 in rocksdb::DBImpl::BGWorkFlush(void*) /data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/db/db_impl/db_impl_compaction_flush.cc:2569:44\n    https://github.com/facebook/rocksdb/issues/13 0xb3a820 in void std::_Bind<void (* (void*))(void*)>::operator()<void>() /mnt/gvfs/third-party2/libgcc/4959b39cfbe5965a37c861c4c327fa7c5c759b87/9.x/platform009/9202ce7/include/c++/9.x/functional:482:17\n    https://github.com/facebook/rocksdb/issues/14 0xb3a820 in std::_Function_handler<void (), std::_Bind<void (* (void*))(void*)> >::_M_invoke(std::_Any_data const&) /mnt/gvfs/third-party2/libgcc/4959b39cfbe5965a37c861c4c327fa7c5c759b87/9.x/platform009/9202ce7/include/c++/9.x/bits/std_function.h:300:2\n    https://github.com/facebook/rocksdb/issues/15 0xb347cc in rocksdb::ThreadPoolImpl::Impl::BGThread(unsigned long) /data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/util/threadpool_imp.cc:266:5\n    https://github.com/facebook/rocksdb/issues/16 0xb34a2f in rocksdb::ThreadPoolImpl::Impl::BGThreadWrapper(void*) /data/sandcastle/boxes/trunk-hg-fbcode-fbsource/fbcode/internal_repo_rocksdb/repo/util/threadpool_imp.cc:307:7\n    https://github.com/facebook/rocksdb/issues/17 0x7fd9c051a660 in execute_native_thread_routine /home/engshare/third-party2/libgcc/9.x/src/gcc-9.x/x86_64-facebook-linux/libstdc++-v3/src/c++11/../../../.././libstdc++-v3/src/c++11/thread.cc:80:18\n    https://github.com/facebook/rocksdb/issues/18 0x7fd9c041e20b in start_thread /home/engshare/third-party2/glibc/2.30/src/glibc-2.30/nptl/pthread_create.c:479:8\n    https://github.com/facebook/rocksdb/issues/19 0x7fd9c01dd16e in clone /home/engshare/third-party2/glibc/2.30/src/glibc-2.30/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:95\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9320\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D33242185\n\nPulled By: ajkr\n\nfbshipit-source-id: 741984b10a610e0509e0d4e54c42cdbac03f5285",
        "modified_files_count": 1,
        "modified_files": [
            "db/listener_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/393fc231afb0d5dc101ad9949a50099e637781d6"
    },
    {
        "hash": "82670fb17bb1df8ba9c1dbb15a8126b578eb59cd",
        "author": "Andrew Kryczka",
        "date": "2021-12-20T23:29:43-08:00",
        "message": "db_stress print hex key for MultiGet() inconsistency (#9324)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/9324\n\nReviewed By: riversand963\n\nDifferential Revision: D33248178\n\nPulled By: ajkr\n\nfbshipit-source-id: c8a7382ed613f9ac3a0a2e3fa7d3c6fe9c95ef85",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/82670fb17bb1df8ba9c1dbb15a8126b578eb59cd"
    },
    {
        "hash": "b448b712229fa4c003951e2307606e388677d732",
        "author": "Andrew Kryczka",
        "date": "2021-12-20T13:08:49-08:00",
        "message": "`db_stress` tolerate incomplete tail records in trace file (#9316)\n\nSummary:\nI saw the following error when running crash test for a while with\nunsynced data loss:\n\n```\nError restoring historical expected values: Corruption: Corrupted trace file.\n```\n\nThe trace file turned out to have an incomplete tail record. This is\nnormal considering blackbox kills `db_stress` while trace can be\nongoing.\n\nIn the case where the trace file is not otherwise corrupted, there\nshould be enough records already seen to sync up the expected state with\nthe recovered DB. This PR ignores any `Status::Corruption` the\n`Replayer` returns when that happens.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9316\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D33230579\n\nPulled By: ajkr\n\nfbshipit-source-id: 9814af4e39e57f00d85be7404363211762f9b41b",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/expected_state.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b448b712229fa4c003951e2307606e388677d732"
    },
    {
        "hash": "791723c1ec828baba4d2be825f6eb10541c834d8",
        "author": "Andrew Kryczka",
        "date": "2021-12-20T13:05:23-08:00",
        "message": "Fix race condition in db_stress thread setup (#9314)\n\nSummary:\nWe need to grab `SharedState`'s mutex while calling `IncThreads()` or `IncBgThreads()`. Otherwise the newly launched threads can simultaneously access the thread counters to check if every thread has finished initializing.\n\nRepro command:\n\n```\n$ rm -rf /dev/shm/rocksdb/rocksdb_crashtest_{whitebox,expected}/ && mkdir -p /dev/shm/rocksdb/rocksdb_crashtest_{whitebox,expected}/ && ./db_stress --acquire_snapshot_one_in=10000 --atomic_flush=1 --avoid_flush_during_recovery=0 --avoid_unnecessary_blocking_io=1 --backup_max_size=104857600 --backup_one_in=100000 --batch_protection_bytes_per_key=0 --block_size=16384 --bloom_bits=131.8094496796033 --bottommost_compression_type=zlib --cache_index_and_filter_blocks=1 --cache_size=1048576 --checkpoint_one_in=1000000 --checksum_type=kCRC32c --clear_column_family_one_in=0 --compact_files_one_in=1000000 --compact_range_one_in=1000000 --compaction_style=1 --compaction_ttl=0 --compression_max_dict_buffer_bytes=134217727 --compression_max_dict_bytes=16384 --compression_parallel_threads=1 --compression_type=zstd --compression_zstd_max_train_bytes=65536 --continuous_verification_interval=0 --db=/dev/shm/rocksdb/rocksdb_crashtest_whitebox --db_write_buffer_size=8388608 --delpercent=5 --delrangepercent=0 --destroy_db_initially=0 --disable_wal=1 --enable_compaction_filter=0 --enable_pipelined_write=0 --fail_if_options_file_error=1 --file_checksum_impl=crc32c --flush_one_in=1000000 --format_version=5 --get_current_wal_file_one_in=0 --get_live_files_one_in=1000000 --get_property_one_in=1000000 --get_sorted_wal_files_one_in=0 --index_block_restart_interval=15 --index_type=3 --iterpercent=10 --key_len_percent_dist=1,30,69 --level_compaction_dynamic_level_bytes=True --log2_keys_per_lock=22 --long_running_snapshots=0 --mark_for_compaction_one_file_in=10 --max_background_compactions=20 --max_bytes_for_level_base=10485760 --max_key=1000000 --max_key_len=3 --max_manifest_file_size=1073741824 --max_write_batch_group_size_bytes=1048576 --max_write_buffer_number=3 --max_write_buffer_size_to_maintain=4194304 --memtablerep=skip_list --mmap_read=1 --mock_direct_io=False --nooverwritepercent=1 --open_files=500000 --open_metadata_write_fault_one_in=0 --open_read_fault_one_in=32 --open_write_fault_one_in=0 --ops_per_thread=20000 --optimize_filters_for_memory=1 --paranoid_file_checks=0 --partition_filters=0 --partition_pinning=0 --pause_background_one_in=1000000 --periodic_compaction_seconds=0 --prefixpercent=5 --prepopulate_block_cache=1 --progress_reports=0 --read_fault_one_in=1000 --readpercent=45 --recycle_log_file_num=1 --reopen=0 --ribbon_starting_level=999 --secondary_cache_fault_one_in=32 --snapshot_hold_ops=100000 --sst_file_manager_bytes_per_sec=104857600 --sst_file_manager_bytes_per_truncate=1048576 --subcompactions=2 --sync=0 --sync_fault_injection=False --target_file_size_base=2097152 --target_file_size_multiplier=2 --test_batches_snapshots=1 --test_cf_consistency=1 --top_level_index_pinning=0 --unpartitioned_pinning=0 --use_block_based_filter=1 --use_clock_cache=0 --use_direct_io_for_flush_and_compaction=0 --use_direct_reads=0 --use_full_merge_v1=1 --use_merge=0 --use_multiget=1 --user_timestamp_size=0 --verify_checksum=1 --verify_checksum_one_in=1000000 --verify_db_one_in=100000 --write_buffer_size=1048576 --write_dbid_to_manifest=1 --write_fault_one_in=0 --writepercent=35\n```\n\nTSAN error:\n\n```\nWARNING: ThreadSanitizer: data race (pid=2750142)\n  Read of size 4 at 0x7ffc21d7f58c by thread T39 (mutexes: write M670895590377780496):\n    #0 rocksdb::SharedState::AllInitialized() const db_stress_tool/db_stress_shared_state.h:204 (db_stress+0x4fd307)\n    https://github.com/facebook/rocksdb/issues/1 rocksdb::ThreadBody(void*) db_stress_tool/db_stress_driver.cc:26 (db_stress+0x4fd307)\n    https://github.com/facebook/rocksdb/issues/2 StartThreadWrapper env/env_posix.cc:454 (db_stress+0x84472f)\n\n  Previous write of size 4 at 0x7ffc21d7f58c by main thread:\n    #0 rocksdb::SharedState::IncThreads() db_stress_tool/db_stress_shared_state.h:194 (db_stress+0x4fd779)\n    https://github.com/facebook/rocksdb/issues/1 rocksdb::RunStressTest(rocksdb::StressTest*) db_stress_tool/db_stress_driver.cc:78 (db_stress+0x4fd779)\n    https://github.com/facebook/rocksdb/issues/2 rocksdb::db_stress_tool(int, char**) db_stress_tool/db_stress_tool.cc:348 (db_stress+0x4b97dc)\n    https://github.com/facebook/rocksdb/issues/3 main db_stress_tool/db_stress.cc:21 (db_stress+0x47a351)\n\n  Location is stack of main thread.\n\n  Location is global '<null>' at 0x000000000000 ([stack]+0x00000001d58c)\n\n  Mutex M670895590377780496 is already destroyed.\n\n  Thread T39 (tid=2750211, running) created by main thread at:\n    #0 pthread_create /home/engshare/third-party2/gcc/9.x/src/gcc-10.x/libsanitizer/tsan/tsan_interceptors.cc:964 (libtsan.so.0+0x613c3)\n    https://github.com/facebook/rocksdb/issues/1 StartThread env/env_posix.cc:464 (db_stress+0x8463c2)\n    https://github.com/facebook/rocksdb/issues/2 rocksdb::CompositeEnvWrapper::StartThread(void (*)(void*), void*) env/composite_env_wrapper.h:288 (db_stress+0x4bcd20)\n    https://github.com/facebook/rocksdb/issues/3 rocksdb::EnvWrapper::StartThread(void (*)(void*), void*) include/rocksdb/env.h:1475 (db_stress+0x4bb950)\n    https://github.com/facebook/rocksdb/issues/4 rocksdb::RunStressTest(rocksdb::StressTest*) db_stress_tool/db_stress_driver.cc:80 (db_stress+0x4fd9d2)\n    https://github.com/facebook/rocksdb/issues/5 rocksdb::db_stress_tool(int, char**) db_stress_tool/db_stress_tool.cc:348 (db_stress+0x4b97dc)\n    https://github.com/facebook/rocksdb/issues/6 main db_stress_tool/db_stress.cc:21 (db_stress+0x47a351)\n\n ThreadSanitizer: data race db_stress_tool/db_stress_shared_state.h:204 in rocksdb::SharedState::AllInitialized() const\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9314\n\nTest Plan: verified repro command works after this PR.\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D33217698\n\nPulled By: ajkr\n\nfbshipit-source-id: 79358fe5adb779fc9dcf80643cc102d4b467fc38",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_driver.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/791723c1ec828baba4d2be825f6eb10541c834d8"
    },
    {
        "hash": "48b53441fd740b46c2d96c648781e80e74b8b9fe",
        "author": "Andrew Kryczka",
        "date": "2021-12-20T10:28:29-08:00",
        "message": "Skip MemoryAllocatorTest in LITE mode (#9318)\n\nSummary:\nThe tests rely on `CreateFromString()`, which returns\n`Status::NotSupported()` when these tests attempt to create non-default\nallocators.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9318\n\nReviewed By: riversand963\n\nDifferential Revision: D33238405\n\nPulled By: ajkr\n\nfbshipit-source-id: d2974e2341f1494f5f7cd07b73f2dbd0d502fc7c",
        "modified_files_count": 1,
        "modified_files": [
            "memory/memory_allocator_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/48b53441fd740b46c2d96c648781e80e74b8b9fe"
    },
    {
        "hash": "0d9b256813815a279b50a60b899b4347095db465",
        "author": "Peter Dillinger",
        "date": "2021-12-17T14:15:07-08:00",
        "message": "Fix unity build with SUPPORT_CLOCK_CACHE (#9309)\n\nSummary:\nAfter https://github.com/facebook/rocksdb/issues/9126\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9309\n\nTest Plan: CI\n\nReviewed By: ajkr\n\nDifferential Revision: D33188902\n\nPulled By: pdillinger\n\nfbshipit-source-id: 54bf34e33c2b30b1b8dc2a0229e84c194321b606",
        "modified_files_count": 1,
        "modified_files": [
            "cache/clock_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0d9b256813815a279b50a60b899b4347095db465"
    },
    {
        "hash": "cd854396328f40b930b1c18b226da6a6c457a9e8",
        "author": "Hui Xiao",
        "date": "2021-12-10T12:52:33-08:00",
        "message": "Make TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAcces less flaky (#9281)\n\nSummary:\nContext:\n[Rapid thread creation and deletion](https://github.com/facebook/rocksdb/blob/6.27.fb/utilities/transactions/write_prepared_transaction_test.cc#L439-L444) in  `SnapshotConcurrentAccessTest.SnapshotConcurrentAcces` inside a [potentially big loop](https://github.com/facebook/rocksdb/blob/6.27.fb/utilities/transactions/write_prepared_transaction_test.cc#L1238-L1248) can lead to heavy-loading the system with many threads due to delay in actually cleaning up thread's resource in the kernel sometime. We ran into some [flaky failure](https://app.circleci.com/pipelines/github/facebook/rocksdb/10383/workflows/136f1005-80a9-4515-aee9-fe36ac6462a1/jobs/253289) in CI and reproduced it by below:\n\n- Command\n```\nAdded `ROCKSDB_NAMESPACE::port::InstallStackTraceHandler();` like https://github.com/facebook/rocksdb/pull/9276\nDEBUG_LEVEL=2 make -j56 write_prepared_transaction_test\nGTEST_CATCH_EXCEPTIONS=0 ~/gtest-parallel/gtest-parallel -r 200 -w 200 ./write_prepared_transaction_test --gtest_filter=TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1\n```\n- Stack, where `write_prepared_transaction_test.cc:442` in `https://github.com/facebook/rocksdb/issues/9` points to thread creation\n```\n[ RUN      ] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1\n....terminate called after throwing an instance of 'std::system_error'\n  what():  Resource temporarily unavailable\nReceived signal 6 (Aborted)\n#0   /lib/x86_64-linux-gnu/libc.so.6(gsignal+0x38) [0x7fc114f39438]\n...\nhttps://github.com/facebook/rocksdb/issues/7   /usr/lib/x86_64-linux-gnu/libstdc++.so.6(+0xb8e73) [0x7fc1158a5e73] ??\t??:0\nhttps://github.com/facebook/rocksdb/issues/8   ./write_prepared_transaction_test() [0x4ca86c] std::thread::thread<rocksdb::WritePreparedTransactionTestBase::SnapshotConcurrentAccessTestInternal(rocksdb::WritePreparedTxnDB*, std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<unsigned long, std::allocator<unsigned long> \t const&, rocksdb::WritePreparedTxnDB::CommitEntry&, unsigned long&, unsigned long, unsigned long, unsigned long, unsigned long)::{lambda()https://github.com/facebook/rocksdb/issues/1}>(rocksdb::WritePreparedTransactionTestBase::SnapshotConcurrentAccessTestInternal(rocksdb::WritePreparedTxnDB*, s\td::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const&, rocksdb::WritePreparedTxnDB::CommitEntry&, unsigned long&, unsigned long, unsigned long, unsigned long, unsigned long)::{l\tmbda()https://github.com/facebook/rocksdb/issues/1}&&)\t/usr/include/c++/5/thread:137 (discriminator 4)\nhttps://github.com/facebook/rocksdb/issues/9   ./write_prepared_transaction_test() [0x4bb80c] rocksdb::WritePreparedTransactionTestBase::SnapshotConcurrentAccessTestInternal(rocksdb::WritePreparedTxnDB*, std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const&, rocksdb::W\titePreparedTxnDB::CommitEntry&, unsigned long&, unsigned long, unsigned long, unsigned long, unsigned long)\t/home/circleci/project/utilities/transactions/write_prepared_transaction_test.cc:442\nhttps://github.com/facebook/rocksdb/issues/10  ./write_prepared_transaction_test() [0x4407b6] rocksdb::SnapshotConcurrentAccessTest_SnapshotConcurrentAccess_Test::TestBody()\t/home/circleci/project/utilities/transactions/write_prepared_transaction_test.cc:1244\n...\n[109/200] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1 returned/aborted with exit code -6 (34462 ms)\n```\n\n- Move thread 2's work into current thread to avoid half of the thread creation cuz there is no difference in doing so. We expect this can make the thread-creation error less often, even though we can't gurantee it from happening again. Considering this is a trivial change with positive impact, it's still worth landing and monitor if it's enough to solve the problem in reality.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9281\n\nTest Plan:\nBefore the change, repeating the test 200 times with 200 workers failed\n`~/gtest-parallel/gtest-parallel -r 200 -w 200 ./write_prepared_transaction_test --gtest_filter=TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1`\n\n```\n[==========] Running 1 test from 1 test case.\n[----------] Global test environment set-up.\n[----------] 1 test from TwoWriteQueues/SnapshotConcurrentAccessTest\n[ RUN      ] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1\n..unknown file: Failure\nC++ exception with description \"Resource temporarily unavailable\" thrown in the test body.\n[  FAILED  ] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1, where GetParam() = (false, true, 1, 0, 1, 20) (11882 ms)\n[----------] 1 test from TwoWriteQueues/SnapshotConcurrentAccessTest (11882 ms total)\n\n[----------] Global test environment tear-down\n[==========] 1 test from 1 test case ran. (11882 ms total)\n[  PASSED  ] 0 tests.\n[  FAILED  ] 1 test, listed below:\n[  FAILED  ] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1, where GetParam() = (false, true, 1, 0, 1, 20)\n```\n\nAfter the change: repeating the test 200 times with 200 workers didn't fail, even with repeating the \"repeating\" for 10 times like below\n`for i in {1..10}; do ~/gtest-parallel/gtest-parallel -r 200 -w 200 ./write_prepared_transaction_test --gtest_filter=TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1; done`\n\n```\n[200/200] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1\n[200/200] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1\n[200/200] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1\n[200/200] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1\n[200/200] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1\n[200/200] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1\n[200/200] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1\n[200/200] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1\n[200/200] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1\n[200/200] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1\n```\n\nIt does failed when repeating the test 400 times with 400 workers\n`~/project$ ~/gtest-parallel/gtest-parallel -r 400 -w 400 ./write_prepared_transaction_test --gtest_filter=TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1`\n\n```\n[1/400] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1 (2928 ms)\nNote: Google Test filter = TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1\n[==========] Running 1 test from 1 test case.\n[----------] Global test environment set-up.\n[----------] 1 test from TwoWriteQueues/SnapshotConcurrentAccessTest\n[ RUN      ] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1\nunknown file: Failure\nC++ exception with description \"std::bad_alloc\" thrown in the test body.\n[  FAILED  ] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/1, where GetParam() = (false, true, 1, 0, 1, 20) (2597 ms)\n[----------] 1 test from TwoWriteQueues/SnapshotConcurrentAccessTest (2597 ms total)\n```\n\nReviewed By: ajkr\n\nDifferential Revision: D33026776\n\nPulled By: hx235\n\nfbshipit-source-id: 509f57126392821e835e48396e5bf224f4f5dcac",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cd854396328f40b930b1c18b226da6a6c457a9e8"
    },
    {
        "hash": "aec95b8c0923b314180025afc2df97d8daa0a4aa",
        "author": "Peter Dillinger",
        "date": "2021-12-09T12:58:46-08:00",
        "message": "Debug \"Resource temporarily unavailable\" exception in CircleCI (#9276)\n\nSummary:\nThis changes write_prepared_transaction_test under CircleCI to\nprint a stack trace on unhandled exception, so that we can debug rare\nexceptions seen in CircleCI:\n\n    [ RUN      ] TwoWriteQueues/SnapshotConcurrentAccessTest.SnapshotConcurrentAccess/24\n    .......unknown file: Failure\n    C++ exception with description \"Resource temporarily unavailable\" thrown in the test body.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9276\n\nTest Plan:\nmanual run test with seeded 'throw', with and without\nCIRCLECI=true environment variable\n\nReviewed By: ajkr, hx235\n\nDifferential Revision: D32996993\n\nPulled By: pdillinger\n\nfbshipit-source-id: e790408ce204b676d3d84a290e41be511b203bfa",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aec95b8c0923b314180025afc2df97d8daa0a4aa"
    },
    {
        "hash": "c879910102cc301904e74d08e2d08be9ed4fb125",
        "author": "Adam Retter",
        "date": "2021-12-08T22:01:23-08:00",
        "message": "Fix fstatfs call for compilation on 32 bit systems (#9251)\n\nSummary:\nOn some 32-bit systems, BTRFS_SUPER_MAGIC is unsigned while __fsword_t is signed.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9251\n\nReviewed By: ajkr\n\nDifferential Revision: D32961651\n\nPulled By: pdillinger\n\nfbshipit-source-id: 78e85fc1336f304a21e4d5961e60957c90daed63",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c879910102cc301904e74d08e2d08be9ed4fb125"
    },
    {
        "hash": "80ac7412b5f056ac23ca7a2296ba1811acdcc2f8",
        "author": "Peter Dillinger",
        "date": "2021-12-08T21:57:46-08:00",
        "message": "Polish/deflake BackupEngineTest.FileCollision (#9257)\n\nSummary:\nUse smaller and more predictable behaviors\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9257\n\nTest Plan:\ngtest-parallel --repeat=N ./backupable_db_test --gtest_filter=BackupEngineTest.FileCollision\n\nbefore (N=50) we see inconsistent sets of SST files\n\n    $ find /dev/shm/rocksdb_blah/ | grep -o '/00.*sst' | grep -o '^[^_]*' | sort | uniq -c\n     49 /000009\n      3 /000010\n      1 /000010.sst\n     49 /000012\n      3 /000013\n      1 /000013.sst\n     49 /000015\n      2 /000016\n      1 /000016.sst\n     22 /000018\n      2 /000019\n      1 /000019.sst\n     29 /000020\n     11 /000021\n      2 /000021.sst\n     46 /000022\n      2 /000022.sst\n      4 /000023\n      1 /000023.sst\n     27 /000025\n\nAnd after (N=5000) we see\n\n    $ find /dev/shm/rocksdb_blah/ | grep -o '/00.*sst' | grep -o '^[^_]*' | sort | uniq -c\n      10000 /000009\n      10000 /000012\n       5000 /000015\n\nReviewed By: ajkr\n\nDifferential Revision: D32888393\n\nPulled By: pdillinger\n\nfbshipit-source-id: 5bfd075b3184bb66c5613758a53f431c406e9808",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/80ac7412b5f056ac23ca7a2296ba1811acdcc2f8"
    },
    {
        "hash": "94d99400dca77c2e3c918c2f2b3d9d4c90f8d40b",
        "author": "Levi Tamasi",
        "date": "2021-12-08T12:05:37-08:00",
        "message": "Fix a typo in DBSSTTest.DBWithMaxSpaceAllowedWithBlobFiles (#9270)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/9270\n\nTest Plan:\n```\ngtest-parallel --repeat=10000 ./db_sst_test --gtest_filter=DBSSTTest.DBWithMaxSpaceAllowedWithBlobFiles\n```\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D32958154\n\nPulled By: ltamasi\n\nfbshipit-source-id: b6ec2fbbece80d73c567cec57638dffd3c84a2ba",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/94d99400dca77c2e3c918c2f2b3d9d4c90f8d40b"
    },
    {
        "hash": "d1f053b0aea325e65d741a2ff27aa78019381721",
        "author": "Levi Tamasi",
        "date": "2021-12-08T11:16:46-08:00",
        "message": "Attempt to deflake DBSSTTest.DestroyDBWithRateLimitedDelete (#9269)\n\nSummary:\nThis test case seems to be occasionally failing due to the code hitting\nthe immediate deletion branch in `DeleteScheduler::DeleteFile`. The\npatch increases the allowed trash ratio to a huge value to prevent this\nfrom happening.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9269\n\nTest Plan:\n```\ngtest-parallel --repeat=10000 ./db_sst_test --gtest_filter=DBSSTTest.DestroyDBWithRateLimitedDelete\n```\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D32956596\n\nPulled By: ltamasi\n\nfbshipit-source-id: 3945e7c1c19ede76698e03c3f133bc1d9fd61b84",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d1f053b0aea325e65d741a2ff27aa78019381721"
    },
    {
        "hash": "66b31c509832a1e3daa6880bca097c9a27a9b6b5",
        "author": "Hui Xiao",
        "date": "2021-12-07T22:42:30-08:00",
        "message": "Fix -Werror=maybe-uninitialized in db_stress_tool (#9265)\n\nSummary:\nContext/Summary:\nUninitialized variable `SequenceNumber old_saved_seqno` causes asan related compilation error/warning below:\n\n```\ndb_stress_tool/expected_state.cc:308:55: error: ‘old_saved_seqno’ may be used uninitialized in this function [-Werror=maybe-uninitialized]\n  308 |   if (s.ok() && old_saved_seqno != kMaxSequenceNumber &&\n      |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n```\n\nFix it by initializing to 0.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9265\n\nTest Plan:\n- make clean && COMPILE_WITH_ASAN=1 make -j48 db_stress_tool/expected_state.o\n- monitor if same error happens again after merging\n\nReviewed By: ajkr\n\nDifferential Revision: D32939630\n\nPulled By: hx235\n\nfbshipit-source-id: 41697515fd11ada8427f606b5dceb4e58d12cb80",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/expected_state.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/66b31c509832a1e3daa6880bca097c9a27a9b6b5"
    },
    {
        "hash": "930f2e92e65d39fae2289698447a0d908f5c4f40",
        "author": "Levi Tamasi",
        "date": "2021-12-02T16:54:21-08:00",
        "message": "Attempt to deflake DBSSTTest.DBWithSFMForBlobFilesAtomicFlush (#9241)\n\nSummary:\nWhen using the SST file manager, the actual deletion of DB files\npotentially occurs in the background. The patch adds another call\nto `SstFileManagerImpl::WaitForEmptyTrash` to the test case\n`DBSSTTest.DBWithSFMForBlobFilesAtomicFlush` to ensure the deletions\nare performed before the test checks the number of deleted files.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9241\n\nTest Plan:\n```\ngtest-parallel --repeat=1000 ./db_sst_test --gtest_filter=DBSSTTest.DBWithSFMForBlobFilesAtomicFlush\n```\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D32811427\n\nPulled By: ltamasi\n\nfbshipit-source-id: 7f2ad649a22bd2d7900e5f132372034093cfcf47",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/930f2e92e65d39fae2289698447a0d908f5c4f40"
    },
    {
        "hash": "9c932816cfcce84a0770dd788445f1f2eb739e50",
        "author": "Aravind Ramesh",
        "date": "2021-11-30T14:56:13-08:00",
        "message": "db_stress: db_stress segmentation fault (#9219)\n\nSummary:\ndb_stress asserts/seg-faults with below command (on debug and release builds)\n\n```\n\"rm -rf /tmp/rocksdbtest*; db_stress --ops_per_thread=1000 --reopen=5\"\n=======================================\nError opening unique id file for append: IO error: No such file or directory:\nWhile open a file for appending: /tmp/rocksdbtest-0/dbstress/.unique_ids:\nNo such file or directory\nChoosing random keys with no overwrite\nCreating 2621440 locks\nStarting continuous_verification_thread\n2021/11/15-08:46:49  Initializing worker threads\n2021/11/15-08:46:49  Starting database operations\n2021/11/15-08:46:49  Reopening database for the 1th time\nWARNING: prefix_size is non-zero but memtablerep != prefix_hash\nDB path: [/tmp/rocksdbtest-0/dbstress]\nSegmentation fault\n=======================================\n\n```\nStressTest() constructor deletes the directory \"dbstress\" because\nthe option --destroy_db_initially is true by default in db_stress.\n\nThis Seg fault happens on a new database, UniqueIdVerifier's constructor\ntries to read the \".unique_ids\" file, if the file is not present,\nReopenWritableFile() tries to create .unique_ids file, but fails\nas the directory db_stress is not available. The data_file_writer_\nis set as an invalid(null) pointer and in subsequent calls (~UniqueIdVerifier()\nand UniqueIdVerifier::Verify()) it accesses this null pointer and crashes.\n\nThis patch creates db_stress directory if it is missing, so the .unique_ids file\nis created.\n\nSigned-off-by: Aravind Ramesh <aravind.ramesh@wdc.com>\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9219\n\nReviewed By: ajkr\n\nDifferential Revision: D32730151\n\nPulled By: pdillinger\n\nfbshipit-source-id: f47baba56b380d93c3ba5608904756e86bbf14f5",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_listener.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9c932816cfcce84a0770dd788445f1f2eb739e50"
    },
    {
        "hash": "735fe61e8fbede35dd97908e501dc726bd733aa0",
        "author": "Peter Dillinger",
        "date": "2021-11-29T09:53:07-08:00",
        "message": "Fix flaky CassandraFunctionalTest...ExpiredColumnsToTombstone (#9226)\n\nSummary:\nYou could easily reproduce the failure by injecting sleep(11)\nbefore `store.Flush()`. Fixed by setting TTL time to approximately test\ntimeout time.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9226\n\nTest Plan: manual\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D32698105\n\nPulled By: pdillinger\n\nfbshipit-source-id: 40529af9d9f2389585988b7c81dffb120e2795a2",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/cassandra/cassandra_functional_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/735fe61e8fbede35dd97908e501dc726bd733aa0"
    },
    {
        "hash": "dc0ee3e5ca874b15c62fe3b9b261e6e6db398c26",
        "author": "Yanqin Jin",
        "date": "2021-11-22T09:38:02-08:00",
        "message": "Fix internal build error (#9195)\n\nSummary:\nInternal build reported:\n```\nrocksdb/listener.h:470:3: error: extra ';' inside a struct [-Werror,-Wextra-semi]\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9195\n\nTest Plan: import to fbcode and compile.\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D32590138\n\nPulled By: riversand963\n\nfbshipit-source-id: ca4ed9cca210a1a9a12d3de17c789ef9151c57e8",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/listener.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dc0ee3e5ca874b15c62fe3b9b261e6e6db398c26"
    },
    {
        "hash": "12e98add687d7ccb0e3ec984e1c9de764faaf35d",
        "author": "Yanqin Jin",
        "date": "2021-11-22T09:30:47-08:00",
        "message": "Print file checksum in hex (#9196)\n\nSummary:\nPrinting file checksum (usually an integer) in non-hex format is barely useful. To make the matter\nworse, it can mess with the output format. If you use `less` to redirect the output of `ldb manifest_dump`,\nnon-hex file checksum can cause `less` not to function as expected.\n\nAlso output some additional fields to json output.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9196\n\nTest Plan: manually test `ldb manifest_dump`.\n\nReviewed By: ajkr\n\nDifferential Revision: D32590253\n\nPulled By: riversand963\n\nfbshipit-source-id: de434b7e60dd05b0b7cb76eff2240b21f9ae4b32",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_edit.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/12e98add687d7ccb0e3ec984e1c9de764faaf35d"
    },
    {
        "hash": "4340e1ff6db42043dda4f1d7f54c52681ef4b55a",
        "author": "Zhichao Cao",
        "date": "2021-11-19T23:47:43-08:00",
        "message": "Disable the QPS verification in test temporally (#9190)\n\nSummary:\nDisable the QPS verification in test temporally, which causes the test failure due to different system delays.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9190\n\nTest Plan: make check\n\nReviewed By: siying\n\nDifferential Revision: D32576289\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 1df972e77dd82eed5af3462e5db5e141aadf8fae",
        "modified_files_count": 1,
        "modified_files": [
            "tools/trace_analyzer_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4340e1ff6db42043dda4f1d7f54c52681ef4b55a"
    },
    {
        "hash": "12117b26a359dc4e9649994b96991acb0720b3ff",
        "author": "sdong",
        "date": "2021-11-19T10:08:59-08:00",
        "message": "Fix flaky DBTest2.RateLimitedCompactionReads (#9185)\n\nSummary:\nDBTest2.RateLimitedCompactionReads sometime shows following failure:\n\n  what():  db/db_test2.cc:3976: Failure\nExpected equality of these values:\n  i + 1\n    Which is: 4\n  NumTableFilesAtLevel(0)\n    Which is: 0\n\nThe assertion itself doesn't appear to be correct. Fix it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9185\n\nTest Plan: Removing an assertion shouldn't break anything.\n\nReviewed By: ajkr\n\nDifferential Revision: D32549530\n\nfbshipit-source-id: 9993372d8af89161f903337a13f3e316e690a6b8",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/12117b26a359dc4e9649994b96991acb0720b3ff"
    },
    {
        "hash": "f4294669e0889825a0cb63882fdcc0a34bb74876",
        "author": "Zhichao Cao",
        "date": "2021-11-18T11:28:38-08:00",
        "message": "Fix the analyzer test failure caused by inaccurate timing wait (#9181)\n\nSummary:\nFix the analyzer test failure caused by inaccurate timing wait. The wait time at different system might be different or cause the delay, now we do not accurately count the lines. Only in a very rare extreme case, test will ignore the part exceed the timing of 1 second.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9181\n\nTest Plan: make check\n\nReviewed By: pdillinger\n\nDifferential Revision: D32511319\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: e694c8cb465c750cfa5a43dab3eff6707b9a11c8",
        "modified_files_count": 1,
        "modified_files": [
            "tools/trace_analyzer_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f4294669e0889825a0cb63882fdcc0a34bb74876"
    },
    {
        "hash": "28f54e71f33b2f560d291f2f875505d24e362a0b",
        "author": "Adam Simpkins",
        "date": "2021-11-16T10:20:50-08:00",
        "message": "fix compile errors in db/kv_checksum.h (#9173)\n\nSummary:\nWhen defining a template class, the constructor should be specified\nsimply using the class name; it does not take template arguments.a\n\nApparently older versions of gcc and clang did not complain about this\nsyntax, but gcc 11.x and recent versions of clang both complain about\nthis file.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9173\n\nTest Plan:\nWhen building with platform010 I got compile errors in this file both\nin `mode/dev` (clang) and in `mode/opt-gcc`.  This diff fixes the\ncompile failures.\n\nReviewed By: ajkr\n\nDifferential Revision: D32455881\n\nPulled By: simpkins\n\nfbshipit-source-id: 0682910d9e2cdade94ce1e77973d47ac04d9f7e2",
        "modified_files_count": 1,
        "modified_files": [
            "db/kv_checksum.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/28f54e71f33b2f560d291f2f875505d24e362a0b"
    },
    {
        "hash": "3295e9f640f5fe303faf00e50c58325d75171369",
        "author": "Andrew Kryczka",
        "date": "2021-11-12T19:31:03-08:00",
        "message": "Clarify max_write_buffer_size_to_maintain (#9154)\n\nSummary:\nI was unable to figure out the behavior by reading the old doc so attempted to\nwrite it differently.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9154\n\nReviewed By: riversand963\n\nDifferential Revision: D32338843\n\nPulled By: ajkr\n\nfbshipit-source-id: e1e67720cd92572b195583e5ea2c592180d4fefd",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/advanced_options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3295e9f640f5fe303faf00e50c58325d75171369"
    },
    {
        "hash": "86899363104c995372a93635b8671c87f95cc262",
        "author": "anand76",
        "date": "2021-11-11T17:59:18-08:00",
        "message": "Fix backward compatibility breakage in FileSystemWrapper (#9156)\n\nSummary:\nImplement the Name() method in FileSystemWrapper, since https://github.com/facebook/rocksdb/issues/8649 removed it and it can cause compilation failures. We can deprecate it in RocksDB 7.0.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9156\n\nReviewed By: riversand963\n\nDifferential Revision: D32363977\n\nPulled By: anand1976\n\nfbshipit-source-id: 1e5a2fec2ab0649255720d89abf5bac26bb64ded",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/file_system.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/86899363104c995372a93635b8671c87f95cc262"
    },
    {
        "hash": "afcd32533c6b2af65149f7b008a66c0db7fe985b",
        "author": "Ikko Ashimine",
        "date": "2021-11-10T12:22:21-08:00",
        "message": "Fix typo in env_win.h (#9138)\n\nSummary:\noveride -> override\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9138\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D32245235\n\nPulled By: mrambacher\n\nfbshipit-source-id: bed62b843925bed806c06ca3485d33bb45a56dc7",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/afcd32533c6b2af65149f7b008a66c0db7fe985b"
    },
    {
        "hash": "fc93553e6d2235e41c84c087d515bbd0767ac7aa",
        "author": "Adam Retter",
        "date": "2021-11-09T17:07:03-08:00",
        "message": "Fix an error on GCC 4.8.5 where -Werror=unused-parameter fails (#9144)\n\nSummary:\nBefore this fix compilation with GCC 4.8.5 20150623 (Red Hat 4.8.5-36) would fail with the following error:\n```\nCC       jls/db/db_impl/db_impl.o\nIn file included from ./env/file_system_tracer.h:8:0,\n                 from ./file/random_access_file_reader.h:15,\n                 from ./file/file_prefetch_buffer.h:15,\n                 from ./table/format.h:13,\n                 from ./table/internal_iterator.h:14,\n                 from ./db/pinned_iterators_manager.h:12,\n                 from ./db/range_tombstone_fragmenter.h:15,\n                 from ./db/memtable.h:22,\n                 from ./db/memtable_list.h:16,\n                 from ./db/column_family.h:17,\n                 from ./db/db_impl/db_impl.h:22,\n                 from db/db_impl/db_impl.cc:9:\n./include/rocksdb/file_system.h:108:8: error: unused parameter 'opts'\n[-Werror=unused-parameter]\n struct FileOptions : EnvOptions {\n        ^\ndb/db_impl/db_impl.cc: In member function 'virtual rocksdb::Status\nrocksdb::DBImpl::SetDBOptions(const\nstd::unordered_map<std::basic_string<char>, std::basic_string<char>\n>&)':\ndb/db_impl/db_impl.cc:1230:36: note: synthesized method\n'rocksdb::FileOptions& rocksdb::FileOptions::operator=(const\nrocksdb::FileOptions&)' first required here\n       file_options_for_compaction_ = FileOptions(new_db_options);\n                                    ^\n  CC       jls/db/db_impl/db_impl_compaction_flush.o\ncc1plus: all warnings being treated as errors\nmake[1]: *** [jls/db/db_impl/db_impl.o] Error 1\nmake[1]: *** Waiting for unfinished jobs....\nmake[1]: Leaving directory `/rocksdb-local-build'\nmake: *** [rocksdbjavastatic] Error 2\nMakefile:2222: recipe for target 'rocksdbjavastaticdockerarm64v8' failed\nmake: *** [rocksdbjavastaticdockerarm64v8] Error 2\n```\n\nThis was detected on both ppc64le and arm64v8, however it does not seem to appear in the same GCC 4.8 version we use for x64 in CircleCI - https://app.circleci.com/pipelines/github/facebook/rocksdb/9691/workflows/c2a94367-14f3-4039-be95-325c34643d41/jobs/227906\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9144\n\nReviewed By: riversand963\n\nDifferential Revision: D32290770\n\nfbshipit-source-id: c90a54ba2a618e1ff3660fff3f3368ab36c3c527",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/file_system.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fc93553e6d2235e41c84c087d515bbd0767ac7aa"
    },
    {
        "hash": "8ef5b9ddfe6843bdd6cd3a0635860e69c8b7d815",
        "author": "Yanqin Jin",
        "date": "2021-11-07T06:41:12-08:00",
        "message": "Update MySQLStyleTransactionTest to use SingleDelete (#9062)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9062\n\nReal MySQL-style transactions in MyRocks uses SingleDelete, which is\nmissing in our existint MySQLStyleTransactionTest. Ths diff by lth fills the\ngap in test coverage.\n\nReviewed By: lth\n\nDifferential Revision: D31813015\n\nfbshipit-source-id: 196ad761de30ae9ea1f92257058dfc265f211892",
        "modified_files_count": 1,
        "modified_files": [
            "test_util/transaction_test_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8ef5b9ddfe6843bdd6cd3a0635860e69c8b7d815"
    },
    {
        "hash": "5aad38f26275f95abd794b7cb00af382a25b98d7",
        "author": "Jay Zhuang",
        "date": "2021-11-05T17:57:50-07:00",
        "message": "Deflake DBBasicTestWithTimestampCompressionSettings.PutAndGetWithComp… (#9136)\n\nSummary:\n…action\n```\ndb/db_with_timestamp_basic_test.cc:2643: Failure\ndb_->CompactFiles(compact_opt, handles_[cf], collector->GetFlushedFiles(), static_cast<int>(kNumTimestamps - i))\nInvalid argument: A compaction must contain at least one file.\n```\nAble to be reproduced by run multiple test in parallel.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9136\n\nTest Plan:\n```\ngtest-parallel ./db_with_timestamp_basic_test --gtest_filter=Timestamp/DBBasicTestWithTimestampCompressionSettings.PutAndGetWithCompaction/12 -r 100 -w 100\n```\n\nReviewed By: riversand963\n\nDifferential Revision: D32197734\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: aeb0d6e9b37312f577e203ca81bb7a0f14d4e7ce",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_with_timestamp_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5aad38f26275f95abd794b7cb00af382a25b98d7"
    },
    {
        "hash": "28bab0ef7ebe4e915cff9adc93df98e15ccf4a74",
        "author": "Siying Dong",
        "date": "2021-11-04T16:38:09-07:00",
        "message": "Improve comments on options.writable_file_max_buffer_size (#9131)\n\nSummary:\nComments of options.writable_file_max_buffer_size mentioned Windows, which is confusing. Remove it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9131\n\nReviewed By: anand1976\n\nDifferential Revision: D32187003\n\nfbshipit-source-id: 1f134d7ecdc4a9d13825d461ab1da56769b9455f",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/28bab0ef7ebe4e915cff9adc93df98e15ccf4a74"
    },
    {
        "hash": "caadf09d535fbcb42302229f03c5752271bef8a5",
        "author": "sdong",
        "date": "2021-11-04T16:03:47-07:00",
        "message": "Add options.manual_wal_flush to db_bench (#9132)\n\nSummary:\nIt is useful to add options.manual_wal_flush to db_bench\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9132\n\nTest Plan: Run the benchamrk with the option.\n\nReviewed By: ltamasi\n\nDifferential Revision: D32188060\n\nfbshipit-source-id: a70835d3cad0f30095218dfda1daff0a432892e5",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/caadf09d535fbcb42302229f03c5752271bef8a5"
    },
    {
        "hash": "2a3511a0dfa517a8936ed1ff6942935b203bfdcc",
        "author": "Peter Dillinger",
        "date": "2021-11-04T15:01:10-07:00",
        "message": "Fix -Werror=type-limits seen in Travis (#9128)\n\nSummary:\nWork around annoying compiler warning-as-error from https://github.com/facebook/rocksdb/issues/9113\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9128\n\nTest Plan: CI\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D32181499\n\nPulled By: pdillinger\n\nfbshipit-source-id: d7e5f7857a29f7ba47c49c3aee7150b5763b65d9",
        "modified_files_count": 1,
        "modified_files": [
            "options/options_helper.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2a3511a0dfa517a8936ed1ff6942935b203bfdcc"
    },
    {
        "hash": "21f8a57f2a1db9c2bf90b457c1080c1feb37c808",
        "author": "Peter Dillinger",
        "date": "2021-11-02T21:54:29-07:00",
        "message": "Fix TSAN report on MemPurge test (#9115)\n\nSummary:\nTSAN reported data race on count variables in MemPurgeBasic\ntest. This suggests the test could fail if mempurges were slow enough\nthat they don't complete before the count variables being checked, but\ninjecting a long sleep into MemPurge (outside DB mutex) confirms that\nblocked writes ensure enough mempurges/flushes happen to make the test\npass. All the possible different values on testing should be OK to make\nthe test pass.\n\nSo this change makes the variables atomic so that up-to-date value is\nalways read and TSAN report suppressed. I have also used `.exchange(0)`\nto make the checking less stateful by \"popping off\" all the accumulated\ncounts.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9115\n\nTest Plan: updated test, watch for any flakiness\n\nReviewed By: riversand963\n\nDifferential Revision: D32114432\n\nPulled By: pdillinger\n\nfbshipit-source-id: c985609d39896a0d8f69ebc87b221e688609bdd8",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_flush_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/21f8a57f2a1db9c2bf90b457c1080c1feb37c808"
    },
    {
        "hash": "67a7b74b7f467fb82c7bcf008be6fb90887b6084",
        "author": "Andrew Kryczka",
        "date": "2021-11-02T21:43:50-07:00",
        "message": "Clarify setting `CompressionOptions::max_dict_bytes > 0` will charge block cache (#9119)\n\nSummary:\nAdd it to the API comment.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9119\n\nReviewed By: hx235\n\nDifferential Revision: D32124238\n\nPulled By: ajkr\n\nfbshipit-source-id: d1f82037417d883f2000f2d62995a7708dda77c6",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/advanced_options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/67a7b74b7f467fb82c7bcf008be6fb90887b6084"
    },
    {
        "hash": "a5ec5e3ea01a0dfffc4863666e29784ce21a1592",
        "author": "hx235",
        "date": "2021-11-01T14:28:09-07:00",
        "message": "Minor improvement to #8428 (Account for dictionary-building buffer in global memory limit) (#9032)\n\nSummary:\nSummary/Context:\n- Renamed `cache_rev_mng` to `compression_dict_buffer_cache_res_mgr`\n   - It is to distinguish with other potential `cache_res_mgr` in `BlockBasedTableBuilder` and to use correct short-hand for the words \"reservation\", \"manager\"\n- Added `table_options.block_cache == nullptr` in additional to `table_options.no_block_cache == true` to be conditions where we don't create a `CacheReservationManager`\n   - Theoretically `table_options.no_block_cache == true` is equivalent to `table_options.block_cache == nullptr` by API. But since segment fault will be generated by passing `nullptr` into `CacheReservationManager`'s constructor, it does not hurt to directly verify  `table_options.block_cache != nullptr` before passing in\n- Renamed `is_cache_full` to `exceeds_global_block_cache_limit`\n   - It is to hide implementation detail of cache reservation and to emphasize on the concept/design intent of caping memory within global block cache limit\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9032\n\nTest Plan: - Passing existing tests\n\nReviewed By: ajkr\n\nDifferential Revision: D32005807\n\nPulled By: hx235\n\nfbshipit-source-id: 619fd17bb924199de3db5924d8ab7dae53b1efa2",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a5ec5e3ea01a0dfffc4863666e29784ce21a1592"
    },
    {
        "hash": "01bd86ad356a69ab54783aaaa198b6faa5684fb1",
        "author": "leipeng",
        "date": "2021-10-31T23:11:43-07:00",
        "message": "InternalStats::DumpCFMapStat: fix sum.w_amp (#9065)\n\nSummary:\nsum `w_amp` will be a very large number`(bytes_written + bytes_written_blob)` when there is no any flush and ingest.\n\nThis PR set sum `w_amp` to zero if there is no any flush and ingest, this is conform to per-level `w_amp` computation.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9065\n\nReviewed By: ajkr\n\nDifferential Revision: D31943994\n\nPulled By: riversand963\n\nfbshipit-source-id: acbef5e331debebfad09e0e0d8d0885ebbc00609",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/01bd86ad356a69ab54783aaaa198b6faa5684fb1"
    },
    {
        "hash": "d263505417a6dcb273e19c5afb2e7d449175a465",
        "author": "Yanqin Jin",
        "date": "2021-10-31T22:16:03-07:00",
        "message": "Avoid div-by-zero error in db_stress (#9086)\n\nSummary:\nIf a column family has 0 levels, then existing `TestCompactFiles(...)` may hit\ndivide-by-zero. To fix, return early if the cf is empty.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9086\n\nTest Plan: TBD\n\nReviewed By: ajkr\n\nDifferential Revision: D31986799\n\nPulled By: riversand963\n\nfbshipit-source-id: 48f7dfb2b2b47cfc1315cb71ca80eb230d947f17",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d263505417a6dcb273e19c5afb2e7d449175a465"
    },
    {
        "hash": "8e59a1dc9ace6b3033f8b2082bf41a5a16305040",
        "author": "Yanqin Jin",
        "date": "2021-10-31T22:12:15-07:00",
        "message": "Attempt to deflake ListenerTest.MultiCF (#9084)\n\nSummary:\nEventListenerTest.MultiCF uses TestFlushListener which has members\nflushed_dbs_ and flushed_column_family_names_ that are not protected by\nlocks. This implicitly indicates that we need to ensure the methods\naccessing these data structures in a single threaded way. In other\ntests, e.g. MultiDBMultiListeners, we use TEST_WaitForFlushMemtable() to\nwait until all memtables of a given column family are flushed, hence no\npending flush threads will concurrently call OnFlushCompleted() and\ncause data race for flushed_dbs_. To fix a test failure, we should do\nthe same for MultiCF.\n\nExample data race stack traces reported by TSAN\n```\nRead of size 8 at 0x7b6000002840 by main thread:\n    #0 std::vector<rocksdb::DB*, std::allocator<rocksdb::DB*> >::size() const /usr/bin/../lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h:655:40\n    https://github.com/facebook/rocksdb/issues/1 rocksdb::EventListenerTest_MultiCF_Test::TestBody() /home/circleci/project/db/listener_test.cc:380:7\n\nPrevious write of size 8 at 0x7b6000002840 by thread T2:\n    #0 void std::vector<rocksdb::DB*, std::allocator<rocksdb::DB*> >::_M_emplace_back_aux<rocksdb::DB* const&>(rocksdb::DB* const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/vector.tcc:442:26\n    https://github.com/facebook/rocksdb/issues/1 std::vector<rocksdb::DB*, std::allocator<rocksdb::DB*> >::push_back(rocksdb::DB* const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/5.4.0/../../../../include/c++/5.4.0/bits/stl_vector.h:923:4\n    https://github.com/facebook/rocksdb/issues/2 rocksdb::TestFlushListener::OnFlushCompleted(rocksdb::DB*, rocksdb::FlushJobInfo const&) /home/circleci/project/db/listener_test.cc:255:18\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9084\n\nTest Plan: ./listener_test --gtest_filter=EventListenerTest.MultiCF\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D31952259\n\nPulled By: riversand963\n\nfbshipit-source-id: 94a7f29e4e9466ead42418944eb2247fc32bd499",
        "modified_files_count": 1,
        "modified_files": [
            "db/listener_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8e59a1dc9ace6b3033f8b2082bf41a5a16305040"
    },
    {
        "hash": "8f4f302316017fd89a2dbf4f965b797b8a85210e",
        "author": "Yanqin Jin",
        "date": "2021-10-31T22:08:48-07:00",
        "message": "Attempt to deflake DBFlushTest.FireOnFlushCompletedAfterCommittedResult (#9083)\n\nSummary:\nDBFlushTest.FireOnFlushCompletedAfterCommittedResult uses test sync\npoints to coordinate interleaving of different threads. Before this PR,\nthe test writes some data to memtable, triggers a manual flush, and\ntriggers a second manual flush after a first bg flush thread starts\nexecuting. Though unlikely, it is possible for the second bg flush\nthread to run faster than the first bg flush thread and deques flush\nqueue first. In this case, the original test will fail.\nThe fix is to wait until the first bg flush thread deques the flush\nqueue before triggering second manual flush.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9083\n\nTest Plan: ./db_flush_test --gtest_filter=DBFlushTest.FireOnFlushCompletedAfterCommittedResult\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D31951239\n\nPulled By: riversand963\n\nfbshipit-source-id: f32d7cdabe6ad6808fd18e54e663936dc0a9edb4",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_flush_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8f4f302316017fd89a2dbf4f965b797b8a85210e"
    },
    {
        "hash": "44d04582cbcbf1af87e04c077f2eacca2fe13ae5",
        "author": "Levi Tamasi",
        "date": "2021-10-29T17:47:02-07:00",
        "message": "Aggregate blob file related changes in VersionBuilder as VersionEdits are applied (#9085)\n\nSummary:\nThe current VersionBuilder code on mainline keeps track of blob file related\nchanges (\"delta\") induced by a series of `VersionEdit`s in the form of\n`BlobFileMetaDataDelta` objects. Specifically, `BlobFileMetaDataDelta`\ncontains the amount of additional garbage generated by compactions, as well\nas the set of newly linked/unlinked SSTs. This is very handy for detecting trivial moves,\nsince in that case the newly linked and unlinked SSTs cancel each other out.\nHowever, this representation does not allow us to easily tell whether a certain\nblob file is obsolete after applying a set of `VersionEdit`s or not. In order to\nsolve this issue, the patch introduces `MutableBlobFileMetaData`, which, in addition\nto the delta, also contains the materialized state after applying a set of version edits\n(i.e. the total amount of garbage and the resulting set of linked SSTs). This will\nenable us to add further consistency checks and to improve certain pieces of\nfunctionality where knowing up front which blob files get obsoleted is beneficial.\n(Note: this patch is just the refactoring part; I plan to create separate PRs for\nthe enhancements.)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9085\n\nTest Plan: Ran `make check` and the stress tests in BlobDB mode.\n\nReviewed By: riversand963\n\nDifferential Revision: D31980867\n\nPulled By: ltamasi\n\nfbshipit-source-id: cc4286778b10900af720423d6b772c77f28a93e3",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/44d04582cbcbf1af87e04c077f2eacca2fe13ae5"
    },
    {
        "hash": "82846f41d3cd245b8dd6f2dc7e8782dff96424b2",
        "author": "Calin Culianu",
        "date": "2021-10-27T13:25:01-07:00",
        "message": "Fix incorrect order of comments in win_thread.cc (#9033)\n\nSummary:\nThe comments in the `#endif` section at the end of the file were in the\nwrong order.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9033\n\nReviewed By: mrambacher\n\nDifferential Revision: D31935856\n\nPulled By: ajkr\n\nfbshipit-source-id: 24aca039993d6e27022cfe8d6434e90f2934c87c",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/win_thread.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/82846f41d3cd245b8dd6f2dc7e8782dff96424b2"
    },
    {
        "hash": "0a73ada7b57c4e69a231793776bee30706ae862b",
        "author": "leipeng",
        "date": "2021-10-20T14:08:05-07:00",
        "message": "remove unused local obj and simpilify comple code (#9052)\n\nSummary:\nThis PR does not change code sematics, it just changes for:\n\n1. local obj `nonmem_w` and `lfile` are unused\n2. null check for `delete ptr` is unnecessary\n3. use `unique_ptr::reset` instead of `release` + `delete`\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9052\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D31801661\n\nPulled By: anand1976\n\nfbshipit-source-id: 16a77d45da8c8833bf5bf3bce546bb3711b335df",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0a73ada7b57c4e69a231793776bee30706ae862b"
    },
    {
        "hash": "0c53b41856a8f2d683df545555d069ad7babfcef",
        "author": "leipeng",
        "date": "2021-10-20T14:04:59-07:00",
        "message": "db_impl_write.cc: use stats_ instead of immutable_db_options_.stats (#9053)\n\nSummary:\nThis PR has no semantic changes, just to make code shorter.\n\n`stats_` has value same with `immutable_db_options_.stats`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9053\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D31801603\n\nPulled By: anand1976\n\nfbshipit-source-id: cbd8fe478d3e90ae078ace49b4f2eb9bb028ccf6",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0c53b41856a8f2d683df545555d069ad7babfcef"
    },
    {
        "hash": "f053851af643755dc2ee252f92e3853b30a12be3",
        "author": "sdong",
        "date": "2021-10-19T12:48:18-07:00",
        "message": "Ignore non-overlapping levels when determinig grandparent files (#9051)\n\nSummary:\nRight now, when picking a compaction, grand parent files are from output_level + 1. This usually works, but if the level doesn't have any overlapping file, it will be more efficient to go further down. This is because the files are likely to be trivial moved further and might create a violation of max_compaction_bytes. This situation can naturally happen and might happen even more with TTL compactions. There is no harm to fix it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9051\n\nTest Plan: Run existing tests and see it passes. Also briefly run crash test.\n\nReviewed By: ajkr\n\nDifferential Revision: D31748829\n\nfbshipit-source-id: 52b99ab4284dc816d22f34406d528a3c98ff6719",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f053851af643755dc2ee252f92e3853b30a12be3"
    },
    {
        "hash": "aa218968805f529dc6d858846d0be688c95b8bc2",
        "author": "anand76",
        "date": "2021-10-18T23:03:19-07:00",
        "message": "Add property_bag to FileOptions (#9030)\n\nSummary:\nAdd a property_bag option in FileOptions for direct FileSystem users to pass custom properties to the provider in APIs such as NewRandomAccessFile, NewWritableFile etc. This field will be ignored/not populated by RocksDB.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9030\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D31630643\n\nPulled By: anand1976\n\nfbshipit-source-id: 1e1ddc5e2933ecada99a94eada5f309b674a03e8",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/file_system.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aa218968805f529dc6d858846d0be688c95b8bc2"
    },
    {
        "hash": "f0841d4fafbadac02c673711b8220de598d6a4cf",
        "author": "Giuseppe Ottaviano",
        "date": "2021-10-18T21:25:45-07:00",
        "message": "Fix out-of-bounds access in MultiDBParallelOpenTest (#9046)\n\nSummary:\n`dbs` should not be cleared, as it is reused later when reopening the DBs, so we have an out-of-bounds access with `dbnames[dbnum]`. The values left in the vector don't need to be reset, as the db pointer is an out parameter for `DB::Open`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9046\n\nReviewed By: pdillinger\n\nDifferential Revision: D31738263\n\nPulled By: ot\n\nfbshipit-source-id: c619e947b8d3dbc3d896f29971f093d3e3c794d3",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f0841d4fafbadac02c673711b8220de598d6a4cf"
    },
    {
        "hash": "53a0ab2beac75b88ade9ed6523425fc9e54518da",
        "author": "Jay Zhuang",
        "date": "2021-10-18T15:15:23-07:00",
        "message": "Deflaky ObsoleteFilesTest (#9049)\n\nSummary:\nWaitForFlushMemTable() may only wait for mem flush but not background flush\nfinishing. The the obsoleted file may not be purged yet.\nhttps://github.com/facebook/rocksdb/blob/fcaa7ff6381fe6052b37a1d013b14960ea23ac17/db/db_impl/db_impl_compaction_flush.cc#L2200-L2203\n\nUse WaitForCompact() instead to wait for background flush job.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9049\n\nTest Plan: `gtest-parallel ./obsolete_files_test --gtest_filter=ObsoleteFilesTest.DeleteObsoleteOptionsFile -r 1000`\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D31737343\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 82276ebeae7c7c75a733d3e1fd1c130d45e4761f",
        "modified_files_count": 1,
        "modified_files": [
            "db/obsolete_files_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/53a0ab2beac75b88ade9ed6523425fc9e54518da"
    },
    {
        "hash": "fbb09cf7aace8c03e132002698e001d310c73e4e",
        "author": "Levi Tamasi",
        "date": "2021-10-14T16:01:13-07:00",
        "message": "Mention a new BlobDB option in a couple of comments (#9038)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/9038\n\nReviewed By: riversand963\n\nDifferential Revision: D31663906\n\nfbshipit-source-id: a84ff07a1239f0c2eaeb3b776620fd0f7d4331bc",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/advanced_options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fbb09cf7aace8c03e132002698e001d310c73e4e"
    },
    {
        "hash": "140db3c44e10333de4c20b6ac7ff096b02fbab7b",
        "author": "Ubuntu",
        "date": "2021-10-14T13:24:29-07:00",
        "message": "Fix rate limit for MixGraph (#9027)\n\nSummary:\nFix race conditions of the read and write limiters.\n\nClose https://github.com/facebook/rocksdb/issues/8215 .\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9027\n\nReviewed By: ajkr\n\nDifferential Revision: D31645361\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 8ea7731991da422eecff2790c1e32db44c751965",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/140db3c44e10333de4c20b6ac7ff096b02fbab7b"
    },
    {
        "hash": "4c277ab201b7bacb664c1451207617f9fd67ec7a",
        "author": "leipeng",
        "date": "2021-10-14T12:01:56-07:00",
        "message": "MergingIterator: rearrange fields to reduce paddings (#9024)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/9024\n\nReviewed By: pdillinger\n\nDifferential Revision: D31614752\n\nPulled By: ajkr\n\nfbshipit-source-id: ef19ae243127f992e982a5a3b8ddefe7946246f8",
        "modified_files_count": 1,
        "modified_files": [
            "table/merging_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4c277ab201b7bacb664c1451207617f9fd67ec7a"
    },
    {
        "hash": "ee239df351f486a23793e637125965a3c0c3987f",
        "author": "Andrew Kryczka",
        "date": "2021-10-11T13:05:35-07:00",
        "message": "Initialize cache dumper `DumpUnit` in constructor (#9014)\n\nSummary:\nShould fix clang-analyze:\n\n```\nutilities/cache_dump_load_impl.cc:296:38: warning: The left operand of '!=' is a garbage value\n  while (io_s.ok() && dump_unit.type != CacheDumpUnitType::kFooter) {\n                      ~~~~~~~~~~~~~~ ^\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/9014\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D31546912\n\nPulled By: ajkr\n\nfbshipit-source-id: a2e0dc7874e8c1c6abf190862b5d49e6a6ad6d01",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/cache_dump_load_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ee239df351f486a23793e637125965a3c0c3987f"
    },
    {
        "hash": "c0ec58ecb94d276f69ccdfa956c5152d4c91a2ec",
        "author": "Andrew Kryczka",
        "date": "2021-10-07T15:26:08-07:00",
        "message": "stop populating unused/invalid MergingIterator heaps (#8975)\n\nSummary:\nI was looking at https://github.com/facebook/rocksdb/issues/2636 and got very confused that `MergingIterator::AddIterator()` is populating `min_heap_` with dangling pointers. There is justification in the comments that `min_heap_` will be cleared before it's used, but it'd be cleaner to not populate it with dangling pointers in the first place. Also made similar change in the constructor for consistency, although the pointers there would not be dangling, just unused.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8975\n\nTest Plan: rely on existing tests\n\nReviewed By: pdillinger, hx235\n\nDifferential Revision: D31273767\n\nPulled By: ajkr\n\nfbshipit-source-id: 127ca9dd1f82f77f55dd0c3f19511de3282fc229",
        "modified_files_count": 1,
        "modified_files": [
            "table/merging_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c0ec58ecb94d276f69ccdfa956c5152d4c91a2ec"
    },
    {
        "hash": "8717c268237aa1ba5928a941bc13cc84d9b6ce53",
        "author": "Kajetan Janiak",
        "date": "2021-10-07T15:23:55-07:00",
        "message": "Warning about incompatible options with level_compaction_dynamic_level_bytes (#8329)\n\nSummary:\nThis change introduces warnings instead of a silent override when trying to use level_compaction_dynamic_level_bytes with multiple cf_paths/db_paths.\nI have completed the CLA.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8329\n\nReviewed By: hx235\n\nDifferential Revision: D31399713\n\nPulled By: ajkr\n\nfbshipit-source-id: 29c6fe5258d1f739b4590ecd44aee44f55415595",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8717c268237aa1ba5928a941bc13cc84d9b6ce53"
    },
    {
        "hash": "787229837eb1b5fd2117c967908d5d429ce41524",
        "author": "mrambacher",
        "date": "2021-10-04T05:30:26-07:00",
        "message": "Fix LITE mode builds on MacOs (#8981)\n\nSummary:\nOn MacOS, there were errors building in LITE mode related to unused private member variables:\n\nIn file included from ./db/compaction/compaction_job.h:20:\n./db/blob/blob_file_completion_callback.h:87:19: error: private field ‘sst_file_manager_’ is not used [-Werror,-Wunused-private-field]\n  SstFileManager* sst_file_manager_;\n                  ^\n./db/blob/blob_file_completion_callback.h:88:22: error: private field ‘mutex_’ is not used [-Werror,-Wunused-private-field]\n  InstrumentedMutex* mutex_;\n                     ^\n./db/blob/blob_file_completion_callback.h:89:17: error: private field ‘error_handler_’ is not used [-Werror,-Wunused-private-field]\n  ErrorHandler* error_handler_;\n\nThis PR resolves those build issues by removing the values as members in LITE mode and fixing the constructor to ignore the input values in LITE mode (otherwise we get unused parameter warnings).\n\nTested by validating compiles without warnings.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8981\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D31320141\n\nPulled By: mrambacher\n\nfbshipit-source-id: d67875ebbd39a9555e4f09b2d37159566dd8a085",
        "modified_files_count": 1,
        "modified_files": [
            "db/blob/blob_file_completion_callback.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/787229837eb1b5fd2117c967908d5d429ce41524"
    },
    {
        "hash": "2cdaf5ca5b3803d38529d983742a61342934564f",
        "author": "Yanqin Jin",
        "date": "2021-10-01T17:22:37-07:00",
        "message": "Add additional checks for three existing unit tests (#8973)\n\nSummary:\nWith test sync points, we can assert on the equality of iterator value in three existing\nunit tests.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8973\n\nTest Plan:\n```\ngtest-parallel -r 1000 ./db_test2 --gtest_filter=DBTest2.IterRaceFlush2:DBTest2.IterRaceFlush1:DBTest2.IterRefreshRaceFlush\n```\n\nmake check\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D31256340\n\nPulled By: riversand963\n\nfbshipit-source-id: a9440767ab383e0ec61bd43ffa8fbec4ba562ea2",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2cdaf5ca5b3803d38529d983742a61342934564f"
    },
    {
        "hash": "1953b63cddf1a6779e7a7cfd7d28920b59ef6b6a",
        "author": "Peter (Stig) Edwards",
        "date": "2021-09-30T14:17:36-07:00",
        "message": "ErrorExit if num<1000 for fillsync and fill100K (#8391)\n\nSummary:\nThis is to avoid an exception and core dump when running\n  db_bench -benchmarks fillsync -num 999\nhttps://github.com/facebook/rocksdb/issues/8390\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8391\n\nReviewed By: pdillinger\n\nDifferential Revision: D29139688\n\nPulled By: mrambacher\n\nfbshipit-source-id: b9e306728ad25a7aac75f6154699aa852bc07bd1",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1953b63cddf1a6779e7a7cfd7d28920b59ef6b6a"
    },
    {
        "hash": "b59b7570cf2f43e3dbcf4765c7c4db25d3443721",
        "author": "ricky",
        "date": "2021-09-27T10:38:16-07:00",
        "message": "More clear error message on uncompressing block (#8934)\n\nSummary:\nThe origin error message of uncompressing block is confusing, which may result from either build support or data corruption.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8934\n\nReviewed By: ltamasi\n\nDifferential Revision: D31112588\n\nPulled By: pdillinger\n\nfbshipit-source-id: 1cbf2d4fbcb0ef376cf942246d06f48cb603f852",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b59b7570cf2f43e3dbcf4765c7c4db25d3443721"
    },
    {
        "hash": "7c6a7e8fa8e0a77207a82c59a886230d2c086172",
        "author": "sdong",
        "date": "2021-09-23T12:00:47-07:00",
        "message": "FaultInjectionTestFS::InjectThreadSpecificReadError() should not corrupt mmaped bytes (#8952)\n\nSummary:\nRight now FaultInjectionTestFS::InjectThreadSpecificReadError() might try to corrupt return bytes, but these bytes might be from mmapped files, which would cause segfault. Instead FaultInjectionTestFS::InjectThreadSpecificReadError() should never corrupt data unless it is in caller's buffer.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8952\n\nTest Plan: See db_stress still runs and make sure in a test run failurs are still injected in non-mmap cases.\n\nReviewed By: ajkr, ltamasi\n\nDifferential Revision: D31147318\n\nfbshipit-source-id: 9484a64ff2aaa36685557203f449286e694e65f9",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/fault_injection_fs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7c6a7e8fa8e0a77207a82c59a886230d2c086172"
    },
    {
        "hash": "be206db3512dbff6893f52fcc36ce9637a5566d1",
        "author": "Levi Tamasi",
        "date": "2021-09-22T16:40:25-07:00",
        "message": "Deflake MySQLStyleTransactionTest.TransactionStressTest in \"status checked\" mode (#8947)\n\nSummary:\nThere is a corner case when using WriteUnprepared transactions when\n`WriteUnpreparedTxn::Get` returns `Status::TryAgain` instead of\npropagating the result of `GetFromBatchAndDB`. The patch adds\n`PermitUncheckedError` to make the `ASSERT_STATUS_CHECKED` build pass in\nthis case as well.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8947\n\nTest Plan: `make check`\n\nReviewed By: riversand963\n\nDifferential Revision: D31125422\n\nPulled By: ltamasi\n\nfbshipit-source-id: 42de51dcfa9384e032244c2b4d3f40e9a4111194",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_unprepared_txn.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/be206db3512dbff6893f52fcc36ce9637a5566d1"
    },
    {
        "hash": "fcce1f2c7abc89470e7641978b210a0eeaeec7b8",
        "author": "sdong",
        "date": "2021-09-21T12:22:22-07:00",
        "message": "RandomAccessFileReader::MultiRead() should not return read bytes not read (#8941)\n\nSummary:\nRight now, if underlying read returns fewer bytes than asked for, RandomAccessFileReader::MultiRead() still returns those in the buffer to upper layer. This can be a surprise to upper layer.\nThis is unlikely to cause incorrect data. To cause incorrect data, checksum checking in upper layer should pass with short reads, whose chance is low.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8941\n\nTest Plan: Run stress tests for a while\n\nReviewed By: anand1976\n\nDifferential Revision: D31085780\n\nfbshipit-source-id: 999adf2d6c2712f1323d14bb68b678df59969973",
        "modified_files_count": 1,
        "modified_files": [
            "file/random_access_file_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fcce1f2c7abc89470e7641978b210a0eeaeec7b8"
    },
    {
        "hash": "1de588668c7161227256440ad77dcd7182d9e827",
        "author": "sdong",
        "date": "2021-09-21T11:27:38-07:00",
        "message": "Fix flaky ldb_cmd_test tests caused by file deletions during validation (#8942)\n\nSummary:\nIn FileChecksumTestHelper::VerifyEachFileChecksum(), we query the file list, and then for each file in the list verify the checksum. However, compaction can delete those files in the mean time and cause failures. To prevent it from happening, disable file deletion during the validation.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8942\n\nTest Plan: Run exsiting test and see it doesn't fail.\n\nReviewed By: pdillinger\n\nDifferential Revision: D31086488\n\nfbshipit-source-id: 554608f36d2dd3bf0a20dfc4039c68bd8533d7f8",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1de588668c7161227256440ad77dcd7182d9e827"
    },
    {
        "hash": "ba48ff8303aad3bcfdae070191dfe587d2720d44",
        "author": "sdong",
        "date": "2021-09-17T15:26:27-07:00",
        "message": "Fix ldb --try_load_options doesn't use customized Env (#8929)\n\nSummary:\nAs title. The reason is that after loading customized options, the env is not set back to the correct one. Fix it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8929\n\nTest Plan: Manually validate in an environment where the command failed.\n\nReviewed By: riversand963\n\nDifferential Revision: D31026931\n\nfbshipit-source-id: c25dc788bf80ed5bf4b24922c442781943bcd65b",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ba48ff8303aad3bcfdae070191dfe587d2720d44"
    },
    {
        "hash": "65411b8d4e57e1888ccdc1eb67f6350a832867c8",
        "author": "Hui Xiao",
        "date": "2021-09-17T09:23:31-07:00",
        "message": "Improve rate_limiter_test.cc (#8904)\n\nSummary:\n- Fixed a bug in `RateLimiterTest.GeneratePriorityIterationOrder` that the callbacks in this test were not called starting from `i = 1`. Fix by increasing `rate_bytes_per_sec` and requested bytes.\n   - The bug is due to the previous `rate_bytes_per_sec` was set too small, resulting in `refill_bytes_per_period`  less than  `kMinRefillBytesPerPeriod`. Hence the actual `refill_bytes_per_period` was equal to `kMinRefillBytesPerPeriod` due to the logic [here](https://github.com/facebook/rocksdb/blob/main/util/rate_limiter.cc#L302-L303)  and it ended up being greater than the previously set requested bytes. Therefore starting from `i = 1`, `RefillBytesAndGrantRequests()` and `GeneratePriorityIterationOrder` won't be called and the test callbacks was not triggered to execute the assertion.\n- Added internal flag to assert callbacks are called in `RateLimiterTest.GeneratePriorityIterationOrder` to prevent any future changes defeat the purpose of the test [as suggested](https://github.com/facebook/rocksdb/pull/8890#discussion_r704915134)\n- Increased `rate_bytes_per_sec` and bytes of each request in `RateLimiterTest.GetTotalBytesThrough`, `RateLimiterTest.GetTotalRequests`, `RateLimiterTest.GetTotalPendingRequests` to trigger the \"long path\" of execution (i.e, the one trigger RefillBytesAndGrantRequests()) to increase test coverage\n   - This increased the running time of the three tests, see test plan for time difference running locally\n- Cleared up sync point effects after each test by calling `SyncPoint::GetInstance()->DisableProcessing();` and `SyncPoint::GetInstance()->ClearAllCallBacks();` in `~RateLimiterTest()` [as suggested](https://github.com/facebook/rocksdb/pull/8595/files#r697534279)\n  - It's fine to call these two methods even when `EnableProcessing()` or `SetCallBack()` is not called in the test or is already cleaned up. In those cases, calling these two functions in destructor is effectively no-op.\n  - This will allow cleaning up sync point effects of previous test even when the previous test failed in assertion.\n- Added missing `SyncPoint::GetInstance()->DisableProcessing();` and `SyncPoint::GetInstance()->ClearCallBacks(..);` in existing tests for completeness\n- Called `SyncPoint::GetInstance()->DisableProcessing();` and `SyncPoint::GetInstance()->ClearCallBacks(..);` in loop in `RateLimiterTest.GeneratePriorityIterationOrder` for completeness\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8904\n\nTest Plan:\n- Passing existing tests\n- To verify the 1st change, run `RateLimiterTest.GeneratePriorityIterationOrder` with assertions of callbacks are indeed called under original `rate_bytes_per_sec` and request byte and under updated `rate_bytes_per_sec` and request byte. The former will fail the assertion while the latter succeeds.\n- Here is the increased test time due to the 3rd change mentioned above in the summary. The relevant 3 tests mentioned in total increase the test time by 6s (~6000/33848 = 17.7% of the original total test time), which IMO is acceptable for better test coverage through running the \"long path\".\n   - current (run on branch rate_limiter_ut_improve locally)\n\n   [ RUN      ] RateLimiterTest.GetTotalBytesThrough\n   [       OK ] RateLimiterTest.GetTotalBytesThrough (3000 ms)\n   [ RUN      ] RateLimiterTest.GetTotalRequests\n   [       OK ] RateLimiterTest.GetTotalRequests (3001 ms)\n   [ RUN      ] RateLimiterTest.GetTotalPendingRequests\n   [       OK ] RateLimiterTest.GetTotalPendingRequests (0 ms)\n   ...\n   [----------] 10 tests from RateLimiterTest (43349 ms total)\n\n   [----------] Global test environment tear-down\n   [==========] 10 tests from 1 test case ran. (43349 ms total)\n   [  PASSED  ] 10 tests.\n\n   - previous (run on branch main locally)\n\n   [ RUN      ] RateLimiterTest.GetTotalBytesThrough\n   [       OK ] RateLimiterTest.GetTotalBytesThrough (0 ms)\n   [ RUN      ] RateLimiterTest.GetTotalRequests\n   [       OK ] RateLimiterTest.GetTotalRequests (0 ms)\n   [ RUN      ] RateLimiterTest.GetTotalPendingRequests\n   [       OK ] RateLimiterTest.GetTotalPendingRequests (0 ms)\n   ...\n   [----------] 10 tests from RateLimiterTest (33848 ms total)\n\n  [----------] Global test environment tear-down\n  [==========] 10 tests from 1 test case ran. (33848 ms total)\n  [  PASSED  ] 10 tests.\n\nReviewed By: ajkr\n\nDifferential Revision: D30872544\n\nPulled By: hx235\n\nfbshipit-source-id: ff894f5c1a4bef70e8e407d53b00be45f776b3e4",
        "modified_files_count": 1,
        "modified_files": [
            "util/rate_limiter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/65411b8d4e57e1888ccdc1eb67f6350a832867c8"
    },
    {
        "hash": "f4a1d106681c7631db9d3932331e6433dd12b548",
        "author": "Peter Dillinger",
        "date": "2021-09-15T21:31:20-07:00",
        "message": "Fix flaky WALTrashCleanupOnOpen (#8917)\n\nSummary:\nTest did not consider that slower deletion rate only kicks in\nafter a file is deleted\n\nFixes https://github.com/facebook/rocksdb/issues/7546\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8917\n\nTest Plan:\nno longer reproduces using\n\n    buck test mode/dev //internal_repo_rocksdb/repo:db_sst_test -- --exact 'internal_repo_rocksdb/repo:db_sst_test - DBWALTestWithParam/DBWALTestWithParam.WALTrashCleanupOnOpen/0' --jobs 40 --stress-runs 600 --record-results\n\nReviewed By: siying\n\nDifferential Revision: D30949127\n\nPulled By: pdillinger\n\nfbshipit-source-id: 5d0607f8f548071b07410fe8f532b4618cd225e5",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f4a1d106681c7631db9d3932331e6433dd12b548"
    },
    {
        "hash": "5c92aa38eaa29041d0a6eb7b55a3f69db3ea5241",
        "author": "Andrew Kryczka",
        "date": "2021-09-15T14:28:09-07:00",
        "message": "Avoid overwriting first non-OK Status in db_stress setup (#8907)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/8907\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D30922081\n\nPulled By: ajkr\n\nfbshipit-source-id: ad7a32c21d0049342fd20c9b7f555e93674c3671",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5c92aa38eaa29041d0a6eb7b55a3f69db3ea5241"
    },
    {
        "hash": "12d798ac06bcce36be703b057d5f5f4dab3b270c",
        "author": "sdong",
        "date": "2021-09-14T14:33:15-07:00",
        "message": "Always iniitalize ArenaWrappedDBIter::db_iter_ to nullptr (#8889)\n\nSummary:\nArenaWrappedDBIter::db_iter_ should never be nullptr. However, when debugging a segfault, it's hard to distinguish it is not initialized (not possible) and other corruption. Add this nullptr to help distinguish the case.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8889\n\nTest Plan: Run existing unit tests.\n\nReviewed By: pdillinger\n\nDifferential Revision: D30814756\n\nfbshipit-source-id: 4b1f36896a33dc203d4f1f424ded9554927d61ba",
        "modified_files_count": 1,
        "modified_files": [
            "db/arena_wrapped_db_iter.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/12d798ac06bcce36be703b057d5f5f4dab3b270c"
    },
    {
        "hash": "7bef598440ee18d4bd53635ee64ce783003c9d6d",
        "author": "Peter Dillinger",
        "date": "2021-09-13T12:18:15-07:00",
        "message": "Bypass unused parameterization in ExternalSSTFileBasicTest.IngestExte… (#8910)\n\nSummary:\nFacebook infrastructure doesn't like continuously skipping\ntests, so fixing this permanently disabled parameterization to BYPASS\ninstead of SKIP. (Internal ref: T100525285)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8910\n\nTest Plan: manual\n\nReviewed By: anand1976\n\nDifferential Revision: D30905169\n\nPulled By: pdillinger\n\nfbshipit-source-id: e23d63d2aa800e54676269fad3a093cd3f9f222d",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7bef598440ee18d4bd53635ee64ce783003c9d6d"
    },
    {
        "hash": "0aad4ca0ffe3107bf60e9ce25914a167f0478b3a",
        "author": "Hui Xiao",
        "date": "2021-09-09T15:25:24-07:00",
        "message": "Add comment for new_memory_used parameter in CacheReservationManager::UpdateCacheReservation (#8895)\n\nSummary:\nContext/Summary: this PR is to clarify what the parameter new_memory_used is in CacheReservationManager::UpdateCacheReservation\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8895\n\nTest Plan:\n- Passing existing test\n- Make format\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D30844814\n\nPulled By: hx235\n\nfbshipit-source-id: 3177f7abf5668ea9e73818ceaa355566f03acabc",
        "modified_files_count": 1,
        "modified_files": [
            "cache/cache_reservation_manager.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0aad4ca0ffe3107bf60e9ce25914a167f0478b3a"
    },
    {
        "hash": "dd092c2d11f74ef2005c75e6168323d4f30c644a",
        "author": "Andrew Kryczka",
        "date": "2021-09-08T13:39:01-07:00",
        "message": "prevent stranded LATEST_BACKUP in BackupEngineTest.NoDeleteWithReadOnly (#8887)\n\nSummary:\nA \"LATEST_BACKUP\" file was left in the backup directory by\n\"BackupEngineTest.NoDeleteWithReadOnly\" test, affecting future test\nruns. In particular, it caused \"BackupEngineTest.IOStats\" to fail since\nit relies on backup directory containing only data written by its\n`BackupEngine`.\n\nThe fix is to promote \"LATEST_BACKUP\" to an explicitly managed file so\nit is deleted in `BackupEngineTest` constructor if it exists.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8887\n\nTest Plan:\nbelow command used to fail. Now it passes:\n\n```\n$ TEST_TMPDIR=/dev/shm ./backupable_db_test --gtest_filter='BackupEngineTest.NoDeleteWithReadOnly:BackupEngineTest.IOStats'\n```\n\nReviewed By: pdillinger\n\nDifferential Revision: D30812336\n\nPulled By: ajkr\n\nfbshipit-source-id: 32dfbe1368ebdab872e610764bfea5daf9a2af09",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dd092c2d11f74ef2005c75e6168323d4f30c644a"
    },
    {
        "hash": "2bc914094d9325f4562e625ec0dc2c619a309510",
        "author": "Zaorang Yang",
        "date": "2021-08-27T12:15:08-07:00",
        "message": "Refactor with VersionBuilder (#8706)\n\nSummary:\nIntroduce a new function to save sst files.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8706\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D30544242\n\nPulled By: riversand963\n\nfbshipit-source-id: 554755852daff7ae1c7864b0029f51b27099ee09",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2bc914094d9325f4562e625ec0dc2c619a309510"
    },
    {
        "hash": "7ddc096d7d0b084b072ca83ef81aa906744b305a",
        "author": "James Yin",
        "date": "2021-08-27T12:10:29-07:00",
        "message": "Fix typo in the comment of log_empty_ (#8711)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/8711\n\nReviewed By: riversand963\n\nDifferential Revision: D30566761\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: dd4690f5e2af2d263ed75ea1b9ed24692fe81362",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7ddc096d7d0b084b072ca83ef81aa906744b305a"
    },
    {
        "hash": "4afa24f8ae18aa4e173835f70bb608d336b46554",
        "author": "Jay Zhuang",
        "date": "2021-08-26T09:27:37-07:00",
        "message": "Deflake test `CompactionJobTest.InputSerialization` (#8712)\n\nSummary:\nIt's invalid to have an empty file name.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8712\n\nTest Plan:\n```\n$ gtest-parallel ./compaction_job_test --gtest_filter=CompactionJobTest.InputSerialization -r 10000\n```\n\nReviewed By: pdillinger\n\nDifferential Revision: D30566739\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 41e73175e3c95c4b73b4fdcd33470788d4e29d37",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_job_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4afa24f8ae18aa4e173835f70bb608d336b46554"
    },
    {
        "hash": "c521f22a1e9aac4bde0831cd7489da1f08ebca35",
        "author": "Andrew Kryczka",
        "date": "2021-08-23T23:09:17-07:00",
        "message": "Deflake write-prepared and write-unprepared tests (#8696)\n\nSummary:\nThe `JobContext::job_snapshot` referenced DB state but could\nhave been deleted by a BG thread after the signal/unlock allowing\nshutdown to proceed. Then we would see an error like this (valgrind):\n\n```\n==354104== Thread 2:\n==354104== Invalid read of size 8\n==354104==    at 0x694C4D: rocksdb::ManagedSnapshot::~ManagedSnapshot() (snapshot_impl.cc:20)\n==354104==    by 0x58F5BA: operator() (unique_ptr.h:81)\n==354104==    by 0x58F5BA: operator() (unique_ptr.h:75)\n==354104==    by 0x58F5BA: ~unique_ptr (unique_ptr.h:292)\n==354104==    by 0x58F5BA: rocksdb::JobContext::~JobContext() (job_context.h:221)\n==354104==    by 0x5F155E: rocksdb::DBImpl::BackgroundCallCompaction(rocksdb::DBImpl::PrepickedCompaction*, rocksdb::Env::Priority) (db_impl_compaction_flush.cc:2696)\n==354104==    by 0x5F1BC2: rocksdb::DBImpl::BGWorkCompaction(void*) (db_impl_compaction_flush.cc:2468)\n==354104==    by 0x83707A: operator() (std_function.h:688)\n==354104==    by 0x83707A: rocksdb::ThreadPoolImpl::Impl::BGThread(unsigned long) (threadpool_imp.cc:266)\n==354104==    by 0x8373ED: rocksdb::ThreadPoolImpl::Impl::BGThreadWrapper(void*) (threadpool_imp.cc:307)\n==354104==    by 0x492A800: execute_native_thread_routine (in /usr/local/fbcode/platform009/lib/libstdc++.so.6.0.28)\n==354104==    by 0x4A5020B: start_thread (in /usr/local/fbcode/platform009/lib/libpthread-2.30.so)\n==354104==    by 0x4CF281E: clone (in /usr/local/fbcode/platform009/lib/libc-2.30.so)\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8696\n\nTest Plan: unable to repro\n\nReviewed By: pdillinger\n\nDifferential Revision: D30505277\n\nPulled By: ajkr\n\nfbshipit-source-id: 5a99f34137cd14d06b0f624add6d37a70a61135d",
        "modified_files_count": 1,
        "modified_files": [
            "db/job_context.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c521f22a1e9aac4bde0831cd7489da1f08ebca35"
    },
    {
        "hash": "1a5eb33d9114e7da2a35c6cb1feaff5cf9971f5c",
        "author": "Peter Dillinger",
        "date": "2021-08-23T15:50:27-07:00",
        "message": "Allow intentionally swallowed errors in BlockBasedFilterBlockReader (#8695)\n\nSummary:\nTo avoid getting \"Didn't get expected error from Get\" from\ncrash test by enabling block-based filter in crash test in https://github.com/facebook/rocksdb/issues/8679.\nBasically, this applies the pattern of IGNORE_STATUS_IF_ERROR in\nfull_filter_block.cc to block_based_filter_block.cc\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8695\n\nTest Plan: watch for resolution of crash test runs\n\nReviewed By: ltamasi\n\nDifferential Revision: D30496748\n\nPulled By: pdillinger\n\nfbshipit-source-id: f7808fcf14c0e787fe81da03fa8303244590d273",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_filter_block.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1a5eb33d9114e7da2a35c6cb1feaff5cf9971f5c"
    },
    {
        "hash": "2e062b222720d45d5a4f99b8de1824a2aae7b0c1",
        "author": "mrambacher",
        "date": "2021-08-23T05:10:13-07:00",
        "message": "Fix LITE build (#8689)\n\nSummary:\nConditional compilation of static functions not used in LITE mode.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8689\n\nReviewed By: ltamasi\n\nDifferential Revision: D30476218\n\nPulled By: mrambacher\n\nfbshipit-source-id: 5f3af90982d34818f47d2cb1d36dd5816d0333a5",
        "modified_files_count": 1,
        "modified_files": [
            "options/customizable_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2e062b222720d45d5a4f99b8de1824a2aae7b0c1"
    },
    {
        "hash": "0729b287e9379a3d66f91e5522126c9e512344a1",
        "author": "Jay Zhuang",
        "date": "2021-08-17T09:06:01-07:00",
        "message": "Exclude property kLiveSstFilesSizeAtTemperature from stress_test (#8668)\n\nSummary:\nJust like other per_level properties.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8668\n\nTest Plan: stress_test\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D30360967\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 70da2557b95c55e8081b04ebf1a909a0fe69488f",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0729b287e9379a3d66f91e5522126c9e512344a1"
    },
    {
        "hash": "a53563d86ec6cca1b60e58e0444d2beda99c689e",
        "author": "Baptiste Lemaire",
        "date": "2021-08-11T16:07:30-07:00",
        "message": "Re-add retired mempurge flag definitions for legacy-options-file temporary support. (#8650)\n\nSummary:\nCurrent internal regression tests pass in an old option flag `experimental_allow_mempurge` to a more recently built db.\nThis flag was retired and removed in a recent PR (https://github.com/facebook/rocksdb/issues/8628), and therefore, the following error comes up : `Failed: Invalid argument: Could not find option: : experimental_allow_mempurge`.\nIn this PR, I reintroduce the two flags retired in https://github.com/facebook/rocksdb/issues/8628, `experimental_allow_mempurge` and `experimental_mempurge_policy` in `db_options.cc` and mark them both as `kDeprecated`.\nThis is a temporary fix to save us time to find a long term solution, which hopefully will consist in ignoring options prefixed with `experimental_` that are no longer recognized.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8650\n\nReviewed By: pdillinger\n\nDifferential Revision: D30257307\n\nPulled By: bjlemaire\n\nfbshipit-source-id: 35303655fd2dd9789fd9e3c450e9d8009f3c1f54",
        "modified_files_count": 1,
        "modified_files": [
            "options/db_options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a53563d86ec6cca1b60e58e0444d2beda99c689e"
    },
    {
        "hash": "f63331ebaf3493fda342da9b0dd86d8ab6c1bbe0",
        "author": "Levi Tamasi",
        "date": "2021-08-10T11:10:07-07:00",
        "message": "Attempt to deflake DBTestXactLogIterator.TransactionLogIteratorCorruptedLog (#8627)\n\nSummary:\nThe patch attempts to deflake `DBTestXactLogIterator.TransactionLogIteratorCorruptedLog`\nby disabling file deletions while retrieving the list of WAL files and truncating the first WAL file.\nThis is to prevent the `PurgeObsoleteFiles` call triggered by `GetSortedWalFiles` from\ninvalidating the result of `GetSortedWalFiles`. The patch also cleans up the test case a bit\nand changes it to using `test::TruncateFile` instead of calling the `truncate` syscall directly.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8627\n\nTest Plan: `make check`\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D30147002\n\nPulled By: ltamasi\n\nfbshipit-source-id: db11072a4ad8900a2f859cb5294e22b1888c23f6",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_log_iter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f63331ebaf3493fda342da9b0dd86d8ab6c1bbe0"
    },
    {
        "hash": "a756fb9c85247fafd6986604ca54f32bafdb1246",
        "author": "Lucian Grijincu",
        "date": "2021-08-09T16:05:46-07:00",
        "message": "rocksdb: don't call LZ4_loadDictHC with null dictionary\n\nSummary: UBSAN revealed a pointer underflow when `LZ4HC_init_internal` is called with a null `start`.\n\nReviewed By: ajkr\n\nDifferential Revision: D30181874\n\nfbshipit-source-id: ca9bbac1a85c58782871d7f153af733b000cc66c",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a756fb9c85247fafd6986604ca54f32bafdb1246"
    },
    {
        "hash": "61f83dfeb7e186d50037ad26d105e0014ad0b23e",
        "author": "Jay Zhuang",
        "date": "2021-08-09T13:44:23-07:00",
        "message": "Add an unittest for tiered storage universal compaction (#8631)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/8631\n\nReviewed By: siying\n\nDifferential Revision: D30200385\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 0fa2bb15e74ff81762d767f234078e0fe0106c55",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/61f83dfeb7e186d50037ad26d105e0014ad0b23e"
    },
    {
        "hash": "052c24a6680c7de4aabf42c9efe24b345dcb18fd",
        "author": "Akanksha Mahajan",
        "date": "2021-08-07T09:21:03-07:00",
        "message": "Fix db_stress failure (#8632)\n\nSummary:\nFaultInjectionTestFS injects error in Rename operation. Because\nof injected error, info.log fails to be created if rename  returns error and info_log is set to nullptr which leads to this assertion\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8632\n\nTest Plan: run the db_stress job locally\n\nReviewed By: ajkr\n\nDifferential Revision: D30167387\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 8d08c4c33e8f0cabd368bbb498d21b9de0660067",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/052c24a6680c7de4aabf42c9efe24b345dcb18fd"
    },
    {
        "hash": "23ffed9cb7433fb86c094069de8886cf39b10505",
        "author": "Andrew Kryczka",
        "date": "2021-08-06T19:06:02-07:00",
        "message": "Prevent joining detached thread in ThreadPoolImpl (#8635)\n\nSummary:\nThis draining mechanism should not be run during `JoinThreads()` because it can detach threads that will be joined. Joining detached threads would throw an exception.\n\nWith this PR, we skip draining when `JoinThreads()` has already decided what threads to `join()`, so the threads will exit naturally once the work queue empties.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8635\n\nTest Plan: verified it unblocked using `WaitForJobsAndJoinAllThreads()` in https://github.com/facebook/rocksdb/issues/8611.\n\nReviewed By: riversand963\n\nDifferential Revision: D30174587\n\nPulled By: ajkr\n\nfbshipit-source-id: 144966398a607987e0763c7152a0f653fdbf3c8b",
        "modified_files_count": 1,
        "modified_files": [
            "util/threadpool_imp.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/23ffed9cb7433fb86c094069de8886cf39b10505"
    },
    {
        "hash": "e95c5700479876e0a361e3999c2bab7c8eeb5430",
        "author": "Zaorang Yang",
        "date": "2021-08-06T15:27:12-07:00",
        "message": "Fix the wrong comment of level compaction cf paths test (#8533)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/8533\n\nReviewed By: ajkr\n\nDifferential Revision: D29718067\n\nfbshipit-source-id: b4b91c9271362e7a7d47ddbaf28f56fb537cc668",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e95c5700479876e0a361e3999c2bab7c8eeb5430"
    },
    {
        "hash": "a074d46a5a83cd1b846089705e88ef14fc727ee9",
        "author": "Akanksha Mahajan",
        "date": "2021-08-04T17:12:58-07:00",
        "message": "Fix clang failure (#8621)\n\nSummary:\nFixed clang failure because of memory leak\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8621\n\nTest Plan: CircleCI clang job\n\nReviewed By: pdillinger\n\nDifferential Revision: D30114337\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 16572b9bcbaa053c2ab7bc1c344148d0e6f8039c",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a074d46a5a83cd1b846089705e88ef14fc727ee9"
    },
    {
        "hash": "c268859aaac3bf9d7ee854d9888ae36e89ccab20",
        "author": "anand76",
        "date": "2021-08-04T15:48:54-07:00",
        "message": "Remove corruption error injection in FaultInjectionTestFS (#8616)\n\nSummary:\n```FaultInjectionTestFS``` injects various types of read errors in ```FileSystem``` APIs. One type of error is corruption errors, where data is intentionally corrupted or truncated. There is corresponding validation in db_stress to verify that an injected error results in a user visible Get/MultiGet error. However, for corruption errors, its hard to know when a corruption is supposed to be detected by the user request, due to prefetching and, in case of direct IO, padding. This results in false positives. So remove that functionality.\n\nBlock checksum validation for Get/MultiGet is confined to ```BlockFetcher```, so we don't lose a lot by disabling this since its a small surface area to test.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8616\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D30074422\n\nPulled By: anand1976\n\nfbshipit-source-id: 6a61fac18f95514c15364b75013799ddf83294df",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/fault_injection_fs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c268859aaac3bf9d7ee854d9888ae36e89ccab20"
    },
    {
        "hash": "8e91bd90d23f4b4b6d646e61deb8e2947f471010",
        "author": "yangzaorang",
        "date": "2021-08-02T17:15:06-07:00",
        "message": "Fix a issue with initializing blob header buffer (#8537)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/8537\n\nReviewed By: ajkr\n\nDifferential Revision: D29838132\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: e3e78d5f85f240a1800ace417a8b634f74488e41",
        "modified_files_count": 1,
        "modified_files": [
            "db/blob/blob_log_sequential_reader.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8e91bd90d23f4b4b6d646e61deb8e2947f471010"
    },
    {
        "hash": "9501279d5fe98b21a6ff41cae43cbb971b25d834",
        "author": "Baptiste Lemaire",
        "date": "2021-07-29T17:23:01-07:00",
        "message": "Create fillanddeleteuniquerandom benchmark (db_bench), with new option flags. (#8593)\n\nSummary:\nIntroduction of a new `fillanddeleteuniquerandom` benchmark (`db_bench`) with 5 new option flags to simulate a benchmark where the following sequence is repeated multiple times:\n\"A set of keys S1 is inserted ('`disposable entries`'), then after some delay another set of keys S2 is inserted ('`persistent entries`') and the first set of keys S1 is deleted. S2 artificially represents the insertion of hypothetical results from some undefined computation done on the first set of keys S1. The next sequence can start as soon as the last disposable entry in the set S1 of this sequence is inserted, if the `delay` is non negligible.\"\nNew flags:\n- `disposable_entries_delete_delay`: minimum delay in microseconds between insertion of the last `disposable` entry, and the start of the insertion of the first `persistent` entry.\n- `disposable_entries_batch_size`: number of `disposable` entries inserted at the beginning of each sequence.\n- `disposable_entries_value_size`: size of the random `value` string for the `disposable` entries.\n- `persistent_entries_batch_size`: number of `persistent` entries inserted at the end of each sequence, right before the deletion of the `disposable` entries starts.\n- `persistent_entries_value_size`: size of the random value string for the `persistent` entries.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8593\n\nReviewed By: pdillinger\n\nDifferential Revision: D29974436\n\nPulled By: bjlemaire\n\nfbshipit-source-id: f578033e5b45e8268ba6fa6f38f4770c2e6e801d",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9501279d5fe98b21a6ff41cae43cbb971b25d834"
    },
    {
        "hash": "2febf1c45c5c34813038a1ae7d2b10013e0bc459",
        "author": "leipeng",
        "date": "2021-07-23T14:31:29-07:00",
        "message": "db_bench_tool.cc: fix copy - paste (#8553)\n\nSummary:\nPR https://github.com/facebook/rocksdb/issues/8519 fix db_bench_tool.cc for MSVC build errors by simply copy-paste, this PR fix the copy-paste while also works for MSVC.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8553\n\nReviewed By: ajkr\n\nDifferential Revision: D29838056\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 0cd60c146b87a355c3dc1061dfe813169d75cea4",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2febf1c45c5c34813038a1ae7d2b10013e0bc459"
    },
    {
        "hash": "4171e3db9ba0e288f27ac242d673cb746f99cb89",
        "author": "leipeng",
        "date": "2021-07-23T11:39:24-07:00",
        "message": "CompactionJob::Install(): fix log truncation (#8563)\n\nSummary:\nevent log info may be truncated, the default buffer size is 512, this PR changes buffer size to 8192.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8563\n\nReviewed By: ajkr\n\nDifferential Revision: D29838229\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 00c5dea3caff0641a209f02c972e92d65b505f50",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4171e3db9ba0e288f27ac242d673cb746f99cb89"
    },
    {
        "hash": "9b41082d4a21a4f8cc8be2c1df84a3ea3b407f3d",
        "author": "sdong",
        "date": "2021-07-21T16:08:53-07:00",
        "message": "Complete the fix of stress open WAL drop fix (#8570)\n\nSummary:\nhttps://github.com/facebook/rocksdb/pull/8548 is not complete. We should instead cover all cases writable files are buffered, not just when failures are ingested. Extend it to any case where failures are ingested in DB open.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8570\n\nTest Plan: Run db_stress and see it doesn't break\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D29830415\n\nfbshipit-source-id: 94449a0468fb2f7eec17423724008c9c63b2445d",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9b41082d4a21a4f8cc8be2c1df84a3ea3b407f3d"
    },
    {
        "hash": "6b4cdacf41fa3565786fc2376210ba59c289e22d",
        "author": "Baptiste Lemaire",
        "date": "2021-07-21T11:33:33-07:00",
        "message": "Add overwrite_probability for filluniquerandom benchmark in db_bench (#8569)\n\nSummary:\nAdd flags `overwrite_probability` and `overwrite_window_size` flag to `db_bench`.\nAdd the possibility of performing a `filluniquerandom` benchmark with an overwrite probability.\nFor each write operation, there is a probability _p_ that the write is an overwrite (_p_=`overwrite_probability`).\nWhen an overwrite is decided, the key is randomly chosen from the last _N_ keys previously inserted into the DB (with _N_=`overwrite_window_size`).\nWhen a pure write is decided, the key inserted into the DB is unique and therefore will not be an overwrite.\nThe `overwrite_window_size` is used so that the user can decide if the overwrite are mostly targeting recently inserted keys (when `overwrite_window_size` is small compared to the total number of writes), or can also target keys inserted \"a long time ago\" (when `overwrite_window_size` is comparable to total number of writes).\nNote that total number of writes = # of unique insertions + # of overwrites.\nNo unit test specifically added.\nLocal testing show the following **throughputs** for `filluniquerandom` with 1M total writes:\n- bypass the code inserts (no `overwrite_probability` flag specified): ~14.0MB/s\n- `overwrite_probability=0.99`, `overwrite_window_size=10`: ~17.0MB/s\n- `overwrite_probability=0.10`, `overwrite_window_size=10`: ~14.0MB/s\n- `overwrite_probability=0.99`, `overwrite_window_size=1M`: ~14.5MB/s\n- `overwrite_probability=0.10`, `overwrite_window_size=1M`: ~14.0MB/s\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8569\n\nReviewed By: pdillinger\n\nDifferential Revision: D29818631\n\nPulled By: bjlemaire\n\nfbshipit-source-id: d472b4ea4e457a4da7c4ee4f14b40cccd6a4587a",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6b4cdacf41fa3565786fc2376210ba59c289e22d"
    },
    {
        "hash": "66ca5ac42744a5f240c56b675c4b590c538b3bd4",
        "author": "Jay Zhuang",
        "date": "2021-07-20T14:59:40-07:00",
        "message": "Cleanup cf handlers before deleting db (#8564)\n\nSummary:\nDelete column family handlers before deleting db to avoid `last_ref`\nassert.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8564\n\nTest Plan: Inject compaction test in db_stress test\n\nReviewed By: pdillinger\n\nDifferential Revision: D29797375\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: e8baf4d279f4db5d963db95c9445454156205501",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/66ca5ac42744a5f240c56b675c4b590c538b3bd4"
    },
    {
        "hash": "bbc85a5f22b0cf4a63cf0f68ecdba16c518e6b64",
        "author": "sdong",
        "date": "2021-07-19T17:08:15-07:00",
        "message": "Fix minor wrong variable name in db_bench (#8549)\n\nSummary:\nFix a minor variable name that is not accurate. This is recently introduced in https://github.com/facebook/rocksdb/pull/7818\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8549\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D29745585\n\nfbshipit-source-id: 6268b348878fdf99a162b2cc3d5876fbd9bb10d9",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bbc85a5f22b0cf4a63cf0f68ecdba16c518e6b64"
    },
    {
        "hash": "f4529a54bba97ca81c83e74c87cf780377096f01",
        "author": "Baptiste Lemaire",
        "date": "2021-07-19T11:19:21-07:00",
        "message": "Add experimental_allow_mempurge flag to benchmark. (#8546)\n\nSummary:\nTiny PR to add the `experimental_allow_mempurge` to the `db_bench` tool (`Mempurge` is the current prototype for memtable garbage collection).\nThis is useful to benchmark the prototype of this new feature, stress test it and help find new meaningful heuristics for GC.\nBy default, the flag to allow `mempurge` is set to `false`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8546\n\nReviewed By: anand1976\n\nDifferential Revision: D29738338\n\nPulled By: bjlemaire\n\nfbshipit-source-id: 01892883a2f1c714c110718674da05992d6e2dd6",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f4529a54bba97ca81c83e74c87cf780377096f01"
    },
    {
        "hash": "5535d06b9c6b24f46132377d08eb59ed8136ddc8",
        "author": "sherriiiliu",
        "date": "2021-07-19T10:35:25-07:00",
        "message": "Fix stats_history_test failure on Windows (#8520)\n\nSummary:\nFixed a stats_history_test failure on Windows\n* In StatsHistoryTest.InMemoryStatsHistoryPurging test, the capping memory cost of stats_history_size on Windows increases to 15000 bytes with latest changes\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8520\n\nReviewed By: ajkr\n\nDifferential Revision: D29734631\n\nPulled By: mrambacher\n\nfbshipit-source-id: 461698fcf22ef06acfb7f7aa86f8415aaffe7f1e",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/stats_history_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5535d06b9c6b24f46132377d08eb59ed8136ddc8"
    },
    {
        "hash": "d5f3b77f23b2fbd887f6af045d5f8785ba4caa9c",
        "author": "Peter Dillinger",
        "date": "2021-07-19T08:10:29-07:00",
        "message": "Add GetMapProperty to db_stress (#8551)\n\nSummary:\nAlready has good coverage for GetProperty and GetIntProperty\nbut this one was missing.\n\nThis should add more confidence to https://github.com/facebook/rocksdb/issues/8538\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8551\n\nTest Plan:\nbrief local run with boosted probability showed no immediate\nissues\n\nReviewed By: siying\n\nDifferential Revision: D29746383\n\nPulled By: pdillinger\n\nfbshipit-source-id: 9f9f525bc1a7607f85e563e33bda1979ef197127",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d5f3b77f23b2fbd887f6af045d5f8785ba4caa9c"
    },
    {
        "hash": "9e885939a356819178e6b51ebb976a4e002eaa05",
        "author": "sdong",
        "date": "2021-07-16T19:28:48-07:00",
        "message": "Change to code for trimmed memtable history is to released outside DB mutex (#8530)\n\nSummary:\nCurrently, the code shows that we delete memtables immedately after it is trimmed from history. Although it should never happen as the super version still holds the memtable, which is only switched after it, it feels a good practice not to do it, but use clean it up in the standard way: put it to WriteContext and clean it after DB mutex.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8530\n\nTest Plan: Run all existing tests.\n\nReviewed By: ajkr\n\nDifferential Revision: D29703410\n\nfbshipit-source-id: 21d8068ac6377de4b6fa7a89697195742659fde4",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9e885939a356819178e6b51ebb976a4e002eaa05"
    },
    {
        "hash": "3455ab0e2bd90fd2faed6fe4dabca795430bfb10",
        "author": "Merlin Mao",
        "date": "2021-07-16T17:05:25-07:00",
        "message": "Remove extra double quote in options.h (#8550)\n\nSummary:\nThere is an extra \"  in options.h (`\"index block\"\"`)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8550\n\nTest Plan: None\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D29746077\n\nPulled By: autopear\n\nfbshipit-source-id: 2e5117296e5414b7c7440d990926bc1e567a0b4f",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3455ab0e2bd90fd2faed6fe4dabca795430bfb10"
    },
    {
        "hash": "1e5b631e514bd5902db9c0f736740bdf1112953c",
        "author": "sdong",
        "date": "2021-07-16T12:28:10-07:00",
        "message": "db_bench seekrandom with multiDB should only create iterators queried (#7818)\n\nSummary:\nRight now, db_bench with seekrandom and multiple DB setup creates iterator for all DBs just to query one of them. It's different from most real workloads. Fix it by only creating iterators that will be queried.\n\nAlso fix a bug that DBs are not destroyed in multi-DB mode.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7818\n\nTest Plan: Run db_bench with single/multiDB X using/not using tailing iterator with ASAN build, and validate the behavior is expected.\n\nReviewed By: ajkr\n\nDifferential Revision: D25720226\n\nfbshipit-source-id: c2ff7ff7120e5ba64287a30b057c5d29b2cbe20b",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1e5b631e514bd5902db9c0f736740bdf1112953c"
    },
    {
        "hash": "b678cb1f8611f4981013c1b01a235652cb48b3c0",
        "author": "zaorangyang",
        "date": "2021-07-15T18:06:50-07:00",
        "message": "The formal parameter types of CompressionOptions constructor should b… (#8510)\n\nSummary:\n…e consistent with the member variables's\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8510\n\nReviewed By: ajkr\n\nDifferential Revision: D29654067\n\nPulled By: mrambacher\n\nfbshipit-source-id: 908baaddfb20c266db7c5aca6a87971393d62ee6",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/advanced_options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b678cb1f8611f4981013c1b01a235652cb48b3c0"
    },
    {
        "hash": "803a40d4123e8447a4b271ff5bb2e582ab45c6ef",
        "author": "longlijian",
        "date": "2021-07-14T16:04:56-07:00",
        "message": "Delete legacy code not used any more. (#8508)\n\nSummary:\nThe removed function in this PR,  just only have declared and dose not have any reference used.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8508\n\nReviewed By: mrambacher\n\nDifferential Revision: D29649033\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: df98143b73d6c184a2a60c9f7ea2548a065ee35d",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/803a40d4123e8447a4b271ff5bb2e582ab45c6ef"
    },
    {
        "hash": "955b80e84f7f17d7242e526acebac8c411fc2f33",
        "author": "bjlemaire",
        "date": "2021-07-12T10:42:14-07:00",
        "message": "Add WARN/INFO for mempurge output status. (#8514)\n\nSummary:\nThe MemPurge output status can either be an Abort if the mempurge is aborted due to the new_mem memtable reaching more than the target capacity (currently 60%), or for other reasons. As a result, in the log, we want to differentiate between an abort status, which in this PR only leads to a ROCKS_LOG_INFO, and any other status, which in this PR leads to a ROCKS_LOG_WARN.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8514\n\nReviewed By: pdillinger\n\nDifferential Revision: D29662446\n\nPulled By: bjlemaire\n\nfbshipit-source-id: c9bec8e238ebc7ecb14fbbddf580e6887e281c16",
        "modified_files_count": 1,
        "modified_files": [
            "db/flush_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/955b80e84f7f17d7242e526acebac8c411fc2f33"
    },
    {
        "hash": "bbdc4f2e9a15e34a96e3bb92f866d3a424002587",
        "author": "Myth",
        "date": "2021-07-12T09:09:09-07:00",
        "message": "Fix a minor issue in checkpoint test case (#8483)\n\nSummary:\nA very simple change :)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8483\n\nReviewed By: ajkr\n\nDifferential Revision: D29558904\n\nPulled By: mrambacher\n\nfbshipit-source-id: bbe68c20c861103726cb6231ca3fb8fbe1e5a546",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/checkpoint/checkpoint_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bbdc4f2e9a15e34a96e3bb92f866d3a424002587"
    },
    {
        "hash": "5afd1e309c6959bf192393e4957e0c83234db4fe",
        "author": "Adam Retter",
        "date": "2021-07-12T05:05:16-07:00",
        "message": "Correct CVS -> CSV typo (#8513)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/8513\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D29654066\n\nPulled By: mrambacher\n\nfbshipit-source-id: b8f492fe21edd37fe1f1c5a4a0e9153f58bbf3e2",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5afd1e309c6959bf192393e4957e0c83234db4fe"
    },
    {
        "hash": "f127d459adddd4d1e381541ac066610df6905f8a",
        "author": "sdong",
        "date": "2021-07-08T10:50:59-07:00",
        "message": "Add comments to options.bottommost_compression (#8415)\n\nSummary:\nAdd comments to options.bottommost_compression for options.num_levels=1\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8415\n\nReviewed By: ajkr\n\nDifferential Revision: D29181997\n\nfbshipit-source-id: 5f0f49470f75d796320ecb24d5dc4ef4eb6fbe0f",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f127d459adddd4d1e381541ac066610df6905f8a"
    },
    {
        "hash": "714ce5041dedbfcaf964e7cf67999921110cd134",
        "author": "Baptiste Lemaire",
        "date": "2021-07-06T18:48:56-07:00",
        "message": "Fix clang_analyzer failure (#8492)\n\nSummary:\nPreviously, the following command:\n```USE_CLANG=1 TEST_TMPDIR=/dev/shm/rocksdb OPT=-g make -j$(nproc) analyze```\nwas raising an error/warning the new_mem could potentially be a `nullptr`. This error appeared due to code changes from https://github.com/facebook/rocksdb/issues/8454, including an if-statement containing \"`... && new_mem != nullptr && ...`\", which made the analyzer believe that past this `if`-statement, a `new_mem==nullptr` was a possible scenario.\nThis code patch simply introduces `assert`s and removes this condition in the `if`-statement.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8492\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D29571275\n\nPulled By: bjlemaire\n\nfbshipit-source-id: 75d72246b70ebbbae7dea11ccb5778686d8bcbea",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/714ce5041dedbfcaf964e7cf67999921110cd134"
    },
    {
        "hash": "df4197ca6e9d70a981e17770239f53dfa51b7a90",
        "author": "anand76",
        "date": "2021-07-06T16:46:16-07:00",
        "message": "Bypass buffer in TestFSWritableFile if direct IO is enabled (#8490)\n\nSummary:\n```TestFSWritableFile``` buffers data in ```Append``` in order to simulate unsynced data loss on crash. This is only required for buffered IO and should be disabled for direct IO. Otherwise, it causes crash tests to assert on the buffer address alignment - ```db_stress: env/io_posix.cc:1194: virtual rocksdb::IOStatus rocksdb::PosixWritableFile::Append(const rocksdb::Slice&, const rocksdb::IOOptions&, rocksdb::IODebugContext*): Assertion `IsSectorAligned(data.data(), GetRequiredBufferAlignment())' failed.```.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8490\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D29565080\n\nPulled By: anand1976\n\nfbshipit-source-id: 682831fd66ed3b9597caa74fc453e22dfaf9b973",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/fault_injection_fs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/df4197ca6e9d70a981e17770239f53dfa51b7a90"
    },
    {
        "hash": "fcd808833342edbb8052d992b6e7ec85986a056c",
        "author": "anand76",
        "date": "2021-07-06T14:16:57-07:00",
        "message": "Temporarily disable file deletion after open failure in db_stress (#8489)\n\nSummary:\nWrite and metadata error injection during DB open was enabled in https://github.com/facebook/rocksdb/issues/8474. This causes crash tests to fail very frequently due to another fault injection feature that deletes files created after the last dir sync during DB open. In real life, a similar failure would happen if the FS returns error on the CURRENT file rename, but the rename actually succeeded and got partially persisted (dir entry for the old CURRENT file got removed, but the entry for the new one is not persisted). Temporarily disable the fault injection feature until we figure out the likelihood of this bug happening and the proper way to fix it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8489\n\nTest Plan: Stress test can open the DB successfully\n\nReviewed By: siying\n\nDifferential Revision: D29564516\n\nPulled By: anand1976\n\nfbshipit-source-id: ffd1650715ea3c5bf7131936b0ca6fcf66f4e14e",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fcd808833342edbb8052d992b6e7ec85986a056c"
    },
    {
        "hash": "b20737709f504ce2d5b619a0e539e9f9b426d47e",
        "author": "Peter (Stig) Edwards",
        "date": "2021-07-01T18:42:19-07:00",
        "message": "Add -report_open_timing to db_bench (#8464)\n\nSummary:\nHello and thanks for RocksDB,\n\nThis PR adds support for ```-report_open_timing true``` to ```db_bench```.\nIt can be useful when tuning RocksDB on filesystem/env with high latencies for file level operations (create/delete/rename...) seen during ```((Optimistic)Transaction)DB::Open```.\n\nSome examples:\n\n```\n> db_bench -benchmarks updaterandom -num 1 -db /dev/shm/db_bench\n> db_bench -benchmarks updaterandom -num 0 -db /dev/shm/db_bench -use_existing_db true -report_open_timing true -readonly true 2>&1 | grep OpenDb\nOpenDb:     3.90133 milliseconds\n> db_bench -benchmarks updaterandom -num 0 -db /dev/shm/db_bench -use_existing_db true -report_open_timing true -use_secondary_db true 2>&1 | grep OpenDb\nOpenDb:     3.33414 milliseconds\n> db_bench -benchmarks updaterandom -num 0 -db /dev/shm/db_bench -use_existing_db true -report_open_timing true 2>&1 | grep -A1 OpenDb\nOpenDb:     6.05423 milliseconds\n\n> db_bench -benchmarks updaterandom -num 1\n> db_bench -benchmarks updaterandom -num 0 -use_existing_db true -report_open_timing true -readonly true 2>&1 | grep OpenDb\nOpenDb:     4.06859 milliseconds\n> db_bench -benchmarks updaterandom -num 0 -use_existing_db true -report_open_timing true -use_secondary_db true 2>&1 | grep OpenDb\nOpenDb:     2.85794 milliseconds\n> db_bench -benchmarks updaterandom -num 0 -use_existing_db true -report_open_timing true 2>&1 | grep OpenDb\nOpenDb:     6.46376 milliseconds\n\n> db_bench -benchmarks updaterandom -num 1 -db /clustered_fs/db_bench\n> db_bench -benchmarks updaterandom -num 0 -db /clustered_fs/db_bench -use_existing_db true -report_open_timing true -readonly true 2>&1 | grep OpenDb\nOpenDb:     3.79805 milliseconds\n> db_bench -benchmarks updaterandom -num 0 -db /clustered_fs/db_bench -use_existing_db true -report_open_timing true -use_secondary_db true 2>&1 | grep OpenDb\nOpenDb:     3.00174 milliseconds\n> db_bench -benchmarks updaterandom -num 0 -db /clustered_fs/db_bench -use_existing_db true -report_open_timing true 2>&1 | grep OpenDb\nOpenDb:     24.8732 milliseconds\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8464\n\nReviewed By: hx235\n\nDifferential Revision: D29398096\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 8f05dc3284f084612a3f30234e39e1c37548f50c",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b20737709f504ce2d5b619a0e539e9f9b426d47e"
    },
    {
        "hash": "d45b8377015a2b09b4d54846fc522c34bcff0474",
        "author": "mrambacher",
        "date": "2021-07-01T11:53:18-07:00",
        "message": "Fix TSAN issue (#8477)\n\nSummary:\nAdded mutex to fix TSAN issue\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8477\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D29517053\n\nPulled By: mrambacher\n\nfbshipit-source-id: 661ccb1f495b7d34874a79e0a3d7aea1123d6047",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d45b8377015a2b09b4d54846fc522c34bcff0474"
    },
    {
        "hash": "a0cbb694217cedf87e5ed10dd32f2053a18a2107",
        "author": "anand76",
        "date": "2021-06-30T13:29:30-07:00",
        "message": "Fix assertion failure when releasing a handle after secondary cache lookup fails (#8470)\n\nSummary:\nWhen the secondary cache lookup fails, we may still allocate a handle and charge the cache for metadata usage. If the cache is full, this can cause the usage to go over capacity. Later, when a (unrelated) handle is released, it trips up an assertion that checks that usage is less than capacity. To prevent this assertion failure, don't charge the cache for a failed secondary cache lookup.\n\nTests:\nRun crash_test\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8470\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D29474713\n\nPulled By: anand1976\n\nfbshipit-source-id: 27191969c95470a7b070d292b458efce71395bf2",
        "modified_files_count": 1,
        "modified_files": [
            "cache/lru_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a0cbb694217cedf87e5ed10dd32f2053a18a2107"
    },
    {
        "hash": "bac399449d0bc8127a2bfb97e78c1ab6356b201c",
        "author": "Andrew Kryczka",
        "date": "2021-06-29T08:40:02-07:00",
        "message": "jemalloc_helper: Limit the mm_malloc.h hack to glibc on linux (#8425)\n\nSummary:\nOriginal author: kraj (https://github.com/facebook/rocksdb/issues/8413)\n\nWe have a hack to ensure clang's `posix_memalign()` hack works to be\ncompatible with glibc's `posix_memalign()` declaration. Our side of the\nhack is irrelevant and should be omitted when not using glibc.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8425\n\nReviewed By: mrambacher\n\nDifferential Revision: D29239029\n\nPulled By: ajkr\n\nfbshipit-source-id: 12b900f50a4823b880a6558f25d8590dbfc0aa26",
        "modified_files_count": 1,
        "modified_files": [
            "port/jemalloc_helper.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bac399449d0bc8127a2bfb97e78c1ab6356b201c"
    },
    {
        "hash": "75741eb0cee59ed9b13f144fc541dcdb3a524d37",
        "author": "Peter (Stig) Edwards",
        "date": "2021-06-24T11:56:51-07:00",
        "message": "Add more ops to: db_bench -report_file_operations (#8448)\n\nSummary:\nHello and thanks for RocksDB,\n\nHere is a PR to add file deletes, renames and ```Flush()```, ```Sync()```, ```Fsync()``` and ```Close()``` to file ops report.\n\nThe reason is to help tune RocksDB options when using an env/filesystem with high latencies for file level (\"metadata\") operations, typically seen during ```DB::Open``` (```db_bench -num 0``` also see https://github.com/facebook/rocksdb/pull/7203 where IOTracing does not trace ```DB::Open```).\n\nBefore:\n```\n> db_bench -benchmarks updaterandom -num 0 -report_file_operations true\n...\nEntries:    0\n...\nNum files opened: 12\nNum Read(): 6\nNum Append(): 8\nNum bytes read: 6216\nNum bytes written: 6289\n```\nAfter:\n```\n> db_bench -benchmarks updaterandom -num 0 -report_file_operations true\n...\nEntries:    0\n...\nNum files opened: 12\nNum files deleted: 3\nNum files renamed: 4\nNum Flush(): 10\nNum Sync(): 5\nNum Fsync(): 1\nNum Close(): 2\nNum Read(): 6\nNum Append(): 8\nNum bytes read: 6216\nNum bytes written: 6289\n```\n\nBefore:\n```\n> db_bench -benchmarks updaterandom -report_file_operations true\n...\nEntries:    1000000\n...\nNum files opened: 18\nNum Read(): 396339\nNum Append(): 1000058\nNum bytes read: 892030224\nNum bytes written: 187569238\n```\nAfter:\n```\n> db_bench -benchmarks updaterandom -report_file_operations true\n...\nEntries:    1000000\n...\nNum files opened: 18\nNum files deleted: 5\nNum files renamed: 4\nNum Flush(): 1000068\nNum Sync(): 9\nNum Fsync(): 1\nNum Close(): 6\nNum Read(): 396339\nNum Append(): 1000058\nNum bytes read: 892030224\nNum bytes written: 187569238\n```\n\nAnother example showing how using ```DB::OpenForReadOnly``` reduces file operations compared to ```((Optimistic)Transaction)DB::Open```:\n\n```\n> db_bench -benchmarks updaterandom -num 1\n> db_bench -benchmarks updaterandom -num 0 -use_existing_db true -readonly true -report_file_operations true\n...\nEntries:    0\n...\nNum files opened: 8\nNum files deleted: 0\nNum files renamed: 0\nNum Flush(): 0\nNum Sync(): 0\nNum Fsync(): 0\nNum Close(): 0\nNum Read(): 13\nNum Append(): 0\nNum bytes read: 374\nNum bytes written: 0\n```\n\n```\n> db_bench -benchmarks updaterandom -num 1\n> db_bench -benchmarks updaterandom -num 0 -use_existing_db true -report_file_operations true\n...\nEntries:    0\n...\nNum files opened: 14\nNum files deleted: 3\nNum files renamed: 4\nNum Flush(): 14\nNum Sync(): 5\nNum Fsync(): 1\nNum Close(): 3\nNum Read(): 11\nNum Append(): 10\nNum bytes read: 7291\nNum bytes written: 7357\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8448\n\nReviewed By: anand1976\n\nDifferential Revision: D29333818\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: a06a8c87f799806462319115195b3e94faf5f542",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/75741eb0cee59ed9b13f144fc541dcdb3a524d37"
    },
    {
        "hash": "3ab0eae86016740d6e405e52cc60d1707e9055a0",
        "author": "Levi Tamasi",
        "date": "2021-06-22T17:34:03-07:00",
        "message": "Deflake BlobDBTest.SnapshotAndGarbageCollection (#8444)\n\nSummary:\nThis test case has been failing occasionally due to automatic\ncompactions kicking in, resulting in GC generating additional\nblob files that the test did not expect. Disabling automatic\ncompactions to get rid of this flakiness.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8444\n\nTest Plan: `gtest-parallel --repeat=1000 ./blob_db_test --gtest_filter=\"BlobDBTest.SnapshotAndGarbageCollection\"`\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D29316987\n\nPulled By: ltamasi\n\nfbshipit-source-id: 9815d189ed7d63890622768675a01990e3680221",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3ab0eae86016740d6e405e52cc60d1707e9055a0"
    },
    {
        "hash": "e9b627fd56d590e53d6ecb126023e6010606a8e5",
        "author": "lorinlee",
        "date": "2021-06-21T13:41:08-07:00",
        "message": "Fix comments in Status (#8429)\n\nSummary:\nSigned-off-by: lorinlee <lorinlee1996@gmail.com>\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8429\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D29256538\n\nPulled By: ajkr\n\nfbshipit-source-id: fa483861148d82119f4c8775d0cf5f6c71b06215",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/status.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e9b627fd56d590e53d6ecb126023e6010606a8e5"
    },
    {
        "hash": "19a89267ca2fdd776d8bdb82e0bc601c307ad10f",
        "author": "mwish",
        "date": "2021-06-18T17:14:51-07:00",
        "message": "typo: fix typo in db/write_thread's state (#8423)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/8423\n\nReviewed By: mrambacher\n\nDifferential Revision: D29232587\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 04d4937cf0605cbf341a920d1305369a7b8f0574",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_thread.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/19a89267ca2fdd776d8bdb82e0bc601c307ad10f"
    },
    {
        "hash": "575ea26ec9000e53aac806b4136467eadb37c68f",
        "author": "anand76",
        "date": "2021-06-17T12:05:40-07:00",
        "message": "Don't log a warning if file system doesn't support ReopenWritableFile() (#8414)\n\nSummary:\nRocksDB logs a warning if WAL truncation on DB open fails. Its possible that on some file systems, truncation is not required and they would return ```Status::NotSupported()``` for ```ReopenWritableFile```. Don't log a warning in such cases.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8414\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D29181738\n\nPulled By: anand1976\n\nfbshipit-source-id: 6e01e9117e1e4c1d67daa4dcee7fa59d06e057a7",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_open.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/575ea26ec9000e53aac806b4136467eadb37c68f"
    },
    {
        "hash": "b788e3f497cabf4125cda7093883a34b561d06e9",
        "author": "mrambacher",
        "date": "2021-06-15T03:46:30-07:00",
        "message": "Increase range for GeneralTableTest.ApproximateOffsetOfCompressed (#8387)\n\nSummary:\nNewer versions of Snappy (1.1 patch 8) were failing this test because the offsets were outside of the expected range.\n\nIn some experiments:\n- On a RH machine with 1.1.0, the offset of \"k04\" and \"xyy\" were 3331 and 6665.\n- On an Ubuntu machine with 1.1.8, the same keys were at 3501 and 7004.\n- On a Mac with 1.1.8, the offsets were 3499 and 7001.\n\nAFAICT, the test environments are either using an older version of Snappy or no Snappy at all.\n\nThis change increases the range to allow the tests to pass.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8387\n\nReviewed By: pdillinger\n\nDifferential Revision: D29064475\n\nPulled By: mrambacher\n\nfbshipit-source-id: fac01927576765b8aff9f57e08a63a2ae210855f",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b788e3f497cabf4125cda7093883a34b561d06e9"
    },
    {
        "hash": "d60ae5b1c7e70efd32c7b8ccd939fa0ecc94e9a2",
        "author": "Jay Zhuang",
        "date": "2021-06-14T08:11:40-07:00",
        "message": "Fix flaky ManualCompactionMax test (#8396)\n\nSummary:\nRecalculate the total size after generate new sst files.\nNew generated files might have different size as the previous time which\ncould cause the test failed.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8396\n\nTest Plan:\n```\ngtest-parallel ./db_compaction_test\n--gtest_filter=DBCompactionTest.ManualCompactionMax -r 1000 -w 100\n```\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D29083299\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 49d4bd619cefc0f9a1f452f8759ff4c2ba1b6fdb",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d60ae5b1c7e70efd32c7b8ccd939fa0ecc94e9a2"
    },
    {
        "hash": "2655477c679aecf4a5555af7e2cc9e988813f197",
        "author": "PiyushDatta",
        "date": "2021-06-01T15:19:21-07:00",
        "message": "Fix \"Interval WAL\" bytes to say GB instead of MB (#8350)\n\nSummary:\nReference: https://github.com/facebook/rocksdb/issues/7201\n\nBefore fix:\n`/tmp/rocksdb_test_file/LOG.old.1622492586055679:Interval WAL: 0 writes, 0 syncs, 0.00 writes per sync, written: 0.00 MB, 0.00 MB/s`\n\nAfter fix:\n`/tmp/rocksdb_test_file/LOG:Interval WAL: 0 writes, 0 syncs, 0.00 writes per sync, written: 0.00 GB, 0.00 MB/s`\n\nTests:\n```\nComputer:jobs running/jobs completed/%of started jobs/Average seconds to complete\nETA: 0s Left: 0 AVG: 0.05s  local:0/7720/100%/0.0s\nrm -rf /dev/shm/rocksdb.CLRh\n/usr/bin/python3 tools/check_all_python.py\nNo syntax errors in 34 .py files\n/usr/bin/python3 tools/ldb_test.py\nRunning testCheckConsistency...\n.Running testColumnFamilies...\n.Running testCountDelimDump...\n.Running testCountDelimIDump...\n.Running testDumpLiveFiles...\n.Running testDumpLoad...\nWarning: 7 bad lines ignored.\n.Running testGetProperty...\n.Running testHexPutGet...\n.Running testIDumpBasics...\n.Running testIngestExternalSst...\n.Running testInvalidCmdLines...\n.Running testListColumnFamilies...\n.Running testManifestDump...\n.Running testMiscAdminTask...\nSequence,Count,ByteSize,Physical Offset,Key(s)\n.Running testSSTDump...\n.Running testSimpleStringPutGet...\n.Running testStringBatchPut...\n.Running testTtlPutGet...\n.Running testWALDump...\n.\n----------------------------------------------------------------------\nRan 19 tests in 15.945s\n\nOK\nsh tools/rocksdb_dump_test.sh\nmake check-format\nmake[1]: Entering directory '/home/piydatta/Documents/rocksdb'\n$DEBUG_LEVEL is 1\nMakefile:176: Warning: Compiling in debug mode. Don't use the resulting binary in production\nbuild_tools/format-diff.sh -c\nChecking format of uncommitted changes...\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8350\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D28790567\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: dcb1e4c124361156435122f21f0a288335b2c8c8",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2655477c679aecf4a5555af7e2cc9e988813f197"
    },
    {
        "hash": "dfa6b408fea2f39d3403b4d044e558c16b6462c5",
        "author": "sdong",
        "date": "2021-05-26T18:23:03-07:00",
        "message": "Improve comments of iterate_upper_bound (#8331)\n\nSummary:\nReadOptions.iterate_upper_bound's comment is confusing. Improve it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8331\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D28696635\n\nfbshipit-source-id: 7d9fa6fd1642562572140998c89d434058db8dda",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dfa6b408fea2f39d3403b4d044e558c16b6462c5"
    },
    {
        "hash": "a607b88240c1499e31eb8ee6ead3fc45fc2a7e93",
        "author": "sdong",
        "date": "2021-05-24T12:46:38-07:00",
        "message": "SequenceIterWrapper should use internal comparator (#8328)\n\nSummary:\nhttps://github.com/facebook/rocksdb/pull/8288 introduces a bug: SequenceIterWrapper should do next for seek key using internal key comparator rather than user comparator. Fix it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8328\n\nTest Plan: Pass all existing tests\n\nReviewed By: ltamasi\n\nDifferential Revision: D28647263\n\nfbshipit-source-id: 4081d684fd8a86d248c485ef8a1563c7af136447",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_iterator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a607b88240c1499e31eb8ee6ead3fc45fc2a7e93"
    },
    {
        "hash": "55853de661ce476281170ec90306b944df2234d9",
        "author": "Jay Zhuang",
        "date": "2021-05-21T19:06:47-07:00",
        "message": "Fix clang-analyze: use uninitiated variable (#8325)\n\nSummary:\nError:\n```\ndb/db_compaction_test.cc:5211:47: warning: The left operand of '*' is a garbage value\nuint64_t total = (l1_avg_size + l2_avg_size * 10) * 10;\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8325\n\nTest Plan: `$ make analyze`\n\nReviewed By: pdillinger\n\nDifferential Revision: D28620916\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: f6d58ab84eefbcc905cda45afb9522b0c6d230f8",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/55853de661ce476281170ec90306b944df2234d9"
    },
    {
        "hash": "94b4faa0f1eafdadd76d6ce5ed98f42a05770216",
        "author": "Jay Zhuang",
        "date": "2021-05-20T09:29:57-07:00",
        "message": "Deflake ExternalSSTFileTest.PickedLevelBug (#8307)\n\nSummary:\nThe test want to make sure these's no compaction during `AddFile`\n(between `DBImpl::AddFile:MutexLock` and `DBImpl::AddFile:MutexUnlock`)\nbut the mutex could be unlocked by `EnterUnbatched()`.\nMove the lock start point after bumping the ingest file number.\n\nAlso fix the dead lock when ASSERT fails.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8307\n\nReviewed By: ajkr\n\nDifferential Revision: D28479849\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: b3c50f66aa5d5f59c5c27f815bfea189c4cd06cb",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/94b4faa0f1eafdadd76d6ce5ed98f42a05770216"
    },
    {
        "hash": "871a2cb292a53ab7d30273c9d36e1e5bc0bcafb9",
        "author": "sdong",
        "date": "2021-05-19T10:59:02-07:00",
        "message": "Fix test issue in new env_test tests (#8319)\n\nSummary:\nThe two new tests added to env_test don't clear sync points, so if tests are run in continuous mode, rather than parallel mode, the next test will trigger previous sync point and fail. Fix it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8319\n\nTest Plan: Run the tests in continuous mode which used to fail and see them passing.\n\nReviewed By: pdillinger\n\nDifferential Revision: D28542562\n\nfbshipit-source-id: 4052d487635188fe68a2a9df4b03d97b23f96720",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/871a2cb292a53ab7d30273c9d36e1e5bc0bcafb9"
    },
    {
        "hash": "ce0fc71adf5b767694d3c2d7f3125792110f75bf",
        "author": "sdong",
        "date": "2021-05-19T10:28:08-07:00",
        "message": "Minor improvements in env_test (#8317)\n\nSummary:\nFix typo in comments in env_test and add PermitUncheckedError() to two statuses.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8317\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D28525093\n\nfbshipit-source-id: 7a1ed3e45b6f500b8d2ae19fa339c9368111e922",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ce0fc71adf5b767694d3c2d7f3125792110f75bf"
    },
    {
        "hash": "d76c46e6a0b756f1cde6bfb86fe032437be6f805",
        "author": "Andrew Kryczka",
        "date": "2021-05-12T15:49:05-07:00",
        "message": "Deflake TransactionStressTest.ExpiredTransactionDataRace1 (#8258)\n\nSummary:\nWe saw the `Commit()` fail with \"Operation expired\" so apparently the\nexpiration time is too short. Increased the magnitude of the times in\nthis test to make flakiness less likely.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8258\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D28177033\n\nPulled By: ajkr\n\nfbshipit-source-id: 0357acee6cc14c104b6ccd39231a683a606ab130",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d76c46e6a0b756f1cde6bfb86fe032437be6f805"
    },
    {
        "hash": "7f3a0f5bc6f4aeb4a41265d3812671985e9e36ca",
        "author": "sdong",
        "date": "2021-05-05T16:41:45-07:00",
        "message": "db_stress: wait for compaction to finish after open with failure injection (#8270)\n\nSummary:\nWhen injecting in DB open, error can happen in background threads, causing DB open succeed, but DB is soon made read-only and subsequence writes will fail, which is not expected. To prevent it from happening, wait for compaction to finish before serving the traffic. If there is a failure, reopen.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8270\n\nTest Plan: Run the test.\n\nReviewed By: ajkr\n\nDifferential Revision: D28230537\n\nfbshipit-source-id: e2e97888904f9b9bb50c35ccf95b88c2319ef5c3",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7f3a0f5bc6f4aeb4a41265d3812671985e9e36ca"
    },
    {
        "hash": "c2a3424de52a1a17a97273b47c5828c6e037b625",
        "author": "Andrew Kryczka",
        "date": "2021-05-04T11:02:59-07:00",
        "message": "Deflake DBTest.L0L1L2AndUpHitCounter (#8259)\n\nSummary:\nPreviously we saw flakes on platforms like arm on CircleCI, such as the following:\n\n```\nNote: Google Test filter = DBTest.L0L1L2AndUpHitCounter\n[==========] Running 1 test from 1 test case.\n[----------] Global test environment set-up.\n[----------] 1 test from DBTest\n[ RUN      ] DBTest.L0L1L2AndUpHitCounter\ndb/db_test.cc:5345: Failure\nExpected: (TestGetTickerCount(options, GET_HIT_L0)) > (100), actual: 30 vs 100\n[  FAILED  ] DBTest.L0L1L2AndUpHitCounter (150 ms)\n[----------] 1 test from DBTest (150 ms total)\n\n[----------] Global test environment tear-down\n[==========] 1 test from 1 test case ran. (150 ms total)\n[  PASSED  ] 0 tests.\n[  FAILED  ] 1 test, listed below:\n[  FAILED  ] DBTest.L0L1L2AndUpHitCounter\n```\n\nThe test was totally non-deterministic, e.g., flush/compaction timing would affect how many files on each level. Furthermore, it depended heavily on platform-specific details, e.g., by having a 32KB memtable, it could become full with a very different number of entries depending on the platform.\n\nThis PR rewrites the test to build a deterministic LSM with one file per level.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8259\n\nReviewed By: mrambacher\n\nDifferential Revision: D28178100\n\nPulled By: ajkr\n\nfbshipit-source-id: 0a03b26e8d23c29d8297c1bccb1b115dce33bdcd",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c2a3424de52a1a17a97273b47c5828c6e037b625"
    },
    {
        "hash": "0db4cde6e2f79f7e5af91dd5fed26d5201e0ec93",
        "author": "anand76",
        "date": "2021-04-28T12:29:33-07:00",
        "message": "Fix a memory leak in c_test (#8237)\n\nSummary:\nDon't call ```rocksdb_cache_disown_data()``` as it causes the memory allocated for ```shards_``` to be leaked.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8237\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D28039061\n\nPulled By: anand1976\n\nfbshipit-source-id: c3464efe2c006b93b4be87030116a12a124598c4",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0db4cde6e2f79f7e5af91dd5fed26d5201e0ec93"
    },
    {
        "hash": "c2c7d5e91656e56168bbc258b7ab58180165b174",
        "author": "Mr-Leshiy",
        "date": "2021-04-26T10:13:55-07:00",
        "message": "Fix cast-function-type warning (#8230)\n\nSummary:\nFixing cast-function-type which is appears during the following build:\n```bash\ncmake ..  -DFAIL_ON_WARNINGS=ON -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ -DCMAKE_SYSTEM_NAME=Windows\nmake rocksdb\n```\nHere is the log:\n```\n/home/leshiy/Work/rocksdb/port/win/env_win.cc: In constructor ‘rocksdb::port::WinClock::WinClock()’:\n/home/leshiy/Work/rocksdb/port/win/env_win.cc:92:9: error: cast between incompatible function types from ‘FARPROC’ {aka ‘long long int (*)()’} to ‘rocksdb::port::WinClock::FnGetSystemTimePreciseAsFileTime’ {aka ‘void (*)(_FILETIME*)’} [-Werror=cast-function-type]\n   92 |         (FnGetSystemTimePreciseAsFileTime)GetProcAddress(\n      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   93 |             module, \"GetSystemTimePreciseAsFileTime\");\n      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ncc1plus: all warnings being treated as errors\nmake[2]: *** [CMakeFiles/rocksdb.dir/build.make:4337: CMakeFiles/rocksdb.dir/port/win/env_win.cc.obj] Error 1\nmake[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/rocksdb.dir/all] Error 2\nmake: *** [Makefile:91: all] Error 2\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8230\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D28000215\n\nPulled By: mrambacher\n\nfbshipit-source-id: 874782cf48f70470e3fbd9097585bf42e810ca61",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c2c7d5e91656e56168bbc258b7ab58180165b174"
    },
    {
        "hash": "cc1c3ee54eace876ad18c39f931e8e5039823930",
        "author": "Saketh Are",
        "date": "2021-04-23T12:45:02-07:00",
        "message": "Eliminate double-buffering of keys in block_based_table_builder (#8219)\n\nSummary:\nThe block_based_table_builder buffers some blocks in memory to construct a good compression dictionary. Before this commit, the keys from each block were buffered separately for convenience. However, the buffered block data implicitly contains all keys. This commit eliminates the redundant key buffers and reduces memory usage.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8219\n\nReviewed By: ajkr\n\nDifferential Revision: D27945851\n\nPulled By: saketh-are\n\nfbshipit-source-id: caf3cac1217201e080a1e24b542bedf20973afee",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cc1c3ee54eace876ad18c39f931e8e5039823930"
    },
    {
        "hash": "2e5de5a2c31e9fd694e8e83a5333b97c4a4aac29",
        "author": "Andrew Gallagher",
        "date": "2021-04-20T14:57:27-07:00",
        "message": "Cleanup include (#8208)\n\nSummary:\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8208\n\nMake include of \"file_system.h\" use the same include path as everywhere\nelse.\n\nReviewed By: riversand963, akankshamahajan15\n\nDifferential Revision: D27881606\n\nfbshipit-source-id: fc1e076229fde21041a813c655ce017b5070c8b3",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/fault_injection_fs.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2e5de5a2c31e9fd694e8e83a5333b97c4a4aac29"
    },
    {
        "hash": "c377c2ba154f28600faaa2f52f20b4a496df9cea",
        "author": "Akanksha Mahajan",
        "date": "2021-04-18T16:18:35-07:00",
        "message": "Fix flaky test BackupableDBTest.FileSizeForIncremental (#8197)\n\nSummary:\nTest was flaky because for kUseDbSessionId naming, blob files use\nnaming scheme kLegacyCrc32cAndFileSize. So expected number of files\nbecause of collision can vary. So disabling blobdb for this test case.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8197\n\nReviewed By: pdillinger\n\nDifferential Revision: D27836997\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 5eb21a5f4acae3d6b730a9e1b207264fbc18cb80",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c377c2ba154f28600faaa2f52f20b4a496df9cea"
    },
    {
        "hash": "00803d619c2713e7e8c6514ef900930cfa3d028f",
        "author": "Akanksha Mahajan",
        "date": "2021-04-15T20:18:57-07:00",
        "message": "Fix flaky failure in DBSSTest.DBWithSstFileManagerForBlobFilesWithGC (#8196)\n\nSummary:\nUpdated the test to wait until all trash files are deleted by\nSSTFileManager in the background. Since deletion runs in background so\nnumber of files deleted might not always be as expected.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8196\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D27812273\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: d3ace1db34f91254b52fa455e09844d02801f58e",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/00803d619c2713e7e8c6514ef900930cfa3d028f"
    },
    {
        "hash": "b1f62be10e7ab0e632b42ff5c51b2d1d476af21f",
        "author": "Yanqin Jin",
        "date": "2021-04-14T23:40:22-07:00",
        "message": "Use the right level (L0) for files written during WAL recovery (#8187)\n\nSummary:\nAs the name of `DBImpl::WriteLevel0TableForRecovery` suggests, the resulting table file\nshould be placed on L0. However, the argument `level` passed to `BuildTable()` is -1.\n\nWe need to correct this since the level information will be useful to determine file placement.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8187\n\nTest Plan: make check\n\nReviewed By: ltamasi\n\nDifferential Revision: D27748570\n\nPulled By: riversand963\n\nfbshipit-source-id: e1cd23128a8de31f14b1edc2ea92754c154e4f10",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_open.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b1f62be10e7ab0e632b42ff5c51b2d1d476af21f"
    },
    {
        "hash": "728e5f575076033b343b976ec0fef7bf3ba43c35",
        "author": "David Carlier",
        "date": "2021-04-09T10:37:01-07:00",
        "message": "db_bench_tool: basic sys infos for FreeBSD. (#8169)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/8169\n\nReviewed By: riversand963\n\nDifferential Revision: D27672457\n\nPulled By: ajkr\n\nfbshipit-source-id: b40a7ad5d09a754154f28c2574ef9f77c8a131bb",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/728e5f575076033b343b976ec0fef7bf3ba43c35"
    },
    {
        "hash": "c4d0e66d65209e6eb1b6cf3e99bd963c5195e9ac",
        "author": "sunby",
        "date": "2021-04-06T11:55:14-07:00",
        "message": "Remove check for status returned by `InvalidatePageCache` (#8156)\n\nSummary:\nFailures in `InvalidatePageCache` will change the API contract. So we remove the status check for `InvalidatePageCache` in `SstFileWriter::Add()`, `SstFileWriter::Finish` and `Rep::DeleteRange`\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8156\n\nReviewed By: riversand963\n\nDifferential Revision: D27597012\n\nPulled By: ajkr\n\nfbshipit-source-id: 2872051695d50cc47ed0f2848dc582464c00076f",
        "modified_files_count": 1,
        "modified_files": [
            "table/sst_file_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c4d0e66d65209e6eb1b6cf3e99bd963c5195e9ac"
    },
    {
        "hash": "2d8518f5ea3e313beb23e21c72bc54b633f6a2d6",
        "author": "Yanqin Jin",
        "date": "2021-04-06T11:31:17-07:00",
        "message": "Reset pinnable slice before using it in Get() (#8154)\n\nSummary:\nFixes https://github.com/facebook/rocksdb/issues/6548.\nIf we do not reset the pinnable slice before calling get, we will see the following assertion failure\nwhile running the test with multiple column families.\n```\ndb_bench: ./include/rocksdb/slice.h:168: void rocksdb::PinnableSlice::PinSlice(const rocksdb::Slice&, rocksdb::Cleanable*): Assertion `!pinned_' failed.\n```\nThis happens in `BlockBasedTable::Get()`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8154\n\nTest Plan:\n./db_bench --benchmarks=fillseq -num_column_families=3\n./db_bench --benchmarks=readrandom -use_existing_db=1 -num_column_families=3\n\nReviewed By: ajkr\n\nDifferential Revision: D27587589\n\nPulled By: riversand963\n\nfbshipit-source-id: 7379e7649ba40f046d6a4014c9ad629cb3f9a786",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2d8518f5ea3e313beb23e21c72bc54b633f6a2d6"
    },
    {
        "hash": "b2c48a570f36a91715deca3a62a7def310d651c8",
        "author": "darionyaphet",
        "date": "2021-04-06T00:31:53-07:00",
        "message": "Support cpu_write_nanos and cpu_read_nanos in IOStatsContext (#8149)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/8149\n\nReviewed By: ajkr\n\nDifferential Revision: D27571017\n\nPulled By: riversand963\n\nfbshipit-source-id: a73427e907a7cb899debf55d60a2ede726695277",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/iostats_context.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b2c48a570f36a91715deca3a62a7def310d651c8"
    },
    {
        "hash": "88c8f7a090186baa41321bf8f14d7ef8f5da5e3c",
        "author": "David Carlier",
        "date": "2021-04-06T00:28:47-07:00",
        "message": "stack trace freebsd update. using native api to get the process (#8144)\n\nSummary:\nfull name.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8144\n\nReviewed By: ajkr\n\nDifferential Revision: D27581146\n\nPulled By: riversand963\n\nfbshipit-source-id: 7d4cbde02a07aa4676e35aeb60c3d6f1f492a3cd",
        "modified_files_count": 1,
        "modified_files": [
            "port/stack_trace.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/88c8f7a090186baa41321bf8f14d7ef8f5da5e3c"
    },
    {
        "hash": "96205baa63f2b38774fccd5586d086c7cd24e71e",
        "author": "Peter Dillinger",
        "date": "2021-04-05T11:40:31-07:00",
        "message": "Likely fix flaky TableFileCorruptedBeforeBackup (#8151)\n\nSummary:\nBefore corrupting a file in the DB and expecting corruption to\nbe detected, open DB read-only to ensure file is not made obsolete by\ncompaction. Also, to avoid obsolete files not yet deleted, only select\nlive files to corrupt.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8151\n\nTest Plan: watch CI\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D27568849\n\nPulled By: pdillinger\n\nfbshipit-source-id: 39a69a2eafde0482b20a197949d24abe21952f27",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/96205baa63f2b38774fccd5586d086c7cd24e71e"
    },
    {
        "hash": "dd3fbbbf956499ad8aa6986b3bef545226fcf201",
        "author": "Yanqin Jin",
        "date": "2021-04-03T11:48:56-07:00",
        "message": "Use separate db dir for different tests hoping to remove flakiness (#8147)\n\nSummary:\nDBWALTestWithParam relies on `SstFileManager` to have the expected behavior. However, if this test shares\ndb directories with other DBSSTTest, then the SstFileManager may see non-empty data, thus will change its\nbehavior to be different from expectation, introducing flakiness.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8147\n\nTest Plan: make check\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D27553362\n\nPulled By: riversand963\n\nfbshipit-source-id: a2d86343e8e2220bc553b6695ce87dd21a97ddec",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dd3fbbbf956499ad8aa6986b3bef545226fcf201"
    },
    {
        "hash": "0fccc6225ea0aece510f13c52cbff8085fdadaae",
        "author": "Peter Dillinger",
        "date": "2021-04-02T13:38:04-07:00",
        "message": "Fix db_test2 parallelism (#8145)\n\nSummary:\nWith thread/process-specific dirs. (Errors seen in FB infra.)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8145\n\nTest Plan: see in FB infra tests\n\nReviewed By: riversand963\n\nDifferential Revision: D27542355\n\nPulled By: pdillinger\n\nfbshipit-source-id: b3c8e66f91a6a6b3a775f6fc0c3cf71e63c29ade",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0fccc6225ea0aece510f13c52cbff8085fdadaae"
    },
    {
        "hash": "5025c7ec09fcaf323c04bbbcf340bb7f4aa6aed6",
        "author": "rockeet",
        "date": "2021-04-01T11:28:54-07:00",
        "message": "version_set_test.cc: remove a redundent obj copy (#7880)\n\nSummary:\nRemove redundant obj copy\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7880\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D26921119\n\nPulled By: riversand963\n\nfbshipit-source-id: f227da688b067870a069e728a67799a8a95fee99",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5025c7ec09fcaf323c04bbbcf340bb7f4aa6aed6"
    },
    {
        "hash": "a3a943bf6369f8c5330be6efe8dbf2f84adf5ba6",
        "author": "darionyaphet",
        "date": "2021-03-31T19:13:10-07:00",
        "message": "Merge checks into one (#8138)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/8138\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D27475616\n\nPulled By: riversand963\n\nfbshipit-source-id: d2815eed578a90c53d6a4e0dc4aaa232516eb4f8",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_ingestion_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a3a943bf6369f8c5330be6efe8dbf2f84adf5ba6"
    },
    {
        "hash": "335c5a6be54f0306c1570e5076cb0f667ace822b",
        "author": "Zhichao Cao",
        "date": "2021-03-30T21:44:44-07:00",
        "message": "Fix error_handler_fs_test failure due to statistics (#8136)\n\nSummary:\nFix error_handler_fs_test failure due to statistics, it will fails due to multi-thread running and resume is different.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8136\n\nTest Plan: make check\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D27448828\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: b94255c45e9e66e93334b5ca2e4e1bfcba23fc20",
        "modified_files_count": 1,
        "modified_files": [
            "db/error_handler_fs_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/335c5a6be54f0306c1570e5076cb0f667ace822b"
    },
    {
        "hash": "9418403c4ba7954e837d318b931e631b36dbb709",
        "author": "Jay Zhuang",
        "date": "2021-03-30T16:51:26-07:00",
        "message": "Unittest uses unique test db name (#8124)\n\nSummary:\nthread_id is only unique within a process. If we run the same test-set with multiple processes, it could cause db path collision between 2 runs, error message will be like:\n```\n...\nIO error: While lock file: /tmp/rocksdbtest-501//deletefile_test_8093137327721791717/LOCK: Resource temporarily unavailable\n...\n```\nThis is could be likely reproduced by:\n```\ngtest-parallel ./deletefile_test --gtest_filter=DeleteFileTest.BackgroundPurgeCFDropTest -r 1000 -w 1000\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8124\n\nReviewed By: ajkr\n\nDifferential Revision: D27435195\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 850fc72cdb660edf93be9a1ca9327008c16dd720",
        "modified_files_count": 1,
        "modified_files": [
            "test_util/testharness.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9418403c4ba7954e837d318b931e631b36dbb709"
    },
    {
        "hash": "04191e1c5d84adcb6ee85a795354e6cae9555e82",
        "author": "Imanol-Mikel Barba Sabariego",
        "date": "2021-03-29T20:47:21-07:00",
        "message": "Adding safer permissions to PosixFilesystem::NewLogger (#8106)\n\nSummary:\nWe have observed rocksdb databases creating info log files with world-writeable permissions.\n\nThe reason why the file is created like so is because stdio streams opened with fopen calls use mode 0666, and while normally most systems have a umask of 022, in some occasions (for instance, while running daemons), you may find that the application is running with a less restrictive umask. The result is that when opening the DB, the LOG file would be created with world-writeable perms:\n\n```\n$ ls -lh db/\ntotal 6.4M\n-rw-r--r-- 1 ibarba users  115 Mar 24 17:41 000004.log\n-rw-r--r-- 1 ibarba users   16 Mar 24 17:41 CURRENT\n-rw-r--r-- 1 ibarba users   37 Mar 24 17:41 IDENTITY\n-rw-r--r-- 1 ibarba users    0 Mar 24 17:41 LOCK\n-rw-rw-r-- 1 ibarba users 114K Mar 24 17:41 LOG\n-rw-r--r-- 1 ibarba users  514 Mar 24 17:41 MANIFEST-000003\n-rw-r--r-- 1 ibarba users  31K Mar 24 17:41 OPTIONS-000018\n-rw-r--r-- 1 ibarba users  31K Mar 24 17:41 OPTIONS-000020\n```\n\nThis diff replaces the fopen call with a regular open() call restricting mode, and then using fdopen to associate an stdio stream with that file descriptor. Resulting in the following files being created:\n\n```\n-rw-r--r-- 1 ibarba users   58 Mar 24 18:16 000004.log\n-rw-r--r-- 1 ibarba users   16 Mar 24 18:16 CURRENT\n-rw-r--r-- 1 ibarba users   37 Mar 24 18:16 IDENTITY\n-rw-r--r-- 1 ibarba users    0 Mar 24 18:16 LOCK\n-rw-r--r-- 1 ibarba users 111K Mar 24 18:16 LOG\n-rw-r--r-- 1 ibarba users  514 Mar 24 18:16 MANIFEST-000003\n-rw-r--r-- 1 ibarba users  31K Mar 24 18:16 OPTIONS-000018\n-rw-r--r-- 1 ibarba users  31K Mar 24 18:16 OPTIONS-000020\n```\n\nWith the correct permissions\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8106\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D27415377\n\nPulled By: mrambacher\n\nfbshipit-source-id: 97ac6c215700a7ea306f4a1fdf9fcf64a3cbb202",
        "modified_files_count": 1,
        "modified_files": [
            "env/fs_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/04191e1c5d84adcb6ee85a795354e6cae9555e82"
    },
    {
        "hash": "25ae380784b127b3d3c4f64b82829a7ce7a520c1",
        "author": "kshair",
        "date": "2021-03-29T10:37:24-07:00",
        "message": "Fix comment spelling (#7960)\n\nSummary:\nterated -> treated\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7960\n\nReviewed By: ajkr\n\nDifferential Revision: D26677005\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 6221305afb263aa60f674a4113aa30cb8f3914e6",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/memtablerep.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/25ae380784b127b3d3c4f64b82829a7ce7a520c1"
    },
    {
        "hash": "1be386768951d1f4f117a82aa61d52518ebdff77",
        "author": "mrambacher",
        "date": "2021-03-29T10:34:54-07:00",
        "message": "Fix check in db_bench for num shard bits to match check in LRUCache (#8110)\n\nSummary:\nThe check in db_bench for table_cache_numshardbits was 0 < bits <= 20, whereas the check in LRUCache was 0 < bits < 20.  Changed the two values to match to avoid a crash in db_bench on a null cache.\n\nFixes https://github.com/facebook/rocksdb/issues/7393\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8110\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D27353522\n\nPulled By: mrambacher\n\nfbshipit-source-id: a414bd23b5bde1f071146b34cfca5e35c02de869",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1be386768951d1f4f117a82aa61d52518ebdff77"
    },
    {
        "hash": "70e80c91b6168cdbd9c63cf5ad9c8ba32cf493f1",
        "author": "yaphet",
        "date": "2021-03-29T10:32:10-07:00",
        "message": "fix typo (#8118)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/8118\n\nReviewed By: ajkr\n\nDifferential Revision: D27367488\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 6ed598c74ab9232f2e56326b3a30476d473699d7",
        "modified_files_count": 1,
        "modified_files": [
            "file/random_access_file_reader.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/70e80c91b6168cdbd9c63cf5ad9c8ba32cf493f1"
    },
    {
        "hash": "0a5d23944de1dac7a9ee1ab5247f6c1646f84188",
        "author": "darionyaphet",
        "date": "2021-03-26T21:31:16-07:00",
        "message": "use the pointer directly (#8095)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/8095\n\nReviewed By: riversand963\n\nDifferential Revision: D27318295\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: a014fbd28fdd7a26648da19a766dc00d2de9fdc8",
        "modified_files_count": 1,
        "modified_files": [
            "file/random_access_file_reader_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0a5d23944de1dac7a9ee1ab5247f6c1646f84188"
    },
    {
        "hash": "ce6de862c1e487072931e1c231ad4732f2b67f18",
        "author": "Jay Zhuang",
        "date": "2021-03-26T18:46:38-07:00",
        "message": "Avoid checking errno on success call (#8119)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/8119\n\nReviewed By: sushilpa\n\nDifferential Revision: D27365407\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 327c09bf76834ce0be4287680640adc8b88bcec2",
        "modified_files_count": 1,
        "modified_files": [
            "env/fs_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ce6de862c1e487072931e1c231ad4732f2b67f18"
    },
    {
        "hash": "c5f52714fb6327af28a9357531cb4b36d9b67802",
        "author": "anand76",
        "date": "2021-03-26T15:51:34-07:00",
        "message": "Use malloc in rocksdb_transaction_get_snapshot (#8114)\n\nSummary:\nThe snapshot structure returned by rocksdb_transaction_get_snapshot is\nsupposed to be freed by calling rocksdb_free(), so allocate using malloc\nrather than new. Fixes https://github.com/facebook/rocksdb/issues/6112\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8114\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D27362923\n\nPulled By: anand1976\n\nfbshipit-source-id: e93a8b1ffe26dafbe22529907f72b796ae971214",
        "modified_files_count": 1,
        "modified_files": [
            "db/c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c5f52714fb6327af28a9357531cb4b36d9b67802"
    },
    {
        "hash": "7f27767efaa172483d81ae5d8bff45c6432fcb98",
        "author": "Zhichao Cao",
        "date": "2021-03-26T12:49:00-07:00",
        "message": "Remove disabled tests (#8123)\n\nSummary:\nRemove disabled tests\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8123\n\nTest Plan: make check\n\nReviewed By: ltamasi\n\nDifferential Revision: D27367066\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 71fa1d492d9b0144decff0a1d0e0ef25c0ecc4ba",
        "modified_files_count": 1,
        "modified_files": [
            "db/error_handler_fs_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7f27767efaa172483d81ae5d8bff45c6432fcb98"
    },
    {
        "hash": "06bb45a65a5f59fb76d4efcad42b2b05feb89760",
        "author": "junhan lee",
        "date": "2021-03-26T11:49:32-07:00",
        "message": "fix typo (#8088)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/8088\n\nReviewed By: ajkr\n\nDifferential Revision: D27270378\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 05af12c63855d00cc57bab9866fc8193c03a404e",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/06bb45a65a5f59fb76d4efcad42b2b05feb89760"
    },
    {
        "hash": "da6b90ab48851c375e90b0e88b36ae43057715df",
        "author": "Peter Dillinger",
        "date": "2021-03-23T21:42:40-07:00",
        "message": "Improve bloom_test bits_per_key flag (#8093)\n\nSummary:\nImproved handling of -bits_per_key other than 10, but at least\nthe OptimizeForMemory test is simply not designed for generally handling\nother settings. (ribbon_test does have a statistical framework for this\nkind of testing, but it's not important to do that same for Bloom right\nnow.)\n\nCloses https://github.com/facebook/rocksdb/issues/7019\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8093\n\nTest Plan: for I in `seq 1 20`; do ./bloom_test --gtest_filter=-*OptimizeForMemory* --bits_per_key=$I &> /dev/null || echo FAILED; done\n\nReviewed By: mrambacher\n\nDifferential Revision: D27275875\n\nPulled By: pdillinger\n\nfbshipit-source-id: 7362e8ac2c41ea11f639412e4f30c8b375f04388",
        "modified_files_count": 1,
        "modified_files": [
            "util/bloom_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/da6b90ab48851c375e90b0e88b36ae43057715df"
    },
    {
        "hash": "41e554da2bc059c9d1c1425f5de9e12dcb3434e8",
        "author": "Akanksha Mahajan",
        "date": "2021-03-23T17:38:52-07:00",
        "message": "Fix Race condition in db_sst_test (#8092)\n\nSummary:\nFix race condition in\nDBSSTTest.DBWithMaxSpaceAllowedWithBlobFiles where background flush\nthread updates delete_blob_file but in test thread Flush() already\ncompletes after getting bg_error and delete_blob_file remains false.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8092\n\nTest Plan: Ran ASAN job few times on CircleCI\n\nReviewed By: riversand963\n\nDifferential Revision: D27275815\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 2939ad1671403881573bbe07c71aa474c5019130",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/41e554da2bc059c9d1c1425f5de9e12dcb3434e8"
    },
    {
        "hash": "8dc6d8c74845538480e81b5e4995dbf626ce107a",
        "author": "Zhichao Cao",
        "date": "2021-03-23T15:12:03-07:00",
        "message": "Added append with checksum handoff API to hdfs (#8084)\n\nSummary:\nAdded append with checksum handoff API to hdfs\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8084\n\nTest Plan: make check\n\nReviewed By: ajkr\n\nDifferential Revision: D27237823\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 93b38db23b1811a6daa049afb89240089ec6f67c",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_hdfs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8dc6d8c74845538480e81b5e4995dbf626ce107a"
    },
    {
        "hash": "2a12b80769448ad44a69252f1990dd20068defd8",
        "author": "Yanqin Jin",
        "date": "2021-03-23T10:28:04-07:00",
        "message": "Fix a compilation error in CircleCI vs2019 CXX20 (#8090)\n\nSummary:\nAs title.\nAlways specify namespace::symbol_name...\nTest plan\nCircleCI and other CI results\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8090\n\nReviewed By: ltamasi\n\nDifferential Revision: D27256130\n\nPulled By: riversand963\n\nfbshipit-source-id: b9b9ae2b3a8b4a16f0384292e71c6aecca93c570",
        "modified_files_count": 1,
        "modified_files": [
            "third-party/folly/folly/synchronization/DistributedMutex-inl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2a12b80769448ad44a69252f1990dd20068defd8"
    },
    {
        "hash": "d6052d381e2d947fdcdd741d26c221990f4f9864",
        "author": "Yanqin Jin",
        "date": "2021-03-22T12:29:21-07:00",
        "message": "Remove duplicate code (#8079)\n\nSummary:\nThe implementation of TransactionDB::WrapDB() and\nTransactionDB::WrapStackableDB() are almost identical, except for the\ntype of the first argument `db`. This PR adds a new template function in\nanonymous namespace, and calls it in the above two functions.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8079\n\nTest Plan: make check\n\nReviewed By: lth\n\nDifferential Revision: D27184575\n\nPulled By: riversand963\n\nfbshipit-source-id: f2855a6db3a7e897d0d611f7050ca4b696c56a7a",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/pessimistic_transaction_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d6052d381e2d947fdcdd741d26c221990f4f9864"
    },
    {
        "hash": "c8b0842bcd0991614cdfdb546635ef3e6d00a153",
        "author": "storagezhang",
        "date": "2021-03-19T12:13:59-07:00",
        "message": "Remove unused variable (#8067)\n\nSummary:\nRemove unused variable `Slice blob_to_write` in `db/blob/blob_file_cache_test.cc`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8067\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D27107693\n\nPulled By: riversand963\n\nfbshipit-source-id: 9bfd4d296a6a1714ad5c1fa5bb231a0c52dbd56d",
        "modified_files_count": 1,
        "modified_files": [
            "db/blob/blob_file_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c8b0842bcd0991614cdfdb546635ef3e6d00a153"
    },
    {
        "hash": "c70632420861b161a35cd7b8d3163160c279bfc4",
        "author": "storagezhang",
        "date": "2021-03-19T11:57:52-07:00",
        "message": "Add default in switch (#8065)\n\nSummary:\nswitch may not cover all branch in `db/c.cc`:\n\n```c++\nvoid rocksdb_options_set_access_hint_on_compaction_start(\n    rocksdb_options_t* opt, int v) {\n  switch(v) {\n    case 0:\n      opt->rep.access_hint_on_compaction_start =\n          ROCKSDB_NAMESPACE::Options::NONE;\n      break;\n    case 1:\n      opt->rep.access_hint_on_compaction_start =\n          ROCKSDB_NAMESPACE::Options::NORMAL;\n      break;\n    case 2:\n      opt->rep.access_hint_on_compaction_start =\n          ROCKSDB_NAMESPACE::Options::SEQUENTIAL;\n      break;\n    case 3:\n      opt->rep.access_hint_on_compaction_start =\n          ROCKSDB_NAMESPACE::Options::WILLNEED;\n      break;\n  }\n}\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8065\n\nReviewed By: riversand963\n\nDifferential Revision: D27102892\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: ad1d20d192712878e61597311ba75b55df0066d7",
        "modified_files_count": 1,
        "modified_files": [
            "db/c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c70632420861b161a35cd7b8d3163160c279bfc4"
    },
    {
        "hash": "063a68b9cd9e66727bde1e59f17aba53c0ae03db",
        "author": "Yanqin Jin",
        "date": "2021-03-18T14:43:34-07:00",
        "message": "Check and handle failure in ldb (#8072)\n\nSummary:\nCurrently, a few ldb commands do not check the execution result of\ndatabase operations. This PR checks the execution results and tries to\nimprove the error reporting.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8072\n\nTest Plan:\n```\nmake check\n```\nand\n```\nASSERT_STATUS_CHECKED=1 make -j20 ldb\npython tools/ldb_test.py\n```\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D27152466\n\nPulled By: riversand963\n\nfbshipit-source-id: b94220496a4b3591b61c1d350f665860a6579f30",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/063a68b9cd9e66727bde1e59f17aba53c0ae03db"
    },
    {
        "hash": "b8f40f7f7beafb70195b1600011e704d67f592c3",
        "author": "Andrew Kryczka",
        "date": "2021-03-14T20:25:42-07:00",
        "message": "Deflake tests of compaction based on compensated file size (#8036)\n\nSummary:\nCompactionDeletionTriggerReopen was observed to be flaky recently:\nhttps://app.circleci.com/pipelines/github/facebook/rocksdb/6030/workflows/787af4f3-b9f7-4645-8e8d-1fb0ebf05539/jobs/101451.\n\nI went through it and the related tests and arrived at different\nconclusions on what constraints we can expect on DB size. Some\nconstraints got looser and some got tighter. The particular constraint\nthat flaked got a lot looser so at least the flake linked above would have been prevented.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8036\n\nReviewed By: riversand963\n\nDifferential Revision: D26862566\n\nPulled By: ajkr\n\nfbshipit-source-id: 3512b86b4fb41aeecae32e1c7382c03916d88d88",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b8f40f7f7beafb70195b1600011e704d67f592c3"
    },
    {
        "hash": "119dda2195827e8ce635bf602914e1d96d4a52e1",
        "author": "Peter Dillinger",
        "date": "2021-03-12T12:31:29-08:00",
        "message": "Instantiate tests DBIteratorTestForPinnedData (#8051)\n\nSummary:\na trial gtest upgrade discovered some parameterized tests missing instantiation. By some miracle, they still pass.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8051\n\nTest Plan: thisisthetest\n\nReviewed By: mrambacher\n\nDifferential Revision: D27003684\n\nPulled By: pdillinger\n\nfbshipit-source-id: cde1cab1551fb282f67d462d46574bd30bd5e61f",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iterator_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/119dda2195827e8ce635bf602914e1d96d4a52e1"
    },
    {
        "hash": "7a3444bf1f17f909188ed0dccf210a7301a2717d",
        "author": "David CARLIER",
        "date": "2021-03-10T09:05:56-08:00",
        "message": "Mac M1 crc32 intrinsics ARM64 check support proposal (#7893)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7893\n\nReviewed By: ajkr\n\nDifferential Revision: D26050966\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 9df2bb65d82defd7fad49d5369979b03e22d39c2",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c_arm64.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7a3444bf1f17f909188ed0dccf210a7301a2717d"
    },
    {
        "hash": "6fad38ebe8e8126febb83bb629c55b261731d6ec",
        "author": "qinzuoyan",
        "date": "2021-03-09T20:53:33-08:00",
        "message": "Fix compile error (#7908)\n\nSummary:\nOS: Ubuntu 14.04\nCompiler: GCC 4.9.4\nCompile error:\n```\ndb/forward_iterator.cc:996:62: error: declaration of ‘key’ shadows a member of 'this' [-Werror=shadow]\n   auto cmp = [&](const FileMetaData* f, const Slice& key) -> bool {\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7908\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D26899986\n\nPulled By: ajkr\n\nfbshipit-source-id: 66b0b97aefd0f13a085e063491f8207366a9f848",
        "modified_files_count": 1,
        "modified_files": [
            "db/forward_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6fad38ebe8e8126febb83bb629c55b261731d6ec"
    },
    {
        "hash": "d2e9eab1ea16d40cafe037c3313c6ee99b381ca1",
        "author": "kshair",
        "date": "2021-03-09T01:19:18-08:00",
        "message": "Fix mis-spelling (#8001)\n\nSummary:\nconcurrnet -> concurrent\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8001\n\nReviewed By: ajkr\n\nDifferential Revision: D26659381\n\nPulled By: riversand963\n\nfbshipit-source-id: 890d102d1cf836ed3b183da66d3d56a3158017d0",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/memtablerep.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d2e9eab1ea16d40cafe037c3313c6ee99b381ca1"
    },
    {
        "hash": "02974c94375771e472505d23e9af2baab4ccec73",
        "author": "jsteemann",
        "date": "2021-03-08T21:33:15-08:00",
        "message": "make PerfStepTimer struct smaller by reordering members (#7931)\n\nSummary:\nOn x86_64, this makes the struct 8 bytes smaller, so creating a PerfStepTimer on the stack will use slightly less stack space.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7931\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D26529470\n\nPulled By: ajkr\n\nfbshipit-source-id: bbe2e843167152ffa05a5946f1add6621c9849f7",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/perf_step_timer.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/02974c94375771e472505d23e9af2baab4ccec73"
    },
    {
        "hash": "0ff0b625a11544951bb2a4060aed424f15babf25",
        "author": "Andrew Kryczka",
        "date": "2021-03-08T14:47:56-08:00",
        "message": "Deflake DBTest2.PartitionedIndexUserToInternalKey on ppc64le (#8044)\n\nSummary:\nFor some reason I still cannot figure out, the manual flush in this test\nwas sometimes producing a third tiny file. I saw it a bunch of times on\nppc64le, but even running a qemu system with that architecture (and\nplaying with various other options) could not repro. However we did get\nan instrumented Travis run to confirm the problem is indeed a third tiny\nfile - https://travis-ci.org/github/facebook/rocksdb/jobs/761986592. We\ncan avoid it by filling memtables less full and using manual flush.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/8044\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D26892635\n\nPulled By: ajkr\n\nfbshipit-source-id: 775c04176931cf01d07cc78fb82cfe3a11beebcf",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ff0b625a11544951bb2a4060aed424f15babf25"
    },
    {
        "hash": "c370d8aa12352d46bc03e8d634d5ad28bd300668",
        "author": "Yanqin Jin",
        "date": "2021-02-25T23:07:31-08:00",
        "message": "Remove unused/incorrect fwd declaration (#8002)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/8002\n\nReviewed By: anand1976\n\nDifferential Revision: D26659354\n\nPulled By: riversand963\n\nfbshipit-source-id: 6b464dbea9fd8240ead8cc5af393f0b78e8f9dd1",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c370d8aa12352d46bc03e8d634d5ad28bd300668"
    },
    {
        "hash": "daca92c17ae7d89fa34f7aeb58fbae22938eb226",
        "author": "Andrew Kryczka",
        "date": "2021-02-22T17:43:03-08:00",
        "message": "Pick samples for compression dictionary using prime number (#7987)\n\nSummary:\nThe sample selection technique taken in https://github.com/facebook/rocksdb/issues/7970 was problematic\nbecause it had two code paths for sample selection depending on the\nnumber of data blocks, and one of those code paths involved an\nallocation. Using prime numbers, we can consolidate into one code path\nwithout allocation. The downside is there will be values of N (number of\ndata blocks buffered) that suffer from poor spread in the selected\nsamples.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7987\n\nTest Plan: `make check -j48`\n\nReviewed By: pdillinger\n\nDifferential Revision: D26586147\n\nPulled By: ajkr\n\nfbshipit-source-id: 62028e54336fadb6e2c7a7fe6747daa05a263d32",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/daca92c17ae7d89fa34f7aeb58fbae22938eb226"
    },
    {
        "hash": "6790a983eb8fa8e934045c89ef05a60de0237780",
        "author": "Akanksha Mahajan",
        "date": "2021-02-20T19:13:55-08:00",
        "message": "Fix for ASSERT_STATUS_CHECKED test failure (#7985)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7985\n\nTest Plan: CircleCI ASSERT_STATUS_CHECKED test\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D26568446\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: bd0ab41f485942e313d82ce3895ce53e0967ba98",
        "modified_files_count": 1,
        "modified_files": [
            "tools/trace_analyzer_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6790a983eb8fa8e934045c89ef05a60de0237780"
    },
    {
        "hash": "cf14cb3e29d41097e34c911d2fe531c6ed60dc53",
        "author": "Max Neunhoeffer",
        "date": "2021-02-19T13:47:25-08:00",
        "message": "Avoid self-move-assign in pop operation of binary heap. (#7942)\n\nSummary:\nThe current implementation of a binary heap in `util/heap.h` does a move-assign in the `pop` method. In the case that there is exactly one element stored in the heap, this ends up being a self-move-assign. This can cause trouble with certain classes, which are not prepared for this. Furthermore, it trips up the glibc STL debugger (`-D_GLIBCXX_DEBUG`), which produces an assertion failure in this case.\n\nThis PR addresses this problem by not doing the (unnecessary in this case) move-assign if there is only one element in the heap.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7942\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D26528739\n\nPulled By: ajkr\n\nfbshipit-source-id: 5ca570e0c4168f086b10308ad766dff84e6e2d03",
        "modified_files_count": 1,
        "modified_files": [
            "util/heap.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cf14cb3e29d41097e34c911d2fe531c6ed60dc53"
    },
    {
        "hash": "ad25b1afb98294551a997fc7969d7d6ed58fb200",
        "author": "vrqq",
        "date": "2021-02-18T16:34:10-08:00",
        "message": "Update win_logger.cc : assert failed when return value not checked. (-DROCKSDB_ASSERT_STATUS_CHECKED) (#7955)\n\nSummary:\nIgnore return value on WinLogger::CloseInternal() when build with -DROCKSDB_ASSERT_STATUS_CHECKED on windows.\n\nIt's a good way to ignore check here?\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7955\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D26524145\n\nPulled By: ajkr\n\nfbshipit-source-id: f2f643e94cde9772617c68b658fb529fffebd8ce",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/win_logger.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ad25b1afb98294551a997fc7969d7d6ed58fb200"
    },
    {
        "hash": "69877ac4f2a7a5f1c2c27accbc3551568951c957",
        "author": "Zaiyang Li",
        "date": "2021-02-18T15:51:54-08:00",
        "message": "c:h export rocksdb_transactiondb_open_column_families (#7967)\n\nSummary:\nHi, I noticed a bug in rocksdb C API, where a function is not exported and created a fix.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7967\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D26505722\n\nPulled By: ajkr\n\nfbshipit-source-id: 05d676dbd59ec87fe32322cda9e39e405b07178d",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/69877ac4f2a7a5f1c2c27accbc3551568951c957"
    },
    {
        "hash": "8a05c21e32862cc30811550d446d5eb25fdf127f",
        "author": "Wilfried Goesgens",
        "date": "2021-02-18T12:25:35-08:00",
        "message": "add string separation while composing error message (#7919)\n\nSummary:\nThis will fix a missing string separation between `msg[n]` and `state_`.\nExample of an error message how its looking now:\n```\nIO error: No space left on deviceWhile appending to file: /home/willi/src/stable-3.7/tmp/arangosh_CL6EFQ/shell_client/single1/data/engine-rocksdb/126426.sst: No space left on device\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7919\n\nReviewed By: ajkr\n\nDifferential Revision: D26242246\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 5d9a0997a410aecfb3781478e57395d3d937bb84",
        "modified_files_count": 1,
        "modified_files": [
            "util/status.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8a05c21e32862cc30811550d446d5eb25fdf127f"
    },
    {
        "hash": "6a85aea5b1f62a447b2e413ee9c49be04c36a4d8",
        "author": "Akanksha Mahajan",
        "date": "2021-02-17T19:35:57-08:00",
        "message": "Bug fix for status overridden by Status::NotFound in db_impl_readonly (#7972)\n\nSummary:\nBug fix for status returned being overridden by Status::NotFound in\nDBImpl::OpenForReadOnlyCheckExistence. This was casuing some service\nowners to misinterpret the actual error and take appropriate steps.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7972\n\nReviewed By: riversand963\n\nDifferential Revision: D26499598\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 05e9fedbe2a2e0e53135760f8ff578a2816d2b8e",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_readonly.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6a85aea5b1f62a447b2e413ee9c49be04c36a4d8"
    },
    {
        "hash": "9df78a94f181545dfb1d867dbf11cdf11723c7f6",
        "author": "Jay Zhuang",
        "date": "2021-02-15T09:45:23-08:00",
        "message": "Disable flaky error_handler_fs_test that could hang (#7964)\n\nSummary:\nThe test is hang on https://github.com/facebook/rocksdb/blob/95013df278f399c5fb39aaee2b11f5b987c6e951/db/error_handler_fs_test.cc#L947\nSeems db.mutex_ is lock twice in the test:\nhttps://github.com/facebook/rocksdb/blob/cf160b98e1a9bd7b45f115337a923e6b6da7d9c2/db/db_impl/db_impl_compaction_flush.cc#L3208\nhttps://github.com/facebook/rocksdb/blob/0a9a05ae12943b1529ef1eabbca5ce5a71c986bf/db/db_impl/db_impl.cc#L469\nAs it's just a test issue, disable it for now until the test is fixed.\n\nThe hang could be reproduced by:\n`gtest-parallel ./error_handler_fs_test --gtest_filter=DBErrorHandlingFSTest.CompactionWriteFileScopeError -r 1000`\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7964\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D26447325\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 72f6a346458e059d10e9cc3347bd6bde040cf89e",
        "modified_files_count": 1,
        "modified_files": [
            "db/error_handler_fs_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9df78a94f181545dfb1d867dbf11cdf11723c7f6"
    },
    {
        "hash": "14fbb43f3ee938421b08cd634533a56ae4d3bdf2",
        "author": "David CARLIER",
        "date": "2021-02-10T12:56:44-08:00",
        "message": "db_bench: dump cpu info for Mac. (#7932)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7932\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D26316480\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 3e002e49fcb7f60bc9270550a6b3e182fe197551",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/14fbb43f3ee938421b08cd634533a56ae4d3bdf2"
    },
    {
        "hash": "e3183eae77bc272cff93799117d0d748d80c1512",
        "author": "sdong",
        "date": "2021-02-05T22:50:45-08:00",
        "message": "Stress test to allow memtable whole key filter (#7937)\n\nSummary:\nRight now, stress test cannot be configured to use memtable whole key filter without prefix filter. It doesn't appear to be necessary. remove this constraint.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7937\n\nTest Plan: \"make crash_test\" to be able to run.\n\nReviewed By: ltamasi\n\nDifferential Revision: D26295532\n\nfbshipit-source-id: 30c874a9dc2b672a460603a4ee32368674e0face",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e3183eae77bc272cff93799117d0d748d80c1512"
    },
    {
        "hash": "4fba83b4c27f7d5861a657c1b60495a387ac487a",
        "author": "Levi Tamasi",
        "date": "2021-02-05T15:41:48-08:00",
        "message": "Fix db_bench_tool_test (#7935)\n\nSummary:\nThe patch fixes the build for `db_bench_tool_test` and makes the tests pass.\nNamely, it fixes the following issues:\n\n* https://github.com/facebook/rocksdb/issues/7703 removed the member variable `fs_` but the test case `OptionsFileMultiLevelUniversal`\nwas not updated.\n* https://github.com/facebook/rocksdb/issues/7344 fixed the `OptionsFile` test case for the case when Snappy is *not* available but at the\nsame time broke it for the case when it *is* available. (The test used a default-constructed\n`ColumnFamilyOptions` object, and the default value of the `compression` option is either\nSnappy or no compression depending on whether Snappy is supported.)\n* The test used `google::ParseCommandLineFlags` instead of\n`GFLAGS_NAMESPACE::ParseCommandLineFlags`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7935\n\nTest Plan: Ran the test both with and without Snappy support.\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D26269765\n\nPulled By: ltamasi\n\nfbshipit-source-id: b7303d8a981ab299d22ab540e0cbd12d149ed9bb",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4fba83b4c27f7d5861a657c1b60495a387ac487a"
    },
    {
        "hash": "cbf38af7051a57d3a80ec797c2af13eb5cc1b9d1",
        "author": "Deepak Ojha",
        "date": "2021-02-05T12:40:52-08:00",
        "message": "Wal recovery failure with encryption due to zero bytes WAL size. (#7924)\n\nSummary:\nFixes issue https://github.com/facebook/rocksdb/issues/7410\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7924\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D26216805\n\nPulled By: ajkr\n\nfbshipit-source-id: 5720635ee06003269bfaf8c8616b3671974b08a8",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_encryption.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cbf38af7051a57d3a80ec797c2af13eb5cc1b9d1"
    },
    {
        "hash": "108e6b6354af1687b2e9b66914a843545fb611bf",
        "author": "Zhichao Cao",
        "date": "2021-02-02T10:52:28-08:00",
        "message": "Return Status::OK for unimplemented write batch handler in trace analyzer (#7910)\n\nSummary:\nThe unimplemented handler will return Status::InvalidArgument() and caused issues when using trace analyzer for write batch record. Override with returning Status::OK()\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7910\n\nTest Plan: tested with real trace, make check\n\nReviewed By: siying\n\nDifferential Revision: D26154327\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: bcdefd4891f839b2e89e4c079f9f430245f482fb",
        "modified_files_count": 1,
        "modified_files": [
            "tools/trace_analyzer_tool.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/108e6b6354af1687b2e9b66914a843545fb611bf"
    },
    {
        "hash": "c6ff4c0b70d249d265307607e5a677961a3f2f58",
        "author": "Jay Zhuang",
        "date": "2021-01-26T17:02:03-08:00",
        "message": "Fix deadlock in `fs_test.WALWriteRetryableErrorAutoRecover1` (#7897)\n\nSummary:\nThe recovery thread could hold the db.mutex, which is needed from sync\nwrite in main thread.\nMake sure the write is done before recovery thread starts.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7897\n\nTest Plan: `gtest-parallel ./error_handler_fs_test --gtest_filter=DBErrorHandlingFSTest.WALWriteRetryableErrorAutoRecover1 -r 10000 --workers=200`\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D26082933\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 226fc49228c0e5903f86ff45cc3fed3080abdb1f",
        "modified_files_count": 1,
        "modified_files": [
            "db/error_handler_fs_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c6ff4c0b70d249d265307607e5a677961a3f2f58"
    },
    {
        "hash": "4ee991b1e64194dfcfc4ca2ea063a045df814174",
        "author": "anand76",
        "date": "2021-01-26T11:12:22-08:00",
        "message": "Cleanup multiple DBs after running db_bench in multi-DB mode (#7891)\n\nSummary:\nCurrently, db_bench cleanup only deletes the main DB, if there's one.\nMultiple DBs that are opened when --num_multi_db is specified are not\ndeleted, which can lead to crashes due to running compaction threads on\nprocess exit.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7891\n\nTest Plan: Run regression test\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D26049914\n\nPulled By: anand1976\n\nfbshipit-source-id: acef2821001ca5e208a96a6a273c724e56353316",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4ee991b1e64194dfcfc4ca2ea063a045df814174"
    },
    {
        "hash": "9425acacce56468a177cafbe5bfb940fcb97519b",
        "author": "Jay Zhuang",
        "date": "2021-01-26T11:00:12-08:00",
        "message": "Fix flaky `error_handler_fs_test.MultiDBCompactionError` (#7896)\n\nSummary:\nThe error recovery thread may out-live DBImpl object, which causing\naccess released DBImpl.mutex. Close SstFileManager before closing DB.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7896\n\nTest Plan:\nthe issue can be reproduced by adding sleep in recovery code.\nPass the tests with sleep.\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D26076655\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 0d9cc5639c12fcfc001427015e75a9736f33cd96",
        "modified_files_count": 1,
        "modified_files": [
            "db/error_handler_fs_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9425acacce56468a177cafbe5bfb940fcb97519b"
    },
    {
        "hash": "d5f5d6579a498fd923024b14bd66e1ca9a7aa347",
        "author": "Adam Retter",
        "date": "2021-01-21T08:39:42-08:00",
        "message": "Fix compilation against musl lib C (#7875)\n\nSummary:\nSee https://github.com/percona/PerconaFT/pull/450\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7875\n\nReviewed By: ajkr\n\nDifferential Revision: D25938020\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 9014dbc7b23bf92c5e63bfbdda4565bb0d2f2b58",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/lock/range/range_tree/lib/portability/toku_pthread.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d5f5d6579a498fd923024b14bd66e1ca9a7aa347"
    },
    {
        "hash": "4db58bcfb25460e4e9a5c87be2631463c57c889b",
        "author": "Vladimir Maksimovski",
        "date": "2021-01-19T13:47:48-08:00",
        "message": "Fix write-ahead log file size overflow (#7870)\n\nSummary:\nThe WAL's file size is stored as an unsigned 64 bit integer.\n\nIn db_info_dumper.cc, this integer gets converted to a string. Since 2^64 is approximately 10^19, we need 20 digits to represent the integer correctly. To store the decimal representation, we need 21 bytes (+1 due to the '\\0' terminator at the end). The code previously used 16 bytes, which would overflow if the log is really big (>1 petabyte).\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7870\n\nReviewed By: ajkr\n\nDifferential Revision: D25938776\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 6ee9e21ebd65d297ea90fa1e7e74f3e1c533299d",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_info_dumper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4db58bcfb25460e4e9a5c87be2631463c57c889b"
    },
    {
        "hash": "5b748b9e68d03bd310c7abfe054173a776a81bf3",
        "author": "Andrew Kryczka",
        "date": "2021-01-16T04:28:50-08:00",
        "message": "Cover all status codes in `Status::ToString()` (#7872)\n\nSummary:\n- Completed the switch statement for all possible `Code` values (the only one missing was `kCompactionTooLarge`).\n- Removed the default case so compiler can alert us if a new value is added to `Code` without handling it in `Status::ToString()`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7872\n\nTest Plan:\nverified the log message for this scenario looks right\n\n```\n2021/01/15-17:26:34.564450 7fa6845fe700 [ERROR] [/db_impl/db_impl_compaction_flush.cc:2621] Waiting after background compaction error: Compaction too large: , Accumulated background error counts: 1\n```\n\nReviewed By: ramvadiv\n\nDifferential Revision: D25934539\n\nPulled By: ajkr\n\nfbshipit-source-id: 2e0b3c0d993e356a4987276d6f8a163f0ee8be7a",
        "modified_files_count": 1,
        "modified_files": [
            "util/status.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5b748b9e68d03bd310c7abfe054173a776a81bf3"
    },
    {
        "hash": "acc9679cda37743a629921034cee2dfba6f5ce7c",
        "author": "Otto Kekäläinen",
        "date": "2021-01-15T20:07:39-08:00",
        "message": "Fix various spelling errors still found in code (#7785)\n\nSummary:\ndont -> don't\nrefered -> referred\n\nMerging this would allow to decrease the size of the downstream patch at https://salsa.debian.org/mariadb-team/mariadb-10.5/-/blob/master/debian/patches/fix-spelling.patch\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7785\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D25761408\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 290406ef2a3b05a3daeedbe3b20a00798ef581e7",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/cache.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/acc9679cda37743a629921034cee2dfba6f5ce7c"
    },
    {
        "hash": "2fb6d9337f824788f2967a5ea951d46c8ca4503c",
        "author": "darionyaphet",
        "date": "2021-01-15T16:56:41-08:00",
        "message": "Using emplace_back replace push_back (#7568)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7568\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D24437383\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 7c9b3c4944b959aa7796c53b410c2b1055dc5641",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2fb6d9337f824788f2967a5ea951d46c8ca4503c"
    },
    {
        "hash": "eccc47e81c34e8676daf178adbab6ac0d035f347",
        "author": "Jay Zhuang",
        "date": "2021-01-11T10:17:57-08:00",
        "message": "Fix tsan options_test (#7845)\n\nSummary:\nMinor tsan issue that counter could be bumped concurrently:\nhttps://app.circleci.com/pipelines/github/facebook/rocksdb/5431/workflows/79312c7c-5815-4f07-8836-94625db8e33e/jobs/81619\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7845\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D25851472\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 74cc8797ac503413bec27a30e5d1f055379777e8",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eccc47e81c34e8676daf178adbab6ac0d035f347"
    },
    {
        "hash": "b2e30bdb67debfdd2ac7a092b9037b9c5878426e",
        "author": "Cheng Chang",
        "date": "2021-01-07T23:02:55-08:00",
        "message": "Get manifest size again after getting min_log_num during checkpoint (#7836)\n\nSummary:\nCurrently, manifest size is determined before getting min_log_num.\n\nBut between getting manifest size and getting min_log_num, concurrently, a flush might succeed, which will write new records to manifest to make some WALs become outdated, then min_log_num will be correspondingly increased, but the new records in manifest will not be copied into the checkpoint because the manifest's size is determined before them, then the newly outdated WALs will still exist in the checkpoint's manifest, but they are not linked/copied to the checkpoint because their log number is < min_log_num, so a corruption of missing WAL will be reported when restoring from the checkpoint.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7836\n\nTest Plan: make crash_test\n\nReviewed By: ajkr\n\nDifferential Revision: D25788204\n\nPulled By: cheng-chang\n\nfbshipit-source-id: a4e5acf30f08270b3c0a95304ff559a9e655252f",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/checkpoint/checkpoint_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b2e30bdb67debfdd2ac7a092b9037b9c5878426e"
    },
    {
        "hash": "8f7b6c833907010908273dc88affb25c52f5d543",
        "author": "DreaMer963",
        "date": "2021-01-06T19:28:38-08:00",
        "message": "fix typo (#7832)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7832\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D25785459\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 78658dcb5a5f24141395046f74d7d57f11ad0868",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/fault_injection_fs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8f7b6c833907010908273dc88affb25c52f5d543"
    },
    {
        "hash": "5792b73fdc7ce2a61e8be85f7371802254223d88",
        "author": "Zhichao Cao",
        "date": "2021-01-06T13:18:00-08:00",
        "message": "Fixed the swallowed IOStatus in Compaction Job introduced in PR 7718 (#7838)\n\nSummary:\nThe IOStatus of TableBuilder is returned by copy the io status from builder->io_status(). pr https://github.com/facebook/rocksdb/issues/7718 swallowed the io status and it will cause the write IO error become non-retryable and no auto resume logic will handle it. Roll back to previous implementation.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7838\n\nTest Plan: make check\n\nReviewed By: ajkr\n\nDifferential Revision: D25795387\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: bc35e69e0b71aa4148a6ed76f073357041b8e372",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5792b73fdc7ce2a61e8be85f7371802254223d88"
    },
    {
        "hash": "0bad2b4308ff833795ebb9e0d2fe7f5444236e05",
        "author": "mrambacher",
        "date": "2021-01-04T11:08:28-08:00",
        "message": "Ignore the OnAddFile Status for SSTFileManager (#7826)\n\nSummary:\nThe returned Status is ignored here as some stress tests are failing, presumably when attempting to add an empty file.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7826\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D25742931\n\nfbshipit-source-id: a1fcd620d9472993a009929306dfc421f93eb43b",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0bad2b4308ff833795ebb9e0d2fe7f5444236e05"
    },
    {
        "hash": "61e324422ed4071eb78a0d47d551a1ef89d7a0c4",
        "author": "Andrew Kryczka",
        "date": "2021-01-04T10:46:24-08:00",
        "message": "fix thread status synchronization in thread_list_test (#7825)\n\nSummary:\nThe test was flaky because the BG threads could increase\n`running_count_` up to `job_count_` before applying their thread status\nupdates. Then the test thread would see non-deterministic results when\ncounting threads with each status. The fix is to acquire mutex in test\nthread so it sees `running_count_` and thread status updated atomically.\nI think simply reordering the two updates would have been insufficient\nsince the thread status update uses `memory_order_relaxed`. This change\nhappens to also eliminate an undesirable sleep loop.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7825\n\nTest Plan:\ninjected sleeps to verify the failure repros before this PR and does not\nrepro after.\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D25742409\n\nPulled By: ajkr\n\nfbshipit-source-id: 926a2223fe856e20bc4c0c27df6736ee5cb02c97",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_list_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/61e324422ed4071eb78a0d47d551a1ef89d7a0c4"
    },
    {
        "hash": "30cd38c687b857b1d6dc1f8c08edc1d5c561a661",
        "author": "Cheng Chang",
        "date": "2020-12-30T20:31:35-08:00",
        "message": "Increase the txn lock timeout in stress test (#7823)\n\nSummary:\nWe recently encounter two cases of txn lock timeout in stress test. It might be caused due to latencies of resource scheduling in the internal infrastructure. Hopefully increasing the timeout can make the related tests less flaky.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7823\n\nTest Plan: watch internal stress test to pass.\n\nReviewed By: siying\n\nDifferential Revision: D25739233\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 84a5a8ae820db24dacd0cfc05928b26505fab89d",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/30cd38c687b857b1d6dc1f8c08edc1d5c561a661"
    },
    {
        "hash": "edb0b1fb7f6f4a05c6c7d21d8f81dbf97c5c83b5",
        "author": "jbosh",
        "date": "2020-12-30T15:42:59-08:00",
        "message": "rocksdb_transaction_get_for_update now exports (#6293)\n\nSummary:\nAdded missing ROCKSDB_LIBRARY_API decorator to rocksdb_transaction_get_for_update.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6293\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D25234298\n\nPulled By: ajkr\n\nfbshipit-source-id: 8a4817adaec1f445f338c8d8c59d3392925b5721",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/edb0b1fb7f6f4a05c6c7d21d8f81dbf97c5c83b5"
    },
    {
        "hash": "d7738666b0b101df0eb3c4822aca4ee10c27694a",
        "author": "anand76",
        "date": "2020-12-28T13:38:10-08:00",
        "message": "Fix db_bench duration for multireadrandom benchmark (#7817)\n\nSummary:\nThe multireadrandom benchmark, when run for a specific number of reads (--reads argument), should base the duration on the actual number of keys read rather than number of batches.\n\nTests:\nRun db_bench multireadrandom benchmark\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7817\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D25717230\n\nPulled By: anand1976\n\nfbshipit-source-id: 13f4d8162268cf9a34918655e60302d0aba3864b",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d7738666b0b101df0eb3c4822aca4ee10c27694a"
    },
    {
        "hash": "736c6dc59fe1f860f3076e18efee07180c8eb510",
        "author": "cheng-chang",
        "date": "2020-12-27T16:18:00-08:00",
        "message": "Disable BasicLockEscalation if cannot determine whether TSAN is enabled (#7814)\n\nSummary:\nBasicLockEscalation will cause false-positive warnings under TSAN (this is a known issue in TSAN, see details in https://gist.github.com/spetrunia/77274cf2d5848e0a7e090d622695ed4e), skip this test if TSAN is enabled, or if we are not sure whether TSAN is enabled.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7814\n\nTest Plan: watch the tsan contrun test to pass.\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D25708094\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 4fc813ff373301d033d086154cc7bb60a5e95889",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/lock/range/range_locking_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/736c6dc59fe1f860f3076e18efee07180c8eb510"
    },
    {
        "hash": "601585bca4ede0af6b9e52da2d4468ce37556aaf",
        "author": "Zhichao Cao",
        "date": "2020-12-25T13:15:48-08:00",
        "message": "fix memory leak in db_stress checkpoint test (#7813)\n\nSummary:\nfix memory leak in db_stress checkpoint test. If s is not ok, checkpoint is not deleted, may cause memory leak.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7813\n\nTest Plan: make asan_check\n\nReviewed By: cheng-chang\n\nDifferential Revision: D25702999\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 08253b0852835acb8cfd412503cdabf720afb678",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/601585bca4ede0af6b9e52da2d4468ce37556aaf"
    },
    {
        "hash": "a727efca997ce2be984becb44fe7b233a7d9d76c",
        "author": "Peter Dillinger",
        "date": "2020-12-23T11:08:12-08:00",
        "message": "Remove flaky, redundant, and dubious DBTest.SparseMerge (#7800)\n\nSummary:\nThis test would occasionally fail like this:\n\n    WARNING: c:\\users\\circleci\\project\\db\\db_test.cc(1343): error: Expected:\n    (dbfull()->TEST_MaxNextLevelOverlappingBytes(handles_[1])) <= (20 * 1048576), actual: 33501540 vs 20971520\n\nAnd being a super old test, it's not structured in a sound way. And it appears that DBTest2.MaxCompactionBytesTest is a better test of what SparseMerge was intended to test. In fact, SparseMerge fails if I set\n\n    options.max_compaction_bytes = options.target_file_size_base * 1000;\n\nThus, we are removing this negative-value test.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7800\n\nTest Plan: Q.E.D.\n\nReviewed By: ajkr\n\nDifferential Revision: D25693366\n\nPulled By: pdillinger\n\nfbshipit-source-id: 9da07d4dce0559547fc938b2163a2015e956c548",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a727efca997ce2be984becb44fe7b233a7d9d76c"
    },
    {
        "hash": "41ff125a8a983bfb0c63659b3a416a7f1cf0b898",
        "author": "cheng-chang",
        "date": "2020-12-22T14:53:43-08:00",
        "message": "SyncWAL shouldn't be supported in compacted db (#7788)\n\nSummary:\n`CompactedDB` is a kind of read-only DB, so it shouldn't support `SyncWAL`.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7788\n\nTest Plan: watch existing tests to pass.\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D25661209\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 9eb2cc3f73736dcc205c8410e5944aa203f002d3",
        "modified_files_count": 1,
        "modified_files": [
            "db/compacted_db_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/41ff125a8a983bfb0c63659b3a416a7f1cf0b898"
    },
    {
        "hash": "9057d0a0795324443b6c171d62c31ee5bf42fc8d",
        "author": "sdong",
        "date": "2020-12-22T14:44:08-08:00",
        "message": "Minimize Timing Issue in test WALTrashCleanupOnOpen (#7796)\n\nSummary:\nWe saw DBWALTestWithParam/DBWALTestWithParam.WALTrashCleanupOnOpen sometimes fail with:\n\ndb/db_sst_test.cc:575: Failure\nExpected: (trash_log_count) >= (1), actual: 0 vs 1\n\nThe suspicious is that delete scheduling actually deleted all trash files based on rate, but it is not expected. This can be reproduced if we manually add sleep after DB is closed for serveral seconds. Minimize its chance by setting the delete rate to be lowest possible.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7796\n\nTest Plan: The test doesn't fail with the manual sleeping anymore\n\nReviewed By: anand1976\n\nDifferential Revision: D25675000\n\nfbshipit-source-id: a39fd05e1a83719c41014e48843792e752368e22",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9057d0a0795324443b6c171d62c31ee5bf42fc8d"
    },
    {
        "hash": "861b0d1a496fdb7e77ed8027e34d9a2e0a9a4789",
        "author": "Jay Zhuang",
        "date": "2020-12-21T15:22:16-08:00",
        "message": "Fix Windows build in block_cache_tracer_test (#7795)\n\nSummary:\nThe test was added to cmake in https://github.com/facebook/rocksdb/issues/7783\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7795\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D25671010\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 2146ff9559cdd7266c4d78476672488c62654a6d",
        "modified_files_count": 1,
        "modified_files": [
            "trace_replay/block_cache_tracer_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/861b0d1a496fdb7e77ed8027e34d9a2e0a9a4789"
    },
    {
        "hash": "75e4af14e06177729a29ae96e9a80c79ef84c4ae",
        "author": "sdong",
        "date": "2020-12-18T15:29:03-08:00",
        "message": "Update code comment for options.ttl (#7775)\n\nSummary:\nThe behavior of options.ttl has been updated long ago but we didn't update the code comments.\nAlso update the periodic compaction's comment.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7775\n\nTest Plan: See it can still build through CI.\n\nReviewed By: ajkr\n\nDifferential Revision: D25592015\n\nfbshipit-source-id: b1db18b6787e7048ce6aedcbc3bb44493c9fc49b",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/advanced_options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/75e4af14e06177729a29ae96e9a80c79ef84c4ae"
    },
    {
        "hash": "99f5a800c3efe7e088a53496ed7891a58839f98f",
        "author": "Akanksha Mahajan",
        "date": "2020-12-16T21:34:41-08:00",
        "message": "Fix clang_analyze error (#7777)\n\nSummary:\nFix clang_analyze error\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7777\n\nTest Plan:\nUSE_CLANG=1 TEST_TMPDIR=/dev/shm/rocksdb OPT=-g make -j64\nanalyze\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D25601675\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 30f58cf4d575a2d546c455fb43e856455eb72a07",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/99f5a800c3efe7e088a53496ed7891a58839f98f"
    },
    {
        "hash": "a0e4421e8133620bb2934bb36272a021a7fc2cc2",
        "author": "Jay Zhuang",
        "date": "2020-12-14T14:07:52-08:00",
        "message": "Log sst number in Corruption status (#7767)\n\nSummary:\nsst file number in corruption error would be very useful for debugging\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7767\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D25485872\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 67315b582cedeefbce6676015303ebe5bf6526a3",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a0e4421e8133620bb2934bb36272a021a7fc2cc2"
    },
    {
        "hash": "fd7d8dc56e579189d9b5428932136b0ed00241d7",
        "author": "Cheng Chang",
        "date": "2020-12-10T12:55:49-08:00",
        "message": "Do not log unnecessary WAL obsoletion events (#7765)\n\nSummary:\nmin_wal_number_to_keep should not be decreasing, if it does not increase, then there is no need to log the WAL obsoletions in MANIFEST since a previous one has been logged.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7765\n\nTest Plan: watch existing tests and stress tests to pass\n\nReviewed By: pdillinger\n\nDifferential Revision: D25462542\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 0085fcb6edf5cf2b0fc32f9932a7566f508768ff",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable_list.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fd7d8dc56e579189d9b5428932136b0ed00241d7"
    },
    {
        "hash": "40f2b65008731b8c12397ee7866bcd50b6c8b814",
        "author": "Azat Khuzhin",
        "date": "2020-12-10T09:35:11-08:00",
        "message": "Eliminate possible race between LockFile() vs UnlockFile() (#7721)\n\nSummary:\nLockFile() accessing LockHoldingInfo (element of locked_files) by\nreference after mutex_locked_files had been released.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7721\n\nReviewed By: pdillinger\n\nDifferential Revision: D25431839\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: eefee93f12a8016a98e2466e442af2605b3e2a5e",
        "modified_files_count": 1,
        "modified_files": [
            "env/fs_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/40f2b65008731b8c12397ee7866bcd50b6c8b814"
    },
    {
        "hash": "3c2a44885675c365ce5c812a42f762d4bd434399",
        "author": "Cheng Chang",
        "date": "2020-12-09T16:58:26-08:00",
        "message": "Add a test for disabling tracking WAL (#7757)\n\nSummary:\nIf WAL tracking was enabled, then disabled during reopen, the previously tracked WALs should be removed from MANIFEST.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7757\n\nTest Plan: a new unit test `DBBasicTest.DisableTrackWal` is added.\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D25410508\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 9d8d9e665066135930a7c1035bb8c2f68bded6a0",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3c2a44885675c365ce5c812a42f762d4bd434399"
    },
    {
        "hash": "66e54c59847e316bb78dce786d2206d500bf8a90",
        "author": "pkubaj",
        "date": "2020-12-08T15:31:56-08:00",
        "message": "Fix build on FreeBSD/powerpc64(le) (#7732)\n\nSummary:\nTo build on FreeBSD, arch_ppc_probe needs to be adapted to FreeBSD.\n\nSince FreeBSD uses elf_aux_info as an getauxval equivalent, use it and include necessary headers:\n- machine/cpu.h for PPC_FEATURE2_HAS_VEC_CRYPTO,\n- sys/auxv.h for elf_aux_info,\n- sys/elf_common.h for AT_HWCAP2.\n\nelf_aux_info isn't checked for being available, because it's available since FreeBSD 12.0. rocksdb assumes using Clang on FreeBSD, but powerpc* platforms switch to Clang only since 13.0.\n\nThis patch makes rocksdb build on FreeBSD on powerpc64 and powerpc64le platforms.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7732\n\nReviewed By: ltamasi\n\nDifferential Revision: D25399194\n\nPulled By: pdillinger\n\nfbshipit-source-id: 9c905147d75f98cd2557dd2f86a940b8e6c5afcd",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/66e54c59847e316bb78dce786d2206d500bf8a90"
    },
    {
        "hash": "93c6c18cf9731f47b386dd445dc13363423c507e",
        "author": "Vincent Milum Jr",
        "date": "2020-12-08T13:33:21-08:00",
        "message": "Adding ARM AT_HWCAP support for FreeBSD (#7750)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7750\n\nReviewed By: ltamasi\n\nDifferential Revision: D25400609\n\nPulled By: pdillinger\n\nfbshipit-source-id: 13b15e2f490acc011b648fbd9615ea8e580cccc7",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c_arm64.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/93c6c18cf9731f47b386dd445dc13363423c507e"
    },
    {
        "hash": "11c4be2222e9a26c43a965b907b30d4c8e269a67",
        "author": "Yanqin Jin",
        "date": "2020-12-08T02:37:38-08:00",
        "message": "Refactor ProcessManifestWrites a little bit (#7751)\n\nSummary:\nThis PR removes a nested loop inside ProcessManifestWrites. The new\nimplementation has the same behavior as the old code with simpler logic\nand lower complexity.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7751\n\nTest Plan:\nmake check\nRun make crash_test on devserver and succeeds 3 times.\n\nReviewed By: ltamasi\n\nDifferential Revision: D25363526\n\nPulled By: riversand963\n\nfbshipit-source-id: 27e681949dacd7501a752e5e517b9e85b54ccb2e",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/11c4be2222e9a26c43a965b907b30d4c8e269a67"
    },
    {
        "hash": "8a06fe278fe55005e08dc62457a43a9fc1b760da",
        "author": "Levi Tamasi",
        "date": "2020-12-07T17:37:17-08:00",
        "message": "Do not use ASSERT_OK in child threads in ExternalSstFileTest.PickedLevelBug (#7754)\n\nSummary:\n`googletest` uses exceptions to communicate assertion failures when\n`GTEST_THROW_ON_FAILURE` is set, which does not go well with\n`std::thread`s, since an exception escaping the top-level function of an\n`std::thread` object or an `std::thread` getting destroyed without\nhaving been `join`ed or `detach`ed first results in a call to\n`std::terminate`. The patch fixes this by moving the `Status` assertions\nof background operations in `ExternalSstFileTest.PickedLevelBug` to the\nmain thread.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7754\n\nTest Plan: `make check`\n\nReviewed By: riversand963\n\nDifferential Revision: D25383808\n\nPulled By: ltamasi\n\nfbshipit-source-id: 32fb2721e5169ec898d218900bc0d83eead45d03",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8a06fe278fe55005e08dc62457a43a9fc1b760da"
    },
    {
        "hash": "1df85848968f8822fa3df411dfbcc818f020fe38",
        "author": "Akanksha Mahajan",
        "date": "2020-12-07T10:24:33-08:00",
        "message": "Fix unit test failure ppc64le in travis (#7752)\n\nSummary:\nAdded a fix for the failure of\nDBTest2.PartitionedIndexUserToInternalKey on ppc64le in travis\nCloses https://github.com/facebook/rocksdb/issues/7746\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7752\n\nTest Plan:\nRan travis job multiple times and it passed. Will keep\nwatching the travis job after this patch.\n\nReviewed By: pdillinger\n\nDifferential Revision: D25373130\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: fa0e3f85f75b687415044a506e42cc38ead87975",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1df85848968f8822fa3df411dfbcc818f020fe38"
    },
    {
        "hash": "e102de73180a5bead2d534f27b10258dcd2386e6",
        "author": "Zhichao Cao",
        "date": "2020-12-04T20:31:39-08:00",
        "message": "Fix assert(cfd->imm()->NumNotFlushed() > 0) in FlushMemtable (#7744)\n\nSummary:\nIn current code base, in FlushMemtable, when `(Flush_reason == FlushReason::kErrorRecoveryRetryFlush && (!cfd->mem()->IsEmpty() || !cached_recoverable_state_empty_.load()))`, we assert that cfd->imm()->NumNotFlushed() > 0. However, there are some corner cases that can fail this assert: 1) if there are multiple CFs, some CF has immutable memtable, some CFs don't. In ResumeImpl, all CFs will call FlushMemtable, which will hit the assert. 2) Regular flush is scheduled and running, the resume thread is waiting. New KVs are inserted and SchedulePendingFlush is called. Regular flush will continue call MaybeScheduleFlushAndCompaction until all the immutable memtables are flushed. When regular flush ends and auto resume thread starts to schedule new flushes, cfd->imm()->NumNotFlushed() can be 0.\n\nRemove the assert and added the comments.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7744\n\nTest Plan: make check and pass the stress test\n\nReviewed By: riversand963\n\nDifferential Revision: D25340573\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: eac357bdace660247c197f01a9ff6857e3c97672",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e102de73180a5bead2d534f27b10258dcd2386e6"
    },
    {
        "hash": "eb5a8c06dde5c6b470e7b5dc5aa044cd647005a0",
        "author": "Zhichao Cao",
        "date": "2020-12-04T14:58:37-08:00",
        "message": "Fix the thread wait case in error_handler (#7700)\n\nSummary:\nIn error_handler auto recovery case, if recovery_in_prog_ is false, the recover is finished or failed. In this case, the auto recovery thread should finish its execution so recovery_thread_ should be null. However, in some cases, it is not null, the caller should not directly returned. Instead, it should wait for a while and create a new thread to execute the new recovery.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7700\n\nTest Plan: make check, error_handler_fs_test\n\nReviewed By: anand1976\n\nDifferential Revision: D25098233\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 5a1cba234ca18f6dd5d1be88e02d66e1d5ce931b",
        "modified_files_count": 1,
        "modified_files": [
            "db/error_handler.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eb5a8c06dde5c6b470e7b5dc5aa044cd647005a0"
    },
    {
        "hash": "3b9bfe8f14e01fd51d662e753fd12b49df43a4a1",
        "author": "Peter Dillinger",
        "date": "2020-12-02T15:16:49-08:00",
        "message": "Skip minimum rate check in Sandcastle (#7728)\n\nSummary:\nThe minimum rate check in RateLimiterTest.Rate can fail in\nFacebook's CI system Sandcastle, presumably due to heavily loaded\nmachines. This change disables the minimum rate check for Sandcastle\nruns, and cleans up the code disabling it on other CI environments. (The\namount of conditionally compiled code shall be minimized.)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7728\n\nTest Plan: try new test with and without setting envvar SANDCASTLE=1\n\nReviewed By: ltamasi\n\nDifferential Revision: D25247642\n\nPulled By: pdillinger\n\nfbshipit-source-id: d786233af37af9a874adbb3a9e2707ec52c27a5a",
        "modified_files_count": 1,
        "modified_files": [
            "util/rate_limiter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3b9bfe8f14e01fd51d662e753fd12b49df43a4a1"
    },
    {
        "hash": "0b06af91463d5b6068ad794ac7307075440f8e4b",
        "author": "Peter Dillinger",
        "date": "2020-12-01T10:17:56-08:00",
        "message": "Warn about practically unfixable TSAN warnings in stack trace (#7723)\n\nSummary:\nTSAN reports that our stack trace handler makes unsafe calls\nduring a signal handler. I just tried fixing some of them and I don't\nthink it's fixable unless we can get away from using FILE stdio. Even if\nwe can use lower level functions only, I'm not sure it's fixed.\n\nI also tried suppressing the reports with function and file level TSAN\nsuppression, but that doesn't seem to work, perhaps because the\nviolation is reported on the callee, not the caller.\n\nSo I added a warning to be printed whenever these violations would be\nreported that they are practically ignorable.\n\nInternal ref: T77844138\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7723\n\nTest Plan:\nrun external_sst_file_test with seeded abort(), with TSAN\n(TSAN warnings + new warning) and without TSAN (no warning, just stack\ntrace).\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D25228011\n\nPulled By: pdillinger\n\nfbshipit-source-id: 3eda1d6e7ca3cdc64076cf99ae954168837d2818",
        "modified_files_count": 1,
        "modified_files": [
            "port/stack_trace.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0b06af91463d5b6068ad794ac7307075440f8e4b"
    },
    {
        "hash": "cc431ece3762ea559999d1b68ce3067b1231e60a",
        "author": "Steve Yen",
        "date": "2020-11-30T12:09:39-08:00",
        "message": "Fix merge operator docs typo (#7716)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7716\n\nReviewed By: pdillinger\n\nDifferential Revision: D25214340\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 143a8e7d076917e60bbe6993d60ec55f33e2ab56",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/merge_operator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cc431ece3762ea559999d1b68ce3067b1231e60a"
    },
    {
        "hash": "0baa5055f1ef06aeaf512928e5712575e67beb04",
        "author": "Peter Dillinger",
        "date": "2020-11-22T19:52:04-08:00",
        "message": "Add Ribbon schema test to bloom_test (#7696)\n\nSummary:\nThese new unit tests should ensure that we don't accidentally\nchange the interpretation of bits for what I call Standard128Ribbon\nfilter internally, available publicly as NewExperimentalRibbonFilterPolicy.\nThere is very little intuitive reason for the values we check against in\nthese tests; I just plug in the right expected values upon watching the\ntest fail initially.\n\nMost (but not all) of the tests are essentially \"whitebox\" \"round-trip.\" We\ncreate a filter from fixed keys, and first compare the checksum of those\nfilter bytes against a saved value. We also run queries against other fixed\nkeys, comparing which return false positives against a saved set.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7696\n\nTest Plan: test addition and refactoring only\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D25082289\n\nPulled By: pdillinger\n\nfbshipit-source-id: b5ca646fdcb5a1c2ad2085eda4a1fd44c4287f67",
        "modified_files_count": 1,
        "modified_files": [
            "util/bloom_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0baa5055f1ef06aeaf512928e5712575e67beb04"
    },
    {
        "hash": "a65e905bbb9609e80a30fd8126f17680f8e89cdb",
        "author": "Dylan Wen",
        "date": "2020-11-19T13:32:50-08:00",
        "message": "Fix typos in comments (#7687)\n\nSummary:\nHi there,\n\nThis PR fixes a few typos in comments in `cache/lru_cache.h`.\n\nThanks\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7687\n\nReviewed By: ajkr\n\nDifferential Revision: D25064674\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: fe633369d5b82c5aac42d4ee8d551b9d657237d1",
        "modified_files_count": 1,
        "modified_files": [
            "cache/lru_cache.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a65e905bbb9609e80a30fd8126f17680f8e89cdb"
    },
    {
        "hash": "7169ca9c8010a69da1d35c733425b1d379c16732",
        "author": "Cheng Chang",
        "date": "2020-11-18T21:27:54-08:00",
        "message": "Do not track empty WALs (#7697)\n\nSummary:\nAn empty WAL won't be backed up by the BackupEngine. So if we track the empty WALs in MANIFEST, then when restoring from a backup, it may report corruption that the empty WAL is missing, which is correct because the WAL is actually in the main DB but not in the backup DB, but missing an empty WAL does not logically break DB consistency.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7697\n\nTest Plan: watch existing tests to pass\n\nReviewed By: pdillinger\n\nDifferential Revision: D25077194\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 01917b57234b92b6063925f2ee9452c5732bdc03",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7169ca9c8010a69da1d35c733425b1d379c16732"
    },
    {
        "hash": "4c336c6912cf8d1c7596526f5b38c7446cae4919",
        "author": "Adam Retter",
        "date": "2020-11-17T15:29:35-08:00",
        "message": "Fix jemalloc compliation problem on macOS (#7624)\n\nSummary:\nCloses https://github.com/facebook/rocksdb/issues/7269\n\nI have only tested this on macOS, let's see what CI makes of it for the other platforms...\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7624\n\nReviewed By: ajkr\n\nDifferential Revision: D24834305\n\nPulled By: pdillinger\n\nfbshipit-source-id: ba818d8424297ccebd18ed854b044764c2dbab5f",
        "modified_files_count": 1,
        "modified_files": [
            "port/jemalloc_helper.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4c336c6912cf8d1c7596526f5b38c7446cae4919"
    },
    {
        "hash": "869f0538dd541501cb8be8467b00e728f398c8af",
        "author": "Yanqin Jin",
        "date": "2020-11-16T22:09:01-08:00",
        "message": "Clean up after two test failures in db_basic_test (#7682)\n\nSummary:\nIn db_basic_test.cc, there are two tests that rely on the underlying\nsystem's `LockFile` support to function correctly:\nDBBasicTest.OpenWhenOpen and DBBasicTest.CheckLock. In both tests,\nre-opening a db using `DB::Open` is expected to fail because the second\nopen cannot lock the LOCK file. Some distributed file systems, e.g. HDFS\ndo not support the POSIX-style file lock. Therefore, these unit tests will cause\nassertion failure and the second `Open` will create a db instance.\nCurrently, these db instances are not closed after the assertion\nfailure. Since these db instances are registered with some process-wide, static\ndata structures, e.g. `PeriodicWorkScheduler::Default()`, they can still be\naccessed after the unit tests. However, the `Env` object created for this db\ninstance is destroyed when the test finishes in `~DBTestBase()`. Consequently,\nit causes illegal memory access.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7682\n\nTest Plan:\nRun the following on a distrubited file system:\n```\nmake check\n```\n\nReviewed By: anand1976\n\nDifferential Revision: D25004215\n\nPulled By: riversand963\n\nfbshipit-source-id: f4327d7716c0e72b13bb43737ec9a5d156da4d52",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/869f0538dd541501cb8be8467b00e728f398c8af"
    },
    {
        "hash": "9627e342c8c9e9fcb39748338a09f3bf02c3256f",
        "author": "anand76",
        "date": "2020-11-16T20:48:13-08:00",
        "message": "Use default FileSystem in GenerateUniqueId (#7672)\n\nSummary:\nUse ```FileSystem::Default``` to read ```/proc/sys/kernel/uuid```, so it works for ```Envs``` with remote ```FileSystem``` as well.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7672\n\nReviewed By: riversand963\n\nDifferential Revision: D24998702\n\nPulled By: anand1976\n\nfbshipit-source-id: fa95c1d70f0e4ed17561201f047aa055046d06c3",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9627e342c8c9e9fcb39748338a09f3bf02c3256f"
    },
    {
        "hash": "1861de455eede00202576bc5432787e9ee50a376",
        "author": "Mammo, Mulugeta",
        "date": "2020-11-16T13:06:30-08:00",
        "message": "Add arena_block_size flag to db_bench (#7654)\n\nSummary:\ndb_bench currently does not allow overriding the default `arena_block_size `calculation ([memtable size/8](https://github.com/facebook/rocksdb/blob/master/db/column_family.cc#L216)). For memtables whose size is in gigabytes, the `arena_block_size` defaults to hundreds of megabytes (affecting performance).\n\nExposing this option in db_bench would allow us to test the workloads with various `arena_block_size` values.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7654\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D24996812\n\nPulled By: ajkr\n\nfbshipit-source-id: a5e3d2c83d9f89e1bb8382f2e8dd476c79e33bef",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1861de455eede00202576bc5432787e9ee50a376"
    },
    {
        "hash": "1aae41786aedcd77234fa3908202a0538419c542",
        "author": "Cheng Chang",
        "date": "2020-11-13T13:37:14-08:00",
        "message": "Do not track WAL in MANIFEST when fsync is disabled in a test (#7669)\n\nSummary:\nIf fsync is disabled in a unit test, then do not track WAL in MANIFEST, because on DB recovery, the WAL might be missing because the directory is not fsynced.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7669\n\nTest Plan: Tests with fsync enabled should pass.\n\nReviewed By: riversand963\n\nDifferential Revision: D24941431\n\nPulled By: cheng-chang\n\nfbshipit-source-id: ab3ff0f90769795cfb4e4d6dcf084ea5545d1975",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1aae41786aedcd77234fa3908202a0538419c542"
    },
    {
        "hash": "bb69b4ce7f93c9c94ad7719b96299790535e2d78",
        "author": "Levi Tamasi",
        "date": "2020-11-12T17:33:04-08:00",
        "message": "Fix InternalStats::DumpCFStats (#7666)\n\nSummary:\nhttps://github.com/facebook/rocksdb/pull/7461 accidentally broke\n`InternalStats::DumpCFStats` by making `DumpCFFileHistogram` overwrite\nthe output of `DumpCFStatsNoFileHistogram` instead of appending to it,\nresulting in only the file histogram related information getting logged.\nThe patch fixes this by reverting to appending in `DumpCFFileHistogram`.\n\nFixes https://github.com/facebook/rocksdb/issues/7664 .\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7666\n\nTest Plan: Ran `make check` and checked the info log of `db_bench`.\n\nReviewed By: riversand963\n\nDifferential Revision: D24929051\n\nPulled By: ltamasi\n\nfbshipit-source-id: 636a3d5ebb5ce23de4f3fe4f03ad3f16cb2858f8",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bb69b4ce7f93c9c94ad7719b96299790535e2d78"
    },
    {
        "hash": "16d103d35b2eca58bb5c5750d533f1e7078fbdd3",
        "author": "Huisheng Liu",
        "date": "2020-11-10T11:14:48-08:00",
        "message": "fix read_amp_bytes_per_bit field size (#7651)\n\nSummary:\nThe field in BlockBasedTableOptions is 4 bytes:\n  // Default: 0 (disabled)\n  uint32_t read_amp_bytes_per_bit = 0;\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7651\n\nReviewed By: ltamasi\n\nDifferential Revision: D24844994\n\nPulled By: riversand963\n\nfbshipit-source-id: e2695e55532256ef8996dd6939cad06987a80293",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_factory.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/16d103d35b2eca58bb5c5750d533f1e7078fbdd3"
    },
    {
        "hash": "1ce105d0ea0bc9676cba432f89baadbe5be0aa9f",
        "author": "Cheng Chang",
        "date": "2020-11-06T15:24:17-08:00",
        "message": "Disable fsync in DBMergeOperatorTest to save test time (#7640)\n\nSummary:\nThe test often times out in internal test infra.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7640\n\nTest Plan: watch test to pass internally\n\nReviewed By: anand1976\n\nDifferential Revision: D24764928\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 587f2afc97f52909837943fd938a86ca94544b2c",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_merge_operator_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1ce105d0ea0bc9676cba432f89baadbe5be0aa9f"
    },
    {
        "hash": "cdc7ba3a32d6a2f0db3681d0b34cd48a8ac6e636",
        "author": "Cheng Chang",
        "date": "2020-11-06T14:25:14-08:00",
        "message": "DBTablePropertiesTest often times out in internal test infra (#7639)\n\nSummary:\nIn this test, after flushing memtable, it will read directly from the sst files, so `env_do_fsync` was `true` to ensure that the flushed sst files can be read afterwards. Considering that the test does not last long, the data should be available in os buffer even without fsync, so this PR tries to disable fsync to reduce test time.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7639\n\nTest Plan: watch the test to pass in internal infra\n\nReviewed By: anand1976\n\nDifferential Revision: D24764689\n\nPulled By: cheng-chang\n\nfbshipit-source-id: ef827611a3eaca04201e4280ae801d6c8e60c138",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_table_properties_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cdc7ba3a32d6a2f0db3681d0b34cd48a8ac6e636"
    },
    {
        "hash": "da42eceabc2802567824e072d64e606fab3b51ce",
        "author": "Cheng Chang",
        "date": "2020-11-06T14:25:14-08:00",
        "message": "Skip fsync in txn tests (#7641)\n\nSummary:\nThe tests often times out in internal infra, skipping fsync should reduce test time.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7641\n\nTest Plan: watch existing tests to pass\n\nReviewed By: anand1976\n\nDifferential Revision: D24765098\n\nPulled By: cheng-chang\n\nfbshipit-source-id: c62bf8110361aee901918d632cf4772435d05e8d",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/da42eceabc2802567824e072d64e606fab3b51ce"
    },
    {
        "hash": "4c2aef04bdd8538a9c2d6199f71d50fa9ab83a7e",
        "author": "Cheng Chang",
        "date": "2020-11-06T10:25:20-08:00",
        "message": "ColumnFamilyTest often times out in internal test infra (#7638)\n\nSummary:\nTries to fix by skipping fsync.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7638\n\nTest Plan: watch the tests to pass\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D24764355\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 9c21b177709025ca1943066d94da89324ed47655",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4c2aef04bdd8538a9c2d6199f71d50fa9ab83a7e"
    },
    {
        "hash": "81543369e5d56961b320f24364504616001f0dd2",
        "author": "Cheng Chang",
        "date": "2020-11-06T10:25:20-08:00",
        "message": "Disable fsync in db_range_del_test (#7637)\n\nSummary:\nThis test often times out in internal test infra.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7637\n\nTest Plan: watch test to pass\n\nReviewed By: ajkr\n\nDifferential Revision: D24763939\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 6564ee2ef637e9faf6688d4b6a5d74a72a51c5e8",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_range_del_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/81543369e5d56961b320f24364504616001f0dd2"
    },
    {
        "hash": "0b94468bbacf4eafc5d1c47d3431edb2cc93844d",
        "author": "Yanqin Jin",
        "date": "2020-11-03T09:48:16-08:00",
        "message": "Avoid skipping a test in db_wal_test (#7628)\n\nSummary:\nRecent test report shows that some tests have been skipped.\n\nFor DBWALTest that inherits from DBTestBase, the following will always be\ntrue, since `env_` is an instance of `SpecialEnv`, not `Env::Default()`. Thus the test\nwill always be skipped.\n\n```\nif (options.env != Env::Default()) {\n  ROCKSDB_GTEST_SKIP(\"Test requires default environment\");\n  return;\n}\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7628\n\nTest Plan:\n./db_wal_test --gtest_filter=DBWALTest.TruncateLastLogAfterRecoverWithoutFlush\nMEM_ENV=1 ./db_wal_test --gtest_filter=DBWALTest.TruncateLastLogAfterRecoverWithoutFlush\nmake check\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D24693006\n\nPulled By: riversand963\n\nfbshipit-source-id: 7f2a772492a0f11bff17bbf5e9f493e9e9a1c125",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_wal_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0b94468bbacf4eafc5d1c47d3431edb2cc93844d"
    },
    {
        "hash": "c992eb118b134daf8e342a78bec6783007bd6c22",
        "author": "Yanqin Jin",
        "date": "2020-11-02T19:48:23-08:00",
        "message": "Avoid skipping a test in db_test2 (#7629)\n\nSummary:\nTest report shows that this test has been skipped recently due to\na condition that will never meet. `env_` is not equal to\n`Env::Default()` for DBTest2 that inherits from DBTestBase.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7629\n\nTest Plan:\nmake check\n./db_test2 --gtest_filter=DBTest2.PinnableSliceAndMmapReads\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D24693317\n\nPulled By: riversand963\n\nfbshipit-source-id: b1bbd5c1e05a6fa57c1de0d74462b69e3c2d5215",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c992eb118b134daf8e342a78bec6783007bd6c22"
    },
    {
        "hash": "248d10fb969e27c859d93b6e30fe9739822f98af",
        "author": "vdimir",
        "date": "2020-10-28T11:11:17-07:00",
        "message": "Fix typo in arena.cc (#7593)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7593\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D24576218\n\nPulled By: riversand963\n\nfbshipit-source-id: a3d77191362ca696ae9df643f97f4ab5b7ecff12",
        "modified_files_count": 1,
        "modified_files": [
            "memory/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/248d10fb969e27c859d93b6e30fe9739822f98af"
    },
    {
        "hash": "793e9b7f5b0685045517931234fbc0ddccb3a896",
        "author": "darionyaphet",
        "date": "2020-10-28T10:48:53-07:00",
        "message": "Remove duplicate close (#7594)\n\nSummary:\nBecause `Close()` have called in `Destroy()`\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7594\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D24576407\n\nPulled By: riversand963\n\nfbshipit-source-id: eba70d73375fd47dd78ca64c6a1fab3628448276",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/793e9b7f5b0685045517931234fbc0ddccb3a896"
    },
    {
        "hash": "b1cdb8cc86f18e7cad7b219c4c496ab967044383",
        "author": "jmn",
        "date": "2020-10-22T17:31:54-07:00",
        "message": "add StartTrace and EndTrace to stackable_db (#7585)\n\nSummary:\nIn addition to trace block cache access, we want to support trace queries on MySQL. To achieve that StartTrace and EndTrace need to be added to the stackable_db.h\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7585\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D24482306\n\nPulled By: nmjnmjnmj\n\nfbshipit-source-id: de641b4837c64cd33b44b5bebaeae5d1527c8c31",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/stackable_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b1cdb8cc86f18e7cad7b219c4c496ab967044383"
    },
    {
        "hash": "fc9b4160139c66f50fd5ad42d05e9111483b2e69",
        "author": "Cheng Chang",
        "date": "2020-10-20T11:50:30-07:00",
        "message": "Fix typo in db_wal_test (#7571)\n\nSummary:\nas title\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7571\n\nTest Plan: make check\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D24392577\n\nPulled By: cheng-chang\n\nfbshipit-source-id: c94f92db48270d0e215aa0f2782b0ff2e31bf708",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_wal_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fc9b4160139c66f50fd5ad42d05e9111483b2e69"
    },
    {
        "hash": "850cc0dbed30ae2956d2e4570b557bcdf9af1151",
        "author": "Akanksha Mahajan",
        "date": "2020-10-14T12:44:59-07:00",
        "message": "Fix for clang_analyzer build failure in table_test (#7553)\n\nSummary:\nfix for clang_analyzer build failure in table_test because of\npotential memory leak of memtable in case of ASSERT failure.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7553\n\nTest Plan:\nUSE_CLANG=1 make analyze;\n           make check -j64\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D24295042\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: e9ea184367970fff3b520e33f3ceebf28d66ac8d",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/850cc0dbed30ae2956d2e4570b557bcdf9af1151"
    },
    {
        "hash": "b99fe1ab74ba2b29223aa40eac5141912ca676ff",
        "author": "Zhichao Cao",
        "date": "2020-10-14T10:47:58-07:00",
        "message": "Remove the status.PermitUncheckedError() from WriteGroup Destructor (#7555)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7555\n\nTest Plan: ASSERT_STATUS_CHECKED=1 make -j48 error_handler_fs_test\n\nReviewed By: riversand963\n\nDifferential Revision: D24299387\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 6c8aa91c4b6e2bc82580b8d2264c177068f5a32c",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_thread.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b99fe1ab74ba2b29223aa40eac5141912ca676ff"
    },
    {
        "hash": "f548a2a03cacdf1463bb4c63340569f846c73128",
        "author": "Jay Zhuang",
        "date": "2020-10-12T11:22:25-07:00",
        "message": "Fix a flaky tsan test for DBTest2 (#7526)\n\nSummary:\nThreadSanitizer: data race for `DummyOldStats.num_rt`.\nFailed build: https://app.circleci.com/pipelines/github/facebook/rocksdb/3991/workflows/b47c3ae1-5531-4489-ac51-11854abdfd0f/jobs/42305\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7526\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D24226736\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: e05ce354d0c0db0eba242d59d4b0e89ce7c25acf",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f548a2a03cacdf1463bb4c63340569f846c73128"
    },
    {
        "hash": "810ab34ede79f9fea6ad1bd751366846c875adf8",
        "author": "Levi Tamasi",
        "date": "2020-10-08T10:49:40-07:00",
        "message": "Do not rely on the two-argument std::pair constructor being constexpr (#7519)\n\nSummary:\nThe `std::pair(const T1& x, const T2& y);` constructor is `constexpr`\nonly starting from C++14; relying on this breaks compilation on certain\ncompilers/platforms we need to support.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7519\n\nTest Plan: `make check`\n\nReviewed By: ajkr\n\nDifferential Revision: D24195747\n\nPulled By: ltamasi\n\nfbshipit-source-id: 665e8fbc9747675bb49c5d895aad3dcf2714750f",
        "modified_files_count": 1,
        "modified_files": [
            "db/blob/blob_file_reader_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/810ab34ede79f9fea6ad1bd751366846c875adf8"
    },
    {
        "hash": "98c133380604b0dc7dbcf161b63c2af80d63c169",
        "author": "Jay Zhuang",
        "date": "2020-10-08T09:40:59-07:00",
        "message": "Disable a known flaky test: RandomAccessUniqueIDDeletes (#7511)\n\nSummary:\nIt's a known issue, which is tracked in https://github.com/facebook/rocksdb/issues/7405, https://github.com/facebook/rocksdb/issues/7470. Disable it for\nnow.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7511\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D24145075\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 1858497972f2baba617867aaeac30d93b8305c80",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/98c133380604b0dc7dbcf161b63c2af80d63c169"
    },
    {
        "hash": "002b30c967a077464a560775434d8493b64fca9f",
        "author": "Yanqin Jin",
        "date": "2020-10-07T20:11:06-07:00",
        "message": "Fix clang analyzer (#7518)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7518\n\nTest Plan:\n```\n$USE_CLANG=1 make analyze\n```\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D24175390\n\nPulled By: riversand963\n\nfbshipit-source-id: c70121652908cf5d450120c38ab65cc595332ca7",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/002b30c967a077464a560775434d8493b64fca9f"
    },
    {
        "hash": "60649aa01b65ecb998d3f19c0327a5ce515455a8",
        "author": "peterpaule",
        "date": "2020-10-07T12:34:34-07:00",
        "message": "Fix wrong comments about function TruncateToPageBoundary. (#6975)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/6975\n\nReviewed By: ajkr\n\nDifferential Revision: D22914797\n\nPulled By: riversand963\n\nfbshipit-source-id: 5be2cd322d41447f638dba1336e96dcdc090f9dd",
        "modified_files_count": 1,
        "modified_files": [
            "util/aligned_buffer.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/60649aa01b65ecb998d3f19c0327a5ce515455a8"
    },
    {
        "hash": "f5e22ce607c0734b32b76ed8fc29dcbdbff75c35",
        "author": "darionyaphet",
        "date": "2020-10-01T15:22:47-07:00",
        "message": "fix dummy collector's name (#7442)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7442\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D24011201\n\nPulled By: ajkr\n\nfbshipit-source-id: 54f24c29875f7575612a780f15a42cda918d6641",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f5e22ce607c0734b32b76ed8fc29dcbdbff75c35"
    },
    {
        "hash": "786c1a2cc475b31449fed9cd17309b09f89cc22c",
        "author": "Levi Tamasi",
        "date": "2020-10-01T10:42:58-07:00",
        "message": "Reduce the number of iterations in DBTest.FileCreationRandomFailure (#7481)\n\nSummary:\n`DBTest.FileCreationRandomFailure` frequently times out during our\ncontinuous test runs. (It's a case of \"stress test posing as unit test.\")\nThe patch reduces the number of iterations to avoid this. Note that\nthe lower numbers are still sufficient to trigger both flushes and\ncompactions, so test coverage is still the same.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7481\n\nTest Plan: `make check`\n\nReviewed By: riversand963\n\nDifferential Revision: D24034712\n\nPulled By: ltamasi\n\nfbshipit-source-id: 8731a9446e5a121a1041b00f0df473b9f714935a",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/786c1a2cc475b31449fed9cd17309b09f89cc22c"
    },
    {
        "hash": "2af46f10112f91298a66d513269705fe609a2461",
        "author": "darionyaphet",
        "date": "2020-09-30T20:24:23-07:00",
        "message": "Move break into block (#7468)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7468\n\nReviewed By: riversand963\n\nDifferential Revision: D24028736\n\nPulled By: ajkr\n\nfbshipit-source-id: bd2b4b8d069491a16373d3d2705fddf7ebfe6723",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/index_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2af46f10112f91298a66d513269705fe609a2461"
    },
    {
        "hash": "e127fe18c3ee0d99b4507f1e2b7cfcb38a653e74",
        "author": "Jay Zhuang",
        "date": "2020-09-30T17:22:56-07:00",
        "message": "Fix TSAN failure for backupable_db_test (#7478)\n\nSummary:\nIt's a transient failure, but can be reproduce with running the test 100\ntimes:\nhttps://app.circleci.com/pipelines/github/facebook/rocksdb/3760/workflows/de909685-f22b-45ba-a8f3-6ebb78a54e96/jobs/37039\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7478\n\nTest Plan: re-run the test 100 times\n\nReviewed By: ajkr\n\nDifferential Revision: D24035758\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 6b31983d5c3f7faa8d5481306098513485d0d69d",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e127fe18c3ee0d99b4507f1e2b7cfcb38a653e74"
    },
    {
        "hash": "718e192965cabb311feb7718d9cb8a2e34958072",
        "author": "Andrew Kryczka",
        "date": "2020-09-30T16:50:24-07:00",
        "message": "Fix flaky intra-L0 consistency failure regression tests (#7477)\n\nSummary:\nDo not assert the number of files after intra-L0 compaction is eligible to run since it could complete (and reduce the number of files) before the assertion executes.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7477\n\nReviewed By: pdillinger\n\nDifferential Revision: D24032049\n\nPulled By: ajkr\n\nfbshipit-source-id: e838ac7a24651ebd643b9e5a9d39d2e789c46929",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/718e192965cabb311feb7718d9cb8a2e34958072"
    },
    {
        "hash": "5f33436285c532936de8870bf22badf1568366dd",
        "author": "sdong",
        "date": "2020-09-30T11:38:39-07:00",
        "message": "Revert an uncessary status code check skipping (#7458)\n\nSummary:\nhttps://github.com/facebook/rocksdb/pull/7452 added an uncessary skip for status code checking. Revert it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7458\n\nTest Plan: Watch CI to finish\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D23994390\n\nfbshipit-source-id: a2b50a6326d8073db3386bff3d32acc5a6666e9b",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5f33436285c532936de8870bf22badf1568366dd"
    },
    {
        "hash": "1600aac46f64f906631f64d036b2ea5359c7ef5f",
        "author": "Andrew Kryczka",
        "date": "2020-09-29T16:06:14-07:00",
        "message": "Flush info log for warning and higher severity (#7462)\n\nSummary:\nAfter unclean crash, the tail of the log could look as follows due to block buffering, even when the call to `ROCKSDB_LOG_ERROR()` finished.\n\n```\n2020/09/29-13:54:39.596710 7f67025fe700 [ERROR] [/db_impl/db_impl_compaction_flush.cc:2500] Waiting after background compaction err\n```\n\nThis PR forces the flush while logging warning severity or higher to prevent that case.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7462\n\nReviewed By: riversand963\n\nDifferential Revision: D24000154\n\nPulled By: ajkr\n\nfbshipit-source-id: 3bf5f1e69a62ee10e84095cebc88937a8f81b4ad",
        "modified_files_count": 1,
        "modified_files": [
            "env/env.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1600aac46f64f906631f64d036b2ea5359c7ef5f"
    },
    {
        "hash": "07dc955a1f774e9f5699cde7cbd24f342297dc3c",
        "author": "Yanqin Jin",
        "date": "2020-09-29T15:27:00-07:00",
        "message": "Report error of GetChildren (#7459)\n\nSummary:\nAs title\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7459\n\nTest Plan: make check\n\nReviewed By: anand1976\n\nDifferential Revision: D23999393\n\nPulled By: riversand963\n\nfbshipit-source-id: 09df8e1637f4df3616c63ee314de397b35be4e4a",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_files.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/07dc955a1f774e9f5699cde7cbd24f342297dc3c"
    },
    {
        "hash": "12ede5ed7cb64ba9d5f4a848be1d940d8085f69f",
        "author": "anand76",
        "date": "2020-09-29T13:29:58-07:00",
        "message": "Remove invalid assertion in compaction_picker_universal.cc (#7421)\n\nSummary:\nThe assertion checks that there is no overlap in sequence numbers across levels in universal compaction. However, this assumption doesn't hold when there is a delete triggered compaction or a trivial move, as they operate on a subset of a level.\n\nTests -\nmake check\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7421\n\nReviewed By: ajkr\n\nDifferential Revision: D23872672\n\nPulled By: anand1976\n\nfbshipit-source-id: c386deab8e01a5746ca996ff1f4ebcae3b15b7d2",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_picker_universal.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/12ede5ed7cb64ba9d5f4a848be1d940d8085f69f"
    },
    {
        "hash": "8c7bac6491ea94a3c431ecb83eec6b9477c6709e",
        "author": "Yanqin Jin",
        "date": "2020-09-28T16:05:11-07:00",
        "message": "Check status for file_reader_writer_test (#7449)\n\nSummary:\nCheck the status for file_reader_writer_test.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7449\n\nTest Plan:\n```\nASSERT_STATUS_CHECKED=1 make -j20 file_reader_writer_test\n./file_reader_writer_test\n```\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D23975609\n\nPulled By: riversand963\n\nfbshipit-source-id: a468eb04b386967fcc0478a56e4f0a19bdf81cdf",
        "modified_files_count": 1,
        "modified_files": [
            "util/file_reader_writer_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8c7bac6491ea94a3c431ecb83eec6b9477c6709e"
    },
    {
        "hash": "c8a12aa94bc78357d008735978c6bb6c0204d4f0",
        "author": "Peter Dillinger",
        "date": "2020-09-25T13:34:36-07:00",
        "message": "EnableFileDeletions only read field while holding mutex (#7435)\n\nSummary:\nPossible fix for a TSAN issue reported in EnableFileDeletions.\ndisable_delete_obsolete_files_ should only be accessed holding the db\nmutex, but for logging it was being accessed outside holding the mutex,\nnow fixed.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7435\n\nTest Plan: existing tests, watch for recurrence\n\nReviewed By: ltamasi\n\nDifferential Revision: D23917578\n\nPulled By: pdillinger\n\nfbshipit-source-id: 8573025bca3f6fe169b24b87bbfc4ce9667b0482",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_files.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c8a12aa94bc78357d008735978c6bb6c0204d4f0"
    },
    {
        "hash": "b005f9693768a4a33eb5e108f43242cba1e4ecb5",
        "author": "rockeet",
        "date": "2020-09-23T09:53:24-07:00",
        "message": "db_iter.cc: DBIter::Next(): minor improve (#7407)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7407\n\nReviewed By: ajkr\n\nDifferential Revision: D23817122\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 62bf43e4d780fad8c682edd750b4800b5b8f4a77",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b005f9693768a4a33eb5e108f43242cba1e4ecb5"
    },
    {
        "hash": "5d6ff693750ccfb63bd03ea2183ac66aab6833aa",
        "author": "mrambacher",
        "date": "2020-09-23T09:34:01-07:00",
        "message": "Fix valgrind issues with configurable_test (#7424)\n\nSummary:\nValgrind was reporting a problem with the configurable_test in some GTEST code.  This problem was caused by using a std::function as a GTEST parameter.  This change changes the test to use a string as a function parameter (backed by a map) and fixes the valgrind issue.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7424\n\nReviewed By: ajkr\n\nDifferential Revision: D23855540\n\nPulled By: pdillinger\n\nfbshipit-source-id: 2f2be03f7f92d96644aa9fa6481e4f37f2cfa5f5",
        "modified_files_count": 1,
        "modified_files": [
            "options/configurable_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5d6ff693750ccfb63bd03ea2183ac66aab6833aa"
    },
    {
        "hash": "cd72f8974bfe81497f5fb94ea14623246f320d1a",
        "author": "Yanqin Jin",
        "date": "2020-09-22T12:37:16-07:00",
        "message": "Allow mutex to be released in GetAggregatedIntProperty (#7412)\n\nSummary:\nCurrent implementation holds db mutex while calling\n`GetAggregatedIntProperty()`. For property kEstimateTableReadersMem,\nthis can be expensive, especially if the number of table readers is\nhigh.\nWe can release and re-acquire db mutex if\nproperty_info.need_out_of_mutex is true.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7412\n\nTest Plan:\nmake check\nCOMPILE_WITH_ASAN=1 make check\nCOMPILE_WITH_TSAN=1 make check\nAlso test internally on a shadow host. Used bpf to verify the\nexcessively long db mutex holding no longer exists when applications\ncall GetApproximateMemoryUsageByType().\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D23794824\n\nPulled By: riversand963\n\nfbshipit-source-id: 6bc02a59fd25613d343a62cf817467c7122c9721",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cd72f8974bfe81497f5fb94ea14623246f320d1a"
    },
    {
        "hash": "6727259eb46b0899d329965d19a99326191d4911",
        "author": "Peter Dillinger",
        "date": "2020-09-22T09:57:05-07:00",
        "message": "Possible fix to flaky db_write_test (#7418)\n\nSummary:\nMake the test robust to spurious wakeups on condition variable,\nand clear sync points to ensure no use-after-free.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7418\n\nTest Plan: repeated runs on updated test, watch CircleCI for recurrence\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D23828823\n\nPulled By: pdillinger\n\nfbshipit-source-id: af85117d9c02602541a90252840e0e5a6996de5b",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_write_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6727259eb46b0899d329965d19a99326191d4911"
    },
    {
        "hash": "323a834d1d23ce1a2b17875709a4e06bedf962f6",
        "author": "yaphet",
        "date": "2020-09-19T18:11:16-07:00",
        "message": "Fix typo (#7353)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7353\n\nReviewed By: ajkr\n\nDifferential Revision: D23585525\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 3f72d9663ec207b9dfe6b287d455a13d3c86879f",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain/plain_table_index.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/323a834d1d23ce1a2b17875709a4e06bedf962f6"
    },
    {
        "hash": "ec024a86de1a1e0035e23fb0ade29ba6984172b4",
        "author": "Andrew Kryczka",
        "date": "2020-09-15T22:44:16-07:00",
        "message": "More robust sync points for intra-L0 compaction tests (#7382)\n\nSummary:\n`IntraL0CompactionAfterFlushCheckConsistencyFail` was flaky by sometimes failing due to no intra-L0 compactions happening. I was able to repro it by putting a `sleep(1)` in the compaction thread before it grabs the lock and picks a compaction. This also showed other intra-L0 tests are affected too, although some of them exhibit hanging forever rather than failing.\n\nThe problem was that all the flushes/ingestions could finish before any compaction got picked, so it would end up simply picking all the files that the test generates for L0->L1. But, these tests intend only the first few files to be picked for L0->L1, and the subsequent files to be picked for intra-L0. This PR adjusts the sync points of all the intra-L0 tests to enforce this.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7382\n\nTest Plan: run all the `db_compaction_test`s with and without the artificial `sleep()`\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D23684985\n\nPulled By: ajkr\n\nfbshipit-source-id: 6508399030dddec7738e9853a7b3dc53ef77a584",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ec024a86de1a1e0035e23fb0ade29ba6984172b4"
    },
    {
        "hash": "a28df7a75a60f71b8ccea9c16a50c5ab420a0290",
        "author": "Yanqin Jin",
        "date": "2020-09-15T20:34:26-07:00",
        "message": "Add basic support for user-defined timestamp to db_bench (#7389)\n\nSummary:\nUpdate db_bench so that we can run it with user-defined timestamp.\nCurrently, only 64-bit timestamp is supported, while others are disabled by assertion.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7389\n\nTest Plan: ./db_bench -benchmarks=fillseq,fillrandom,readrandom,readsequential,....., -user_timestamp_size=8\n\nReviewed By: ltamasi\n\nDifferential Revision: D23720830\n\nPulled By: riversand963\n\nfbshipit-source-id: 486eacbb82de9a5441e79a61bfa9beef6581608a",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a28df7a75a60f71b8ccea9c16a50c5ab420a0290"
    },
    {
        "hash": "a0ac71aae1d1530137a126aa3a3175b389defea1",
        "author": "Peter Dillinger",
        "date": "2020-09-14T14:21:06-07:00",
        "message": "Disable sst_file_manager in stress testing backup restore (#7384)\n\nSummary:\nThis is potentially the cause of failures:\n\n    Failure in Destroy restore dir with: IO error: file rmdir: /dev/shm/rocksdb/rocksdb_crashtest_whitebox/.restore13: Directory not empty\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7384\n\nTest Plan: smoke test blackbox_crash_test\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D23685087\n\nPulled By: pdillinger\n\nfbshipit-source-id: 55f62e9853ce84be1d5ca7d856de867f0f2596ee",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a0ac71aae1d1530137a126aa3a3175b389defea1"
    },
    {
        "hash": "be8445eea8ebf01a5e10ce40195636be41b275c1",
        "author": "Peter Dillinger",
        "date": "2020-09-11T07:58:31-07:00",
        "message": "Assert valid linked list for write group (#7375)\n\nSummary:\nWe've seen some segfaults in db_write_test, with at least one\nsuggesting corruption of a write group linked list. Adding an assertion\nto have this fail in a more specific way if that is the broken\ninvariant.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7375\n\nTest Plan: make check\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D23638477\n\nPulled By: pdillinger\n\nfbshipit-source-id: a76fd677cad60a3a516bd363947bfd9ce418edc1",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_thread.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/be8445eea8ebf01a5e10ce40195636be41b275c1"
    },
    {
        "hash": "e3149358a569d515289ba07648a9b710da4698fd",
        "author": "Peter Dillinger",
        "date": "2020-09-09T11:19:05-07:00",
        "message": "More backup/restore stress test fixes (#7361)\n\nSummary:\n(a) Missed a case in updating handling of rand_keys\n(b) Only opening restored db with DB::Open so don't (yet)\nattempt to open restored BlobDB or TransactionDB.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7361\n\nTest Plan: better than being broken\n\nReviewed By: ajkr\n\nDifferential Revision: D23592570\n\nPulled By: pdillinger\n\nfbshipit-source-id: dd1d999bcc0c852ee77cb6041964ec4abc0fd4fd",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e3149358a569d515289ba07648a9b710da4698fd"
    },
    {
        "hash": "a6ac51b99ab3f1fa1846796a928db25820efae37",
        "author": "mrambacher",
        "date": "2020-09-09T09:07:16-07:00",
        "message": "Fix db_bench_tool_test. Fixes 7341 (#7344)\n\nSummary:\n1.  Failed to compile because of use of FileSystem* instead of Env* to some methods;\n\n2.  Failed to compile with addition of ConfigOptions to some methods\n\n3.  Failed to run successfully because the database and/or db_bench would change some of the options, invalidating the comparison\n\n4.  Failed to run successfully if Snappy was not available.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7344\n\nReviewed By: siying\n\nDifferential Revision: D23501093\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 81fd947e95fff9db8a4c5ff419d69d4c36bef23f",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a6ac51b99ab3f1fa1846796a928db25820efae37"
    },
    {
        "hash": "423d051124a7c0f226b3aa8c40da08c0141b8324",
        "author": "Levi Tamasi",
        "date": "2020-09-08T09:24:23-07:00",
        "message": "Clean up SubcompactionState a bit (#7322)\n\nSummary:\nThe patch cleans up a few things in `CompactionJob::SubcompactionState`:\n\n* Instead of using both the member initializer list and in-class initializers (and\nsometimes both at the same time for the same member), the struct now uniformly\nuses the latter to initialize integer members.\n* The default parameter value for the constructor parameter `size` is removed.\n* The explicitly deleted copy operations are removed, since they are implicitly deleted\nanyways because of the `unique_ptr` members.\n* The handwritten move operations, which did not move the member `c_iter` and\nwere not declared `nothrow`, are removed. Note that with the user-declared copy\noperations gone (see the previous item), we can rely on the compiler to (correctly)\ngenerate these methods.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7322\n\nTest Plan: `make check`\n\nReviewed By: siying\n\nDifferential Revision: D23382408\n\nPulled By: ltamasi\n\nfbshipit-source-id: a4ae5af150161c50ff7bdc07fa145482d0150bfe",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/423d051124a7c0f226b3aa8c40da08c0141b8324"
    },
    {
        "hash": "3f9b75604d995a626b49f2d2d9fada5ec176fe8e",
        "author": "Cheng Chang",
        "date": "2020-09-03T23:17:37-07:00",
        "message": "Fix wrong level args (#7346)\n\nSummary:\nThe level args should be output level instead of input levels.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7346\n\nTest Plan: make check\n\nReviewed By: ajkr\n\nDifferential Revision: D23506373\n\nPulled By: cheng-chang\n\nfbshipit-source-id: b2f701d44c13581c5c10c4dbebded4fcd354d641",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_picker_universal.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3f9b75604d995a626b49f2d2d9fada5ec176fe8e"
    },
    {
        "hash": "679a413f11f6a1ca5bf8ed2ae3702881e0f1b1f8",
        "author": "Hans Holmberg",
        "date": "2020-09-03T14:36:30-07:00",
        "message": "Close databases on benchmark error exits in db_bench (#7327)\n\nSummary:\nDelete database instances to make sure there are no loose threads\nrunning before exit(). This fixes segfaults seen when running\nworkloads through CompositeEnvs with custom file systems.\n\nFor further background on the issues arising when using CompositeEnvs, see the discussion in:\nhttps://github.com/facebook/rocksdb/pull/6878\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7327\n\nReviewed By: cheng-chang\n\nDifferential Revision: D23433244\n\nPulled By: ajkr\n\nfbshipit-source-id: 4e19cf2067e3fe68c2a3fe1823f24b4091336bbe",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/679a413f11f6a1ca5bf8ed2ae3702881e0f1b1f8"
    },
    {
        "hash": "61d5a132c960869e327421751a5e7830cac0ba2e",
        "author": "Bingyi Sun",
        "date": "2020-09-02T20:47:18-07:00",
        "message": "Fix typo: rename \"bounary\" to \"boundary\" in block.cc (#7328)\n\nSummary:\nFix typo in comment for SeekForGetImpl().\nRename \"bounary\" to \"boundary\"\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7328\n\nReviewed By: riversand963\n\nDifferential Revision: D23439748\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 83a34c417c71a3210ce54a090d76c4d5571313f3",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/61d5a132c960869e327421751a5e7830cac0ba2e"
    },
    {
        "hash": "cecdd5d2ab266497757c2c610337a8f45a685933",
        "author": "sdong",
        "date": "2020-08-25T15:42:11-07:00",
        "message": "Parameterize DBBasicTest.CompactBetweenSnapshots (#7301)\n\nSummary:\nDBBasicTest.CompactBetweenSnapshots can time-out in some slow-I/O hosts. Parameterize it so that single test runs shorter.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7301\n\nTest Plan: Run the test and see see different runs are of different configerations in a hacky way.\n\nReviewed By: ltamasi\n\nDifferential Revision: D23277733\n\nfbshipit-source-id: 1f717b4131322d175abf9e211131fe7e9b1ef758",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cecdd5d2ab266497757c2c610337a8f45a685933"
    },
    {
        "hash": "21ce018a3222b3a389b3f722930bafc9291aad8e",
        "author": "sdong",
        "date": "2020-08-24T11:26:09-07:00",
        "message": "Disable fsync in some ExternalSSTFileTest tests (#7303)\n\nSummary:\nSome ExternalSSTFileTest runs very long on some places. Disable fsync in some tests to speed them up.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7303\n\nTest Plan: Run these tests.\n\nReviewed By: riversand963\n\nDifferential Revision: D23280261\n\nfbshipit-source-id: 0dca862e462f9e6d807f393320a1f82aa5b87e59",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/21ce018a3222b3a389b3f722930bafc9291aad8e"
    },
    {
        "hash": "2040bb545b4ebfd8debe0111566340dd2f0b1882",
        "author": "Will Angenent",
        "date": "2020-08-20T02:00:06-07:00",
        "message": "Fixed missing space in DeleteScheduler::BackgroundEmptyTrash log message (#7286)\n\nSummary:\nExample of a faulty log message:\nRate limiting is enabled with penalty 18203625after deleting file ...\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7286\n\nReviewed By: David132639\n\nDifferential Revision: D23215981\n\nPulled By: freewilll\n\nfbshipit-source-id: 8bdbbffea9f2942cc7a652f315a560d61c0f1068",
        "modified_files_count": 1,
        "modified_files": [
            "file/delete_scheduler.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2040bb545b4ebfd8debe0111566340dd2f0b1882"
    },
    {
        "hash": "e6e2f3699c6217583e5180b8ecafb55c569e0e4e",
        "author": "Andrew Kryczka",
        "date": "2020-08-18T09:52:25-07:00",
        "message": "fix doc about kTolerateCorruptedTailRecords recovery (#7270)\n\nSummary:\n- Made it clear only one record in the tail is allowed to have a problem\n- Added detail about the valid use case instead of calling it legacy behavior\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7270\n\nReviewed By: riversand963\n\nDifferential Revision: D23169075\n\nPulled By: ajkr\n\nfbshipit-source-id: 2a4b45aa8641f17efa104523fbad765012a98fb0",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e6e2f3699c6217583e5180b8ecafb55c569e0e4e"
    },
    {
        "hash": "7d0ecab570742c7280628b08ddc03cfd692f484f",
        "author": "Peter Dillinger",
        "date": "2020-08-17T22:07:17-07:00",
        "message": "Fix some flaky tests in BackupableDBTest with intentional flushing (#7273)\n\nSummary:\nSome tests like BackupableDBTest.FileCollision and\nShareTableFilesWithChecksumsNewNaming are intermittently failing,\nprobably due to unpredictable flushing with FillDB. This change\nshould fix the failures seen and help to prevent similar flakiness in\nfuture tests in the file.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7273\n\nTest Plan: make check, and with valgrind\n\nReviewed By: siying\n\nDifferential Revision: D23176947\n\nPulled By: pdillinger\n\nfbshipit-source-id: 654b73a64db475f2b9b065ed53a889a8b9083c59",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7d0ecab570742c7280628b08ddc03cfd692f484f"
    },
    {
        "hash": "500eeb6fd3a016833956f9f18aa38003f1a21c80",
        "author": "Zitan Chen",
        "date": "2020-08-17T13:59:21-07:00",
        "message": "Re-enable param tests for backup engine (#7260)\n\nSummary:\nThe param tests did not take any effect previously. This PR re-enables it.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7260\n\nTest Plan: Some manual tests and `./backupable_db_test`.\n\nReviewed By: siying\n\nDifferential Revision: D23140902\n\nPulled By: pdillinger\n\nfbshipit-source-id: cd62b11b926affed25127d9074fa97a1c7f748c4",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/500eeb6fd3a016833956f9f18aa38003f1a21c80"
    },
    {
        "hash": "2ad88ceae93fe564abad6dea1028dab620db077e",
        "author": "matthewvon",
        "date": "2020-08-17T11:57:47-07:00",
        "message": "Populate cf_id member of CompactionJobInfo for OnCompactionBegin (#6938)\n\nSummary:\nLooks like somebody simply missed initializing a member variable. The column family ID, cf_id, is not set during OnCompactionBegin. But it is set properly in the next function for OnCompactionCompleted. Need this cf_id for tracking progress of a Stardog optimize since there may be multiple compactions required for a given column family.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6938\n\nReviewed By: siying\n\nDifferential Revision: D23153235\n\nPulled By: ajkr\n\nfbshipit-source-id: 932938de3a4ebbc7ac89702f655583862587d251",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2ad88ceae93fe564abad6dea1028dab620db077e"
    },
    {
        "hash": "510c66fb75196de9412acf83637a63312e2e7d13",
        "author": "Daniel Smith",
        "date": "2020-08-14T13:37:23-07:00",
        "message": "Typo: s/entires/entries/ (#7248)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7248\n\nReviewed By: ajkr\n\nDifferential Revision: D23108368\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 41765334b0bae26bd74a4d9250b9b98ea7ac6c3f",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/table_properties_collectors.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/510c66fb75196de9412acf83637a63312e2e7d13"
    },
    {
        "hash": "76609cd38a980d974a4872bba71d9fa820a4d6df",
        "author": "Yanqin Jin",
        "date": "2020-08-12T12:03:22-07:00",
        "message": "Fix potential memory leak (#7245)\n\nSummary:\n```\nint* value = new int;\nASSERT_NE(nullptr, value);\n```\n`ASSERT_NE` can expand the expression such that a memory leak is\nreported by clang analyzer.\nWe can remove this ASSERT_NE since we can assume the memory allocation\nmust succeed. Otherwise a bad alloc exception will be thrown and the\nprocess will be killed anyway.\n\nTest plan (dev server):\n```\nUSE_CLANG=1 make analyze\n```\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7245\n\nReviewed By: jay-zhuang\n\nDifferential Revision: D23079641\n\nPulled By: riversand963\n\nfbshipit-source-id: a6739a903f90f8715f6f1ef3e5c8a329245b8e78",
        "modified_files_count": 1,
        "modified_files": [
            "util/timer_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/76609cd38a980d974a4872bba71d9fa820a4d6df"
    },
    {
        "hash": "633bff2f19283d55f91f4d5a3b2d42acd45d4fd9",
        "author": "Remington Brasga",
        "date": "2020-08-10T10:06:08-07:00",
        "message": "Fixed typo on Value mismatch error in db_test (#6587)\n\nSummary:\nThe debug is supposed to print out two keys to show the value mismatch, which was compared just a few lines above.\n\nHowever, the actual print-out is the same values (so they obviously won't be mismatched)\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6587\n\nReviewed By: riversand963\n\nDifferential Revision: D23025279\n\nPulled By: ajkr\n\nfbshipit-source-id: 4c6c35bc60b273f13c08b5464b6f690d8a5cfe41",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/633bff2f19283d55f91f4d5a3b2d42acd45d4fd9"
    },
    {
        "hash": "124fbd96d815f97f66cb1658935185744665ffee",
        "author": "Levi Tamasi",
        "date": "2020-08-05T16:25:14-07:00",
        "message": "Remove assertion from FaultInjectionTestFS::NewDirectory (#7220)\n\nSummary:\nFaultInjectionTestFS::NewDirectory currently asserts that the directory\ncreation on the target filesystem succeeds. This is actually not\nguaranteed since there might be a legitimate I/O error when creating the\ndirectory. The patch removes this assertion.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7220\n\nTest Plan: `make check`\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D22957990\n\nPulled By: ltamasi\n\nfbshipit-source-id: b2e221320d8ce7235cb4897ef5936072412a25b6",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/fault_injection_fs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/124fbd96d815f97f66cb1658935185744665ffee"
    },
    {
        "hash": "18efd760c51886d94fc883acd9dfeb6237a08aab",
        "author": "Adam Retter",
        "date": "2020-08-03T14:34:49-07:00",
        "message": "Add defaults to ReadOptions doc (#7215)\n\nSummary:\nVery small improvements to document the defaults.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7215\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D22902286\n\nfbshipit-source-id: a754d172a0d8e4c03754f6f1771d4a693d60a770",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/18efd760c51886d94fc883acd9dfeb6237a08aab"
    },
    {
        "hash": "4496719450e5446e0fd9e0ef9271094db8a0bf75",
        "author": "zitan",
        "date": "2020-07-28T12:10:39-07:00",
        "message": "Fix data race warning of BackupableDBTest.TableFileWithDbChecksumCorruptedDuringBackup (#7177)\n\nSummary:\nFix the data race warning by removing an unnecessary variable that causes the warning.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7177\n\nTest Plan:\n`COMPILE_WITH_TSAN=1 make backupable_db_test`\n`./backupable_db_test --gtest_filter=*TableFileWithDbChecksumCorruptedDuringBackup*`\n\nReviewed By: riversand963\n\nDifferential Revision: D22774430\n\nPulled By: gg814\n\nfbshipit-source-id: 3b0b1ac344d0375c64da564cc97f98745c289959",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4496719450e5446e0fd9e0ef9271094db8a0bf75"
    },
    {
        "hash": "b0279d386956de7901f000e4a8fd090a38ee358e",
        "author": "Yanqin Jin",
        "date": "2020-07-28T09:39:13-07:00",
        "message": "Header file should not be executable (#7182)\n\nSummary:\nAs title.\nUndo file mode change in https://github.com/facebook/rocksdb/issues/6759 .\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7182\n\nReviewed By: ajkr\n\nDifferential Revision: D22786166\n\nPulled By: riversand963\n\nfbshipit-source-id: 696903069acda42f26bbbf1f2875f5a08b761b42",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/merge_operator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b0279d386956de7901f000e4a8fd090a38ee358e"
    },
    {
        "hash": "69a6d0b411de13a27271ef8cf90121ad2bce1c3a",
        "author": "Cheng Chang",
        "date": "2020-07-25T00:17:12-07:00",
        "message": "Fix RandomAccessFileReaderTest failures on Travis (#7173)\n\nSummary:\nOn Travis, the old `alignment()` returned by `RandomAccessFileReaderTest` is inconsistent with the `GetRequiredBufferAlignment` returned in `RandomAccessFileReader`. This PR removes `alignment()` and consistently use `GetRequiredBufferAlignment` as page size.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7173\n\nTest Plan:\nmake random_access_file_reader_test && ./random_access_file_reader_test\nWatch Travis\n\nReviewed By: siying\n\nDifferential Revision: D22741606\n\nPulled By: cheng-chang\n\nfbshipit-source-id: f28f29a7c993bbc3594ae70ecd186fa8bab9c4f2",
        "modified_files_count": 1,
        "modified_files": [
            "file/random_access_file_reader_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/69a6d0b411de13a27271ef8cf90121ad2bce1c3a"
    },
    {
        "hash": "7e37a5918cbe18e6aca0751d9ff01c0e1dc3b055",
        "author": "Akanksha Mahajan",
        "date": "2020-07-24T14:47:00-07:00",
        "message": "Fix for flaky test BackupableDBTest.RateLimiting (#7167)\n\nSummary:\nBackupableDBTest.RateLimiting test is failing due to timed out\non our test server. It might be because of nested loops run sequentially that test different type of combinations of parameters. This patch converts the test into parameterized test so that all combinations can be tested out.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7167\n\nTest Plan: make check -j64\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D22709531\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 95518153e87b3b5311a6c1960a191bca58898786",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7e37a5918cbe18e6aca0751d9ff01c0e1dc3b055"
    },
    {
        "hash": "0c5bb10f06d549b82e1c86f00bfa436abd333959",
        "author": "Jay Zhuang",
        "date": "2020-07-24T14:14:14-07:00",
        "message": "Remove redundant ROCKSDB_LITE check (#7172)\n\nSummary:\nIt's already inside of a `#ifdef ROCKSDB_LITE` block.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7172\n\nReviewed By: gg814\n\nDifferential Revision: D22736057\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 31f4aa05aba98e2e42fa6f890fa72acf3a0f12f2",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0c5bb10f06d549b82e1c86f00bfa436abd333959"
    },
    {
        "hash": "4a60cb20ad384e9a847e945f46493a47691019ae",
        "author": "Jason Volk",
        "date": "2020-07-22T15:03:22-07:00",
        "message": "Fix bug in MultiRead() coalescing introduced in 4fc216649d (#6446). (#6979)\n\nSummary:\nTryMerge() overzealously creates one huge file read request in an attempt to merge smaller disjoint requests. For example, ~30 input requests of ~100 bytes output as 1 request of 100 MiB causing alarmingly large read throughputs to be repeatedly observed by the environment.\n\nSigned-off-by: Jason Volk <jason@zemos.net>\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6979\n\nReviewed By: siying\n\nDifferential Revision: D22668892\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 7506fe9621b7f1a747dadf6b8ddb1b1a141c1937",
        "modified_files_count": 1,
        "modified_files": [
            "file/random_access_file_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4a60cb20ad384e9a847e945f46493a47691019ae"
    },
    {
        "hash": "96ce0470a71be5464b912fa4be41f9a6b2dd405d",
        "author": "Cheng Chang",
        "date": "2020-07-22T13:54:01-07:00",
        "message": "Clean snapshot dir before taking snapshot (#7156)\n\nSummary:\n`DBTest::SnapshotFiles` runs the tests in a `while` loop.\nCurrently, the snapshot directory is not cleaned up in each loop, so previous snapshot files may remain in the next loop's snapshot.\nWhen I'm working on https://github.com/facebook/rocksdb/pull/7129, when checking the tracked WALs in MANIFEST, I find that this test always fails because it reads some unknown WAL. It turns out that the unknown WAL is left from previous loops.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7156\n\nTest Plan: make db_test && ./db_test --gtest_filters=*SnapshotFiles\n\nReviewed By: siying\n\nDifferential Revision: D22668360\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 69d4aa3506038ba30e218e8ae966357935a99c6c",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/96ce0470a71be5464b912fa4be41f9a6b2dd405d"
    },
    {
        "hash": "1cf4731dbb4ceb43451ed0996940a43a58a8b17e",
        "author": "sdong",
        "date": "2020-07-20T14:19:48-07:00",
        "message": "column_family_test: fix a data race related to sleeping task (#7150)\n\nSummary:\nTSAN reports warning in one column_family_test:\n\nWARNING: ThreadSanitizer: data race (pid=16352)\n  Write of size 8 at 0x7ffcdf042158 by main thread:\n    #0 pthread_cond_destroy <null> (column_family_test+0x471f65)\n    https://github.com/facebook/rocksdb/issues/1 rocksdb::port::CondVar::~CondVar() /home/circleci/project/port/port_posix.cc:101:49 (column_family_test+0x8a627a)\n    https://github.com/facebook/rocksdb/issues/2 rocksdb::test::SleepingBackgroundTask::~SleepingBackgroundTask() /home/circleci/project/./test_util/testutil.h:397:7 (column_family_test+0x54b6e2)\n    https://github.com/facebook/rocksdb/issues/3 rocksdb::ColumnFamilyTest_FlushCloseWALFiles_Test::TestBody() /home/circleci/project/db/column_family_test.cc:3008:1 (column_family_test+0x54b6e2)\n......\n  Previous read of size 8 at 0x7ffcdf042158 by thread T2 (mutexes: write M0):\n    #0 pthread_cond_broadcast <null> (column_family_test+0x471dd2)\n    https://github.com/facebook/rocksdb/issues/1 rocksdb::port::CondVar::SignalAll() /home/circleci/project/port/port_posix.cc:139:28 (column_family_test+0x8a651a)\n    https://github.com/facebook/rocksdb/issues/2 rocksdb::test::SleepingBackgroundTask::DoSleep() /home/circleci/project/./test_util/testutil.h:412:12 (column_family_test+0x58574b)\n......\n\nLikely, SleepingBackgroundTask::DoSleep() started to execute after the main thread has finished everything, cancelled and waited for sleeping tasks to finish. At this time, although DoSlee() will not sleep, but it also accesses the mutex, creating a data race with destructor of the test. Fix this bug by waiting for the sleeping task to start sleeping after it is scheduled.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7150\n\nTest Plan: Run these modified tests and make sure it doesn't break.\n\nReviewed By: riversand963\n\nDifferential Revision: D22630716\n\nfbshipit-source-id: cc5781cf69083685de406490438898238bdfc2d3",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1cf4731dbb4ceb43451ed0996940a43a58a8b17e"
    },
    {
        "hash": "9870704420a0a49ca64fe2fb0137e67caff378c1",
        "author": "sdong",
        "date": "2020-07-20T12:12:43-07:00",
        "message": "Fix a minor data race in stats dumping threads initialization (#7151)\n\nSummary:\nhttps://github.com/facebook/rocksdb/pull/7145 creates a minor data race against the stat creation counter. Turn it to atomic.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7151\n\nTest Plan: Run the test.\n\nReviewed By: ajkr\n\nDifferential Revision: D22631014\n\nfbshipit-source-id: c6fb69ac5b9df7139795dacea5ce9fb9fd3278d7",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9870704420a0a49ca64fe2fb0137e67caff378c1"
    },
    {
        "hash": "ed4712fe7ecf1d97fe0e6816334a01ceda4f7c41",
        "author": "Zhichao Cao",
        "date": "2020-07-17T23:27:21-07:00",
        "message": "Remove time out testing cases in error_handler_fs_test (#7141)\n\nSummary:\nRemove the 3 testing cases that cause the time out in linux build by https://github.com/facebook/rocksdb/issues/6765 . Will fix them later.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7141\n\nTest Plan: make asan_check, buck run\n\nReviewed By: ajkr\n\nDifferential Revision: D22593831\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 14956c36476ecc3393f613178c22e13df843126e",
        "modified_files_count": 1,
        "modified_files": [
            "db/error_handler_fs_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ed4712fe7ecf1d97fe0e6816334a01ceda4f7c41"
    },
    {
        "hash": "ee8c79d40d8bcbd13ce6e479fe36851da97947ac",
        "author": "Levi Tamasi",
        "date": "2020-07-15T13:19:14-07:00",
        "message": "Turn the compression_type check in BlobDBImpl::DecompressSlice into an assertion (#7127)\n\nSummary:\nIn both cases where `BlobDBImpl::DecompressSlice` is called,\n`compression_type` is already checked at the call site; thus, the check\ninside the method is redundant and can be turned into an assertion.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7127\n\nTest Plan: `make check`\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D22533454\n\nPulled By: ltamasi\n\nfbshipit-source-id: ae524443fc6abe0a5fb12327a3fe761a9cd2c831",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ee8c79d40d8bcbd13ce6e479fe36851da97947ac"
    },
    {
        "hash": "e8d5a248155268d5d5473a45c505fa193d31741a",
        "author": "yxj25245",
        "date": "2020-07-15T09:23:23-07:00",
        "message": "Fix typo in ThreadData comment (#7131)\n\nSummary:\nFix typo in ThreadData comment\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7131\n\nReviewed By: riversand963\n\nDifferential Revision: D22543135\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 39c9d0e8cd5a364af9a2f05fd3783e8482dea976",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e8d5a248155268d5d5473a45c505fa193d31741a"
    },
    {
        "hash": "c628fae6d1e05163de321b06fcc7bde34989a129",
        "author": "Yanqin Jin",
        "date": "2020-07-13T20:26:58-07:00",
        "message": "Report corruption on unrecognized value type (#7121)\n\nSummary:\nDuring memtable lookup, an unrecognized value type should be reported as\nStatus::Corruption.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7121\n\nTest Plan: make check\n\nReviewed By: cheng-chang\n\nDifferential Revision: D22512124\n\nPulled By: riversand963\n\nfbshipit-source-id: 9b97be7d9b230c5aae9205f96054420e5ea09066",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c628fae6d1e05163de321b06fcc7bde34989a129"
    },
    {
        "hash": "a9a973869afd987a6b728b833b2896dbb38bc02f",
        "author": "Zhichao Cao",
        "date": "2020-07-09T18:12:55-07:00",
        "message": "Fix status message size assert (#7045)\n\nSummary:\nIn status.cc, the assert is `assert(sizeof(msgs) > index)`; msgs is a const char* array, sizeof(msgs) is the array size*char* size, which will make the assert pass all the time. Change it to sizeof(msgs)/sizeof(char*) > index.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7045\n\nTest Plan: pass make check\n\nReviewed By: cheng-chang\n\nDifferential Revision: D22291337\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 4ba8ebbb8da80ace7ca6adcdb0c66726f993659d",
        "modified_files_count": 1,
        "modified_files": [
            "util/status.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a9a973869afd987a6b728b833b2896dbb38bc02f"
    },
    {
        "hash": "f70ad031379ae0ffe2ecfd38d5cc8234bf176349",
        "author": "Yanqin Jin",
        "date": "2020-07-09T11:31:06-07:00",
        "message": "Parameterize a few tests in DBWALTest (#7105)\n\nSummary:\nAs title. The goal is to shorten the execution time of several tests\nwhen they are combined together in a single TEST_F.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7105\n\nTest Plan:\nmake db_wal_test\n./db_wal_test\n\nReviewed By: ltamasi\n\nDifferential Revision: D22442705\n\nPulled By: riversand963\n\nfbshipit-source-id: 0ad49b8f21fa86dcd5a4d3c9a06af313735ac217",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_wal_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f70ad031379ae0ffe2ecfd38d5cc8234bf176349"
    },
    {
        "hash": "cc5c68084b90697a3a1dc0c91115527766b80a10",
        "author": "Zitan Chen",
        "date": "2020-07-08T12:16:19-07:00",
        "message": "Fix flaky BackupableDBTest.TableFileCorruptedBeforeBackup (#7102)\n\nSummary:\nThe fix in PR https://github.com/facebook/rocksdb/issues/7082 is not really successful because there is still a small chance that the test will fail.\n\nIn addtion to flushing, we close the DB and then reopen before corrupting a table file in the DB. Specifically, we corrupt a table file before backup takes place as follows.\n* Open DB\n* Fill DB\n* Flush DB (optional, no flushing here also works)\n* Close DB\n* Reopen DB\n* Corrupt a table file in the DB\n\nThis should make the test reliable.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7102\n\nTest Plan:\n`while ./backupable_db_test --gtest_filter=*TableFileCorruptedBeforeBackup*; do true; done`\n(kept running for an hour or so :)\n\nReviewed By: pdillinger\n\nDifferential Revision: D22432417\n\nPulled By: gg814\n\nfbshipit-source-id: d407eee93ff428bb662f80cde1659fbf0149d0cd",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cc5c68084b90697a3a1dc0c91115527766b80a10"
    },
    {
        "hash": "4b107ceb7ebdf0d2b04443f7ced89587adc291d8",
        "author": "Peter Dillinger",
        "date": "2020-07-06T16:17:02-07:00",
        "message": "Improve code comments in EstimateLiveDataSize (#7072)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/7072\n\nReviewed By: ajkr\n\nDifferential Revision: D22391641\n\nPulled By: pdillinger\n\nfbshipit-source-id: 0ef355576454514263ab684eb1a5c06787f3242a",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4b107ceb7ebdf0d2b04443f7ced89587adc291d8"
    },
    {
        "hash": "ca7659e2c447018e0f08a2147dd881940b209977",
        "author": "Jay Zhuang",
        "date": "2020-07-02T20:53:08-07:00",
        "message": "Fix release build caused by #7067 (#7077)\n\nSummary:\nThe issue is introduced by https://github.com/facebook/rocksdb/issues/7067\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7077\n\nTest Plan: `make release`\n\nReviewed By: pdillinger\n\nDifferential Revision: D22370835\n\nPulled By: jay-zhuang\n\nfbshipit-source-id: 44326bae07809c4518371b6a7d1f47124e24a4f3",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ca7659e2c447018e0f08a2147dd881940b209977"
    },
    {
        "hash": "b5bae48c8a2ba1af0703c26d2bf73c7510ab2d87",
        "author": "Zitan Chen",
        "date": "2020-07-01T17:28:28-07:00",
        "message": "Fix db_id and db_session_id nullptr warning by clang analyzer (#7063)\n\nSummary:\nGetFileDbIdentities requires either db_id non-null or db_session_id non-null.\nPassing nullptr for db_id or db_session_id in CopyOrCreateFile indicates the caller does not want to obtain the value for db_id or db_session_id.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7063\n\nTest Plan:\nUSE_CLANG=1 make analyze\nbackupable_db_test\n\nReviewed By: pdillinger\n\nDifferential Revision: D22338497\n\nPulled By: gg814\n\nfbshipit-source-id: 2aa2dcc14d156b0f99b07d6cf3c731ee088272cd",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b5bae48c8a2ba1af0703c26d2bf73c7510ab2d87"
    },
    {
        "hash": "c25a014792f53cfa2bd7ecbe19a6ec7e11336098",
        "author": "Andrew Kryczka",
        "date": "2020-07-01T14:53:10-07:00",
        "message": "deflake DBCompactionTestWithParam.IntraL0Compaction test (#7065)\n\nSummary:\nThis check is flaky because compaction could run between the `Flush()` and the `TestGetTickerCount()`, which would increase the `BLOCK_CACHE_INDEX_MISS` count beyond what the test expects. Verified by adding a `sleep(1)` between those two lines and observing the counter is too high every time. The solution is just to remove this check as it doesn't have any use anyways. The latter check of index miss is sufficient to conclude the newest L0 file (i.e., the one generated by intra-L0) does not have its index block pinned in cache. It'd be nice to simultaneously check the L0 files generated by flush do have their index blocks pinned in cache, but that's not what the line deleted in this PR was checking..\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7065\n\nReviewed By: pdillinger\n\nDifferential Revision: D22340327\n\nPulled By: ajkr\n\nfbshipit-source-id: e076b2c7228b7fa763dd0c0cb13828e176c1abee",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c25a014792f53cfa2bd7ecbe19a6ec7e11336098"
    },
    {
        "hash": "e2fd501d445a4d419dd13db15d969b943f1cbc67",
        "author": "Peter Dillinger",
        "date": "2020-07-01T13:52:20-07:00",
        "message": "Stabilize DBTest.ApproximateSizesMemTable (#7064)\n\nSummary:\nRandom memtable layouts could cause random failure,\nreproducible with command below running for a while. Test now using\ndeterministic behavior.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7064\n\nTest Plan: while ./db_test --gtest_filter=*SizesMemTable*; do true; done\n\nReviewed By: siying\n\nDifferential Revision: D22339442\n\nPulled By: pdillinger\n\nfbshipit-source-id: 8e74e5a9b5e88f7030854045a22c12cf561d5de6",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e2fd501d445a4d419dd13db15d969b943f1cbc67"
    },
    {
        "hash": "f045ee6422cc8cfa1bfa72a2f24846b35d539e32",
        "author": "Cheng Chang",
        "date": "2020-06-30T14:29:17-07:00",
        "message": "Increase transaction timeout and enable deadlock detection in stress test (#7056)\n\nSummary:\nThere are errors like `Transaction put: Operation timed out: Timeout waiting to lock key\nterminate called without an active exception`, based on experiment on devserver, increasing timeouts can resolve the issue.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7056\n\nTest Plan: watch stress test with txn.\n\nReviewed By: anand1976\n\nDifferential Revision: D22317265\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 2dc3352def5e78d2c39a18d7262a3a65ca98bbba",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f045ee6422cc8cfa1bfa72a2f24846b35d539e32"
    },
    {
        "hash": "2d1d51d3856218a21f634ddf650b249e3a378e66",
        "author": "sdong",
        "date": "2020-06-30T12:01:34-07:00",
        "message": "db_stress: deep clean directory before checkpoint (#7039)\n\nSummary:\nWe see crash test occassionally fails with \"A checkpoint operation failed with: Invalid argument: Directory exists\". The suspicious is that the directory fails to be deleted because some trash files. Deep clean the directory after a DestroyDB() call.\n\nAlso add more debugging printf in case it fails.\nAlso, preserve the DB if verification fails.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7039\n\nTest Plan: Run db_stress with low --checkpoint_one_in value\n\nReviewed By: riversand963\n\nDifferential Revision: D22271694\n\nfbshipit-source-id: 6a9b2abb664fc69a4dc666741df4f6b23703cd6d",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2d1d51d3856218a21f634ddf650b249e3a378e66"
    },
    {
        "hash": "c2b0b696c4bbe510ea0ba871fba7bd659994e02a",
        "author": "Daniel Black",
        "date": "2020-06-25T17:25:42-07:00",
        "message": "filelock_test: add freebsd headers for waitpid (#7010)\n\nSummary:\nPer manual https://www.unix.com/man-page/FreeBSD/2/waitpid\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7010\n\nReviewed By: siying\n\nDifferential Revision: D22176164\n\nPulled By: ajkr\n\nfbshipit-source-id: 0a850ae6f1791d10951d5e4a79cfee01a3981d5a",
        "modified_files_count": 1,
        "modified_files": [
            "util/filelock_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c2b0b696c4bbe510ea0ba871fba7bd659994e02a"
    },
    {
        "hash": "83a4dd1a67c9169b04f5a5dbce90c7999a2cfa46",
        "author": "Zhichao Cao",
        "date": "2020-06-24T11:05:24-07:00",
        "message": "Fix the memory leak in Env_basic_test (#7017)\n\nSummary:\nFix the memory leak broken asan and other test introduced by https://github.com/facebook/rocksdb/issues/6830\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7017\n\nTest Plan: pass asan_check\n\nReviewed By: siying\n\nDifferential Revision: D22190289\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 03a095f698b4f9d72fd9374191b17c890d7c2b56",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/83a4dd1a67c9169b04f5a5dbce90c7999a2cfa46"
    },
    {
        "hash": "dea4063b132c4a566bcf8bd5caca8bc962dfdbe4",
        "author": "sdong",
        "date": "2020-06-19T16:58:29-07:00",
        "message": "Remove an assertion in FlushAfterIntraL0CompactionCheckConsistencyFail (#7003)\n\nSummary:\nFlushAfterIntraL0CompactionCheckConsistencyFail is flakey. It sometimes fails with:\n\ndb/db_compaction_test.cc:5186: Failure\nExpected equality of these values:\n  10\n  NumTableFilesAtLevel(0)\n    Which is: 3\n\nI don't see a clear reason why the assertion would always be true. The necessarily of the assertion is not clear either. Remove it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7003\n\nTest Plan: See the test still builds.\n\nReviewed By: riversand963\n\nDifferential Revision: D22129753\n\nfbshipit-source-id: 42f0bb05e32b369e8d726bfd3e35c29cf52fe008",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dea4063b132c4a566bcf8bd5caca8bc962dfdbe4"
    },
    {
        "hash": "a607f3efaa43e2a83997a247c9c56d9fd61579fd",
        "author": "Zhichao Cao",
        "date": "2020-06-18T22:06:51-07:00",
        "message": "Fix unused variable failure (#7004)\n\nSummary:\npass make check, run db_stress\nPull Request resolved: https://github.com/facebook/rocksdb/pull/7004\n\nReviewed By: ajkr\n\nDifferential Revision: D22132617\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: d65397967e213206ec5efcb767bbdda8a575662a",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_compaction_filter.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a607f3efaa43e2a83997a247c9c56d9fd61579fd"
    },
    {
        "hash": "742b45286345302c268d01e4be2ec19b6e82fc33",
        "author": "Andrew Kryczka",
        "date": "2020-06-16T21:46:05-07:00",
        "message": "update minor version for 6.11 release (#6994)\n\nSummary:\nThe 6.11.fb branch is already cut so I will also backport this PR to\nthat branch.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6994\n\nReviewed By: riversand963\n\nDifferential Revision: D22084532\n\nPulled By: ajkr\n\nfbshipit-source-id: 0b025f738cc31c65c673cbf89302359e88a34d19",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/742b45286345302c268d01e4be2ec19b6e82fc33"
    },
    {
        "hash": "aa8f1331af5029925a42c9929bde27e12ddfe9f3",
        "author": "Levi Tamasi",
        "date": "2020-06-15T14:08:12-07:00",
        "message": "Fix uninitialized memory read in table_test (#6980)\n\nSummary:\nWhen using parameterized tests, `gtest` sometimes prints the test\nparameters. If no other printing method is available, it essentially\nproduces a hex dump of the object. This can cause issues with valgrind\nwith types like `TestArgs` in `table_test`, where the object layout has\ngaps (with uninitialized contents) due to the members' alignment\nrequirements. The patch fixes the uninitialized reads by providing an\n`operator<<` for `TestArgs` and also makes sure all members are\ninitialized (in a consistent order) on all code paths.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6980\n\nTest Plan: `valgrind --leak-check=full ./table_test`\n\nReviewed By: siying\n\nDifferential Revision: D22045536\n\nPulled By: ltamasi\n\nfbshipit-source-id: 6f5920ac28c712d0aa88162fffb80172ed769c32",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aa8f1331af5029925a42c9929bde27e12ddfe9f3"
    },
    {
        "hash": "bacd6edcbea12a404a51abcd6e7be3a46be53ce5",
        "author": "Levi Tamasi",
        "date": "2020-06-12T17:31:06-07:00",
        "message": "Turn HarnessTest in table_test into a parameterized test (#6974)\n\nSummary:\n`HarnessTest` in `table_test.cc` currently tests many parameter\ncombinations sequentially in a loop. This is problematic from\na testing perspective, since if the test fails, we have no way of\nknowing how many/which combinations have failed. It can also cause timeouts on\nour test system due to the sheer number of combinations tested.\n(Specifically, the parallel compression threads parameter added by\nhttps://github.com/facebook/rocksdb/pull/6262 seems to have been the last straw.)\nThere is some DIY code there that splits the load among eight test cases\nbut that does not appear to be sufficient anymore.\n\nInstead, the patch turns `HarnessTest` into a parameterized test, so all the\nparameter combinations can be tested separately and potentially\nconcurrently. It also cleans up the tests a little, fixes\n`RandomizedLongDB`, which did not get updated when the parallel\ncompression threads parameter was added, and turns `FooterTests` into a\nstandalone test case (since it does not actually need a fixture class).\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6974\n\nTest Plan: `make check`\n\nReviewed By: siying\n\nDifferential Revision: D22029572\n\nPulled By: ltamasi\n\nfbshipit-source-id: 51baea670771c33928f2eb3902bd69dcf540aa41",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bacd6edcbea12a404a51abcd6e7be3a46be53ce5"
    },
    {
        "hash": "d854abad78a61d939e6dd267d9b4a811946ae41d",
        "author": "Levi Tamasi",
        "date": "2020-06-11T18:32:18-07:00",
        "message": "Revisit the handling of the case when a file is re-added to the same level (#6939)\n\nSummary:\nhttps://github.com/facebook/rocksdb/pull/6901 subtly changed the handling of the corner case\nwhen a table file is deleted from a level, then re-added to the same level. (Note: this\nshould be extremely rare; one scenario that comes to mind is a trivial move followed by\na call to `ReFitLevel` that moves the file back to the original level.) Before that change,\na new `FileMetaData` object was created as a result of this sequence; after the change,\nthe original `FileMetaData` was essentially resurrected (since the deletion and the addition\nsimply cancel each other out with the change). This patch restores the original behavior,\nwhich is more intuitive considering the interface, and in sync with how trivial moves are handled.\n(Also note that `FileMetaData` contains some mutable data members, the values of which\nmight be different in the resurrected object and the freshly created one.)\nThe PR also fixes a bug in this area: with the original pre-6901 code, `VersionBuilder`\nwould add the same file twice to the same level in the scenario described above.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6939\n\nTest Plan: `make check`\n\nReviewed By: ajkr\n\nDifferential Revision: D21905580\n\nPulled By: ltamasi\n\nfbshipit-source-id: da07ae45384ecf3c6c53506d106432d88a7ec9df",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d854abad78a61d939e6dd267d9b4a811946ae41d"
    },
    {
        "hash": "722ebba834d550ec03d481ecbb7c1e7857cb9fb7",
        "author": "Levi Tamasi",
        "date": "2020-06-11T16:35:39-07:00",
        "message": "Turn DBTest2.CompressionFailures into a parameterized test (#6968)\n\nSummary:\n`DBTest2.CompressionFailures` currently tests many configurations\nsequentially using nested loops, which often leads to timeouts\nin our test system. The patch turns it into a parameterized test\ninstead.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6968\n\nTest Plan: `make check`\n\nReviewed By: siying\n\nDifferential Revision: D22006954\n\nPulled By: ltamasi\n\nfbshipit-source-id: f71f2f7108086b7651ecfce3d79a7fab24620b2c",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/722ebba834d550ec03d481ecbb7c1e7857cb9fb7"
    },
    {
        "hash": "fbe2d259cb55d8f6fec91be4d2b1ee6c36225fdc",
        "author": "Levi Tamasi",
        "date": "2020-06-10T14:04:07-07:00",
        "message": "Use a per-thread path for the export directory in import_column_family_test (#6962)\n\nSummary:\nThis is required so that the test cases can safely be run in parallel.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6962\n\nTest Plan: `make check`\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D21980060\n\nPulled By: ltamasi\n\nfbshipit-source-id: 616b7a0b686155d3874848b9098c67ad3f47efcc",
        "modified_files_count": 1,
        "modified_files": [
            "db/import_column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fbe2d259cb55d8f6fec91be4d2b1ee6c36225fdc"
    },
    {
        "hash": "fb08330f74efb679b68edde2677df2dea61872c1",
        "author": "Zhichao Cao",
        "date": "2020-06-08T10:36:43-07:00",
        "message": "decouple the dependency of trace_analyzer_test unit test (#6941)\n\nSummary:\nSince gflags use the global variable to store the flags passed in. In the unit test, if we git one flag per unit test, the result is that all the flags are combined together in the following tests. Therefore, it has the dependency. In this PR, we pass the full arguments each time to ensure that the old arguments will be overwritten by the new one such that the dependency is removed.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6941\n\nTest Plan: make asan_check. run each unit test in trace_analyzer_test independently and in arbitrary orders.\n\nReviewed By: pdillinger\n\nDifferential Revision: D21909176\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: dca550a0a4a205c30faa620e258a020a3b5b4e13",
        "modified_files_count": 1,
        "modified_files": [
            "tools/trace_analyzer_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fb08330f74efb679b68edde2677df2dea61872c1"
    },
    {
        "hash": "f8c2e5a6084a82e89c89a7a5461a81f7863722c5",
        "author": "Levi Tamasi",
        "date": "2020-06-05T20:10:30-07:00",
        "message": "Do not print messages to stderr in VersionBuilder (#6948)\n\nSummary:\nRocksDB is an embedded library; we should not write to the application's\nconsole. Note: in each case, the same information is returned in the form of a\n`Status::Corruption` object.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6948\n\nTest Plan: `make check`\n\nReviewed By: ajkr\n\nDifferential Revision: D21914965\n\nPulled By: ltamasi\n\nfbshipit-source-id: ae4b66789aa6b659eb8cc2ed4a048187962c86cc",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f8c2e5a6084a82e89c89a7a5461a81f7863722c5"
    },
    {
        "hash": "8988f831d8a98cb371640e5cae8063987ab299b8",
        "author": "Levi Tamasi",
        "date": "2020-06-05T18:16:38-07:00",
        "message": "Fix up a VersionBuilder test case (#6942)\n\nSummary:\nWe currently do not have any validation that would ensure that the `FileMetaData`\nobjects are equivalent when a file gets deleted from the LSM tree and then re-added\n(think trivial moves); however, if we did, this test case would be in violation. The patch\nchanges the values used in the test case so they are consistent.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6942\n\nTest Plan: `make check`\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D21911366\n\nPulled By: ltamasi\n\nfbshipit-source-id: 2f0486f8337373a6a111b6f28433d70507857104",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8988f831d8a98cb371640e5cae8063987ab299b8"
    },
    {
        "hash": "f941adef8826268f2ea3d7cb8baef6e49e2f0c45",
        "author": "Zhichao Cao",
        "date": "2020-06-05T17:45:22-07:00",
        "message": "Clean up the dead code (#6946)\n\nSummary:\nRemove the dead code in table test.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6946\n\nTest Plan: run table_test\n\nReviewed By: riversand963\n\nDifferential Revision: D21913563\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: c0aa9f3b95dfe87dd7fb2cd4823784f08cb3ddd3",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f941adef8826268f2ea3d7cb8baef6e49e2f0c45"
    },
    {
        "hash": "23e446a157626f98666e2151b8033fb196ba602e",
        "author": "Zitan Chen",
        "date": "2020-06-05T17:28:24-07:00",
        "message": "Disable OpenForReadOnly tests in the LITE mode (#6947)\n\nSummary:\nDisable two OpenForReadOnly tests in the LITE mode\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6947\n\nTest Plan: passed db_test2\n\nReviewed By: cheng-chang\n\nDifferential Revision: D21914345\n\nPulled By: gg814\n\nfbshipit-source-id: 58e81baf5d8cf8adcedaef3966aa3a427bbdf7c2",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/23e446a157626f98666e2151b8033fb196ba602e"
    },
    {
        "hash": "6cbe9d97626cbb9dc2bbf7c6583d8ad013cd2863",
        "author": "sdong",
        "date": "2020-06-04T14:17:11-07:00",
        "message": "Make StringAppendOperatorTest a parameterized test (#6930)\n\nSummary:\nStringAppendOperatorTest right now runs in a mode where RUN_ALL_TESTS() is executed twice for the same test but different settings. This creates a problem with a tool that expects every test to run once. Fix it by using a parameterized test instead.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6930\n\nTest Plan: Run the test and see it passed.\n\nReviewed By: ltamasi\n\nDifferential Revision: D21874145\n\nfbshipit-source-id: 55520b2d7f1ba9f3cba1e2d087fe86f43fb06145",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/merge_operators/string_append/stringappend_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6cbe9d97626cbb9dc2bbf7c6583d8ad013cd2863"
    },
    {
        "hash": "31bd2d790e825b5d62cd8df3acbab1e5f63aef2c",
        "author": "sdong",
        "date": "2020-06-04T11:44:09-07:00",
        "message": "Fix ThreadLocalTest.SequentialReadWriteTest failure when running individually (#6929)\n\nSummary:\nWhen running ThreadLocalTest.SequentialReadWriteTest individually, the test fails with:\n\n] ./thread_local_test --gtest_filter=\"*SequentialReadWriteTest*\"\nNote: Google Test filter = *SequentialReadWriteTest*\n[==========] Running 1 test from 1 test case.\n[----------] Global test environment set-up.\n[----------] 1 test from ThreadLocalTest\n[ RUN      ] ThreadLocalTest.SequentialReadWriteTest\ninternal_repo_rocksdb/repo/util/thread_local_test.cc:144: Failure\n      Expected: IDChecker::PeekId()\n      Which is: 3\nTo be equal to: base_id + 1u\n      Which is: 2\n[  FAILED  ] ThreadLocalTest.SequentialReadWriteTest (1 ms)\n[----------] 1 test from ThreadLocalTest (1 ms total)\n\n[----------] Global test environment tear-down\n[==========] 1 test from 1 test case ran. (1 ms total)\n[  PASSED  ] 0 tests.\n[  FAILED  ] 1 test, listed below:\n[  FAILED  ] ThreadLocalTest.SequentialReadWriteTest\n\n 1 FAILED TEST\n\nIt appears that when running as the first test, PeakId() was updated twice. I didn't dig into it why but it doesn't seem to break the contract. Relax the assertion to make it pass.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6929\n\nTest Plan: Run the test individually and as the whole thread_local_test\n\nReviewed By: riversand963\n\nDifferential Revision: D21873999\n\nfbshipit-source-id: 1dcb6a2e9c38b6afd848027308bfe633342b7548",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/31bd2d790e825b5d62cd8df3acbab1e5f63aef2c"
    },
    {
        "hash": "0b45a68c59d8cdad7b0fb38e115ab63f11ff65f2",
        "author": "sdong",
        "date": "2020-06-04T09:51:38-07:00",
        "message": "env_test */RunMany/* tests to run individually (#6931)\n\nSummary:\nWhen run */RunMany/* tests individually, e.g. ChrootEnvWithDirectIO/EnvPosixTestWithParam.RunMany/0, they hang. It's because they insert to background thread pool without initializing them. Fix it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6931\n\nTest Plan: Run ChrootEnvWithDirectIO/EnvPosixTestWithParam.RunMany/0 by itself and see it passes.\n\nReviewed By: riversand963\n\nDifferential Revision: D21875603\n\nfbshipit-source-id: 7f848174c1a660254a2b1f7e11cca5370793ba30",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0b45a68c59d8cdad7b0fb38e115ab63f11ff65f2"
    },
    {
        "hash": "2f3261831ba492f684a587ce28fff72466c1cc32",
        "author": "Yanqin Jin",
        "date": "2020-06-04T08:30:42-07:00",
        "message": "Fix a typo (bug) when setting error during Flush (#6928)\n\nSummary:\nAs title. The prior change to the line is a typo. Fixing it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6928\n\nTest Plan: make check\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D21873587\n\nPulled By: riversand963\n\nfbshipit-source-id: f4837fc8792d7106bc230b7b499dfbb7a2847430",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2f3261831ba492f684a587ce28fff72466c1cc32"
    },
    {
        "hash": "f005dac2d9887308dff54730e75032ef5f5b91a3",
        "author": "hfrt456",
        "date": "2020-06-03T13:50:17-07:00",
        "message": "fix IsDirectory function in env_hdfs.cc (#6917)\n\nSummary:\nfix IsDirectory function for hdfsEnv\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6917\n\nReviewed By: cheng-chang\n\nDifferential Revision: D21865020\n\nPulled By: riversand963\n\nfbshipit-source-id: ad69ed564d027b7bbdf4c693dd57cd02622fb3f8",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_hdfs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f005dac2d9887308dff54730e75032ef5f5b91a3"
    },
    {
        "hash": "ffe08ffcc2ea50dea4dca7b7b92a30021d3d3c96",
        "author": "Hao Chen",
        "date": "2020-06-03T12:27:13-07:00",
        "message": "correct level information in version_set.cc (#6920)\n\nSummary:\nfix these two issues https://github.com/facebook/rocksdb/issues/6912  and https://github.com/facebook/rocksdb/issues/6667\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6920\n\nReviewed By: cheng-chang\n\nDifferential Revision: D21864885\n\nPulled By: ajkr\n\nfbshipit-source-id: 10e21fc1851b67a59d44358f59c64fa5523bd263",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ffe08ffcc2ea50dea4dca7b7b92a30021d3d3c96"
    },
    {
        "hash": "66942e81580ba6c04e6fcf56252a77735c240651",
        "author": "anand76",
        "date": "2020-06-01T19:43:37-07:00",
        "message": "Avoid unnecessary reads of uncompression dictionary in MultiGet (#6906)\n\nSummary:\nWe may sometimes read the uncompression dictionary when its not\nnecessary, when we lookup a key in an SST file but the index indicates\nthe key is not present. This can happen with index_type 3.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6906\n\nTest Plan: make check\n\nReviewed By: cheng-chang\n\nDifferential Revision: D21828944\n\nPulled By: anand1976\n\nfbshipit-source-id: 7aef4f0a39548d0874eafefd2687006d2652f9bb",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/66942e81580ba6c04e6fcf56252a77735c240651"
    },
    {
        "hash": "bcb9e41080deaae9be60c0d483fe015db9b6d9c4",
        "author": "Cheng Chang",
        "date": "2020-06-01T15:19:40-07:00",
        "message": "Explicitly free allocated buffer when status is not ok (#6903)\n\nSummary:\nCurrently we rely on `BlockContents` to implicitly free the allocated scratch buffer, but when IO error happens, it doesn't make sense to construct the `BlockContents` which might be corrupted. In the stress test, we find that `assert(req.result.size() == block_size(handle));` fails because of potential IO errors.\n\nIn this PR, we explicitly free the scratch buffer on error without constructing `BlockContents`.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6903\n\nTest Plan: watch stress test\n\nReviewed By: anand1976\n\nDifferential Revision: D21823869\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 5603fc80e9bf3f44a9d7250ddebd871afe1eb89f",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bcb9e41080deaae9be60c0d483fe015db9b6d9c4"
    },
    {
        "hash": "038e02d8d9d35d0734c1c522dec8a74d90486825",
        "author": "zitan",
        "date": "2020-06-01T12:15:36-07:00",
        "message": "Remove extraneous newline from ldb stderr (#6897)\n\nSummary:\n**Summary**\nRemove the extraneous newline when using ldb tool. For example, the subcommand list_column_families will print an empty line to stderr even if there are no errors.\n\n**Test plan**\nPassed make check; manually tested a few ldb subcommands.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6897\n\nReviewed By: pdillinger\n\nDifferential Revision: D21819352\n\nPulled By: gg814\n\nfbshipit-source-id: 5a16a6431bb96684fe97647f4d3ac5bf0ec7fc90",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/038e02d8d9d35d0734c1c522dec8a74d90486825"
    },
    {
        "hash": "82a82c76e702176bd5bfb92dafb354597af099c1",
        "author": "Cheng Chang",
        "date": "2020-05-26T15:29:04-07:00",
        "message": "Fix potential memory leak of scratch buffer (#6879)\n\nSummary:\nIf `req.scratch` is an internally allocated buffer, but `raw_block_contents` is not constructed to own `req.scratch`, then `req.scratch` will be leaked.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6879\n\nTest Plan: make asan_check\n\nReviewed By: anand1976\n\nDifferential Revision: D21728498\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 8fc6a4f2543918c565ddc16ecfad1807eb9a42cf",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/82a82c76e702176bd5bfb92dafb354597af099c1"
    },
    {
        "hash": "b464a85e337ea801eabff0595a933c4e6fc793dd",
        "author": "Andrew Kryczka",
        "date": "2020-05-24T15:27:24-07:00",
        "message": "fix transaction rollback in db_stress TestMultiGet (#6873)\n\nSummary:\nThere were further uses of `txn` after `RollbackTxn(txn)` leading to\nstress test errors. Moved the rollback to the end of the function.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6873\n\nTest Plan:\nfound a command from the crash test that previously failed immediately under TSAN; verified now it succeeds.\n```\n./db_stress --acquire_snapshot_one_in=10000 --allow_concurrent_memtable_write=1 --avoid_flush_during_recovery=0 --avoid_unnecessary_blocking_io=1 --block_size=16384 --bloom_bits=222.913637674 --bottommost_compression_type=none --cache_index_and_filter_blocks=1 --cache_size=1048576 --checkpoint_one_in=0 --checksum_type=kCRC32c --clear_column_family_one_in=0 --compact_files_one_in=1000000 --compact_range_one_in=1000000 --compaction_style=1 --compaction_ttl=0 --compression_max_dict_bytes=0 --compression_parallel_threads=1 --compression_type=zstd --compression_zstd_max_train_bytes=0 --continuous_verification_interval=0 --db=/dev/shm/rocksdb/rocksdb_crashtest_whitebox --db_write_buffer_size=1048576 --delpercent=5 --delrangepercent=0 --destroy_db_initially=0 --disable_wal=0 --enable_pipelined_write=0 --flush_one_in=1000000 --format_version=5 --get_current_wal_file_one_in=0 --get_live_files_one_in=1000000 --get_sorted_wal_files_one_in=0 --index_block_restart_interval=12 --index_type=2 --key_len_percent_dist=1,30,69 --level_compaction_dynamic_level_bytes=True --log2_keys_per_lock=22 --long_running_snapshots=0 --max_background_compactions=20 --max_bytes_for_level_base=10485760 --max_key=1000000 --max_key_len=3 --max_manifest_file_size=1073741824 --max_write_batch_group_size_bytes=1048576 --max_write_buffer_number=3 --memtablerep=skip_list --mmap_read=1 --mock_direct_io=False --nooverwritepercent=1 --num_levels=1 --open_files=100 --ops_per_thread=200000 --partition_filters=1 --pause_background_one_in=1000000 --periodic_compaction_seconds=0 --prefixpercent=5 --progress_reports=0 --read_fault_one_in=0 --readpercent=45 --recycle_log_file_num=0 --reopen=20 --snapshot_hold_ops=100000 --subcompactions=4 --sync=0 --sync_fault_injection=False --target_file_size_base=2097152 --target_file_size_multiplier=2 --test_batches_snapshots=0 --txn_write_policy=1 --unordered_write=1 --use_block_based_filter=0 --use_direct_io_for_flush_and_compaction=0 --use_direct_reads=0 --use_full_merge_v1=1 --use_merge=1 --use_multiget=1 --use_txn=1 --verify_checksum=1 --verify_checksum_one_in=1000000 --verify_db_one_in=100000 --write_buffer_size=4194304 --write_dbid_to_manifest=0 --writepercent=35\n```\n\nReviewed By: pdillinger\n\nDifferential Revision: D21708338\n\nPulled By: ajkr\n\nfbshipit-source-id: dcf55cddee0a14f429a75e7a8a505acf8025f2b1",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b464a85e337ea801eabff0595a933c4e6fc793dd"
    },
    {
        "hash": "bcd32560dd5898956b9d24553c2bb3c1b1d2319f",
        "author": "Marek Kurdej",
        "date": "2020-05-22T11:20:13-07:00",
        "message": "Fix warning -Wextra-semi. NFC. (#6869)\n\nSummary:\nMinor fix.\n\nCLA signed.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6869\n\nReviewed By: ajkr\n\nDifferential Revision: D21704001\n\nPulled By: pdillinger\n\nfbshipit-source-id: 57fd08114f3234f51f34758e25e708cc70962582",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/cassandra/format.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bcd32560dd5898956b9d24553c2bb3c1b1d2319f"
    },
    {
        "hash": "826295a5e9d62e90d6773e1b1221d650de2f3fe4",
        "author": "mrambacher",
        "date": "2020-05-21T14:48:10-07:00",
        "message": "Change autovector to have a reserved size in LITE mode (#6868)\n\nSummary:\nPreviously in LITE mode, an autovector did not have a reserved size. When\nelements were added to the vector, the underlying array could be reallocated.\n\nThere was a set of code that never expands the autovector and was doing &autovector::back().  When the vector is resized, the old addresses may become invalid, causing a later exception to be thrown.\n\nBy reserving space in the autovector up front, this problem is eliminated for those uses where the vector will never exceed the initial size.\n\nthe resize happens, these pointers become invalid, leading to SEGV or other exceptions.\n\nThis change allows the autovector to be fully populated before we take the address of any of its elements, thereby elminating the potential for a resize.\n\nThere is comparable code to this change in Version::MultiGet for dealing with the context objects.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6868\n\nReviewed By: ajkr\n\nDifferential Revision: D21693505\n\nPulled By: cheng-chang\n\nfbshipit-source-id: e71d516b15e08f202593cb80f2a42f048fc95768",
        "modified_files_count": 1,
        "modified_files": [
            "util/autovector.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/826295a5e9d62e90d6773e1b1221d650de2f3fe4"
    },
    {
        "hash": "eb04bb86c6e713230ab07ee7ab919feeb9f891e0",
        "author": "anand76",
        "date": "2020-05-20T14:47:05-07:00",
        "message": "Fix a bug in crash_test_with_txn (#6860)\n\nSummary:\nIn NoBatchedOpsStress::TestMultiGet, call txn->Get() when transactions\nare in use.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6860\n\nTest Plan: make crash_test_with_txn\n\nReviewed By: pdillinger\n\nDifferential Revision: D21667249\n\nPulled By: anand1976\n\nfbshipit-source-id: 194bd7b9630a8efc3ae29d85422a61214e9e200e",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eb04bb86c6e713230ab07ee7ab919feeb9f891e0"
    },
    {
        "hash": "39b24432d42dd6eef63af29ad850b618b0ec65f6",
        "author": "anand76",
        "date": "2020-05-19T12:47:22-07:00",
        "message": "Strengthen MultiGet correctness verification in NoBatchedOpsStress (#6849)\n\nSummary:\nAdd MultiGet to VerifyDb and check consistency with Get in TestMultiGet.\n\nTest plan -\nmake crash_test\nASAN crash test\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6849\n\nReviewed By: pdillinger\n\nDifferential Revision: D21635011\n\nPulled By: anand1976\n\nfbshipit-source-id: deb5a79d08fefd8d8010204f1f20b83adc92310e",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/39b24432d42dd6eef63af29ad850b618b0ec65f6"
    },
    {
        "hash": "1551f1011ab419d21ac50be4b894cf3f688b30d7",
        "author": "Levi Tamasi",
        "date": "2020-05-19T10:00:04-07:00",
        "message": "Refactor the blob file related logic in VersionBuilder (#6835)\n\nSummary:\nThis patch is groundwork for an upcoming change to store the set of\nlinked SSTs in `BlobFileMetaData`. With the current code, a new\n`BlobFileMetaData` object is created each time a `VersionEdit` touches\na certain blob file. This is fine as long as these objects are lightweight\nand cheap to create; however, with the addition of the linked SST set, it would\nbe very inefficient since the set would have to be copied over and over again.\nNote that this is the same kind of problem that `VersionBuilder` is solving\nw/r/t `Version`s and files, and we can apply the same solution; that is, we can\naccumulate the changes in a different mutable object, and apply the delta in\none shot when the changes are committed. The patch does exactly that by\nadding a new `BlobFileMetaDataDelta` class to `VersionBuilder`. In addition,\nit turns the existing `GetBlobFileMetaData` helper into `IsBlobFileInVersion`\n(which is fine since that's the only thing the method's clients care about now),\nand adds a couple of helper methods that can create a `BlobFileMetaData`\nobject from the `BlobFileMetaData` in the base (if applicable) and the delta\nwhen the `Version` is saved.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6835\n\nTest Plan: `make check`\n\nReviewed By: riversand963\n\nDifferential Revision: D21505187\n\nPulled By: ltamasi\n\nfbshipit-source-id: d81a48c5f2ca7b79d7124c935332a6bcf3d5d988",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1551f1011ab419d21ac50be4b894cf3f688b30d7"
    },
    {
        "hash": "0ac0098705761e0b7486b1c1637410e516e9e97c",
        "author": "mrambacher",
        "date": "2020-05-19T09:22:12-07:00",
        "message": "Make options length longer for sst_dump_test (#6846)\n\nSummary:\nUnder MacOS when running with make -j 8 check, the temporary directory generated was > 100 characters.  This caused the tests to do nothing under MacOS.  Most of them still reported success for doing nothing, but ReadaheadSize was expecting the test to run.\n\nBy making the option name longer, the tests will no run successfully (and do something!)\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6846\n\nReviewed By: ajkr\n\nDifferential Revision: D21576032\n\nfbshipit-source-id: b089cde0d598137b572aa8527cc5459085252af7",
        "modified_files_count": 1,
        "modified_files": [
            "tools/sst_dump_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ac0098705761e0b7486b1c1637410e516e9e97c"
    },
    {
        "hash": "ada700b9062560dff1614fe2fe934bfaf6a9ca94",
        "author": "Cheng Chang",
        "date": "2020-05-18T17:25:57-07:00",
        "message": "Re-read the whole request in direct IO mode when IO uring returns partial result (#6853)\n\nSummary:\nIf both direct IO and IO uring are enabled, when IO uring returns partial result, we'll try to read the remaining part of the request, but the starting address/offset of the remaining part might not be aligned to the block size, in direct IO mode, the unaligned offset causes bug.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6853\n\nTest Plan: run make check with both direct IO and IO uring enabled, this is covered by one of the continuous tests.\n\nReviewed By: anand1976\n\nDifferential Revision: D21603023\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 942f6a11ff21e1892af6c4464e02bab4c707787c",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ada700b9062560dff1614fe2fe934bfaf6a9ca94"
    },
    {
        "hash": "b11a8b1b9a63bf80d48ce91230115fc721361133",
        "author": "Yanqin Jin",
        "date": "2020-05-14T18:50:03-07:00",
        "message": "Fix valgrind error by init memory region (#6842)\n\nSummary:\nAs title. After allocating a memory buffer, initialize its content to 0s.\nThis fixes valgrind issue introduced in https://github.com/facebook/rocksdb/issues/6709.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6842\n\nTest Plan:\n```\n$make valgrind_test\n$valgrind --tool=memcheck --track-origins=yes ./db_test2 --gtest_filter=DBTest2.CompressionFailures\n```\n\nReviewed By: pdillinger\n\nDifferential Revision: D21551848\n\nPulled By: riversand963\n\nfbshipit-source-id: e87a6f413e3f3d92d8e23d8ecc4cf93479c6674c",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b11a8b1b9a63bf80d48ce91230115fc721361133"
    },
    {
        "hash": "06a2dcebea66153fc8efa6ccf7c77ada5c2896ff",
        "author": "Zhichao Cao",
        "date": "2020-05-14T14:58:14-07:00",
        "message": "Move checksum calculation ahead of memory copy (#6844)\n\nSummary:\nOriginally, the checksum of appended data in writable file writer is calculated after the data is copied to the buffer. It will not be able to catch the bit flip happens during copy. Move the checksum calculation before it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6844\n\nTest Plan: pass make asan_check\n\nReviewed By: cheng-chang\n\nDifferential Revision: D21576726\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 0a062a1f19886f6ea0d4e3f557e6f4b799773254",
        "modified_files_count": 1,
        "modified_files": [
            "file/writable_file_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/06a2dcebea66153fc8efa6ccf7c77ada5c2896ff"
    },
    {
        "hash": "50d63a2af01a46dd938dc1b717067339c92da040",
        "author": "anand76",
        "date": "2020-05-13T10:47:15-07:00",
        "message": "Fix LITE build failure in compaction_picker_test (#6839)\n\nSummary:\nFix LITE build.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6839\n\nTest Plan: LITE=1 make check\n\nReviewed By: riversand963\n\nDifferential Revision: D21535808\n\nPulled By: anand1976\n\nfbshipit-source-id: fcad961eca08e13fb0c256c92d18c3c1f1165f22",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_picker_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/50d63a2af01a46dd938dc1b717067339c92da040"
    },
    {
        "hash": "3f218074ee9239d103a09597e05b9de20daf8229",
        "author": "yetingsky",
        "date": "2020-05-11T14:58:25-07:00",
        "message": "fix typo (#6831)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/6831\n\nReviewed By: cheng-chang\n\nDifferential Revision: D21499149\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 2cb76cbf7086677d8cad5c828019e008062f0052",
        "modified_files_count": 1,
        "modified_files": [
            "cache/clock_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3f218074ee9239d103a09597e05b9de20daf8229"
    },
    {
        "hash": "2e9324718af4f26553da9cab044a37e8e120084b",
        "author": "Sagar Vemuri",
        "date": "2020-05-11T13:30:00-07:00",
        "message": "Disable a few timer tests (#6833)\n\nSummary:\nDisable `TimerTest.SingleScheduleRepeatedlyTest` and `TimerTest.MultipleScheduleRepeatedlyTest`. This is to help people to not hit any hangs (https://github.com/facebook/rocksdb/issues/6698) during their development process while I investigate further; I could not reproduce the issue on my dev machine yet. Note that timer is not being utilized anywhere yet.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6833\n\nTest Plan:\n```\nsvemuri@devbig187 ~/rocksdb (timer-disable-test) $ TEST_TMPDIR=/dev/shm ./timer_test\n[==========] Running 2 tests from 1 test case.\n[----------] Global test environment set-up.\n[----------] 2 tests from TimerTest\n[ RUN      ] TimerTest.SingleScheduleOnceTest\n[       OK ] TimerTest.SingleScheduleOnceTest (1 ms)\n[ RUN      ] TimerTest.MultipleScheduleOnceTest\n[       OK ] TimerTest.MultipleScheduleOnceTest (0 ms)\n[----------] 2 tests from TimerTest (1 ms total)\n\n[----------] Global test environment tear-down\n[==========] 2 tests from 1 test case ran. (1 ms total)\n[  PASSED  ] 2 tests.\n\n  YOU HAVE 2 DISABLED TESTS\n```\n\nReviewed By: pdillinger\n\nDifferential Revision: D21502474\n\nPulled By: sagar0\n\nfbshipit-source-id: ac67caee2011fd14ffb2476a8914a6286a4f9abe",
        "modified_files_count": 1,
        "modified_files": [
            "util/timer_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2e9324718af4f26553da9cab044a37e8e120084b"
    },
    {
        "hash": "3a1c29d40ebcebb5d0815a64733bfe93e7c782b0",
        "author": "Derrick Pallas",
        "date": "2020-05-08T20:49:33-07:00",
        "message": "Add missing my_pid to fprintf in multi_process_example (#6731)\n\nSummary:\nSigned-off-by: Derrick Pallas <derrick@pallas.us>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6731\n\nReviewed By: siying\n\nDifferential Revision: D21137005\n\nPulled By: riversand963\n\nfbshipit-source-id: a7182e1bec225bc110971f40e2d0e6c3a671c061",
        "modified_files_count": 1,
        "modified_files": [
            "examples/multi_processes_example.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3a1c29d40ebcebb5d0815a64733bfe93e7c782b0"
    },
    {
        "hash": "d9cd33516a3ddf92e3a83cc996554e2a2848c33c",
        "author": "sdong",
        "date": "2020-05-08T14:14:00-07:00",
        "message": "Suppress UBSAN warning in CRC32 ARM (#6827)\n\nSummary:\nUBSAN shows following warning:\n\nutil/crc32c_arm64.cc:111:11: runtime error: load of misaligned address 0x00001afcda86 for type 'const uint64_t', which requires 8 byte alignment\n0x00001afcda86: note: pointer points here\ncc c1 2d 00 01 81  40 24 30 66 39 66 30 37  30 63 2d 32 36 63 34 2d  34 62 61 61 2d 38 35 33  31 2d\n^\n\nSuppress it just as what we do in x86 CRC.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6827\n\nTest Plan: Run the same UBSAN and see it to pass now.\n\nReviewed By: ltamasi\n\nDifferential Revision: D21471838\n\nfbshipit-source-id: 02943dd39a7030d2b03e5d894dcb23ed72b6c9c3",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c_arm64.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d9cd33516a3ddf92e3a83cc996554e2a2848c33c"
    },
    {
        "hash": "f286fb344be3702e927f35cc5d022a4e025f99a0",
        "author": "anand76",
        "date": "2020-05-07T15:55:29-07:00",
        "message": "Include options.h in table.h (#6823)\n\nSummary:\nhttps://github.com/facebook/rocksdb/issues/6389 replaced the #include of options.h in table.h with forward declarations, which is causing some build failures in RocksDB users in 6.10. Remove the forward declarations and #include options.h as recommended by the style guide - https://google.github.io/styleguide/cppguide.html#Forward_Declarations\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6823\n\nReviewed By: riversand963\n\nDifferential Revision: D21464078\n\nPulled By: anand1976\n\nfbshipit-source-id: 6033ee2544d279690f57bb0db91bc83816cee11d",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/table.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f286fb344be3702e927f35cc5d022a4e025f99a0"
    },
    {
        "hash": "91bc0130fa0790a77694c4a9c352fbbaa55b9f80",
        "author": "Cheng Chang",
        "date": "2020-05-05T11:09:29-07:00",
        "message": "Refactor level compaction picker (#6804)\n\nSummary:\n1. refactor out PickFileToCompact to remove duplicated logic.\n2. remove redundant checks of `start_level_inputs_.empty()`.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6804\n\nTest Plan: make check\n\nReviewed By: siying\n\nDifferential Revision: D21390053\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 185d5987a08bfdaf63f0f245310c6da69878d415",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_picker_level.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/91bc0130fa0790a77694c4a9c352fbbaa55b9f80"
    },
    {
        "hash": "d9e170d82beb044dd4d043ae87ceaf8577246ea9",
        "author": "Mian Qin",
        "date": "2020-05-04T10:55:14-07:00",
        "message": "Fix issues for reproducing synthetic ZippyDB workloads in the FAST20' paper (#6795)\n\nSummary:\nFix issues for reproducing synthetic ZippyDB workloads in the FAST20' paper using db_bench. Details changes as follows.\n1, add a separate random mode in MixGraph to produce all_random workload.\n2, fix power inverse function for generating prefix_dist workload.\n3, make sure key_offset in prefix mode is always unsigned.\nnote: Need to carefully choose key_dist_a/b to avoid aliasing. Power inverse function range should be close to overall key space.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6795\n\nReviewed By: akankshamahajan15\n\nDifferential Revision: D21371095\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 80744381e242392c8c7cf8ac3d68fe67fe876048",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d9e170d82beb044dd4d043ae87ceaf8577246ea9"
    },
    {
        "hash": "211088df6e997d2d73ceba4395f570df5f856737",
        "author": "Cheng Chang",
        "date": "2020-05-01T17:37:33-07:00",
        "message": "Remove redundant update of txn_state_ in transaction Prepare (#6778)\n\nSummary:\nWhen  expiration is set in a pessimistic transaction, `txn_state_` is already updated to `AWAITING_PREPARE` in the `if (expiration_time_ > 0)` block, there is  no need to update the state in `if (can_prepare)` block again.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6778\n\nTest Plan: make check\n\nReviewed By: lth\n\nDifferential Revision: D21335319\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 251d634cc7d1a0e86e673a59f0bda8584da5a35f",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/pessimistic_transaction.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/211088df6e997d2d73ceba4395f570df5f856737"
    },
    {
        "hash": "c8643edfc3102dd5eefcaae049ae4a5484301c1d",
        "author": "Zhichao Cao",
        "date": "2020-05-01T00:03:38-07:00",
        "message": "Fix multiple CF replay failure in db_bench replay (#6787)\n\nSummary:\nThe multiple CF hash map is not passed to the multi-thread worker. When using multi-thread replay for multiple CFs, it will cause segment fault. Pass the cf_map to the argument.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6787\n\nTest Plan: pass trace replay test.\n\nReviewed By: yhchiang\n\nDifferential Revision: D21339941\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 434482b492287e6722c7cd5a706f057c5ec170ce",
        "modified_files_count": 1,
        "modified_files": [
            "trace_replay/trace_replay.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c8643edfc3102dd5eefcaae049ae4a5484301c1d"
    },
    {
        "hash": "eecd8fba460b4a4f1961bc696b210bb78308aa0b",
        "author": "Peter Dillinger",
        "date": "2020-04-30T12:11:00-07:00",
        "message": "Fix assertion that can fail on sst corruption (#6780)\n\nSummary:\nAn assertion that a char == a CompressionType (unsigned char)\noriginally cast from a char can fail if the original value is negative,\ndue to numeric promotion.  The assertion should pass even if the value\nis invalid CompressionType, because the callee\nUncompressBlockContentsForCompressionType checks for that and reports\nstatus appropriately.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6780\n\nTest Plan:\nTemporarily change kZSTD = 0x88 and see tests fail. Make this\nchange (in addition), and tests pass.\n\nReviewed By: siying\n\nDifferential Revision: D21328498\n\nPulled By: pdillinger\n\nfbshipit-source-id: 61caf8d815581ce49261ecb7ab0f396e9ac4bb92",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eecd8fba460b4a4f1961bc696b210bb78308aa0b"
    },
    {
        "hash": "8c694025e9ddcfac4ce8aa39dbf51577d8e4d470",
        "author": "Zhichao Cao",
        "date": "2020-04-30T08:40:42-07:00",
        "message": "Fix potential size_t overflow in import_column_family (#6762)\n\nSummary:\nThe issue is reported in https://github.com/facebook/rocksdb/issues/6753 . size_t is unsigned and if sorted_file.size() is 0, the end condition of i will be extremely large, cause segment fault in sorted_files[i] and sorted_files[i+1]. Added condition to fix it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6762\n\nTest Plan: make asan_check\n\nReviewed By: pdillinger\n\nDifferential Revision: D21323063\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 56ce59201949ed319448228553202b8642c2cc3a",
        "modified_files_count": 1,
        "modified_files": [
            "db/import_column_family_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8c694025e9ddcfac4ce8aa39dbf51577d8e4d470"
    },
    {
        "hash": "8086e5e2946402a0a0ffe56195b3ab6dc02aa055",
        "author": "Peter Dillinger",
        "date": "2020-04-28T21:37:20-07:00",
        "message": "Fix LITE build (#6770)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/6770\n\nTest Plan: make LITE=1 check\n\nReviewed By: ajkr\n\nDifferential Revision: D21296261\n\nPulled By: pdillinger\n\nfbshipit-source-id: b6075cc13a6d6db48617b7e0e9ebeea9364dfd9f",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bloom_filter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8086e5e2946402a0a0ffe56195b3ab6dc02aa055"
    },
    {
        "hash": "335ea73e4943fafcc4f62f4d70eb67ba69a87eea",
        "author": "anand76",
        "date": "2020-04-28T20:06:06-07:00",
        "message": "Fix a valgrind failure due to DBBasicTestMultiGetDeadline (#6756)\n\nSummary:\nFix a valgrind failure.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6756\n\nTest Plan: valgrind_test\n\nReviewed By: pdillinger\n\nDifferential Revision: D21284660\n\nPulled By: anand1976\n\nfbshipit-source-id: 39bf1bd130b6adb585ddbf2f9aa2f53dbf666f80",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/335ea73e4943fafcc4f62f4d70eb67ba69a87eea"
    },
    {
        "hash": "4cd859edf1b0e98a8d561bc865fec5128dbc24e1",
        "author": "Cheng Chang",
        "date": "2020-04-27T16:55:14-07:00",
        "message": "Fix build under LITE (#6758)\n\nSummary:\nGetSupportedCompressions needs to be defined under LITE.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6758\n\nTest Plan: build under LITE\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D21247937\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 880e59d3e107cdd736d16427a68c5641d1318fb4",
        "modified_files_count": 1,
        "modified_files": [
            "options/options_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4cd859edf1b0e98a8d561bc865fec5128dbc24e1"
    },
    {
        "hash": "cc8d16efd6442bd22b65b6d3c08626dd9f8be267",
        "author": "Albert Hse-Lin Chen",
        "date": "2020-04-27T14:44:47-07:00",
        "message": "Fixed minor typo in comment for MergeOperator::FullMergeV2() (#6759)\n\nSummary:\nFixed minor typo in comment for FullMergeV2().\nLast operand up to snapshot should be +4 instead of +3.\n\nSigned-off-by: Albert Hse-Lin Chen <hselin@kalista.io>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6759\n\nReviewed By: cheng-chang\n\nDifferential Revision: D21260295\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: cc942306f246c8606538feb30bfdf6df9fb6c54e",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/merge_operator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cc8d16efd6442bd22b65b6d3c08626dd9f8be267"
    },
    {
        "hash": "1758f76f2d173a188436c7cac80decc8452b643e",
        "author": "Cheng Chang",
        "date": "2020-04-24T15:14:13-07:00",
        "message": "Fix unused variable of r in release mode (#6750)\n\nSummary:\nIn release mode, asserts are not compiled, so `r` is not used, causing compiler warnings.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6750\n\nTest Plan: make check under release mode\n\nReviewed By: anand1976\n\nDifferential Revision: D21220365\n\nPulled By: cheng-chang\n\nfbshipit-source-id: fd4afa9843d54af68c4da8660ec61549803e1167",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1758f76f2d173a188436c7cac80decc8452b643e"
    },
    {
        "hash": "51bdfae010d96a7dddfcc4c1d988a8ea787ab54b",
        "author": "Cheng Chang",
        "date": "2020-04-23T15:19:31-07:00",
        "message": "Check alignment of MultiRead requests in direct IO mode (#6739)\n\nSummary:\nAdd assertions to check direct IO's alignment requirements in MultiRead.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6739\n\nTest Plan: make check\n\nReviewed By: siying\n\nDifferential Revision: D21143825\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 26f1623b062a1851080771128feac0669a61f5e9",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/51bdfae010d96a7dddfcc4c1d988a8ea787ab54b"
    },
    {
        "hash": "f9155a340412c3ed5a6c1bd71ce44c4b5324df58",
        "author": "Andrew Kryczka",
        "date": "2020-04-20T16:32:43-07:00",
        "message": "Prevent uninitialized load in `IndexBlockIter` (#6736)\n\nSummary:\nWhen index block is empty or an error happens while reading it,\n`Invalidate()` is called rather than `Initialize()`. So `Seek()` must\nnot refer to member variables that are only initialized in\n`Initialize()` until it is sure `Initialize()` has been called.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6736\n\nReviewed By: siying\n\nDifferential Revision: D21139641\n\nPulled By: ajkr\n\nfbshipit-source-id: 71c58cc1adbd795dc3729dd5023bf7df1515ff32",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f9155a340412c3ed5a6c1bd71ce44c4b5324df58"
    },
    {
        "hash": "2767972386235da569aff4168720eaae4b0b0b37",
        "author": "Cheng Chang",
        "date": "2020-04-16T11:02:50-07:00",
        "message": "Fix warning when O_CLOEXEC is not defined (#6695)\n\nSummary:\nCompilation fails on systems that do not support O_CLOEXEC. Fix it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6695\n\nTest Plan: compile without O_CLOEXEC support\n\nReviewed By: anand1976\n\nDifferential Revision: D21011850\n\nPulled By: cheng-chang\n\nfbshipit-source-id: f1bf1cce2aa65c7d10b5a9613e941db30e928347",
        "modified_files_count": 1,
        "modified_files": [
            "env/fs_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2767972386235da569aff4168720eaae4b0b0b37"
    },
    {
        "hash": "9ae8058d95595da0e5e3cc6e86ea6c7007813a20",
        "author": "Cheng Chang",
        "date": "2020-04-14T10:55:10-07:00",
        "message": "Suppress file deletion error message in FaultInjectionTestEnv (#6696)\n\nSummary:\nThe error message is causing problems in the crash tests due to the\nerror parsing logic in db_crashtest.py.\n\nThis is a follow up PR for https://github.com/facebook/rocksdb/pull/6694.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6696\n\nTest Plan: make check\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D21021875\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 11e3f536df16941a89949ebcd2147cd8dfa3fbe0",
        "modified_files_count": 1,
        "modified_files": [
            "test_util/fault_injection_test_env.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9ae8058d95595da0e5e3cc6e86ea6c7007813a20"
    },
    {
        "hash": "41563b61dbe53967a92d53fb407df2008ffa8480",
        "author": "Ziyue Yang",
        "date": "2020-04-13T16:24:57-07:00",
        "message": "Fix data racing of BlockBasedTableBuilder::ParallelCompressionRep::first_block (#6640)\n\nSummary:\nBlockBasedTableBuilder::ParallelCompressionRep::first_block can be read in\nFlush() and written in BGWorkWriteRawBlock() concurrently. This commit fixes\nthe issue by reading first_block out before pushing the block to compression\nand write.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6640\n\nTest Plan: Run all tests concurrently with TSAN.\n\nReviewed By: cheng-chang\n\nDifferential Revision: D20851370\n\nfbshipit-source-id: 6f039222e8319d31e15f1b45e05c106527253f72",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/41563b61dbe53967a92d53fb407df2008ffa8480"
    },
    {
        "hash": "d9cad3a5269dd244cf5e60fd1d6d64c523d02043",
        "author": "anand76",
        "date": "2020-04-13T15:18:38-07:00",
        "message": "Suppress file deletion error message in FaultInjectionTestFS (#6694)\n\nSummary:\nThe error message is causing problems in the crash tests due to the\nerror parsing logic in db_crashtest.py.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6694\n\nReviewed By: siying\n\nDifferential Revision: D20998531\n\nPulled By: anand1976\n\nfbshipit-source-id: 89cb54a5f5bb664ae6d239c37559f10e14c5ea07",
        "modified_files_count": 1,
        "modified_files": [
            "test_util/fault_injection_test_fs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d9cad3a5269dd244cf5e60fd1d6d64c523d02043"
    },
    {
        "hash": "d600e5b0eb7cba5c5aad105145fd681d43a0e35e",
        "author": "anand76",
        "date": "2020-04-10T11:47:46-07:00",
        "message": "Fix a Centos build failure reported in #6651 (#6656)\n\nSummary:\nFixes issue https://github.com/facebook/rocksdb/issues/6651\n\nTests:\nmake check\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6656\n\nReviewed By: cheng-chang\n\nDifferential Revision: D20879084\n\nPulled By: anand1976\n\nfbshipit-source-id: c2cc508ca2716fcf80dcf9d2ba31c32d211f941e",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d600e5b0eb7cba5c5aad105145fd681d43a0e35e"
    },
    {
        "hash": "f08630b914f0bbc807f8d8bcfe3b5e914371c59d",
        "author": "Andrew Kryczka",
        "date": "2020-04-10T10:51:09-07:00",
        "message": "explicitly mark backup interfaces non-extensible (#6654)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/6654\n\nReviewed By: cheng-chang\n\nDifferential Revision: D20878094\n\nPulled By: ajkr\n\nfbshipit-source-id: 94d2561bdb6ffb7fe3773ca07d475337600a5b57",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/backupable_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f08630b914f0bbc807f8d8bcfe3b5e914371c59d"
    },
    {
        "hash": "c8c739a8774659ad91a4ce8a8e84244ae7c616ba",
        "author": "Connor1996",
        "date": "2020-04-10T10:47:46-07:00",
        "message": "Fix sst_dump not able to open ingested file (#6673)\n\nSummary:\nWhen investigating https://github.com/facebook/rocksdb/issues/6666, we encounter an error for sst_dump to dump an ingested SST file with global seqno.\n```\nCorruption: An external sst file with version 2 have global seqno property with value ��/, while largest seqno in the file is 0）\n```\n\nSame as https://github.com/facebook/rocksdb/pull/5097, it is due to SstFileReader don't know the largest seqno of a file, it will fail this check when it open a file with global seqno. https://github.com/facebook/rocksdb/blob/ca89ac2ba997dfa0e135bd75d4ccf6f5774a7eff/table/block_based_table_reader.cc#L730\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6673\n\nTest Plan: run it manually\n\nReviewed By: cheng-chang\n\nDifferential Revision: D20937546\n\nPulled By: ajkr\n\nfbshipit-source-id: c3fd04d60916a738533ee1885f3ea844669a9479",
        "modified_files_count": 1,
        "modified_files": [
            "tools/sst_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c8c739a8774659ad91a4ce8a8e84244ae7c616ba"
    },
    {
        "hash": "e860f8840a9e0b7bf3df8aff1d96b20df983223b",
        "author": "sdong",
        "date": "2020-04-09T11:23:32-07:00",
        "message": "Fix memory corruption caused by new test in options_settable_test (#6676)\n\nSummary:\nhttps://github.com/facebook/rocksdb/pull/6668 added some new test code but it has a risk of memory corruption. Fix it\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6676\n\nTest Plan: Run the test under ASAN and see it passes.\n\nReviewed By: ajkr\n\nDifferential Revision: D20937108\n\nfbshipit-source-id: 22cc96bb02030df0a37a02e67a2cc37ca31ba22d",
        "modified_files_count": 1,
        "modified_files": [
            "options/options_settable_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e860f8840a9e0b7bf3df8aff1d96b20df983223b"
    },
    {
        "hash": "83fc90b3df7967cc4b8ed092002b6ae186b94eb4",
        "author": "Yi Wu",
        "date": "2020-04-08T20:18:08-07:00",
        "message": "Fix info log source file display length (#5824)\n\nSummary:\nSource code path in info log is not truncated to the correct length. Fixing it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5824\n\nTest Plan:\nBuild and run db_bench. Before:\n```\n2019/09/18-21:32:34.631181 7fdd42df6700 [_impl/db_impl_write.cc:1654] [default] New memtable created with log file: https://github.com/facebook/rocksdb/issues/9. Immutable memtables: 0.\n```\nAfter:\n```\n2019/09/18-21:36:09.226532 7f141b5f6700 [/db_impl/db_impl_write.cc:1654] [default] New memtable created with log file: https://github.com/facebook/rocksdb/issues/9. Immutable memtables: 0.\n```\n\nReviewed By: cheng-chang\n\nDifferential Revision: D17511851\n\nfbshipit-source-id: b2f92c85ce78726c27b7e0e736657fe2f983513e",
        "modified_files_count": 1,
        "modified_files": [
            "logging/logging.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/83fc90b3df7967cc4b8ed092002b6ae186b94eb4"
    },
    {
        "hash": "a91613dd064fe648afb54baeb5513d1fceff77cd",
        "author": "CaixinGong",
        "date": "2020-04-08T14:27:12-07:00",
        "message": "Fix readrandom return NotFound after fillrandom in db_bench (#6665)\n\nSummary:\nThis commit is fixing a bug that readrandom test returns many NotFound in db_bench from Version 6.2.\nPull Request resolved: https://github.com/facebook/rocksdb/issues/6664\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6665\n\nReviewed By: cheng-chang\n\nDifferential Revision: D20911298\n\nPulled By: ajkr\n\nfbshipit-source-id: c2658d4dbb35798ccbf67dff6e64923fb731ef81",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a91613dd064fe648afb54baeb5513d1fceff77cd"
    },
    {
        "hash": "e5f1bfc26368b52b9e5d0099f9fca5ef7b448de8",
        "author": "Peter Dillinger",
        "date": "2020-04-07T16:00:26-07:00",
        "message": "Fix initializer syntax for old Xcode compiler (#6662)\n\nSummary:\nExample compiler output, from OSX TEST_GROUP=3:\n\ndb/flush_job_test.cc:185:7: error: suggest braces around initialization\nof subobject [-Werror,-Wmissing-braces]\n      kInvalidBlobFileNumber, 5, 103, 17, 102, 101};\n\nApparently permitted in newer version, but worth working around.\nhttps://stackoverflow.com/questions/31555584/why-is-clang-warning-suggest-braces-around-initialization-of-subobject-wmis\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6662\n\nTest Plan: CI (temporarily including OSX TEST_GROUP=3 in Travis)\n\nReviewed By: ltamasi\n\nDifferential Revision: D20901009\n\nPulled By: pdillinger\n\nfbshipit-source-id: 5338878613b5725e5d632c8858904de467dc4692",
        "modified_files_count": 1,
        "modified_files": [
            "db/flush_job_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e5f1bfc26368b52b9e5d0099f9fca5ef7b448de8"
    },
    {
        "hash": "fcd7bee925f2689874a81b667917c6a4c92e0db2",
        "author": "anand76",
        "date": "2020-04-07T12:53:59-07:00",
        "message": "Properly account block_decompress_time (#6658)\n\nSummary:\nIt was incorrectly counting time even for blocks that didn't need decompression.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6658\n\nTest Plan: make check\n\nReviewed By: ajkr\n\nDifferential Revision: D20883522\n\nPulled By: anand1976\n\nfbshipit-source-id: 33c9c4683f54cad150ab260a69e3ef8aa9aff76a",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_fetcher.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fcd7bee925f2689874a81b667917c6a4c92e0db2"
    },
    {
        "hash": "f53cdab3d7627c2dc16dd0089c956676d7e50f55",
        "author": "Steven Fackler",
        "date": "2020-04-06T17:41:45-07:00",
        "message": "Hex encode keys in compaction flush logs (#6616)\n\nSummary:\nThe raw key bytes are currently dumped directly into the log messages,\nwhich is not ideal if the keys aren't ASCII strings. Null bytes in\nparticular can cut off bits of the message early.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6616\n\nReviewed By: ajkr\n\nDifferential Revision: D20879218\n\nPulled By: anand1976\n\nfbshipit-source-id: 825a20715fe6d8012c0163c6e7b8159f7926a1a7",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f53cdab3d7627c2dc16dd0089c956676d7e50f55"
    },
    {
        "hash": "00f8016b36af00b1dfd81b6e580ee49ebbbcf4c1",
        "author": "sdong",
        "date": "2020-04-03T15:47:51-07:00",
        "message": "Fix clang anaylze warning caused by #6262 (#6641)\n\nSummary:\nhttps://github.com/facebook/rocksdb/pull/6262 causes CLANG analyze to complain. Add assertion to suppress the warning.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6641\n\nTest Plan: Run \"clang analyze\" and make sure it passes.\n\nReviewed By: anand1976\n\nDifferential Revision: D20841722\n\nfbshipit-source-id: 5fa6e0c5cfe7a822214c9b898a408df59d4fd2cd",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/00f8016b36af00b1dfd81b6e580ee49ebbbcf4c1"
    },
    {
        "hash": "ef088f0e9309005f010b1e7863f9a15f4744d771",
        "author": "Zhichao Cao",
        "date": "2020-04-02T18:08:46-07:00",
        "message": "Fix the multi-thread Manifest write dependency in error_handler_fs_test (#6637)\n\nSummary:\nIn CompactionManifestWriteRetryableError in error_handler_fs_test, the manifest write of flush should pass with no fs error. After flush, fs is set to error status and the manifest write of compaction should fail due to the IO Error. Currently, the manifest write of flush is not synced with the compaction in order, which might cause manifest write fails, which will cause test failure. Fixed by adding the LoadDependency of sync-point after flush and before compaction.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6637\n\nTest Plan: pass error_hanlder_fs_tes. Pass make asan_check\n\nReviewed By: anand1976\n\nDifferential Revision: D20826969\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: fb2e702caa19bd63c82570320536b7acda870ff1",
        "modified_files_count": 1,
        "modified_files": [
            "db/error_handler_fs_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ef088f0e9309005f010b1e7863f9a15f4744d771"
    },
    {
        "hash": "0709cd04caa751d5e055994d4985056c72fded13",
        "author": "anand76",
        "date": "2020-04-02T16:41:09-07:00",
        "message": "Fix LITE mode test failure in DBOptionsTest.ChangeCompression (#6635)\n\nSummary:\nThis failure was introduced in https://github.com/facebook/rocksdb/issues/6262\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6635\n\nReviewed By: siying\n\nDifferential Revision: D20822602\n\nPulled By: anand1976\n\nfbshipit-source-id: 96b316816cce6b95b092a7fc46ea968ed6ba8809",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0709cd04caa751d5e055994d4985056c72fded13"
    },
    {
        "hash": "8088482dd64b352d402a9cd6299a94f50015d1ae",
        "author": "Ziyue Yang",
        "date": "2020-04-02T11:57:05-07:00",
        "message": "Fix a division by zero after #6262 (#6633)\n\nSummary:\nWith https://github.com/facebook/rocksdb/issues/6262, UBSAN fails with \"division by zero\":\n\n[ RUN      ] Timestamp/DBBasicTestWithTimestampCompressionSettings.PutAndGetWithCompaction/3\ninternal_repo_rocksdb/repo/table/block_based/block_based_table_builder.cc:1066:39: runtime error: division by zero\n    #0 0x7ffb3117b071 in rocksdb::BlockBasedTableBuilder::WriteRawBlock(rocksdb::Slice const&, rocksdb::CompressionType, rocksdb::BlockHandle*, bool) internal_repo_rocksdb/repo/table/block_based/block_based_table_builder.cc:1066\n    https://github.com/facebook/rocksdb/issues/1 0x7ffb311775e1 in rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::Slice const&, rocksdb::BlockHandle*, bool) internal_repo_rocksdb/repo/table/block_based/block_based_table_builder.cc:848\n    https://github.com/facebook/rocksdb/issues/2 0x7ffb311771a2 in rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::BlockBuilder*, rocksdb::BlockHandle*, bool) internal_repo_rocksdb/repo/table/block_based/block_based_table_builder.cc:832\n\nThis is caused by not returning immediately after CompressAndVerifyBlock call\nin WriteBlock when rep_->status == kBuffered.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6633\n\nTest Plan: Run all existing test.\n\nReviewed By: anand1976\n\nDifferential Revision: D20808366\n\nfbshipit-source-id: 09f24b7c0fbaf4c7a8fc48cac61fa6fcb9b85811",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8088482dd64b352d402a9cd6299a94f50015d1ae"
    },
    {
        "hash": "b5818f87f03a189098a240ceb38d9bca2efa5d93",
        "author": "Yanqin Jin",
        "date": "2020-04-01T10:01:38-07:00",
        "message": "Fix clang analyze error (#6622)\n\nSummary:\nAs title. https://github.com/facebook/rocksdb/issues/6612 caused clang analyze to fail with the error:\n```\ndb/compaction/compaction_picker_fifo.cc:105:39: warning: Called C++ object pointer is null\n                     cf_name.c_str(), f->fd.GetNumber(), creation_time);\n                                      ^~~~~~~~~~~~~~~~~\n./logging/logging.h:59:36: note: expanded from macro 'ROCKS_LOG_BUFFER'\n                                 ##__VA_ARGS__)\n                                   ^~~~~~~~~~~\n1 warning generated.\n```\n\nTest Plan (devserver):\nUSE_CLANG=1 make analyze\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6622\n\nReviewed By: ltamasi\n\nDifferential Revision: D20787407\n\nPulled By: riversand963\n\nfbshipit-source-id: a5de4910cc1aa0d3481a73ec114578925bfd63f7",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_picker_fifo.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b5818f87f03a189098a240ceb38d9bca2efa5d93"
    },
    {
        "hash": "fd3ddaf90d6b42dd1d98416e1fa0335fdc567af9",
        "author": "Andrew Gallagher",
        "date": "2020-03-31T11:38:51-07:00",
        "message": "Fix jemalloc forward declarations (#6613)\n\nSummary:\nAdd `nothrow` attribute to match declarations in jemalloc.\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6613\n\nReviewed By: igorsugak\n\nDifferential Revision: D20749490\n\nfbshipit-source-id: 9ac8df27f7b4268f27b32b130c23ce8a1f772b3a",
        "modified_files_count": 1,
        "modified_files": [
            "port/jemalloc_helper.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fd3ddaf90d6b42dd1d98416e1fa0335fdc567af9"
    },
    {
        "hash": "2ae91c6097002f98fddae29769bdcc7bfe8d4ec9",
        "author": "Zhichao Cao",
        "date": "2020-03-30T14:11:27-07:00",
        "message": "Fix potential memory leak in table_test (#6611)\n\nSummary:\nThe checksum generator should be released if file_writer fails to reset the pointer.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6611\n\nTest Plan: pass make asan_check\n\nReviewed By: riversand963\n\nDifferential Revision: D20742964\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: cde41be2edb3d1e56083c2b93e1510fb32556146",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2ae91c6097002f98fddae29769bdcc7bfe8d4ec9"
    },
    {
        "hash": "cb671ea1ca409c4dc436925f726230f5b77fb528",
        "author": "phantomape",
        "date": "2020-03-29T21:56:31-07:00",
        "message": "env: Add clearerr() before repeating an interrupted file read (#6609)\n\nSummary:\nThis change updates PosixSequentialFile::Read to call clearerr()\nbefore fread()ing again after an EINTR is returned on a previous\nfread.\n\nThe original fix is from https://github.com/cockroachdb/rocksdb/commit/bd8f1ebb91bbf0e668d24faef273042cc1fe52de.\nFixing https://github.com/facebook/rocksdb/issues/6509\n\nSigned-off-by: phantomape <cxucheng@outlook.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6609\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D20731482\n\nPulled By: riversand963\n\nfbshipit-source-id: 7f1f3a1449077d5560f45c465a78d08633740ba0",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cb671ea1ca409c4dc436925f726230f5b77fb528"
    },
    {
        "hash": "3881a678d51f0678cecdb5d41eb6a7e3a3ae56bd",
        "author": "Cheng Chang",
        "date": "2020-03-27T16:14:22-07:00",
        "message": "Refactor IsLockExpired (#6586)\n\nSummary:\n1. If expiration_time is non-positive, no need to call NowMicros, save a syscall.\n2. expire_time should only be set when expired is false.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6586\n\nTest Plan: make check\n\nReviewed By: lth\n\nDifferential Revision: D20673730\n\nPulled By: cheng-chang\n\nfbshipit-source-id: a69e8d7b16dc6d0d00487bb1c19f0710d79482e2",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_lock_mgr.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3881a678d51f0678cecdb5d41eb6a7e3a3ae56bd"
    },
    {
        "hash": "2e276973e4cb9f943c2ac7f7b15730c8bfc33cb1",
        "author": "Cheng Chang",
        "date": "2020-03-27T16:01:23-07:00",
        "message": "Compute cv_end_time with simpler logic (#6585)\n\nSummary:\nThe refactored logic is easier to read.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6585\n\nTest Plan: make check\n\nReviewed By: lth\n\nDifferential Revision: D20663225\n\nPulled By: cheng-chang\n\nfbshipit-source-id: cfd28955cd03b0a71d9087085170875f6dd0be9e",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_lock_mgr.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2e276973e4cb9f943c2ac7f7b15730c8bfc33cb1"
    },
    {
        "hash": "8abd41a54413751748c1a62397002483e0a001e2",
        "author": "Burton Li",
        "date": "2020-03-27T11:12:23-07:00",
        "message": "Fix write_unprepared_transaction_test crash on debug version. (#6574)\n\nSummary:\nThe last key may hit index of out bound exception when id = 9.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6574\n\nReviewed By: riversand963\n\nDifferential Revision: D20699791\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 8e2c5be5ff0e53e9857cfd59cea97cff21446819",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_unprepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8abd41a54413751748c1a62397002483e0a001e2"
    },
    {
        "hash": "e91d1a21a6ad7dc4eb4ce46c5b3f6ad550357640",
        "author": "Peter Dillinger",
        "date": "2020-03-26T19:36:32-07:00",
        "message": "Streamline persistent_cache_test for testing efficiency (#6601)\n\nSummary:\nThis test was written like a stress test, using up to 3x26GB\nRSS memory during parallel 'make check'. Now, while this code is mostly\ndormant, I've made the \"for Travis\" versions of the expensive tests the\ncanonical versions and disabled the expensive versions. This has the\nside benefit of removing some arbitrary conditional compilation.\n\nFor unknown reason, the super expensive tests were gated on\nSnappy_Supported, which appears to be irrelevant, so I removed it.\n\nThe tests can be fixed / improved / migrated to stress test if/when they\nare deemed important again.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6601\n\nTest Plan:\nmake check + CI\n\n./persistent_cache_test Before:\n...\n[==========] 10 tests from 2 test cases ran. (114541 ms total)\n[  PASSED  ] 10 tests.\nYOU HAVE 1 DISABLED TEST\n\nAfter:\n...\n[==========] 3 tests from 2 test cases ran. (1714 ms total)\n[  PASSED  ] 3 tests.\nYOU HAVE 10 DISABLED TESTS\n\nReviewed By: siying\n\nDifferential Revision: D20680983\n\nPulled By: pdillinger\n\nfbshipit-source-id: 2be0fde13eeb0a71110ac7f5477cfe63996a509e",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/persistent_cache/persistent_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e91d1a21a6ad7dc4eb4ce46c5b3f6ad550357640"
    },
    {
        "hash": "43aee93d2b0e49762ce6884b174314776848a5d2",
        "author": "Cheng Chang",
        "date": "2020-03-23T20:15:27-07:00",
        "message": "Initialize scratch to nullptr explicitly to make clang analyzer happy (#6577)\n\nSummary:\n`scratch` is not initialized in `Align` because it will be set outside of it. But clang analyzer is strict on initializing it before return.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6577\n\nTest Plan: make analyze\n\nReviewed By: siying\n\nDifferential Revision: D20607303\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 2843d759345a057a8e122178d30b90deff0f9b2a",
        "modified_files_count": 1,
        "modified_files": [
            "file/random_access_file_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/43aee93d2b0e49762ce6884b174314776848a5d2"
    },
    {
        "hash": "d300d10962ac952e0648ecc454b433ff29d6e96f",
        "author": "Zhichao Cao",
        "date": "2020-03-23T18:51:09-07:00",
        "message": "Fix the MultiGet testing failure in Circleci (#6578)\n\nSummary:\nThe MultiGet test in db_basic_test fails in CircleCI vs2019. The reason is that even Snappy compression is enabled, the first compression type is still kNoCompression. This PR checks the list and ensure that only when compression is enable and the compression type is valid, compression will be enabled. Such that, it will not fail the combined read test in MultiGet.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6578\n\nTest Plan: make check, db_basic_test.\n\nReviewed By: anand1976\n\nDifferential Revision: D20607529\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: dcead264d5c2da105912c18caad34b8510bb04b0",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d300d10962ac952e0648ecc454b433ff29d6e96f"
    },
    {
        "hash": "617f479266423da2fa1963aa7968fdca57e62c1d",
        "author": "Yanqin Jin",
        "date": "2020-03-23T13:05:36-07:00",
        "message": "Fix LITE build (#6575)\n\nSummary:\nFix LITE build by excluding some unit tests that use features not supported in LITE.\n```\ndb/db_basic_test.cc:1778:8: error: ‘void rocksdb::{anonymous}::TableFileListener::OnTableFileCreated(const rocksdb::TableFileCreationInfo&)’ marked ‘override’, but does not override\n   void OnTableFileCreated(const TableFileCreationInfo& info) override {\n        ^~~~~~~~~~~~~~~~~~\nmake: *** [db/db_basic_test.o] Error 1\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6575\n\nReviewed By: ltamasi\n\nDifferential Revision: D20598598\n\nPulled By: riversand963\n\nfbshipit-source-id: 367f7cb2500360ad57030b138a94c0f731a04339",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/617f479266423da2fa1963aa7968fdca57e62c1d"
    },
    {
        "hash": "6c50fe1ec9eb35f69d3b4d38cc7475a83113932e",
        "author": "sdong",
        "date": "2020-03-20T14:59:54-07:00",
        "message": "Change HashMap::Insert()'s value to a const reference (#6567)\n\nSummary:\nWhen building RocksDB on VS2015, an error shows up with\n\nhash_map.h(39): error C2719: 'value': formal parameter with requested alignment of 8 won't be aligned\n\nMaking the reference a reference can solve the problem, and there isn't a reason we can't do that, at least for the current use of the hash map.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6567\n\nTest Plan: See CI tests pass.\n\nReviewed By: pdillinger\n\nDifferential Revision: D20548543\n\nfbshipit-source-id: 255b55d74cf68a0b324e6f504c56608a97ea6276",
        "modified_files_count": 1,
        "modified_files": [
            "util/hash_map.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6c50fe1ec9eb35f69d3b4d38cc7475a83113932e"
    },
    {
        "hash": "1df9b016806439e834c3769c39ea2594b26bace0",
        "author": "Levi Tamasi",
        "date": "2020-03-18T09:24:31-07:00",
        "message": "Disable distributed mutex test for valgrind_test (#6553)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/6553\n\nTest Plan:\n```\n$ make valgrind_test -j24\n$ ./folly_synchronization_distributed_mutex_test\nDistributedMutex is not supported in ROCKSDB_LITE, on ARM, or in valgrind_test runs\n```\n\nReviewed By: pdillinger\n\nDifferential Revision: D20501966\n\nPulled By: ltamasi\n\nfbshipit-source-id: 386ec5f258f89d0781a36c5b390c665787093a74",
        "modified_files_count": 1,
        "modified_files": [
            "third-party/folly/folly/synchronization/test/DistributedMutexTest.cpp"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1df9b016806439e834c3769c39ea2594b26bace0"
    },
    {
        "hash": "a8149aef1e2c2204fb392923d56bc8a09c2909bc",
        "author": "akankshamahajan",
        "date": "2020-03-17T11:02:13-07:00",
        "message": "Allow table/sst_file_reader_test.cc to use custom Env (#6536)\n\nSummary:\nAllowing table/sst_file_reader_test.cc to use custom Env specified by TEST_ENV_URI.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6536\n\nReviewed By: riversand963\n\nDifferential Revision: D20448525\n\nPulled By: akankshamahajan15\n\nfbshipit-source-id: 74e4d34c8ac4c2743741e78bf599571a4a465459",
        "modified_files_count": 1,
        "modified_files": [
            "table/sst_file_reader_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a8149aef1e2c2204fb392923d56bc8a09c2909bc"
    },
    {
        "hash": "66ed58083aa0551d130980d277df4e7eb01e8eb6",
        "author": "Yanqin Jin",
        "date": "2020-03-17T10:50:48-07:00",
        "message": "Reduce runtime of db_with_timestamp_basic_test (#6546)\n\nSummary:\nReduce runtime by reducing test scale to avoid test time-outs.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6546\n\nTest Plan:\ntime ./db_with_timestamp_basic_test\nand watch internal tests.\n\nReviewed By: zhichao-cao\n\nDifferential Revision: D20479292\n\nPulled By: riversand963\n\nfbshipit-source-id: c9e4a155be7699dd4de60fa531de86d442a3ba0a",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_with_timestamp_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/66ed58083aa0551d130980d277df4e7eb01e8eb6"
    },
    {
        "hash": "098dce2d1ab7bfaf3c61a7f679cee3fbc06eb2a9",
        "author": "Yanqin Jin",
        "date": "2020-03-17T09:59:28-07:00",
        "message": "Fix compiler warning treated as error (#6547)\n\nSummary:\nDefine a private member variable only in debug mode. Without fix, build will fail\n```\nIn file included from table/block_based/partitioned_index_iterator.cc:9:\n./table/block_based/partitioned_index_iterator.h:125:32: error: private field 'icomp_' is not used [-Werror,-Wunused-private-field]\n  const InternalKeyComparator& icomp_;\n```\n\nTest plan (dev server)\n1. make check\n2. Make sure fixed in Travis\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6547\n\nReviewed By: siying\n\nDifferential Revision: D20480027\n\nPulled By: pdillinger\n\nfbshipit-source-id: 288bc94280e240c3136335b6c73eb1ccb0db459d",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/partitioned_index_iterator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/098dce2d1ab7bfaf3c61a7f679cee3fbc06eb2a9"
    },
    {
        "hash": "db02664f35aabf2eaa7ee2ce372c1072395e1255",
        "author": "Peter Dillinger",
        "date": "2020-03-16T17:02:00-07:00",
        "message": "Remove XXH3(preview) streaming APIs (#6540)\n\nSummary:\nThere was an alignment bug in our copy of the streaming APIs\nfor XXH3 (which we dubbed \"XXH3p\" for \"preview\" release). Since those\nAPIs are unused and some values for XXH3 have changed since XXH3p, I'm\nsimply removing those APIs, expecting it's better to use finalized XXH3\nfunction if/when we decide to use those APIs (e.g. for checksums).\n\nFixes https://github.com/facebook/rocksdb/issues/6508\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6540\n\nTest Plan: make check\n\nDifferential Revision: D20479271\n\nPulled By: pdillinger\n\nfbshipit-source-id: 246cf1690d614d3b31042b563d249de32dec1e0d",
        "modified_files_count": 1,
        "modified_files": [
            "util/xxh3p.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/db02664f35aabf2eaa7ee2ce372c1072395e1255"
    },
    {
        "hash": "58918d4ccc39d26f5085651e8f6dab9df8548bd2",
        "author": "Yanqin Jin",
        "date": "2020-03-16T16:57:48-07:00",
        "message": "Use correct Env for DestroyDB in stress test (#6539)\n\nSummary:\nWhen using custom Env, trying to call DestroyDB() with default Options will\nfail.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6539\n\nTest Plan: ./db_stress\n\nDifferential Revision: D20476204\n\nPulled By: riversand963\n\nfbshipit-source-id: 612c6754660cc9b5bb3e9c2dbb2f6ecd7f648797",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/58918d4ccc39d26f5085651e8f6dab9df8548bd2"
    },
    {
        "hash": "488b1e673988c8e4687ce0e9e4ef2b38a57d2664",
        "author": "sdong",
        "date": "2020-03-16T13:50:40-07:00",
        "message": "Fix an error in db_bench with gcc 4.8 (#6537)\n\nSummary:\nI start to see following failures:\n\ntools/db_bench_tool.cc: In constructor ‘rocksdb::NormalDistribution::NormalDistribution(unsigned int, unsigned int)’:\ntools/db_bench_tool.cc:1528:58: error: declaration of ‘max’ shadows a member of 'this' [-Werror=shadow]\n   NormalDistribution(unsigned int min, unsigned int max) :\n                                                          ^\ntools/db_bench_tool.cc:1528:58: error: declaration of ‘min’ shadows a member of 'this' [-Werror=shadow]\ntools/db_bench_tool.cc: In constructor ‘rocksdb::UniformDistribution::UniformDistribution(unsigned int, unsigned int)’:\ntools/db_bench_tool.cc:1546:59: error: declaration of ‘max’ shadows a member of 'this' [-Werror=shadow]\n   UniformDistribution(unsigned int min, unsigned int max) :\n                                                           ^\ntools/db_bench_tool.cc:1546:59: error: declaration of ‘min’ shadows a member of 'this' [-Werror=shadow]\n\nwhen I build from GCC 4.8. Rename those variables to fix the problem.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6537\n\nTest Plan: make all with the compiler that used to show the failure.\n\nDifferential Revision: D20448741\n\nfbshipit-source-id: 18bcf012dbe020f22f79038a9b08f447befa2574",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/488b1e673988c8e4687ce0e9e4ef2b38a57d2664"
    },
    {
        "hash": "23eae14d2487e154dbe909b4bbdda6ef7f338793",
        "author": "Cheng Chang",
        "date": "2020-03-13T21:53:38-07:00",
        "message": "Destroy DB at the end of each test in db_logical_block_size_cache_test (#6532)\n\nSummary:\nIf DB is not deleted, in concurrent test, the tests might fail because of the previously existing DB.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6532\n\nTest Plan:\nmake clean && make -j24 LITE=1  db_logical_block_size_cache_test && ./db_logical_block_size_cache_test\nmake clean && make -j24 db_logical_block_size_cache_test && ./db_logical_block_size_cache_test\n\nDifferential Revision: D20454734\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 8abede2ec1d79c1a4fe1bc95fbda489f8f7ee052",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_logical_block_size_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/23eae14d2487e154dbe909b4bbdda6ef7f338793"
    },
    {
        "hash": "2ccb794eb62e2ede1392016124a809b3768606f1",
        "author": "Cheng Chang",
        "date": "2020-03-12T14:30:46-07:00",
        "message": "Use DestroyColumnFamilyHandle instead of directly deleting column family handle (#6505)\n\nSummary:\nUpdate example usage of closing column family.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6505\n\nTest Plan: cd examples && make column_families_example && ./column_families_example\n\nDifferential Revision: D20362100\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 493c5e0068a40b4f237f8f8511cddd22dc15ea5c",
        "modified_files_count": 1,
        "modified_files": [
            "examples/column_families_example.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2ccb794eb62e2ede1392016124a809b3768606f1"
    },
    {
        "hash": "0d2c8e47e8329abe91a52056f60838203b951de8",
        "author": "Cheng Chang",
        "date": "2020-03-12T14:13:59-07:00",
        "message": "OpenForReadOnly is not supported in LITE mode (#6523)\n\nSummary:\nIn DBLogicalBlockSizeCacheTest, do not test OpenForReadOnly in LITE mode.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6523\n\nTest Plan: watch test for LITE mode\n\nDifferential Revision: D20420321\n\nPulled By: cheng-chang\n\nfbshipit-source-id: e45bf6f2800206d6f8ce9af7308e76a08de80643",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_logical_block_size_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0d2c8e47e8329abe91a52056f60838203b951de8"
    },
    {
        "hash": "6dea7530b512fd3f1790a3e18ee9d3b3698c1880",
        "author": "Cheng Chang",
        "date": "2020-03-11T21:38:09-07:00",
        "message": "Remove copy of pairs from the for range loop (#6514)\n\nSummary:\nRemove copy of pairs from the for range loop\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6514\n\nTest Plan: make check\n\nDifferential Revision: D20389688\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 1c772091f955be33267514010f3596c61a6f46b5",
        "modified_files_count": 1,
        "modified_files": [
            "options/options_parser.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6dea7530b512fd3f1790a3e18ee9d3b3698c1880"
    },
    {
        "hash": "e171a219d592b1bda9b654db126f04d4d834a815",
        "author": "Yuqi Gu",
        "date": "2020-03-05T17:18:16-08:00",
        "message": "Fix db_wal_test::TruncateLastLogAfterRecoverWithoutFlush failure (#6437)\n\nSummary:\n`TruncateLastLogAfterRecoverWithoutFlush` case depends on fallocate support\nof underlying file system.\n\nOn a file system which lacks of this feature, like zfs, it will fail to allocate predefined file size as this test case intends to do;\n\nSo a check block is added to detect fallocate support and skip test if not.\nThe related work is done by JunHe77. Thanks!\n\nSigned-off-by: Yuqi Gu <yuqi.gu@arm.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6437\n\nDifferential Revision: D20145032\n\nPulled By: pdillinger\n\nfbshipit-source-id: c8b691dc508e95acfa2a004ddbc07e2faa76680d",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_wal_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e171a219d592b1bda9b654db126f04d4d834a815"
    },
    {
        "hash": "03dbd11ead69f822eca2eeeac5cd20993da2f267",
        "author": "Kefu Chai",
        "date": "2020-03-03T08:41:57-08:00",
        "message": "s/const auto/const auto&/ when doing loop (#6477)\n\nSummary:\nthis silences following warning from clang-11\n```\nrocksdb/db/db_impl/db_impl_compaction_flush.cc:1040:21: warning: loop variable 'newf' of type 'const std::pair<int, rocksdb::FileMetaData>' creates a copy from type 'const\nstd::pair<int\\\n, rocksdb::FileMetaData>' [-Wrange-loop-analysis]\n    for (const auto newf : c->edit()->GetNewFiles()) {\n                    ^\nrocksdb/db/db_impl/db_impl_compaction_flush.cc:1040:10: note: use reference type 'const std::pair<int, rocksdb::FileMetaData> &' to prevent copying\n    for (const auto newf : c->edit()->GetNewFiles()) {\n         ^~~~~~~~~~~~~~~~~\n                    &\n```\nSigned-off-by: Kefu Chai <tchaikov@gmail.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6477\n\nDifferential Revision: D20211850\n\nPulled By: ltamasi\n\nfbshipit-source-id: 3e89e13a12bba79f1b934d46b7c4c0576cdafb01",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/03dbd11ead69f822eca2eeeac5cd20993da2f267"
    },
    {
        "hash": "48d8d076a3920132dffc2b7e04addb58fcebf474",
        "author": "sumeerbhola",
        "date": "2020-03-02T20:52:19-08:00",
        "message": "Add missing MutexLock to MockEnv::CreateDir (#6474)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/6474\n\nDifferential Revision: D20205109\n\nPulled By: ltamasi\n\nfbshipit-source-id: ec136005c63740f5b713ff537b5671ea9b8e217a",
        "modified_files_count": 1,
        "modified_files": [
            "env/mock_env.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/48d8d076a3920132dffc2b7e04addb58fcebf474"
    },
    {
        "hash": "8637bc1eea45849dea62a8e4f1eb2312da36c753",
        "author": "Levi Tamasi",
        "date": "2020-03-02T15:34:19-08:00",
        "message": "Fix the description of unordered_write in db_bench (#6476)\n\nSummary:\nAs reported in https://github.com/facebook/rocksdb/issues/6467, the\ndescription of the `unordered_write` switch of `db_bench` was incorrect.\n(Note: the new description is based on\nhttps://rocksdb.org/blog/2019/08/15/unordered-write.html).\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6476\n\nTest Plan: `db_bench --help`\n\nDifferential Revision: D20200653\n\nPulled By: ltamasi\n\nfbshipit-source-id: 4c3683fcfa6a069164167af5aaff9974a810c16a",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8637bc1eea45849dea62a8e4f1eb2312da36c753"
    },
    {
        "hash": "9b3c9ef0e8a0019394d0bc6c2e271cddb1da4617",
        "author": "sdong",
        "date": "2020-03-02T11:55:28-08:00",
        "message": "Add --index_with_first_key and --index_shortening_mode to DB bench (#5859)\n\nSummary:\nSome combinatino of --index_with_first_key and --index_shortening_mode can signifcantly improve performance for large values. Expose them in db_bench.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5859\n\nTest Plan: Run them with the new options and observe the behavior.\n\nDifferential Revision: D20104434\n\nfbshipit-source-id: 21d48a732a9caf20b82312c7d7557d747ea3c304",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9b3c9ef0e8a0019394d0bc6c2e271cddb1da4617"
    },
    {
        "hash": "86f1ad7046dc829f501581c48123078748825795",
        "author": "sdong",
        "date": "2020-02-28T16:42:44-08:00",
        "message": "Add more unit test coverage to MultiRead (#6452)\n\nSummary:\nMultiRead tests in env_test cannot simulate the io_uring case when queries need to be submitted in multiple rounds. Add a new unit test to cover up more requests per MultiRead\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6452\n\nTest Plan: Run it and see it pass when liburing is enabled or not enabled.\n\nDifferential Revision: D20078924\n\nfbshipit-source-id: 6cff7fe345a4c5aa47135186e6181bf00df02b68",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/86f1ad7046dc829f501581c48123078748825795"
    },
    {
        "hash": "ab65278b1f29f9a75f1c184317a6708419dcd27e",
        "author": "Peter Dillinger",
        "date": "2020-02-21T13:31:57-08:00",
        "message": "Misc filter_bench improvements (#6444)\n\nSummary:\nUseful in validating/testing internal fragmentation changes (https://github.com/facebook/rocksdb/issues/6427)\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6444\n\nTest Plan: manual (no changes to production code)\n\nDifferential Revision: D20040076\n\nPulled By: pdillinger\n\nfbshipit-source-id: 32d26f363d2a9ab9f5bebd281dcebd9915ae340e",
        "modified_files_count": 1,
        "modified_files": [
            "util/filter_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ab65278b1f29f9a75f1c184317a6708419dcd27e"
    },
    {
        "hash": "4e33f1e1dc40be18f8233a913324b2978c6a46fa",
        "author": "Gaurav Singh",
        "date": "2020-02-20T10:27:56-08:00",
        "message": "simplify user_access_only expression (#6360)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/6360\n\nDifferential Revision: D19698918\n\nPulled By: riversand963\n\nfbshipit-source-id: d20ecca541376cccd32fc7afb504ea90021860ee",
        "modified_files_count": 1,
        "modified_files": [
            "tools/block_cache_analyzer/block_cache_trace_analyzer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4e33f1e1dc40be18f8233a913324b2978c6a46fa"
    },
    {
        "hash": "3a3457575d1f02a27aba35c283b4b11ef525b8f7",
        "author": "acelyc111",
        "date": "2020-02-14T15:55:23-08:00",
        "message": "Fix compile error when LZ4 is up to r123 (#6412)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/6412\n\nDifferential Revision: D19914063\n\nPulled By: ajkr\n\nfbshipit-source-id: 4e401e665d4b449d24c4cdec35a4585eeda95996",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3a3457575d1f02a27aba35c283b4b11ef525b8f7"
    },
    {
        "hash": "152f8a8ffe00358cae465738eac7b9a4de0b689e",
        "author": "Cheng Chang",
        "date": "2020-02-14T08:26:23-08:00",
        "message": "Remove unnecessary computation of index (#6406)\n\nSummary:\n`index` can be replaced by  `iter`, saving the computation of `index++`.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6406\n\nTest Plan: make check\n\nDifferential Revision: D19905056\n\nPulled By: cheng-chang\n\nfbshipit-source-id: add4638959c0d2e4e77a11f3fa04ffabaf0de790",
        "modified_files_count": 1,
        "modified_files": [
            "table/multiget_context.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/152f8a8ffe00358cae465738eac7b9a4de0b689e"
    },
    {
        "hash": "29e24434fec91cbeae1deb6cd96319af1b308716",
        "author": "wolfkdy",
        "date": "2020-02-13T18:55:02-08:00",
        "message": "refine code (#6420)\n\nSummary:\nI create a new branch from the branch new upsteram/master and \"git merge --squash\".\nMaybe it will fix everything.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6420\n\nDifferential Revision: D19897152\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 6575d9e3b23e360f42ee1480b43028b5fcc20136",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/optimistic_transaction.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/29e24434fec91cbeae1deb6cd96319af1b308716"
    },
    {
        "hash": "908b1ee64e5d6036f5f3cc3285b11f91e9e459a3",
        "author": "Manuel Ung",
        "date": "2020-02-13T18:52:05-08:00",
        "message": "WriteUnPrepared: Fix assertion during recovery (#6419)\n\nSummary:\nDuring recovery, multiple (un)prepared batches could exist in the same WAL record due to group commit. This breaks an assertion in `MemTableInserter::MarkBeginPrepare`.\n\nTo fix, reset unprepared_batch_ to false after `MarkEndPrepare`.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6419\n\nDifferential Revision: D19896148\n\nPulled By: lth\n\nfbshipit-source-id: b1a32ef88f775a0881264a18bd1a4a5b8c85eee3",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/908b1ee64e5d6036f5f3cc3285b11f91e9e459a3"
    },
    {
        "hash": "fb571509a78f697a7a0f901c3448736cb1c2a30f",
        "author": "Manuel Ung",
        "date": "2020-02-13T18:44:39-08:00",
        "message": "WriteUnPrepared: Enable WAL during crash recovery (#6418)\n\nSummary:\nUnfortunately, it seems like mysqld reuses xids across machine restarts. When that happens, we could have something like the following happening:\n\n```\nBEGIN_PREPARE(unprepared) Put(a) END_PREPARE(xid = 1)\n-- crash and recover with Put(a) rolled back as it was not prepared\nBEGIN_PREPARE(prepared) Put(b) END_PREPARE(xid = 1)\nCOMMIT(xid = 1)\n-- crash and recover with both a, b\n```\n\nTo solve this, we will have to log the rollback batch into the WAL during recovery.\n\nWritePrepared already logs the rollback batch into the WAL, if a rollback happens after prepare, so there is no problem there.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6418\n\nDifferential Revision: D19896151\n\nPulled By: lth\n\nfbshipit-source-id: 2ff65ddc5fe75efd57736fed4b7cd7a109d26609",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_unprepared_txn_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fb571509a78f697a7a0f901c3448736cb1c2a30f"
    },
    {
        "hash": "5138764eb584ed1fb15bfa2ef2907ec4c476df21",
        "author": "Huisheng Liu",
        "date": "2020-02-13T11:21:27-08:00",
        "message": "Fix destroydb (#6308)\n\nSummary:\nIt's observed on Windows DestroyDB failed to remove the log file because the logger is still alive in sst file manager and holding a handle to the log file. This fix makes sure the logger is released before attempt to clear the database directory.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6308\n\nDifferential Revision: D19818829\n\nPulled By: riversand963\n\nfbshipit-source-id: 54c3e6859aadaaba4a49b3e851b73dc35ec7dc6a",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5138764eb584ed1fb15bfa2ef2907ec4c476df21"
    },
    {
        "hash": "df3f33dd05f20bc762f88b80559fe9a99d1acc86",
        "author": "sdong",
        "date": "2020-02-13T10:52:50-08:00",
        "message": "Fix db_bench LITE build recently broken (#6411)\n\nSummary:\nA recent change https://github.com/facebook/rocksdb/pull/6386 broke LITE build in a trivial way. Fix it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6411\n\nTest Plan: Run \"LITE=1 make all\"\n\nDifferential Revision: D19871765\n\nfbshipit-source-id: 74f0ad3f8a9d666fbde0da7fd29ba1547a811f77",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/df3f33dd05f20bc762f88b80559fe9a99d1acc86"
    },
    {
        "hash": "a676001f95f9b61f96fb5fc68f2c7efb1758bffd",
        "author": "Cheng Chang",
        "date": "2020-02-13T10:31:32-08:00",
        "message": "Revert usage of Defer. (#6410)\n\nSummary:\nSeems like this caused the following test failure on AppVeyor:\nDBTest2.CrashInRecoveryMultipleCF\nc:\\projects\\rocksdb\\db\\db_test_util.cc(107): error: DestroyDB(dbname_, options)\nIO error: Failed to delete: C:\\projects\\rocksdb\\db_tests\\\\testrocksdb-3112//db_test2_10791409581227174103/000013.sst: Access is denied.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6410\n\nTest Plan: Wait to see whether the AppVeyor test passes.\n\nDifferential Revision: D19879872\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 59a9c55ca88566e9210c0b715ecc45a4fd9afe26",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a676001f95f9b61f96fb5fc68f2c7efb1758bffd"
    },
    {
        "hash": "d3ba398bbdcc43675e38ee1488d7aa999cf13faa",
        "author": "Cheng Chang",
        "date": "2020-02-10T18:13:27-08:00",
        "message": "Update unit tests for PinnableSlice (#6399)\n\nSummary:\n1. remove AssertEmpty because calling methods on moved objects is discouraged.\n2. add a test to assert that the internal buffer is moved instead of being copied.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6399\n\nTest Plan:\nmake slice_test && ./slice_test\nUSE_CLANG=1 make analyze\n\nDifferential Revision: D19825372\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 2e26f8ce5ec3edbfce067db045e80bd433e704f4",
        "modified_files_count": 1,
        "modified_files": [
            "util/slice_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d3ba398bbdcc43675e38ee1488d7aa999cf13faa"
    },
    {
        "hash": "cbf5f3be437ea867bc4ebd4ef6d2a23b95685a0e",
        "author": "Levi Tamasi",
        "date": "2020-02-10T17:15:42-08:00",
        "message": "Do not move VersionEdit into AtomicGroupReadBuffer (#6400)\n\nSummary:\nhttps://github.com/facebook/rocksdb/pull/6383 surfaced an issue with\n`VersionSet`/`ReactiveVersionSet` and `AtomicGroupReadBuffer::AddEdit`\n(which was added in https://github.com/facebook/rocksdb/pull/5411):\n`AddEdit` moves the `VersionEdit` passed to it into `replay_buffer_`,\nhowever, the client `VersionSet` classes keep using it afterwards. This\n*seemed to* work before the refactoring but it really did not: since\n`VersionEdit` used to have a user-declared destructor, no move\nconstructor/move assignment operator was generated, and the `move` in\n`AddEdit` was really a copy. The patch makes the copy explicit. Note: it\nshould be possible to rework this logic so that we can get away\nwith the move but for now, this should fix the issue.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6400\n\nTest Plan:\n`make check`\n`make analyze`\n\nDifferential Revision: D19824466\n\nPulled By: ltamasi\n\nfbshipit-source-id: f38033967daf2a39c78dcd6e12978bafe37632b4",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cbf5f3be437ea867bc4ebd4ef6d2a23b95685a0e"
    },
    {
        "hash": "594e815e32d5ea62857026eda5ebd4f6fc76f0da",
        "author": "sdong",
        "date": "2020-02-10T15:50:25-08:00",
        "message": "Make clang analyze happy with options_test (#6398)\n\nSummary:\nclang analysis shows following warning:\n\noptions/options_test.cc:1554:24: warning: The left operand of '-' is a garbage value\n            (file_size - 1) / readahead_size + 1);\n             ~~~~~~~~~ ^\n\nExplicitly initialize file_size and add an assertion to make clang analysis happy.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6398\n\nTest Plan: Run \"make analysis\" and see the warning goes away.\n\nDifferential Revision: D19819662\n\nfbshipit-source-id: 1589ea91c0c8f78242538f01448e4ad0e5fbc219",
        "modified_files_count": 1,
        "modified_files": [
            "options/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/594e815e32d5ea62857026eda5ebd4f6fc76f0da"
    },
    {
        "hash": "b2bc1da56197aa68a71eff2344e4393042c88eb6",
        "author": "sdong",
        "date": "2020-02-10T13:37:14-08:00",
        "message": "Try to fix some analysis failures\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/6384\n\nTest Plan: Wait and see the analysis result.\n\nDifferential Revision: D19781072\n\nfbshipit-source-id: 75e7cb6ee619ebd289841eaabea03dd075c09d3b",
        "modified_files_count": 1,
        "modified_files": [
            "options/options_parser.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b2bc1da56197aa68a71eff2344e4393042c88eb6"
    },
    {
        "hash": "2e0159ec9e69dadca09e6a932ae1f7a8fdc9cf1b",
        "author": "Yutian Li",
        "date": "2020-02-10T12:33:16-08:00",
        "message": "Add error status for no_slowdown & low priority write (#6396)\n\nSummary:\nWhen `no_slowdown` is enabled, it returns `Status::Incomplete(\"Write stall\")` if a stall would occur. This patch adds descriptive text for when `no_slowdown` and `low_pri` are enabled.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6396\n\nDifferential Revision: D19808978\n\nPulled By: cheng-chang\n\nfbshipit-source-id: a53b0d25ed414c821a086531e0222027f925e627",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2e0159ec9e69dadca09e6a932ae1f7a8fdc9cf1b"
    },
    {
        "hash": "debc4ef18b2e61581ca81dc7fc997b085eb015d9",
        "author": "Kefu Chai",
        "date": "2020-02-10T11:31:16-08:00",
        "message": "utilities/env_librados: copy use bufferlist::iterator (#6395)\n\nSummary:\nto adapt the change in ceph upstream where the bufferlist::copy() method\nwas removed in\nhttps://github.com/ceph/ceph/commit/c724369010a753bd44e11a534d1f42156c4fc12d\n\nSigned-off-by: Kefu Chai <tchaikov@gmail.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6395\n\nDifferential Revision: D19816815\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 9210767b91af0ecdcf5dfaa3e70edcaeea55135f",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/env_librados.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/debc4ef18b2e61581ca81dc7fc997b085eb015d9"
    },
    {
        "hash": "4e457278fa161b24c832c351cb5ade760fdca03a",
        "author": "Robert Yang",
        "date": "2020-02-07T15:20:38-08:00",
        "message": "db/write_thread.cc: Initialize state (#6275)\n\nSummary:\nFixed an error when compiled with -Og:\ndb/write_thread.cc:183:14: error: 'state' may be used uninitialized in this function [-Werror=maybe-uninitialized]\n\nSigned-off-by: Robert Yang <liezhi.yang@windriver.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6275\n\nDifferential Revision: D19381755\n\nfbshipit-source-id: a90bf3cd4a7248d9d71219e918fc6253deb97e3c",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_thread.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4e457278fa161b24c832c351cb5ade760fdca03a"
    },
    {
        "hash": "5f478b9f752414b5ec8155dc91f50c3331d296c3",
        "author": "Cheng Chang",
        "date": "2020-02-07T13:18:43-08:00",
        "message": "Remove outdated comment (#6379)\n\nSummary:\nSince the logic for handling IDENTITY file is now inside `NewDB`, the comment above `NewDB` is no longer relevant.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6379\n\nTest Plan: not needed\n\nDifferential Revision: D19795440\n\nPulled By: cheng-chang\n\nfbshipit-source-id: 0b1cca87ac6d92474701c46aa4c8d4d708bfa19b",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_open.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5f478b9f752414b5ec8155dc91f50c3331d296c3"
    },
    {
        "hash": "107a7ca9301f5b0958d17f2247f2511960acc970",
        "author": "Cheng Chang",
        "date": "2020-02-07T12:35:24-08:00",
        "message": "Remove inappropriate comments (#6371)\n\nSummary:\nThe comments are for iterators, not Cleanable.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6371\n\nTest Plan: no need\n\nDifferential Revision: D19727527\n\nPulled By: cheng-chang\n\nfbshipit-source-id: c74aeffa27ea0ce15a36ff6f9694826712cd1c70",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/cleanable.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/107a7ca9301f5b0958d17f2247f2511960acc970"
    },
    {
        "hash": "0a74e1b958f735fd2d79e2efa6e81f3c62c029c2",
        "author": "Cheng Chang",
        "date": "2020-02-07T12:32:09-08:00",
        "message": "Add status checks during DB::Open (#6380)\n\nSummary:\nSeveral statuses were not checked during DB::Open.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6380\n\nTest Plan: make check\n\nDifferential Revision: D19780237\n\nPulled By: cheng-chang\n\nfbshipit-source-id: c8d189d20344bd1607890dd1449345bda2ef96b9",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_open.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0a74e1b958f735fd2d79e2efa6e81f3c62c029c2"
    },
    {
        "hash": "c6f75516b7a13a0de4d197e0157b3191d28a4c18",
        "author": "atul",
        "date": "2020-02-06T10:30:44-08:00",
        "message": "Fixing the documentation of the function (#4803)\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/6354\n\nDifferential Revision: D19725459\n\nPulled By: riversand963\n\nfbshipit-source-id: fded24576251bfa4b289399f0909f1fe43426e28",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c6f75516b7a13a0de4d197e0157b3191d28a4c18"
    },
    {
        "hash": "3a073234da663709fcb7a479ec88ce7476c48e3a",
        "author": "sdong",
        "date": "2020-02-04T11:39:23-08:00",
        "message": "Consolidate ReadFileToString() (#6366)\n\nSummary:\nIt's a minor refactoring. We have two ReadFileToString() but they are very similar. Make the one with Env argument calls the one with FS argument instead.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6366\n\nTest Plan: Run all existing tests\n\nDifferential Revision: D19712332\n\nfbshipit-source-id: 5ae6fabf6355938690d95cda52afd1f39e0a7823",
        "modified_files_count": 1,
        "modified_files": [
            "env/env.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3a073234da663709fcb7a479ec88ce7476c48e3a"
    },
    {
        "hash": "f195d8d5231339242118937797d1b38e080cbcf7",
        "author": "sdong",
        "date": "2020-02-03T17:40:49-08:00",
        "message": "Use ReadFileToString() to get content from IDENTITY file (#6365)\n\nSummary:\nRight now when reading IDENTITY file, we use a very similar logic as ReadFileToString() while it does an extra file size check, which may be expensive in some file systems. There is no reason to duplicate the logic. Use ReadFileToString() instead.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6365\n\nTest Plan: RUn all existing tests.\n\nDifferential Revision: D19709399\n\nfbshipit-source-id: 3bac31f3b2471f98a0d2694278b41e9cd34040fe",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f195d8d5231339242118937797d1b38e080cbcf7"
    },
    {
        "hash": "eb4d6af5ae6268033407cf2eb5e9a56b57bc4ceb",
        "author": "Huisheng Liu",
        "date": "2020-02-03T13:32:53-08:00",
        "message": "Error handler test fix (#6266)\n\nSummary:\nMultiDBCompactionError fails when it verifies the number of files on level 0 and level 1 without waiting for compaction to finish.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6266\n\nDifferential Revision: D19701639\n\nPulled By: riversand963\n\nfbshipit-source-id: e96d511bcde705075f073e0b550cebcd2ecfccdc",
        "modified_files_count": 1,
        "modified_files": [
            "db/error_handler_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eb4d6af5ae6268033407cf2eb5e9a56b57bc4ceb"
    },
    {
        "hash": "800d24ddc54a83220a55d662330840c0d2eae58f",
        "author": "sdong",
        "date": "2020-01-31T15:44:14-08:00",
        "message": "Fix DBTest2.ChangePrefixExtractor LITE build (#6356)\n\nSummary:\nDBTest2.ChangePrefixExtractor fails in LITE build because LITE build doesn't support adaptive build. Fix it by removing the stats check but only check correctness.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6356\n\nTest Plan: Run the test with both of LITE and non-LITE build.\n\nDifferential Revision: D19669537\n\nfbshipit-source-id: 6d7dd6c8a79f18e80ca1636864b9c71922030d8e",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/800d24ddc54a83220a55d662330840c0d2eae58f"
    },
    {
        "hash": "01ab882ba37c545444d9c8c7ccef6444c71d5928",
        "author": "Maysam Yabandeh",
        "date": "2020-01-31T15:09:10-08:00",
        "message": "Fix release warning for unused bg_canceled\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/6357\n\nDifferential Revision: D19670931\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: d528c4c7f9450f1f38b9d2a36e0d5d0865b39be9",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/01ab882ba37c545444d9c8c7ccef6444c71d5928"
    },
    {
        "hash": "ec496347bc172b677eaf5f5645f0dbbea4ca8ac1",
        "author": "sdong",
        "date": "2020-01-31T11:02:03-08:00",
        "message": "Add a unit test for prefix extractor changes (#6323)\n\nSummary:\nAdd a unit test for prefix extractor change, including a check that fails due to a bug.\nAlso comment out the partitioned filter case which will fail the test too.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6323\n\nTest Plan: Run the test and it passes (and fails if the SeekForPrev() part is uncommented)\n\nDifferential Revision: D19509744\n\nfbshipit-source-id: 678202ca97b5503e9de73b54b90de9e5ba822b72",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ec496347bc172b677eaf5f5645f0dbbea4ca8ac1"
    },
    {
        "hash": "2243030bc5504cfa44267382ccb6df3bc029e057",
        "author": "Maysam Yabandeh",
        "date": "2020-01-31T10:29:11-08:00",
        "message": "Cancel bg jobs before deleting WritePrepared DB in stress tests (#6355)\n\nSummary:\nBackground jobs in WritePrepared DB might access the db via a snapshot checker callback. The stress tests therefore should cancel background jobs before deleting the db in ::Reopen.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6355\n\nDifferential Revision: D19664132\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 6060a830e8aad0015c10448286ad37c8a346ac01",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2243030bc5504cfa44267382ccb6df3bc029e057"
    },
    {
        "hash": "02ac6c9a3cee78816cec68540626df3dfb3ca9d7",
        "author": "sdong",
        "date": "2020-01-29T12:57:48-08:00",
        "message": "Fix db_bloom_filter_test clang LITE build (#6340)\n\nSummary:\ndb_bloom_filter_test break with clang LITE build with following message:\n\ndb/db_bloom_filter_test.cc:23:29: error: unused variable 'kPlainTable' [-Werror,-Wunused-const-variable]\nstatic constexpr PseudoMode kPlainTable = -1;\n                            ^\n\nFix it by moving the declaration out of LITE build\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6340\n\nTest Plan:\nUSE_CLANG=1 LITE=1 make db_bloom_filter_test\nand without LITE=1\n\nDifferential Revision: D19609834\n\nfbshipit-source-id: 0e88f5c6759238a94f9880d84c785ac18e7cdd7e",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bloom_filter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/02ac6c9a3cee78816cec68540626df3dfb3ca9d7"
    },
    {
        "hash": "4f6c86226ce79e3d4e35acb8f82b4a54d1d71c32",
        "author": "Sagar Vemuri",
        "date": "2020-01-27T19:58:53-08:00",
        "message": "Use the same oldest ancestor time in table properties and manifest\n\nSummary:\n./db_compaction_test DBCompactionTest.LevelTtlCascadingCompactions passed 96 / 100 times.\n```\nWith the fix: all runs (tried 100, 1000, 10000) succeed.\n```\n$ TEST_TMPDIR=/dev/shm ~/gtest-parallel/gtest-parallel ./db_compaction_test --gtest_filter=DBCompactionTest.LevelTtlCascadingCompactions --repeat=1000\n[1000/1000] DBCompactionTest.LevelTtlCascadingCompactions (1895 ms)\n```\n\nTest Plan:\nBuild:\n```\nCOMPILE_WITH_TSAN=1 make db_compaction_test -j100\n```\nWithout the fix: a few runs out of 100 fail:\n```\n$ TEST_TMPDIR=/dev/shm KEEP_DB=1 ~/gtest-parallel/gtest-parallel ./db_compaction_test --gtest_filter=DBCompactionTest.LevelTtlCascadingCompactions --repeat=100\n...\n...\nNote: Google Test filter = DBCompactionTest.LevelTtlCascadingCompactions\n[==========] Running 1 test from 1 test case.\n[----------] Global test environment set-up.\n[----------] 1 test from DBCompactionTest\n[ RUN      ] DBCompactionTest.LevelTtlCascadingCompactions\ndb/db_compaction_test.cc:3687: Failure\nExpected equality of these values:\n  oldest_time\n    Which is: 1580155869\n  level_to_files[6][0].oldest_ancester_time\n    Which is: 1580155870\nDB is still at /dev/shm//db_compaction_test_6337001442947696266\n[  FAILED  ] DBCompactionTest.LevelTtlCascadingCompactions (1432 ms)\n[----------] 1 test from DBCompactionTest (1432 ms total)\n\n[----------] Global test environment tear-down\n[==========] 1 test from 1 test case ran. (1433 ms total)\n[  PASSED  ] 0 tests.\n[  FAILED  ] 1 test, listed below:\n[  FAILED  ] DBCompactionTest.LevelTtlCascadingCompactions\n\n 1 FAILED TEST\n[80/100] DBCompactionTest.LevelTtlCascadingCompactions returned/aborted with exit code 1 (1489 ms)\n[100/100] DBCompactionTest.LevelTtlCascadingCompactions (1522 ms)\nFAILED TESTS (4/100):\n    1419 ms: ./db_compaction_test DBCompactionTest.LevelTtlCascadingCompactions (try https://github.com/facebook/rocksdb/issues/90)\n    1434 ms: ./db_compaction_test DBCompactionTest.LevelTtlCascadingCompactions (try https://github.com/facebook/rocksdb/issues/84)\n    1457 ms: ./db_compaction_test DBCompactionTest.LevelTtlCascadingCompactions (try https://github.com/facebook/rocksdb/issues/82)\n    1489 ms: ./db_compaction_test DBCompactionTest.LevelTtlCascadingCompactions (try https://github.com/facebook/rocksdb/issues/74)\n\nDifferential Revision: D19587040\n\nPulled By: sagar0\n\nfbshipit-source-id: 11191ae9940837643bff47ebe18b299b4be3d950",
        "modified_files_count": 1,
        "modified_files": [
            "db/flush_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4f6c86226ce79e3d4e35acb8f82b4a54d1d71c32"
    },
    {
        "hash": "5b33cfa1e30a6c5d8f386e1ccfe4e094ec8bd057",
        "author": "Andrew Kryczka",
        "date": "2020-01-27T15:49:22-08:00",
        "message": "fix `WriteBufferManager` flush log message (#6335)\n\nSummary:\nIt chooses the oldest memtable, not the largest one. This is an\nimportant difference for users whose CFs receive non-uniform write\nrates.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6335\n\nDifferential Revision: D19588865\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 62ad4325b0182f5f27858584cd73fd5978fb2cec",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5b33cfa1e30a6c5d8f386e1ccfe4e094ec8bd057"
    },
    {
        "hash": "86623a715363e2367066d055071e22430dcfff15",
        "author": "Cheng Chang",
        "date": "2020-01-16T14:04:44-08:00",
        "message": "Update example of optimistic transaction (#6074)\n\nSummary:\nAdd asserts to show the intentions of result explicitly.\nAdd examples to show the effect of optimistic transaction more clearly.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6074\n\nTest Plan: `cd examples && make optimistic_transaction_example && ./optimistic_transaction_example`\n\nDifferential Revision: D18964309\n\nPulled By: cheng-chang\n\nfbshipit-source-id: a524616ed9981edf2fd37ae61c5ed18c5cf25f55",
        "modified_files_count": 1,
        "modified_files": [
            "examples/optimistic_transaction_example.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/86623a715363e2367066d055071e22430dcfff15"
    },
    {
        "hash": "76c117b24b1acf485340ef38e1e78c0192093e16",
        "author": "sdong",
        "date": "2020-01-14T13:17:04-08:00",
        "message": "Fix LITE test build broken by recent commit (#6295)\n\nSummary:\nA recent commit adds a unit test that uses a function not available in LITE build. Fix it by avoiding the call\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6295\n\nTest Plan: Run the test in LITE build and see it passes.\n\nDifferential Revision: D19395678\n\nfbshipit-source-id: 37b42835bae02511630d80f7cafb1179401bc033",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/76c117b24b1acf485340ef38e1e78c0192093e16"
    },
    {
        "hash": "6a9989381fe6f2927a4915a86213e57fe2103d47",
        "author": "Yanqin Jin",
        "date": "2020-01-09T15:57:39-08:00",
        "message": "Fix compilation under LITE (#6277)\n\nSummary:\nFix compilation under LITE by putting `#ifndef ROCKSDB_LITE` around a code block.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6277\n\nDifferential Revision: D19334157\n\nPulled By: riversand963\n\nfbshipit-source-id: 947111ed68aa550f5ea424b216c1442a8af9e32b",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6a9989381fe6f2927a4915a86213e57fe2103d47"
    },
    {
        "hash": "cfd9732f650ea4c1ce072a530525cc8924251ae6",
        "author": "Yanqin Jin",
        "date": "2020-01-08T17:51:42-08:00",
        "message": "Remove inaccurate code comment (#6274)\n\nSummary:\nRemove a comment.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6274\n\nDifferential Revision: D19323151\n\nPulled By: riversand963\n\nfbshipit-source-id: d0d804d6882edcd94e35544ef45578b32ff1caae",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cfd9732f650ea4c1ce072a530525cc8924251ae6"
    },
    {
        "hash": "1244abef663b63ebaf15660c50a67c1f6fd77951",
        "author": "sdong",
        "date": "2020-01-08T13:32:06-08:00",
        "message": "Stress Test: relax prefix iterator check condition (#6269)\n\nSummary:\nRight now, when validating prefix iterator, if control iterator is invalidate but prefix iterator shows value, we determine it as a test failure. However, this fails to consider the case where a file or memtable containing a tombstone is filtered out by a prefix bloom filter. The fix is to relax the check in this case. If we are out of prefix range, then ignore the check.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6269\n\nTest Plan: Run crash_test for a short while and it still passes.\n\nDifferential Revision: D19317594\n\nfbshipit-source-id: b964a1cdc1df5efe439d4b32f8023e1fbc8598c1",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1244abef663b63ebaf15660c50a67c1f6fd77951"
    },
    {
        "hash": "f4a378be3e06901e70b5ca30b78c3e7c328d2a7f",
        "author": "Maysam Yabandeh",
        "date": "2020-01-08T12:10:55-08:00",
        "message": "Print out non-ok DB::Open status in db_stress (#6272)\n\nSummary:\nThe crash test is failing with non-ok status after TransactionDB::Open. This patch adds more debugging information.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6272\n\nDifferential Revision: D19314527\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: d45ecb0f2144e052fb4b5fdd483150440991a3b4",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f4a378be3e06901e70b5ca30b78c3e7c328d2a7f"
    },
    {
        "hash": "5709e97a74000ea688408289a17a1abf17990150",
        "author": "Maysam Yabandeh",
        "date": "2020-01-07T15:34:27-08:00",
        "message": "Skip CancelAllBackgroundWork if DBImpl is already closed (#6268)\n\nSummary:\nWritePreparedTxnDB calls CancelAllBackgroundWork in its destructor to avoid dangling references to it from background job's SnapshotChecker callback. However, if the DBImpl is already closed, the info log might be closed with it, which causes memory leak when CancelAllBackgroundWork tries to print to the info log. The patch fixes that by calling CancelAllBackgroundWork only if the db is not closed already.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6268\n\nDifferential Revision: D19303439\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 4228a6be7e78d43c90630347baa89b008200bd15",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_txn_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5709e97a74000ea688408289a17a1abf17990150"
    },
    {
        "hash": "a8b1085ae20e437633683517da3200437de3fd30",
        "author": "Yanqin Jin",
        "date": "2020-01-07T13:47:03-08:00",
        "message": "Fix test in LITE mode (#6267)\n\nSummary:\nCurrently, the recently-added test DBTest2.SwitchMemtableRaceWithNewManifest\nfails in LITE mode since SetOptions() returns \"Not supported\". I do not want to\nput `#ifndef ROCKSDB_LITE` because it reduces test coverage. Instead, just\ntrigger compaction on a different column family. The bg compaction thread\ncalling LogAndApply() may race with thread calling SwitchMemtable().\n\nTest Plan (dev server):\nmake check\nOPT=-DROCKSDB_LITE make check\n\nor run DBTest2.SwitchMemtableRaceWithNewManifest 100 times.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6267\n\nDifferential Revision: D19301309\n\nPulled By: riversand963\n\nfbshipit-source-id: 88cedcca2f985968ed3bb234d324ffa2aa04ca50",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a8b1085ae20e437633683517da3200437de3fd30"
    },
    {
        "hash": "946c43a026bc8855e200bcce888b8aeb6a6b0390",
        "author": "Yanqin Jin",
        "date": "2020-01-06T10:57:22-08:00",
        "message": "Improve error msg for SstFileWriter Merge (#6261)\n\nSummary:\nReword the error message when keys are not added in strict ascending order.\nSpecifically, original error message is not clear when application tries to\ncall SstFileWriter::Merge() with duplicate keys.\n\nTest plan (dev server)\n```\nmake check\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6261\n\nDifferential Revision: D19290398\n\nPulled By: riversand963\n\nfbshipit-source-id: 4dc30a701414e6894db2eb024e3734470c22b371",
        "modified_files_count": 1,
        "modified_files": [
            "table/sst_file_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/946c43a026bc8855e200bcce888b8aeb6a6b0390"
    },
    {
        "hash": "83957dc510132044263dea7e77206bf83da90cb6",
        "author": "Maysam Yabandeh",
        "date": "2020-01-03T13:07:35-08:00",
        "message": "Exclude MergeInProgress status from errors in stress tests (#6257)\n\nSummary:\nWhen called on transactions, MultiGet could return a legit MergeInProgress status. The patch excludes this case from errors.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6257\n\nDifferential Revision: D19275787\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: f7158229422af015947e592ae066b4273c9fb9a4",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/83957dc510132044263dea7e77206bf83da90cb6"
    },
    {
        "hash": "faebc336da211a9815e19c4a18f79f30dece2111",
        "author": "kim.sanghyun",
        "date": "2019-12-26T11:14:11-08:00",
        "message": "Fixed spelling in function comments (#6248)\n\nSummary:\nmeareTime() -> measureTime()\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6248\n\nDifferential Revision: D19231406\n\nPulled By: riversand963\n\nfbshipit-source-id: 20de4a43a5478b4a3e7853e1fb70b09ccadbf985",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/statistics.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/faebc336da211a9815e19c4a18f79f30dece2111"
    },
    {
        "hash": "5f559897cf120a77f6a7d60f23f82583607b5f07",
        "author": "Peter Dillinger",
        "date": "2019-12-21T21:12:11-08:00",
        "message": "Disable occasionally failing assertion in TestPrefixScan (#6238)\n\nSummary:\nSeeing crash test failures like\n\ndb_stress: db_stress_tool/no_batched_ops_stress.cc:271: virtual\nrocksdb::Status\nrocksdb::NonBatchedOpsStressTest::TestPrefixScan(rocksdb::ThreadState*,\nconst rocksdb::ReadOptions&, const std::vector<int>&, const\nstd::vector<long int>&): Assertion `count <=\nGetPrefixKeyCount(prefix.ToString(), upper_bound)' failed.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6238\n\nDifferential Revision: D19210312\n\nPulled By: pdillinger\n\nfbshipit-source-id: 4d2c35c38f418b408e01c7ba22adf6983ae67d44",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/no_batched_ops_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5f559897cf120a77f6a7d60f23f82583607b5f07"
    },
    {
        "hash": "22fea0ba79331a894d25b62cbb708f04a344ba9c",
        "author": "Peter Dillinger",
        "date": "2019-12-21T20:58:30-08:00",
        "message": "Fix unused variable in release build\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/6237\n\nDifferential Revision: D19210304\n\nPulled By: pdillinger\n\nfbshipit-source-id: f6f050e995f4d210f812bb1d2020adbd751e1d5a",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_common.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/22fea0ba79331a894d25b62cbb708f04a344ba9c"
    },
    {
        "hash": "e0f9d11a05ec2cddd83c46fd063824721ea26670",
        "author": "sdong",
        "date": "2019-12-20T22:10:06-08:00",
        "message": "db_stress should not keep manifest files under checkpoint directory (#6233)\n\nSummary:\nRecently db_stress starts to use a special Env that keeps all manifest files. This should not apply to checkpoint directory and causes test failure like this:\n\nVerification failed: Checkpoint gave inconsistent state. Status is IO error: While mkdir: /dev/shm/rocksdb/rocksdb_crashtest_whitebox/.checkpoint27.tmp: File exists\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6233\n\nTest Plan: Run crash_test with high chance of checkpoint and make sure it doesn't reproduce.\n\nDifferential Revision: D19207250\n\nfbshipit-source-id: 12a931379e2e0572bb84aa658b6d03770c8551d4",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_env_wrapper.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e0f9d11a05ec2cddd83c46fd063824721ea26670"
    },
    {
        "hash": "9d36c066c6a8c79b024373d775751f85e69b792a",
        "author": "sdong",
        "date": "2019-12-20T21:47:06-08:00",
        "message": "db_stress: listners to implement all functions (#6197)\n\nSummary:\nListners are one source of bugs because we frequently release some mutex to invoke them, which introduce race conditions. Implement all callback functions in db_stress's listener class, and randomly sleep.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6197\n\nTest Plan: Run crash_test for a while and see no obvious problem.\n\nDifferential Revision: D19134015\n\nfbshipit-source-id: b9ea8be9366e4501759119520cd4f204943538f6",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_listener.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9d36c066c6a8c79b024373d775751f85e69b792a"
    },
    {
        "hash": "c4fd9cf461e3fe9544db0d38db2e835b4947bc18",
        "author": "Yanqin Jin",
        "date": "2019-12-20T11:29:06-08:00",
        "message": "Remove an unnecessary check before running db_stress (#6231)\n\nSummary:\nAs title. We can run non-cf-consistency stress tests with verify_db_one_in>0,\nthus remove the check added previously.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6231\n\nTest Plan:\n```\nmake crash_test\n```\n\nDifferential Revision: D19198295\n\nPulled By: riversand963\n\nfbshipit-source-id: e874c701bb03ab76eaab00f059dd4032bb2f537f",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c4fd9cf461e3fe9544db0d38db2e835b4947bc18"
    },
    {
        "hash": "1ebaa762e65629eec0c011e786ee027a3d0569e5",
        "author": "Levi Tamasi",
        "date": "2019-12-20T11:00:53-08:00",
        "message": "Log garbage_collection_cutoff alongside the other BlobDB options\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/6229\n\nDifferential Revision: D19191195\n\nPulled By: ltamasi\n\nfbshipit-source-id: 2a3c4785299641a46e022fc012460b759a689fce",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1ebaa762e65629eec0c011e786ee027a3d0569e5"
    },
    {
        "hash": "f295b099f689c8798620aa93ffd1c8751bd4b9ef",
        "author": "sdong",
        "date": "2019-12-19T14:56:38-08:00",
        "message": "BlockBasedTable::ApproximateSize() should use total order seek (#6222)\n\nSummary:\nRight now BlockBasedTable::ApproximateSize() uses default setting about whether to use total order seek. There is no reason for that. There is no reason to do any filtering for approximate size boundary key, and it may introduce bugs. Disable it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6222\n\nTest Plan: Run existing tests\n\nDifferential Revision: D19184787\n\nfbshipit-source-id: 64180660bd2800914fff75104172b61c06f0b1c9",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f295b099f689c8798620aa93ffd1c8751bd4b9ef"
    },
    {
        "hash": "ef9189479848c872a1443b9ea6ef126544a48978",
        "author": "sdong",
        "date": "2019-12-18T17:04:15-08:00",
        "message": "Fix potential overflow in CalculateSSTWriteHint() (#6212)\n\nSummary:\nlevel passed into ColumnFamilyData::CalculateSSTWriteHint() can be smaller than base_level in current version, which would cause overflow.\nWe see ubsan complains:\n\ndb/compaction/compaction_job.cc:1511:39: runtime error: load of value 4294967295, which is not a valid value for type 'Env::WriteLifeTimeHint'\n\nand I hope this commit fixes it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6212\n\nTest Plan: Run existing tests and see them to pass.\n\nDifferential Revision: D19168442\n\nfbshipit-source-id: bf8fd86f85478ecfa7556db46dc3242de8c83dc9",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ef9189479848c872a1443b9ea6ef126544a48978"
    },
    {
        "hash": "c399704c7ae57f950ed1c6920bc43ad54e50c016",
        "author": "Zhichao Cao",
        "date": "2019-12-18T01:23:07-08:00",
        "message": "Fix: remove the potential dead store variable in block_based_table_reader.cc (#6204)\n\nSummary:\nbuf_offset does not need to get the value from req.len for othe final block. It can cause test fail for clan_analyze. Remove it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6204\n\nTest Plan: pass make asan_check\n\nDifferential Revision: D19145335\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 8f6e74565746381b5c5ef598b97d746517b36e5b",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c399704c7ae57f950ed1c6920bc43ad54e50c016"
    },
    {
        "hash": "02aa22957ab6bd392d5a7963942280159f6f81c3",
        "author": "Levi Tamasi",
        "date": "2019-12-17T10:20:16-08:00",
        "message": "Set CompactionIterator::valid_ to false when PrepareBlobOutput indicates error\n\nSummary:\nWith https://github.com/facebook/rocksdb/pull/6121, errors returned by `PrepareBlobValue`\nresult in `CompactionIterator::status_` being set to `Corruption` or `IOError`\nas appropriate, however, `valid_` is not set to `false`. The error is eventually propagated in\n`CompactionJob::ProcessKeyValueCompaction` but only after the main loop completes.\nSetting `valid_` to `false` upon errors enables us to terminate the loop early and fail the\ncompaction sooner.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6170\n\nTest Plan:\nRan `make check` and used `db_bench` in BlobDB mode.\n\nfbshipit-source-id: a2ca88a3ca71115e2605bd34a4c795d8a28bef27",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/02aa22957ab6bd392d5a7963942280159f6f81c3"
    },
    {
        "hash": "68d5d82d1fdaf3094b0b66c3f4195f2048f8db7a",
        "author": "Maysam Yabandeh",
        "date": "2019-12-16T18:33:09-08:00",
        "message": "Wait for CancelAllBackgroundWork before Close in db stress (#6191)\n\nSummary:\nIn https://github.com/facebook/rocksdb/issues/6174 we fixed the stress test to respect the CancelAllBackgroundWork + Close order for WritePrepared transactions. The fix missed to take into account that some invocation of CancelAllBackgroundWork are with wait=false parameter which essentially breaks the order.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6191\n\nDifferential Revision: D19102709\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: f4e7b5fdae47ff1c1ac284ba1cf67d5d3f3d03eb",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/68d5d82d1fdaf3094b0b66c3f4195f2048f8db7a"
    },
    {
        "hash": "ad34faba1504dbebc14e7ab7d209519610f86602",
        "author": "anand76",
        "date": "2019-12-14T15:39:41-08:00",
        "message": "Fix unity test (#6178)\n\nSummary:\nFix the test failure.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6178\n\nDifferential Revision: D19071208\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 71622832ac93ff2663946c546d9642d5b9e3d194",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ad34faba1504dbebc14e7ab7d209519610f86602"
    },
    {
        "hash": "349bd3ed8219246c8f1318c6fdfd7e193e3eb01d",
        "author": "Maysam Yabandeh",
        "date": "2019-12-13T18:22:50-08:00",
        "message": "CancelAllBackgroundWork before Close in db stress (#6174)\n\nSummary:\nClose asserts that there is no unreleased snapshots. For WritePrepared transaction, this means that the background work that holds on a snapshot must be canceled first. Update the stress tests to respect the sequence.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6174\n\nTest Plan:\n```\nmake -j32 crash_test\n\nDifferential Revision: D19057322\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: c9e9e24f779bbfb0ab72c2717e34576c01bc6362",
        "modified_files_count": 1,
        "modified_files": [
            "db_stress_tool/db_stress_test_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/349bd3ed8219246c8f1318c6fdfd7e193e3eb01d"
    },
    {
        "hash": "0d2172f12800457ebb1d0ef36ba3ca6e0c218d0c",
        "author": "Levi Tamasi",
        "date": "2019-12-13T16:13:25-08:00",
        "message": "Make it possible to enable periodic compactions for BlobDB (#6172)\n\nSummary:\nPeriodic compactions ensure that even SSTs that do not get picked up\notherwise eventually go through compaction; used in conjunction with\nBlobDB's garbage collection, they enable BlobDB to reclaim space when\nold blob files are used by such straggling SSTs.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6172\n\nTest Plan: Ran `make check` and used the BlobDB mode of `db_bench`.\n\nDifferential Revision: D19045045\n\nPulled By: ltamasi\n\nfbshipit-source-id: 04636ecc4b6cfe8d495bf656faa65d54a5eb1a93",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0d2172f12800457ebb1d0ef36ba3ca6e0c218d0c"
    },
    {
        "hash": "6d54eb3dc2e6d0ef75ffc252479a68f5151fa0d4",
        "author": "Levi Tamasi",
        "date": "2019-12-13T13:29:29-08:00",
        "message": "Do not create/install new SuperVersion if nothing was deleted during memtable trim (#6169)\n\nSummary:\nWe have observed an increase in CPU load caused by frequent calls to\n`ColumnFamilyData::InstallSuperVersion` from `DBImpl::TrimMemtableHistory`\nwhen using `max_write_buffer_size_to_maintain` to limit the amount of\nmemtable history maintained for transaction conflict checking. As it turns out,\nthis is caused by the code creating and installing a new `SuperVersion` even if\nno memtables were actually trimmed. The patch adds a check to avoid this.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6169\n\nTest Plan:\nCompared `perf` output for\n\n```\n./db_bench -benchmarks=randomtransaction -optimistic_transaction_db=1 -statistics -stats_interval_seconds=1 -duration=90 -num=500000 --max_write_buffer_size_to_maintain=16000000 --transaction_set_snapshot=1 --threads=32\n```\n\nbefore and after the change. With the fix, the call chain `rocksdb::DBImpl::TrimMemtableHistory` ->\n`rocksdb::ColumnFamilyData::InstallSuperVersion` -> `rocksdb::ThreadLocalPtr::StaticMeta::Scrape`\nno longer registers in the `perf` report.\n\nDifferential Revision: D19031509\n\nPulled By: ltamasi\n\nfbshipit-source-id: 02686fce594e5b50eba0710e4b28a9b808c8aa20",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6d54eb3dc2e6d0ef75ffc252479a68f5151fa0d4"
    },
    {
        "hash": "a796c06fef6a8e43d793f8e627db3f29e6f95964",
        "author": "Maysam Yabandeh",
        "date": "2019-12-12T13:50:27-08:00",
        "message": "Fix build breakage from lock_guard error (#6161)\n\nSummary:\nThis change fixes a source issue that caused compile time error which breaks build for many fbcode services in that setup. The size() member function of channel is a const member, so member variables accessed within it are implicitly const as well. This caused error when clang fails to resolve to a constructor that takes std::mutex because the suitable constructor got rejected due to loss of constness for its argument. The fix is to add mutable modifier to the lock_ member of channel.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6161\n\nDifferential Revision: D18967685\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 698b6a5153c3c92eeacb842c467aa28cc350d432",
        "modified_files_count": 1,
        "modified_files": [
            "util/channel.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a796c06fef6a8e43d793f8e627db3f29e6f95964"
    },
    {
        "hash": "e1dfe80fe01810970bc5e5aa089aa24fd2103f89",
        "author": "Levi Tamasi",
        "date": "2019-12-11T17:19:43-08:00",
        "message": "Mark BlobIndex::DebugString const\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/6157\n\nTest Plan: make check\n\nDifferential Revision: D18944259\n\nPulled By: ltamasi\n\nfbshipit-source-id: 7fb29447b52d801215bd6ab811e229a7fa2c763d",
        "modified_files_count": 1,
        "modified_files": [
            "db/blob_index.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e1dfe80fe01810970bc5e5aa089aa24fd2103f89"
    },
    {
        "hash": "d0ad3c59d80c24166dd84f3b37da4a9966f1288e",
        "author": "Peter Dillinger",
        "date": "2019-12-11T15:17:08-08:00",
        "message": "Fix c_test:filter for various CACHE_LINE_SIZEs (#6153)\n\nSummary:\nThis test was recently updated but failed to account for Bloom\nschema variance by CACHE_LINE_SIZE. (Since CACHE_LINE_SIZE is not\ndefined in our C code, the test now simply allows a valid result for any\nCACHE_LINE_SIZE, not just the current one.)\n\nUnblock https://github.com/facebook/rocksdb/issues/5932\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6153\n\nTest Plan:\nran unit test with builds TEST_CACHE_LINE_SIZE=128, =256, and\nunset (64 on Intel)\n\nDifferential Revision: D18936015\n\nPulled By: pdillinger\n\nfbshipit-source-id: e5e3852f95283d34d624632c1ae8d3adb2f2662c",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d0ad3c59d80c24166dd84f3b37da4a9966f1288e"
    },
    {
        "hash": "3717a882897dc94459944fd092eeb59b8992c045",
        "author": "奏之章",
        "date": "2019-12-11T11:27:53-08:00",
        "message": "Fix UniversalCompaction trivial move bug (#6067)\n\nSummary:\n`curr.level` is `c->inputs_` index, not real level.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6067\n\nDifferential Revision: D18935726\n\nfbshipit-source-id: 4354e6e9cd900ca56c96e9d770f0ab6634e45daf",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_picker_universal.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3717a882897dc94459944fd092eeb59b8992c045"
    },
    {
        "hash": "77565d7532ce5c5d1c3cd30ea70cb7289ac3a502",
        "author": "Cheng Chang",
        "date": "2019-12-11T09:56:42-08:00",
        "message": "Add example to show the effect of Get in snapshot isolation (#6059)\n\nSummary:\nAdds example to show the difference of reading from snapshot and from the latest state.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6059\n\nTest Plan: cd examples && make transaction_example && ./transaction_example\n\nDifferential Revision: D18797616\n\nfbshipit-source-id: f17a2cb12187092ea243159e6ccf55790859e0c0",
        "modified_files_count": 1,
        "modified_files": [
            "examples/transaction_example.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/77565d7532ce5c5d1c3cd30ea70cb7289ac3a502"
    },
    {
        "hash": "2b060c14982d22e0eca5d10557ebc1e3280e2fcc",
        "author": "Yanqin Jin",
        "date": "2019-12-10T11:49:09-08:00",
        "message": "Use Env::GetChildren() instead of readdir (#6139)\n\nSummary:\nFor more portability, switch from readdir to Env::GetChildren() in ldb's\nmanifest_dump subcommand.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6139\n\nTest Plan:\n```\n$make check\n```\nManually check ldb command.\n\nDifferential Revision: D18898197\n\nPulled By: riversand963\n\nfbshipit-source-id: 92afca379e9fbe78ab70b2eb40d127daad8df5e2",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2b060c14982d22e0eca5d10557ebc1e3280e2fcc"
    },
    {
        "hash": "3c347821b7fd6f57fa42cf4faa7fae083f915b31",
        "author": "sdong",
        "date": "2019-12-09T12:03:30-08:00",
        "message": "Fix thread_local_test failure caused by recent io_uring change (#6136)\n\nSummary:\nthread_local_test now fails because it asserts no thread local instance is created when the test started. However, right now a thread local instance might be created when creating PosixEnv as a static variable. Fix the test by relaxing the assumption of starting from 0.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6136\n\nTest Plan: Find an environment where the test fails, and see it passes with the fix applied.\n\nDifferential Revision: D18889224\n\nfbshipit-source-id: 7946f3bfea81d236f7bb1554076696705b211b92",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3c347821b7fd6f57fa42cf4faa7fae083f915b31"
    },
    {
        "hash": "d1ae2c3faf0ec32c2fb1f7422c88f00859a545ab",
        "author": "sdong",
        "date": "2019-12-09T10:25:09-08:00",
        "message": "Fix an asan warning caused by the recent io_uring change (#6135)\n\nSummary:\nASAN reports:\n\ninternal_repo_rocksdb/repo:db_test - MultiThreaded/MultiThreadedDBTest.MultiThreaded/43: fatal\n==2692739==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6130000500ca at pc 0x0000006be780 bp 0x7efef85ccd20 sp 0x7efef85cc4d0\n[CONTEXT] === How to use this, how to get the raw stack trace, and more: fburl.com/ASAN ===\n[CONTEXT] READ of size 331 at 0x6130000500ca thread T195\n[CONTEXT]      #0 db_test_bin+0x6be77f                     __interceptor_strlen.part.35\n[CONTEXT]      https://github.com/facebook/rocksdb/issues/1 internal_repo_rocksdb/repo/include/rocksdb/slice.h:55 rocksdb::Slice::Slice(char const*)\n[CONTEXT]      https://github.com/facebook/rocksdb/issues/2 internal_repo_rocksdb/repo/env/io_posix.cc:522 rocksdb::PosixRandomAccessFile::MultiRead(rocksdb::ReadRequest*, unsigned long)\n\nI looked at env/io_posix.cc:522 but don't see a reason why the line needs to be there at all, because it is not used before overwritten. So it must be a line that is put there as a bug. Remove it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6135\n\nTest Plan: Rerun the same test which passes after the fix. Run all the tests and make sure they all pass.\n\nDifferential Revision: D18880251\n\nfbshipit-source-id: 3b84ac6a05b67b529c4202e0ceb4c047460f44f2",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d1ae2c3faf0ec32c2fb1f7422c88f00859a545ab"
    },
    {
        "hash": "3a6d9436e82790e149f69d9a5eace3dd3f145e52",
        "author": "Peter Dillinger",
        "date": "2019-12-09T09:23:50-08:00",
        "message": "Use SpecialSkipListFactory in RecalculateScoreAfterPicking (#6125)\n\nSummary:\nTest DBTestUniversalCompaction.RecalculateScoreAfterPicking was\nflaky on ARM, so it now uses SpecialSkipListFactory (like other tests)\nfor predictable memtable flushes.\n\nFixes https://github.com/facebook/rocksdb/issues/5736\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6125\n\nTest Plan:\nwhile ./db_universal_compaction_test; do :; done # for a\nwhile on ARM and on Intel (both Linux)\n\nDifferential Revision: D18864821\n\nPulled By: pdillinger\n\nfbshipit-source-id: 2f3ca0ea66ce420dcd6d41b0ec12377112a5a79f",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_universal_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3a6d9436e82790e149f69d9a5eace3dd3f145e52"
    },
    {
        "hash": "6db57bc37f2edee1f1ac8030593659b83d33a7d9",
        "author": "Peter Dillinger",
        "date": "2019-12-06T10:28:02-08:00",
        "message": "Disable new Bloom filter assertion (#6128)\n\nSummary:\nA longstanding bug in our C interface can trigger this\nassertion; see issue https://github.com/facebook/rocksdb/issues/6129. Disabling the assertion for now\n(for 6.6.0) and will re-enable on fix of that bug.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6128\n\nDifferential Revision: D18854899\n\nPulled By: pdillinger\n\nfbshipit-source-id: 9eb5294b9f11b208dc1a8cc148aaa31e47ff892b",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/filter_policy.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6db57bc37f2edee1f1ac8030593659b83d33a7d9"
    },
    {
        "hash": "ad528fe5ca08dafff47d79c85abbf3e1fbb21568",
        "author": "Peter Dillinger",
        "date": "2019-12-05T15:48:01-08:00",
        "message": "Disable folly_synchronization_distributed_mutex_test on ARM for now (#6126)\n\nSummary:\nThis test is crashing on ARM but is not yet production code.\nLet's not let it block ARM CI. See PR https://github.com/facebook/rocksdb/issues/5932\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6126\n\nTest Plan:\n./folly_synchronization_distributed_mutex_test, on Linux/ARM,\non Linux/x86_64, and with LITE=1 on Linux/x86_64 (also disabled)\n\nDifferential Revision: D18836576\n\nPulled By: pdillinger\n\nfbshipit-source-id: d8a36eea2f048e8330411d994435d1c58a15d978",
        "modified_files_count": 1,
        "modified_files": [
            "third-party/folly/folly/synchronization/test/DistributedMutexTest.cpp"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ad528fe5ca08dafff47d79c85abbf3e1fbb21568"
    },
    {
        "hash": "f32a311f0dfa0dd95ada50b1ffc9bf62cb72af94",
        "author": "Connor",
        "date": "2019-12-03T11:59:21-08:00",
        "message": "Fix compliation error on GCC4.8.2 (#6106)\n\nSummary:\n```\nIn file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from ./db/merge_context.h:7,\n                 from ./db/dbformat.h:16,\n                 from ./tools/block_cache_analyzer/block_cache_trace_analyzer.h:12,\n                 from tools/block_cache_analyzer/block_cache_trace_analyzer.cc:8:\n/usr/include/c++/4.8.2/bits/stl_algo.h: In instantiation of ‘_RandomAccessIterator std::__unguarded_partition(_RandomAccessIterator, _RandomAccessIterator, const _Tp&, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::pair<std::basic_string<char>, long unsigned int>*, std::vector<std::pair<std::basic_string<char>, long unsigned int> > >; _Tp = std::pair<std::basic_string<char>, long unsigned int>; _Compare = rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1]’:\n/usr/include/c++/4.8.2/bits/stl_algo.h:2296:78:   required from ‘_RandomAccessIterator std::__unguarded_partition_pivot(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::pair<std::basic_string<char>, long unsigned int>*, std::vector<std::pair<std::basic_string<char>, long unsigned int> > >; _Compare = rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1]’\n/usr/include/c++/4.8.2/bits/stl_algo.h:2337:62:   required from ‘void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator, _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::pair<std::basic_string<char>, long unsigned int>*, std::vector<std::pair<std::basic_string<char>, long unsigned int> > >; _Size = long int; _Compare = rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1]’\n/usr/include/c++/4.8.2/bits/stl_algo.h:5499:44:   required from ‘void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter = __gnu_cxx::__normal_iterator<std::pair<std::basic_string<char>, long unsigned int>*, std::vector<std::pair<std::basic_string<char>, long unsigned int> > >; _Compare = rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1’\ntools/block_cache_analyzer/block_cache_trace_analyzer.cc:583:79:   required from here\n/usr/include/c++/4.8.2/bits/stl_algo.h:2263:35: error: no match for call to ‘(rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1) (std::pair<std::basic_string<char>, long unsigned int>&, const std::pair<std::basic_string<char>, long unsigned int>&)’\n    while (__comp(*__first, __pivot))\n                                   ^\ntools/block_cache_analyzer/block_cache_trace_analyzer.cc:582:9: note: candidates are:\n       [=](std::pair<std::string, uint64_t>& a,\n         ^\nIn file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from ./db/merge_context.h:7,\n                 from ./db/dbformat.h:16,\n                 from ./tools/block_cache_analyzer/block_cache_trace_analyzer.h:12,\n                 from tools/block_cache_analyzer/block_cache_trace_analyzer.cc:8:\n/usr/include/c++/4.8.2/bits/stl_algo.h:2263:35: note: bool (*)(std::pair<std::basic_string<char>, long unsigned int>&, std::pair<std::basic_string<char>, long unsigned int>&) <conversion>\n    while (__comp(*__first, __pivot))\n                                   ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:2263:35: note:   candidate expects 3 arguments, 3 provided\ntools/block_cache_analyzer/block_cache_trace_analyzer.cc:583:46: note: rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1\n           std::pair<std::string, uint64_t>& b) { return b.second < a.second; });\n                                              ^\ntools/block_cache_analyzer/block_cache_trace_analyzer.cc:583:46: note:   no known conversion for argument 2 from ‘const std::pair<std::basic_string<char>, long unsigned int>’ to ‘std::pair<std::basic_string<char>, long unsigned int>&’\nIn file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from ./db/merge_context.h:7,\n                 from ./db/dbformat.h:16,\n                 from ./tools/block_cache_analyzer/block_cache_trace_analyzer.h:12,\n                 from tools/block_cache_analyzer/block_cache_trace_analyzer.cc:8:\n/usr/include/c++/4.8.2/bits/stl_algo.h:2266:34: error: no match for call to ‘(rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1) (const std::pair<std::basic_string<char>, long unsigned int>&, std::pair<std::basic_string<char>, long unsigned int>&)’\n    while (__comp(__pivot, *__last))\n                                  ^\ntools/block_cache_analyzer/block_cache_trace_analyzer.cc:582:9: note: candidates are:\n       [=](std::pair<std::string, uint64_t>& a,\n         ^\nIn file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from ./db/merge_context.h:7,\n                 from ./db/dbformat.h:16,\n                 from ./tools/block_cache_analyzer/block_cache_trace_analyzer.h:12,\n                 from tools/block_cache_analyzer/block_cache_trace_analyzer.cc:8:\n/usr/include/c++/4.8.2/bits/stl_algo.h:2266:34: note: bool (*)(std::pair<std::basic_string<char>, long unsigned int>&, std::pair<std::basic_string<char>, long unsigned int>&) <conversion>\n    while (__comp(__pivot, *__last))\n                                  ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:2266:34: note:   candidate expects 3 arguments, 3 provided\ntools/block_cache_analyzer/block_cache_trace_analyzer.cc:583:46: note: rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1\n           std::pair<std::string, uint64_t>& b) { return b.second < a.second; });\n                                              ^\ntools/block_cache_analyzer/block_cache_trace_analyzer.cc:583:46: note:   no known conversion for argument 1 from ‘const std::pair<std::basic_string<char>, long unsigned int>’ to ‘std::pair<std::basic_string<char>, long unsigned int>&’\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6106\n\nDifferential Revision: D18783943\n\nPulled By: riversand963\n\nfbshipit-source-id: cc7fc10565f0210b9eebf46b95cb4950ec0b15fa",
        "modified_files_count": 1,
        "modified_files": [
            "tools/block_cache_analyzer/block_cache_trace_analyzer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f32a311f0dfa0dd95ada50b1ffc9bf62cb72af94"
    },
    {
        "hash": "16fa6fd2a6bd0d22c0d2bc9f0f3bf2a296b3232d",
        "author": "anand76",
        "date": "2019-12-02T15:00:07-08:00",
        "message": "Remove key length assertion LRUHandle::CalcTotalCharge (#6115)\n\nSummary:\nInserting an entry in the block cache with 0 length key is a valid use case. Remove the assertion in ```LRUHandle::CalcTotalCharge```.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6115\n\nDifferential Revision: D18769693\n\nPulled By: anand1976\n\nfbshipit-source-id: 34cc159650300dda6d7273480640478f28392cda",
        "modified_files_count": 1,
        "modified_files": [
            "cache/lru_cache.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/16fa6fd2a6bd0d22c0d2bc9f0f3bf2a296b3232d"
    },
    {
        "hash": "e8f997ca597761087c46ad6657aebe7c73a45e38",
        "author": "Peter Dillinger",
        "date": "2019-11-27T15:06:58-08:00",
        "message": "Update comment on max_valid_backups_to_open (#6105)\n\nSummary:\nTo reflect changes in PR https://github.com/facebook/rocksdb/issues/6072\n\nThis comment also implies that a seemingly valid use-case for\nmax_valid_backups_to_open is flawed: even if you only want to add a new\nbackup without trying to delete, you might need to clean up after a\nbackup creation that never finished. To clean up properly requires\nopening all backups to get proper ref counts on shared files.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6105\n\nTest Plan: code comment only\n\nDifferential Revision: D18736716\n\nPulled By: pdillinger\n\nfbshipit-source-id: 2447c0000eefe3a4ca606926bfe922a8456b0cb7",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/backupable_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e8f997ca597761087c46ad6657aebe7c73a45e38"
    },
    {
        "hash": "069579328394c48037e594202c6f2186cee70c33",
        "author": "Peter Dillinger",
        "date": "2019-11-27T10:24:16-08:00",
        "message": "Update format_version comment for 6.6.0\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/6097\n\nDifferential Revision: D18729661\n\nPulled By: pdillinger\n\nfbshipit-source-id: d2e4a9d6803aad8dd61ececd5c2b861e6f2da73b",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/table.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/069579328394c48037e594202c6f2186cee70c33"
    },
    {
        "hash": "4f17d33db4b2da89ca95af98c357c2ea7facc0e9",
        "author": "Peter Dillinger",
        "date": "2019-11-26T13:28:31-08:00",
        "message": "Remove unused/undefined ImmutableCFOptions() (#6086)\n\nSummary:\ndefault constructor not used or even defined\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6086\n\nDifferential Revision: D18695669\n\nPulled By: pdillinger\n\nfbshipit-source-id: 6b6ac46029f4fb6edf1c11ee6ce1d9f172b2eaf2",
        "modified_files_count": 1,
        "modified_files": [
            "options/cf_options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4f17d33db4b2da89ca95af98c357c2ea7facc0e9"
    },
    {
        "hash": "75dfc7883d08e323d8368e33410b3bb1e7fad5a1",
        "author": "Levi Tamasi",
        "date": "2019-11-22T21:23:00-08:00",
        "message": "Fix the constness issues around autovector::iterator_impl's dereference operators (#6057)\n\nSummary:\nAs described in detail in issue https://github.com/facebook/rocksdb/issues/6048, iterators' dereference operators\n(`*`, `->`, and `[]`) should return `pointer`s/`reference`s (as opposed to\n`const_pointer`s/`const_reference`s) even if the iterator itself is `const`\nto be in sync with the standard's iterator concept.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6057\n\nTest Plan: make check\n\nDifferential Revision: D18623235\n\nPulled By: ltamasi\n\nfbshipit-source-id: 04e82d73bc0c67fb0ded018383af8dfc332050cc",
        "modified_files_count": 1,
        "modified_files": [
            "util/autovector.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/75dfc7883d08e323d8368e33410b3bb1e7fad5a1"
    },
    {
        "hash": "c0983d069193d59aec7ddc8c02475e0f5081b52f",
        "author": "Cheng Chang",
        "date": "2019-11-20T14:18:51-08:00",
        "message": "Add asserts in transaction example (#6055)\n\nSummary:\nThe intention of the example for read committed is clearer with these added asserts.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6055\n\nTest Plan: `cd examples && make transaction_example && ./transaction_example`\n\nDifferential Revision: D18621830\n\nPulled By: riversand963\n\nfbshipit-source-id: a94b08c5958b589049409ee4fc4d6799e5cbef79",
        "modified_files_count": 1,
        "modified_files": [
            "examples/transaction_example.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c0983d069193d59aec7ddc8c02475e0f5081b52f"
    },
    {
        "hash": "3cd75736a7eb0cbdb120acc7c669fc49ccc3959e",
        "author": "Stephan T. Lavavej",
        "date": "2019-11-20T11:28:41-08:00",
        "message": "Add operator[] to autovector::iterator_impl. (#6047)\n\nSummary:\nThis is a required operator for random-access iterators, and an upcoming update for Visual Studio 2019 will change the C++ Standard Library's heap algorithms to use this operator.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6047\n\nDifferential Revision: D18618531\n\nPulled By: ltamasi\n\nfbshipit-source-id: 08d10bc85bf2dbc3f7ef0fa3c777e99f1e927ef5",
        "modified_files_count": 1,
        "modified_files": [
            "util/autovector.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3cd75736a7eb0cbdb120acc7c669fc49ccc3959e"
    },
    {
        "hash": "27ec3b34667782d3a98176302e2206ea54f4bd19",
        "author": "sdong",
        "date": "2019-11-20T10:38:01-08:00",
        "message": "Sanitize input in DB::MultiGet() API (#6054)\n\nSummary:\nThe new DB::MultiGet() doesn't validate input for num_keys > 1 and GCC-9 complains about it. Fix it by directly return when num_keys == 0\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6054\n\nTest Plan: Build with GCC-9 and see it passes.\n\nDifferential Revision: D18608958\n\nfbshipit-source-id: 1c279aff3c7fe6e9d5a6d085ed02550ecea4fdb2",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/27ec3b34667782d3a98176302e2206ea54f4bd19"
    },
    {
        "hash": "019eb1f402ee3b501b7211deeb7f872444a565a6",
        "author": "Levi Tamasi",
        "date": "2019-11-19T15:02:41-08:00",
        "message": "Disable blob iterator test with max_sequential_skip_in_iterations==0 in LITE mode (#6052)\n\nSummary:\nThe SetOptions API used by the test is not supported in LITE mode,\nso we should skip the new chunk in this case.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6052\n\nTest Plan: Ran the unit tests both in regular and LITE mode.\n\nDifferential Revision: D18601763\n\nPulled By: ltamasi\n\nfbshipit-source-id: 883d6882771e0fb4aae72bb77ba4e63d9febec04",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_blob_index_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/019eb1f402ee3b501b7211deeb7f872444a565a6"
    },
    {
        "hash": "4e0dcd36dfcf3109c4a8ede9c793bc8b1f76e68b",
        "author": "sdong",
        "date": "2019-11-19T13:17:03-08:00",
        "message": "db_stress sometimes generates keys close to SST file boundaries (#6037)\n\nSummary:\nRecently, a bug was found related to a seek key that is close to SST file boundary. However, it only occurs in a very small chance in db_stress, because the chance that a random key hits SST file boundaries is small. To boost the chance, with 1/16 chance, we pick keys that are close to SST file boundaries.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6037\n\nTest Plan: Did some manual printing out, and hack to cover the key generation logic to be correct.\n\nDifferential Revision: D18598476\n\nfbshipit-source-id: 13b76687d106c5be4e3e02a0c77fa5578105a071",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4e0dcd36dfcf3109c4a8ede9c793bc8b1f76e68b"
    },
    {
        "hash": "38cc6112971d06ba17425d54875f1c5a459e6384",
        "author": "anand76",
        "date": "2019-11-19T10:13:24-08:00",
        "message": "Fix test failure in LITE mode (#6050)\n\nSummary:\nGetSupportedCompressions() is not available in LITE build, so check and use Snappy compression in db_basic_test.cc.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6050\n\nTest Plan:\nmake LITE=1 check\nmake check\n\nDifferential Revision: D18588114\n\nPulled By: anand1976\n\nfbshipit-source-id: a193de58c44f91bcc237107f25dbc1b9458eef3d",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/38cc6112971d06ba17425d54875f1c5a459e6384"
    },
    {
        "hash": "a150604e101077c6910e6699219dad6d119fc302",
        "author": "sdong",
        "date": "2019-11-18T15:01:38-08:00",
        "message": "db_stress to cover total order seek (#6039)\n\nSummary:\nRight now, in db_stress, as long as prefix extractor is defined, TestIterator always uses. There is value of cover total_order_seek = true when prefix extractor is define. Add a small chance that this flag is turned on.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6039\n\nTest Plan: Run the test for a while.\n\nDifferential Revision: D18539689\n\nfbshipit-source-id: 568790dd7789c9986b83764b870df0423a122d99",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a150604e101077c6910e6699219dad6d119fc302"
    },
    {
        "hash": "5b9233bfe815d0e2e827e039e0862309c6b0c2e0",
        "author": "anand76",
        "date": "2019-11-18T09:37:18-08:00",
        "message": "Fix a test failure on systems that don't have Snappy compression libraries (#6038)\n\nSummary:\nThe ParallelIO/DBBasicTestWithParallelIO.MultiGet/11 test fails if Snappy compression library is not installed, since RocksDB defaults to Snappy if none is specified. So dynamically determine the supported compression types and pick the first one.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6038\n\nDifferential Revision: D18532370\n\nPulled By: anand1976\n\nfbshipit-source-id: a0a735114d1f8892ea09f7c4af8688d7bcc5b075",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5b9233bfe815d0e2e827e039e0862309c6b0c2e0"
    },
    {
        "hash": "0058daef7b6263cfbd6578199e8b1d8546d850fa",
        "author": "Maysam Yabandeh",
        "date": "2019-11-14T14:41:52-08:00",
        "message": "Disable SmallestUnCommittedSeq in Valgrind run (#6035)\n\nSummary:\nSmallestUnCommittedSeq sometimes takes too long when run under Valgrind. The patch disables it when the tests are run under Valgrind.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6035\n\nDifferential Revision: D18509198\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 1191443b9fedb6b9c50d6b76f5c92371f5030230",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0058daef7b6263cfbd6578199e8b1d8546d850fa"
    },
    {
        "hash": "42b5494ec81f046e4eb41e1928c4ef615eaafd65",
        "author": "Peter Dillinger",
        "date": "2019-11-12T15:29:15-08:00",
        "message": "Fix BloomFilterPolicy changes for unsigned char (ARM) (#6024)\n\nSummary:\nBug in PR https://github.com/facebook/rocksdb/issues/5941 when char is unsigned that should only affect\nassertion on unused/invalid filter metadata.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6024\n\nTest Plan: on ARM: ./bloom_test && ./db_bloom_filter_test && ./block_based_filter_block_test && ./full_filter_block_test && ./partitioned_filter_block_test\n\nDifferential Revision: D18461206\n\nPulled By: pdillinger\n\nfbshipit-source-id: 68a7c813a0b5791c05265edc03cdf52c78880e9a",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/filter_policy.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/42b5494ec81f046e4eb41e1928c4ef615eaafd65"
    },
    {
        "hash": "a19de78da5b8e0ab5ddbcada60e473b84d4dc72f",
        "author": "sdong",
        "date": "2019-11-11T17:33:54-08:00",
        "message": "db_stress to cover SeekForPrev() (#6022)\n\nSummary:\nRight now, db_stress doesn't cover SeekForPrev(). Add the coverage, which mirrors what we do for Seek().\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6022\n\nTest Plan: Run \"make crash_test\". Do some manual source code hack to simular iterator wrong results and see it caught.\n\nDifferential Revision: D18442193\n\nfbshipit-source-id: 879b79000d5e33c625c7e970636de191ccd7776c",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a19de78da5b8e0ab5ddbcada60e473b84d4dc72f"
    },
    {
        "hash": "f29e6b3be29523e09e49e68f7dc8ed5f92586324",
        "author": "蔡渠棠",
        "date": "2019-11-11T15:57:38-08:00",
        "message": "bugfix: MemTableList::RemoveOldMemTables invalid iterator after remov… (#6013)\n\nSummary:\nFix issue https://github.com/facebook/rocksdb/issues/6012.\n\nI found that it may be caused by the following codes in function _RemoveOldMemTables()_ in **db/memtable_list.cc**  :\n```\n  for (auto it = memlist.rbegin(); it != memlist.rend(); ++it) {\n    MemTable* mem = *it;\n    if (mem->GetNextLogNumber() > log_number) {\n      break;\n    }\n    current_->Remove(mem, to_delete);\n```\n\nThe iterator **it** turns invalid after `current_->Remove(mem, to_delete);`\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6013\n\nTest Plan:\n```\nmake check\n```\n\nDifferential Revision: D18401107\n\nPulled By: riversand963\n\nfbshipit-source-id: bf0da3b868ed70f7aff24cf7b3e2049c0c5c7a4e",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable_list.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f29e6b3be29523e09e49e68f7dc8ed5f92586324"
    },
    {
        "hash": "72de842ac94e458f3fce9d2516be730d615fac0e",
        "author": "Yi Wu",
        "date": "2019-11-08T13:47:29-08:00",
        "message": "Fix DBFlushTest::FireOnFlushCompletedAfterCommittedResult hang (#6018)\n\nSummary:\nThe test would fire two flushes to let them run in parallel. Previously it wait for the first job to be scheduled before firing the second. It is possible the job is not started before the second job being scheduled, making the two job combine into one. Change to wait for the first job being started.\n\nFixes https://github.com/facebook/rocksdb/issues/6017\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6018\n\nTest Plan:\n```\nwhile ./db_flush_test --gtest_filter=*FireOnFlushCompletedAfterCommittedResult*; do :; done\n```\nand let it run for a while.\n\nSigned-off-by: Yi Wu <yiwu@pingcap.com>\n\nDifferential Revision: D18405576\n\nPulled By: riversand963\n\nfbshipit-source-id: 6ebb6262e033d5dc2ef81cb3eb410b314f2de4c9",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_flush_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/72de842ac94e458f3fce9d2516be730d615fac0e"
    },
    {
        "hash": "1da1f04231fbe3678178f6dbf5bcfbd7c6a00910",
        "author": "sdong",
        "date": "2019-11-07T11:16:59-08:00",
        "message": "Stress test to relax the iterator verification case for lower bound (#5869)\n\nSummary:\nIn stress test, all iterator verification is turned off is lower bound is enabled. This might be stricter than needed. This PR relaxes the condition and include the case where lower bound is lower than both of seek key and upper bound. It seems to work mostly fine when I run crash test locally.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5869\n\nTest Plan: Run crash_test\n\nDifferential Revision: D18363578\n\nfbshipit-source-id: 23d57e11ea507949b8100f4190ddfbe8db052d5a",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1da1f04231fbe3678178f6dbf5bcfbd7c6a00910"
    },
    {
        "hash": "982a7532a72bf94b4f1b340db960a8c0ba53c71c",
        "author": "sdong",
        "date": "2019-11-07T11:14:14-08:00",
        "message": "Add two test cases for single sorted universal periodic compaction (#6002)\n\nSummary:\nIt's useful to add test coverage for universal compaction's periodic compaction. Add two tests.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6002\n\nTest Plan: Run the two tests\n\nDifferential Revision: D18363544\n\nfbshipit-source-id: bbd04b54057315f64f959709006412db1f76d170",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_picker_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/982a7532a72bf94b4f1b340db960a8c0ba53c71c"
    },
    {
        "hash": "111ebf3161e3ef03986f02a16f1b2207be2567fe",
        "author": "sdong",
        "date": "2019-11-06T17:38:25-08:00",
        "message": "db_stress: improve TestGet() failure printing (#5989)\n\nSummary:\nRight now, in db_stress's CF consistency test's TestGet case, if failure happens, we do normal string printing, rather than hex printing, so that some text is not printed out, which makes debugging harder. Fix it by printing hex instead.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5989\n\nTest Plan: Build db_stress and see t passes.\n\nDifferential Revision: D18363552\n\nfbshipit-source-id: 09d1b8f6fbff37441cbe7e63a1aef27551226cec",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/111ebf3161e3ef03986f02a16f1b2207be2567fe"
    },
    {
        "hash": "8ea087ad16c853ab24af2f73a9b6a0c9ae04a6e8",
        "author": "Zhichao Cao",
        "date": "2019-11-06T13:02:20-08:00",
        "message": "Workload generator (Mixgraph) based on prefix hotness (#5953)\n\nSummary:\nIn the previous PR https://github.com/facebook/rocksdb/issues/4788, user can use db_bench mix_graph option to generate the workload that is from the social graph. The key is generated based on the key access hotness. In this PR, user can further model the key-range hotness and fit those to two-term-exponential distribution. First, user cuts the whole key space into small key ranges (e.g., key-ranges are the same size and the key-range number is the number of SST files). Then, user calculates the average access count per key of each key-range as the key-range hotness. Next, user fits the key-range hotness to two-term-exponential distribution (f(x) = f(x) = a*exp(b*x) + c*exp(d*x)) and generate the value of a, b, c, and d. They are the parameters in db_bench: prefix_dist_a, prefix_dist_b, prefix_dist_c, and prefix_dist_d. Finally, user can run db_bench by specify the parameters.\nFor example:\n`./db_bench --benchmarks=\"mixgraph\" -use_direct_io_for_flush_and_compaction=true -use_direct_reads=true -cache_size=268435456 -key_dist_a=0.002312 -key_dist_b=0.3467 -keyrange_dist_a=14.18 -keyrange_dist_b=-2.917 -keyrange_dist_c=0.0164 -keyrange_dist_d=-0.08082 -keyrange_num=30 -value_k=0.2615 -value_sigma=25.45 -iter_k=2.517 -iter_sigma=14.236 -mix_get_ratio=0.85 -mix_put_ratio=0.14 -mix_seek_ratio=0.01 -sine_mix_rate_interval_milliseconds=5000 -sine_a=350 -sine_b=0.0105 -sine_d=50000 --perf_level=2 -reads=1000000 -num=5000000 -key_size=48`\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5953\n\nTest Plan: run db_bench with different parameters and checked the results.\n\nDifferential Revision: D18053527\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 171f8b3142bd76462f1967c58345ad7e4f84bab7",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8ea087ad16c853ab24af2f73a9b6a0c9ae04a6e8"
    },
    {
        "hash": "50804656d20bcfe4c3b9f77d05856a927b059b88",
        "author": "Maysam Yabandeh",
        "date": "2019-11-06T11:13:22-08:00",
        "message": "Enable write-conflict snapshot in stress tests (#5897)\n\nSummary:\nDBImpl extends the public GetSnapshot() with GetSnapshotForWriteConflictBoundary() method that takes snapshots specially for write-write conflict checking. Compaction treats such snapshots differently to avoid GCing a value written after that, so that the write conflict remains visible even after the compaction. The patch extends stress tests with such snapshots.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5897\n\nDifferential Revision: D17937476\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: bd8b0c578827990302194f63ae0181e15752951d",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/50804656d20bcfe4c3b9f77d05856a927b059b88"
    },
    {
        "hash": "52733b44984b67584121efb6730a9020cab3a67c",
        "author": "Maysam Yabandeh",
        "date": "2019-11-04T16:23:57-08:00",
        "message": "WritePrepared: Fix flaky test MaxCatchupWithNewSnapshot (#5850)\n\nSummary:\nMaxCatchupWithNewSnapshot tests that the snapshot sequence number will be larger than the max sequence number when the snapshot was taken. However since the test does not have access to the max sequence number when the snapshot was taken, it uses max sequence number after that, which could have advanced the snapshot by then, thus making the test flaky.\nThe fix is to compare with max sequence number before the snapshot was taken, which is a lower bound for the value when the snapshot was taken.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5850\n\nTest Plan: ~/gtest-parallel/gtest-parallel --repeat=12800 ./write_prepared_transaction_test --gtest_filter=\"*MaxCatchupWithNewSnapshot*\"\n\nDifferential Revision: D17608926\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: b122ae5a27f982b290bd60da852e28d3c5eb0136",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/52733b44984b67584121efb6730a9020cab3a67c"
    },
    {
        "hash": "0d91a981e929e652dd11cb882545471e85175ed4",
        "author": "sdong",
        "date": "2019-11-01T18:33:12-07:00",
        "message": "Fix assertion in universal compaction periodic compaction (#6000)\n\nSummary:\nWe recently added periodic compaction to universal compaction. An old assertion that we can't onlyl compact the last sorted run triggered. However, with periodic compaction, it is possible that we only compact the last sorted run, so the assertion now became stricter than needed. Relaxing this assertion.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/6000\n\nTest Plan: This should be a low risk change. Will observe whether stress test will pass after it.\n\nDifferential Revision: D18285396\n\nfbshipit-source-id: 9a6863debdf104c40a7f6c46ab62d84cdf5d8592",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_picker_universal.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0d91a981e929e652dd11cb882545471e85175ed4"
    },
    {
        "hash": "f22aaf8b3f46022c016ae5bcd52d77a3e71ce9c9",
        "author": "sdong",
        "date": "2019-10-29T18:16:35-07:00",
        "message": "db_stress: CF Consistency check to use random CF to validate iterator results (#5983)\n\nSummary:\nRight now, in db_stress's iterator tests, we always use the same CF to validate iterator results. This commit changes it so that a randomized CF is used in Cf consistency test, where every CF should have exactly the same data. This would help catch more bugs.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5983\n\nTest Plan: Run \"make crash_test_with_atomic_flush\".\n\nDifferential Revision: D18217643\n\nfbshipit-source-id: 3ac998852a0378bb59790b20c5f236f6a5d681fe",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f22aaf8b3f46022c016ae5bcd52d77a3e71ce9c9"
    },
    {
        "hash": "26dc29633ea57483e85b4bfa892a8f0785bce3c4",
        "author": "Peter Dillinger",
        "date": "2019-10-28T14:12:36-07:00",
        "message": "filter_bench not needed for ROCKSDB_LITE (#5978)\n\nSummary:\nfilter_bench is a specialized micro-benchmarking tool that\nshould not be needed with ROCKSDB_LITE. This should fix the LITE build.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5978\n\nTest Plan: make LITE=1 check\n\nDifferential Revision: D18177941\n\nPulled By: pdillinger\n\nfbshipit-source-id: b73a171404661e09e018bc99afcf8d4bf1e2949c",
        "modified_files_count": 1,
        "modified_files": [
            "util/filter_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/26dc29633ea57483e85b4bfa892a8f0785bce3c4"
    },
    {
        "hash": "1075c376ef71cf63b812822f8c333c7d45695ec5",
        "author": "Vijay Nadimpalli",
        "date": "2019-10-25T18:22:24-07:00",
        "message": "Fix for lite build (#5971)\n\nSummary:\nFix for lite build\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5971\n\nTest Plan: make J=1 -j64  LITE=1 all check\n\nDifferential Revision: D18148306\n\nPulled By: vjnadimpalli\n\nfbshipit-source-id: 5b9a3edc3e73e054fee6b96e6f6e583cecc898f3",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1075c376ef71cf63b812822f8c333c7d45695ec5"
    },
    {
        "hash": "3f891c40a06f03bec99cf57e62237280d273995b",
        "author": "Peter Dillinger",
        "date": "2019-10-25T13:27:07-07:00",
        "message": "More improvements to filter_bench (#5968)\n\nSummary:\n* Adds support for plain table filter. This is not critical right now, but does add a -impl flag that will be useful for new filter implementations initially targeted at block-based table (and maybe later ported to plain table)\n* Better mixing of inside vs. outside queries, for more realism\n* A -best_case option handy for implementation tuning inner loop\n* Option for whether to include hashing time in dry run / net timings\n\nNo modifications to production code, just filter_bench.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5968\n\nDifferential Revision: D18139872\n\nPulled By: pdillinger\n\nfbshipit-source-id: 5b09eba963111b48f9e0525a706e9921070990e8",
        "modified_files_count": 1,
        "modified_files": [
            "util/filter_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3f891c40a06f03bec99cf57e62237280d273995b"
    },
    {
        "hash": "b3dc2f3691528c52587452847590d0477cdb017d",
        "author": "Peter Dillinger",
        "date": "2019-10-25T12:54:41-07:00",
        "message": "Update xxhash.cc to allow combined compilation (#5969)\n\nSummary:\nTo fix unity_test\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5969\n\nTest Plan: make unity_test\n\nDifferential Revision: D18140426\n\nPulled By: pdillinger\n\nfbshipit-source-id: d5516e6d665f57e3706b9f9b965b0c458e58ccef",
        "modified_files_count": 1,
        "modified_files": [
            "util/xxhash.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b3dc2f3691528c52587452847590d0477cdb017d"
    },
    {
        "hash": "2837008525d8d473ba0798144d427465ae71715d",
        "author": "Peter Dillinger",
        "date": "2019-10-24T13:08:30-07:00",
        "message": "Vary key size and alignment in filter_bench (#5933)\n\nSummary:\nThe first version of filter_bench has selectable key size\nbut that size does not vary throughout a test run. This artificially\nfavors \"branchy\" hash functions like the existing BloomHash,\nMurmurHash1, probably because of optimal return for branch prediction.\n\nThis change primarily varies those key sizes from -2 to +2 bytes vs.\nthe average selected size. We also set the default key size at 24 to\nbetter reflect our best guess of typical key size.\n\nBut steadily random key sizes may not be realistic either. So this\nchange introduces a new filter_bench option:\n-vary_key_size_log2_interval=n where the same key size is used 2^n\ntimes and then changes to another size. I've set the default at 5\n(32 times same size) as a compromise between deployments with\nrather consistent vs. rather variable key sizes. On my Skylake\nsystem, the performance boost to MurmurHash1 largely lies between\nn=10 and n=15.\n\nAlso added -vary_key_alignment (bool, now default=true), though this\ndoesn't currently seem to matter in hash functions under\nconsideration.\n\nThis change also does a \"dry run\" for each testing scenario, to improve\nthe accuracy of those numbers, as there was more difference between\nscenarios than expected. Subtracting gross test run times from dry run\ntimes is now also embedded in the output, because these \"net\" times are\ngenerally the most useful.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5933\n\nDifferential Revision: D18121683\n\nPulled By: pdillinger\n\nfbshipit-source-id: 3c7efee1c5661a5fe43de555e786754ddf80dc1e",
        "modified_files_count": 1,
        "modified_files": [
            "util/filter_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2837008525d8d473ba0798144d427465ae71715d"
    },
    {
        "hash": "250953112348d39a3f29c37834041ae611358264",
        "author": "Dan Lambright",
        "date": "2019-10-24T11:08:44-07:00",
        "message": "Add test showing range tombstones can create excessively large compactions (#5956)\n\nSummary:\nFor more information on the original problem see this [link](https://github.com/facebook/rocksdb/issues/3977).\n\nThis change adds two new tests. They are identical other than one uses range tombstones and the other does not. Each test generates sub files at L2 which overlap with keys L3. The test that uses range tombstones generates a single file at L2. This single file will generate a very large range overlap that will in turn create excessively large compaction.\n\n1: T001 - T005\n2:  000 -  005\n\nIn contrast, the test that uses key ranges generates 3 files at L2. As a single file is compacted at a time, those 3 files will generate less work per compaction iteration.\n\n1:  001 - 002\n1:  003 - 004\n1:  005\n2:  000 - 005\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5956\n\nDifferential Revision: D18071631\n\nPulled By: dlambrig\n\nfbshipit-source-id: 12abae75fb3e0b022d228c6371698aa5e53385df",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_range_del_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/250953112348d39a3f29c37834041ae611358264"
    },
    {
        "hash": "9f1e5a0b87fb1eb50b3c580a0ab7ce7956f1a655",
        "author": "sdong",
        "date": "2019-10-23T16:57:16-07:00",
        "message": "CfConsistencyStressTest to validate key consistent across CFs in TestGet() (#5863)\n\nSummary:\nRight now in CF consitency stres test's TestGet(), keys are just fetched without validation. With this change, in 1/2 the time, compare all the CFs share the same value with the same key.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5863\n\nTest Plan: Run \"make crash_test_with_atomic_flush\" and see tests pass. Hack the code to generate some inconsistency and observe the test fails as expected.\n\nDifferential Revision: D17934206\n\nfbshipit-source-id: 00ba1a130391f28785737b677f80f366fb83cced",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9f1e5a0b87fb1eb50b3c580a0ab7ce7956f1a655"
    },
    {
        "hash": "6a32e3b5628b8d53a66c3422c82e50b6142aeb11",
        "author": "Peter Dillinger",
        "date": "2019-10-23T15:47:17-07:00",
        "message": "Remove unused BloomFilterPolicy::hash_func_ (#5961)\n\nSummary:\nThis is an internal, file-local \"feature\" that is not used and\npotentially confusing.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5961\n\nTest Plan: make check\n\nDifferential Revision: D18099018\n\nPulled By: pdillinger\n\nfbshipit-source-id: 7870627eeed09941d12538ec55d10d2e164fc716",
        "modified_files_count": 1,
        "modified_files": [
            "util/bloom.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6a32e3b5628b8d53a66c3422c82e50b6142aeb11"
    },
    {
        "hash": "09333606448a9499e0affd0d780c90d8a4dd7572",
        "author": "Zhichao Cao",
        "date": "2019-10-22T16:39:46-07:00",
        "message": "Fix the potential memory leak in trace_replay (#5955)\n\nSummary:\nIn the previous PR https://github.com/facebook/rocksdb/issues/5934 , in the while loop, if/else if is used without ending with else to free the object referenced by ra, it might cause potential memory leak (warning during compiling). Fix it by changing the last \"else if\" to \"else\".\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5955\n\nTest Plan: pass make asan check, pass the USE_CLANG=1 TEST_TMPDIR=/dev/shm/rocksdb OPT=-g make -j64 analyze.\n\nDifferential Revision: D18071612\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 51c00023d0c97c2921507254329aed55d56e1786",
        "modified_files_count": 1,
        "modified_files": [
            "trace_replay/trace_replay.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/09333606448a9499e0affd0d780c90d8a4dd7572"
    },
    {
        "hash": "7245fb5f63387b25829b595f5f2917eb6ab64140",
        "author": "Zhichao Cao",
        "date": "2019-10-21T15:05:01-07:00",
        "message": "Fix the potential memory leak of ReplayMultiThread (#5949)\n\nSummary:\nThe pointer ra needs to be freed the status s returns not OK. In the previous  PR https://github.com/facebook/rocksdb/issues/5934  , the ra is not freed which might cause potential memory leak. Fix this issue by moving the clarification of ra inside the while loop and freeing it as desired.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5949\n\nTest Plan: pass make asan check.\n\nDifferential Revision: D18045726\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: d5445b7b832c8bb1dafe008bafea7bfe9eb0b1ce",
        "modified_files_count": 1,
        "modified_files": [
            "trace_replay/trace_replay.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7245fb5f63387b25829b595f5f2917eb6ab64140"
    },
    {
        "hash": "c53db172a166141fabd3ee49fef9c90dcab44ee9",
        "author": "Yanqin Jin",
        "date": "2019-10-18T15:49:12-07:00",
        "message": "Fix TestIterate for HashSkipList in db_stress (#5942)\n\nSummary:\nSince SeekForPrev (used by Prev) is not supported by HashSkipList when prefix is used, we disable it when stress testing HashSkipList.\n\n- Change the default memtablerep to skip list.\n- Avoid Prev() when memtablerep is HashSkipList and prefix is used.\n\nTest Plan (on devserver):\n```\n$make db_stress\n$./db_stress -ops_per_thread=10000 -reopen=1 -destroy_db_initially=true -column_families=1 -threads=1 -column_families=1 -memtablerep=prefix_hash\n$# or simply\n$./db_stress\n$./db_stress -memtablerep=prefix_hash\n```\nResults must print \"Verification successful\".\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5942\n\nDifferential Revision: D18017062\n\nPulled By: riversand963\n\nfbshipit-source-id: af867e59aa9e6f533143c984d7d529febf232fd7",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c53db172a166141fabd3ee49fef9c90dcab44ee9"
    },
    {
        "hash": "5ef27dea332a62c05707d3265864319f7eee603c",
        "author": "Yanqin Jin",
        "date": "2019-10-14T22:14:24-07:00",
        "message": "Fix clang analyzer error (#5924)\n\nSummary:\nWithout this PR, clang analyzer complains.\n```\n$USE_CLANG=1 make analyze\ndb/compaction/compaction_job_test.cc:161:20: warning: The left operand of '==' is a garbage value\n      if (key.type == kTypeBlobIndex) {\n                ~~~~~~~~ ^\n                1 warning generated.\n```\n\nTest Plan (on devserver)\n```\n$USE_CLANG=1 make analyze\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5924\n\nDifferential Revision: D17923226\n\nPulled By: riversand963\n\nfbshipit-source-id: 9d1eb769b5e0de7cb3d89dc90d1cfa895db7fdc8",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_job_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5ef27dea332a62c05707d3265864319f7eee603c"
    },
    {
        "hash": "78b28d80b0d9ae7b8219748412f142781fdc1e06",
        "author": "Levi Tamasi",
        "date": "2019-10-14T17:49:20-07:00",
        "message": "Support non-TTL Puts for BlobDB in db_bench (#5921)\n\nSummary:\nCurrently, db_bench only supports PutWithTTL operations for BlobDB but\nnot regular Puts. The patch adds support for regular (non-TTL) Puts and also\nchanges the default for blob_db_max_ttl_range to zero, which corresponds\nto no TTL.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5921\n\nTest Plan:\nmake check\n\n./db_bench -benchmarks=fillrandom -statistics -stats_interval_seconds=1\n-duration=90 -num=500000 -use_blob_db=1 -blob_db_file_size=1000000\n-target_file_size_base=1000000 (issues Put operations with no TTL)\n\n./db_bench -benchmarks=fillrandom -statistics -stats_interval_seconds=1\n-duration=90 -num=500000 -use_blob_db=1 -blob_db_file_size=1000000\n-target_file_size_base=1000000 -blob_db_max_ttl_range=86400 (issues\nPutWithTTL operations with random TTLs in the [0, blob_db_max_ttl_range)\ninterval, as before)\n\nDifferential Revision: D17919798\n\nPulled By: ltamasi\n\nfbshipit-source-id: b946c3522b836b92b4c157ffbad24f92ba2b0a16",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/78b28d80b0d9ae7b8219748412f142781fdc1e06"
    },
    {
        "hash": "93edd51c4a6dd56995c55bf282c13b9663871a5c",
        "author": "Peter Dillinger",
        "date": "2019-10-14T15:38:31-07:00",
        "message": "bloom_test.cc: include <array> (#5920)\n\nSummary:\nFix build failure on some platforms, reported in issue https://github.com/facebook/rocksdb/issues/5914\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5920\n\nTest Plan: make bloom_test && ./bloom_test\n\nDifferential Revision: D17918328\n\nPulled By: pdillinger\n\nfbshipit-source-id: b822004d4442de0171db2aeff433677783f7b94e",
        "modified_files_count": 1,
        "modified_files": [
            "util/bloom_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/93edd51c4a6dd56995c55bf282c13b9663871a5c"
    },
    {
        "hash": "80ad996b355cea5c83c45b08f98fd9e0433777df",
        "author": "anand76",
        "date": "2019-10-09T09:27:10-07:00",
        "message": "Make the db_stress reopen loop in OperateDb() more robust (#5893)\n\nSummary:\nThe loop in OperateDb() is getting quite complicated with the introduction of multiple key operations such as MultiGet and Reseeks. This is resulting in a number of corner cases that hangs db_stress due to synchronization problems during reopen (i.e when -reopen=<> option is specified). This PR makes it more robust by ensuring all db_stress threads vote to reopen the DB the exact same number of times.\nMost of the changes in this diff are due to indentation.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5893\n\nTest Plan: Run crash test\n\nDifferential Revision: D17823827\n\nPulled By: anand1976\n\nfbshipit-source-id: ec893829f611ac7cac4057c0d3d99f9ffb6a6dd9",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/80ad996b355cea5c83c45b08f98fd9e0433777df"
    },
    {
        "hash": "457bcfde028c37e01a087e631bb87ea49b5a5f98",
        "author": "Yanqin Jin",
        "date": "2019-10-07T17:48:50-07:00",
        "message": "Let TestEnv and FaultInjectEnv use Env of choice (#5886)\n\nSummary:\nInstead of hard coding Env::Default in TestEnv and a few other places, use the\nDBTestBase::env_ that has been deduced from the constructor.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5886\n\nTest Plan:\n```\nmake check\n```\n\nDifferential Revision: D17773029\n\nPulled By: riversand963\n\nfbshipit-source-id: 7ce4e5175a487e9d281ea2c3aae3c41bffd44629",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/457bcfde028c37e01a087e631bb87ea49b5a5f98"
    },
    {
        "hash": "9f54446525a238960f2819288bfa4b2a7090c2c0",
        "author": "Peter Dillinger",
        "date": "2019-10-03T13:19:20-07:00",
        "message": "Fix type in shift operation in bloom_test (#5882)\n\nSummary:\nBroken type for shift in PR#5834. Fixing code means fixing\nexpected values in test.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5882\n\nTest Plan: thisisthetest\n\nDifferential Revision: D17746136\n\nPulled By: pdillinger\n\nfbshipit-source-id: d3c456ed30b433d55fcab6fc7d836940fe3b46b8",
        "modified_files_count": 1,
        "modified_files": [
            "util/bloom_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9f54446525a238960f2819288bfa4b2a7090c2c0"
    },
    {
        "hash": "cca87d7722ac097dbf489a4214bb93a78f4ecba3",
        "author": "anand76",
        "date": "2019-10-03T10:22:26-07:00",
        "message": "Fix reopen voting logic in db_stress to prevent hangs (#5876)\n\nSummary:\nWhen multiple operations are performed in a db_stress thread in one loop\niteration, the reopen voting logic needs to take that into account. It\nwas doing that for MultiGet, but a new option was introduced recently to\ndo multiple iterator seeks per iteration, which broke it again. Fix the\nlogic to be more robust and agnostic of the type of operation performed.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5876\n\nTest Plan: Run db_stress\n\nDifferential Revision: D17733590\n\nPulled By: anand1976\n\nfbshipit-source-id: 787f01abefa1e83bba43e0b4f4abb26699b2089e",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cca87d7722ac097dbf489a4214bb93a78f4ecba3"
    },
    {
        "hash": "d783af1857fe157b401ec4fb0e8d07faa0ed31d1",
        "author": "sdong",
        "date": "2019-10-01T19:26:18-07:00",
        "message": "Fix a timer bug in MergingIterator::Seek() caused by #5871 (#5874)\n\nSummary:\nConflict resolving in 846e05005d78dfd4276cce6753967cb16930aabb (\"Revert \"Merging iterator to avoid child iterator reseek for some cases\") caused some timer misplaced. Fix it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5874\n\nTest Plan: See it build.\n\nDifferential Revision: D17705073\n\nfbshipit-source-id: 9bd3a8dc4901ac33c2c6fc5b1091ffbc56a8529f",
        "modified_files_count": 1,
        "modified_files": [
            "table/merging_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d783af1857fe157b401ec4fb0e8d07faa0ed31d1"
    },
    {
        "hash": "503a756e42bded0a665d28afb19b0cdecc482fd6",
        "author": "sdong",
        "date": "2019-09-30T22:15:27-07:00",
        "message": "Fix clang analyze warning in db_stress (#5870)\n\nSummary:\nRecent changes trigger clang analyze warning. Fix it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5870\n\nTest Plan: \"USE_CLANG=1 TEST_TMPDIR=/dev/shm/rocksdb OPT=-g make -j60 analyze\" and make sure it passes.\n\nDifferential Revision: D17682533\n\nfbshipit-source-id: 02716f2a24572550a22db4bbe9b54d4872dfae32",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/503a756e42bded0a665d28afb19b0cdecc482fd6"
    },
    {
        "hash": "51413e0a856f377a7d62dfe4606c29ba9051c872",
        "author": "Jay Zhuang",
        "date": "2019-09-30T14:02:19-07:00",
        "message": "Fix a compile error (#5864)\n\nSummary:\n```\ntools/block_cache_analyzer/block_cache_trace_analyzer.cc:653:48: error: implicit conversion loses integer precision: 'uint64_t' (aka 'unsigned long long') to 'std::__1::linear_congruential_engine<unsigned int, 48271, 0, 2147483647>::result_type' (aka 'unsigned int') [-Werror,-Wshorten-64-to-32]\n  std::default_random_engine rand_engine(env_->NowMicros());\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5864\n\nDifferential Revision: D17668962\n\nfbshipit-source-id: e08fa58b2a78a8dd8b334862b5714208f696b8ab",
        "modified_files_count": 1,
        "modified_files": [
            "tools/block_cache_analyzer/block_cache_trace_analyzer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/51413e0a856f377a7d62dfe4606c29ba9051c872"
    },
    {
        "hash": "69c4ccb970bdc8d5a58067de89a322ef9c7c2d93",
        "author": "sdong",
        "date": "2019-09-30T12:38:23-07:00",
        "message": "Fix three more db_stress bugs (#5867)\n\nSummary:\nTwo more bug fixes in db_stress:\n1. this is to complete the fix of the regression bug causing overflowing when supporting FLAGS_prefix_size = -1.\n2. Fix regression bug in compare iterator itself:\n(1) when creating control iterator, which used the same read option as the normal iterator by mistake; (2) the logic of comparing has some problems. Fix them.\n(3) disable validation for lower bound now, which generated some wildly different results. Disabling it to make normal tests pass while investigating it.\n3. Cleaning up snapshots in verification failure cases. Memory is leaked otherwise.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5867\n\nTest Plan: Run \"make crash_test\" for a while and see at least 1 is fixed.\n\nDifferential Revision: D17671712\n\nfbshipit-source-id: 011f98ea1a72aef23e19ff28656830c78699b402",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/69c4ccb970bdc8d5a58067de89a322ef9c7c2d93"
    },
    {
        "hash": "643df920d8831ddf72bc4d340c20317a881ef304",
        "author": "Yanqin Jin",
        "date": "2019-09-27T17:17:37-07:00",
        "message": "Explicitly declare atomic flush incompatible with pipelined write (#5860)\n\nSummary:\nAtomic flush is incompatible with pipelined write. At least now.\nIf pipelined write is enabled, a thread performing write can exit the write\nthread and start inserting into memtables. Consequently a thread performing\nflush will enter write thread and race with memtable insertion by the former.\nThis will cause undefined result in terms of data persistence.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5860\n\nTest Plan:\n```\n$make all && make check\n```\n\nDifferential Revision: D17638944\n\nPulled By: riversand963\n\nfbshipit-source-id: abc578dc49a5dbe41bc5adcecf448f8e042a6d49",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_open.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/643df920d8831ddf72bc4d340c20317a881ef304"
    },
    {
        "hash": "5cd8aaf75f24509edc77f75ccb08d09ff62ebb55",
        "author": "sdong",
        "date": "2019-09-27T16:55:57-07:00",
        "message": "db_stress: fix run time error when prefix_size = -1 (#5862)\n\nSummary:\nWhen prefix_size = -1, stress test crashes with run time error because of overflow. Fix it by not using -1 but 7 in prefix scan mode.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5862\n\nTest Plan:\nRun\npython -u tools/db_crashtest.py --simple whitebox --random_kill_odd \\\n      888887 --compression_type=zstd\nand see it doesn't crash.\n\nDifferential Revision: D17642313\n\nfbshipit-source-id: f029e7651498c905af1b1bee6d310ae50cdcda41",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5cd8aaf75f24509edc77f75ccb08d09ff62ebb55"
    },
    {
        "hash": "c9932d18cc8f3408a47928b26433d21daa76943d",
        "author": "Levi Tamasi",
        "date": "2019-09-24T11:02:11-07:00",
        "message": "Add class comment for Block\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5832\n\nDifferential Revision: D17550773\n\nPulled By: ltamasi\n\nfbshipit-source-id: 66972bb008516e55b6fbba58ddd10234346d5d11",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c9932d18cc8f3408a47928b26433d21daa76943d"
    },
    {
        "hash": "2367656b6c19048d76037d24025ef0caab136866",
        "author": "Yikun Jiang",
        "date": "2019-09-23T12:15:01-07:00",
        "message": "Remove invalid comparison of va_list and nullptr (#5836)\n\nSummary:\nThe comparison of va_list and nullptr is always False under any arch, and will raise invalid operands of types error in aarch64 env (`error: invalid operands of types ‘va_list {aka __va_list}’ and ‘std::nullptr_t’ to binary ‘operator!=’`).\n\nThis patch removes this invalid assert.\n\nCloses: https://github.com/facebook/rocksdb/issues/4277\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5836\n\nDifferential Revision: D17532470\n\nfbshipit-source-id: ca98078ecbc6a9416c69de3bd6ffcfa33a0f0185",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/loggerjnicallback.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2367656b6c19048d76037d24025ef0caab136866"
    },
    {
        "hash": "a5fa8735e9a7d9eed78a106b6665d7442840778d",
        "author": "Vijay Nadimpalli",
        "date": "2019-09-20T10:07:42-07:00",
        "message": "Code comment for Version Edit (#5829)\n\nSummary:\nAdded comment for Version Edit.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5829\n\nTest Plan: Run existing tests\n\nDifferential Revision: D17486229\n\nPulled By: vjnadimpalli\n\nfbshipit-source-id: b4b31104fadd667356b64bd2dc409b3376ee46ca",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_edit.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a5fa8735e9a7d9eed78a106b6665d7442840778d"
    },
    {
        "hash": "2389aa2da9856de6a364b47505df5cd76dc55373",
        "author": "风",
        "date": "2019-09-18T14:26:37-07:00",
        "message": "Remove unneeded unlock statement (#5809)\n\nSummary:\nThe dtor will automatically do unlock\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5809\n\nDifferential Revision: D17453694\n\nPulled By: ltamasi\n\nfbshipit-source-id: 5348bff8e6a620a05ff639a5454e8d82ae98a22d",
        "modified_files_count": 1,
        "modified_files": [
            "util/threadpool_imp.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2389aa2da9856de6a364b47505df5cd76dc55373"
    },
    {
        "hash": "6d072f2a038d9e5f124f7674179b39aafc65a9ee",
        "author": "Yanqin Jin",
        "date": "2019-09-17T17:17:19-07:00",
        "message": "Move WAL-closing loop out of original loop (#5804)\n\nSummary:\nOriginally the loop of closing WAL in PurgeObsoleteFiles resides inside a loop\niterating over the candidate files. It should be moved out.\n\nTest plan (devserver)\n```\n$COMPILE_WITH_ASAN=1 make -j32 all\n$make check\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5804\n\nDifferential Revision: D17374350\n\nPulled By: riversand963\n\nfbshipit-source-id: 2bee7343fc0481d9a385a87c7676491522285c96",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_files.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6d072f2a038d9e5f124f7674179b39aafc65a9ee"
    },
    {
        "hash": "9a87ae46fd9b5db3e156c8e8680b25d524a58352",
        "author": "Maysam Yabandeh",
        "date": "2019-09-17T00:16:13-07:00",
        "message": "Use total charge in MaintainPoolSize (#5813)\n\nSummary:\nhttps://github.com/facebook/rocksdb/issues/5797 charges the block cache with the total of user-provided charge plus the metadata charge. It had a bug where in MaintainPoolSize the user-provided charge was used instead of the total charge. The patch fixes that.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5813\n\nDifferential Revision: D17412783\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 45c0ac9f1e2233760db5ccd61399605cd74edc87",
        "modified_files_count": 1,
        "modified_files": [
            "cache/lru_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9a87ae46fd9b5db3e156c8e8680b25d524a58352"
    },
    {
        "hash": "915d72d849d0ba1fe88310ea81ce627270b88df7",
        "author": "Peter Dillinger",
        "date": "2019-09-16T09:37:42-07:00",
        "message": "Improve accuracy testing for DynamicBloom (#5805)\n\nSummary:\nDynamicBloom unit test now tests non-sequential as well as\nsequential keys in testing FP rates. Also now verifies larger structures.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5805\n\nTest Plan: thisisthetest\n\nDifferential Revision: D17398109\n\nPulled By: pdillinger\n\nfbshipit-source-id: 374074206c76d242efa378afc27830448a0e892a",
        "modified_files_count": 1,
        "modified_files": [
            "util/dynamic_bloom_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/915d72d849d0ba1fe88310ea81ce627270b88df7"
    },
    {
        "hash": "bf5dbc17e3f0a66fab786f84c2f18344559b340e",
        "author": "sdong",
        "date": "2019-09-13T16:01:13-07:00",
        "message": "merging_iterator.cc: Small refactoring (#5793)\n\nSummary:\n1. Put the similar logic of adding valid iterator to heap and check invalid iterator's status code to the same helper functions.\n2. Because of 1, in the changing direction case, move around the places where we check status a little bit so that we can call the helper function there too. The logic would only divert in the case where the iterator is valid but status is not OK, which is not expected to happen. Add an assertion for that.\n3. Put the logic of changing direction from forward to backward to a separate function so the unlikely code path is not in Prev().\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5793\n\nTest Plan: run all existing tests.\n\nDifferential Revision: D17374397\n\nfbshipit-source-id: d595ffcf156095c4bd0f5532bacba854482a2332",
        "modified_files_count": 1,
        "modified_files": [
            "table/merging_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bf5dbc17e3f0a66fab786f84c2f18344559b340e"
    },
    {
        "hash": "e8c2e68b4e3cd9a47e6873a74cfad193af7c25fa",
        "author": "Adam Retter",
        "date": "2019-09-11T18:36:41-07:00",
        "message": "Fix RocksDB bug in block_cache_trace_analyzer.cc on Windows (#5786)\n\nSummary:\nThis is required to compile on Windows with Visual Studio 2015.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5786\n\nDifferential Revision: D17335994\n\nfbshipit-source-id: 8f9568310bc6f697e312b5e24ad465e9084f0011",
        "modified_files_count": 1,
        "modified_files": [
            "tools/block_cache_analyzer/block_cache_trace_analyzer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e8c2e68b4e3cd9a47e6873a74cfad193af7c25fa"
    },
    {
        "hash": "20dd828c01a60ed8258723cec4e3ec58b5c5412a",
        "author": "Andrew Kryczka",
        "date": "2019-09-11T14:07:25-07:00",
        "message": "Avoid clock_gettime on pre-10.12 macOS versions (#5570)\n\nSummary:\nOn older macOS like 10.10 we saw the following compiler error:\n\n```\n/go/src/github.com/cockroachdb/cockroach/c-deps/rocksdb/env/env_posix.cc:845:19:\nerror: use of undeclared identifier 'CLOCK_THREAD_CPUTIME_ID'\n    clock_gettime(CLOCK_THREAD_CPUTIME_ID, &ts);\n                  ^\n```\n\nAccording to mac's `man clock_gettime`: \"These functions first appeared in Mac\nOSX 10.12\". So we should not try to compile it on earlier versions.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5570\n\nTest Plan:\nverified it compiles now on 10.10. Also did some investigation to\nensure it does not cause regression on macOS 10.12+, although I do not\nhave access to such an environment to really test.\n\nDifferential Revision: D17322629\n\nPulled By: riversand963\n\nfbshipit-source-id: e0a412223854f826b4d83e6d15c3739ff4620d7d",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/20dd828c01a60ed8258723cec4e3ec58b5c5412a"
    },
    {
        "hash": "2becafdb43ac2ddced7d4bffec9407b9b89fd2df",
        "author": "anand76",
        "date": "2019-09-10T14:34:37-07:00",
        "message": "Fix Appveyor build due to signed/unsigned comparison\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5788\n\nTest Plan: Travis CI and Appveyor should complete successfully.\n\nDifferential Revision: D17287422\n\nPulled By: anand1976\n\nfbshipit-source-id: d9408b692f78be95d0088b29b33f6a8ff40ec97b",
        "modified_files_count": 1,
        "modified_files": [
            "db/plain_table_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2becafdb43ac2ddced7d4bffec9407b9b89fd2df"
    },
    {
        "hash": "eb9026f09bfd0582652cffa6a2390e9b55285b7f",
        "author": "anand76",
        "date": "2019-09-10T11:06:36-07:00",
        "message": "Add a db_bench benchmark to warm up the row cache\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5707\n\nDifferential Revision: D17242698\n\nPulled By: anand1976\n\nfbshipit-source-id: 5d1bfda3c9e8f56176ae391cae6c91e6262016b8",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eb9026f09bfd0582652cffa6a2390e9b55285b7f"
    },
    {
        "hash": "4d945c57aca17113910d072d86c117c6807d9303",
        "author": "jsteemann",
        "date": "2019-09-10T09:41:45-07:00",
        "message": "do a bit less work in the normal case (#5695)\n\nSummary:\ni.e. if alive logfile is not being moved to archive while we are in GetSortedWalsOfType()\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5695\n\nDifferential Revision: D17279489\n\nPulled By: vjnadimpalli\n\nfbshipit-source-id: 02bcf920a75b812edba8b87c6079b4e6fd5e683c",
        "modified_files_count": 1,
        "modified_files": [
            "db/wal_manager.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4d945c57aca17113910d072d86c117c6807d9303"
    },
    {
        "hash": "7af6ced14baebc702700fd16417849ae711b9796",
        "author": "Peter Dillinger",
        "date": "2019-09-09T15:26:43-07:00",
        "message": "Fix block allocation bug in new DynamicBloom (#5783)\n\nSummary:\nBug found by valgrind. New DynamicBloom wasn't allocating in\nblock sizes. New assertion added that probes starting in final word\nwould be in bounds.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5783\n\nTest Plan: ROCKSDB_VALGRIND_RUN=1 DISABLE_JEMALLOC=1 valgrind --leak-check=full ./dynamic_bloom_test\n\nDifferential Revision: D17270623\n\nPulled By: pdillinger\n\nfbshipit-source-id: 1e0407504b875133a771383cd488c70f91be2b87",
        "modified_files_count": 1,
        "modified_files": [
            "util/dynamic_bloom.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7af6ced14baebc702700fd16417849ae711b9796"
    },
    {
        "hash": "78b8cfc7ece51aa3caec3cb008312441a3617e1f",
        "author": "Maysam Yabandeh",
        "date": "2019-09-06T15:25:26-07:00",
        "message": "WriteUnPrepared: Split ReadYourOwnWriteStress to three (#5776)\n\nSummary:\nReadYourOwnWriteStress occasionally times out on some platforms. The patch splits it to three.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5776\n\nDifferential Revision: D17231743\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: d42eeaf22f61a48d50f9c404d98b1081ae8dac94",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_unprepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/78b8cfc7ece51aa3caec3cb008312441a3617e1f"
    },
    {
        "hash": "2208cc0196b6d297f94479d19d3d5d7fa9e1732f",
        "author": "Manuel Ung",
        "date": "2019-09-06T10:18:04-07:00",
        "message": "Fix build break in TransactionBaseImpl::TrackKey (#5771)\n\nSummary:\nFix build broken in https://github.com/facebook/rocksdb/pull/5696.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5771\n\nDifferential Revision: D17217665\n\nPulled By: lth\n\nfbshipit-source-id: 7aa84a2a9b4feb7a3ab1cab174e09276430fe042",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2208cc0196b6d297f94479d19d3d5d7fa9e1732f"
    },
    {
        "hash": "cfc20019d198ca0eb8e749aec968d5e870be4c25",
        "author": "Richard He",
        "date": "2019-09-05T17:37:21-07:00",
        "message": "Fixed FALLOC_FL_KEEP_SIZE undefined (#5614)\n\nSummary:\nFix `error: ‘FALLOC_FL_KEEP_SIZE’` undeclared error in `io_posix.cc` during Vagrant build in CentOS as per issue https://github.com/facebook/rocksdb/issues/5599\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5614\n\nDifferential Revision: D17217960\n\nfbshipit-source-id: ef736c51b16833107fd9ccc7917ed1def2a8d02c",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cfc20019d198ca0eb8e749aec968d5e870be4c25"
    },
    {
        "hash": "eae9f040eb1914e32c59e36cf57db2e7fa80098e",
        "author": "Jeffrey Xiao",
        "date": "2019-09-05T17:30:29-07:00",
        "message": "Initialized pinned_pos_ and pinned_seq_pos_ in FragmentedRangeTombstoneIterator (#5720)\n\nSummary:\nThese uninitialized member variables can cause a key to not be pinned when it should be, causing erroneous behavior. For example ingesting a file with range deletion tombstones will yield an \"external file have corrupted keys\" on a Mac.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5720\n\nDifferential Revision: D17217673\n\nfbshipit-source-id: cd7df7ce3ad9cf69c841c4d3dc6fd144eff9e212",
        "modified_files_count": 1,
        "modified_files": [
            "db/range_tombstone_fragmenter.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eae9f040eb1914e32c59e36cf57db2e7fa80098e"
    },
    {
        "hash": "43a5cdb58c0755b35d52d01c7b925d5e726dcfbc",
        "author": "Andrew Kryczka",
        "date": "2019-09-05T17:18:49-07:00",
        "message": "remove unused #include to fix musl libc build (#5583)\n\nSummary:\nThe `#include \"core_local.h\"` was pulling in libgcc's `posix_memalign()`\ndeclaration. That declaration specifies `throw()` whereas musl libc's\ndeclaration does not. This was leading to the following compiler error\nwhen using musl libc:\n\n```\nIn file included from /go/src/github.com/cockroachdb/cockroach/c-deps/rocksdb/port/jemalloc_helper.h:26:0,\n                 from /go/src/github.com/cockroachdb/cockroach/c-deps/rocksdb/util/jemalloc_nodump_allocator.h:11,\n                 from /go/src/github.com/cockroachdb/cockroach/c-deps/rocksdb/util/jemalloc_nodump_allocator.cc:6:\n/go/native/x86_64-unknown-linux-musl/jemalloc/include/jemalloc/jemalloc.h:63:29: error: declaration of 'int posix_memalign(void**, size_t, size_t) throw ()' has a different exception specifier\n #  define je_posix_memalign posix_memalign\n                             ^\n/go/native/x86_64-unknown-linux-musl/jemalloc/include/jemalloc/jemalloc.h:63:29: note: from previous declaration 'int posix_memalign(void**, size_t, size_t)'\n #  define je_posix_memalign posix_memalign\n                             ^\n/go/native/x86_64-unknown-linux-musl/jemalloc/include/jemalloc/jemalloc.h:202:38: note: in expansion of macro 'je_posix_memalign'\n JEMALLOC_EXPORT int JEMALLOC_NOTHROW je_posix_memalign(void **memptr,\n                                      ^~~~~~~~~~~~~~~~~\nmake[4]: *** [CMakeFiles/rocksdb.dir/util/jemalloc_nodump_allocator.cc.o] Error 1\n```\n\nSince `#include \"core_local.h\"` is not actually used, we can just remove\nit. I verified that fixes the build.\n\nThere was a related PR here (https://github.com/facebook/rocksdb/issues/2188), although the problem description is\nslightly different.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5583\n\nDifferential Revision: D16343227\n\nfbshipit-source-id: 0386bc2b5fd55b2c3b5fba19382014efa52e44f8",
        "modified_files_count": 1,
        "modified_files": [
            "memory/jemalloc_nodump_allocator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/43a5cdb58c0755b35d52d01c7b925d5e726dcfbc"
    },
    {
        "hash": "ac97e6930f3443c3bf5a4ce77834bcaa863d2540",
        "author": "HouBingjian",
        "date": "2019-09-05T17:03:24-07:00",
        "message": "bloom test check fail on arm (#5745)\n\nSummary:\nFullFilterBitsBuilder::CalculateSpace use CACHE_LINE_SIZE which is 64@X86 but 128@ARM64\nwhen it run bloom_test.FullVaryingLengths it failed on ARM64 server,\nthe assert can be fixed by change  128->CACHE_LINE_SIZE*2 as merged\nASSERT_LE(FilterSize(), (size_t)((length * 10 / 8) + CACHE_LINE_SIZE * 2 + 5)) << length;\n\nrun  bloom_test\nbefore fix:\n/root/rocksdb-master/util/bloom_test.cc:281: Failure\nExpected: (FilterSize()) <= ((size_t)((length * 10 / 8) + 128 + 5)), actual: 389 vs 383\n200\n[  FAILED  ] FullBloomTest.FullVaryingLengths (32 ms)\n[----------] 4 tests from FullBloomTest (32 ms total)\n\n[----------] Global test environment tear-down\n[==========] 7 tests from 2 test cases ran. (116 ms total)\n[  PASSED  ] 6 tests.\n[  FAILED  ] 1 test, listed below:\n[  FAILED  ] FullBloomTest.FullVaryingLengths\n\nafter fix:\nFilters: 37 good, 0 mediocre\n[       OK ] FullBloomTest.FullVaryingLengths (90 ms)\n[----------] 4 tests from FullBloomTest (90 ms total)\n\n[----------] Global test environment tear-down\n[==========] 7 tests from 2 test cases ran. (174 ms total)\n[  PASSED  ] 7 tests.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5745\n\nDifferential Revision: D17076047\n\nfbshipit-source-id: e7beb5d55d4855fceb2b84bc8119a6b0759de635",
        "modified_files_count": 1,
        "modified_files": [
            "util/bloom_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ac97e6930f3443c3bf5a4ce77834bcaa863d2540"
    },
    {
        "hash": "f9fb9f14211ccc49921c3e31294e2619eb4e2fb7",
        "author": "Maysam Yabandeh",
        "date": "2019-09-04T14:31:10-07:00",
        "message": "Add a unit test to detect infinite loops with reseek optimizations (#5727)\n\nSummary:\nIterators reseek to the target key after iterating over max_sequential_skip_in_iterations invalid values. The logic is susceptible to an infinite loop bug, which has been present with WritePrepared Transactions up until 6.2 release. Although the bug is not present on master, the patch adds a unit test to prevent it from resurfacing again.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5727\n\nDifferential Revision: D16952759\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: d0d973dddc8dfabd5a794931232aa4c862c74f51",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f9fb9f14211ccc49921c3e31294e2619eb4e2fb7"
    },
    {
        "hash": "38b17ecd0ed101f15a1de754395a886acf6e236e",
        "author": "Yanqin Jin",
        "date": "2019-09-04T11:38:34-07:00",
        "message": "Replace named comparator struct with lambda (#5768)\n\nSummary:\nTiny code mod: replace a named comparator struct with anonymous lambda.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5768\n\nDifferential Revision: D17185141\n\nPulled By: riversand963\n\nfbshipit-source-id: fabe367649931c33a39ad035dc707d2efc3ad5fc",
        "modified_files_count": 1,
        "modified_files": [
            "db/wal_manager.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/38b17ecd0ed101f15a1de754395a886acf6e236e"
    },
    {
        "hash": "672befea2a514e32c8506389883f552129d2d5eb",
        "author": "Yanqin Jin",
        "date": "2019-08-30T12:42:01-07:00",
        "message": "Fix assertion failure in FIFO compaction with TTL (#5754)\n\nSummary:\nBefore this PR, the following sequence of events can cause assertion failure as shown below.\nStack trace (partial):\n```\n(gdb) bt\n2  0x00007f59b350ad15 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x9f8390 \"mark_as_compacted ? !inputs_[i][j]->being_compacted : inputs_[i][j]->being_compacted\", file=file@entry=0x9e347c \"db/compaction/compaction.cc\", line=line@entry=395, function=function@entry=0xa21ec0 <rocksdb::Compaction::MarkFilesBeingCompacted(bool)::__PRETTY_FUNCTION__> \"void rocksdb::Compaction::MarkFilesBeingCompacted(bool)\") at assert.c:92\n3  0x00007f59b350adc3 in __GI___assert_fail (assertion=assertion@entry=0x9f8390 \"mark_as_compacted ? !inputs_[i][j]->being_compacted : inputs_[i][j]->being_compacted\", file=file@entry=0x9e347c \"db/compaction/compaction.cc\", line=line@entry=395, function=function@entry=0xa21ec0 <rocksdb::Compaction::MarkFilesBeingCompacted(bool)::__PRETTY_FUNCTION__> \"void rocksdb::Compaction::MarkFilesBeingCompacted(bool)\") at assert.c:101\n4  0x0000000000492ccd in rocksdb::Compaction::MarkFilesBeingCompacted (this=<optimized out>, mark_as_compacted=<optimized out>) at db/compaction/compaction.cc:394\n5  0x000000000049467a in rocksdb::Compaction::Compaction (this=0x7f59af013000, vstorage=0x7f581af53030, _immutable_cf_options=..., _mutable_cf_options=..., _inputs=..., _output_level=<optimized out>, _target_file_size=0, _max_compaction_bytes=0, _output_path_id=0, _compression=<incomplete type>, _compression_opts=..., _max_subcompactions=0, _grandparents=..., _manual_compaction=false, _score=4, _deletion_compaction=true, _compaction_reason=rocksdb::CompactionReason::kFIFOTtl) at db/compaction/compaction.cc:241\n6  0x00000000004af9bc in rocksdb::FIFOCompactionPicker::PickTTLCompaction (this=0x7f59b31a6900, cf_name=..., mutable_cf_options=..., vstorage=0x7f581af53030, log_buffer=log_buffer@entry=0x7f59b1bfa930) at db/compaction/compaction_picker_fifo.cc:101\n7  0x00000000004b0771 in rocksdb::FIFOCompactionPicker::PickCompaction (this=0x7f59b31a6900, cf_name=..., mutable_cf_options=..., vstorage=0x7f581af53030, log_buffer=0x7f59b1bfa930) at db/compaction/compaction_picker_fifo.cc:201\n8  0x00000000004838cc in rocksdb::ColumnFamilyData::PickCompaction (this=this@entry=0x7f59b31b3700, mutable_options=..., log_buffer=log_buffer@entry=0x7f59b1bfa930) at db/column_family.cc:933\n9  0x00000000004f3645 in rocksdb::DBImpl::BackgroundCompaction (this=this@entry=0x7f59b3176000, made_progress=made_progress@entry=0x7f59b1bfa6bf, job_context=job_context@entry=0x7f59b1bfa760, log_buffer=log_buffer@entry=0x7f59b1bfa930, prepicked_compaction=prepicked_compaction@entry=0x0, thread_pri=rocksdb::Env::LOW) at db/db_impl/db_impl_compaction_flush.cc:2541\n10 0x00000000004f5e2a in rocksdb::DBImpl::BackgroundCallCompaction (this=this@entry=0x7f59b3176000, prepicked_compaction=prepicked_compaction@entry=0x0, bg_thread_pri=bg_thread_pri@entry=rocksdb::Env::LOW) at db/db_impl/db_impl_compaction_flush.cc:2312\n11 0x00000000004f648e in rocksdb::DBImpl::BGWorkCompaction (arg=<optimized out>) at db/db_impl/db_impl_compaction_flush.cc:2087\n```\nThis can be caused by the following sequence of events.\n```\nTime\n|      thr          bg_compact_thr1                     bg_compact_thr2\n|      write\n|      flush\n|                   mark all l0 as being compacted\n|      write\n|      flush\n|                   add cf to queue again\n|                                                       mark all l0 as being\n|                                                       compacted, fail the\n|                                                       assertion\nV\n```\nTest plan (on devserver)\nSince bg_compact_thr1 and bg_compact_thr2 are two threads executing the same\ncode, it is difficult to use sync point dependency to\ncoordinate their execution. Therefore, I choose to use db_stress.\n```\n$TEST_TMPDIR=/dev/shm/rocksdb ./db_stress --periodic_compaction_seconds=1 --max_background_compactions=20 --format_version=2 --memtablerep=skip_list --max_write_buffer_number=3 --cache_index_and_filter_blocks=1 --reopen=20 --recycle_log_file_num=0 --acquire_snapshot_one_in=10000 --delpercent=4 --log2_keys_per_lock=22 --compaction_ttl=1 --block_size=16384 --use_multiget=1 --compact_files_one_in=1000000 --target_file_size_multiplier=2 --clear_column_family_one_in=0 --max_bytes_for_level_base=10485760 --use_full_merge_v1=1 --target_file_size_base=2097152 --checkpoint_one_in=1000000 --mmap_read=0 --compression_type=zstd --writepercent=35 --readpercent=45 --subcompactions=4 --use_merge=0 --write_buffer_size=4194304 --test_batches_snapshots=0 --db=/dev/shm/rocksdb/rocksdb_crashtest_whitebox --use_direct_reads=0 --compact_range_one_in=1000000 --open_files=-1 --destroy_db_initially=0 --progress_reports=0 --compression_zstd_max_train_bytes=0 --snapshot_hold_ops=100000 --enable_pipelined_write=0 --nooverwritepercent=1 --compression_max_dict_bytes=0 --max_key=1000000 --prefixpercent=5 --flush_one_in=1000000 --ops_per_thread=40000 --index_block_restart_interval=7 --cache_size=1048576 --compaction_style=2 --verify_checksum=1 --delrangepercent=1 --use_direct_io_for_flush_and_compaction=0\n```\nThis should see no assertion failure.\nLast but not least,\n```\n$COMPILE_WITH_ASAN=1 make -j32 all\n$make check\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5754\n\nDifferential Revision: D17109791\n\nPulled By: riversand963\n\nfbshipit-source-id: 25fc46101235add158554e096540b72c324be078",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction/compaction_picker_fifo.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/672befea2a514e32c8506389883f552129d2d5eb"
    },
    {
        "hash": "1729779b85e29f190612f82592e7070b6d24f58b",
        "author": "anand76",
        "date": "2019-08-29T12:13:28-07:00",
        "message": "Disable MultiGet row cache test in LITE mode (#5756)\n\nSummary:\nRow cache is not supported in LITE mode. So disable the test in that mode.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5756\n\nTest Plan: make LITE=1 all check\n\nDifferential Revision: D17115684\n\nPulled By: anand1976\n\nfbshipit-source-id: e6433c2e528674645cea76cdfc80ddc473708fc2",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1729779b85e29f190612f82592e7070b6d24f58b"
    },
    {
        "hash": "ab0645a596e0dfed0ae37ae61420fff923fd7fa2",
        "author": "Shafreeck Sea",
        "date": "2019-08-29T10:57:01-07:00",
        "message": "Fix comment of function NotifyCollectTableCollectorsOnFinish (#5738)\n\nSummary:\nSigned-off-by: Shafreeck Sea <shafreeck@gmail.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5738\n\nDifferential Revision: D17097075\n\nPulled By: riversand963\n\nfbshipit-source-id: ed01b5f59e8eed262a49abe1f96552842d364af1",
        "modified_files_count": 1,
        "modified_files": [
            "table/meta_blocks.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ab0645a596e0dfed0ae37ae61420fff923fd7fa2"
    },
    {
        "hash": "ba0967b567cfdad44e9e1762a17dd1802e02c2ce",
        "author": "Andrew Kryczka",
        "date": "2019-08-26T15:00:43-07:00",
        "message": "Reduce severity of too many levels log message (#5742)\n\nSummary:\nThis condition is now a normal occurrence during write burst so there is\nno need to warn the user about it. Here is a scenario where it happens\nunder completely normal conditions.\n\n* Initially we have a DB of three levels (L0, L1, and L2) that is stable, i.e., compaction scores are all less than one.\n* Now a write burst comes along. At first L0 blows up a bit in size as compaction hasn't had a chance to catch up.\n* As a result of the above, `base_bytes_min` also increases since it is based on L0 size as of https://github.com/facebook/rocksdb/issues/4338\n* If `base_bytes_min` increased enough (i.e., to be larger than L1), then we are shown the warning that the DB has more levels than necessary.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5742\n\nDifferential Revision: D17059221\n\nfbshipit-source-id: e4a31d6eea42089a8d273095f19653991bd91bea",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ba0967b567cfdad44e9e1762a17dd1802e02c2ce"
    },
    {
        "hash": "26293c89a65625c34f362385779358cb16905e38",
        "author": "DaiZhiwei",
        "date": "2019-08-23T11:04:08-07:00",
        "message": "crc32c_arm64 performance optimization (#5675)\n\nSummary:\nCrc32c Parallel computation coding optimization:\nMacro unfolding removes the \"for\" loop and is good to decrease branch-miss in arm64 micro architecture\n1024 Bytes is divided into  8(head) + 1008( 6 * 7 * 3 * 8 ) + 8(tail)  three parts\nMacro unfolding 42 loops to 6 CRC32C7X24BYTESs\n1 CRC32C7X24BYTES containing 7 CRC32C24BYTESs\n\n1, crc32c_test\n[==========] Running 4 tests from 1 test case.\n[----------] Global test environment set-up.\n[----------] 4 tests from CRC\n[ RUN      ] CRC.StandardResults\n[       OK ] CRC.StandardResults (1 ms)\n[ RUN      ] CRC.Values\n[       OK ] CRC.Values (0 ms)\n[ RUN      ] CRC.Extend\n[       OK ] CRC.Extend (0 ms)\n[ RUN      ] CRC.Mask\n[       OK ] CRC.Mask (0 ms)\n[----------] 4 tests from CRC (1 ms total)\n\n[----------] Global test environment tear-down\n[==========] 4 tests from 1 test case ran. (1 ms total)\n[  PASSED  ] 4 tests.\n\n2, db_bench --benchmarks=\"crc32c\"\ncrc32c : 0.218 micros/op 4595390 ops/sec; 17950.7 MB/s (4096 per op)\n\n3, repeated crc32c_test case  60000 times\nperf stat -e branch-miss -- ./crc32c_test\nbefore optimization:\n739,426,504      branch-miss\nafter optimization:\n1,128,572      branch-miss\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5675\n\nDifferential Revision: D16989210\n\nfbshipit-source-id: 7204e6069bb6ed066d49c2d1b3ac385065a98557",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c_arm64.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/26293c89a65625c34f362385779358cb16905e38"
    },
    {
        "hash": "202942b20cbd7a2dd539dcc4250688dd6a9a932e",
        "author": "Patrick Pei",
        "date": "2019-08-22T16:21:47-07:00",
        "message": "Fix local includes\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5722\n\nDifferential Revision: D16908380\n\nfbshipit-source-id: 6a0e3cb2730b08d6012d3d7f31c937f01c399846",
        "modified_files_count": 1,
        "modified_files": [
            "table/get_context.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/202942b20cbd7a2dd539dcc4250688dd6a9a932e"
    },
    {
        "hash": "4c74dba5fa166bddc1e8a1b1f7488f99ffb1b458",
        "author": "sdong",
        "date": "2019-08-20T10:34:33-07:00",
        "message": "Bump up memory order of ref counting of ColumnFamilyData (#5723)\n\nSummary:\nWe see this TSAN warning:\n\nWARNING: ThreadSanitizer: data race (pid=282806)\n  Write of size 8 at 0x7b6c00000e38 by thread T16 (mutexes: write M1023578822185846136):\n    #0 operator delete(void*) <null> (libtsan.so.0+0x0000000795f8)\n    https://github.com/facebook/rocksdb/issues/1 rocksdb::DBImpl::BackgroundFlush(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::FlushReason*, rocksdb::Env::Priority) db/db_impl/db_impl_compaction_flush.cc:2202 (db_flush_test+0x00000060b462)\n    https://github.com/facebook/rocksdb/issues/2 rocksdb::DBImpl::BackgroundCallFlush(rocksdb::Env::Priority) db/db_impl/db_impl_compaction_flush.cc:2226 (db_flush_test+0x00000060cbd8)\n    https://github.com/facebook/rocksdb/issues/3 rocksdb::DBImpl::BGWorkFlush(void*) db/db_impl/db_impl_compaction_flush.cc:2073 (db_flush_test+0x00000060d5ac)\n    ......\n\nPrevious atomic write of size 4 at 0x7b6c00000e38 by main thread:\n    #0 __tsan_atomic32_fetch_sub <null> (libtsan.so.0+0x00000006d721)\n    https://github.com/facebook/rocksdb/issues/1 std::__atomic_base<int>::fetch_sub(int, std::memory_order) /mnt/gvfs/third-party2/libgcc/c67031f0f739ac61575a061518d6ef5038f99f90/7.x/platform007/5620abc/include/c++/7.3.0/bits/atomic_base.h:524 (db_flush_test+0x0000005f9e38)\n    https://github.com/facebook/rocksdb/issues/2 rocksdb::ColumnFamilyData::Unref() db/column_family.h:286 (db_flush_test+0x0000005f9e38)\n    https://github.com/facebook/rocksdb/issues/3 rocksdb::DBImpl::FlushMemTable(rocksdb::ColumnFamilyData*, rocksdb::FlushOptions const&, rocksdb::FlushReason, bool) db/db_impl/db_impl_compaction_flush.cc:1624 (db_flush_test+0x0000005f9e38)\n    https://github.com/facebook/rocksdb/issues/4 rocksdb::DBImpl::TEST_FlushMemTable(rocksdb::ColumnFamilyData*, rocksdb::FlushOptions const&) db/db_impl/db_impl_debug.cc:127 (db_flush_test+0x00000061ace9)\n    https://github.com/facebook/rocksdb/issues/5 rocksdb::DBFlushTest_CFDropRaceWithWaitForFlushMemTables_Test::TestBody() db/db_flush_test.cc:320 (db_flush_test+0x0000004b44e5)\n    https://github.com/facebook/rocksdb/issues/6 void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) third-party/gtest-1.7.0/fused-src/gtest/gtest-all.cc:3824 (db_flush_test+0x000000be2988)\n    ......\n\nIt's still very clear the cause of the warning is because that TSAN treats results from relaxed atomic::fetch_sub() as non-atomic with the operation itself. We can make it more explicit by bumping up the order to CS.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5723\n\nTest Plan: Run all existing test.\n\nDifferential Revision: D16908250\n\nfbshipit-source-id: bf17d39ed19058372bdf97f6440a743f88153021",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4c74dba5fa166bddc1e8a1b1f7488f99ffb1b458"
    },
    {
        "hash": "e89b1c9c6e1388f6e7eba0b66110492fe3e7623f",
        "author": "Zhongyi Xie",
        "date": "2019-08-16T16:39:49-07:00",
        "message": "add missing check for hash index when calling BlockBasedTableIterator (#5712)\n\nSummary:\nPrevious PR https://github.com/facebook/rocksdb/pull/3601 added support for making prefix_extractor dynamically mutable. However, there was a missing check for hash index when creating new BlockBasedTableIterator. While the check may be redundant because no other types of IndexReader makes uses of the flag, it is less error-prone to add the missing check so that future index reader implementation will not worry about violating the contract.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5712\n\nDifferential Revision: D16842052\n\nPulled By: miasantreble\n\nfbshipit-source-id: aef11c0ff7a690ed248f5b8fe23481cac486b381",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e89b1c9c6e1388f6e7eba0b66110492fe3e7623f"
    },
    {
        "hash": "e0515607bc04a97edc2cb1ae8b527793be08e495",
        "author": "sdong",
        "date": "2019-08-16T15:36:49-07:00",
        "message": "Blacklist TransactionTest.GetWithoutSnapshot from valgrind_test (#5715)\n\nSummary:\nIn valgrind_test, TransactionTest.GetWithoutSnapshot ran 2 hours and still didn't finish. Black list from valgrind_test to prevent timeout.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5715\n\nTest Plan: run \"make valgrind_test\" and see whether the test is still generated.\n\nDifferential Revision: D16866009\n\nfbshipit-source-id: 92c78049b0bc1c2b9a0dfc1b7c8a9206b36f02f0",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e0515607bc04a97edc2cb1ae8b527793be08e495"
    },
    {
        "hash": "a2e46eae46825e3eb87f9205d8dbc962b1d0107a",
        "author": "jsteemann",
        "date": "2019-08-16T14:38:08-07:00",
        "message": "fix compiling with `-DNPERF_CONTEXT` (#5704)\n\nSummary:\nThis was previously broken, as the performance context-related\nmacro signatures in file monitoring/perf_context_imp.h\ndeviated for the case when NPERF_CONTEXT was defined and when it\nwas not.\n\nUpdate the macros for the `-DNPERF_CONTEXT` case, so it compiles.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5704\n\nDifferential Revision: D16867746\n\nfbshipit-source-id: 05539724cb1f7955ecc42828365836a677759ad9",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/perf_context_imp.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a2e46eae46825e3eb87f9205d8dbc962b1d0107a"
    },
    {
        "hash": "c762efc4a945e6ed1f4bd632e5f202c271381438",
        "author": "sheng qiu",
        "date": "2019-08-16T13:58:05-07:00",
        "message": "fix compile error: ‘FALLOC_FL_KEEP_SIZE’ undeclared (#5708)\n\nSummary:\nadd \"linux/falloc.h\" in env/io_posix.cc to fix compile error: ‘FALLOC_FL_KEEP_SIZE’ undeclared\n\nSigned-off-by: sheng qiu <herbert1984106@gmail.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5708\n\nDifferential Revision: D16832922\n\nfbshipit-source-id: 30e787c4a1b5a9724a8acfd68962ff5ec5f27d3e",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c762efc4a945e6ed1f4bd632e5f202c271381438"
    },
    {
        "hash": "40712df9ab3d91bae3da5b9a9e8d89983f875fed",
        "author": "Kefu Chai",
        "date": "2019-08-16T13:55:41-07:00",
        "message": "ThreadPoolImpl::Impl::BGThreadWrapper() returns void (#5709)\n\nSummary:\nthere is no need to return void*, as\nstd::thread::thread(Func&& f, Args&&... args ) only requires `Func` to\nbe callable.\n\nSigned-off-by: Kefu Chai <tchaikov@gmail.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5709\n\nDifferential Revision: D16832894\n\nfbshipit-source-id: a1e1b876fa8d55589ef5feb5b27f3a435068b747",
        "modified_files_count": 1,
        "modified_files": [
            "util/threadpool_imp.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/40712df9ab3d91bae3da5b9a9e8d89983f875fed"
    },
    {
        "hash": "0a97125ec07f72c0dc0dd11d21327be070a03536",
        "author": "Levi Tamasi",
        "date": "2019-08-14T16:10:36-07:00",
        "message": "Fix data races in BlobDB (#5698)\n\nSummary:\nSome accesses to blob_files_ and open_ttl_files_ in BlobDBImpl, as well\nas to expiration_range_ in BlobFile were not properly synchronized.\nThe patch fixes this and also makes sure the invariant that obsolete_files_\nis a subset of blob_files_ holds even when an attempt to delete an obsolete\nblob file fails.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5698\n\nTest Plan:\nCOMPILE_WITH_TSAN=1 make blob_db_test\ngtest-parallel --repeat=1000 ./blob_db_test --gtest_filter=\"*ShutdownWait*\"\n\nThe test fails with TSAN errors ~20 times out of 1000 without the patch but\ncompletes successfully 1000 out of 1000 times with the fix.\n\nDifferential Revision: D16793235\n\nPulled By: ltamasi\n\nfbshipit-source-id: 8034b987598d4fdc9f15098d4589cc49cde484e9",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0a97125ec07f72c0dc0dd11d21327be070a03536"
    },
    {
        "hash": "90cd6c2bb17a54e97c32856254fd666c9cab8dc5",
        "author": "Zhongyi Xie",
        "date": "2019-08-13T21:54:55-07:00",
        "message": "Fix double deletion in transaction_test (#5700)\n\nSummary:\nFix the following clang analyze failures:\n```\nIn file included from utilities/transactions/transaction_test.cc:8:\n./utilities/transactions/transaction_test.h:174:14: warning: Attempt to delete released memory\n      delete root_db;\n             ^\n```\nThe destructor of StackableDB already deletes the root db and there is no need to delete the db separately.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5700\n\nTest Plan: USE_CLANG=1 TEST_TMPDIR=/dev/shm/rocksdb OPT=-g make -j24 analyze\n\nDifferential Revision: D16800579\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 64c2d70f23e07e6a15242add97c744902ea33be5",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/90cd6c2bb17a54e97c32856254fd666c9cab8dc5"
    },
    {
        "hash": "04a849b7b408e05d55557a16d1d677b80c543b30",
        "author": "Yi Zhang",
        "date": "2019-08-12T16:42:10-07:00",
        "message": "Fix compiler error by deleting GetContext default ctor (#5685)\n\nSummary:\nWhen updating compiler version for MyRocks I'm seeing this error with rocksdb:\n\n```\nome/yzha/mysql/mysql-fork2/rocksdb/table/get_context.h:91:3: error: explicitly defaulted default constructor is implicitly deleted\n      [-Werror,-Wdefaulted-function-deleted]\n  GetContext() = default;\n  ^\n/home/yzha/mysql/mysql-fork2/rocksdb/table/get_context.h:166:18: note: default constructor of 'GetContext' is implicitly deleted because field\n      'tracing_get_id_' of const-qualified type 'const uint64_t' (aka 'const unsigned long') would not be initialized\n  const uint64_t tracing_get_id_;\n                 ^\n```\n\nThe error itself is rather self explanatory and makes sense.\n\nGiven that no one seems to be using the default ctor (they shouldn't, anyway), I'm deleting it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5685\n\nDifferential Revision: D16747712\n\nPulled By: yizhang82\n\nfbshipit-source-id: 95c0acb958a1ed41154c0047d2e6fce7644de53f",
        "modified_files_count": 1,
        "modified_files": [
            "table/get_context.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/04a849b7b408e05d55557a16d1d677b80c543b30"
    },
    {
        "hash": "64855979aeb74ae4eaa5b6576243a132ae2267bc",
        "author": "Maysam Yabandeh",
        "date": "2019-08-12T12:20:46-07:00",
        "message": "WriteUnPrepared: Pass snap_released to the callback (#5691)\n\nSummary:\nWith changes made in https://github.com/facebook/rocksdb/pull/5664 we meant to pass snap_released parameter of ::IsInSnapshot from the read callbacks. Although the variable was defined, passing it to the callback in WritePreparedTxnReadCallback was missing, which is fixed in this PR.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5691\n\nDifferential Revision: D16767310\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 3bf53f5964a2756a66ceef7c8f6b3ac75f102f48",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_unprepared_txn.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/64855979aeb74ae4eaa5b6576243a132ae2267bc"
    },
    {
        "hash": "e579e32eaa33ba368c7b1d4de61da6ae4c7b1351",
        "author": "Maysam Yabandeh",
        "date": "2019-08-05T13:35:39-07:00",
        "message": "Disable ReadYourOwnWriteStress when run under Valgrind (#5671)\n\nSummary:\nIt sometimes times out when run under valgrind taking around 20m. The patch skips the test under Valgrind.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5671\n\nDifferential Revision: D16652382\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 0f6f4f76d37337d56226b689e01b14523dd07aae",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_unprepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e579e32eaa33ba368c7b1d4de61da6ae4c7b1351"
    },
    {
        "hash": "1dfc5eaab03f998ab13a6953b53e41cdfd2c8237",
        "author": "Levi Tamasi",
        "date": "2019-07-31T15:20:26-07:00",
        "message": "Test the various configurations in parallel in MergeOperatorPinningTest (#5659)\n\nSummary:\nMergeOperatorPinningTest.Randomized frequently times out under TSAN\nbecause it tests ~40 option configurations sequentially in a loop. The\npatch parallelizes the tests of the various configurations to make the\ntest complete faster.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5659\n\nTest Plan: Tested using buck test mode/dev-tsan ...\n\nDifferential Revision: D16587518\n\nPulled By: ltamasi\n\nfbshipit-source-id: 65bd25c0ad9a23587fed5592e69c1a0097fa27f6",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_merge_operator_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1dfc5eaab03f998ab13a6953b53e41cdfd2c8237"
    },
    {
        "hash": "3f89af1c39da4991ef6c544fc5e3f164a688b375",
        "author": "Levi Tamasi",
        "date": "2019-07-26T15:53:34-07:00",
        "message": "Reduce the number of random iterations in compact_on_deletion_collector_test (#5635)\n\nSummary:\nThis test frequently times out under TSAN; reducing the number of random\niterations to make it complete faster.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5635\n\nTest Plan: buck test mode/dev-tsan internal_repo_rocksdb/repo:compact_on_deletion_collector_test\n\nDifferential Revision: D16523505\n\nPulled By: ltamasi\n\nfbshipit-source-id: 6a69909bce9d204c891150fcb3d536547b3253d0",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/table_properties_collectors/compact_on_deletion_collector_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3f89af1c39da4991ef6c544fc5e3f164a688b375"
    },
    {
        "hash": "d9dc6b4637276740a19ff8f649fc0d634342e960",
        "author": "Maysam Yabandeh",
        "date": "2019-07-24T15:22:14-07:00",
        "message": "Declare snapshot refresh incompatible with delete range (#5625)\n\nSummary:\nThe ::snap_refresh_nanos option is incompatible with DeleteRange feature. Currently the code relies on range_del_agg.IsEmpty() to disable it if there are range delete tombstones. However ::IsEmpty does not guarantee that there is no RangeDelete tombstones in the SST files. The patch declares the two features incompatible in inline comments until we later figure how to properly detect the presence of RangeDelete tombstones in compaction inputs.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5625\n\nDifferential Revision: D16468218\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: bd7beca278bc7e1db75e7ee4522d05a3a6ca86f4",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d9dc6b4637276740a19ff8f649fc0d634342e960"
    },
    {
        "hash": "f5b951f7b6b223f0373bec2d935a0a3a68c17d32",
        "author": "sdong",
        "date": "2019-07-23T19:38:16-07:00",
        "message": "Fix wrong info log printing for num_range_deletions (#5617)\n\nSummary:\nnum_range_deletions printing is wrong in this log line:\n\n2019/07/18-12:59:15.309271 7f869f9ff700 EVENT_LOG_v1 {\"time_micros\": 1563479955309228, \"cf_name\": \"5\", \"job\": 955, \"event\": \"table_file_creation\", \"file_number\": 34579, \"file_size\": 2239842, \"table_properties\": {\"data_size\": 1988792, \"index_size\": 3067, \"index_partitions\": 0, \"top_level_index_size\": 0, \"index_key_is_user_key\": 0, \"index_value_is_delta_encoded\": 1, \"filter_size\": 170821, \"raw_key_size\": 1951792, \"raw_average_key_size\": 16, \"raw_value_size\": 1731720, \"raw_average_value_size\": 14, \"num_data_blocks\": 199, \"num_entries\": 121987, \"num_deletions\": 15184, \"num_merge_operands\": 86512, \"num_range_deletions\": 86512, \"format_version\": 0, \"fixed_key_len\": 0, \"filter_policy\": \"rocksdb.BuiltinBloomFilter\", \"column_family_name\": \"5\", \"column_family_id\": 5, \"comparator\": \"leveldb.BytewiseComparator\", \"merge_operator\": \"PutOperator\", \"prefix_extractor_name\": \"rocksdb.FixedPrefix.7\", \"property_collectors\": \"[]\", \"compression\": \"ZSTD\", \"compression_options\": \"window_bits=-14; level=32767; strategy=0; max_dict_bytes=0; zstd_max_train_bytes=0; enabled=0; \", \"creation_time\": 1563479951, \"oldest_key_time\": 0, \"file_creation_time\": 1563479954}}\n\nIt actually prints \"num_merge_operands\" number. Fix it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5617\n\nTest Plan: Just build.\n\nDifferential Revision: D16453110\n\nfbshipit-source-id: fc1024b3cd5650312ed47a1379f0d2cf8b2d8a8f",
        "modified_files_count": 1,
        "modified_files": [
            "db/event_helpers.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f5b951f7b6b223f0373bec2d935a0a3a68c17d32"
    },
    {
        "hash": "4f7ba3aaed08b0f29a2828a44fb9eed525f47610",
        "author": "anand76",
        "date": "2019-07-19T13:25:36-07:00",
        "message": "Fix tsan and valgrind failures in import_column_family_test\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5598\n\nTest Plan:\ntsan_check\nvalgrind_test\n\nDifferential Revision: D16380167\n\nPulled By: anand1976\n\nfbshipit-source-id: 2d0caea7d2d02a9606457f62811175d762b89d5c",
        "modified_files_count": 1,
        "modified_files": [
            "db/import_column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4f7ba3aaed08b0f29a2828a44fb9eed525f47610"
    },
    {
        "hash": "6bb3b4b567452ff88b6023d3db61bba2e4125d6c",
        "author": "sdong",
        "date": "2019-07-19T11:36:59-07:00",
        "message": "ldb idump to support non-default column families. (#5594)\n\nSummary:\nldb idump now only works for default column family. Extend it.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5594\n\nTest Plan: Compile and run the tool against a multiple CF DB.\n\nDifferential Revision: D16380684\n\nfbshipit-source-id: bfb8af36fdad1806837c90aaaab492d71528aceb",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6bb3b4b567452ff88b6023d3db61bba2e4125d6c"
    },
    {
        "hash": "abd1fdddef8c72a3ffa736284c03ea550ace211b",
        "author": "anand76",
        "date": "2019-07-18T14:51:25-07:00",
        "message": "Fix asan_check failures\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5589\n\nTest Plan: TEST_TMPDIR=/dev/shm/rocksdb COMPILE_WITH_ASAN=1 OPT=-g make J=64 -j64 asan_check\n\nDifferential Revision: D16361081\n\nPulled By: anand1976\n\nfbshipit-source-id: 09474832b9cfb318a840d4b633e22dfad105d58c",
        "modified_files_count": 1,
        "modified_files": [
            "db/import_column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/abd1fdddef8c72a3ffa736284c03ea550ace211b"
    },
    {
        "hash": "ec2b996b29ab45d7d33a124f499344c8fb054229",
        "author": "anand76",
        "date": "2019-07-17T22:06:12-07:00",
        "message": "Fix LITE mode build failure\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5588\n\nTest Plan: make LITE=1 all check\n\nDifferential Revision: D16354543\n\nPulled By: anand1976\n\nfbshipit-source-id: 327a171439e183ac3a5e5057c511d6bca445e97d",
        "modified_files_count": 1,
        "modified_files": [
            "db/import_column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ec2b996b29ab45d7d33a124f499344c8fb054229"
    },
    {
        "hash": "cd2520361d38ef3556d3bda479fd7a4caa0d1168",
        "author": "Jim Lin",
        "date": "2019-07-15T12:59:39-07:00",
        "message": "Fix memorty leak in `rocksdb_wal_iter_get_batch` function (#5515)\n\nSummary:\n`wal_batch.writeBatchPtr.release()` gives up the ownership of the original `WriteBatch`, but there is no new owner, which causes memory leak.\n\nThe patch is simple. Removing `release()` prevent ownership change. `std::move` is for speed.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5515\n\nDifferential Revision: D16264281\n\nPulled By: riversand963\n\nfbshipit-source-id: 51c556b7a1c977325c3aa24acb636303847151fa",
        "modified_files_count": 1,
        "modified_files": [
            "db/c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cd2520361d38ef3556d3bda479fd7a4caa0d1168"
    },
    {
        "hash": "6e8a1354a799f14fb068fdecd771daa64918d36d",
        "author": "Tomas Kolda",
        "date": "2019-07-15T12:19:49-07:00",
        "message": "Fix regression - 100% CPU - Regression for Windows 7 (#5557)\n\nSummary:\nFixes https://github.com/facebook/rocksdb/issues/5552\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5557\n\nDifferential Revision: D16266329\n\nfbshipit-source-id: a8f6b50298a6f7c8d6c7e172bb26dd7eb6bd8a4d",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6e8a1354a799f14fb068fdecd771daa64918d36d"
    },
    {
        "hash": "b0259e45e0be576f98e31020975a8b1cef8fb31f",
        "author": "Zhongyi Xie",
        "date": "2019-07-15T11:49:17-07:00",
        "message": "add more tracing for stats history (#5566)\n\nSummary:\nSample info log output from db_bench:\nIn-memory:\n```\n2019/07/12-21:39:19.478490 7fa01b3f5700 [_impl/db_impl.cc:702] ------- PERSISTING STATS -------\n2019/07/12-21:39:19.478633 7fa01b3f5700 [_impl/db_impl.cc:753] Storing 145 stats with timestamp 1562992759 to in-memory stats history\n2019/07/12-21:39:19.478670 7fa01b3f5700 [_impl/db_impl.cc:766] [Pre-GC] In-memory stats history size: 1051218 bytes, slice count: 103\n2019/07/12-21:39:19.478704 7fa01b3f5700 [_impl/db_impl.cc:775] [Post-GC] In-memory stats history size: 1051218 bytes, slice count: 102\n```\nOn-disk:\n```\n2019/07/12-21:48:53.862548 7f24943f5700 [_impl/db_impl.cc:702] ------- PERSISTING STATS -------\n2019/07/12-21:48:53.862553 7f24943f5700 [_impl/db_impl.cc:709] Reading 145 stats from statistics\n2019/07/12-21:48:53.862852 7f24943f5700 [_impl/db_impl.cc:737] Writing 145 stats with timestamp 1562993333 to persistent stats CF succeeded\n```\n```\n2019/07/12-21:48:51.861711 7f24943f5700 [_impl/db_impl.cc:702] ------- PERSISTING STATS -------\n2019/07/12-21:48:51.861729 7f24943f5700 [_impl/db_impl.cc:709] Reading 145 stats from statistics\n2019/07/12-21:48:51.861921 7f24943f5700 [_impl/db_impl.cc:732] Writing to persistent stats CF failed -- Result incomplete: Write stall\n...\n2019/07/12-21:48:51.873032 7f2494bf6700 [WARN] [lumn_family.cc:749] [default] Stopping writes because we have 2 immutable memtables (waiting for flush), max_write_buffer_number is set to 2\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5566\n\nDifferential Revision: D16258187\n\nPulled By: miasantreble\n\nfbshipit-source-id: 292497099b941418590ed4312411bee36e244dc5",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b0259e45e0be576f98e31020975a8b1cef8fb31f"
    },
    {
        "hash": "f064d74e4549964566e1f9a5bf988bf94acbd5e1",
        "author": "Yikun Jiang",
        "date": "2019-07-15T11:20:26-07:00",
        "message": "Cleanup the Arm64 CRC32 unused warning (#5565)\n\nSummary:\nWhen 'HAVE_ARM64_CRC' is set, the blew methods:\n\n- bool rocksdb::crc32c::isSSE42()\n- bool rocksdb::crc32c::isPCLMULQDQ()\n\nare defined but not used, the unused-function is raised\nwhen do rocksdb build.\n\nThis patch try to cleanup these warnings by add ifndef,\nif it build under the HAVE_ARM64_CRC, we will not define\n`isSSE42` and `isPCLMULQDQ`.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5565\n\nDifferential Revision: D16233654\n\nfbshipit-source-id: c32a9dda7465dbf65f9ccafef159124db92cdffd",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f064d74e4549964566e1f9a5bf988bf94acbd5e1"
    },
    {
        "hash": "f786b4a5b4f1f162a7e7452b33e2e5cf0d755b9b",
        "author": "Yanqin Jin",
        "date": "2019-07-09T16:27:22-07:00",
        "message": "Improve result print on atomic flush stress test failure (#5549)\n\nSummary:\nWhen atomic flush stress test fails, we print internal keys within the range with mismatched key/values for all column families.\n\nTest plan (on devserver)\nManually hack the code to randomly insert wrong data. Run the test.\n```\n$make clean && COMPILE_WITH_TSAN=1 make -j32 db_stress\n$./db_stress -test_atomic_flush=true -ops_per_thread=10000\n```\nCheck that proper error messages are printed, as follows:\n```\n2019/07/08-17:40:14  Starting verification\nVerification failed\nLatest Sequence Number: 190903\n[default] 000000000000050B => 56290000525350515E5F5C5D5A5B5859\n[3] 0000000000000533 => EE100000EAEBE8E9E6E7E4E5E2E3E0E1FEFFFCFDFAFBF8F9\nInternal keys in CF 'default', [000000000000050B, 0000000000000533] (max 8)\n  key 000000000000050B seq 139920 type 1\n  key 0000000000000533 seq 0 type 1\nInternal keys in CF '3', [000000000000050B, 0000000000000533] (max 8)\n  key 0000000000000533 seq 0 type 1\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5549\n\nDifferential Revision: D16158709\n\nPulled By: riversand963\n\nfbshipit-source-id: f07fa87763f87b3bd908da03c956709c6456bcab",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f786b4a5b4f1f162a7e7452b33e2e5cf0d755b9b"
    },
    {
        "hash": "872a261ffc2a440dfe9e60d99e421e42f5f2cf5e",
        "author": "sdong",
        "date": "2019-07-08T13:36:37-07:00",
        "message": "db_stress to print some internal keys after verification failure (#5543)\n\nSummary:\nPrint out some more information when db_tress fails with verification failures to help debugging problems.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5543\n\nTest Plan:\nManually ingest some failures and observe the outputs are like this:\n\nVerification failed\n[default] 0000000000199A5A => 7C3D000078797A7B74757677707172736C6D6E6F68696A6B\n[6] 000000000019C8BD => 65380000616063626D6C6F6E69686B6A\ninternal keys in default CF [0000000000199A5A, 000000000019C8BD] (max 8)\n  key 0000000000199A5A seq 179246 type 1\n  key 000000000019C8BD seq 163970 type 1\nLastest Sequence Number: 292234\n\nDifferential Revision: D16153717\n\nfbshipit-source-id: b33fa50a828c190cbf8249a37955432044f92daf",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/872a261ffc2a440dfe9e60d99e421e42f5f2cf5e"
    },
    {
        "hash": "8d34806972ad8867ede364feaa9d403e79b87d35",
        "author": "Zhongyi Xie",
        "date": "2019-07-07T21:32:50-07:00",
        "message": "setup wal_in_db_path_ for secondary instance (#5545)\n\nSummary:\nPR https://github.com/facebook/rocksdb/pull/5520 adds DBImpl:: wal_in_db_path_ and initializes it in DBImpl::Open, this PR fixes the valgrind error for secondary instance:\n```\n==236417== Conditional jump or move depends on uninitialised value(s)\n==236417==    at 0x62242A: rocksdb::DeleteDBFile(rocksdb::ImmutableDBOptions const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, bool) (file_util.cc:96)\n==236417==    by 0x512432: rocksdb::DBImpl::DeleteObsoleteFileImpl(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rocksdb::FileType, unsigned long) (db_impl_files.cc:261)\n==236417==    by 0x515A7A: rocksdb::DBImpl::PurgeObsoleteFiles(rocksdb::JobContext&, bool) (db_impl_files.cc:492)\n==236417==    by 0x499153: rocksdb::ColumnFamilyHandleImpl::~ColumnFamilyHandleImpl() (column_family.cc:75)\n==236417==    by 0x499880: rocksdb::ColumnFamilyHandleImpl::~ColumnFamilyHandleImpl() (column_family.cc:84)\n==236417==    by 0x4C9AF9: rocksdb::DB::DestroyColumnFamilyHandle(rocksdb::ColumnFamilyHandle*) (db_impl.cc:3105)\n==236417==    by 0x44E853: CloseSecondary (db_secondary_test.cc:53)\n==236417==    by 0x44E853: rocksdb::DBSecondaryTest::~DBSecondaryTest() (db_secondary_test.cc:31)\n==236417==    by 0x44EC77: ~DBSecondaryTest_PrimaryDropColumnFamily_Test (db_secondary_test.cc:443)\n==236417==    by 0x44EC77: rocksdb::DBSecondaryTest_PrimaryDropColumnFamily_Test::~DBSecondaryTest_PrimaryDropColumnFamily_Test() (db_secondary_test.cc:443)\n==236417==    by 0x83D1D7: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest-all.cc:3824)\n==236417==    by 0x83D1D7: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest-all.cc:3860)\n==236417==    by 0x8346DB: testing::TestInfo::Run() [clone .part.486] (gtest-all.cc:4078)\n==236417==    by 0x8348D4: Run (gtest-all.cc:4047)\n==236417==    by 0x8348D4: testing::TestCase::Run() [clone .part.487] (gtest-all.cc:4190)\n==236417==    by 0x834D14: Run (gtest-all.cc:6100)\n==236417==    by 0x834D14: testing::internal::UnitTestImpl::RunAllTests() (gtest-all.cc:6062)\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5545\n\nDifferential Revision: D16146224\n\nPulled By: miasantreble\n\nfbshipit-source-id: 184c90e451352951da4e955f054d4b1a1f29ea29",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_secondary.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8d34806972ad8867ede364feaa9d403e79b87d35"
    },
    {
        "hash": "2de61d91293eb2ec2185d2bbe2b2eebc55db94cc",
        "author": "sdong",
        "date": "2019-07-05T12:34:13-07:00",
        "message": "Assert get_context not null in BlockBasedTable::Get() (#5542)\n\nSummary:\nclang analyze fails after https://github.com/facebook/rocksdb/pull/5514 for this failure:\ntable/block_based/block_based_table_reader.cc:3450:16: warning: Called C++ object pointer is null\n          if (!get_context->SaveValue(\n               ^~~~~~~~~~~~~~~~~~~~~~~\n1 warning generated.\n\nThe reaon is that a branching is added earlier in the function on get_context is null or not, CLANG analyze thinks that it can be null and we make the function call withou the null checking.\nFix the issue by removing the branch and add an assert.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5542\n\nTest Plan: \"make all check\" passes and CLANG analyze failure goes away.\n\nDifferential Revision: D16133988\n\nfbshipit-source-id: d4627d03c4746254cc11926c523931086ccebcda",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2de61d91293eb2ec2185d2bbe2b2eebc55db94cc"
    },
    {
        "hash": "84c5c9aab15896e1c55c3febfa1fac5ed2009069",
        "author": "Sagar Vemuri",
        "date": "2019-07-03T19:06:46-07:00",
        "message": "Fix a bug in compaction reads causing checksum mismatches and asan errors (#5531)\n\nSummary:\nFixed a bug in compaction reads due to which incorrect number of bytes were being read/utilized. The bug was introduced in https://github.com/facebook/rocksdb/issues/5498 , resulting in \"Corruption: block checksum mismatch\" and \"heap-buffer-overflow\" asan errors in our tests.\n\nhttps://github.com/facebook/rocksdb/issues/5498 was introduced recently and is not in any released versions.\n\nASAN:\n```\n> ==2280939==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6250005e83da at pc 0x000000d57f62 bp 0x7f954f483770 sp 0x7f954f482f20\n> === How to use this, how to get the raw stack trace, and more: fburl.com/ASAN ===\n> READ of size 4 at 0x6250005e83da thread T4\n> SCARINESS: 27 (4-byte-read-heap-buffer-overflow-far-from-bounds)\n\n>      #0 tests+0xd57f61                           __asan_memcpy\n>      https://github.com/facebook/rocksdb/issues/1 rocksdb/src/util/coding.h:124            rocksdb::DecodeFixed32(char const*)\n>      https://github.com/facebook/rocksdb/issues/2 rocksdb/src/table/block_fetcher.cc:39    rocksdb::BlockFetcher::CheckBlockChecksum()\n>      https://github.com/facebook/rocksdb/issues/3 rocksdb/src/table/block_fetcher.cc:99    rocksdb::BlockFetcher::TryGetFromPrefetchBuffer()\n>      https://github.com/facebook/rocksdb/issues/4 rocksdb/src/table/block_fetcher.cc:209   rocksdb::BlockFetcher::ReadBlockContents()\n>      https://github.com/facebook/rocksdb/issues/5 rocksdb/src/table/block_based/block_based_table_reader.cc:93 rocksdb::(anonymous namespace)::ReadBlockFromFile(rocksdb::RandomAccessFileReader*, rocksdb::FilePrefetchBuffer*, rocksdb::Footer const&, rocksdb::ReadOptions const&, rocksdb::BlockHandle const&, std::unique_ptr<...>*, rocksdb::ImmutableCFOptions const&, bool, bool, rocksdb::UncompressionDict\n const&, rocksdb::PersistentCacheOptions const&, unsigned long, unsigned long, rocksdb::MemoryAllocator*, bool)\n>      https://github.com/facebook/rocksdb/issues/6 rocksdb/src/table/block_based/block_based_table_reader.cc:2331 rocksdb::BlockBasedTable::RetrieveBlock(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&, rocksdb::BlockHandle const&, rocksdb::UncompressionDict const&, rocksdb::CachableEntry<...>*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool) const\n>      https://github.com/facebook/rocksdb/issues/7 rocksdb/src/table/block_based/block_based_table_reader.cc:2090 rocksdb::DataBlockIter* rocksdb::BlockBasedTable::NewDataBlockIterator<...>(rocksdb::ReadOptions const&, rocksdb::BlockHandle const&, rocksdb::DataBlockIter*, rocksdb::BlockType, bool, bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::Status, rocksdb::FilePrefetchBuffe\nr*, bool) const\n>      https://github.com/facebook/rocksdb/issues/8 rocksdb/src/table/block_based/block_based_table_reader.cc:2720 rocksdb::BlockBasedTableIterator<...>::InitDataBlock()\n>      https://github.com/facebook/rocksdb/issues/9 rocksdb/src/table/block_based/block_based_table_reader.cc:2607 rocksdb::BlockBasedTableIterator<...>::SeekToFirst()\n>     https://github.com/facebook/rocksdb/issues/10 rocksdb/src/table/iterator_wrapper.h:83  rocksdb::IteratorWrapperBase<...>::SeekToFirst()\n>     https://github.com/facebook/rocksdb/issues/11 rocksdb/src/table/merging_iterator.cc:100 rocksdb::MergingIterator::SeekToFirst()\n>     https://github.com/facebook/rocksdb/issues/12 rocksdb/compaction/compaction_job.cc:877 rocksdb::CompactionJob::ProcessKeyValueCompaction(rocksdb::CompactionJob::SubcompactionState*)\n>     https://github.com/facebook/rocksdb/issues/13 rocksdb/compaction/compaction_job.cc:590 rocksdb::CompactionJob::Run()\n>     https://github.com/facebook/rocksdb/issues/14 rocksdb/db_impl/db_impl_compaction_flush.cc:2689 rocksdb::DBImpl::BackgroundCompaction(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::DBImpl::PrepickedCompaction*, rocksdb::Env::Priority)\n>     https://github.com/facebook/rocksdb/issues/15 rocksdb/db_impl/db_impl_compaction_flush.cc:2248 rocksdb::DBImpl::BackgroundCallCompaction(rocksdb::DBImpl::PrepickedCompaction*, rocksdb::Env::Priority)\n>     https://github.com/facebook/rocksdb/issues/16 rocksdb/db_impl/db_impl_compaction_flush.cc:2024 rocksdb::DBImpl::BGWorkCompaction(void*)\n>     https://github.com/facebook/rocksdb/issues/23 rocksdb/src/util/threadpool_imp.cc:266   rocksdb::ThreadPoolImpl::Impl::BGThread(unsigned long)\n>     https://github.com/facebook/rocksdb/issues/24 rocksdb/src/util/threadpool_imp.cc:307   rocksdb::ThreadPoolImpl::Impl::BGThreadWrapper(void*)\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5531\n\nTest Plan: Verified that this fixes the fb-internal Logdevice test which caught the issue.\n\nDifferential Revision: D16109702\n\nPulled By: sagar0\n\nfbshipit-source-id: 1fc08549cf7b553e338a133ae11eb9f4d5011914",
        "modified_files_count": 1,
        "modified_files": [
            "util/file_reader_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/84c5c9aab15896e1c55c3febfa1fac5ed2009069"
    },
    {
        "hash": "09ea5d8944700be9ce00fdd66f29f34573f33e76",
        "author": "Andrew Kryczka",
        "date": "2019-07-02T13:02:12-07:00",
        "message": "Fix clang build with jemalloc (#5522)\n\nSummary:\nFixes the below build failure for clang compiler using glibc and jemalloc.\n\nPlatform: linux x86-64\nCompiler: clang version 6.0.0-1ubuntu2\nBuild failure:\n```\n$ CXX=clang++ CC=clang USE_CLANG=1 WITH_JEMALLOC_FLAG=1 JEMALLOC=1 EXTRA_LDFLAGS=\"-L/home/andrew/jemalloc/lib/\" EXTRA_CXXFLAGS=\"-I/home/andrew/jemalloc/include/\" make check -j12\n...\n  CC       memory/jemalloc_nodump_allocator.o\nIn file included from memory/jemalloc_nodump_allocator.cc:6:\nIn file included from ./memory/jemalloc_nodump_allocator.h:11:\nIn file included from ./port/jemalloc_helper.h:16:\n/usr/include/clang/6.0.0/include/mm_malloc.h:39:16: error: 'posix_memalign' is missing exception specification 'throw()'\nextern \"C\" int posix_memalign(void **__memptr, size_t __alignment, size_t __size);\n               ^\n/home/andrew/jemalloc/include/jemalloc/jemalloc.h:388:26: note: expanded from macro 'posix_memalign'\n#  define posix_memalign je_posix_memalign\n                         ^\n/home/andrew/jemalloc/include/jemalloc/jemalloc.h:77:29: note: expanded from macro 'je_posix_memalign'\n#  define je_posix_memalign posix_memalign\n                            ^\n/home/andrew/jemalloc/include/jemalloc/jemalloc.h:232:38: note: previous declaration is here\nJEMALLOC_EXPORT int JEMALLOC_NOTHROW    je_posix_memalign(void **memptr,\n                                        ^\n/home/andrew/jemalloc/include/jemalloc/jemalloc.h:77:29: note: expanded from macro 'je_posix_memalign'\n#  define je_posix_memalign posix_memalign\n                            ^\n1 error generated.\nMakefile:1972: recipe for target 'memory/jemalloc_nodump_allocator.o' failed\nmake: *** [memory/jemalloc_nodump_allocator.o] Error 1\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5522\n\nDifferential Revision: D16069869\n\nPulled By: miasantreble\n\nfbshipit-source-id: c489bbc993adee194b9a550134c6237a264bc443",
        "modified_files_count": 1,
        "modified_files": [
            "port/jemalloc_helper.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/09ea5d8944700be9ce00fdd66f29f34573f33e76"
    },
    {
        "hash": "cfdf2116d38cd39763528ce2f3a01e661700c601",
        "author": "Zhongyi Xie",
        "date": "2019-07-01T16:37:08-07:00",
        "message": "Exclude StatsHistoryTest.ForceManualFlushStatsCF test from lite mode (#5529)\n\nSummary:\nRecent commit 3886dddc3b44bf5061c0f93eab578c51e8bad7bd introduced a new test which is not compatible with lite mode and breaks contrun test:\n```\n[ RUN      ] StatsHistoryTest.ForceManualFlushStatsCF\nmonitoring/stats_history_test.cc:642: Failure\nExpected: (cfd_stats->GetLogNumber()) < (cfd_test->GetLogNumber()), actual: 15 vs 15\n```\nThis PR excludes the test from lite mode to appease the failing test\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5529\n\nDifferential Revision: D16080892\n\nPulled By: miasantreble\n\nfbshipit-source-id: 2f8a22758f71250cd9f204046404226ddc13b028",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/stats_history_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cfdf2116d38cd39763528ce2f3a01e661700c601"
    },
    {
        "hash": "3e6c18538130a4fafb491a5a45dc614958cfe50b",
        "author": "Eli Pozniansky",
        "date": "2019-07-01T14:57:28-07:00",
        "message": "Formatting fixes in db_bench_tool (#5525)\n\nSummary:\nFormatting fixes in db_bench_tool that were accidentally omitted\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5525\n\nTest Plan: Unit tests\n\nDifferential Revision: D16078516\n\nPulled By: elipoz\n\nfbshipit-source-id: bf8df0e3f08092a91794ebf285396d9b8a335bb9",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3e6c18538130a4fafb491a5a45dc614958cfe50b"
    },
    {
        "hash": "c36067575037573a1ee3980bf8c27a93b4cf0694",
        "author": "Yanqin Jin",
        "date": "2019-07-01T11:49:50-07:00",
        "message": "Add secondary instance to stress test (#5479)\n\nSummary:\nThis PR allows users to run stress tests on secondary instance.\n\nTest plan (on devserver)\n```\n./db_stress -ops_per_thread=100000 -enable_secondary=true -threads=32 -secondary_catch_up_one_in=10000 -clear_column_family_one_in=1000 -reopen=100\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5479\n\nDifferential Revision: D16074325\n\nPulled By: riversand963\n\nfbshipit-source-id: c0ed959e7b6c7cda3efd0b3070ab379de3b29f1c",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c36067575037573a1ee3980bf8c27a93b4cf0694"
    },
    {
        "hash": "9dbcda9e3b9b59b76b247e24e9ebc4b9263197ff",
        "author": "Mike Kolupaev",
        "date": "2019-06-25T23:02:01-07:00",
        "message": "Fix uninitialized prev_block_offset_ in BlockBasedTableReader (#5507)\n\nSummary:\nFound by valgrind_check.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5507\n\nDifferential Revision: D16002612\n\nPulled By: miasantreble\n\nfbshipit-source-id: 13c11c183190e0a0571844635457d434da3ac59a",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9dbcda9e3b9b59b76b247e24e9ebc4b9263197ff"
    },
    {
        "hash": "e731f4402258554812c46334dc0d9483e6cc769b",
        "author": "Sergei Petrunia",
        "date": "2019-06-24T16:12:39-07:00",
        "message": "C file should not include <cinttypes>, it is a C++ header. (#5499)\n\nSummary:\nInclude <inttypes.h> instead.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5499\n\nDifferential Revision: D15966937\n\nPulled By: miasantreble\n\nfbshipit-source-id: 2156c4329b91d26d447de94f1231264d52786350",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c_ppc.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e731f4402258554812c46334dc0d9483e6cc769b"
    },
    {
        "hash": "22028aa9ab27cf860b74d12e006f82ff551caee0",
        "author": "Vijay Nadimpalli",
        "date": "2019-06-21T21:31:49-07:00",
        "message": "Compaction Reads should read no more than compaction_readahead_size bytes, when set! (#5498)\n\nSummary:\nAs a result of https://github.com/facebook/rocksdb/issues/5431 the compaction_readahead_size given by a user was not used exactly, the reason being the code behind readahead for user-read and compaction-read was unified in the above PR and the behavior for user-read is to read readahead_size+n bytes (see FilePrefetchBuffer::TryReadFromCache method). Before the unification the ReadaheadRandomAccessFileReader used compaction_readahead_size as it is.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5498\n\nTest Plan:\nRan strace command : strace -e pread64 -f -T -t ./db_compaction_test --gtest_filter=DBCompactionTest.PartialManualCompaction\n\nIn the test the compaction_readahead_size was configured to 2MB and verified the pread syscall did indeed request 2MB. Before the change it was requesting more than 2MB.\n\nStrace Output:\nstrace: Process 3798982 attached\nNote: Google Test filter = DBCompactionTest.PartialManualCompaction\n[==========] Running 1 test from 1 test case.\n[----------] Global test environment set-up.\n[----------] 1 test from DBCompactionTest\n[ RUN      ] DBCompactionTest.PartialManualCompaction\nstrace: Process 3798983 attached\nstrace: Process 3798984 attached\nstrace: Process 3798985 attached\nstrace: Process 3798986 attached\nstrace: Process 3798987 attached\nstrace: Process 3798992 attached\n[pid 3798987] 12:07:05 +++ exited with 0 +++\nstrace: Process 3798993 attached\n[pid 3798993] 12:07:05 +++ exited with 0 +++\nstrace: Process 3798994 attached\nstrace: Process 3799008 attached\nstrace: Process 3799009 attached\n[pid 3799008] 12:07:05 +++ exited with 0 +++\nstrace: Process 3799010 attached\n[pid 3799009] 12:07:05 +++ exited with 0 +++\nstrace: Process 3799011 attached\n[pid 3799010] 12:07:05 +++ exited with 0 +++\n[pid 3799011] 12:07:05 +++ exited with 0 +++\nstrace: Process 3799012 attached\n[pid 3799012] 12:07:05 +++ exited with 0 +++\nstrace: Process 3799013 attached\nstrace: Process 3799014 attached\n[pid 3799013] 12:07:05 +++ exited with 0 +++\nstrace: Process 3799015 attached\n[pid 3799014] 12:07:05 +++ exited with 0 +++\n[pid 3799015] 12:07:05 +++ exited with 0 +++\nstrace: Process 3799016 attached\n[pid 3799016] 12:07:05 +++ exited with 0 +++\nstrace: Process 3799017 attached\n[pid 3799017] 12:07:05 +++ exited with 0 +++\nstrace: Process 3799019 attached\n[pid 3799019] 12:07:05 +++ exited with 0 +++\nstrace: Process 3799020 attached\nstrace: Process 3799021 attached\n[pid 3799020] 12:07:05 +++ exited with 0 +++\n[pid 3799021] 12:07:05 +++ exited with 0 +++\nstrace: Process 3799022 attached\n[pid 3799022] 12:07:05 +++ exited with 0 +++\nstrace: Process 3799023 attached\n[pid 3799023] 12:07:05 +++ exited with 0 +++\nstrace: Process 3799047 attached\nstrace: Process 3799048 attached\n[pid 3799047] 12:07:06 +++ exited with 0 +++\n[pid 3799048] 12:07:06 +++ exited with 0 +++\n[pid 3798994] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799052 attached\n[pid 3799052] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799054 attached\nstrace: Process 3799069 attached\nstrace: Process 3799070 attached\n[pid 3799069] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799071 attached\n[pid 3799070] 12:07:06 +++ exited with 0 +++\n[pid 3799071] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799072 attached\nstrace: Process 3799073 attached\n[pid 3799072] 12:07:06 +++ exited with 0 +++\n[pid 3799073] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799074 attached\n[pid 3799074] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799075 attached\n[pid 3799075] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799076 attached\n[pid 3799076] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799077 attached\n[pid 3799077] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799078 attached\n[pid 3799078] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799079 attached\n[pid 3799079] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799080 attached\n[pid 3799080] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799081 attached\n[pid 3799081] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799082 attached\n[pid 3799082] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799083 attached\n[pid 3799083] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799086 attached\nstrace: Process 3799087 attached\n[pid 3798984] 12:07:06 pread64(9, \"\\1\\203W!\\241QE\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"..., 53, 11177) = 53 <0.000121>\n[pid 3798984] 12:07:06 pread64(9, \"\\0\\22\\4rocksdb.properties\\353Q\\223\\5\\0\\0\\0\\0\\1\\0\\0\"..., 38, 11139) = 38 <0.000106>\n[pid 3798984] 12:07:06 pread64(9, \"\\0$\\4rocksdb.block.based.table.ind\"..., 664, 10475) = 664 <0.000081>\n[pid 3798984] 12:07:06 pread64(9, \"\\0\\v\\3foo\\2\\7\\0\\0\\0\\0\\0\\0\\0\\270 \\0\\v\\4foo\\2\\3\\0\\0\\0\\0\\0\\0\\275\"..., 74, 10401) = 74 <0.000138>\n[pid 3798984] 12:07:06 pread64(11, \"\\1\\203W!\\241QE\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"..., 53, 11177) = 53 <0.000097>\n[pid 3798984] 12:07:06 pread64(11, \"\\0\\22\\4rocksdb.properties\\353Q\\223\\5\\0\\0\\0\\0\\1\\0\\0\"..., 38, 11139) = 38 <0.000086>\n[pid 3798984] 12:07:06 pread64(11, \"\\0$\\4rocksdb.block.based.table.ind\"..., 664, 10475) = 664 <0.000064>\n[pid 3798984] 12:07:06 pread64(11, \"\\0\\v\\3foo\\2\\21\\0\\0\\0\\0\\0\\0\\0\\270 \\0\\v\\4foo\\2\\r\\0\\0\\0\\0\\0\\0\\275\"..., 74, 10401) = 74 <0.000064>\n[pid 3798984] 12:07:06 pread64(12, \"\\1\\203W!\\241QE\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"..., 53, 11177) = 53 <0.000080>\n[pid 3798984] 12:07:06 pread64(12, \"\\0\\22\\4rocksdb.properties\\353Q\\223\\5\\0\\0\\0\\0\\1\\0\\0\"..., 38, 11139) = 38 <0.000090>\n[pid 3798984] 12:07:06 pread64(12, \"\\0$\\4rocksdb.block.based.table.ind\"..., 664, 10475) = 664 <0.000059>\n[pid 3798984] 12:07:06 pread64(12, \"\\0\\v\\3foo\\2\\33\\0\\0\\0\\0\\0\\0\\0\\270 \\0\\v\\4foo\\2\\27\\0\\0\\0\\0\\0\\0\\275\"..., 74, 10401) = 74 <0.000065>\n[pid 3798984] 12:07:06 pread64(13, \"\\1\\203W!\\241QE\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"..., 53, 11177) = 53 <0.000070>\n[pid 3798984] 12:07:06 pread64(13, \"\\0\\22\\4rocksdb.properties\\353Q\\223\\5\\0\\0\\0\\0\\1\\0\\0\"..., 38, 11139) = 38 <0.000059>\n[pid 3798984] 12:07:06 pread64(13, \"\\0$\\4rocksdb.block.based.table.ind\"..., 664, 10475) = 664 <0.000061>\n[pid 3798984] 12:07:06 pread64(13, \"\\0\\v\\3foo\\2%\\0\\0\\0\\0\\0\\0\\0\\270 \\0\\v\\4foo\\2!\\0\\0\\0\\0\\0\\0\\275\"..., 74, 10401) = 74 <0.000065>\n[pid 3798984] 12:07:06 pread64(14, \"\\1\\203W!\\241QE\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"..., 53, 11177) = 53 <0.000118>\n[pid 3798984] 12:07:06 pread64(14, \"\\0\\22\\4rocksdb.properties\\353Q\\223\\5\\0\\0\\0\\0\\1\\0\\0\"..., 38, 11139) = 38 <0.000093>\n[pid 3798984] 12:07:06 pread64(14, \"\\0$\\4rocksdb.block.based.table.ind\"..., 664, 10475) = 664 <0.000050>\n[pid 3798984] 12:07:06 pread64(14, \"\\0\\v\\3foo\\2/\\0\\0\\0\\0\\0\\0\\0\\270 \\0\\v\\4foo\\2+\\0\\0\\0\\0\\0\\0\\275\"..., 74, 10401) = 74 <0.000082>\n[pid 3798984] 12:07:06 pread64(15, \"\\1\\203W!\\241QE\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"..., 53, 11177) = 53 <0.000080>\n[pid 3798984] 12:07:06 pread64(15, \"\\0\\22\\4rocksdb.properties\\353Q\\223\\5\\0\\0\\0\\0\\1\\0\\0\"..., 38, 11139) = 38 <0.000086>\n[pid 3798984] 12:07:06 pread64(15, \"\\0$\\4rocksdb.block.based.table.ind\"..., 664, 10475) = 664 <0.000091>\n[pid 3798984] 12:07:06 pread64(15, \"\\0\\v\\3foo\\0029\\0\\0\\0\\0\\0\\0\\0\\270 \\0\\v\\4foo\\0025\\0\\0\\0\\0\\0\\0\\275\"..., 74, 10401) = 74 <0.000174>\n[pid 3798984] 12:07:06 pread64(16, \"\\1\\203W!\\241QE\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"..., 53, 11177) = 53 <0.000080>\n[pid 3798984] 12:07:06 pread64(16, \"\\0\\22\\4rocksdb.properties\\353Q\\223\\5\\0\\0\\0\\0\\1\\0\\0\"..., 38, 11139) = 38 <0.000093>\n[pid 3798984] 12:07:06 pread64(16, \"\\0$\\4rocksdb.block.based.table.ind\"..., 664, 10475) = 664 <0.000194>\n[pid 3798984] 12:07:06 pread64(16, \"\\0\\v\\3foo\\2C\\0\\0\\0\\0\\0\\0\\0\\270 \\0\\v\\4foo\\2?\\0\\0\\0\\0\\0\\0\\275\"..., 74, 10401) = 74 <0.000086>\n[pid 3798984] 12:07:06 pread64(17, \"\\1\\203W!\\241QE\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"..., 53, 11177) = 53 <0.000079>\n[pid 3798984] 12:07:06 pread64(17, \"\\0\\22\\4rocksdb.properties\\353Q\\223\\5\\0\\0\\0\\0\\1\\0\\0\"..., 38, 11139) = 38 <0.000047>\n[pid 3798984] 12:07:06 pread64(17, \"\\0$\\4rocksdb.block.based.table.ind\"..., 664, 10475) = 664 <0.000045>\n[pid 3798984] 12:07:06 pread64(17, \"\\0\\v\\3foo\\2M\\0\\0\\0\\0\\0\\0\\0\\270 \\0\\v\\4foo\\2I\\0\\0\\0\\0\\0\\0\\275\"..., 74, 10401) = 74 <0.000107>\n[pid 3798983] 12:07:06 pread64(17, \"\\0\\v\\200\\10foo\\2P\\0\\0\\0\\0\\0\\0)U?MSg_)j(roFn($e\"..., 2097152, 0) = 11230 <0.000091>\n[pid 3798983] 12:07:06 pread64(17, \"\", 2085922, 11230) = 0 <0.000073>\n[pid 3798983] 12:07:06 pread64(16, \"\\0\\v\\200\\10foo\\2F\\0\\0\\0\\0\\0\\0k[h3%.OPH_^:\\\\S7T&\"..., 2097152, 0) = 11230 <0.000083>\n[pid 3798983] 12:07:06 pread64(16, \"\", 2085922, 11230) = 0 <0.000078>\n[pid 3798983] 12:07:06 pread64(15, \"\\0\\v\\200\\10foo\\2<\\0\\0\\0\\0\\0\\0+qToi_c{*S+4:N(:\"..., 2097152, 0) = 11230 <0.000095>\n[pid 3798983] 12:07:06 pread64(15, \"\", 2085922, 11230) = 0 <0.000067>\n[pid 3798983] 12:07:06 pread64(14, \"\\0\\v\\200\\10foo\\0022\\0\\0\\0\\0\\0\\0%hw%OMa\\\"}9I609Q!B\"..., 2097152, 0) = 11230 <0.000111>\n[pid 3798983] 12:07:06 pread64(14, \"\", 2085922, 11230) = 0 <0.000093>\n[pid 3798983] 12:07:06 pread64(13, \"\\0\\v\\200\\10foo\\2(\\0\\0\\0\\0\\0\\0p}Y&mu^DcaSGb2&nP\"..., 2097152, 0) = 11230 <0.000128>\n[pid 3798983] 12:07:06 pread64(13, \"\", 2085922, 11230) = 0 <0.000076>\n[pid 3798983] 12:07:06 pread64(12, \"\\0\\v\\200\\10foo\\2\\36\\0\\0\\0\\0\\0\\0YIyW#]oSs^6VHfB<`\"..., 2097152, 0) = 11230 <0.000092>\n[pid 3798983] 12:07:06 pread64(12, \"\", 2085922, 11230) = 0 <0.000073>\n[pid 3798983] 12:07:06 pread64(11, \"\\0\\v\\200\\10foo\\2\\24\\0\\0\\0\\0\\0\\0mfF8Jel/*Zf :-#s(\"..., 2097152, 0) = 11230 <0.000088>\n[pid 3798983] 12:07:06 pread64(11, \"\", 2085922, 11230) = 0 <0.000067>\n[pid 3798983] 12:07:06 pread64(9, \"\\0\\v\\200\\10foo\\2\\n\\0\\0\\0\\0\\0\\0\\\\X'cjiHX)D,RSj1X!\"..., 2097152, 0) = 11230 <0.000115>\n[pid 3798983] 12:07:06 pread64(9, \"\", 2085922, 11230) = 0 <0.000073>\n[pid 3798983] 12:07:06 pread64(8, \"\\1\\315\\5 \\36\\30\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"..., 53, 754) = 53 <0.000098>\n[pid 3798983] 12:07:06 pread64(8, \"\\0\\22\\3rocksdb.properties;\\215\\5\\0\\0\\0\\0\\1\\0\\0\\0\"..., 37, 717) = 37 <0.000064>\n[pid 3798983] 12:07:06 pread64(8, \"\\0$\\4rocksdb.block.based.table.ind\"..., 658, 59) = 658 <0.000074>\n[pid 3798983] 12:07:06 pread64(8, \"\\0\\v\\2foo\\1\\0\\0\\0\\0\\0\\0\\0\\0\\31\\0\\0\\0\\0\\1\\0\\0\\0\\0\\212\\216\\222P\", 29, 30) = 29 <0.000064>\n[pid 3799086] 12:07:06 +++ exited with 0 +++\n[pid 3799087] 12:07:06 +++ exited with 0 +++\n[pid 3799054] 12:07:06 +++ exited with 0 +++\nstrace: Process 3799104 attached\n[pid 3799104] 12:07:06 +++ exited with 0 +++\n[       OK ] DBCompactionTest.PartialManualCompaction (757 ms)\n[----------] 1 test from DBCompactionTest (758 ms total)\n\n[----------] Global test environment tear-down\n[==========] 1 test from 1 test case ran. (759 ms total)\n[  PASSED  ] 1 test.\n[pid 3798983] 12:07:06 +++ exited with 0 +++\n[pid 3798984] 12:07:06 +++ exited with 0 +++\n[pid 3798992] 12:07:06 +++ exited with 0 +++\n[pid 3798986] 12:07:06 +++ exited with 0 +++\n[pid 3798982] 12:07:06 +++ exited with 0 +++\n[pid 3798985] 12:07:06 +++ exited with 0 +++\n12:07:06 +++ exited with 0 +++\n\nDifferential Revision: D15948422\n\nPulled By: vjnadimpalli\n\nfbshipit-source-id: 9b189d1e8675d290c7784e4b33e5d3b5761d2ac8",
        "modified_files_count": 1,
        "modified_files": [
            "util/file_reader_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/22028aa9ab27cf860b74d12e006f82ff551caee0"
    },
    {
        "hash": "1bfeffab2dbff7eaf74a61cf52d57cf1404ef159",
        "author": "Yanqin Jin",
        "date": "2019-06-20T22:16:58-07:00",
        "message": "Stop printing after verification fails (#5493)\n\nSummary:\nStop verification and printing once verification fails.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5493\n\nDifferential Revision: D15928992\n\nPulled By: riversand963\n\nfbshipit-source-id: 699feac034a217d57280aa3fb50f5aba06adf317",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1bfeffab2dbff7eaf74a61cf52d57cf1404ef159"
    },
    {
        "hash": "68614a9608f5d70a247cdcc4621a150141cfe72f",
        "author": "Sagar Vemuri",
        "date": "2019-06-19T16:46:20-07:00",
        "message": "Fix AlignedBuffer's usage in Encryption Env (#5396)\n\nSummary:\nThe usage of `AlignedBuffer` in env_encryption.cc writes and reads to/from the AlignedBuffer's internal buffer directly without going through AlignedBuffer's APIs (like `Append` and `Read`), causing encapsulation to break in some cases. The writes are especially problematic as after the data is written to the buffer (directly using either memmove or memcpy), the size of the buffer is not updated ... causing the AlignedBuffer to lose track of the encapsulated buffer's current size.\nFixed this by updating the buffer size after every write.\n\nTodo for later:\nAdd an overloaded method to AlignedBuffer to support a memmove in addition to a memcopy. Encryption env does a memmove, and hence I couldn't switch to using `AlignedBuffer.Append()`.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5396\n\nTest Plan: `make check`\n\nDifferential Revision: D15764756\n\nPulled By: sagar0\n\nfbshipit-source-id: 2e24b52bd3b4b5056c5c1da157f91ddf89370183",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_encryption.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/68614a9608f5d70a247cdcc4621a150141cfe72f"
    },
    {
        "hash": "92f631da33e88ce63f1546c3a4865cc4dc1d4e13",
        "author": "Huisheng Liu",
        "date": "2019-06-18T16:42:26-07:00",
        "message": "replace sprintf with its safe version snprintf (#5475)\n\nSummary:\nsprintf is unsafe and has buffer overrun risk. Replace it with the safer version snprintf where buffer size is supplied to avoid overrun.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5475\n\nDifferential Revision: D15879481\n\nPulled By: sagar0\n\nfbshipit-source-id: 7ae1958ffc9727fa50261dfbb98ddd74e70a72d8",
        "modified_files_count": 1,
        "modified_files": [
            "tools/trace_analyzer_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/92f631da33e88ce63f1546c3a4865cc4dc1d4e13"
    },
    {
        "hash": "d0c6aea192f546fc049c90d2782636603c1a80f0",
        "author": "Levi Tamasi",
        "date": "2019-06-18T15:02:09-07:00",
        "message": "Revert to respecting only the read_tier read option for index blocks (#5481)\n\nSummary:\nPR https://github.com/facebook/rocksdb/issues/5298 subtly changed how read options are applied to the index block\nduring a Get, MultiGet, or iteration. Earlier, only the read_tier option\napplied to the index block read; since PR https://github.com/facebook/rocksdb/issues/5298, fill_cache and\nverify_checksums also have an effect. This patch restores the earlier\nbehavior to prevent surprise memory increases for clients due to the\nindex block not being cached.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5481\n\nTest Plan: make check\n\nDifferential Revision: D15883082\n\nPulled By: ltamasi\n\nfbshipit-source-id: 9a065ec3a6db5a365cf6dd5e95190a20c5756356",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d0c6aea192f546fc049c90d2782636603c1a80f0"
    },
    {
        "hash": "220870523cdfe100fadd29ec98cabd83a8112f82",
        "author": "Andrew Kryczka",
        "date": "2019-06-18T14:55:59-07:00",
        "message": "Fix compilation with USE_HDFS (#5444)\n\nSummary:\nThe changes in https://github.com/facebook/rocksdb/commit/8272a6de57ed701fb25bb660e074cab703ed3fe7 were untested with `USE_HDFS=1`. There were a couple compiler errors. This PR fixes them.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5444\n\nTest Plan:\n```\n$ EXTRA_LDFLAGS=\"-L/tmp/hadoop-3.1.2/lib/native/\" EXTRA_CXXFLAGS=\"-I/tmp/hadoop-3.1.2/include\" USE_HDFS=1 make -j12 check\n```\n\nDifferential Revision: D15885009\n\nfbshipit-source-id: 2a0a63739e0b9a2819b461ad63ce1292c4833fe2",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_hdfs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/220870523cdfe100fadd29ec98cabd83a8112f82"
    },
    {
        "hash": "d43b4cd570dccf234d2a43f6acec2d5160971cc3",
        "author": "haoyuhuang",
        "date": "2019-06-17T11:08:21-07:00",
        "message": "Integrate block cache tracing into db_bench (#5459)\n\nSummary:\nThis PR integrates the block cache tracing into db_bench. It adds three command line arguments.\n-block_cache_trace_file (Block cache trace file path.) type: string default: \"\"\n-block_cache_trace_max_trace_file_size_in_bytes (The maximum block cache\ntrace file size in bytes. Block cache accesses will not be logged if the\ntrace file size exceeds this threshold. Default is 64 GB.) type: int64\ndefault: 68719476736\n-block_cache_trace_sampling_frequency (Block cache trace sampling\nfrequency, termed s. It uses spatial downsampling and samples accesses to\none out of s blocks.) type: int32 default: 1\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5459\n\nDifferential Revision: D15832031\n\nPulled By: HaoyuHuang\n\nfbshipit-source-id: 0ecf2f2686557251fe741a2769b21170777efa3d",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d43b4cd570dccf234d2a43f6acec2d5160971cc3"
    },
    {
        "hash": "b47cfec5d01fd8c848b7539e5b43884257dba613",
        "author": "Huisheng Liu",
        "date": "2019-06-14T11:28:13-07:00",
        "message": "fix compilation error on MSVC (#5458)\n\nSummary:\n\"__attribute__((__weak__))\" was introduced in port\\jemalloc_helper.h. It's not supported by Microsoft VS 2015, resulting in compile error. This fix adds a #if branch to work around the compile issue.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5458\n\nDifferential Revision: D15827285\n\nfbshipit-source-id: 8c5f7ad31de1ac677bd96f16c4450767de834beb",
        "modified_files_count": 1,
        "modified_files": [
            "port/jemalloc_helper.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b47cfec5d01fd8c848b7539e5b43884257dba613"
    },
    {
        "hash": "89695bfbaafd6fd589ad37e31ab27d9cf25e9930",
        "author": "haoyuhuang",
        "date": "2019-06-14T09:17:09-07:00",
        "message": "Remove unused variable (#5457)\n\nSummary:\nThis PR removes the unused variable that causes CLANG build to fail.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5457\n\nDifferential Revision: D15825027\n\nPulled By: HaoyuHuang\n\nfbshipit-source-id: 72c847c39ca310560efcbc5938cffa6f31164068",
        "modified_files_count": 1,
        "modified_files": [
            "trace_replay/block_cache_tracer_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/89695bfbaafd6fd589ad37e31ab27d9cf25e9930"
    },
    {
        "hash": "a3b8c76d8e3f2a849d354280e9baaac6728a8b4d",
        "author": "Levi Tamasi",
        "date": "2019-06-13T14:43:13-07:00",
        "message": "Add missing check before calling PurgeObsoleteFiles in EnableFileDeletions (#5448)\n\nSummary:\nCalling PurgeObsoleteFiles with a JobContext for which HaveSomethingToDelete\nis false is a precondition violation. This would trigger an assertion in debug builds;\nhowever, in release builds with assertions disabled, this can result in the\npending_purge_obsolete_files_ counter in DBImpl underflowing, which in turn can lead\nto the process hanging during database close.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5448\n\nDifferential Revision: D15792569\n\nPulled By: ltamasi\n\nfbshipit-source-id: 82d92c9b4f6a9efcdc69dbb3d5a52a1ae2dd2472",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_filesnapshot.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a3b8c76d8e3f2a849d354280e9baaac6728a8b4d"
    },
    {
        "hash": "2c9df9f9e5c757c8f368d0860e2da8adb63849a3",
        "author": "Andrew Kryczka",
        "date": "2019-06-13T13:56:10-07:00",
        "message": "Dynamic test whether sync_file_range returns ENOSYS (#5416)\n\nSummary:\n`sync_file_range` returns `ENOSYS` on Windows Subsystem for Linux even\nwhen using a supposedly supported filesystem like ext4. To handle this\ncase we can do a dynamic check that a no-op `sync_file_range`\ninvocation, which is accomplished by passing zero for the `flags`\nargument, succeeds.\n\nAlso I rearranged the function and comments to hopefully make it more\neasily understandable.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5416\n\nDifferential Revision: D15807061\n\nfbshipit-source-id: d31d94e1f228b7850ea500e6199f8b5daf8cfbd3",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2c9df9f9e5c757c8f368d0860e2da8adb63849a3"
    },
    {
        "hash": "60f3ec2ca57796203c880d494c872f0086768ce2",
        "author": "Maysam Yabandeh",
        "date": "2019-06-12T15:06:22-07:00",
        "message": "Fix appveyor compliant about passing const to thread (#5447)\n\nSummary:\nCLANG would complain if we pass const to lambda function and appveyor complains if we don't (https://github.com/facebook/rocksdb/pull/5443). The patch fixes that by using the default capture mode.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5447\n\nDifferential Revision: D15788722\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 47e7f49264afe31fdafe42cb8bf93da126abfca9",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/60f3ec2ca57796203c880d494c872f0086768ce2"
    },
    {
        "hash": "f43edff9ac78f8f08edc15092f9e08d4bea10282",
        "author": "Maysam Yabandeh",
        "date": "2019-06-12T10:37:40-07:00",
        "message": "Disable kPipelinedWrite in MultiThreaded (#5442)\n\nSummary:\nTSAN tests report a race condition. We temporarily exclude kPipelinedWrite from MultiThreaded until the race condition is fixed.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5442\n\nDifferential Revision: D15782349\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 42b4f9b3fa9137f0675e13ad132c0a06800c1bdd",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f43edff9ac78f8f08edc15092f9e08d4bea10282"
    },
    {
        "hash": "4a285d0dd318985b99a88318c96514fd738aa1e6",
        "author": "Maysam Yabandeh",
        "date": "2019-06-12T09:45:57-07:00",
        "message": "Remove passing const variable to thread (#5443)\n\nSummary:\nCLANG complains that passing const to thread is not necessary. The patch removes it form PreparedHeap::Concurrent test.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5443\n\nDifferential Revision: D15781598\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 3aceb05d96182fa4726d6d37eed45fd3aac4c016",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4a285d0dd318985b99a88318c96514fd738aa1e6"
    },
    {
        "hash": "7177dc46a13332c96332d524b20f14b7e1372d07",
        "author": "Yanqin Jin",
        "date": "2019-06-11T13:08:28-07:00",
        "message": "Handle missing WAL in secondary mode (#5323)\n\nSummary:\nIn secondary mode, it is possible that the secondary lists the primary's WAL\ndirectory, finds a WAL and tries to open it. It is possible that the primary\ndeletes the WAL after secondary listing dir but before the secondary opening\nit. Then the secondary will fail to open the WAL file with a PathNotFound\nstatus. In this case, we can return OK without replaying WAL and optionally\nreplay more MANIFEST.\n\nTest Plan (on my dev machine):\nWithout this PR, the following will fail several times out of 100 runs.\n```\n~/gtest-parallel/gtest-parallel -r 100 -w 16 ./db_secondary_test --gtest_filter=DBSecondaryTest.SwitchToNewManifestDuringOpen\n```\nWith this PR, the above should always succeed.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5323\n\nDifferential Revision: D15763878\n\nPulled By: riversand963\n\nfbshipit-source-id: c7164fa7cb8d9001abc258b6a2dc93613e4f38ff",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_secondary.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7177dc46a13332c96332d524b20f14b7e1372d07"
    },
    {
        "hash": "a94aef6596f876561b28aad7cdcd0c92f04cc1d6",
        "author": "Levi Tamasi",
        "date": "2019-06-10T18:47:58-07:00",
        "message": "Fix DBTest.DynamicMiscOptions so it passes even with Snappy disabled (#5438)\n\nSummary:\nThis affects our \"no compression\" automated tests. Since PR #5368, DBTest.DynamicMiscOptions has been failing with:\n\ndb/db_test.cc:4889: Failure\ndbfull()->SetOptions({{\"compression\", \"kSnappyCompression\"}})\nInvalid argument: Compression type Snappy is not linked with the binary.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5438\n\nDifferential Revision: D15752100\n\nPulled By: ltamasi\n\nfbshipit-source-id: 3f19eff7cafc03b333965be0203c5853d2a9cb71",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a94aef6596f876561b28aad7cdcd0c92f04cc1d6"
    },
    {
        "hash": "b2584577fa66ccb16c3b67a0347188d2474660ce",
        "author": "Maysam Yabandeh",
        "date": "2019-06-10T16:50:26-07:00",
        "message": "Remove global locks from FlushScheduler (#5372)\n\nSummary:\nFlushScheduler's methods are instrumented with debug-time locks to check the scheduler state against a simple container definition. Since https://github.com/facebook/rocksdb/pull/2286 the scope of such locks are widened to the entire methods' body. The result is that the concurrency tested during testing (in debug mode) is stricter than the concurrency level manifested at runtime (in release mode).\nThe patch reverts this change to reduce the scope of such locks.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5372\n\nDifferential Revision: D15545831\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 01d69191afb1dd807d4bdc990fc74813ae7b5426",
        "modified_files_count": 1,
        "modified_files": [
            "db/flush_scheduler.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b2584577fa66ccb16c3b67a0347188d2474660ce"
    },
    {
        "hash": "641cc8d541685cad1629bd99bc08ca958458d456",
        "author": "Yanqin Jin",
        "date": "2019-06-10T16:00:30-07:00",
        "message": "Use CreateLoggerFromOptions function (#5427)\n\nSummary:\nUse `CreateLoggerFromOptions` function to reduce code duplication.\n\nTest plan (on my machine)\n```\n$make clean && make -j32 db_secondary_test\n$KEEP_DB=1 ./db_secondary_test\n```\nVerify all info logs of the secondary instance are properly logged.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5427\n\nDifferential Revision: D15748922\n\nPulled By: riversand963\n\nfbshipit-source-id: bad7261df1b8373efc504f141efc7871e375a311",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl/db_impl_secondary.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/641cc8d541685cad1629bd99bc08ca958458d456"
    },
    {
        "hash": "a16d0cc494ea8853b84c606efc04b61e33878fff",
        "author": "Levi Tamasi",
        "date": "2019-06-07T19:37:41-07:00",
        "message": "Fix build errors regarding const qualifier being ignored on cast result type (#5432)\n\nSummary:\nThis affects some TSAN builds:\n\nenv/env_test.cc: In member function ‘virtual void rocksdb::EnvPosixTestWithParam_MultiRead_Test::TestBody()’:\nenv/env_test.cc:1126:76: error: type qualifiers ignored on cast result type [-Werror=ignored-qualifiers]\n       auto data = NewAligned(kSectorSize * 8, static_cast<const char>(i + 1));\n                                                                            ^\nenv/env_test.cc:1154:77: error: type qualifiers ignored on cast result type [-Werror=ignored-qualifiers]\n       auto buf = NewAligned(kSectorSize * 8, static_cast<const char>(i*2 + 1));\n                                                                             ^\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5432\n\nDifferential Revision: D15727277\n\nPulled By: ltamasi\n\nfbshipit-source-id: dc0e687b123e7c4d703ccc0c16b7167e07d1c9b0",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a16d0cc494ea8853b84c606efc04b61e33878fff"
    },
    {
        "hash": "79edf0a7a8ab75f60692efd54b1e0ed7da7aafca",
        "author": "Yuan Zhou",
        "date": "2019-05-31T17:17:57-07:00",
        "message": "util: fix log_write_bench (#5335)\n\nSummary:\nlog_write_bench doesn't compile due to some recent API changes.\nThis patch fixes the compile by adding the missing params for\nOptimizeForLogWrite() and WritableFileWriter().\n\nSigned-off-by: Yuan Zhou <yuan.zhou@intel.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5335\n\nDifferential Revision: D15588875\n\nPulled By: miasantreble\n\nfbshipit-source-id: 726ff4dc227733e915c3b796df25bd3ab0b431ac",
        "modified_files_count": 1,
        "modified_files": [
            "util/log_write_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/79edf0a7a8ab75f60692efd54b1e0ed7da7aafca"
    },
    {
        "hash": "d7d8605f56fd4f881869395aa06f9c5f259b5020",
        "author": "Zhongyi Xie",
        "date": "2019-05-31T17:02:51-07:00",
        "message": "Fix a clang analyze warning (#5398)\n\nSummary:\nClang analyzer is reporting a false positive warning thinking `type` is uninitialized. The variable is initialized by `ParseFileName` by reference so assigning a default value to keep clang happy.\nCurrent failure:\n```\nfile/filename.cc:435:15: warning: The left operand of '==' is a garbage value\n        (type == kInfoLogFile)) {\n         ~~~~ ^\n1 warning generated.\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5398\n\nDifferential Revision: D15588421\n\nPulled By: miasantreble\n\nfbshipit-source-id: fb121c270300f3a659e68bc7f6674ff4ddf2df9a",
        "modified_files_count": 1,
        "modified_files": [
            "file/filename.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d7d8605f56fd4f881869395aa06f9c5f259b5020"
    },
    {
        "hash": "83f7a8eed0592cfe275ca5247069adb0acdf75d3",
        "author": "Yanqin Jin",
        "date": "2019-05-31T08:32:22-07:00",
        "message": "Fix compilation error in LITE mode (#5391)\n\nSummary:\nAdd macro ROCKSDB_LITE to fix compilation.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5391\n\nDifferential Revision: D15574522\n\nPulled By: riversand963\n\nfbshipit-source-id: 95aea83c5d9b2bf98a3ba0ef9167b63c9be2988b",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/83f7a8eed0592cfe275ca5247069adb0acdf75d3"
    },
    {
        "hash": "ff9d286877dd3ec74fc829cf57935bfb479a2182",
        "author": "Sagar Vemuri",
        "date": "2019-05-30T21:32:46-07:00",
        "message": "Reorder DBImpl's private section (#5385)\n\nSummary:\nThe methods and fields in the private section of DBImpl were all intermingled, making it hard to figure out where the fields/methods start and where they end. I cleaned up the code a little so that all the type declaration are at the beginning, followed by methods, and all the data fields are at the end. This follows\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5385\n\nDifferential Revision: D15566978\n\nPulled By: sagar0\n\nfbshipit-source-id: 4618a7d819ad4e2d7cc9ae1af2c59f400140bb1b",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ff9d286877dd3ec74fc829cf57935bfb479a2182"
    },
    {
        "hash": "f1302ebab8c39ba441a33e73b8e37d75d53efa22",
        "author": "Yanqin Jin",
        "date": "2019-05-30T16:18:33-07:00",
        "message": "Add class-level comments to version-related classes (#5348)\n\nSummary:\nAs title.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5348\n\nDifferential Revision: D15564595\n\nPulled By: riversand963\n\nfbshipit-source-id: dd45aa86a70e0343c2e9ef702fad165163f548e6",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f1302ebab8c39ba441a33e73b8e37d75d53efa22"
    },
    {
        "hash": "1b59a490ef8d8da78c826b379167207dfa682b4c",
        "author": "Sagar Vemuri",
        "date": "2019-05-30T16:11:27-07:00",
        "message": "Fix flaky DBTest2.PresetCompressionDict test (#5378)\n\nSummary:\nFix flaky DBTest2.PresetCompressionDict test.\n\nThis PR fixes two issues with the test:\n1. Replaces `GetSstFiles` with `TotalSize`, which is based on `DB::GetColumnFamilyMetaData` so that only the size of the live SST files is taken into consideration when computing the total size of all sst files. Earlier, with `GetSstFiles`, even obsolete files were getting picked up.\n1. In ZSTD compression, it is sometimes possible that using a trained dictionary is not better than using an untrained one. Using a trained dictionary performs well in 99% of the cases, but still in the remaining ~1% of the cases (out of 10000 runs) using an untrained dictionary gets better compression results.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5378\n\nDifferential Revision: D15559100\n\nPulled By: sagar0\n\nfbshipit-source-id: c35adbf13871f520a2cec48f8bad9ff27ff7a0b4",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1b59a490ef8d8da78c826b379167207dfa682b4c"
    },
    {
        "hash": "bd44ec2006fbb44d632ee7be7cf8f553d90b09d9",
        "author": "anand76",
        "date": "2019-05-30T11:41:08-07:00",
        "message": "Fix reopen voting logic in db_stress when using MultiGet (#5374)\n\nSummary:\nWhen the --reopen option is non-zero, the DB is reopened after every ops_per_thread/(reopen+1) ops, with the check being done after every op. With MultiGet, we might do multiple ops in one iteration, which broke the logic that checked when to synchronize among the threads and reopen the DB. This PR fixes that logic.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5374\n\nDifferential Revision: D15559780\n\nPulled By: anand1976\n\nfbshipit-source-id: ee6563a68045df7f367eca3cbc2500d3e26359ef",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bd44ec2006fbb44d632ee7be7cf8f553d90b09d9"
    },
    {
        "hash": "a984040f0bf205cb102cfbc377f8c9e44aff0300",
        "author": "anand76",
        "date": "2019-05-30T11:12:59-07:00",
        "message": "Increase Trash/DB size ratio in DBSSTTest.RateLimitedWALDelete (#5366)\n\nSummary:\nBy increasing the ratio, we ensure that all files go through background deletion and eliminate flakiness due to timing of deletions.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5366\n\nDifferential Revision: D15549992\n\nPulled By: anand1976\n\nfbshipit-source-id: d137375cd791fc1a802841412755d6e2b8fd7688",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a984040f0bf205cb102cfbc377f8c9e44aff0300"
    },
    {
        "hash": "4d0c3b1f9644ae5b6a13740075e259268eff40df",
        "author": "Siying Dong",
        "date": "2019-05-28T12:24:38-07:00",
        "message": "Add comments in compaction_picker.h\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5357\n\nDifferential Revision: D15522825\n\nPulled By: siying\n\nfbshipit-source-id: d775386b9d10c7179f5d3af2c821ed213abfacdf",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4d0c3b1f9644ae5b6a13740075e259268eff40df"
    },
    {
        "hash": "b5e4ee2e763789e23ee2e31e8fc8f82916bafc2d",
        "author": "Yanqin Jin",
        "date": "2019-05-28T12:19:41-07:00",
        "message": "Fix a clang analyze error (#5365)\n\nSummary:\nThe analyzer thinks max_allowed_ space can be 0. In that case, free_space will\nbe assigned as free_space. It fails to realize that the function call\nGetFreeSpace actually sets the free_space variable properly, which is possibly\ndue to lack of inter-function call analysis.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5365\n\nDifferential Revision: D15521790\n\nPulled By: riversand963\n\nfbshipit-source-id: 839d0a285a1c8773a28a385f0c3be4bb7fbe32cb",
        "modified_files_count": 1,
        "modified_files": [
            "util/sst_file_manager_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b5e4ee2e763789e23ee2e31e8fc8f82916bafc2d"
    },
    {
        "hash": "e264eebcd7f5880093b42f13a44c7e67d1619969",
        "author": "Sagar Vemuri",
        "date": "2019-05-24T20:31:45-07:00",
        "message": "Add comments in file_reader_writer.h (#5355)\n\nSummary:\nAdd file and class level comments in file_reader_writer.h\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5355\n\nDifferential Revision: D15499020\n\nPulled By: sagar0\n\nfbshipit-source-id: 925b2326885cdb4357e6a139ac65ee5e2ce1d613",
        "modified_files_count": 1,
        "modified_files": [
            "util/file_reader_writer.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e264eebcd7f5880093b42f13a44c7e67d1619969"
    },
    {
        "hash": "bd9f1d2d0ff7ea7beb289cb1ca230f1593ceedae",
        "author": "Yanqin Jin",
        "date": "2019-05-24T18:38:12-07:00",
        "message": "Fix RocksDB auto-recovery from SpaceLimit err (#5334)\n\nSummary:\nIf RocksDB is configured with a positive max_allowed_space (via sst file manager),\nthen the sst file manager should use this value instead of total free disk\nspace to determine whether to clear the background error of space limit\nreached.\n\nIn DBSSTTest.DBWithMaxSpaceAllowed, we configure a low space limit that is very\nlikely lower than the free disk space of the test machine. Therefore, once the\ntest db encounters a Status::SpaceLimit, error handler will call into sst file\nmanager to start error recovery which may clear the bg error since disk free\nspace is larger than reserved_disk_buffer_.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5334\n\nDifferential Revision: D15501622\n\nPulled By: riversand963\n\nfbshipit-source-id: 58035efc450b062d6b28c78c322005ec3705fb47",
        "modified_files_count": 1,
        "modified_files": [
            "util/sst_file_manager_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bd9f1d2d0ff7ea7beb289cb1ca230f1593ceedae"
    },
    {
        "hash": "b09c018b4d42049de5a9275f2af3c0776b622655",
        "author": "Sagar Vemuri",
        "date": "2019-05-24T16:59:54-07:00",
        "message": "Add comments to trace_replay.h (#5359)\n\nSummary:\nAdd file, class, and function level comments in trace_replay.h\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5359\n\nDifferential Revision: D15505318\n\nPulled By: sagar0\n\nfbshipit-source-id: 181e3d4ea805fd9a33f91b89e123bbd0c1ead2ce",
        "modified_files_count": 1,
        "modified_files": [
            "util/trace_replay.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b09c018b4d42049de5a9275f2af3c0776b622655"
    },
    {
        "hash": "029b98984e2f6babc2526362ddfffeea0798d625",
        "author": "anand76",
        "date": "2019-05-24T14:26:43-07:00",
        "message": "Add some comments in table_cache.h\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5343\n\nDifferential Revision: D15485831\n\nPulled By: anand1976\n\nfbshipit-source-id: 8735ccfba90d7ecb3559e63f792e34527f04ed29",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_cache.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/029b98984e2f6babc2526362ddfffeea0798d625"
    },
    {
        "hash": "eb7647ee6ce96fdeb3f49a341463efab50cc7658",
        "author": "anand76",
        "date": "2019-05-24T13:31:05-07:00",
        "message": "Add comments t get_context.h\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5353\n\nDifferential Revision: D15497912\n\nPulled By: anand1976\n\nfbshipit-source-id: 72cff2465ca342aa810f925be5a7016b938aa416",
        "modified_files_count": 1,
        "modified_files": [
            "table/get_context.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eb7647ee6ce96fdeb3f49a341463efab50cc7658"
    },
    {
        "hash": "6267ed251ae5162b7b5c41521061e5541af301f5",
        "author": "Siying Dong",
        "date": "2019-05-24T13:09:55-07:00",
        "message": "Improve comment in db_impl.h (#5338)\n\nSummary:\nAdd some comments in db_impl.h. Also reordered function order a little bit so that I can add a comment to flag the area of functions implementing DB interface.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5338\n\nDifferential Revision: D15498284\n\nPulled By: siying\n\nfbshipit-source-id: 3d7c59c8303577fe44d13c74ae84c7ce05164f77",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6267ed251ae5162b7b5c41521061e5541af301f5"
    },
    {
        "hash": "f69e63dc5fa99277bc1e1ef6140383207be3c8ac",
        "author": "Siying Dong",
        "date": "2019-05-24T12:24:28-07:00",
        "message": "Improve comments in compaction.h\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5356\n\nDifferential Revision: D15499033\n\nPulled By: siying\n\nfbshipit-source-id: 069ae48669484beaf668dd90389b8743b3309dc3",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f69e63dc5fa99277bc1e1ef6140383207be3c8ac"
    },
    {
        "hash": "596cc1547a01b8299293f9fb43f219722eeb6dad",
        "author": "Siying Dong",
        "date": "2019-05-24T12:07:15-07:00",
        "message": "Update comments in column_family.h (#5347)\n\nSummary:\nDocument relationships of data structures declared in column_family.h\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5347\n\nDifferential Revision: D15496941\n\nPulled By: siying\n\nfbshipit-source-id: 47b37835abba26aa31a94fabea6b2775483e0ccb",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/596cc1547a01b8299293f9fb43f219722eeb6dad"
    },
    {
        "hash": "98094f6caca6a5c0d2cff4c36f3bfdc7c1fcb7b6",
        "author": "Levi Tamasi",
        "date": "2019-05-24T11:20:09-07:00",
        "message": "Add some comments for BlockContents\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5354\n\nDifferential Revision: D15496645\n\nPulled By: ltamasi\n\nfbshipit-source-id: 1282b1ce11fbc412d3d87b2688fd0586e7bb6b85",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/98094f6caca6a5c0d2cff4c36f3bfdc7c1fcb7b6"
    },
    {
        "hash": "88ff80780b3ccdbf802625c8302b9e4405a09b66",
        "author": "Zhongyi Xie",
        "date": "2019-05-24T10:40:30-07:00",
        "message": "improve comment for WalManager (#5350)\n\nSummary:\natt\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5350\n\nDifferential Revision: D15496467\n\nPulled By: miasantreble\n\nfbshipit-source-id: c29c0b143bf4df2040695a82be0feb9814ddb641",
        "modified_files_count": 1,
        "modified_files": [
            "db/wal_manager.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/88ff80780b3ccdbf802625c8302b9e4405a09b66"
    },
    {
        "hash": "94c78b11e411d15f23bbc0c3c3f95c7e070ea528",
        "author": "Zhongyi Xie",
        "date": "2019-05-24T10:33:57-07:00",
        "message": "improve comments for statistics.h\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5351\n\nDifferential Revision: D15496346\n\nPulled By: miasantreble\n\nfbshipit-source-id: eeb619e6bd8616003ba35b0cd4bb8050e6a8cb4d",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/statistics.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/94c78b11e411d15f23bbc0c3c3f95c7e070ea528"
    },
    {
        "hash": "5d359fc337803b1b365c7d151799e4d76f75b024",
        "author": "Sagar Vemuri",
        "date": "2019-05-24T10:05:40-07:00",
        "message": "Document AlignedBuffer (#5345)\n\nSummary:\nAdd comments to util/aligned_buffer.h\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5345\n\nDifferential Revision: D15496004\n\nPulled By: sagar0\n\nfbshipit-source-id: 31bc6f35e88dedd74cff55febe02c9e761304f76",
        "modified_files_count": 1,
        "modified_files": [
            "util/aligned_buffer.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5d359fc337803b1b365c7d151799e4d76f75b024"
    },
    {
        "hash": "6a54278b4a9b86a1cce359e78db61015e7a1cc07",
        "author": "Zhongyi Xie",
        "date": "2019-05-23T17:03:23-07:00",
        "message": "add class level comment for RepeatableThread\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5344\n\nDifferential Revision: D15485431\n\nPulled By: miasantreble\n\nfbshipit-source-id: 9c0f6cf0d826743e743012549976705ceb8cc0c4",
        "modified_files_count": 1,
        "modified_files": [
            "util/repeatable_thread.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6a54278b4a9b86a1cce359e78db61015e7a1cc07"
    },
    {
        "hash": "02830a20f8673de7b332a42e4cb376f79de0b121",
        "author": "Siying Dong",
        "date": "2019-05-23T16:44:20-07:00",
        "message": "Add comments in db/dbformat.h\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5342\n\nDifferential Revision: D15485238\n\nPulled By: siying\n\nfbshipit-source-id: a56b374584cb1d815c1173907a807d90b37d4dd6",
        "modified_files_count": 1,
        "modified_files": [
            "db/dbformat.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/02830a20f8673de7b332a42e4cb376f79de0b121"
    },
    {
        "hash": "dc30a9b69bc2c9f38e7e3266cfeb7983d2712ca4",
        "author": "Siying Dong",
        "date": "2019-05-23T16:11:38-07:00",
        "message": "Add comments to db/db_iter.h (#5340)\n\nSummary:\nAdd file comment in db/db_iter.h and minor changes in other parts.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5340\n\nDifferential Revision: D15484605\n\nPulled By: siying\n\nfbshipit-source-id: 173771f9d5bd51303de5410ee5afd0a4af9d6572",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dc30a9b69bc2c9f38e7e3266cfeb7983d2712ca4"
    },
    {
        "hash": "40aa520a51bbf5b8bae54861a7c9c433a1b40006",
        "author": "Levi Tamasi",
        "date": "2019-05-23T14:22:26-07:00",
        "message": "Add class comment for BlockFetcher\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5337\n\nDifferential Revision: D15482289\n\nPulled By: ltamasi\n\nfbshipit-source-id: 8639ca78c1b8dfcc337a742d4d81d5752f12545f",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_fetcher.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/40aa520a51bbf5b8bae54861a7c9c433a1b40006"
    },
    {
        "hash": "2095ae88585f8ee1ef24b07231f536ba583dd345",
        "author": "Silver Chan",
        "date": "2019-05-23T14:03:25-07:00",
        "message": "fixed db_stress.cc build error (#5307)\n\nSummary:\nwhen building this file using Xcode 10.2.1 in MacOSX10.14, the compiler report this error:\n`\nrocksdb/tools/db_stress.cc:3613:33: error: implicit instantiation of\n      undefined template 'std::__1::array<std::__1::basic_string<char>, 10>'\n    std::array<std::string, 10> keys = {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"};\n/usr/include/c++/v1/__tuple:223:64: note:\n      template is declared here\ntemplate <class _Tp, size_t _Size> struct _LIBCPP_TEMPLATE_VIS array;\n                                                               ^\n1 error generated.\n`\nif including array, this error will be fixed.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5307\n\nDifferential Revision: D15475217\n\nPulled By: sagar0\n\nfbshipit-source-id: b04a7658c2ca2573157028863b3a80f5ab52b9de",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2095ae88585f8ee1ef24b07231f536ba583dd345"
    },
    {
        "hash": "cd43446d017fd3929e5883bccf1206afafd57952",
        "author": "Siying Dong",
        "date": "2019-05-20T13:50:53-07:00",
        "message": "Improve DBTablePropertiesTest.GetPropertiesOfTablesInRange (#5302)\n\nSummary:\nDBTablePropertiesTest.GetPropertiesOfTablesInRange sometimes hits the assert that generated LSM-tree doesn't have L1 file. Tighten the compaction triggering condition even further, hoping it goes away.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5302\n\nDifferential Revision: D15325971\n\nPulled By: siying\n\nfbshipit-source-id: 3e032bdb16fe8d98d5fcfcd65dd8be9781f3d6ae",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_table_properties_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cd43446d017fd3929e5883bccf1206afafd57952"
    },
    {
        "hash": "c71f5bb9aa7fd2f12533a5b8300949e7f766e213",
        "author": "Maysam Yabandeh",
        "date": "2019-05-16T15:39:33-07:00",
        "message": "Disable WriteUnPrepared stress tests (#5315)\n\nSummary:\nThey are kind of flaky at the moment. Will re-enable it when flakiness is fixed.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5315\n\nDifferential Revision: D15382744\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 8b2f9d81a4bb34bfd51481727a682d5cd063c5e3",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c71f5bb9aa7fd2f12533a5b8300949e7f766e213"
    },
    {
        "hash": "f82e693a31d07ab8b391888ff60eb7ff5b95bd13",
        "author": "Siying Dong",
        "date": "2019-05-16T15:24:28-07:00",
        "message": "RangeDelAggregator::StripeRep::Invalidate() to be skipped if empty (#5312)\n\nSummary:\nRangeDelAggregator::StripeRep::Invalidate() clears up several vectors. If we know there isn't anything to there, we can safe these small CPUs. Profiling shows that it sometimes take non-negligible amount of CPU. Worth a small optimization.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5312\n\nDifferential Revision: D15380511\n\nPulled By: siying\n\nfbshipit-source-id: 53c5f34c33b4cb1e743643c6086ac56d0b84ec2e",
        "modified_files_count": 1,
        "modified_files": [
            "db/range_del_aggregator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f82e693a31d07ab8b391888ff60eb7ff5b95bd13"
    },
    {
        "hash": "1583cb402eb6f52adac0261cb3766b47aac3078e",
        "author": "Yanqin Jin",
        "date": "2019-05-15T15:17:55-07:00",
        "message": "Fix a flaky test with test sync point (#5310)\n\nSummary:\nIf DB is opened with `avoid_unnecessary_blocking_io` being true, then `~ColumnFamilyHandleImpl` enqueues a purge request and schedules a background thread to perform the deletion. Without test sync point, whether the SST file is purged or not at a later point in time is not deterministic. If the SST does not exist, it will cause an assertion failure.\n\nHow to reproduce:\n```\n$git checkout 6492430eaf1a13730eec81321528558cbf486c96\n$make -j20 deletefile_test\n$gtest-parallel --repeat 1000 --worker 16 ./deletefile_test --gtest_filter=DeleteFileTest.BackgroundPurgeCFDropTest\n```\nThe test may fail a few times.\nWith changes made in this PR, repeat the above commands, and the test should not fail.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5310\n\nDifferential Revision: D15361136\n\nPulled By: riversand963\n\nfbshipit-source-id: c4308d5f8da83472c893bf7f8ceed347fbfa850f",
        "modified_files_count": 1,
        "modified_files": [
            "db/deletefile_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1583cb402eb6f52adac0261cb3766b47aac3078e"
    },
    {
        "hash": "8149bb9d6ab8ef55a30e9906f0bca8e6e0a42bec",
        "author": "Dave Rigby",
        "date": "2019-05-15T14:25:57-07:00",
        "message": "Pass OptionTypeInfo maps by const& (#5295)\n\nSummary:\nIn options_helper.cc various functions take a const unordered_map of\nstring -> TypeInfo for options handling. These functions pass by-value\nthe (const) maps, resulting in unnecessary copies.\n\nChange to pass by reference.\n\nThis results in a noticable reduction in the amount of time spent\nparsing options - in my case a set of unit tests using RocksDB which\ncall SetOptions() to modify options see a ~25% runtime reduction.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5295\n\nDifferential Revision: D15296334\n\nPulled By: riversand963\n\nfbshipit-source-id: 4d4be3db635264943607911b296dda27fd7ce1a7",
        "modified_files_count": 1,
        "modified_files": [
            "options/options_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8149bb9d6ab8ef55a30e9906f0bca8e6e0a42bec"
    },
    {
        "hash": "468ca611052eb207cfa6f312c90be1aff9de48ba",
        "author": "Raphael Bost",
        "date": "2019-05-15T14:20:24-07:00",
        "message": "Break large file writes into 1GB chunks (#5213)\n\nSummary:\nThis is a workaround for the issue described in #5169.\nIt has been tested on a database with very large values, but not dedicated test has been added to the code base.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5213\n\nDifferential Revision: D15243116\n\nPulled By: siying\n\nfbshipit-source-id: e0c226a6cd71a60924dcd7ce7af74abcb4054484",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/468ca611052eb207cfa6f312c90be1aff9de48ba"
    },
    {
        "hash": "3c3252a06a77c5f6877392b882014dc8c8b2bd8f",
        "author": "Maysam Yabandeh",
        "date": "2019-05-15T11:21:48-07:00",
        "message": "Fix tsan complaint in ConcurrentMergeWrite test (#5308)\n\nSummary:\nThe test was not using separate MemTablePostProcessInfo per memetable insert thread and thus tsan was complaining about data race.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5308\n\nDifferential Revision: D15356420\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 46c2f2d19fb02c3c775b587aa09ca9c0dae6ed04",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_memtable_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3c3252a06a77c5f6877392b882014dc8c8b2bd8f"
    },
    {
        "hash": "92c60547fe1bc3254a18c2ff82e5398339cdb45b",
        "author": "Yi Wu",
        "date": "2019-05-13T11:30:35-07:00",
        "message": "db_bench: fix hang on IO error (#5300)\n\nSummary:\ndb_bench will wait indefinitely if there's background error. Fix by pass `abs_time_us` to cond var.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5300\n\nDifferential Revision: D15319945\n\nPulled By: miasantreble\n\nfbshipit-source-id: 0034fb7f6ec7c3303c4ccf26e54c20fbdac8ab44",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/92c60547fe1bc3254a18c2ff82e5398339cdb45b"
    },
    {
        "hash": "eea1cad850c2e268b0bfde208a005e44289dea47",
        "author": "Zhongyi Xie",
        "date": "2019-05-07T20:20:40-07:00",
        "message": "avoid updating index type during iterator creation (#5288)\n\nSummary:\nRight now there is a potential race condition where two threads are created to iterate through the DB (https://gist.github.com/miasantreble/88f5798a397ee7cb8e7baff9db2d9e85).  The problem is that in `BlockBasedTable::NewIndexIterator`, if both threads failed to find index_reader from block cache, they will call `CreateIndexReader->UpdateIndexType()` which creates a race to update `index_type` in the shared rep_ object. By checking the code, we realize the index type is always populated by `PrefetchIndexAndFilterBlocks` during the table `Open` call, so there is no need to update index type every time during iterator creation. This PR attempts to fix the race condition by removing the unnecessary call to `UpdateIndexType`\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5288\n\nDifferential Revision: D15252509\n\nPulled By: miasantreble\n\nfbshipit-source-id: 6e3258652121d5c76d267f7ac457e15c5e84756e",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eea1cad850c2e268b0bfde208a005e44289dea47"
    },
    {
        "hash": "3e994809a1c00ca52fe45e598323e54db18cb90c",
        "author": "Zhongyi Xie",
        "date": "2019-05-03T10:02:27-07:00",
        "message": "fix implicit conversion error reported by clang check (#5277)\n\nSummary:\nfix the following clang check errors\n```\ntools/db_stress.cc:3609:30: error: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'int' [-Werror,-Wshorten-64-to-32]\n    int num_keys = rand_keys.size();\n        ~~~~~~~~   ~~~~~~~~~~^~~~~~\ntools/db_stress.cc:3888:30: error: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'int' [-Werror,-Wshorten-64-to-32]\n    int num_keys = rand_keys.size();\n        ~~~~~~~~   ~~~~~~~~~~^~~~~~\n2 errors generated.\nmake: *** [tools/db_stress.o] Error 1\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5277\n\nDifferential Revision: D15196620\n\nPulled By: miasantreble\n\nfbshipit-source-id: d56b1420d4a9f1df875fc52877a5fbb342bc7cae",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3e994809a1c00ca52fe45e598323e54db18cb90c"
    },
    {
        "hash": "d51eb0b583fe28ede2b4a6d778de4489433f1bbf",
        "author": "Zhongyi Xie",
        "date": "2019-05-01T20:40:00-07:00",
        "message": "set snappy compression only when supported (#4325)\n\nSummary:\nRight now `OptimizeLevelStyleCompaction` may set compression type to Snappy even when Snappy is not supported, this may cause errors like \"no snappy compression support\"\nFixes https://github.com/facebook/rocksdb/issues/4283\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4325\n\nDifferential Revision: D15125542\n\nPulled By: miasantreble\n\nfbshipit-source-id: 70890b73ababe16752721555dbd290633c2aafac",
        "modified_files_count": 1,
        "modified_files": [
            "options/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d51eb0b583fe28ede2b4a6d778de4489433f1bbf"
    },
    {
        "hash": "cd77d3c5588e4c9fbd6282feaa2358ec1e150326",
        "author": "Mike Kolupaev",
        "date": "2019-04-24T17:11:36-07:00",
        "message": "Don't call FindObsoleteFiles() in ~ColumnFamilyHandleImpl() if CF is not dropped (#5238)\n\nSummary:\nWe have a DB with ~4k column families and ~70k files. On shutdown, destroying the 4k ColumnFamilyHandle-s takes over 2 minutes. Most of this time is spent in VersionSet::AddLiveFiles() called from FindObsoleteFiles() from ~ColumnFamilyHandleImpl(). It's just iterating over the list of files in memory. This seems completely unnecessary as no obsolete files are actually found since the CFs are not even dropped. This PR fixes that.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5238\n\nDifferential Revision: D15056342\n\nPulled By: siying\n\nfbshipit-source-id: 2aa342ef3770b4aa384ce81f8768e485480e4f08",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cd77d3c5588e4c9fbd6282feaa2358ec1e150326"
    },
    {
        "hash": "a7d103198ee27fbd3f9146e57355ea02eb10836d",
        "author": "qinzuoyan",
        "date": "2019-04-23T11:22:02-07:00",
        "message": "Print smallest and largest seqno in Version::DebugString() for more details (#5231)\n\nSummary:\nIn some cases, we want to known the smallest and largest sequence numbers of sstable files, to help us get more details.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5231\n\nDifferential Revision: D15038087\n\nPulled By: siying\n\nfbshipit-source-id: c473c1ca07b53efe2f1884fa1ecdc8686f455ed8",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a7d103198ee27fbd3f9146e57355ea02eb10836d"
    },
    {
        "hash": "990b2f4cb313f4a47cb0bc3ba907862e6c47d4b0",
        "author": "Adam Retter",
        "date": "2019-04-23T11:16:51-07:00",
        "message": "Fix compilation on db_bench_tool.cc on Windows (#5227)\n\nSummary:\nI needed this change to be able to build the v6.0.1 release on Windows.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5227\n\nDifferential Revision: D15033815\n\nPulled By: sagar0\n\nfbshipit-source-id: 579f3b8e694c34c0d43527eb2fa37175e37f5911",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/990b2f4cb313f4a47cb0bc3ba907862e6c47d4b0"
    },
    {
        "hash": "72c8533f2c137170478270cb74b218095ced8904",
        "author": "Siying Dong",
        "date": "2019-04-23T10:55:01-07:00",
        "message": "DBIter to use IteratorWrapper for inner iterator (#5214)\n\nSummary:\nIt's hard to get DBIter to directly use InternalIterator::NextAndGetResult() because the code change would be complicated. Instead, use IteratorWrapper, where Next() is already using NextAndGetResult(). Performance number is hard to measure because it is small and ther is variation. I run readseq many times, and there seems to be 1% gain.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5214\n\nDifferential Revision: D15003635\n\nPulled By: siying\n\nfbshipit-source-id: 17af1965c409c2fe90cd85037fbd2c5a1364f82a",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/72c8533f2c137170478270cb74b218095ced8904"
    },
    {
        "hash": "47fd57482984ce7d5e77ac8872e8a58a5cc2a5c9",
        "author": "Sagar Vemuri",
        "date": "2019-04-22T15:30:07-07:00",
        "message": "Log file_creation_time table property (#5232)\n\nSummary:\nLog file_creation_time table property when a new table file is created.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5232\n\nDifferential Revision: D15033069\n\nPulled By: sagar0\n\nfbshipit-source-id: aaac56a4c03a8f96c338cad1b0cdb7fbfb887647",
        "modified_files_count": 1,
        "modified_files": [
            "db/event_helpers.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/47fd57482984ce7d5e77ac8872e8a58a5cc2a5c9"
    },
    {
        "hash": "c77aab584e73bb15812f72e6f58a8730570e3cd9",
        "author": "Yanqin Jin",
        "date": "2019-04-19T11:55:13-07:00",
        "message": "Force read existing data during db repair (#5209)\n\nSummary:\nSetting read_opts.total_order_seek achieves this, even with a different prefix\nextractor.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5209\n\nDifferential Revision: D14980388\n\nPulled By: riversand963\n\nfbshipit-source-id: 16527989a3d6b3e3ae8241c894d011326429d66e",
        "modified_files_count": 1,
        "modified_files": [
            "db/repair.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c77aab584e73bb15812f72e6f58a8730570e3cd9"
    },
    {
        "hash": "7a73adda9c5758018ef8d9c1d04b30eaf21ce620",
        "author": "Siying Dong",
        "date": "2019-04-19T10:38:43-07:00",
        "message": "Add some \"inline\" annotation to DBIter functions (#5217)\n\nSummary:\nMy compiler doesn't inline DBIter::Next() to arena wrapped iterator, even if it is a direct forward. Adding this annotation makes it inlined. It might not always work but inlinging this function to arena wrapped iterator always feels like the right decision.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5217\n\nDifferential Revision: D15004086\n\nPulled By: siying\n\nfbshipit-source-id: a4cffd79c6fb092669a3a90633c9aa5e494f8a66",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7a73adda9c5758018ef8d9c1d04b30eaf21ce620"
    },
    {
        "hash": "01cfea66373d6ac7ee65c323fe7c2755d5d5dd7b",
        "author": "Siying Dong",
        "date": "2019-04-18T12:18:11-07:00",
        "message": "Some small code changes to improve Next() (#5200)\n\nSummary:\nSeveral small changes for Next():\n1. Reducing branching by always update local_stats_.next_count_++ even if statistics is null. This should be faster than a branching.\n2. Replacing ResetInternalKeysSkippedCounter() in Next() because the valid_ check is not needed in this case.\n3. iter_->Valid() should always be true for non merge case. Remove this check.\n4. Adding an inline annotation. It ends up with not picked up by my compiler, but it shouldn't hurt.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5200\n\nDifferential Revision: D15000391\n\nPulled By: siying\n\nfbshipit-source-id: be97f61c708968234fb8e5cf272b5c2ac07dc4dd",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/01cfea66373d6ac7ee65c323fe7c2755d5d5dd7b"
    },
    {
        "hash": "392f6d49e5c13a4341ee483f7d272dee40edfc97",
        "author": "Yanqin Jin",
        "date": "2019-04-18T09:22:16-07:00",
        "message": "Fix a bug in GetOverlappingInputsRangeBinarySearch (#5211)\n\nSummary:\nAs title.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5211\n\nDifferential Revision: D14992018\n\nPulled By: riversand963\n\nfbshipit-source-id: b5720ea4742029e2fb47ff6d9f8d9de006db4ed4",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/392f6d49e5c13a4341ee483f7d272dee40edfc97"
    },
    {
        "hash": "248b6b551e3a905d6795fb2b91246d60f3be65ff",
        "author": "Zhongyi Xie",
        "date": "2019-04-17T10:15:05-07:00",
        "message": "rename variable to avoid shadowing (#5204)\n\nSummary:\nthis PR fixes the following compile warning:\n```\ndb/memtable.cc: In member function ‘virtual void rocksdb::MemTableIterator::Seek(const rocksdb::Slice&)’:\ndb/memtable.cc:321:22: error: declaration of ‘user_key’ shadows a member of 'this' [-Werror=shadow]\n       Slice user_key(ExtractUserKey(k));\n                      ^\ndb/memtable.cc: In member function ‘virtual void rocksdb::MemTableIterator::SeekForPrev(const rocksdb::Slice&)’:\ndb/memtable.cc:338:22: error: declaration of ‘user_key’ shadows a member of 'this' [-Werror=shadow]\n       Slice user_key(ExtractUserKey(k));\n                      ^\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5204\n\nDifferential Revision: D14970160\n\nPulled By: miasantreble\n\nfbshipit-source-id: 388eb089f90c4528cc6d615dd4607fb53ceac705",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/248b6b551e3a905d6795fb2b91246d60f3be65ff"
    },
    {
        "hash": "d9280ff2d289c3ef371f25d96cbcd988eb0a7678",
        "author": "Yanqin Jin",
        "date": "2019-04-16T20:28:05-07:00",
        "message": "Add back NewEmptyIterator (#5203)\n\nSummary:\n#4905 removed the implementation of `NewEmptyIterator` but kept its\ndeclaration in the public header. This breaks some systems that depend on\nRocksDB if the systems use `NewEmptyIterator`. Therefore, add it back to fix. cc maysamyabandeh please remind me if I miss anything here. Thanks\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5203\n\nDifferential Revision: D14968382\n\nPulled By: riversand963\n\nfbshipit-source-id: 5fb86e99c8cfaf9f7a9473cdb1355d7558ff6e01",
        "modified_files_count": 1,
        "modified_files": [
            "table/iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d9280ff2d289c3ef371f25d96cbcd988eb0a7678"
    },
    {
        "hash": "b70967aac75aad7bb664cac0426c746bc4e408e9",
        "author": "Yi Wu",
        "date": "2019-04-15T10:54:58-07:00",
        "message": "db_bench: support seek to non-exist prefix (#5163)\n\nSummary:\nAdd `--seek_missing_prefix` flag to db_bench to allow benchmarking seeking to non-existing prefix. Usage example:\n```\n./db_bench --db=/dev/shm/db_bench --use_existing_db=false --benchmarks=fillrandom --num=100000000 --prefix_size=9 --keys_per_prefix=10\n./db_bench --db=/dev/shm/db_bench --use_existing_db=true --benchmarks=seekrandom --disable_auto_compactions=true --num=100000000 --prefix_size=9 --keys_per_prefix=10 --reads=1000 --prefix_same_as_start=true --seek_missing_prefix=true\n```\nAlso adding `--total_order_seek` and `--prefix_same_as_start` flags.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5163\n\nDifferential Revision: D14935724\n\nPulled By: riversand963\n\nfbshipit-source-id: 7c41023f007febe373eb1589861f215432a9e18a",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b70967aac75aad7bb664cac0426c746bc4e408e9"
    },
    {
        "hash": "29111e92b4dac98c7748f6fa2be7c894f38e3673",
        "author": "anand76",
        "date": "2019-04-12T18:05:09-07:00",
        "message": "Add bounds check in FilePickerMultiGet::PrepareNextLevel() (#5189)\n\nSummary:\nAdd bounds check when looping through empty levels in FilePickerMultiGet\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5189\n\nDifferential Revision: D14925334\n\nPulled By: anand1976\n\nfbshipit-source-id: 65d53247cf443153e28ce2b8b753fa51c6ae4566",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/29111e92b4dac98c7748f6fa2be7c894f38e3673"
    },
    {
        "hash": "f49e12b892010f2ccc4b791dc4faa7513b7d1399",
        "author": "vijaynadimpalli",
        "date": "2019-04-11T14:33:49-07:00",
        "message": "Added missing table properties in log (#5168)\n\nSummary:\nWhen a new SST file is created via flush or compaction, we dump out the table properties, however only a few table properties are logged. The change here is to log all the table properties\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5168\n\nDifferential Revision: D14876928\n\nPulled By: vjnadimpalli\n\nfbshipit-source-id: 1aca42ad00f9f650761d39e187f8beeb8700149b",
        "modified_files_count": 1,
        "modified_files": [
            "db/event_helpers.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f49e12b892010f2ccc4b791dc4faa7513b7d1399"
    },
    {
        "hash": "de00f28132bd91593f9fd1d565189f7cfe81918b",
        "author": "Yanqin Jin",
        "date": "2019-04-08T11:16:34-07:00",
        "message": "Refactor ExternalSSTFileTest (#5129)\n\nSummary:\nremove an unnecessary function `GenerateAndAddFileIngestBehind`\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5129\n\nDifferential Revision: D14686710\n\nPulled By: riversand963\n\nfbshipit-source-id: 5698ae63e10f8ef76c2da753bbb07a36024ac065",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/de00f28132bd91593f9fd1d565189f7cfe81918b"
    },
    {
        "hash": "306b9adfd8ee4a2bc8526ece55a0def04786861e",
        "author": "Mike Kolupaev",
        "date": "2019-04-04T14:47:41-07:00",
        "message": "Add missing methods to EnvWrapper, and more wrappers in Env.h (#5131)\n\nSummary:\n- Some newer methods of Env weren't wrapped in EnvWrapper. Fixed.\n - Added more wrapper classes similar to WritableFileWrapper: SequentialFileWrapper, RandomAccessFileWrapper, RandomRWFileWrapper, DirectoryWrapper, LoggerWrapper.\n - Moved the code around a bit, removed some unused friendships, added some comments.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5131\n\nDifferential Revision: D14738932\n\nPulled By: al13n321\n\nfbshipit-source-id: 99a9b1af28f2c629e7b7501389fa920b5ce30218",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/306b9adfd8ee4a2bc8526ece55a0def04786861e"
    },
    {
        "hash": "75e8b6dfcff992e091b35fc7a260c08442175349",
        "author": "Maysam Yabandeh",
        "date": "2019-04-03T16:04:38-07:00",
        "message": "Fix race condition in IteratorWithLocalStatistics (#5149)\n\nSummary:\nThe ReadCallback was shared between all threads in IteratorWithLocalStatistics. A race condition was\n hence introduced with recent changes that changes the content of ReadCallback. The patch fixes that by using a separate callback per thread.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5149\n\nDifferential Revision: D14761612\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 814a316aed046c318cb90e22379a6e32ac528949",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iterator_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/75e8b6dfcff992e091b35fc7a260c08442175349"
    },
    {
        "hash": "7441a0ecba355d1c7b8c21e5d37df4e0d0b212da",
        "author": "Maysam Yabandeh",
        "date": "2019-04-03T15:51:30-07:00",
        "message": "WriteUnPrepared: fix ubsan complaint (#5148)\n\nSummary:\nUbsna complains that in initialization of WriteUnpreparedTxnReadCallback the method of the child class is used before the parent class is constructed. The patch fixes that by making the aforementioned method static.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5148\n\nDifferential Revision: D14760098\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: cf19b7c1fdb5de0a54e62c1deebe09a0fa048ded",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_unprepared_txn.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7441a0ecba355d1c7b8c21e5d37df4e0d0b212da"
    },
    {
        "hash": "d9d3cacaf558e55892a68d66cc7a160213205a3f",
        "author": "Simon Grätzer",
        "date": "2019-04-02T11:56:18-07:00",
        "message": "Add a missing define to monitoring/iostats_context_imp.h (#5136)\n\nSummary:\nI think when PR https://github.com/facebook/rocksdb/pull/4889 added the `IOSTATS_CPU_TIMER_GUARD` define to this header file, the noop version in the `#else` branch was forgotten.\n\nNot sure if this is common, but on my MacOS machine it breaks my build\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5136\n\nDifferential Revision: D14727727\n\nPulled By: siying\n\nfbshipit-source-id: 1076e56bdbe6ecda01d461b371dabf7f1593a149",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/iostats_context_imp.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d9d3cacaf558e55892a68d66cc7a160213205a3f"
    },
    {
        "hash": "127a850beb866d43ac2d6ae0aa503c1f5453e7a4",
        "author": "Remington Brasga",
        "date": "2019-03-29T15:09:35-07:00",
        "message": "Fix arena allocation size in NewEmptyInternalIterator (#4905)\n\nSummary:\nNewEmptyInternalIterator with arena mistakenly used EmptyIterator to allocate the size from area but then initialized it to a totally different object: EmptyInternalIterator. The patch fixes that.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4905\n\nDifferential Revision: D14689840\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: af64fd8ee93d5a4ad54691c792e5ecc5efabc887",
        "modified_files_count": 1,
        "modified_files": [
            "table/iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/127a850beb866d43ac2d6ae0aa503c1f5453e7a4"
    },
    {
        "hash": "a703f16da99c351a6abb43e23443020f0c2cd4b5",
        "author": "Maysam Yabandeh",
        "date": "2019-03-29T13:18:57-07:00",
        "message": "WriteUnPrepared: Enable auto-compaction after max_evicted_seq_ init (#5128)\n\nSummary:\nCompaction would depend on max_evicted_seq_ value. The ::Initialize method should do that after max_evicted_seq_ is properly initialized. The patch also back ports #4853 from WritePrepared txn to WriteUnPrepared.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5128\n\nDifferential Revision: D14686562\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: b2355025712a72676ac3b20a95258adcf4774490",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_unprepared_txn_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a703f16da99c351a6abb43e23443020f0c2cd4b5"
    },
    {
        "hash": "106a94af1552ba6eb89cfe08fd4f92c2078af463",
        "author": "Siying Dong",
        "date": "2019-03-28T13:16:02-07:00",
        "message": "Improve obsolete_files_test (#5125)\n\nSummary:\nWe see a failure of obsolete_files_test but aren't able to identify\nthe issue. Improve the test in following way and hope we can debug\nbetter next time:\n1. Place sync point before automatic compaction runs so race condition\n   will always trigger.\n2. Disable sync point before test finishes.\n3. ASSERT_OK() instead of ASSERT_TRUE(status.ok())\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5125\n\nDifferential Revision: D14669456\n\nPulled By: siying\n\nfbshipit-source-id: dccb7648e334501ad651eb212880096eef1f4ab2",
        "modified_files_count": 1,
        "modified_files": [
            "db/obsolete_files_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/106a94af1552ba6eb89cfe08fd4f92c2078af463"
    },
    {
        "hash": "7ca9eb7542ec76ee90298f34b5fe60b76984be97",
        "author": "Yi Wu",
        "date": "2019-03-26T10:13:01-07:00",
        "message": "Fix BlockBasedTableIterator construction missing index_key_is_full parameter\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/5104\n\nDifferential Revision: D14619000\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: c2895794a3f31b826c149dcb698c1952dacc2332",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7ca9eb7542ec76ee90298f34b5fe60b76984be97"
    },
    {
        "hash": "3c5eed5ebee8eb06425e8716e1a56fb9782ce9a9",
        "author": "Zhongyi Xie",
        "date": "2019-03-25T23:28:29-07:00",
        "message": "remove incorrect assert in `GetUniqueIdFromFile` (#5102)\n\nSummary:\nUser report has shown that sometimes `BlockBasedTable::SetupCacheKeyPrefix` would assert when trying to generate an id from the file. The actual cause seems to be hardware related but we might be better off without the incorrect assertion\nSee T42178927 for more information\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5102\n\nDifferential Revision: D14604677\n\nPulled By: miasantreble\n\nfbshipit-source-id: fcb09207ebdc4fa66e941afbc0523d84797e7ad7",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3c5eed5ebee8eb06425e8716e1a56fb9782ce9a9"
    },
    {
        "hash": "959f86e5f8c5db2effd7c8d889ccd19f0339ff6e",
        "author": "anand76",
        "date": "2019-03-20T10:42:04-07:00",
        "message": "Use placement new and delete in autovector (#5080)\n\nSummary:\nThe stack buffer in rocksdb::autovector is currently defined as an array of elements of the template type. This results in unnecessary construction of those objects, which can be a significant overhead in some cases. This PR changes the type of the stack buf to char* and uses placement new to construct new objects when they are inserted into the autovector.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5080\n\nDifferential Revision: D14533221\n\nPulled By: anand1976\n\nfbshipit-source-id: 9378985c7d03f4e1a28951bdd2403c72f10f23d7",
        "modified_files_count": 1,
        "modified_files": [
            "util/autovector.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/959f86e5f8c5db2effd7c8d889ccd19f0339ff6e"
    },
    {
        "hash": "20d49da90ced7cda61ec49bcff3f55b58d8e0cf5",
        "author": "He Zhe",
        "date": "2019-03-18T11:35:06-07:00",
        "message": "utilities: Fix build failure with -Werror=maybe-uninitialized (#5074)\n\nSummary:\nInitialize magic_number to zero to avoid such failure.\nutilities/blob_db/blob_log_format.cc:91:3: error: 'magic_number' may be used\nuninitialized in this function [-Werror=maybe-uninitialized]\n   if (magic_number != kMagicNumber) {\n   ^~\n\nSigned-off-by: He Zhe <zhe.he@windriver.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5074\n\nDifferential Revision: D14505514\n\nPulled By: miasantreble\n\nfbshipit-source-id: 4334462958c2b9c5a7c68c6ab24dadf94ad70902",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_log_format.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/20d49da90ced7cda61ec49bcff3f55b58d8e0cf5"
    },
    {
        "hash": "dcde292c3bc2d43ed555218666ab83ff88c9797d",
        "author": "Zhichao Cao",
        "date": "2019-03-14T20:03:01-07:00",
        "message": "Add the -try_process_corrupted_trace option to trace_analyzer (#5067)\n\nSummary:\nIn the current trace_analyzer implementation, once the trace file has corrupted content, which can be caused by unexpected tracing operations or other reasons, trace_analyzer will print the error and stop analyzing.\n\nBy adding the -try_process_corrupted_trace option, user can try to process the corrupted trace file and get the analyzing results of the trace records from the beginning to the the first corrupted point in the trace file. Analyzing might fail even this option is enabled.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5067\n\nDifferential Revision: D14433037\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: d095233ba371726869af0def0cdee23b69896831",
        "modified_files_count": 1,
        "modified_files": [
            "tools/trace_analyzer_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dcde292c3bc2d43ed555218666ab83ff88c9797d"
    },
    {
        "hash": "5a5c0492dbe0c478c3ce5ef34b0dc73b42b91ab4",
        "author": "Andrew Kryczka",
        "date": "2019-03-12T13:10:39-07:00",
        "message": "ldb: set `total_order_seek` for scans (#5066)\n\nSummary:\nWithout `total_order_seek=true`, using this command with `prefix_extractor` set skips over lots of keys.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5066\n\nDifferential Revision: D14425967\n\nPulled By: sagar0\n\nfbshipit-source-id: f6f142733258d92604f920615be9266e1fe797f8",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5a5c0492dbe0c478c3ce5ef34b0dc73b42b91ab4"
    },
    {
        "hash": "05ebfebc177418a29acbb88a66c0b02058150a2a",
        "author": "Zhichao Cao",
        "date": "2019-03-08T14:10:17-08:00",
        "message": "Fixed the potential stack overflow of MixGraph in db_bench (#5051)\n\nSummary:\nIn the MixGraph benchmark of db_bench, The max buffer size used for value of KV-pair might be extremely large (64MB), which might cause function stack overflow in some platforms, reduced to 1MB.\n\nAdded the finished ops printing in MixGraph benchmark.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5051\n\nDifferential Revision: D14379571\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 24084fbe38f60f2902d9a40f6bc9a25e4e2c9bb9",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/05ebfebc177418a29acbb88a66c0b02058150a2a"
    },
    {
        "hash": "62eb2c23aaa5da1ce96fa7d8e080719a239727f5",
        "author": "Yi Wu",
        "date": "2019-03-08T11:18:45-08:00",
        "message": "Print data block index options to info log (#5039)\n\nSummary:\nPrint data block index type related options to info log\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5039\n\nDifferential Revision: D14387718\n\nPulled By: miasantreble\n\nfbshipit-source-id: 9df8f82eea83a8344c7d12a712486f656691bc4a",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_factory.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/62eb2c23aaa5da1ce96fa7d8e080719a239727f5"
    },
    {
        "hash": "04d3ac4e63cb3776193cb741b48deecadad37de7",
        "author": "Maysam Yabandeh",
        "date": "2019-03-08T09:39:00-08:00",
        "message": "Fix tsan compliant on AddPreparedBeforeMax (#5052)\n\nSummary:\nAdd a mutex to the test to synchronize before accessing the shared txn object.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5052\n\nDifferential Revision: D14386861\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 5b32e209840b210c35af53848dc77f489a76c95a",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/04d3ac4e63cb3776193cb741b48deecadad37de7"
    },
    {
        "hash": "18d2e4beb77abcacd5d89ee45be8c51b4851bd1f",
        "author": "Andrew Kryczka",
        "date": "2019-03-01T11:19:03-08:00",
        "message": "Run db_bench on database generated externally (#5017)\n\nSummary:\nAdded an option, `-use_existing_keys`, which can be set to run\nbenchmarks against an arbitrary existing database. Now users can\nbenchmark against their actual database rather than synthetic data.\n\nBefore the run begins, it loads all the keys into memory, then uses that\nset of keys rather than synthesizing new ones in `GenerateKeyFromInt`.\nThis is mainly intended for small-scale DBs where the memory consumption\nis not a concern.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5017\n\nDifferential Revision: D14270303\n\nPulled By: riversand963\n\nfbshipit-source-id: 6328df9dffb5e19170270dd00a69f4bbe424e5ed",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/18d2e4beb77abcacd5d89ee45be8c51b4851bd1f"
    },
    {
        "hash": "f83eecff99889883349ecec237b1a78edb1ad09f",
        "author": "Levi Tamasi",
        "date": "2019-02-28T11:54:24-08:00",
        "message": "Introduce an enum for flag types in LRUHandle (#5024)\n\nSummary:\nReplace the integers used for setting and querying the various\nflags in LRUHandle with enum values to improve readability.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5024\n\nDifferential Revision: D14263429\n\nPulled By: ltamasi\n\nfbshipit-source-id: b1b9ba95635265f122c2b40da73850eaac18227a",
        "modified_files_count": 1,
        "modified_files": [
            "cache/lru_cache.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f83eecff99889883349ecec237b1a78edb1ad09f"
    },
    {
        "hash": "cf98df34c1f812ed6c285110dceb5558f1ced92f",
        "author": "Maysam Yabandeh",
        "date": "2019-02-19T19:58:55-08:00",
        "message": "Change random seed for txn stress tests on each run (#5004)\n\nSummary:\nCurrently the transaction stress tests use thread id as the seed. Since the thread ids are likely to be the same across multiple runs, the seed is thus going to be the same. The patch includes time in calculating the seed to help covering a very different part of state space in each run of the stress tests. To be able to reproduce the bug in case the stress tests failed, it also prints out the time that was used to calculate the seed value.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5004\n\nDifferential Revision: D14144356\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 728ed522f550fc8b4f5f9f373259c05fe9a54556",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cf98df34c1f812ed6c285110dceb5558f1ced92f"
    },
    {
        "hash": "93f7e7a450ced3414f7443121d38fa5c536d9986",
        "author": "Siying Dong",
        "date": "2019-02-19T14:44:12-08:00",
        "message": "Temporarily Disable DBTest2.PresetCompressionDict (#5003)\n\nSummary:\nDBTest2.PresetCompressionDict is flaky. Temparily disable it for now.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5003\n\nDifferential Revision: D14139505\n\nPulled By: siying\n\nfbshipit-source-id: ebf1872d364b76b2cb021b489ea2f17ee997116a",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/93f7e7a450ced3414f7443121d38fa5c536d9986"
    },
    {
        "hash": "4db46aa2e678cdd59ae27653fbefeb438512ec8a",
        "author": "Siying Dong",
        "date": "2019-02-15T16:13:11-08:00",
        "message": "Fix LITE Build (#4989)\n\nSummary:\nLITE mode has EventListener to be an empty class. However in db_bench,\nit is used. When \"override\" is added to the functions, the build breaks. Fix it\nby keeping the listener empty in LITE mode.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4989\n\nDifferential Revision: D14108132\n\nPulled By: siying\n\nfbshipit-source-id: 80121aab35b1120e502b37b782301dd700692697",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4db46aa2e678cdd59ae27653fbefeb438512ec8a"
    },
    {
        "hash": "49ddd7ec4f744aaa2fb39718f715b6fe8897cc4d",
        "author": "Siying Dong",
        "date": "2019-02-12T16:54:55-08:00",
        "message": "Stats should be logged in INFO level (#4977)\n\nSummary:\nPreviously, stats were logged in warning level. This was done in that way because\npeople reported that it wasn't logged in MyRocks. However, later we learned that it turns\nout to be due to a bug in MyRocks, which is fixed in\nhttps://github.com/facebook/mysql-5.6/commit/79bb705e74b239d7030b724ea6bbd635eceec531\n\nNow we revert the stats logging to INFO level, so that it doesn't pollute the warning\nlevel logging.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4977\n\nDifferential Revision: D14058485\n\nPulled By: siying\n\nfbshipit-source-id: 19fab323c19d9bc88184287f209551f9a77ca0e6",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/49ddd7ec4f744aaa2fb39718f715b6fe8897cc4d"
    },
    {
        "hash": "eafb09a380bd2b1d807fdadc2606d534cd99fdbc",
        "author": "Sagar Vemuri",
        "date": "2019-02-12T13:59:44-08:00",
        "message": "Fix issues found by Clang Analyzer (#4976)\n\nSummary:\nFix issues found by Clang Analyzer.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4976\n\nDifferential Revision: D14054211\n\nPulled By: sagar0\n\nfbshipit-source-id: ec2053bae43af3b2ff3425306824c677e3ba70c2",
        "modified_files_count": 1,
        "modified_files": [
            "util/transaction_test_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eafb09a380bd2b1d807fdadc2606d534cd99fdbc"
    },
    {
        "hash": "c5a64cffd221a1f2e5878c261215769f00b41847",
        "author": "Yanqin Jin",
        "date": "2019-02-12T12:28:36-08:00",
        "message": "Avoid fsync on the same directory in atomic flush (#4817)\n\nSummary:\nIn `DBImpl::AtomicFlushMemTablesToOutputFiles`, we need to call fsync only once\non the same data directory. If two column families share a common directory for\ntheir data, we call fsync only once.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4817\n\nDifferential Revision: D13543689\n\nPulled By: riversand963\n\nfbshipit-source-id: 4701d77c96a47802fbf6cb9f3337ee65d46b95f5",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c5a64cffd221a1f2e5878c261215769f00b41847"
    },
    {
        "hash": "576d2d6c60245a7b5846728310a666cfadd538fd",
        "author": "Maysam Yabandeh",
        "date": "2019-02-11T15:01:46-08:00",
        "message": "WritePrepared: relax assert in compaction iterator (#4969)\n\nSummary:\nIf IsInSnapshot(seq2, snapshot) determines that the snapshot is released, the future queries IsInSnapshot(seq1, snapshot) could still return a definitive answer of true if for example seq1 is too old that is determined visible in all snapshots. This violates a recently added assert statement to compaction iterator. The patch relaxes the assert.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4969\n\nDifferential Revision: D14030998\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 6db53db0e37d0a20e8997ef2c1004b8627614ab9",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/576d2d6c60245a7b5846728310a666cfadd538fd"
    },
    {
        "hash": "39fb88f14ed6413b6aafa85fa09f2ad1a3a97e3e",
        "author": "Maysam Yabandeh",
        "date": "2019-02-08T16:51:17-08:00",
        "message": "Reset size_ to 0 in PinnableSlice::Reset (#4962)\n\nSummary:\nIt would avoid bugs if the reused PinnableSlice is not actually reassigned and yet the programmer makes conclusions based on the size of the Slice.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4962\n\nDifferential Revision: D14012710\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 23f4e173386b5461fd5650f44cde470805f4e816",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/slice.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/39fb88f14ed6413b6aafa85fa09f2ad1a3a97e3e"
    },
    {
        "hash": "d9c9f3c8093f703316e7f93931580c297d074457",
        "author": "Siying Dong",
        "date": "2019-02-05T17:20:02-08:00",
        "message": "db_bench: fix \"micros/op\" reporting (#4949)\n\nSummary:\nhttps://github.com/facebook/rocksdb/commit/4985a9f73b9fb8a0323fbbb06222ae1f758a6b1d#diff-e5276985b26a0551957144f4420a594bR511\nchanges the meaning of latency reporting from running time per query, to elapse_time / #ops, without providing a reason why.\nConsidering that this is a counter-intuitive reporting, Reverting the change.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4949\n\nDifferential Revision: D13964684\n\nPulled By: siying\n\nfbshipit-source-id: d6304d3d4b5a802daa292302623c7dbca9a680bc",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d9c9f3c8093f703316e7f93931580c297d074457"
    },
    {
        "hash": "71cae59a99ded86bccb7600293705fa99cff1bf0",
        "author": "Zhongyi Xie",
        "date": "2019-02-05T17:01:11-08:00",
        "message": "exclude test CompactFilesShouldTriggerAutoCompaction from ROCKSDB_LITE (#4950)\n\nSummary:\nThis will fix the following build error:\n\n> db/db_test.cc: In member function ‘virtual void rocksdb::DBTest_CompactFilesShouldTriggerAutoCompaction_Test::TestBody()’:\n> db/db_test.cc:5462:8: error: ‘class rocksdb::DB’ has no member named ‘GetColumnFamilyMetaData’\n>    db_->GetColumnFamilyMetaData(db_->DefaultColumnFamily(), &cf_meta_data);\n> db/db_test.cc:5490:8: error: ‘class rocksdb::DB’ has no member named ‘GetColumnFamilyMetaData’\n>    db_->GetColumnFamilyMetaData(db_->DefaultColumnFamily(), &cf_meta_data);\n> db/db_test.cc:5499:8: error: ‘class rocksdb::DB’ has no member named ‘GetColumnFamilyMetaData’\n>    db_->GetColumnFamilyMetaData(db_->DefaultColumnFamily(), &cf_meta_data);\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4950\n\nDifferential Revision: D13965378\n\nPulled By: miasantreble\n\nfbshipit-source-id: a975435476fe555b1cd9d5da263ee3da3acdea56",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/71cae59a99ded86bccb7600293705fa99cff1bf0"
    },
    {
        "hash": "8fe073324f5806c229065b22c8d12a35b9c42e98",
        "author": "Siying Dong",
        "date": "2019-02-05T10:53:35-08:00",
        "message": "BYTES_READ stats miscount for NotFound cases (#4938)\n\nSummary:\nIn NotFound cases, stats BYTES_READ and perf_context.get_read_bytes is still be increased. The amount increased will be\nwhatever size of the string or PinnableSlice that users passed in as the output data structure. This is wrong. Fix this by not\nincreasing these two counters.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4938\n\nDifferential Revision: D13908963\n\nPulled By: siying\n\nfbshipit-source-id: 60bce42e4fbb9862bba3da36dbc27b2963ea6162",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8fe073324f5806c229065b22c8d12a35b9c42e98"
    },
    {
        "hash": "31221bb7e80d71bac8cd5589e241be9a1cf11d58",
        "author": "yangzhijia",
        "date": "2019-02-05T10:20:16-08:00",
        "message": "Properly set upper bound of subcompaction output (#4879) (#4898)\n\nSummary:\nFix the ouput overlap bug when using subcompactions, the upper bound of output\nfile was extended incorrectly.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4898\n\nDifferential Revision: D13736107\n\nPulled By: ajkr\n\nfbshipit-source-id: 21dca09f81d5f07bf2766bf566f9b50dcab7d8e3",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/31221bb7e80d71bac8cd5589e241be9a1cf11d58"
    },
    {
        "hash": "30468d8eb44dc861576b98827853e836292df7ad",
        "author": "Maysam Yabandeh",
        "date": "2019-02-01T09:41:27-08:00",
        "message": "Fix analyze error on possible un-initialized value (#4937)\n\nSummary:\nThe patch fixes the following analyze error by checking the return status of ParseInternalKey.\n```\ndb/merge_helper.cc:306:23: warning: The right operand of '==' is a garbage value\n    assert(kTypeMerge == orig_ikey.type);\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4937\n\nDifferential Revision: D13908506\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 68d7771e75519da3d4bd807fd231675ec12093f6",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/30468d8eb44dc861576b98827853e836292df7ad"
    },
    {
        "hash": "4091597c671bb9a9c628dd85cd7b449f6b4616c7",
        "author": "Young Tack Jin",
        "date": "2019-01-31T19:08:37-08:00",
        "message": "fix for nvme device path (#4866)\n\nSummary:\nnvme device path doesn't have \"block\" as like \"nvme/nvme0/nvme0n1\"\nor \"nvme/nvme0/nvme0n1/nvme0n1p1\". the last directory such as\n\"nvme0n1p1\" should be removed if nvme drive is partitioned.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4866\n\nDifferential Revision: D13627824\n\nPulled By: riversand963\n\nfbshipit-source-id: 09ab968f349f3dbb890beea20193f1359b17d317",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4091597c671bb9a9c628dd85cd7b449f6b4616c7"
    },
    {
        "hash": "0ea57115a39d8f065444f7b8593feac8672678b1",
        "author": "Andrew Kryczka",
        "date": "2019-01-31T14:43:40-08:00",
        "message": "Fix `WriteBatchBase::DeleteRange` API comment (#4935)\n\nSummary:\nThe `DeleteRange` end key is exclusive, not inclusive. Updated API comment accordingly.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4935\n\nDifferential Revision: D13905406\n\nPulled By: ajkr\n\nfbshipit-source-id: f577db841a279427991ecf9005cd56b30c8eb3c7",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/write_batch_base.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ea57115a39d8f065444f7b8593feac8672678b1"
    },
    {
        "hash": "4978caaa6f793975f157c13f489ebdb06dc12017",
        "author": "Sagar Vemuri",
        "date": "2019-01-28T13:33:23-08:00",
        "message": "Remove a redundant call to TableFileName in CompactionJob::FinishCompactionOutputFile (#4925)\n\nSummary:\nWhile stepping through the code I noticed that there is a redundant call to TableFileName.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4925\n\nDifferential Revision: D13845749\n\nPulled By: sagar0\n\nfbshipit-source-id: 31db45716b4d720e0e0350dd457b49d6f1848e7d",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4978caaa6f793975f157c13f489ebdb06dc12017"
    },
    {
        "hash": "e2547103fd73e4565c8a430ab6b990f349702003",
        "author": "zhichao-cao",
        "date": "2019-01-28T12:39:57-08:00",
        "message": "Fix the build error caused by the dynamic array (#4918)\n\nSummary:\nIn the MixGraph benchmark of db_bench #4788 , the char array is initialized with an argument from user's input, which can cause build error on some platforms. Also, the msg char array size can be potentially smaller than the printed data, which should be extended from 100 to 256.\n\nTested with make check.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4918\n\nDifferential Revision: D13844298\n\nPulled By: sagar0\n\nfbshipit-source-id: 33c4809c5c4438f0a9f7b289d3f42e20c545bbab",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e2547103fd73e4565c8a430ab6b990f349702003"
    },
    {
        "hash": "bc7d1661a8792f72f4d12c73fd8ca254e6814f90",
        "author": "Siying Dong",
        "date": "2019-01-25T18:14:26-08:00",
        "message": "Fix test name typo in PlainTableDBTest\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/4926\n\nDifferential Revision: D13830196\n\nPulled By: siying\n\nfbshipit-source-id: e06bf2a6cd273b5eb18dfd82bdd35ffce197d021",
        "modified_files_count": 1,
        "modified_files": [
            "db/plain_table_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bc7d1661a8792f72f4d12c73fd8ca254e6814f90"
    },
    {
        "hash": "43defe987223ecb93fbbf013cb5b2953befc6a30",
        "author": "PeifengSi",
        "date": "2019-01-23T18:00:56-08:00",
        "message": "Correct the code comment in Compaction::KeyNotExistsBeyondOutputLevel (#4902)\n\nSummary:\nEven one key falls in a file's range, we can not infer it definitely exists in this file.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4902\n\nDifferential Revision: D13795018\n\nPulled By: siying\n\nfbshipit-source-id: 590956f727e9440fcdee55ad9541ace934c64914",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/43defe987223ecb93fbbf013cb5b2953befc6a30"
    },
    {
        "hash": "27054d837b31d6cb358756adf9711c40bda74ecf",
        "author": "Andrew Kryczka",
        "date": "2019-01-23T15:39:05-08:00",
        "message": "Call NewDataBlockIterator with correct arguments in DB::Get (#4913)\n\nSummary:\nThe pointer `get_context` was passed as the value for the boolean argument `index_key_is_full`. Luckily the pointer was always non-null so evaluated to true which is the correct value for the boolean argument. But we were missing out on batch updates to stats since we were not passing anything for the `GetContext*` argument and it defaults to `nullptr`.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4913\n\nDifferential Revision: D13791449\n\nPulled By: ajkr\n\nfbshipit-source-id: dbe40bf406c64d34cb5298604145d18b9e0ca9be",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/27054d837b31d6cb358756adf9711c40bda74ecf"
    },
    {
        "hash": "0cead31d102d8e183037768b95a04b0ac03844a4",
        "author": "Sagar Vemuri",
        "date": "2019-01-23T13:33:02-08:00",
        "message": "Fix Clang static analyzer warning in db_bench (#4910)\n\nSummary:\nFixed clang static analyzer warning about division by 0.\n```\nar: creating librocksdb_debug.a\ntools/db_bench_tool.cc:4650:43: warning: Division by zero\n      int pos = static_cast<int>(rand_num % range_);\n                                 ~~~~~~~~~^~~~~~~~\n1 warning generated.\nmake: *** [analyze] Error 1\n```\n\nThis is from the new code I recently merged in ce8e88d2d7a62e2a08c4109aac84cb9e95ed359b.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4910\n\nDifferential Revision: D13788037\n\nPulled By: sagar0\n\nfbshipit-source-id: f48851dca85047c19fbb1a361e25ce643aa4c7ea",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0cead31d102d8e183037768b95a04b0ac03844a4"
    },
    {
        "hash": "cbe02392708fdc64b80344c1b2699bb0b851b86f",
        "author": "Zhongyi Xie",
        "date": "2019-01-22T22:44:17-08:00",
        "message": "add cast to avoid loss of precision error (#4906)\n\nSummary:\nthis PR address the following error:\n> tools/db_bench_tool.cc:4776:68: error: implicit conversion loses integer precision: 'int64_t' (aka 'long') to 'unsigned int' [-Werror,-Wshorten-64-to-32]\n        s = db_with_cfh->db->Put(write_options_, key, gen.Generate(value_size));\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4906\n\nDifferential Revision: D13780185\n\nPulled By: miasantreble\n\nfbshipit-source-id: 1c83a77d341099518c72f0f4a63e97ab9c4784b3",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cbe02392708fdc64b80344c1b2699bb0b851b86f"
    },
    {
        "hash": "ce8e88d2d7a62e2a08c4109aac84cb9e95ed359b",
        "author": "Zhichao Cao",
        "date": "2019-01-22T10:44:26-08:00",
        "message": "Generate mixed workload with Get, Put, Seek in db_bench (#4788)\n\nSummary:\nBased on the specific workload models (key access distribution, value size distribution, and iterator scan length distribution, the QPS variation), the MixGraph benchmark generate the synthetic workload according to these distributions which can reflect the real-world workload characteristics.\n\nAfter user enable the tracing function, they will get the trace file. By analyzing the trace file with the trace_analyzer tool, user can generate a set of statistic data files including. The *_accessed_key_stats.txt,  *-accessed_value_size_distribution.txt, *-iterator_length_distribution.txt, and *-qps_stats.txt are mainly used to fit the Matlab model fitting. After that, user can get the parameters of the workload distributions (the modeling details are described: [here](https://github.com/facebook/rocksdb/wiki/RocksDB-Trace%2C-Replay%2C-and-Analyzer))\n\nThe key access distribution follows the The two-term power model. The probability density function is: `f(x) = ax^{b}+c`. The corresponding parameters are key_dist_a, key_dist_b, and key_dist_c in db_bench\n\nFor the value size distribution and iterator scan length distribution, they both follow the Generalized Pareto Distribution. The probability density function is `f(x) = (1/sigma)(1+k*(x-theta)/sigma))^{-1-1/k)`. The parameters are: value_k, value_theta, value_sigma and iter_k, iter_theta, iter_sigma. For more information about the Generalized Pareto Distribution, users can find the [wiki](https://en.wikipedia.org/wiki/Generalized_Pareto_distribution) and [Matalb page](https://www.mathworks.com/help/stats/generalized-pareto-distribution.html)\n\nAs for the QPS, it follows the diurnal pattern. So Sine is a good model to fit it. `F(x) = sine_a*sin(sine_b*x + sine_c) + sine_d`. The trace_will tell you the average QPS in the print out resutls, which is sine_d. After user fit the \"*-qps_stats.txt\" to the Matlab model, user can get the sine_a, sine_b, and sine_c. By using the 4 parameters, user can control the QPS variation including the period, average, changes.\n\nTo use the bench mark, user can indicate the following parameters as examples:\n```\n-benchmarks=\"mixgraph\" -key_dist_a=0.002312 -key_dist_b=0.3467 -value_k=0.9233 -value_sigma=226.4092 -iter_k=2.517 -iter_sigma=14.236 -mix_get_ratio=0.7 -mix_put_ratio=0.25 -mix_seek_ratio=0.05 -sine_mix_rate_interval_milliseconds=500 -sine_a=15000 -sine_b=1 -sine_d=20000\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4788\n\nDifferential Revision: D13573940\n\nPulled By: sagar0\n\nfbshipit-source-id: e184c27e07b4f1bc0b436c2be36c5090c1fb0222",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ce8e88d2d7a62e2a08c4109aac84cb9e95ed359b"
    },
    {
        "hash": "73ff15c07b0499ec22b19d3b3933dbb431ab3a7a",
        "author": "tom wang",
        "date": "2019-01-17T12:36:36-08:00",
        "message": "WritePrepared: fix typo in comments\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/4891\n\nDifferential Revision: D13718016\n\nPulled By: miasantreble\n\nfbshipit-source-id: 90bd372cff453a1c2d104c1cf49731d5dd770c14",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_txn.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/73ff15c07b0499ec22b19d3b3933dbb431ab3a7a"
    },
    {
        "hash": "dd9eca1c586c7e28297ccdeaf92c4fbcc753cf51",
        "author": "Yanqin Jin",
        "date": "2019-01-17T11:57:31-08:00",
        "message": "Remove unused variable to fix clang compilation err (#4893)\n\nSummary:\nas title.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4893\n\nDifferential Revision: D13716733\n\nPulled By: riversand963\n\nfbshipit-source-id: 6811d6a99fe2094d5344f854e8939f01238b2adb",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dd9eca1c586c7e28297ccdeaf92c4fbcc753cf51"
    },
    {
        "hash": "7d13f307ff189c25a6e51f1782b3addd83859989",
        "author": "Siying Dong",
        "date": "2019-01-15T16:46:04-08:00",
        "message": "Improve Error Message When wal_dir doesn't exist (#4874)\n\nSummary:\nRight now the error mesage when options.wal_dir doesn't exist is not helpful to users. Be more specific\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4874\n\nDifferential Revision: D13642425\n\nPulled By: siying\n\nfbshipit-source-id: 9a3172ed0f799af233b0f3b2e5e35bc7ce04c7b5",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_open.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7d13f307ff189c25a6e51f1782b3addd83859989"
    },
    {
        "hash": "301da345aed32577da649ffdcea0f3b5e2fe979f",
        "author": "Yanqin Jin",
        "date": "2019-01-11T17:43:37-08:00",
        "message": "Make a copy of MutableCFOptions to avoid race condition (#4876)\n\nSummary:\nIf we do not do this, then reading MutableCFOptions may have a race condition\nwith SetOptions which modifies MutableCFOptions.\n\nAlso reserve space in advance for vectors to avoid reallocation changing the\naddress of its elements.\n\nTest plan\n```\n$make clean && make -j32 all check\n$make clean && COMPILE_WITH_TSAN=1 make -j32 all check\n$make clean && COMPILE_WITH_ASAN=1 make -j32 all check\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4876\n\nDifferential Revision: D13644500\n\nPulled By: riversand963\n\nfbshipit-source-id: 4b8112c5c819d5a2922bb61ad1521b3d2fb2fd47",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/301da345aed32577da649ffdcea0f3b5e2fe979f"
    },
    {
        "hash": "856ac244848a77bd93cb6bef70a69c8647920288",
        "author": "Maysam Yabandeh",
        "date": "2019-01-11T13:46:23-08:00",
        "message": "WritePrepared: fix race condition on GetSnapshotListFromDB (#4872)\n\nSummary:\nFixes a typo that made mutex_ to remain unlocked when GetSnapshotListFromDB called from WritePreparedTxnDB.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4872\n\nDifferential Revision: D13640381\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 50f6600568f9092b4b43115f6ebd96e6c7388ad7",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_txn_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/856ac244848a77bd93cb6bef70a69c8647920288"
    },
    {
        "hash": "6a4ec41fedf348fff45eb2afe6d43fdb70e2f252",
        "author": "Zhongyi Xie",
        "date": "2019-01-11T12:17:34-08:00",
        "message": "add assert to silence clang warning (#4871)\n\nSummary:\ncurrently clang analyze fails with the following warning:\n> utilities/transactions/write_prepared_transaction_test.cc:1451:5: warning: Forming reference to null pointer\n    ASSERT_GT(wp_db->max_evicted_seq_, 0);  // max after recovery\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4871\n\nDifferential Revision: D13638053\n\nPulled By: miasantreble\n\nfbshipit-source-id: b192b0c13c411c58defc9e280b34cdfcab3fa8e3",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6a4ec41fedf348fff45eb2afe6d43fdb70e2f252"
    },
    {
        "hash": "75714b4c08e42ec3963641edb68b694ab6cc5984",
        "author": "Yanqin Jin",
        "date": "2019-01-09T15:55:03-08:00",
        "message": "Initialize two members in PerfContext (#4859)\n\nSummary:\nas titled.\nCurrently it's possible to create a local object of type PerfContext since it's\npart of public API. Then it's safe to initialize the two members to 0.\nIf PerfContext is created as thread-local object, then all members are\nzero-initialized according to C++ standard.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4859\n\nDifferential Revision: D13614504\n\nPulled By: riversand963\n\nfbshipit-source-id: 406ff548e105a074f379ad1054d56fece5f524a0",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/perf_context.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/75714b4c08e42ec3963641edb68b694ab6cc5984"
    },
    {
        "hash": "ffc9f84649b23cc33ba6b7fc7a97561d9bb1cc93",
        "author": "Yanqin Jin",
        "date": "2019-01-08T17:19:09-08:00",
        "message": "Free memory after use\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/4857\n\nDifferential Revision: D13602688\n\nPulled By: riversand963\n\nfbshipit-source-id: 993419a6afb982a7a701ff71daebebb4b4a6b265",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ffc9f84649b23cc33ba6b7fc7a97561d9bb1cc93"
    },
    {
        "hash": "e686caffec20b7d0a1f4da4ac598d3d86048f87d",
        "author": "Yanqin Jin",
        "date": "2019-01-07T16:47:26-08:00",
        "message": "Remove unnecessary assersion in AtomicFlushStressTest::TestCheckpoint (#4846)\n\nSummary:\nas titled.\nWe can remove the assersion because we do not perform verification in\nAtomicFlushStressTest::TestCheckpoint for similar reasons to TestGet, TestPut,\netc.\nTherefore, we override TestCheckpoint in AtomicFlushStressTest so that the\nassertion `rand_column_families.size() == rand_keys.size()' is removed, and we\ndo not verify the DB in this function.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4846\n\nDifferential Revision: D13583377\n\nPulled By: riversand963\n\nfbshipit-source-id: 03647f3da67e27a397413fd666e3bb43003bf596",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e686caffec20b7d0a1f4da4ac598d3d86048f87d"
    },
    {
        "hash": "0ed98bf89e77f1966893979e79ebe717188c709f",
        "author": "Maysam Yabandeh",
        "date": "2019-01-07T14:57:03-08:00",
        "message": "WritePrepared: fix snapshot sequence in rollback (#4851)\n\nSummary:\nThe rollback algorithm in WritePrepared transactions requires reading the values before the transaction start. Currently it uses the prepare_seq -1 as the snapshot sequence number for the read. This is not correct since the passed sequence number must be for a valid snapshot. The patch fixes it by passing kMaxSequenceNumber instead. This is fine since all the writes done by the aborted transaction will be skipped during the read anyway.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4851\n\nDifferential Revision: D13592773\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: ff1bf92ea9909d4cccb173bdff49febc0e9eb7a2",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_txn.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ed98bf89e77f1966893979e79ebe717188c709f"
    },
    {
        "hash": "42135523a0e24d4ac524d535174aa6073e4a862c",
        "author": "tom wang",
        "date": "2019-01-07T13:52:59-08:00",
        "message": "modify comments about flush_queue_\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/4850\n\nDifferential Revision: D13591940\n\nPulled By: sagar0\n\nfbshipit-source-id: 617794e0a41d0f4554d40871180b061e84189fc5",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/42135523a0e24d4ac524d535174aa6073e4a862c"
    },
    {
        "hash": "cf852fdf55feb4b06c65e646ee1bd10021c6df40",
        "author": "Yi Wu",
        "date": "2019-01-04T16:31:02-08:00",
        "message": "Minor fix: single delete a blob value is not a mismatch (#4848)\n\nSummary:\nIn compaction iterator, if the next value of single delete is a blob value, it should not treated as mismatch. This is only a minor fix and doesn't affect correctness.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4848\n\nDifferential Revision: D13585812\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 0ff6223fa03a644ac9fd8a2d77f9d6711d0a62b0",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cf852fdf55feb4b06c65e646ee1bd10021c6df40"
    },
    {
        "hash": "e4feb7860678e5c024b067c5309a4687f055973a",
        "author": "Siying Dong",
        "date": "2019-01-03T11:05:19-08:00",
        "message": "Try to fix DBSSTTest.RateLimitedDelete flakiness (#4840)\n\nSummary:\nDBSSTTest.RateLimitedDelete is flakey. The root cause is not completely identified, but\nthe compaction waiting in the test doesn't strictly wait for compaction cleaning to finish, which\nmay cause test flakiness. Fix it first and see whether the failures still happen.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4840\n\nDifferential Revision: D13567273\n\nPulled By: siying\n\nfbshipit-source-id: 6fce38b912aff92a925231e7aa9bb0fef892761a",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e4feb7860678e5c024b067c5309a4687f055973a"
    },
    {
        "hash": "565b5bdc421ef55348ef0885666afa34107609ef",
        "author": "Yanqin Jin",
        "date": "2019-01-02T17:40:53-08:00",
        "message": "Add support for read-only db chkpt stress (#4690)\n\nSummary:\nUpdated stress test will support testing of db in read-only mode.\nThe user has to make sure that only read/scan operations are enabled.\nThis PR relies on #4681.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4690\n\nDifferential Revision: D13102741\n\nPulled By: riversand963\n\nfbshipit-source-id: f5a36b34db187fe12dd355f7eda161f99d6c75e4",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/565b5bdc421ef55348ef0885666afa34107609ef"
    },
    {
        "hash": "8bf73208a45a8f73fdb1c49fada816835a4c5cf0",
        "author": "Abhishek Madan",
        "date": "2018-12-19T15:45:37-08:00",
        "message": "Remove stale TODO (#4800)\n\nSummary:\nThis TODO was already addressed, but I forgot to remove it\nbefore landing the PR it came from.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4800\n\nDifferential Revision: D13522284\n\nPulled By: abhimadan\n\nfbshipit-source-id: 7766bc4f5b54e47d355cf26137ef5e86c604472a",
        "modified_files_count": 1,
        "modified_files": [
            "db/range_del_aggregator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8bf73208a45a8f73fdb1c49fada816835a4c5cf0"
    },
    {
        "hash": "671a7eb36f8c3259c151ad577d82cd230acb62fc",
        "author": "Yanqin Jin",
        "date": "2018-12-18T16:47:23-08:00",
        "message": "Avoid switching empty memtable in certain cases (#4792)\n\nSummary:\nin certain cases, we do not perform memtable switching if the active\nmemtable of the column family is empty. Two exceptions:\n1. In manual flush, if cached_recoverable_state_empty_ is false, then we need\n   to switch memtable due to requirement of transaction.\n2. In switch WAL, we need to switch memtable anyway because we have to seal the\n   memtable if the WAL on which it depends will be closed.\n\nThis change can potentially delay the occurence of write stalls because number\nof memtables increase more slowly.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4792\n\nDifferential Revision: D13499501\n\nPulled By: riversand963\n\nfbshipit-source-id: 91c9b17ae753578578039f3851667d93610005e1",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/671a7eb36f8c3259c151ad577d82cd230acb62fc"
    },
    {
        "hash": "4ed3c1eb8875f9ba5fe4aa585ddac22a429a1cd9",
        "author": "Maysam Yabandeh",
        "date": "2018-12-14T13:47:36-08:00",
        "message": "Fix flaky test DeleteFileRange (#4784)\n\nSummary:\nThe test fails sporadically expecting the DB to be empty after DeleteFilesInRange(..., nullptr, nullptr) call which is not. Debugging shows cases where the files are skipped since they are being compacted. The patch fixes the test by waiting for the last CompactRange to finish before calling DeleteFilesInRange.\nVerified by\n```\n~/gtest-parallel/gtest-parallel ./db_compaction_test --gtest_filter=DBCompactionTest.DeleteFileRange --repeat=10000\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4784\n\nDifferential Revision: D13469402\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 3d8f44abe205b82c69f01e7edf27e1f8098248e1",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4ed3c1eb8875f9ba5fe4aa585ddac22a429a1cd9"
    },
    {
        "hash": "349542332a8fbfef3bcc9f6ace013919f2becd98",
        "author": "Maysam Yabandeh",
        "date": "2018-12-13T19:27:38-08:00",
        "message": "Fix race condition on options_file_number_ (#4780)\n\nSummary:\noptions_file_number_ must be written under db::mutex_ sine its read is protected by mutex_ in ::GetLiveFiles(). However currently it is written in ::RenameTempFileToOptionsFile() which according to its contract must be called without holding db::mutex_. The patch fixes the race condition by also acquitting the mutex_ before writing options_file_number_. Also it does that only if the rename of option file is successful.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4780\n\nDifferential Revision: D13461411\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 2d5bae96a1f3e969ef2505b737cf2d7ae749787b",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/349542332a8fbfef3bcc9f6ace013919f2becd98"
    },
    {
        "hash": "67e5b5420e8c66c6b9b0aab44342c0b741dccb47",
        "author": "Maysam Yabandeh",
        "date": "2018-12-13T14:47:08-08:00",
        "message": "Reduce runtime of compact_on_deletion_collector_test (#4779)\n\nSummary:\nIt sometimes times out with it is run with TSAN. The patch reduces the iteration from 50 to 30. This reduces the normal runtime from 5.2 to 3.1 seconds and should similarly address the TSAN timeout problem.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4779\n\nDifferential Revision: D13456862\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: fdc0ad7d781b1c33b771d2415ff5fa2f1b5e2537",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/table_properties_collectors/compact_on_deletion_collector_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/67e5b5420e8c66c6b9b0aab44342c0b741dccb47"
    },
    {
        "hash": "0aa17c1002ea146c89c61e7fe2f3a1e95585ca6c",
        "author": "Maysam Yabandeh",
        "date": "2018-12-12T16:32:14-08:00",
        "message": "Fix flaky test DBCompactionTest::DeleteFileRange (#4776)\n\nSummary:\nThe test has been failing sporadically probably because the configured compaction options were actually unused. Verified that by the following:\n```\n~/gtest-parallel/gtest-parallel ./db_compaction_test --gtest_filter=DBCompactionTest.DeleteFileRange --repeat=1000\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4776\n\nDifferential Revision: D13441052\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: d35075b9e6cef9b9c9d0d571f9cd72ade8eda55d",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0aa17c1002ea146c89c61e7fe2f3a1e95585ca6c"
    },
    {
        "hash": "ae25546a7a7e0b88b3f4fc3ba7ca6ad4638e6fca",
        "author": "Siying Dong",
        "date": "2018-12-11T13:55:02-08:00",
        "message": "Direct I/O Close() shouldn't rewrite the last block (#4771)\n\nSummary:\nIn Direct I/O case, WritableFileWriter::Close() rewrites the last block again, even if there is nothing new. The reason is that, Close() flushes the buffer. For non-direct I/O case, the buffer is empty in this case so it is a no-op. However, in direct I/O case, the partial data in the last block is kept in the buffer because it needs to be rewritten for the next write. This piece of data is flushed again. This commit fixes it by skipping this write out if `pending_sync_` flag shows that there isn't new data sync last sync.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4771\n\nDifferential Revision: D13420426\n\nPulled By: siying\n\nfbshipit-source-id: 9d39ec9a215b1425d4ed40d85e0eba1f5daa75c6",
        "modified_files_count": 1,
        "modified_files": [
            "util/file_reader_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ae25546a7a7e0b88b3f4fc3ba7ca6ad4638e6fca"
    },
    {
        "hash": "dde3ef111691df8d75ed37da727860c4556de187",
        "author": "Sagar Vemuri",
        "date": "2018-12-11T10:21:37-08:00",
        "message": "Change directory where ExternalSSTFileBasicTest runs (#4766)\n\nSummary:\nChange the directory where ExternalSSTFileBasicTest* tests run.\n\n**Problem:**\nWithout this change, I spent considerable time chasing around a non-existent issue as ExternalSSTFileTest.* and ExternalSSTFileBasicTest.* create similar directories.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4766\n\nDifferential Revision: D13409384\n\nPulled By: sagar0\n\nfbshipit-source-id: c33e1f4d505dfa6efbc788d6c57cdb680053ded3",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dde3ef111691df8d75ed37da727860c4556de187"
    },
    {
        "hash": "64aabc918306aeb53ca4c6e35ddee090317903c5",
        "author": "Abhishek Madan",
        "date": "2018-12-10T12:38:31-08:00",
        "message": "Properly set smallest key of subcompaction output (#4723)\n\nSummary:\nIt is possible to see a situation like the following when\nsubcompactions are enabled:\n1. A subcompaction boundary is set to `[b, e)`.\n2. The first output file in a subcompaction has `c@20` as its smallest key\n3. The range tombstone `[a, d)30` is encountered.\n4. The tombstone is written to the range-del meta block and the new\n   smallest key is set to `b@0` (since no keys in this subcompaction's\n   output can be smaller than `b`).\n5. A key `b@10` in a lower level will now reappear, since it is not\n   covered by the truncated start key `b@0`.\n\nIn general, unless the smallest data key in a file has a seqnum of 0, it\nis not safe to truncate a tombstone at the start key to have a seqnum of\n0, since it can expose keys with a seqnum greater than 0 but less than\nthe tombstone's actual seqnum.\n\nTo fix this, when the lower bound of a file is from the subcompaction\nboundaries, we now set the seqnum of an artificially extended smallest\nkey to the tombstone's seqnum. This is safe because subcompactions\noperate over disjoint sets of keys, and the subcompactions that can\nexperience this problem are not the first subcompaction (which is\nunbounded on the left).\n\nFurthermore, there is now an assertion to detect the described anomalous\ncase.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4723\n\nDifferential Revision: D13236188\n\nPulled By: abhimadan\n\nfbshipit-source-id: a6da6a113f2de1e2ff307ca72e055300c8fe5692",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/64aabc918306aeb53ca4c6e35ddee090317903c5"
    },
    {
        "hash": "21fca397cc3e2cd2535ac8d68e49349106b51de6",
        "author": "Maysam Yabandeh",
        "date": "2018-12-10T09:56:21-08:00",
        "message": "Fix inline comments for assumed_tracked (#4762)\n\nSummary:\nFix the definition of assumed_tracked in Transaction that was introduced in #4680\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4762\n\nDifferential Revision: D13399150\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 2a30fe49e3c44adacd7e45cd48eae95023ca9dca",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/transaction.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/21fca397cc3e2cd2535ac8d68e49349106b51de6"
    },
    {
        "hash": "c41c60be135e529e8793bb2045b1ff3473043a96",
        "author": "Pengchao Wang",
        "date": "2018-12-07T10:13:54-08:00",
        "message": "fix tombstone collectable test (#4755)\n\nSummary:\nthe original test does not give enough time difference between tombstone write time and the expire time point, which make test flaky.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4755\n\nReviewed By: maysamyabandeh\n\nDifferential Revision: D13369681\n\nPulled By: wpc\n\nfbshipit-source-id: 22576f354c63cd0b39d8b35c3913303707503ea9",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/cassandra/cassandra_format_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c41c60be135e529e8793bb2045b1ff3473043a96"
    },
    {
        "hash": "b0f3d9b47826ef0212429d8af0895e546a0c5ff1",
        "author": "Zhongyi Xie",
        "date": "2018-11-30T12:08:55-08:00",
        "message": "fix unused param \"options\" error in jemalloc_nodump_allocator.cc (#4738)\n\nSummary:\nCurrently tests are failing on master with the following message:\n> util/jemalloc_nodump_allocator.cc:132:8: error: unused parameter ‘options’ [-Werror=unused-parameter]\n Status NewJemallocNodumpAllocator(\n\nThis PR attempts to fix the issue\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4738\n\nDifferential Revision: D13278804\n\nPulled By: miasantreble\n\nfbshipit-source-id: 64a6204aa685bd85d8b5080655cafef9980fac2f",
        "modified_files_count": 1,
        "modified_files": [
            "util/jemalloc_nodump_allocator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b0f3d9b47826ef0212429d8af0895e546a0c5ff1"
    },
    {
        "hash": "7dbee387164c9ccdaff5b12106cf805291df3e7b",
        "author": "Kefu Chai",
        "date": "2018-11-29T11:26:41-08:00",
        "message": "db/repair: reset Repair::db_lock_ in ctor (#4683)\n\nSummary:\nthere is chance that\n\n* the caller tries to repair the db when holding the db_lock, in\n  that case the env implementation might not set the `lock`\n  parameter of Repairer::Run().\n* the caller somehow never calls Repairer::Run().\n\neither way, the desctructor of Repair will compare the uninitialized\ndb_lock_ with nullptr, and tries to unlock it. there is good chance\nthat the db_lock_ is not nullptr, then boom.\n\nSigned-off-by: Kefu Chai <tchaikov@gmail.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4683\n\nDifferential Revision: D13260287\n\nPulled By: riversand963\n\nfbshipit-source-id: 878a119d2e9f10a0fa17ee62cf3fb24b33d49fa5",
        "modified_files_count": 1,
        "modified_files": [
            "db/repair.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7dbee387164c9ccdaff5b12106cf805291df3e7b"
    },
    {
        "hash": "8d9b4d97410a9f61f04c4c7b29ddf4bee4d5bc7a",
        "author": "anand76",
        "date": "2018-11-29T10:51:41-08:00",
        "message": "Fix failure of sst_file_reader_test in LITE mode regression test (#4725)\n\nSummary:\nAdd a dummy main() in sst_file_reader_test for ROCKSDB_LITE to fix link failure in regression\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4725\n\nDifferential Revision: D13252885\n\nPulled By: anand1976\n\nfbshipit-source-id: 0e22b964815e2bf01aff7d03ed4ae59d44fa86f1",
        "modified_files_count": 1,
        "modified_files": [
            "table/sst_file_reader_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8d9b4d97410a9f61f04c4c7b29ddf4bee4d5bc7a"
    },
    {
        "hash": "c94f073e5e8bb7ebaca80ed5d6f6f7e4ad50fcf6",
        "author": "Sagar Vemuri",
        "date": "2018-11-27T13:30:16-08:00",
        "message": "Fix Mac build break in casting (#4722)\n\nSummary:\nMac build is failing with the below error:\n```\n$ make db_bench -j8\n...\n...\ntools/db_bench_tool.cc:4583:25: error: no matching function for call to 'max'\n              (uint64_t)std::max(0l, seek_pos - FLAGS_max_scan_distance),\n                        ^~~~~~~~\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/algorithm:2717:1: note: candidate template ignored: deduced conflicting types for parameter '_Tp' ('long' vs. 'long long')\nmax(const _Tp& __a, const _Tp& __b)\n^\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/algorithm:2727:1: note: candidate template ignored: could not match 'initializer_list<type-parameter-0-0>' against 'long'\nmax(initializer_list<_Tp> __t, _Compare __comp)\n^\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/algorithm:2709:1: note: candidate function template not viable: requires 3 arguments, but 2 were provided\nmax(const _Tp& __a, const _Tp& __b, _Compare __comp)\n^\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/algorithm:2735:1: note: candidate function template not viable: requires single argument '__t', but 2 arguments were provided\nmax(initializer_list<_Tp> __t)\n^\n1 error generated.\nmake: *** [tools/db_bench_tool.o] Error 1\n```\n\nMy compiler version:\nMac OS X Mojave\n```\n$ clang++ --version\nApple LLVM version 10.0.0 (clang-1000.11.45.5)\nTarget: x86_64-apple-darwin18.2.0\nThread model: posix\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4722\n\nDifferential Revision: D13220196\n\nPulled By: sagar0\n\nfbshipit-source-id: 01e5e928288a5613027c83a26ad8aedf04438b14",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c94f073e5e8bb7ebaca80ed5d6f6f7e4ad50fcf6"
    },
    {
        "hash": "a2dec2ed08c1d1f5dbab04e8c3ecdad9fc18332c",
        "author": "Sagar Vemuri",
        "date": "2018-11-27T10:17:07-08:00",
        "message": "Fix Java to C++ ticker conversions (#4719)\n\nSummary:\nAdded back `NO_ITERATORS` and moved `NO_ITERATOR_CREATED` to the end of `toCppTickers`.\n\nThis is a leftover fix which is needed in addition to a138e351bcc017667560c7ecbb295800b30881c2 to correctly convert java tickers to c++ tickers. a138e351bcc017667560c7ecbb295800b30881c2 only updated `toJavaTickerType` but both `toJavaTickerType` and `toCppTickers` need to be changed.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4719\n\nDifferential Revision: D13208847\n\nPulled By: sagar0\n\nfbshipit-source-id: 53a42f3d6ffe04034acfde972d73040b92b4c1af",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/portal.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a2dec2ed08c1d1f5dbab04e8c3ecdad9fc18332c"
    },
    {
        "hash": "60deb4485e67f5c4e21aaf1b9e80ae2d8b9be611",
        "author": "Po-Chuan Hsieh",
        "date": "2018-11-26T21:35:38-08:00",
        "message": "Fix build with ROCKSDB_LITE and -Wunused-private-field (#4715)\n\nSummary:\nThe error message of databases/rocksdb-lite (FreeBSD port) is as follows:\n```\n  tools/db_bench_tool.cc:1976:16: error: private field 'trace_options_' is not used [-Werror,-Wunused-private-field]\n    TraceOptions trace_options_;\n                 ^\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4715\n\nDifferential Revision: D13207902\n\nPulled By: ajkr\n\nfbshipit-source-id: be3c612eba656aeddb77e35e2f201dd25dc92f7e",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/60deb4485e67f5c4e21aaf1b9e80ae2d8b9be611"
    },
    {
        "hash": "f5c8cf5feda1401b34a5e7c2b734487ad6322d39",
        "author": "Siying Dong",
        "date": "2018-11-14T16:19:36-08:00",
        "message": "Increase wait time in DBTest.SanitizeNumThreads (#4659)\n\nSummary:\nDBTest.SanitizeNumThreads Sometimes fails. The test waited for 10ms timeout and expect all threads scheduled to be executed. This can be a source of flakiness. Make a check every 1ms and up to 10s.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4659\n\nDifferential Revision: D13074174\n\nPulled By: siying\n\nfbshipit-source-id: b1d5ff87a326a4fc9eab8d1cc307bbb940dfe70c",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f5c8cf5feda1401b34a5e7c2b734487ad6322d39"
    },
    {
        "hash": "c2a20f1776751d64519deaa4a98bd6f3ca2d325b",
        "author": "Maysam Yabandeh",
        "date": "2018-11-14T11:29:38-08:00",
        "message": "Fix ignoring params in default impl of GetForUpdate (#4679)\n\nSummary:\nThe default implementation of GetForUpdate that receives PinnableSlice was mistakenly dropping column_family and exclusive parameters.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4679\n\nDifferential Revision: D13062531\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 7625d0c1ba872a5d894b58ced42147d6c8556a6f",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/transaction.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c2a20f1776751d64519deaa4a98bd6f3ca2d325b"
    },
    {
        "hash": "0ed738fdd0f3b912dd6eca75dfc203d2d1f5ca31",
        "author": "Abhishek Madan",
        "date": "2018-11-14T10:46:12-08:00",
        "message": "Add max_scan_distance flag to db_bench (#4660)\n\nSummary:\nThe new flag makes it possible to constrain iterator traversal\nby the upper/lower bound the iterator is expected to pass. This allows\nseekrandom results to be more easily comparable between DBs with and\nwithout deletions.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4660\n\nDifferential Revision: D13053111\n\nPulled By: abhimadan\n\nfbshipit-source-id: 33e250f2e2d210b54c7726399da30a33f723c33c",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ed738fdd0f3b912dd6eca75dfc203d2d1f5ca31"
    },
    {
        "hash": "de651035535b6d66276edc97c121cb507e9138cb",
        "author": "Yanqin Jin",
        "date": "2018-11-13T20:03:59-08:00",
        "message": "Improve result report of scan (#4648)\n\nSummary:\nWhen iterator becomes invalid, there are two possibilities.\nFirst, all data in the column family have been scanned and there is nothing\nmore to scan.\nSecond, an underlying error has occurred, causing `status()` to be !ok.\nTherefore, we need to check for both cases when `!iter->Valid()`.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4648\n\nDifferential Revision: D12959601\n\nPulled By: riversand963\n\nfbshipit-source-id: 49c9382c9ea9e78f2e2b6f3708f0670b822ca8dd",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/de651035535b6d66276edc97c121cb507e9138cb"
    },
    {
        "hash": "d8df169b8498609eda28c0d6c2d91588b0aa925b",
        "author": "Zhongyi Xie",
        "date": "2018-11-13T17:08:34-08:00",
        "message": "release db mutex when calling ApproximateSize (#4630)\n\nSummary:\n`GenSubcompactionBoundaries` calls `VersionSet::ApproximateSize` which gets BlockBasedTableReader for every file and seeks in its index block to find `key`'s offset. If the table or index block aren't in memory already, this involves I/O. This can be improved by releasing DB mutex when calling ApproximateSize.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4630\n\nDifferential Revision: D13052653\n\nPulled By: miasantreble\n\nfbshipit-source-id: cae31d46d10d0860fa8a26b8d5154b2d17d1685f",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d8df169b8498609eda28c0d6c2d91588b0aa925b"
    },
    {
        "hash": "a2de8e52bb6c13baf5f2323eba0ca356f1294f88",
        "author": "Simon Liu",
        "date": "2018-11-13T14:39:03-08:00",
        "message": "optimized the performance of autovector::emplace_back. (#4606)\n\nSummary:\nIt called the autovector::push_back simply in autovector::emplace_back.\nThis was not efficient, and then optimazed this function through the\nperfect forwarding.\n\nThis was the src and result of the benchmark(using the google'benchmark library, the type of elem in\nautovector was std::string, and call emplace_back with the \"char *\" type):\n\nhttps://gist.github.com/monadbobo/93448b89a42737b08cbada81de75c5cd\n\nPS: The benchmark's result of  previous PR was not accurate, and so I update the test case and result.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4606\n\nDifferential Revision: D13046813\n\nPulled By: sagar0\n\nfbshipit-source-id: 19cde1bcadafe899aa454b703acb35737a1cc02d",
        "modified_files_count": 1,
        "modified_files": [
            "util/autovector.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a2de8e52bb6c13baf5f2323eba0ca356f1294f88"
    },
    {
        "hash": "abb1a8fc23755ce6861f4b88f528068f84ea337f",
        "author": "Siying Dong",
        "date": "2018-11-13T12:52:19-08:00",
        "message": "Add a unit test to assert number of preads (#4657)\n\nSummary:\nWe used to have a bug, which caused every block to be read twice, and none of our tests caught it. Add a very simply unit test to make sure that when reading a data block, we only issue one pread against the SST file.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4657\n\nDifferential Revision: D13005260\n\nPulled By: siying\n\nfbshipit-source-id: 03167b554ad2451192b1707415536d7d05e9026c",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/abb1a8fc23755ce6861f4b88f528068f84ea337f"
    },
    {
        "hash": "2993cd2002cb7b45143d53ecde6ff912095d8eb6",
        "author": "Sagar Vemuri",
        "date": "2018-11-12T19:01:37-08:00",
        "message": "Fix RocksDB Lite build (#4675)\n\nSummary:\nOur internal CI test caught RocksDB Lite build failures. The failures are due to a new test introduced in #4665 using `SSTFileWriter` and `IngestExternalFile`, but these is not exposed under lite mode. Fixed by #ifdef'ing out the test.\n\n```\ndb/db_test2.cc: In member function ‘virtual void rocksdb::DBTest2_TestCompactFiles_Test::TestBody()’:\ndb/db_test2.cc:2907:3: error: ‘SstFileWriter’ is not a member of ‘rocksdb’\n   rocksdb::SstFileWriter sst_file_writer{rocksdb::EnvOptions(), options};\n   ^\nIn file included from ./util/testharness.h:15:0,\n                 from ./table/mock_table.h:23,\n                 from ./db/db_test_util.h:44,\n                 from db/db_test2.cc:13:\ndb/db_test2.cc:2912:13: error: ‘sst_file_writer’ was not declared in this scope\n   ASSERT_OK(sst_file_writer.Open(external_file1));\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4675\n\nDifferential Revision: D13035984\n\nPulled By: sagar0\n\nfbshipit-source-id: c1ceac550dfac1a85eeea436693dc7dd467519a6",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2993cd2002cb7b45143d53ecde6ff912095d8eb6"
    },
    {
        "hash": "7d04ef465590263cedec0219a38acf96116b1605",
        "author": "Abhishek Madan",
        "date": "2018-11-12T16:42:16-08:00",
        "message": "Fix flaky DBDynamicLevelTest.DynamicLevelMaxBytesBase2 (#4668)\n\nSummary:\nPart of the test required that a compaction start before a\nmanual flush, but this was not enforced by the test. In some cases,\nparticularly when writing to tmpfs, this could lead to the compaction\nstarting after the flush, which caused the base level to be higher than\nit was expected to be. Add a sync point in the test to ensure that the\nflush and compaction happen simultaneously.\n\nThe test also had some stale comments, so those have been removed or\nmodified, and the test has been simplified so that it no longer uses sleeps\nand writes uncompressed SSTs.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4668\n\nDifferential Revision: D13032440\n\nPulled By: abhimadan\n\nfbshipit-source-id: 3f23b583a096454dafb8d8ea75678605dec80209",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_dynamic_level_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7d04ef465590263cedec0219a38acf96116b1605"
    },
    {
        "hash": "09426ae1c7b6fa48d560d019297b96945d42c199",
        "author": "DorianZheng",
        "date": "2018-11-12T11:52:34-08:00",
        "message": "Fix `DBImpl::GetColumnFamilyHandleUnlocked` data race (#4666)\n\nSummary:\nHi, yiwu-arbug, I found that `DBImpl::GetColumnFamilyHandleUnlocked` still have data race condition, because `column_family_memtables_` has a stateful cache `current_` and `column_family_memtables_::Seek` maybe call without the protection of `mutex_` by a write thread\n\ncheck https://github.com/facebook/rocksdb/blob/859dbda6e3cac17416aff48f1760d01707867351/db/write_batch.cc#L1188  and   https://github.com/facebook/rocksdb/blob/859dbda6e3cac17416aff48f1760d01707867351/db/write_batch.cc#L1756  and  https://github.com/facebook/rocksdb/blob/859dbda6e3cac17416aff48f1760d01707867351/db/db_impl_write.cc#L318\n\nSo it's better to use `versions_->GetColumnFamilySet()->GetColumnFamily` instead.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4666\n\nDifferential Revision: D13027117\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 4e3778eaf8e7f7c8577bbd78129b6a5fd7ce79fb",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/09426ae1c7b6fa48d560d019297b96945d42c199"
    },
    {
        "hash": "8ba17f382e04a17aaa33622734fb57486e4e4af1",
        "author": "Andrew Kryczka",
        "date": "2018-11-08T15:15:24-08:00",
        "message": "Verify restore from backup in db_stress (#4655)\n\nSummary:\nWe already exercised backup functionality in `db_stress` according to the `-backup_one_in` flag. This PR verifies the backup can be restored/opened and sanity checks a few keys. Changes in this PR:\n\n- Extracted existing backup-related logic to a helper function, `TestBackupRestore`\n- Added restore logic, which targets a hidden directory named \"./.restore\\<thread number\\>\", similar to how backups target hidden directories named \"./.backup\\<thread number\\>\".\n- After restore, check the existence/non-existence of a few keys.\n- With this PR, backup is no longer compatible with clearing column families.\n- Also included unrelated fixes to set `ReadOptions::total_order_seek=true` when using `-compare_full_db_state_snapshot`\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4655\n\nDifferential Revision: D12972496\n\nPulled By: ajkr\n\nfbshipit-source-id: 481a40052d9a38d1bd5c5159aa4d7c5a4b546b80",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8ba17f382e04a17aaa33622734fb57486e4e4af1"
    },
    {
        "hash": "bec59f90721e9f5e73ee21327076122a3cc2e258",
        "author": "Peter (Stig) Edwards",
        "date": "2018-11-07T11:59:50-08:00",
        "message": "Ensure delete[] and not delete is used on buffer_ (#4647)\n\nSummary:\nEnsure delete[] and not delete is called on buffer_, as it is reset with new char[buffer_size_].\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4647\n\nDifferential Revision: D12961327\n\nPulled By: ajkr\n\nfbshipit-source-id: c1af373b98359edfdc291caebe4e0acdfb8afdd8",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_dump_tool.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bec59f90721e9f5e73ee21327076122a3cc2e258"
    },
    {
        "hash": "0148f717ff7e538df0644c7dfc5c53ff95d72a12",
        "author": "Andrew Gallagher",
        "date": "2018-11-06T17:18:28-08:00",
        "message": "Move `#include` outside of namespace (#4629)\n\nSummary:\nclang modules warns about `#include`s inside of namespaces.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4629\n\nReviewed By: ajkr\n\nDifferential Revision: D12927333\n\nPulled By: andrewjcg\n\nfbshipit-source-id: a9e0b069e63d8224f78b7c3be1c3acf09bb83d3f",
        "modified_files_count": 1,
        "modified_files": [
            "util/xxhash.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0148f717ff7e538df0644c7dfc5c53ff95d72a12"
    },
    {
        "hash": "c3105aa50da0bce4f72947fc032bfc016e17f2b2",
        "author": "Siying Dong",
        "date": "2018-11-02T17:26:35-07:00",
        "message": "Try to fix ExternalSSTFileTest.IngestNonExistingFile flakines (#4625)\n\nSummary:\nExternalSSTFileTest.IngestNonExistingFile occasionally fail for number of SST files after manual compaction doesn't go down as expected. Although I don't find a reason how this can happen, adding an extra waiting to make sure obsolete file purging has finished before we check the files doesn't hurt.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4625\n\nDifferential Revision: D12910586\n\nPulled By: siying\n\nfbshipit-source-id: 2a5ddec6908c99cf3bcc78431c6f93151c2cab59",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c3105aa50da0bce4f72947fc032bfc016e17f2b2"
    },
    {
        "hash": "61311157ff328884418fe2c0fd2b410f054df750",
        "author": "Zhongyi Xie",
        "date": "2018-11-02T11:28:59-07:00",
        "message": "exclude get db property calls from rocksdb_lite (#4619)\n\nSummary:\nfix current failing lite test:\n> In file included from ./util/testharness.h:15:0,\n                 from ./table/mock_table.h:23,\n                 from ./db/db_test_util.h:44,\n                 from db/db_flush_test.cc:10:\ndb/db_flush_test.cc: In member function ‘virtual void rocksdb::DBFlushTest_ManualFlushFailsInReadOnlyMode_Test::TestBody()’:\ndb/db_flush_test.cc:250:35: error: ‘Properties’ is not a member of ‘rocksdb::DB’\n   ASSERT_TRUE(db_->GetIntProperty(DB::Properties::kBackgroundErrors,\n                                   ^\nmake: *** [db/db_flush_test.o] Error 1\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4619\n\nDifferential Revision: D12898319\n\nPulled By: miasantreble\n\nfbshipit-source-id: 72de603b1f2e972fc8caa88611798c4e98e348c6",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_flush_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/61311157ff328884418fe2c0fd2b410f054df750"
    },
    {
        "hash": "50895e5f0dd293602b7ccb5d284e6143715a27e5",
        "author": "Yanqin Jin",
        "date": "2018-10-30T17:30:28-07:00",
        "message": "Update manual flush stress test (#4608)\n\nSummary:\nOriginally, the manual flush calls in db_stress flushes only a single column\nfamily, which is not sufficient when atomic flush is enabled.\nWith atomic flush, we should call `Flush(flush_opts, cfhs)` to better test this\nnew feature. Specifically, we manuall flush all column families so that\ndatabase verification is easier.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4608\n\nDifferential Revision: D12849160\n\nPulled By: riversand963\n\nfbshipit-source-id: ae1f0dd825247b42c0aba520a5c967335102c876",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/50895e5f0dd293602b7ccb5d284e6143715a27e5"
    },
    {
        "hash": "9da88a8321239b71487fc63109a961fce423ba26",
        "author": "Siying Dong",
        "date": "2018-10-30T10:33:59-07:00",
        "message": "Remove info logging in db mutex inside EnableFileDeletions() (#4604)\n\nSummary:\nEnableFileDeletions() does info logging inside db mutex. This is not recommended in the code base, since there could be I/O involved. Move this outside the DB mutex.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4604\n\nDifferential Revision: D12834432\n\nPulled By: siying\n\nfbshipit-source-id: ffe5c2626fcfdb4c54a661a3c3b0bc95054816cf",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_filesnapshot.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9da88a8321239b71487fc63109a961fce423ba26"
    },
    {
        "hash": "806ff34b61cfd1be2e6a6d287e1c5627552dab33",
        "author": "Yanqin Jin",
        "date": "2018-10-29T14:36:31-07:00",
        "message": "Disable DBIOFailureTest.NoSpaceCompactRange in LITE (#4596)\n\nSummary:\nSince ErrorHandler::RecoverFromNoSpace is no-op in LITE mode, then we should\nnot have this test in LITE mode. If we do keep it, it will cause the test\nthread to wait on bg_cv_ that will not be signalled.\n\nHow to reproduce\n```\n$make clean && git checkout a27fce408e197f68d4d4a613aefc1d84b9a57058\n$OPT=\"-DROCKSDB_LITE -g\" make -j20\n$./db_io_failure_test --gtest_filter=DBIOFailureTest.NoSpaceCompactRange\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4596\n\nDifferential Revision: D12818516\n\nPulled By: riversand963\n\nfbshipit-source-id: bc83524f40fff1e29506979017f7f4c2b70322f3",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_io_failure_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/806ff34b61cfd1be2e6a6d287e1c5627552dab33"
    },
    {
        "hash": "7fb39f1ae19bf6c88544d485fc7b6940ebad8981",
        "author": "Yanqin Jin",
        "date": "2018-10-29T09:54:36-07:00",
        "message": "Fix a warning against implicit type conversion (#4593)\n\nSummary:\nTest plan\n```\n$USE_CLANG=1 make -j32 all check\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4593\n\nDifferential Revision: D12811159\n\nPulled By: riversand963\n\nfbshipit-source-id: 5e3bbe058c5a8d5a286a19d7643593fc154a2d6d",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7fb39f1ae19bf6c88544d485fc7b6940ebad8981"
    },
    {
        "hash": "92b440156686ec0cac5adb9833b9f6f4447ee479",
        "author": "Yanqin Jin",
        "date": "2018-10-29T09:45:32-07:00",
        "message": "Avoid memtable cut when active memtable is empty (#4595)\n\nSummary:\nFor flush triggered by RocksDB due to memory usage approaching certain\nthreshold (WriteBufferManager or Memtable full), we should cut the memtable\nonly when the current active memtable is not empty, i.e. contains data. This is\nwhat we do for non-atomic flush. If we always cut memtable even when the active\nmemtable is empty, we will generate extra, empty immutable memtable.\nThis is not ideal since it may cause write stall. It also causes some\nDBAtomicFlushTest to fail because cfd->imm()->NumNotFlushed() is different from\nexpectation.\n\nTest plan\n```\n$make clean && make J=1 -j32 all check\n$make clean && OPT=\"-DROCKSDB_LITE -g\" make J=1 -j32 all check\n$make clean && TEST_TMPDIR=/dev/shm/rocksdb OPT=-g make J=1 -j32 valgrind_test\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4595\n\nDifferential Revision: D12818520\n\nPulled By: riversand963\n\nfbshipit-source-id: d867bdbeacf4199fdd642debb085f94703c41a18",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/92b440156686ec0cac5adb9833b9f6f4447ee479"
    },
    {
        "hash": "eb8c9918f7ec6424d1a805545ccee2d650e1b9cf",
        "author": "Yanqin Jin",
        "date": "2018-10-24T15:51:45-07:00",
        "message": "Remove unused variable\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/4585\n\nDifferential Revision: D10841983\n\nPulled By: riversand963\n\nfbshipit-source-id: 6a7e0b40065bcfbb10a2cac0cec1e8da0750a617",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eb8c9918f7ec6424d1a805545ccee2d650e1b9cf"
    },
    {
        "hash": "0415244bfa3c5b5761a65f8d1b9745daf88cdd23",
        "author": "Yi Wu",
        "date": "2018-10-24T11:39:05-07:00",
        "message": "option to print malloc stats at the end of db_bench (#4582)\n\nSummary:\nOption to print malloc stats to stdout at the end of db_bench. This is different from `--dump_malloc_stats`, which periodically print the same information to LOG file.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4582\n\nDifferential Revision: D10520814\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: beff5e514e414079d31092b630813f82939ffe5c",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0415244bfa3c5b5761a65f8d1b9745daf88cdd23"
    },
    {
        "hash": "f6b151f16ded2a738310048755758e0f785bd654",
        "author": "Zhongyi Xie",
        "date": "2018-10-23T22:14:54-07:00",
        "message": "fix clang analyzer error (#4583)\n\nSummary:\nclang analyzer currently fails with the following warnings:\n> db/log_reader.cc:323:9: warning: Undefined or garbage value returned to caller\n        return r;\n        ^~~~~~~~\ndb/log_reader.cc:344:11: warning: Undefined or garbage value returned to caller\n          return r;\n          ^~~~~~~~\ndb/log_reader.cc:369:11: warning: Undefined or garbage value returned to caller\n          return r;\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4583\n\nDifferential Revision: D10523517\n\nPulled By: miasantreble\n\nfbshipit-source-id: 0cc8b8f27657b202bead148bbe7c4aa84fed095b",
        "modified_files_count": 1,
        "modified_files": [
            "db/log_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f6b151f16ded2a738310048755758e0f785bd654"
    },
    {
        "hash": "35cd754a6dfd5281556f9dae6d2099209ae46921",
        "author": "Abhishek Madan",
        "date": "2018-10-18T17:19:59-07:00",
        "message": "Add writes_before_delete_range flag to db_bench (#4538)\n\nSummary:\nThe new flag allows tombstones to be generated after enough\nkeys have been written to the database, which makes it easier to ensure\nthat tombstones cover a lot of keys.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4538\n\nDifferential Revision: D10455685\n\nPulled By: abhimadan\n\nfbshipit-source-id: f25d5421745a353c830dea12b79784e852056551",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/35cd754a6dfd5281556f9dae6d2099209ae46921"
    },
    {
        "hash": "0afa5b53d73f34cc5f63cb408fe1aa12c0e20792",
        "author": "Maysam Yabandeh",
        "date": "2018-10-18T14:21:09-07:00",
        "message": "Disable GroupCommitTest in Appveyor (#4536)\n\nSummary:\nWe have already disabled it on Travis since it has been too flaky. The same problem arises in Appveyor as well.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4536\n\nDifferential Revision: D10452240\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 728f4ecddf780097159dc0a0737d460eb5ce4f09",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0afa5b53d73f34cc5f63cb408fe1aa12c0e20792"
    },
    {
        "hash": "6f8d4bdff1115bacc561105caf0303e5f26d132e",
        "author": "Yi Wu",
        "date": "2018-10-12T11:50:50-07:00",
        "message": "Fix compile error with jemalloc (#4488)\n\nSummary:\nThe \"je_\" prefix of jemalloc APIs presents only when the macro `JEMALLOC_NO_RENAME` from jemalloc.h presents.\n\nWith the patch I'm also adding -DROCKSDB_JEMALLOC flag in buck TARGETS.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4488\n\nDifferential Revision: D10355971\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 03a2d69790a44ac89219c7525763fa937a63d95a",
        "modified_files_count": 1,
        "modified_files": [
            "db/malloc_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6f8d4bdff1115bacc561105caf0303e5f26d132e"
    },
    {
        "hash": "7dd1641048bde2e45c3e16d2e7b450b3914df1f4",
        "author": "Abhishek Madan",
        "date": "2018-10-11T15:29:14-07:00",
        "message": "Use vector in UncollapsedRangeDelMap (#4487)\n\nSummary:\nUsing `./range_del_aggregator_bench --use_collapsed=false\n--num_range_tombstones=5000 --num_runs=1000`, here are the results before and\nafter this change:\n\nBefore:\n```\n=========================\nResults:\n=========================\nAddTombstones:           1822.61 us\nShouldDelete (first):    94.5286 us\n```\n\nAfter:\n```\n=========================\nResults:\n=========================\nAddTombstones:           199.26 us\nShouldDelete (first):    38.9344 us\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4487\n\nDifferential Revision: D10347288\n\nPulled By: abhimadan\n\nfbshipit-source-id: d44efe3a166d583acfdc3ec1199e0892f34dbfb7",
        "modified_files_count": 1,
        "modified_files": [
            "db/range_del_aggregator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7dd1641048bde2e45c3e16d2e7b450b3914df1f4"
    },
    {
        "hash": "46dd8b1e13678d38a678d34efb8dd2825477d121",
        "author": "zpalmtree",
        "date": "2018-10-11T10:50:04-07:00",
        "message": "C++17 support (#4482)\n\nSummary:\nCloses https://github.com/facebook/rocksdb/issues/4462\n\nI'm not sure if you'll be happy with `std::random_device{}`, perhaps you would want to use your rand instance instead. I didn't test to see if your rand instance supports the requirements that `std::shuffle` takes.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4482\n\nDifferential Revision: D10325133\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 47b7adaf4bb2b8d64cf090ea6b1b48ef53180581",
        "modified_files_count": 1,
        "modified_files": [
            "util/transaction_test_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/46dd8b1e13678d38a678d34efb8dd2825477d121"
    },
    {
        "hash": "531786ebf7d70671056b97d72245306bc75da348",
        "author": "UncP",
        "date": "2018-10-10T21:00:32-07:00",
        "message": "DBWriteImpl: remove redundant code (#4450)\n\nSummary:\nin `WriteThread::LaunchParallelMemTableWriters`, there is `  write_group->running.store(write_group->size);\n`\nhttps://github.com/facebook/rocksdb/blob/master/db/write_thread.cc#L510\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4450\n\nDifferential Revision: D10201900\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 96c8fbbba5aff7ba8a6ceb3117a2bd7cc9b2f34b",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/531786ebf7d70671056b97d72245306bc75da348"
    },
    {
        "hash": "ceded4535d432eb201bc470c5bb3e781861d3bca",
        "author": "Simon Grätzer",
        "date": "2018-10-10T20:57:27-07:00",
        "message": "WriteBatch::Iterate wrongly returns Status::Corruption (#4478)\n\nSummary:\nWrong I overwrite `WriteBatch::Handler::Continue` to return _false_ at some point, I always get the `Status::Corruption` error.\nI don't think this check is used correctly here: The counter in `found` cannot reflect all entries in the WriteBatch when we exit the loop early.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4478\n\nDifferential Revision: D10317416\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: cccae3382805035f9b3239b66682b5fcbba6bb61",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ceded4535d432eb201bc470c5bb3e781861d3bca"
    },
    {
        "hash": "faa70fc575b6498ccd334a59780eaabc4f496762",
        "author": "Andrew Kryczka",
        "date": "2018-10-10T12:30:11-07:00",
        "message": "DeleteRange regression tests using public API (#4476)\n\nSummary:\nI wrote a couple tests using the public API to expose/prevent the bugs we talked. In particular,\n\n- When files have overlapping endpoints and a range tombstone spans them, ensure the largest key does not reappear to readers. This was happening due to a bug that skipped writing range tombstones to an output file when their begin key exactly matched the file's largest key.\n- When a tombstone spans multiple atomic compaction units, ensure newer keys do not disappear by being compacted beneath it. This happened due to a range tombstone appearing untruncated to readers when it spanned files with overlapping endpoints, even if it extended into files without overlapping endpoints (i.e., different atomic compaction units).\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4476\n\nDifferential Revision: D10286001\n\nPulled By: ajkr\n\nfbshipit-source-id: bb5ca51d0f90812fb37bfe1d01aec93f7eda55aa",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_range_del_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/faa70fc575b6498ccd334a59780eaabc4f496762"
    },
    {
        "hash": "b0026e1f5f9defa5861e24aa463a1c93de6ed9ef",
        "author": "Jiri Appl",
        "date": "2018-10-09T16:58:25-07:00",
        "message": "Enable building of ARM32 (#4349)\n\nSummary:\nThe original logic was assuming that the only architectures that the code would build for on Windows were x86 and x64. This change will enable building for arm32 on Windows as well.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4349\n\nDifferential Revision: D10280887\n\nPulled By: sagar0\n\nfbshipit-source-id: 9ca0bede25505d22e13acf916d38aeeaaf5d981a",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b0026e1f5f9defa5861e24aa463a1c93de6ed9ef"
    },
    {
        "hash": "283a700f5de4664390494b7462fd025b643df4c8",
        "author": "Zhongyi Xie",
        "date": "2018-10-09T14:10:13-07:00",
        "message": "add locking around calls to RecalculateWriteStallConditions in column_family_test (#4474)\n\nSummary:\nthis should fix the current failing TSAN jobs:\nThe callstack for TSAN:\n> WARNING: ThreadSanitizer: data race (pid=87440)\n  Read of size 8 at 0x7d580000fce0 by thread T22 (mutexes: write M548703):\n    #0 rocksdb::InternalStats::DumpCFStatsNoFileHistogram(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) db/internal_stats.cc:1204 (column_family_test+0x00000080eca7)\n    #1 rocksdb::InternalStats::DumpCFStats(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) db/internal_stats.cc:1169 (column_family_test+0x0000008106d0)\n    #2 rocksdb::InternalStats::HandleCFStats(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, rocksdb::Slice) db/internal_stats.cc:578 (column_family_test+0x000000810720)\n    #3 rocksdb::InternalStats::GetStringProperty(rocksdb::DBPropertyInfo const&, rocksdb::Slice const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) db/internal_stats.cc:488 (column_family_test+0x00000080670c)\n    #4 rocksdb::DBImpl::DumpStats() db/db_impl.cc:625 (column_family_test+0x00000070ce9a)\n\n>  Previous write of size 8 at 0x7d580000fce0 by main thread:\n    #0 rocksdb::InternalStats::AddCFStats(rocksdb::InternalStats::InternalCFStatsType, unsigned long) db/internal_stats.h:324 (column_family_test+0x000000693bbf)\n    #1 rocksdb::ColumnFamilyData::RecalculateWriteStallConditions(rocksdb::MutableCFOptions const&) db/column_family.cc:818 (column_family_test+0x000000693bbf)\n    #2 rocksdb::ColumnFamilyTest_WriteStallSingleColumnFamily_Test::TestBody() db/column_family_test.cc:2563 (column_family_test+0x0000005e5a49)\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4474\n\nDifferential Revision: D10262099\n\nPulled By: miasantreble\n\nfbshipit-source-id: 1247973a3ca32e399b4575d3401dd5439c39efc5",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/283a700f5de4664390494b7462fd025b643df4c8"
    },
    {
        "hash": "35f26beca5379c1a977d44e5c1a1431545be5e57",
        "author": "Fosco Marotto",
        "date": "2018-10-08T16:22:17-07:00",
        "message": "Update version macro for 5.17 (#4472)\n\nSummary:\nForgot this in previous commit.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4472\n\nDifferential Revision: D10244227\n\nPulled By: gfosco\n\nfbshipit-source-id: ba0cf7a2f5271f0d9f9443004e2620887cd5fd11",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/35f26beca5379c1a977d44e5c1a1431545be5e57"
    },
    {
        "hash": "7487a7628c0d8f65d70068ea74b30cbb7ec33abf",
        "author": "DorianZheng",
        "date": "2018-10-08T14:22:05-07:00",
        "message": "Fix return status of DBImpl::GetLatestSequenceForKey\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/4467\n\nDifferential Revision: D10241418\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: f6adbe7292b2c934e14971c7432b3eb115c35026",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7487a7628c0d8f65d70068ea74b30cbb7ec33abf"
    },
    {
        "hash": "1fb68055271bc4cf879325db49f8c4266bbcb5e6",
        "author": "Maysam Yabandeh",
        "date": "2018-10-05T14:50:51-07:00",
        "message": "Fix snprintf buffer overflow bug (#4465)\n\nSummary:\nThe contract of snprintf says that it returns \"The number of characters that would have been written if n had been sufficiently large\" http://www.cplusplus.com/reference/cstdio/snprintf/\nThe existing code however was assuming that the return value is the actual number of written bytes and uses that to reposition the starting point on the next call to snprintf. This leads to buffer overflow when the last call to snprintf has filled up the buffer.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4465\n\nDifferential Revision: D10224080\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 40f44e122d15b0db439812a0a361167cf012de3e",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1fb68055271bc4cf879325db49f8c4266bbcb5e6"
    },
    {
        "hash": "b41b2d431e0757b5651c4ce1133de9284d9635de",
        "author": "Yanqin Jin",
        "date": "2018-10-04T14:53:36-07:00",
        "message": "Improve error message when opening file for truncation (#4454)\n\nSummary:\nThe old error message was misleading because it led people to believe the truncation operation failed.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4454\n\nDifferential Revision: D10203575\n\nPulled By: riversand963\n\nfbshipit-source-id: c76482a132566635cb55d4c73d45c461f295ec43",
        "modified_files_count": 1,
        "modified_files": [
            "util/fault_injection_test_env.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b41b2d431e0757b5651c4ce1133de9284d9635de"
    },
    {
        "hash": "a1f6142f38fc2130a522cf78e69ebc502f69bf92",
        "author": "JiYou",
        "date": "2018-10-03T18:40:59-07:00",
        "message": "VersionSet: GetOverlappingInputs() fix overflow and optimize. (#4385)\n\nSummary:\nThis fix is for `level == 0` in `GetOverlappingInputs()`:\n- In `GetOverlappingInputs()`, if `level == 0`, it has potential\nrisk of overflow if `i == 0`.\n- Optmize process when `expand = true`, the expected complexity\ncan be reduced to O(n).\n\nSigned-off-by: JiYou <jiyou09@gmail.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4385\n\nDifferential Revision: D10181001\n\nPulled By: riversand963\n\nfbshipit-source-id: 46eef8a1d1605c9329c164e6471cd5c5b6de16b5",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a1f6142f38fc2130a522cf78e69ebc502f69bf92"
    },
    {
        "hash": "4e58b2ea3d6b48efd6edd3e0f9ba7aeb6a3c3efe",
        "author": "Yanqin Jin",
        "date": "2018-10-02T10:42:01-07:00",
        "message": "Check for compression lib support before test exec (#4443)\n\nSummary:\nBefore running CompactFilesTest.SentinelCompressionType, we should check\nwhether zlib and snappy are supported.\n\nCompactFilesTest.SentinelCompressionType is a newly added test. Compilation and\nlinking with different options, e.g. COMPILE_WITH_TSAN, COMPILE_WITH_ASAN, etc.\nlead to generation of different binaries. On the one hand, it's not clear why\nzlib or snappy is present under ASAN, but not under TSAN. On the other hand,\nchanging the compilation flags for TSAN or ASAN seems a bigger change worth much\nmore attention. To unblock the cont-runs, I suggest that we simply add these\ntwo checks at the beginning of the test, as we did for\nGeneralTableTest.ApproximateOffsetOfCompressed in table/table_test.cc.\n\nFuture actions include invesigating the absence of zlib and snappy when\ncompiling with TSAN, i.e. COMPILE_WITH_TSAN=1, if necessary.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4443\n\nDifferential Revision: D10140935\n\nPulled By: riversand963\n\nfbshipit-source-id: 62f96d1e685386accd2ef0b98f6f754d3fd67b3e",
        "modified_files_count": 1,
        "modified_files": [
            "db/compact_files_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4e58b2ea3d6b48efd6edd3e0f9ba7aeb6a3c3efe"
    },
    {
        "hash": "be5cc4c7b85dc48aad509deb1a285b4c556d2361",
        "author": "Yanqin Jin",
        "date": "2018-10-01T11:57:55-07:00",
        "message": "Remove a race condition between lsdir and rm (#4440)\n\nSummary:\nIn DBCompactionTestWithParam::ManualLevelCompactionOutputPathId, there is\na race condition between `DBTestBase::GetSstFileCount` and\n`DBImpl::PurgeObsoleteFiles`. The following graph explains why.\n\n```\nTimeline  db_compact_test_t              bg_flush_t         bg_compact_t\n    |  [initiate bg flush and\n    |      start waiting]\n    |                                     flush\n    |                                     DeleteObsoleteFiles\n    |  [waken up by bg_flush_t which\n    |   signaled in DeleteObsoleteFiles]\n    |\n    |  [initiate compaction and\n    |   start waiting]\n    |\n    |                                                         [compact,\n    |                                                          set manual.done to true]\n    |                                   [signal at the end of\n    |                                    BackgroundCallFlush]\n    |\n    |  [waken up by bg_flush_t\n    |   which signaled before\n    |   returning from\n    |   BackgroundCallFlush]\n    |\n    |  Check manual.done is true\n    |\n    |  GetSstFileCount    <-- race condition -->           PurgeObsoleteFiles\n    V\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4440\n\nDifferential Revision: D10122628\n\nPulled By: riversand963\n\nfbshipit-source-id: 3ede73c39fee6ad804dc6ac1ed84759c7e63977f",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/be5cc4c7b85dc48aad509deb1a285b4c556d2361"
    },
    {
        "hash": "b1dad4cfcc6fb5459e5ce34e64485234aec6e43e",
        "author": "Sagar Vemuri",
        "date": "2018-09-26T13:25:15-07:00",
        "message": "assert in PosixEnv::FileExists should be based on errno (#4427)\n\nSummary:\nThe assert in PosixEnv::FileExists is currently based on the return value of `access` syscall. Instead it should be based on errno.\n\nInitially I wanted to remove this assert as [`access`](https://linux.die.net/man/2/access) can error out in a few other cases (like EROFS). But on thinking more it feels like the assert is doing the right thing ...  its good to crash on EROFS, EFAULT, EINVAL, and other major filesystem related problems so that the user is immediately aware of the problems while testing.\n(I think it might be ok to crash on EIO as well, but there might be a specific reason why it was decided not to crash for EIO, and I don't have that context. So letting the letting the assert checks remain as is for now).\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4427\n\nDifferential Revision: D10037200\n\nPulled By: sagar0\n\nfbshipit-source-id: 5cc96116a2e53cef701f444a8b5290576f311e51",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b1dad4cfcc6fb5459e5ce34e64485234aec6e43e"
    },
    {
        "hash": "3c350a7cf0f4c19d0b420b730df46e19699014b3",
        "author": "Abhishek Madan",
        "date": "2018-09-21T16:13:08-07:00",
        "message": "Improve RangeDelAggregator benchmarks (#4395)\n\nSummary:\nImprove time measurements for AddTombstones to only include the\ncall and not the VectorIterator setup. Also add a new\nadd_tombstones_per_run flag to call AddTombstones multiple times per\naggregator, which will help simulate more realistic workloads.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4395\n\nDifferential Revision: D9996811\n\nPulled By: abhimadan\n\nfbshipit-source-id: 5865a95c323fbd9b3606493013664b4890fe5a02",
        "modified_files_count": 1,
        "modified_files": [
            "db/range_del_aggregator_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3c350a7cf0f4c19d0b420b730df46e19699014b3"
    },
    {
        "hash": "519f8b145f6d23cce58e5e41e0cc7094d5a61cb7",
        "author": "Abhishek Madan",
        "date": "2018-09-19T16:28:21-07:00",
        "message": "Generate appropriate number of keys in db_bench (#4404)\n\nSummary:\nIf range tombstones are generated every few writes, the\nKeyGenerator's limit is now extended to account for the additional\nNext() calls. This is primarily important for `filluniquerandom`\nbenchmarks that enforce the call limit.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4404\n\nDifferential Revision: D9949326\n\nPulled By: abhimadan\n\nfbshipit-source-id: 0bdfeb2cad2098dc0b8b029236dab5e4bef25e38",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/519f8b145f6d23cce58e5e41e0cc7094d5a61cb7"
    },
    {
        "hash": "27221b0cc29466923bc060122e861a862b3e51ab",
        "author": "jsteemann",
        "date": "2018-09-18T09:28:30-07:00",
        "message": "use specified comparator in CollapsedRangeDelMap (#4386)\n\nSummary:\nThe Comparator passed to CollapsedRangeDelMap was not used for\noperator less of the std::map `rep_` object contained in\nCollapsedRangeDelMap. So the map was always sorted using the\ndefault ByteWiseComparator, which seems wrong.\n\nPassing the specified Comparator through for usage in that map\nobject fixes actual problems we were seeing with RangeDelete operations\nthat do not delete keys as expected when using a custom Comparator.\n\nI found that the tests in current master crash when I run them locally,\nboth with and without my patch, at the very same location. I therefore\ndon't know if the patch breaks something else, but it seems to fix\nRangeDeletion issues in our product that uses RocksDB.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4386\n\nDifferential Revision: D9916506\n\nPulled By: ajkr\n\nfbshipit-source-id: 27bff8c775831f089dde8c5289df7343d88b2d66",
        "modified_files_count": 1,
        "modified_files": [
            "db/range_del_aggregator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/27221b0cc29466923bc060122e861a862b3e51ab"
    },
    {
        "hash": "ac46790374e67d24862d70733bd3f4d1c2d26fae",
        "author": "Sagar Vemuri",
        "date": "2018-09-17T11:58:11-07:00",
        "message": "Fix sync-point comment in Block destructor (#4380)\n\nSummary:\nThis is a follow up to #4370. The earlier comment is not correct.\n\nThanks to ajkr for pointing this out.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4380\n\nDifferential Revision: D9874667\n\nPulled By: sagar0\n\nfbshipit-source-id: f4e092d86b29c715258210b770643d367e38caae",
        "modified_files_count": 1,
        "modified_files": [
            "table/block.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ac46790374e67d24862d70733bd3f4d1c2d26fae"
    },
    {
        "hash": "82e8e9e26bb16d1af07a26741bcf63d8342e4336",
        "author": "JiYou",
        "date": "2018-09-14T19:43:04-07:00",
        "message": "VersionBuilder: optmize SaveTo() to linear time. (#4366)\n\nSummary:\nBecause `base_files` and `added_files` both are sorted, using a merge\noperation to these two sorted arrays is more effective. The complexity\nis reduced to linear time.\n\n    - optmize the merge complexity.\n    - move the `NDEBUG` of sorted `added_files` out of merge process.\n\nSigned-off-by: JiYou <jiyou09@gmail.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4366\n\nDifferential Revision: D9833592\n\nPulled By: ajkr\n\nfbshipit-source-id: dd32b67ebdca4c20e5e9546ab8082cecefe99fd0",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/82e8e9e26bb16d1af07a26741bcf63d8342e4336"
    },
    {
        "hash": "82057b0d8f94770acc82ea8d68fa16a23ab346a9",
        "author": "Yanqin Jin",
        "date": "2018-09-14T11:12:52-07:00",
        "message": "Improve type conversion (#4367)\n\nSummary:\nUse `static_cast<type>(var)` instead of `(type)var`.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4367\n\nDifferential Revision: D9833391\n\nPulled By: riversand963\n\nfbshipit-source-id: 3d33fc2c290e7e0f3d1d45b256a881d1bc5a7df2",
        "modified_files_count": 1,
        "modified_files": [
            "db/log_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/82057b0d8f94770acc82ea8d68fa16a23ab346a9"
    },
    {
        "hash": "2353c5c821cf85312bad2e3724e9ad77078498e5",
        "author": "Constantin Belyaev",
        "date": "2018-09-14T10:28:39-07:00",
        "message": "Fix cross-filesystem checkpoint on Windows (#4365)\n\nSummary:\nNow port/win_env.cc do check error for cross device link creation.\nFixes #4364\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4365\n\nDifferential Revision: D9833144\n\nPulled By: ajkr\n\nfbshipit-source-id: be7555e510f4b8d2196d843841606a6cfada7644",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2353c5c821cf85312bad2e3724e9ad77078498e5"
    },
    {
        "hash": "ca92fc71a4440854dee5cfe98886c68fdb8964d0",
        "author": "Dan Melnic",
        "date": "2018-09-12T08:58:05-07:00",
        "message": "Initialize uninitialized std::atomic variables\n\nSummary: Initialize uninitialized std::atomic variables\n\nReviewed By: yfeldblum\n\nDifferential Revision: D9758050\n\nfbshipit-source-id: 865d89eddafc81f3cab6f11e2ebb669f7ff70d04",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test_util.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ca92fc71a4440854dee5cfe98886c68fdb8964d0"
    },
    {
        "hash": "faf529fd7cad9de3ef7811b36f8774ff22081414",
        "author": "Kefu Chai",
        "date": "2018-09-07T11:12:44-07:00",
        "message": "env_librados.h: drop redundant #endif (#4354)\n\nSummary:\nwithout this change, rocksdb_env_librados_test fails to build.\n\nit's a regression introduced by 64324e32\n\nSigned-off-by: Kefu Chai <tchaikov@gmail.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4354\n\nDifferential Revision: D9702665\n\nPulled By: riversand963\n\nfbshipit-source-id: 65134eaff0543733210edfc77f89c96709da7a3f",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/env_librados.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/faf529fd7cad9de3ef7811b36f8774ff22081414"
    },
    {
        "hash": "655ef7d77ff911a0c2206e590aed64e22fb58274",
        "author": "Maysam Yabandeh",
        "date": "2018-09-07T07:57:30-07:00",
        "message": "Inline doc for format_version 4 (#4350)\n\nSummary:\nFixes #4337\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4350\n\nDifferential Revision: D9700871\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: fe1e07803783f34588dc14aba66d51117ca4a180",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/table.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/655ef7d77ff911a0c2206e590aed64e22fb58274"
    },
    {
        "hash": "ced618cf393e4e80bf78dfc60a2dafefeb898ff1",
        "author": "Anand Ananthabhotla",
        "date": "2018-09-06T14:42:57-07:00",
        "message": "Fix a lint error due to unspecified move evaluation order (#4348)\n\nSummary:\nIn C++ 11, the order of argument and move evaluation in a statement such\nas below is unspecified -\n  foo(a.b).bar(std::move(a))\nThe compiler is free to evaluate std::move(a) first, and then a.b is unspecified.\n\nIn C++ 17, this will be safe if a draft proposal around function\nchaining rules is accepted.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4348\n\nDifferential Revision: D9688810\n\nPulled By: anand1976\n\nfbshipit-source-id: e4651d0ca03dcf007e50371a0fc72c0d1e710fb4",
        "modified_files_count": 1,
        "modified_files": [
            "db/range_del_aggregator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ced618cf393e4e80bf78dfc60a2dafefeb898ff1"
    },
    {
        "hash": "3e801e5ed1c06619fed4bd0acabda1b9fab3a01b",
        "author": "Yi Wu",
        "date": "2018-08-30T11:57:46-07:00",
        "message": "BlobDB: Improve info log (#4324)\n\nSummary:\nImprove BlobDB info logs.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4324\n\nDifferential Revision: D9545074\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 678ab8820a78758fee451be3b123b0680c1081df",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3e801e5ed1c06619fed4bd0acabda1b9fab3a01b"
    },
    {
        "hash": "d00e5de7fc85a3696642d14ba57568f4c490b810",
        "author": "Wez Furlong",
        "date": "2018-08-29T20:27:43-07:00",
        "message": "use atomic O_CLOEXEC when available (#4328)\n\nSummary:\nIn our application we spawn helper child processes concurrently with\nopening rocksdb.  In one situation I observed that the child process had inherited\nthe rocksdb lock file as well as directory handles to the rocksdb storage location.\n\nThe code in env_posix takes care to set CLOEXEC but doesn't use `O_CLOEXEC` at the\ntime that the files are opened which means that there is a window of opportunity\nto leak the descriptors across a fork/exec boundary.\n\nThis diff introduces a helper that can conditionally set the `O_CLOEXEC` bit for\nthe open call using the same logic as that in the existing helper for setting\nthat flag post-open.\n\nI've preserved the post-open logic for systems that don't have `O_CLOEXEC`.\n\nI've introduced setting `O_CLOEXEC` for what appears to be a number of temporary\nor transient files and directory handles; I suspect that none of the files\nopened by Rocks are intended to be inherited by a forked child process.\n\nIn one case, `fopen` is used to open a file.  I've added the use of the glibc-specific `e`\nmode to turn on `O_CLOEXEC` for this case.  While this doesn't cover all posix systems,\nit is an improvement for our common deployment system.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4328\n\nReviewed By: ajkr\n\nDifferential Revision: D9553046\n\nPulled By: wez\n\nfbshipit-source-id: acdb89f7a85ca649b22fe3c3bd76f82142bec2bf",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d00e5de7fc85a3696642d14ba57568f4c490b810"
    },
    {
        "hash": "198459ce17998099b500eb58bfd4be73b854d67f",
        "author": "Yanqin Jin",
        "date": "2018-08-24T18:13:20-07:00",
        "message": "Fix an inaccurate comment (#4315)\n\nSummary:\nAccording to https://github.com/facebook/rocksdb/blob/4848bd0c4e98713bf5ae72a36057e188c53206f8/db/log_reader.cc#L355, the original text is misleading when describing the layout of RecyclableLogHeader.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4315\n\nDifferential Revision: D9505284\n\nPulled By: riversand963\n\nfbshipit-source-id: 79994c37a69e7003f03453e7efc0186feeafa609",
        "modified_files_count": 1,
        "modified_files": [
            "db/log_format.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/198459ce17998099b500eb58bfd4be73b854d67f"
    },
    {
        "hash": "e7bb8e9b92ce0add308f8abdbb277b8890de0ac8",
        "author": "Andrew Kryczka",
        "date": "2018-08-23T21:57:57-07:00",
        "message": "Fix clang build of db_stress (#4312)\n\nSummary:\nBlame: #4307\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4312\n\nDifferential Revision: D9494093\n\nPulled By: ajkr\n\nfbshipit-source-id: eb6be2675c08b9ab508378d45110eb0fcf260a42",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e7bb8e9b92ce0add308f8abdbb277b8890de0ac8"
    },
    {
        "hash": "da40d45267338ac0e91e5d065acab8df2c69cef3",
        "author": "Fenggang Wu",
        "date": "2018-08-23T10:12:58-07:00",
        "message": "DataBlockHashIndex: avoiding expensive iiter->Next when handling hash kNoEntry (#4296)\n\nSummary:\nWhen returning `kNoEntry` from HashIndex lookup, previously we invalidate the\n`biter` by set `current_=restarts_`, so that the search can continue to the next\nblock in case the search result may reside in the next block.\n\nThere is one problem: when we are searching for a missing key, if the search\nfinds a `kNoEntry` and continue the search to the next block, there is also a\nnon-trivial possibility that the HashIndex return `kNoEntry` too, and the\nexpensive index iterator `Next()` will happen several times for nothing.\n\nThe solution is that if the hash table returns `kNoEntry`, `SeekForGetImpl()` just search the last restart interval for the key. It will stop at the first key that is large than the seek_key, or to the end of the block, and each case will be handled correctly.\n\nMicrobenchmark script:\n```\nTEST_TMPDIR=/dev/shm ./db_bench --benchmarks=fillseq,readtocache,readmissing \\\n          --cache_size=20000000000  --use_data_block_hash_index={true|false}\n```\n\n`readmissing` performance (lower is better):\n```\nbinary:                      3.6098 micros/op\nhash (before applying diff): 4.1048 micros/op\nhash (after  applying diff): 3.3502 micros/op\n```\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4296\n\nDifferential Revision: D9419159\n\nPulled By: fgwu\n\nfbshipit-source-id: 21e3eedcccbc47a249aa8eb4bf405c9def0b8a05",
        "modified_files_count": 1,
        "modified_files": [
            "table/block.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/da40d45267338ac0e91e5d065acab8df2c69cef3"
    },
    {
        "hash": "640cfa7c3316741a0d04ef5163810f710dc44df8",
        "author": "Fenggang Wu",
        "date": "2018-08-21T17:12:45-07:00",
        "message": "DataBlockHashIndex: fix comment in NumRestarts() (#4286)\n\nSummary:\nImprove the description of the backward compatibility check in NumRestarts()\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4286\n\nDifferential Revision: D9412490\n\nPulled By: fgwu\n\nfbshipit-source-id: ea7dd5c61d8ff8eacef623b729d4e4fd53cca066",
        "modified_files_count": 1,
        "modified_files": [
            "table/block.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/640cfa7c3316741a0d04ef5163810f710dc44df8"
    },
    {
        "hash": "fa4de6e30ffaf9188a48f5e30d2da1ac0e454917",
        "author": "Andrey Zagrebin",
        "date": "2018-08-17T10:57:25-07:00",
        "message": "#3865 followup for fix performance degression introduced by switching order of operands (#4284)\n\nSummary:\nFollowup for #4266. There is one more place in **get_context.cc** where **MergeOperator::ShouldMerge** should be called with reversed list of operands.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4284\n\nDifferential Revision: D9380008\n\nPulled By: sagar0\n\nfbshipit-source-id: 70ec26e607e5b88465e1acbdcd6c6171bd76b9f2",
        "modified_files_count": 1,
        "modified_files": [
            "table/get_context.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fa4de6e30ffaf9188a48f5e30d2da1ac0e454917"
    },
    {
        "hash": "889a0553c8b66d584aa04872e02362c7541bf678",
        "author": "Mikhail Antonov",
        "date": "2018-08-16T16:42:29-07:00",
        "message": "VerifyChecksum() API should preserve options\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/4275\n\nReviewed By: yiwu-arbug\n\nDifferential Revision: D9369766\n\nPulled By: mikhail-antonov\n\nfbshipit-source-id: d91b64c34cc1976b324a260767fce343fa32afde",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/889a0553c8b66d584aa04872e02362c7541bf678"
    },
    {
        "hash": "bf07e90cf2e8d0ac02c21c03c9bde7889643640b",
        "author": "Anand Ananthabhotla",
        "date": "2018-08-14T14:58:26-07:00",
        "message": "Fix db_stress assertion failures on 0 byte SSTs (#4273)\n\nSummary:\nIn the OnTableFileCreation() listener, assert on various TableProperties\nonly when file size > 0 bytes. The listener can get called even for 0\nbyte SSTs which have been deleted.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4273\n\nDifferential Revision: D9322738\n\nPulled By: anand1976\n\nfbshipit-source-id: 17cdfb3d0da946b9a158d7328e5db1c87973956b",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bf07e90cf2e8d0ac02c21c03c9bde7889643640b"
    },
    {
        "hash": "1b1d26434238ad53bb5191b70a38ddb07d292577",
        "author": "Yanqin Jin",
        "date": "2018-08-13T11:12:50-07:00",
        "message": "Remove an assersion about file size (#4268)\n\nSummary:\nDue to 4ea56b1bd00b5f8751e5e9733d01ceb33ebd09e3, we should also remove the\nassersion in stress test. This removal can be temporary, and we can add it back\nonce we figure out the reason for the 0-byte SSTs.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4268\n\nDifferential Revision: D9297186\n\nPulled By: riversand963\n\nfbshipit-source-id: cebba9a68f42e815f8cf24471176d2cfdf962f63",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1b1d26434238ad53bb5191b70a38ddb07d292577"
    },
    {
        "hash": "4ea56b1bd00b5f8751e5e9733d01ceb33ebd09e3",
        "author": "Anand Ananthabhotla",
        "date": "2018-08-11T16:57:36-07:00",
        "message": "Revert changes in PR #4003 (#4263)\n\nSummary:\nRevert this change. Not generating the OnTableFileCreated() notification for a 0 byte SST on flush breaks the assumption that every OnTableFileCreationStarted() notification is followed by a corresponding OnTableFileCreated().\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4263\n\nDifferential Revision: D9285623\n\nPulled By: anand1976\n\nfbshipit-source-id: 808c3dcd498b4b4f4ed4be947a29a24b2296aa8d",
        "modified_files_count": 1,
        "modified_files": [
            "db/builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4ea56b1bd00b5f8751e5e9733d01ceb33ebd09e3"
    },
    {
        "hash": "76d77205dacf6299b8345b11df375fbeafbfa5d3",
        "author": "Zhichao Cao",
        "date": "2018-08-10T17:43:33-07:00",
        "message": "Remove the redundant condition inclusion to avoid confusion (#4254)\n\nSummary:\nThe pair of ROCKSDB_LITE condition inclusion is redundant, it is already inside the #ifndef ROCKSDB_LITE. Remove them to void confusion.\n\nTested by make asan_check.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4254\n\nDifferential Revision: D9281652\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 06bf7641ede71391f21f6a3fe37fbd13f0e2a43a",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/76d77205dacf6299b8345b11df375fbeafbfa5d3"
    },
    {
        "hash": "058026a88564c8c8d6eb732de0e13e21cc82952d",
        "author": "Maysam Yabandeh",
        "date": "2018-08-10T10:27:55-07:00",
        "message": "Fix unity compile error (#4257)\n\nSummary:\nFix the compile error in \"make unity_test\" caused by #3983.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4257\n\nDifferential Revision: D9271740\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 94e56d1675bf8bdc0e94439467eb4f40dd107517",
        "modified_files_count": 1,
        "modified_files": [
            "table/block.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/058026a88564c8c8d6eb732de0e13e21cc82952d"
    },
    {
        "hash": "b271f956c2b1b429ae403a94f8a80d2a7b8d7a75",
        "author": "Yanqin Jin",
        "date": "2018-08-09T19:42:32-07:00",
        "message": "Fix a TSAN failure (#4250)\n\nSummary:\nTSAN fails due to comparison between signed int and unsigned long. Fix it by\nstatic_casting.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4250\n\nDifferential Revision: D9256535\n\nPulled By: riversand963\n\nfbshipit-source-id: c6bad23ff70c6d0ec58e2e85c401ce0ad45de609",
        "modified_files_count": 1,
        "modified_files": [
            "tools/sst_dump_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b271f956c2b1b429ae403a94f8a80d2a7b8d7a75"
    },
    {
        "hash": "1b813a9b2e7cbd404d23a8f4445347ee3333d5d5",
        "author": "Georgios Bitzes",
        "date": "2018-08-09T14:43:34-07:00",
        "message": "Make rocksdb::Slice more interoperable with std::string_view (#4242)\n\nSummary:\nThis change allows using std::string_view objects directly in the\nDB API:\n\n    db->Get(some_string_view_object, ...);\n\nThe conversion from std::string_view to rocksdb::Slice is done\nautomatically, thanks to the added constructor.\n\nI'm stopping short of adding an implicit conversion operator\nfrom rocksdb::Slice to std::string_view, as I don't think that's\na good idea for PinnableSlices.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4242\n\nDifferential Revision: D9224134\n\nPulled By: anand1976\n\nfbshipit-source-id: f50aad04dd0b01737907c0fb88d495c83a81f4e4",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/slice.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1b813a9b2e7cbd404d23a8f4445347ee3333d5d5"
    },
    {
        "hash": "b15379dceab5a7ef387561af35b73c1b6def93b0",
        "author": "Zhongyi Xie",
        "date": "2018-08-09T11:13:10-07:00",
        "message": "fix use-after-free error involving a temporary string (#4240)\n\nSummary:\nIn the current code, `error_msg` is pointing to the inner buffer of a temporary std::string object. When `error_msg` is used to construct the error message, that array is already released. This PR will fix this bug by copying the string to a local variable.\nFixes https://github.com/facebook/rocksdb/issues/4239\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4240\n\nDifferential Revision: D9204334\n\nPulled By: miasantreble\n\nfbshipit-source-id: 0ac599e166ae0a4ec413e32d8b8853d7c5fba878",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_open.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b15379dceab5a7ef387561af35b73c1b6def93b0"
    },
    {
        "hash": "7a9a1642767a036a82fb5a0584f82ff8f7b4755d",
        "author": "Andrew Kryczka",
        "date": "2018-08-09T10:28:14-07:00",
        "message": "Fix db_bench default compression level (#4248)\n\nSummary:\ndb_bench's previous default compression level (-1) was not the default compression level in all libraries. In particular, in ZSTD negative values are valid compression levels, while ZSTD's default compression level is three.\n\nThis PR changes db_bench's default to be RocksDB's library-independent default compression level (see #3895). I also changed a couple other flags to get their default values from an options object directly rather than hardcoding.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4248\n\nDifferential Revision: D9235140\n\nPulled By: ajkr\n\nfbshipit-source-id: be4e0722d59fa1968832183db36d1d20fcf11e5b",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7a9a1642767a036a82fb5a0584f82ff8f7b4755d"
    },
    {
        "hash": "eb8885a08a688e08131c2a7acb94bca746de6789",
        "author": "Maysam Yabandeh",
        "date": "2018-08-08T17:43:00-07:00",
        "message": "Return correct usable_size for BlockContents (#4246)\n\nSummary:\nIf jemalloc is disabled or the API is incorrectly referenced (jemalloc api on windows have a prefix je_) memory usage is incorrectly reported for all block sizes. This is because sizeof(char) is always 1. sizeof() is calculated at compile time and *(char*) is char. The patch uses the size of the slice to fix that.\nFixes #4245\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4246\n\nDifferential Revision: D9233958\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 9646933b24504e2814c7379f06a31148829c6b4e",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eb8885a08a688e08131c2a7acb94bca746de6789"
    },
    {
        "hash": "bbf30330b4cf459de3a7de0d3af77006e91d1f55",
        "author": "Jean-Marc Le Roux",
        "date": "2018-08-08T08:12:02-07:00",
        "message": "Fix the build failure with OS_ANDROID (#4232)\n\nSummary:\nsysmacros.h should be included in OS_ANDROID build as well otherwise the compile would complain: error: use of undeclared identifier 'major'.\nFixes https://github.com/facebook/rocksdb/issues/4231\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4232\n\nDifferential Revision: D9217350\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 21f4b62dbbda3163120ac0b38b95d95d35d67dce",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bbf30330b4cf459de3a7de0d3af77006e91d1f55"
    },
    {
        "hash": "d8d66c937e6730fc87b29d1711662b500b52df22",
        "author": "Maysam Yabandeh",
        "date": "2018-08-08T07:27:46-07:00",
        "message": "Simplify DBWithMaxSpaceAllowedRandomized (#4235)\n\nSummary:\nThe test has become complicated over the years and hard to reason about the corner cases that makes the test flaky. The patch simplifies the test and also fixes some probable synchronization issues.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4235\n\nDifferential Revision: D9187995\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 53c7b060f14367e5a9e361014578c26debfe3d27",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d8d66c937e6730fc87b29d1711662b500b52df22"
    },
    {
        "hash": "22368965a092863f1be31da88e9d6126aa50ce39",
        "author": "Yanqin Jin",
        "date": "2018-08-03T13:57:40-07:00",
        "message": "Modify verification logic of ObsoleteOptionsFileTest (#4218)\n\nSummary:\nThe current verification logic does not consider the case in which multiple\nthreads (foreground and background) may execute `PurgeObsoleteFiles` function\nsimultaneously. Each invocation will trigger the callback adding elements to\na vector. Then we verify the elements in the vector, which can fail sometimes.\n\nThe solution is to give up checking the elements. Instead, we check the number\nof OPTIONS file in the database dir.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4218\n\nDifferential Revision: D9128727\n\nPulled By: riversand963\n\nfbshipit-source-id: 2b13b705fb21bc0ddd41940c4ec9b6b0c8d88224",
        "modified_files_count": 1,
        "modified_files": [
            "db/obsolete_files_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/22368965a092863f1be31da88e9d6126aa50ce39"
    },
    {
        "hash": "fefdac1004c9156a3a18d3063174fa8fae158f11",
        "author": "Sagar Vemuri",
        "date": "2018-08-03T11:58:55-07:00",
        "message": "Fix lite build failure in db_bench due to trace/replay (#4225)\n\nSummary:\nFix lite build failure in db_bench due to trace/replay feature.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4225\n\nDifferential Revision: D9153303\n\nPulled By: sagar0\n\nfbshipit-source-id: 9f7a8035429d0dcdbe99616d11389ed7bccf44be",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fefdac1004c9156a3a18d3063174fa8fae158f11"
    },
    {
        "hash": "f9373e2d5c6db013862c9d09ebef2470d15897af",
        "author": "DorianZheng",
        "date": "2018-08-02T18:57:34-07:00",
        "message": "Make sure to call ReleaseFileNumberFromPendingOutputs\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/4219\n\nDifferential Revision: D9144294\n\nPulled By: riversand963\n\nfbshipit-source-id: e46b72e5f8a149dc7a0512e38edcd0ddb0150f30",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f9373e2d5c6db013862c9d09ebef2470d15897af"
    },
    {
        "hash": "f8f6983f8978969802d56c231b5af7b5c427488b",
        "author": "Andrew Kryczka",
        "date": "2018-08-01T12:12:02-07:00",
        "message": "Skip range deletions at seqno zero when collapsing (#4216)\n\nSummary:\n`CollapsedRangeDelMap` internally uses seqno zero as a sentinel value to\ndenote a gap between range tombstones or the end of range tombstones. It\ntherefore expects to never have consecutive sentinel tombstones.\n\nHowever, since `DeleteRange` is now supported in `SstFileWriter`, an\ningested file may contain range tombstones, and that ingested file may\nbe assigned global seqno zero. When such tombstones are added to the\ncollapsed map, they resemble sentinel tombstones due to having seqno\nzero. Then, the invariant mentioned above about never having consecutive\nsentinel tombstones can be violated.\n\nThe symptom of this violation was dereferencing the `end()` iterator\n(#4204). The fix in this PR is to not add range tombstones with seqno\nzero to the collapsed map. They're not needed anyways since they can't\npossibly cover anything (in case of a key and a range tombstone with the\nsame seqno, the key is visible).\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4216\n\nDifferential Revision: D9121716\n\nPulled By: ajkr\n\nfbshipit-source-id: f5b78a70bea9527354603ea7ac8542a7e2b6a210",
        "modified_files_count": 1,
        "modified_files": [
            "db/range_del_aggregator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f8f6983f8978969802d56c231b5af7b5c427488b"
    },
    {
        "hash": "ee7617167f8bf09575fc31a7470778f370ae33cc",
        "author": "Fenggang Wu",
        "date": "2018-07-31T11:43:08-07:00",
        "message": "DataBlockHashIndex: Specify that DataBlockHashIndex is not yet implemented in the comment\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/4203\n\nDifferential Revision: D9090912\n\nPulled By: fgwu\n\nfbshipit-source-id: 6a68be83693ddf2a5c060290382141f0d2fb400b",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/table.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ee7617167f8bf09575fc31a7470778f370ae33cc"
    },
    {
        "hash": "a1a546a63442578961bad69edfd8de125780e383",
        "author": "Andrew Kryczka",
        "date": "2018-07-30T17:57:44-07:00",
        "message": "Avoid integer division in filter probing (#4071)\n\nSummary:\nThe cache line size was computed dynamically based on the length of the filter bits, and the number of cache-lines encoded in the footer. This calculation had to be dynamic in case users migrate their data between platforms with different cache line sizes. The downside, though, was bloom filter probing became expensive as it did integer mod and division.\n\nHowever, since we know all possible cache line sizes are powers of two, we should be able to use bit shift to find the cache line, and bitwise-and to find the bit within the cache line. To do this, we compute the log-base-two of cache line size in the constructor, and use that in bitwise operations to replace division/mod.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4071\n\nDifferential Revision: D8684067\n\nPulled By: ajkr\n\nfbshipit-source-id: 50298872fba5acd01e8269cd7abcc51a095e0f61",
        "modified_files_count": 1,
        "modified_files": [
            "util/bloom.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a1a546a63442578961bad69edfd8de125780e383"
    },
    {
        "hash": "8abafb1feb6eebf236a8567a52144829e21836d3",
        "author": "Yanqin Jin",
        "date": "2018-07-30T17:42:12-07:00",
        "message": "Generalize parameters generation. (#4046)\n\nSummary:\nMaking generation of column families and keys virtual function so that\nsubclasses of StressTest can override them to provide custom parameter\ngeneration for more flexibility. This will be useful for future tests.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4046\n\nDifferential Revision: D9073382\n\nPulled By: riversand963\n\nfbshipit-source-id: 2754f0fdfa5c24d95c1f92d4944bc479552fb665",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8abafb1feb6eebf236a8567a52144829e21836d3"
    },
    {
        "hash": "c33b32671e0b925ccc232f9574ebaaca22bbe08b",
        "author": "Maysam Yabandeh",
        "date": "2018-07-27T11:42:37-07:00",
        "message": "Correct description of GetColumnFamilyMetaData (#4196)\n\nSummary:\nThe inline doc was incorrectly mentioned a return status while the function does not return a value.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4196\n\nDifferential Revision: D9030927\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 07c34dc6bf521021bf790ac1bfedb676171129ec",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c33b32671e0b925ccc232f9574ebaaca22bbe08b"
    },
    {
        "hash": "fd45495cf54eeb7df3ee7d06487091f2b98c6c3f",
        "author": "Siying Dong",
        "date": "2018-07-26T11:12:29-07:00",
        "message": "DBImpl::IngestExternalFile() should grab mutex when releasing file number in failure case (#4189)\n\nSummary:\n995fcf757319da9cf12eca2df83a6fba4db0ebe4 has a bug: ReleaseFileNumberFromPendingOutputs() added is not protected by the DB mutex. Fix it by grabbing the lock for this operation.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4189\n\nDifferential Revision: D9015447\n\nPulled By: siying\n\nfbshipit-source-id: b8506e09a96c3f95a6fe32b5ca5fcdb9bee88937",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fd45495cf54eeb7df3ee7d06487091f2b98c6c3f"
    },
    {
        "hash": "6811fb06581e3ca0bd856a0473ee03e18e7178f2",
        "author": "Zhichao Cao",
        "date": "2018-07-20T15:58:54-07:00",
        "message": "Fixed the db_bench MergeRandom only access CF_default (#4155)\n\nSummary:\nWhen running the tracing and analyzing, I found that MergeRandom benchmark in db_bench only access the default column family even the -num_column_families is specified > 1.\n\nchanges: Using the db_with_cfh as DB to randomly select the column family to execute the Merge operation if -num_column_families is specified > 1.\n\nTested with make asan_check and verified in tracing\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4155\n\nDifferential Revision: D8907888\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 2b4bc8fe0e99c8f262f5be6b986c7025d62cf850",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6811fb06581e3ca0bd856a0473ee03e18e7178f2"
    },
    {
        "hash": "2736752b33d451e5d57d2754eebacf0afe8d8e33",
        "author": "Yanqin Jin",
        "date": "2018-07-19T17:27:56-07:00",
        "message": "Fix a bug in MANIFEST group commit (#4157)\n\nSummary:\nPR #3944 introduces group commit of `VersionEdit` in MANIFEST. The\nimplementation has a bug. When updating the log file number of each column\nfamily, we must consider only `VersionEdit`s that operate on the same column\nfamily. Otherwise, a column family may accidentally set its log file number\nhigher than actual value, indicating that log files with smaller file number\nwill be ignored, thus causing some updates to be lost.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4157\n\nDifferential Revision: D8916650\n\nPulled By: riversand963\n\nfbshipit-source-id: 8f456cf688f17bf35ad87b38e30e899aa162f201",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2736752b33d451e5d57d2754eebacf0afe8d8e33"
    },
    {
        "hash": "b5613227a98afeb171797efd39b6c3de859c1ede",
        "author": "Andrew Kryczka",
        "date": "2018-07-19T16:13:22-07:00",
        "message": "Smaller tail readahead when not reading index/filters (#4159)\n\nSummary:\nIn all cases during `BlockBasedTable::Open`, we issue at least three read requests to the file's tail: (1) footer, (2) metaindex block, and (3) properties block. Depending on the config, we may also read other metablocks like filter and index.\n\nThis PR issues smaller readahead when we expect to do only the three necessary reads mentioned above. Then, 4KB should be enough (ignoring the case where there are lots of user-defined properties). We can keep doing 512KB readahead when additional reads are expected.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4159\n\nDifferential Revision: D8924002\n\nPulled By: ajkr\n\nfbshipit-source-id: cfc713275de4d05ce11f18571f1d72e27ccd3356",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b5613227a98afeb171797efd39b6c3de859c1ede"
    },
    {
        "hash": "1857576e031f1da57dfe153f3ac666aa13ee4a9c",
        "author": "Pooja Malik",
        "date": "2018-07-18T16:27:49-07:00",
        "message": "db_bench support for OPTIONS+bloom and nicer output for perf_context (#4153)\n\nSummary:\nAdding the string \"PERF_CONTEXT:\" before the perf_context stats are printed. Setting the filter policy if it's a block based table even when options are being loaded from the provided FLAGS_options_file.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4153\n\nDifferential Revision: D8905517\n\nPulled By: poojam23\n\nfbshipit-source-id: 5956ed7882d39ec8ae654d5dadeb88727a36f0dd",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1857576e031f1da57dfe153f3ac666aa13ee4a9c"
    },
    {
        "hash": "4bb1e239b5d348400b682519ee74a7ee198fd38f",
        "author": "Siying Dong",
        "date": "2018-07-18T10:43:54-07:00",
        "message": "Cap concurrent arena's shard block size to 128KB (#4147)\n\nSummary:\nUsers sometime see their memtable size far smaller than expected. They probably have hit a fragementation of shard blocks. Cap their size anyway to reduce the impact of problem. 128KB is conservative so I don't imagine it can cause any performance problem.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4147\n\nDifferential Revision: D8886706\n\nPulled By: siying\n\nfbshipit-source-id: 8528a2a4196aa4457274522e2565fd3ff28f621e",
        "modified_files_count": 1,
        "modified_files": [
            "util/concurrent_arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4bb1e239b5d348400b682519ee74a7ee198fd38f"
    },
    {
        "hash": "37e0fdc8247b3726c009ff9d88e39966f8438e3a",
        "author": "Siying Dong",
        "date": "2018-07-17T17:57:46-07:00",
        "message": "DBSSTTest.DeleteSchedulerMultipleDBPaths data race (#4146)\n\nSummary:\nFix a minor data race in DBSSTTest.DeleteSchedulerMultipleDBPaths reported by TSAN\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4146\n\nDifferential Revision: D8880945\n\nPulled By: siying\n\nfbshipit-source-id: 25c632f685757735c59ad4ff26b2f346a443a446",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/37e0fdc8247b3726c009ff9d88e39966f8438e3a"
    },
    {
        "hash": "fb768a4289fe941a31e23cb23ef34bc7c892ffc9",
        "author": "Sagar Vemuri",
        "date": "2018-07-16T22:28:24-07:00",
        "message": "Dump mutable FIFO and Universal compaction options (#4140)\n\nSummary:\nWe forgot to dump FIFO and Universal compaction options to the LOG when any option was dynamically changed via `SetOptions` API. Now added those options also to `MutableCFOptions::Dump`.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4140\n\nDifferential Revision: D8865634\n\nPulled By: sagar0\n\nfbshipit-source-id: 05a93e26ab8e72fec6249acccd09b0eb3e1ef0ac",
        "modified_files_count": 1,
        "modified_files": [
            "options/cf_options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fb768a4289fe941a31e23cb23ef34bc7c892ffc9"
    },
    {
        "hash": "21171615c10ee1a636ea28f2303a93a4bc39dbde",
        "author": "Yanqin Jin",
        "date": "2018-07-13T17:27:39-07:00",
        "message": "Reduce execution time of IngestFileWithGlobalSeqnoRandomized (#4131)\n\nSummary:\nMake `ExternalSSTFileTest.IngestFileWithGlobalSeqnoRandomized` run faster.\n\n`make format`\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4131\n\nDifferential Revision: D8839952\n\nPulled By: riversand963\n\nfbshipit-source-id: 4a7e842fde1cde4dc902e928a1cf511322578521",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/21171615c10ee1a636ea28f2303a93a4bc39dbde"
    },
    {
        "hash": "23b76252c8d89a6780c51ac799626cd9f7fb6299",
        "author": "Zhongyi Xie",
        "date": "2018-07-13T16:43:53-07:00",
        "message": "db_bench: enable setting cache_size when loading options file\n\nSummary: Pull Request resolved: https://github.com/facebook/rocksdb/pull/4118\n\nDifferential Revision: D8845554\n\nPulled By: miasantreble\n\nfbshipit-source-id: 13bd3c1259a7c30bad762a413fe3bb24eea650ba",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/23b76252c8d89a6780c51ac799626cd9f7fb6299"
    },
    {
        "hash": "de98fd88e3b9e4ac5c8114aada07635256d9e3ae",
        "author": "Zhongyi Xie",
        "date": "2018-07-12T19:42:27-07:00",
        "message": "Support compaction filter in db_bench (#4106)\n\nSummary:\nRight now there is no support for enabling compaction filter in db_bench, we should add support for that to facilitate testing of compaction filter.\nThis PR adds a compaction filter called KeepFilter and make `Filter` always returns false, essentially a noop compaction filter. This will allow us to test compaction filter code path without having to support arbitrary compaction filters\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4106\n\nDifferential Revision: D8828517\n\nPulled By: miasantreble\n\nfbshipit-source-id: 9ad76d04103eaa9d00da98334b4a39e542d26c41",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/de98fd88e3b9e4ac5c8114aada07635256d9e3ae"
    },
    {
        "hash": "97fe23fc5c87e0a4deb4d9260e05ee608945e981",
        "author": "Andrew Kryczka",
        "date": "2018-07-12T18:43:23-07:00",
        "message": "Fix unsigned int flag in db_bench (#4129)\n\nSummary:\n`DEFINE_uint32` was unavailable on some platforms, e.g., https://travis-ci.org/facebook/rocksdb/jobs/403352902. Use `DEFINE_uint64` instead which should work as it's used many times elsewhere in this file.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4129\n\nDifferential Revision: D8830311\n\nPulled By: ajkr\n\nfbshipit-source-id: b4fc90ba3f50e649c070ce8069c68e530d731f05",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/97fe23fc5c87e0a4deb4d9260e05ee608945e981"
    },
    {
        "hash": "520bbb1774cefe51306d0821f6e7118e1013ea08",
        "author": "Yanqin Jin",
        "date": "2018-07-12T18:27:15-07:00",
        "message": "Disable EnvPosixTest.RunImmediately, add EnvPosixTest.RunEventually. (#4126)\n\nSummary:\nThe original `EnvPosixTest.RunImmediately` assumes that after scheduling\na background thread, the thread is guaranteed to complete after 0.1 second.\nI do not know about any non-real-time OS/runtime providing this guarantee. Nor\ndoes C++11 standard say anything about this in the documentation of `std::thread`.\nIn fact, we have observed this test failure multiple times on appveyor, and we\nhaven't been able to reproduce the failure deterministically. Therefore,\nI disable this test for now until we know for sure how it used to fail.\n\nInstead, I add another test `EnvPosixTest.RunEventually` that checks that\na thread will be scheduled eventually.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4126\n\nDifferential Revision: D8827086\n\nPulled By: riversand963\n\nfbshipit-source-id: abc5cb655f90d50b791493da5eeb3716885dfe93",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/520bbb1774cefe51306d0821f6e7118e1013ea08"
    },
    {
        "hash": "90ebf1a2574680f60fe3addae16581537468cde7",
        "author": "Yanqin Jin",
        "date": "2018-07-12T17:42:03-07:00",
        "message": "Reduce execution time of a test. (#4127)\n\nSummary:\nReduce the number of key ranges in `ExternalSSTFileTest.OverlappingRanges` so\nthat the test completes in shorter time to avoid timeouts.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4127\n\nDifferential Revision: D8827851\n\nPulled By: riversand963\n\nfbshipit-source-id: a16387b0cc92a7c872b1c50f0cfbadc463afc9db",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/90ebf1a2574680f60fe3addae16581537468cde7"
    },
    {
        "hash": "63904434eb87183ea353914b07cd8dc53f40ddac",
        "author": "Andrew Kryczka",
        "date": "2018-07-12T15:57:42-07:00",
        "message": "db_bench periodically dump stats to info log (#4109)\n\nSummary:\ngive control of how often stats are printed, including jemalloc stats if enabled. Previously the default was 10 minutes so we'd only see updated stats for very long benchmark runs.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4109\n\nDifferential Revision: D8796444\n\nPulled By: ajkr\n\nfbshipit-source-id: fd7902fe3f105fae89322c4ab63316bba4a2b15e",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/63904434eb87183ea353914b07cd8dc53f40ddac"
    },
    {
        "hash": "dbeaa0d397fd2d26e105817242782024d1e607b7",
        "author": "Yanqin Jin",
        "date": "2018-07-12T14:42:39-07:00",
        "message": "Reduce #iterations to shorten execution time. (#4123)\n\nSummary:\nReduce #iterations from 5000 to 1000 so that\n`ExternalSSTFileTest.CompactDuringAddFileRandom` can finish faster.\nOn the one hand, 5000 iterations does not seem to improve the quality of unit\ntest in comparison with 1000. On the other hand, long running tests should belong to stress tests.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4123\n\nDifferential Revision: D8822514\n\nPulled By: riversand963\n\nfbshipit-source-id: 0f439b8d5ccd9a4aed84638f8bac16382de17245",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dbeaa0d397fd2d26e105817242782024d1e607b7"
    },
    {
        "hash": "1ea83c5de98aec22bc946236094156ba14ed719e",
        "author": "Anand Ananthabhotla",
        "date": "2018-07-11T23:41:58-07:00",
        "message": "Reduce runtime of compact_on_deletion_collector_test (#4117)\n\nSummary:\nThis test routinely exceeds the FB contbuild test timeout of 10 minutes,\ndue to the large number of iterations. The large number (mainly due to\n100 randomly selected window sizes) does not seem to add any value.\nReduce it to allow the test to finish in < 10 mins.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4117\n\nDifferential Revision: D8815646\n\nPulled By: anand1976\n\nfbshipit-source-id: 260690d24f444767ad93b039dec3ae8b9cdd1843",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/table_properties_collectors/compact_on_deletion_collector_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1ea83c5de98aec22bc946236094156ba14ed719e"
    },
    {
        "hash": "db7ae0a485de0bbb4acd2ec2391d634b2ce9c854",
        "author": "Yanqin Jin",
        "date": "2018-07-06T16:12:49-07:00",
        "message": "Fix a map lookup that may throw exception. (#4098)\n\nSummary:\n`std::map::at(key)` throws std::out_of_range if key does not exist. Current\ncode does not handle this. Although this case is unlikely, I feel it's safe to\nuse `std::map::find`.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4098\n\nDifferential Revision: D8753865\n\nPulled By: riversand963\n\nfbshipit-source-id: 9a9ba43badb0fb5e0d24cd87903931fd12f3f8ec",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_ingestion_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/db7ae0a485de0bbb4acd2ec2391d634b2ce9c854"
    },
    {
        "hash": "35b83327a76b41e5109ce0287f0677c320bef28c",
        "author": "Huachao Huang",
        "date": "2018-07-05T20:12:56-07:00",
        "message": "compaction: fix max_subcompactions option for CompactRange (#4082)\n\nSummary:\nThe max_subcompactions option was introduced in https://github.com/facebook/rocksdb/pull/3775.\nCloses https://github.com/facebook/rocksdb/pull/4082\n\nDifferential Revision: D8743258\n\nPulled By: ajkr\n\nfbshipit-source-id: d60ee75769dfc19ab6f8754e4ff3a267848f1ed9",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/35b83327a76b41e5109ce0287f0677c320bef28c"
    },
    {
        "hash": "39218a72a4fb728bc2892af684b9a9019cb15dd0",
        "author": "Yanqin Jin",
        "date": "2018-07-05T11:45:11-07:00",
        "message": "Increase the size of LRU cache. (#4090)\n\nSummary:\nIncrease the size of each shard so that the number of cache hit/miss match\nexpectation. Otherwise FilterBlockInBlockCache test will fail.\nCloses https://github.com/facebook/rocksdb/pull/4090\n\nDifferential Revision: D8736158\n\nPulled By: riversand963\n\nfbshipit-source-id: 5cdbc06b02390389fd5b72a6d251d88949ad3d91",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/39218a72a4fb728bc2892af684b9a9019cb15dd0"
    },
    {
        "hash": "0d234dfce4871d033dbfe811f107c627f1e5e3e4",
        "author": "Adam Retter",
        "date": "2018-07-02T10:27:36-07:00",
        "message": "Remove unused arg which causes compilation failure (#4080)\n\nSummary:\nIt seems that compilation has been made stricter about unused args.\nCloses https://github.com/facebook/rocksdb/pull/4080\n\nDifferential Revision: D8712049\n\nPulled By: sagar0\n\nfbshipit-source-id: 984af1982638af3568aac1a167f565f4741badee",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/sst_file_manager.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0d234dfce4871d033dbfe811f107c627f1e5e3e4"
    },
    {
        "hash": "36fa49ceb5ebf3e6232933c0f13c1551639f6411",
        "author": "Daniel Black",
        "date": "2018-06-29T11:43:36-07:00",
        "message": "transaction_test: -Wunused-variable with clang-7 (#4074)\n\nSummary:\nclang version 7.0.0- (trunk)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /usr/bin\n\nclang++-7  -DROCKSDB_USE_RTTI -g -W -Wextra -Wall -Wsign-compare -Wshadow -Wno-unused-parameter -Werror -I. -I./include -std=c++11  -DROCKSDB_PLATFORM_POSIX -DROCKSDB_LIB_IO_POSIX  -DOS_LINUX -fno-builtin-memcmp -DROCKSDB_FALLOCATE_PRESENT -DSNAPPY -DGFLAGS=google -DZLIB -DBZIP2 -DROCKSDB_MALLOC_USABLE_SIZE -DROCKSDB_PTHREAD_ADAPTIVE_MUTEX -DROCKSDB_BACKTRACE -DROCKSDB_RANGESYNC_PRESENT -DROCKSDB_SCHED_GETCPU_PRESENT -Wshorten-64-to-32 -march=native  -DHAVE_SSE42 -DROCKSDB_SUPPORT_THREAD_LOCAL  -isystem ./third-party/gtest-1.7.0/fused-src -DTRAVIS -O2 -fno-omit-frame-pointer -momit-leaf-frame-pointer -Woverloaded-virtual -Wnon-virtual-dtor -Wno-missing-field-initializers -c utilities/transactions/transaction_test.cc -o utilities/transactions/transaction_test.o\nutilities/transactions/transaction_test.cc:2282:22: error: unused variable 'txn_options' [-Werror,-Wunused-variable]\n  TransactionOptions txn_options;\n                     ^\nutilities/transactions/transaction_test.cc:2822:22: error: unused variable 'txn_options' [-Werror,-Wunused-variable]\n  TransactionOptions txn_options;\n                     ^\nutilities/transactions/transaction_test.cc:2928:22: error: unused variable 'txn_options' [-Werror,-Wunused-variable]\n  TransactionOptions txn_options;\n                     ^\nutilities/transactions/transaction_test.cc:3109:22: error: unused variable 'txn_options' [-Werror,-Wunused-variable]\n  TransactionOptions txn_options;\n                     ^\nutilities/transactions/transaction_test.cc:4364:22: error: unused variable 'txn_options' [-Werror,-Wunused-variable]\n  TransactionOptions txn_options;\n                     ^\nCloses https://github.com/facebook/rocksdb/pull/4074\n\nDifferential Revision: D8698051\n\nPulled By: ajkr\n\nfbshipit-source-id: 6255618eefdd189962fbea1b02cf1eb5ae501274",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/36fa49ceb5ebf3e6232933c0f13c1551639f6411"
    },
    {
        "hash": "2462763b2e77067936b97e7ef661356f3fd649ce",
        "author": "Maysam Yabandeh",
        "date": "2018-06-29T09:28:12-07:00",
        "message": "Fix mis-spoken assert on prefetch_filter and prefetch_index (#4077)\n\nSummary:\nWe can have prefetch_index without prefetch_filter but not the other way around. The assert statement is fixed.\nCloses https://github.com/facebook/rocksdb/pull/4077\n\nDifferential Revision: D8694472\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: ccd2804d9d9cdafb1c3e65062c7bc38603e69004",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2462763b2e77067936b97e7ef661356f3fd649ce"
    },
    {
        "hash": "25403c2265cb700462d59fa3cb9dbec85d25d48f",
        "author": "Andrew Kryczka",
        "date": "2018-06-28T13:20:29-07:00",
        "message": "Prefetch cache lines for filter lookup (#4068)\n\nSummary:\nSince the filter data is unaligned, even though we ensure all probes are within a span of `cache_line_size` bytes, those bytes can span two cache lines. In that case I doubt hardware prefetching does a great job considering we don't necessarily access those two cache lines in order. This guess seems correct since adding explicit prefetch instructions reduced filter lookup overhead by 19.4%.\nCloses https://github.com/facebook/rocksdb/pull/4068\n\nDifferential Revision: D8674189\n\nPulled By: ajkr\n\nfbshipit-source-id: 747427d9a17900151c17820488e3f7efe06b1871",
        "modified_files_count": 1,
        "modified_files": [
            "util/bloom.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/25403c2265cb700462d59fa3cb9dbec85d25d48f"
    },
    {
        "hash": "0a5b5d88b2da594ed94b714f415d1059ad0fc07b",
        "author": "Maysam Yabandeh",
        "date": "2018-06-28T08:42:17-07:00",
        "message": "Remove ReadOnly part of PinnableSliceAndMmapReads from Lite (#4070)\n\nSummary:\nLite does not support readonly DBs.\nCloses https://github.com/facebook/rocksdb/pull/4070\n\nDifferential Revision: D8677858\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 536887d2363ee2f5d8e1ea9f1a511e643a1707fa",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0a5b5d88b2da594ed94b714f415d1059ad0fc07b"
    },
    {
        "hash": "b557499eeeb37c5e5ec741d5b152a838b97b630a",
        "author": "Taewook Oh",
        "date": "2018-06-27T22:13:48-07:00",
        "message": "Suppress leak warning for clang(LLVM) asan (#4066)\n\nSummary:\nInstead of __SANITIZE_ADDRESS__ macro, LLVM uses __has_feature(address_sanitzer) to check if ASAN is enabled for the build. I tested it with MySQL sanitizer build that uses RocksDB as a submodule.\nCloses https://github.com/facebook/rocksdb/pull/4066\n\nReviewed By: riversand963\n\nDifferential Revision: D8668941\n\nPulled By: taewookoh\n\nfbshipit-source-id: af4d1da180c1470d257a228f431eebc61490bc36",
        "modified_files_count": 1,
        "modified_files": [
            "cache/lru_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b557499eeeb37c5e5ec741d5b152a838b97b630a"
    },
    {
        "hash": "7f850b889dbd484d7dc082b9adc46a82764a840d",
        "author": "Yanqin Jin",
        "date": "2018-06-27T20:59:45-07:00",
        "message": "Remove 'ALIGNAS' from StatisticsImpl. (#4061)\n\nSummary:\nRemove over-alignment on `StatisticsImpl` whose benefit is vague and causes UBSAN check to fail due to `std::make_shared` not respecting the over-alignment requirement.\n\nTest plan\n```\n$ make clean && COMPILE_WITH_UBSAN=1 OPT=-g make -j16 ubsan_check\n```\nCloses https://github.com/facebook/rocksdb/pull/4061\n\nDifferential Revision: D8656506\n\nPulled By: riversand963\n\nfbshipit-source-id: db355ae9c7bdd2c9e9c5e63cabba13d8d82cc5f9",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/statistics.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7f850b889dbd484d7dc082b9adc46a82764a840d"
    },
    {
        "hash": "2729dd72ad7bf0057bb095ecca51be43d1990f7d",
        "author": "Yanqin Jin",
        "date": "2018-06-23T17:12:14-07:00",
        "message": "Reclaim memory allocated to backup_engine.\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/4045\n\nDifferential Revision: D8595609\n\nPulled By: riversand963\n\nfbshipit-source-id: 5ba5954d804b82b0e7264b2e18e1da4c94103b53",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2729dd72ad7bf0057bb095ecca51be43d1990f7d"
    },
    {
        "hash": "c726f7fda84fbd047ed86bf650198c14c16321a6",
        "author": "Yi Wu",
        "date": "2018-06-22T11:43:50-07:00",
        "message": "Fix dangling checkpoint pointer in db_stress (#4042)\n\nSummary:\nFix db_stress failed to delete checkpoint pointer. It's caught by asan_crash test.\nCloses https://github.com/facebook/rocksdb/pull/4042\n\nDifferential Revision: D8592604\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 7b2d67d5e3dfb05f71c33fcf320482303e97d3ef",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c726f7fda84fbd047ed86bf650198c14c16321a6"
    },
    {
        "hash": "645e57c22d898623b6a470d44ee15ef9d9ca5546",
        "author": "Sagar Vemuri",
        "date": "2018-06-21T14:58:01-07:00",
        "message": "Assert for Direct IO at the beginning in PositionedRead (#3891)\n\nSummary:\nMoved the direct-IO assertion to the top in `PosixSequentialFile::PositionedRead`, as it doesn't make sense to check for sector alignments before checking for direct IO.\nCloses https://github.com/facebook/rocksdb/pull/3891\n\nDifferential Revision: D8267972\n\nPulled By: sagar0\n\nfbshipit-source-id: 0ecf77c0fb5c35747a4ddbc15e278918c0849af7",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/645e57c22d898623b6a470d44ee15ef9d9ca5546"
    },
    {
        "hash": "397495964b73f8fb90e9a4e1210d27ed429ce381",
        "author": "Yanqin Jin",
        "date": "2018-06-21T11:13:09-07:00",
        "message": "Fix a warning (treated as error) caused by type mismatch.\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/4032\n\nDifferential Revision: D8573061\n\nPulled By: riversand963\n\nfbshipit-source-id: 112324dcb35956d6b3ec891073f4f21493933c8b",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/397495964b73f8fb90e9a4e1210d27ed429ce381"
    },
    {
        "hash": "14cee194d6fad573cc52972c4f06e0e376ab84b1",
        "author": "Andrew Kryczka",
        "date": "2018-06-20T22:27:45-07:00",
        "message": "Support file ingestion in stress test (#4018)\n\nSummary:\nOnce per `ingest_external_file_one_in` operations, uses SstFileWriter to create a file containing `ingest_external_file_width` consecutive keys. The file is named containing the thread ID to avoid clashes. The file is then added to the DB using `IngestExternalFile`.\n\nWe can't enable it by default in crash test because `nooverwritepercent` and `test_batches_snapshot` both must be zero for the DB's whole lifetime. Perhaps we should setup a separate test with that config as range deletion also requires it.\nCloses https://github.com/facebook/rocksdb/pull/4018\n\nDifferential Revision: D8507698\n\nPulled By: ajkr\n\nfbshipit-source-id: 1437ea26fd989349a9ce8b94117241c65e40f10f",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/14cee194d6fad573cc52972c4f06e0e376ab84b1"
    },
    {
        "hash": "c766887458e794956e7f605340dcb959b34a0507",
        "author": "Tomas Kolda",
        "date": "2018-06-18T14:57:37-07:00",
        "message": "Fix ExternalSSTFileTest::OverlappingRanges test on Solaris Sparc (#4012)\n\nSummary:\nFix of #4011\nCloses https://github.com/facebook/rocksdb/pull/4012\n\nDifferential Revision: D8499173\n\nPulled By: sagar0\n\nfbshipit-source-id: cbb2b90c544ed364a3640ea65835d577b2dbc5df",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c766887458e794956e7f605340dcb959b34a0507"
    },
    {
        "hash": "7b4b43febb99eea4d63f49f20fd663ebcdc6ba3a",
        "author": "Tomas Kolda",
        "date": "2018-06-18T13:58:28-07:00",
        "message": "zLinux build error with gcc and IBM Java headers (#4013)\n\nSummary:\n`SetByteArrayRegion` does not have const source buffer thus compilation error. I have made that same as in other JNI files (const_cast). It was missing for new transaction functionality added recently.\nCloses https://github.com/facebook/rocksdb/pull/4013\n\nDifferential Revision: D8493290\n\nPulled By: sagar0\n\nfbshipit-source-id: 14afedf365b111121bd11e68a8d546a1cae68b26",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/transaction.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7b4b43febb99eea4d63f49f20fd663ebcdc6ba3a"
    },
    {
        "hash": "c48764ba4709c1f7825fb317043cd6ab51779ed2",
        "author": "Anand Ananthabhotla",
        "date": "2018-06-15T17:57:24-07:00",
        "message": "Don't generate a notification for a 0 size SST (#4003)\n\nSummary:\nDon't call the OnTableFileCreated listener callback when a 0 size SST\nfile gets created by Flush. Doing so causes an assertion failure in db_stress. It is also not correct behavior as we call env->DeleteFile() for such files right before the notification.\nCloses https://github.com/facebook/rocksdb/pull/4003\n\nDifferential Revision: D8461385\n\nPulled By: anand1976\n\nfbshipit-source-id: ae92d4f921c2e2cff981ad58f4929ed8b609f35d",
        "modified_files_count": 1,
        "modified_files": [
            "db/builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c48764ba4709c1f7825fb317043cd6ab51779ed2"
    },
    {
        "hash": "4faaab70a6e100d25f598644769882b8494cb772",
        "author": "Hans-Wilhelm Warlo",
        "date": "2018-06-15T12:12:03-07:00",
        "message": "Benchmark sine wave write rate limit (#3914)\n\nSummary:\nAs mentioned at the [dev forum.](https://www.facebook.com/groups/rocksdb.dev/1693425187422655/)\n\nLet me know if you would like me to do any changes!\nCloses https://github.com/facebook/rocksdb/pull/3914\n\nDifferential Revision: D8452824\n\nPulled By: siying\n\nfbshipit-source-id: 56439b3228ecdcc5a199d5198eff2fab553be961",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4faaab70a6e100d25f598644769882b8494cb772"
    },
    {
        "hash": "fbe3b9e2b61c952782821d5dd5e898346d5dee53",
        "author": "Fenggang Wu",
        "date": "2018-06-15T10:42:21-07:00",
        "message": "Udpate db_universal_compaction_test according to PR #3970 (#3995)\n\nSummary:\nThe SST file sizes changed slightly after the improvement of PR #3970\nwhich reduces the size of the properties block. Before PR #3970 a size\nratio compaction included all of the first four flushed files but it\nonly includes two files after. We increase the size_ratio universal\ncompaction option to make that compaction include all four files again.\nCloses https://github.com/facebook/rocksdb/pull/3995\n\nDifferential Revision: D8426925\n\nPulled By: fgwu\n\nfbshipit-source-id: 1429c38672e9f4fb4d4881fd4b06db45c4861d62",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_universal_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fbe3b9e2b61c952782821d5dd5e898346d5dee53"
    },
    {
        "hash": "dd216dd76a35c2e512e1501cd16607f4ec61de2e",
        "author": "Andrew Kryczka",
        "date": "2018-06-13T13:43:23-07:00",
        "message": "Choose unique keys faster in db_stress (#3990)\n\nSummary:\ndb_stress initialization randomly chooses a set of keys to not overwrite. It was doing it separately for each column family. That caused 30+ second initialization times for the non-simple crash tests, which have 10 CFs. This PR:\n\n- reuses the same set of randomly chosen no-overwrite keys across all CFs\n- logs a couple more timestamps so we can more easily see initialization time\nCloses https://github.com/facebook/rocksdb/pull/3990\n\nDifferential Revision: D8393821\n\nPulled By: ajkr\n\nfbshipit-source-id: d0b263a298df607285ffdd8b0983ff6575cc6c34",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dd216dd76a35c2e512e1501cd16607f4ec61de2e"
    },
    {
        "hash": "9d347332fb2acf418c11314fa9743c9130107226",
        "author": "Andrew Kryczka",
        "date": "2018-06-12T13:57:44-07:00",
        "message": "Fix argument mismatch in BlockBasedTableBuilder (#3974)\n\nSummary:\nThe sixth argument should be `key_includes_seq` bool, the seventh a `GetContext*`. We were mistakenly passing the `GetContext*` as the sixth argument and relying on the default (nullptr) for the seventh. This would make statistics inaccurate, at least.\n\nBlame: 402b7aa0\nCloses https://github.com/facebook/rocksdb/pull/3974\n\nDifferential Revision: D8344907\n\nPulled By: ajkr\n\nfbshipit-source-id: 3ad865a0541d6d30f75dfc726352788118cfe12e",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9d347332fb2acf418c11314fa9743c9130107226"
    },
    {
        "hash": "9c7da963bc8b3df8f3ed3865f00dd7c483267ac0",
        "author": "shpala",
        "date": "2018-06-12T13:45:18-07:00",
        "message": "Fix a crash in WinEnvIO::GetSectorSize (#3975)\n\nSummary:\nFix a crash in `WinEnvIO::GetSectorSize` that happens on old Windows systems (e.g Windows 7).\nOn old Windows systems that don't support querying StorageAccessAlignmentProperty using IOCTL_STORAGE_QUERY_PROPERTY, the flow calls a different DeviceIoControl with nullptr as lpBytesReturned.\nWhen the code reaches this point, we get an access violation.\nCloses https://github.com/facebook/rocksdb/pull/3975\n\nDifferential Revision: D8385186\n\nPulled By: ajkr\n\nfbshipit-source-id: fae4c9b4b0a52c8a10182e1b35bcaa30dc393bbb",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9c7da963bc8b3df8f3ed3865f00dd7c483267ac0"
    },
    {
        "hash": "f4502944c3b9ace4c5c1e993f4adbf85e6c8798b",
        "author": "Fenggang Wu",
        "date": "2018-06-08T12:57:14-07:00",
        "message": "Change db path for BlockBasedTableTest.BadOptions (#3965)\n\nSummary:\nBadOptions test creates a temporary db path changed to\ntable_block_based_bad_options_test to avoid collide with that created by\nthe PrefixAndWholeKeyTest\nCloses https://github.com/facebook/rocksdb/pull/3965\n\nDifferential Revision: D8316080\n\nPulled By: fgwu\n\nfbshipit-source-id: bb8e0fdfdb9abf0e5ce94494b4388cd1622ee032",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f4502944c3b9ace4c5c1e993f4adbf85e6c8798b"
    },
    {
        "hash": "3470c7585202c1be906704cb395468948975400d",
        "author": "Yanqin Jin",
        "date": "2018-06-07T15:43:09-07:00",
        "message": "Fix build errors.\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3967\n\nDifferential Revision: D8322775\n\nPulled By: riversand963\n\nfbshipit-source-id: bd73067bd5d3ed4627348f0685bc499359ad6442",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3470c7585202c1be906704cb395468948975400d"
    },
    {
        "hash": "23e1d236755118bce67cb3e7fa96a160fe197d9a",
        "author": "Zhichao Cao",
        "date": "2018-06-07T11:44:48-07:00",
        "message": "Fixed the fprintf of uint64_t by using PRIu64 (#3963)\n\nSummary:\nFixed the fprintf format of uint64_t by using PRIu64 in file tools/ldb_cmd.cc\nCloses https://github.com/facebook/rocksdb/pull/3963\n\nDifferential Revision: D8306179\n\nPulled By: zhichao-cao\n\nfbshipit-source-id: 597dcd55321576801bbf2cf4714736ebc4750a0c",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/23e1d236755118bce67cb3e7fa96a160fe197d9a"
    },
    {
        "hash": "0a0860a5fb85cb3a5565cb86beb78cb5e20ac000",
        "author": "Yanqin Jin",
        "date": "2018-06-07T10:43:00-07:00",
        "message": "Refactoring db_stress.cc (#3902)\n\nSummary:\nWe use `db_stress.cc` intensively to test and verify the behavior of RocksDB. Sometimes we need to add new tests for recently added features. Original `StressTest` class provides many general functionality that can be leveraged by other tests. Therefore, in this refactoring PR, I try to identify the general operations as well as operations that future tests most likely want to customize. Future tests can inherit `StressTest` and overriding the virtual functions to test custom logic.\nCloses https://github.com/facebook/rocksdb/pull/3902\n\nDifferential Revision: D8284607\n\nPulled By: riversand963\n\nfbshipit-source-id: 019302d04665a2b18334b6d05d04a477168c8ea4",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0a0860a5fb85cb3a5565cb86beb78cb5e20ac000"
    },
    {
        "hash": "45b6bcca9877ffffe3c4d7386089f41a128d7256",
        "author": "Zhongyi Xie",
        "date": "2018-06-06T23:42:29-07:00",
        "message": "ZSTD compression: should also expect type = kZSTDNotFinalCompression (#3964)\n\nSummary:\nDepending on the compression type, `CompressBlock` calls the compress method for each compression type. It calls ZSTD_Compress for both kZSTD and kZSTDNotFinalCompression (https://github.com/facebook/rocksdb/blob/master/table/block_based_table_builder.cc#L169).\nHowever currently ZSTD_Compress only expects the type to be kZSTD and this is causing assert failures and crashes. The same also applies to ZSTD_Uncompress.\nCloses https://github.com/facebook/rocksdb/pull/3964\n\nDifferential Revision: D8308715\n\nPulled By: miasantreble\n\nfbshipit-source-id: e5125f53edb829c9c33733167bec74e4793d0782",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/45b6bcca9877ffffe3c4d7386089f41a128d7256"
    },
    {
        "hash": "812c7371d3ac3840b1f88c59e7f514407ae45dc4",
        "author": "Mike Kolupaev",
        "date": "2018-06-05T11:43:16-07:00",
        "message": "Fix performance regression in Get() for block-based tables (#3953)\n\nSummary:\nThis fixes a regression in one of myrocks regression tests (readwhilewriting), introduced in https://github.com/facebook/rocksdb/commit/8bf555f487d1de84a4fb19cb97b9ae1a8dbebc60\n\nThis PR changes two lines of code: one of them actually fixes the observed regression, the other is a mostly unrelated small fix that I'm piggy-backing here. EDIT: Nevermind, it fixes one line. More details in inline comments.\nCloses https://github.com/facebook/rocksdb/pull/3953\n\nDifferential Revision: D8270664\n\nPulled By: al13n321\n\nfbshipit-source-id: a7d91e196807d1e816551591257c700f70e4ccac",
        "modified_files_count": 1,
        "modified_files": [
            "table/block.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/812c7371d3ac3840b1f88c59e7f514407ae45dc4"
    },
    {
        "hash": "ab2254bedf84e7219c46c11bdccaf75192330477",
        "author": "Manuel Ung",
        "date": "2018-06-04T14:44:23-07:00",
        "message": "Fix clang analyze\n\nSummary:\nThis fixes the errors as reported here:\nhttps://github.com/facebook/rocksdb/pull/3941#issuecomment-394424043\nCloses https://github.com/facebook/rocksdb/pull/3950\n\nDifferential Revision: D8263086\n\nPulled By: lth\n\nfbshipit-source-id: 5e148d489cab2153e5846d16979a0a1f2d677d57",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ab2254bedf84e7219c46c11bdccaf75192330477"
    },
    {
        "hash": "50d7ac0ea3aea74e6a7bdd78f9adde0839cbc5fc",
        "author": "Zhongyi Xie",
        "date": "2018-06-01T20:42:36-07:00",
        "message": "Fix test for rocksdb_lite: hide incompatible option kDirectIO\n\nSummary:\nPrevious commit https://github.com/facebook/rocksdb/pull/3935 unhide a few test options which includes kDirectIO. However it's not supported by RocksDB lite. Need to hide this option from the lite build.\nCloses https://github.com/facebook/rocksdb/pull/3943\n\nDifferential Revision: D8242757\n\nPulled By: miasantreble\n\nfbshipit-source-id: 1edfad3a5d01a46bfb7eedee765981ebe02c500a",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/50d7ac0ea3aea74e6a7bdd78f9adde0839cbc5fc"
    },
    {
        "hash": "2a0dfaa0446c546a474959fe3f75a13a4fcc3e23",
        "author": "Zhongyi Xie",
        "date": "2018-05-31T21:42:50-07:00",
        "message": "fix PrefixExtractorChanged: pass raw pointer instead shared_ptr\n\nSummary:\nThis should resolve the performance regression caused by the unnecessary copying of the shared_ptr.\nCloses https://github.com/facebook/rocksdb/pull/3937\n\nDifferential Revision: D8232330\n\nPulled By: miasantreble\n\nfbshipit-source-id: 7885bf7cd190b6f87164c52d6edd328298c13f97",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2a0dfaa0446c546a474959fe3f75a13a4fcc3e23"
    },
    {
        "hash": "82089d59c3e262c020ba2446b4b7d6fac9ac3bd8",
        "author": "Siying Dong",
        "date": "2018-05-31T12:58:33-07:00",
        "message": "DBImpl::FindObsoleteFiles() not to call GetChildren() on the same path\n\nSummary:\nDBImpl::FindObsoleteFiles() may call GetChildren() multiple times if different CFs are on the same path. Fix it.\nCloses https://github.com/facebook/rocksdb/pull/3885\n\nDifferential Revision: D8084634\n\nPulled By: siying\n\nfbshipit-source-id: b471fbc251f6a05e9243304dc14c0831060cc0b0",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_files.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/82089d59c3e262c020ba2446b4b7d6fac9ac3bd8"
    },
    {
        "hash": "727eb881a56d75299cb180199a74673041c8d3c8",
        "author": "Jacquin Mininger",
        "date": "2018-05-30T18:01:36-07:00",
        "message": "Compile error in db bench tool\n\nSummary:\nSmall format error below causes build to fail. I believe that this :\n```\nfprintf(stderr, \"num reads to do %lu\\n\", reads_);\n```\nCan be changed to this:\n```\nfprintf(stderr, \"num reads to do %\" PRIu64 \"\\n\", reads_);\n```\nSuccessful build\n```\n  CC       utilities/blob_db/blob_dump_tool.o\n  AR       librocksdb_debug.a\nar: creating archive librocksdb_debug.a\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: librocksdb_debug.a(rocks_lua_compaction_filter.o) has no symbols\n  CC       tools/db_bench.o\n  CC       tools/db_bench_tool.o\ntools/db_bench_tool.cc:4532:46: error: format specifies type 'unsigned long' but the argument has type 'int64_t' (aka 'long long') [-Werror,-Wformat]\n    fprintf(stderr, \"num reads to do %lu\\n\", reads_);\n                                     ~~~     ^~~~~~\n                                     %lld\n1 error generated.\nmake: *** [tools/db_bench_tool.o] Error 1\n```\n\n```\n$ cd rocksdb\n$ make all\n\n$ g++ --version\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\nApple LLVM version 9.1.0 (clang-902.0.39.1)\nTarget: x86_64-apple-darwin17.5.0\nThread model: posix\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n```\nCloses https://github.com/facebook/rocksdb/pull/3909\n\nDifferential Revision: D8215710\n\nPulled By: siying\n\nfbshipit-source-id: 15e49fb02a818fec846e9f9b2a50e372b6b67751",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/727eb881a56d75299cb180199a74673041c8d3c8"
    },
    {
        "hash": "cf826de3edcc359b90e3c3728569b2427c347654",
        "author": "Yanqin Jin",
        "date": "2018-05-29T12:28:59-07:00",
        "message": "Fix compilation error when OPT=\"-DROCKSDB_LITE\".\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3917\n\nDifferential Revision: D8187733\n\nPulled By: riversand963\n\nfbshipit-source-id: e4aa179cd0791ca77167e357f99de9afd4aef910",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cf826de3edcc359b90e3c3728569b2427c347654"
    },
    {
        "hash": "03cda531e49960b82f25e10a362845ae451f55c7",
        "author": "Maysam Yabandeh",
        "date": "2018-05-29T12:13:55-07:00",
        "message": "Check for rep_->table_properties being nullptr\n\nSummary:\nThe very old sst formats do not have table_properties and rep_->table_properties is thus nullptr. The recent patch in https://github.com/facebook/rocksdb/pull/3894 does not check for nullptr and hence makes it backward incompatible. This patch adds the check.\nCloses https://github.com/facebook/rocksdb/pull/3918\n\nDifferential Revision: D8188638\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: b1d986665ecf0b4d1c442adfa8a193b97707d47b",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/03cda531e49960b82f25e10a362845ae451f55c7"
    },
    {
        "hash": "1c1bafa668a3e1d47614399f949e672dec3eb6c0",
        "author": "奏之章",
        "date": "2018-05-28T11:27:08-07:00",
        "message": "Fix VersionStorageInfo::EstimateLiveDataSize seg fault\n\nSummary:\n`HandleEstimateLiveDataSize`'s `need_out_of_mutex` is true\nhttps://github.com/facebook/rocksdb/blob/402b7aa07f0e6da4c1f0216ff2b2e50fd2e5eaac/db/internal_stats.cc#L412-L413\nso , is will ref a `SuperVersion`\nhttps://github.com/facebook/rocksdb/blob/402b7aa07f0e6da4c1f0216ff2b2e50fd2e5eaac/db/db_impl.cc#L1896-L1908\nso , the param `version` of `InternalStats::HandleEstimateLiveDataSize` is safe , but `cfd_->current()` is not safe !\nhttps://github.com/facebook/rocksdb/blob/402b7aa07f0e6da4c1f0216ff2b2e50fd2e5eaac/db/internal_stats.cc#L790-L795\n\nthe `cfd_->current()` maybe invalid ...\n\nhere's mongo-rocks crash backtrace\n```\n mongod(mongo::printStackTrace(std::basic_ostream<char, std::char_traits<char> >&)+0x41) [0x7fe3a3137c51]\n mongod(+0x2152E89) [0x7fe3a3136e89]\n mongod(+0x21534F6) [0x7fe3a31374f6]\n libpthread.so.0(+0xF5E0) [0x7fe39f5e45e0]\n mongod(rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&, rocksdb::Slice const&) const+0x17) [0x7fe3a22375a7]\n mongod(rocksdb::VersionStorageInfo::EstimateLiveDataSize() const+0x3AA) [0x7fe3a228daba]\n mongod(rocksdb::InternalStats::HandleEstimateLiveDataSize(unsigned long*, rocksdb::DBImpl*, rocksdb::Version*)+0x20) [0x7fe3a2250d70]\n mongod(rocksdb::DBImpl::GetIntPropertyInternal(rocksdb::ColumnFamilyData*, rocksdb::DBPropertyInfo const&, bool, unsigned long*)+0xEF) [0x7fe3a21e3dbf]\n```\nCloses https://github.com/facebook/rocksdb/pull/3912\n\nDifferential Revision: D8179944\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 26f314a8f98f4c2dc4348745d759f26f0e8d95e1",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1c1bafa668a3e1d47614399f949e672dec3eb6c0"
    },
    {
        "hash": "8c3bf0801bc7a6a841343ad93369d522a524c932",
        "author": "Nathan VanBenschoten",
        "date": "2018-05-25T17:42:51-07:00",
        "message": "Check status when reading HashIndexPrefixesMetadataBlock\n\nSummary:\nThis was missed in a refactor of `ReadBlockContents` (2f1a3a4).\nCloses https://github.com/facebook/rocksdb/pull/3906\n\nDifferential Revision: D8172648\n\nPulled By: ajkr\n\nfbshipit-source-id: 27e453b19795fea974bfed4721105be6f3a12090",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8c3bf0801bc7a6a841343ad93369d522a524c932"
    },
    {
        "hash": "45434178ee342a4da892398e18099cc8d0ee8075",
        "author": "Adam Retter",
        "date": "2018-05-25T15:12:44-07:00",
        "message": "Fix an issue with unnecessary capture in lambda expressions\n\nSummary:\nCloses https://github.com/facebook/rocksdb/issues/3900\nReplaces https://github.com/facebook/rocksdb/pull/3901\n\nI needed this to build v5.12.4 on Mac OS X (10.13.3).\nCloses https://github.com/facebook/rocksdb/pull/3904\n\nDifferential Revision: D8169357\n\nPulled By: sagar0\n\nfbshipit-source-id: 85faac42168796e7def9250d0c221a9a03b84476",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/transaction_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/45434178ee342a4da892398e18099cc8d0ee8075"
    },
    {
        "hash": "c465509379d72068c19b55dbc69bf08d8c387fbe",
        "author": "Kefu Chai",
        "date": "2018-05-24T12:13:16-07:00",
        "message": "port_posix: use posix_memalign() for aligned_alloc\n\nSummary:\nto workaround issue of http://tracker.ceph.com/issues/21422 .\nand in tcmalloc aligned_alloc and posix_memalign() are basically the\nsame thing. the same applies to GNU glibc.\n\nfixes #3175\n\nSigned-off-by: Kefu Chai <tchaikov@gmail.com>\nCloses https://github.com/facebook/rocksdb/pull/3862\n\nDifferential Revision: D8147930\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 355afe93c4dd0a96a0d711ef190e8b86fbe8d11d",
        "modified_files_count": 1,
        "modified_files": [
            "port/port_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c465509379d72068c19b55dbc69bf08d8c387fbe"
    },
    {
        "hash": "4011012d9d92658d38cdeaba310bec9189ee4d6d",
        "author": "Yanqin Jin",
        "date": "2018-05-23T16:12:59-07:00",
        "message": "Specify the underlying type of enums.\n\nSummary:\nExplicitly specify the underlying type of enums help developers understand the physical storage.\nCloses https://github.com/facebook/rocksdb/pull/3892\n\nDifferential Revision: D8107027\n\nPulled By: riversand963\n\nfbshipit-source-id: a00efecbba46df4a3c8eed0994a2d4972ad1a1d3",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_edit.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4011012d9d92658d38cdeaba310bec9189ee4d6d"
    },
    {
        "hash": "6c73a4669353e57ad4b2b16cc6a9a8eb9d27a819",
        "author": "Zhongyi Xie",
        "date": "2018-05-22T13:57:17-07:00",
        "message": "Fix a backward compatibility problem with table_properties being nullptr\n\nSummary:\nCurrently when ldb built from master tries to open a DB from version 2.2, there will be a segfault because table_properties didn't exist back then.\nCloses https://github.com/facebook/rocksdb/pull/3890\n\nDifferential Revision: D8100914\n\nPulled By: miasantreble\n\nfbshipit-source-id: b255e8aedc54695432be2e704839c857dabdd65a",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6c73a4669353e57ad4b2b16cc6a9a8eb9d27a819"
    },
    {
        "hash": "4420cb49da5d291c5a438ead6daebbf26b6f32b9",
        "author": "Jacquin Mininger",
        "date": "2018-05-22T13:41:56-07:00",
        "message": "Fix Issue #3771: Slice ctor checks for nullptr and creates empty string\n\nSummary:\nFix Issue #3771   : Check for nullptr in Slice constructor\nSlice ctor checks for nullptr and creates empty string if the string does not exist\nCloses https://github.com/facebook/rocksdb/pull/3887\n\nDifferential Revision: D8098852\n\nPulled By: ajkr\n\nfbshipit-source-id: 04471077defa9776ce7b8c389a61312ce31002fb",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/slice.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4420cb49da5d291c5a438ead6daebbf26b6f32b9"
    },
    {
        "hash": "fcb31016e93aedc15af6adade7f36d77041b7a15",
        "author": "Andrew Kryczka",
        "date": "2018-05-22T10:58:36-07:00",
        "message": "Avoid single-deleting merge operands in db_stress\n\nSummary:\nI repro'd some of the \"unexpected value\" failures showing up in our CI lately and they always happened on keys that have a mix of single deletes and merge operands. The `SingleDelete()` API comment mentions it's incompatible with `Merge()`, so this PR prevents `db_stress` from mixing them.\nCloses https://github.com/facebook/rocksdb/pull/3878\n\nDifferential Revision: D8097346\n\nPulled By: ajkr\n\nfbshipit-source-id: 357a48c6a31156f4f8db3ce565638ad924c437a1",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fcb31016e93aedc15af6adade7f36d77041b7a15"
    },
    {
        "hash": "ed4d3393fbd10d05865abf624818779d0fb73e30",
        "author": "Zhongyi Xie",
        "date": "2018-05-18T21:57:24-07:00",
        "message": "fix a division by zero bug\n\nSummary:\nfixes the failing clang_analyze contrun test\nCloses https://github.com/facebook/rocksdb/pull/3872\n\nDifferential Revision: D8059241\n\nPulled By: miasantreble\n\nfbshipit-source-id: e8fc1838004fe16a823456188386b8b39429803b",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter_stress_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ed4d3393fbd10d05865abf624818779d0fb73e30"
    },
    {
        "hash": "1d7ca20f29ff01fff2d4d2f2c8a2e7cbb2291466",
        "author": "Zhongyi Xie",
        "date": "2018-05-17T17:57:48-07:00",
        "message": "add override to virtual functions\n\nSummary:\nthis will fix the failing clang_check test\nCloses https://github.com/facebook/rocksdb/pull/3868\n\nDifferential Revision: D8050880\n\nPulled By: miasantreble\n\nfbshipit-source-id: 749932e2e4025f835c961c068d601e522a126da6",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter_stress_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1d7ca20f29ff01fff2d4d2f2c8a2e7cbb2291466"
    },
    {
        "hash": "aed7abbcca7574ed438c3b22e27db9bf249e8de3",
        "author": "Xin Tong",
        "date": "2018-05-17T17:57:48-07:00",
        "message": "Reorder field based on esan data\n\nSummary:\nRunning. TEST_TMPDIR=/dev/shm ./buck-out/gen/rocks/tools/rocks_db_bench --benchmarks=readwhilewriting --num=5000000 -benchmark_write_rate_limit=2000000 --threads=32\n\nCollected esan data and reorder field. Accesses to 4th and 6th fields take majority of the access.  Group them. Overall, this struct takes 10%+ of the total accesses in the program. (637773011/6107964986)\n\n==2433831==  class rocksdb::InlineSkipList\n==2433831==   size = 48, count = 637773011, ratio = 112412, array access = 0\n==2433831==   # 0: offset = 0,   size = 2,       count = 455137, type = i16\n==2433831==   # 1: offset = 2,   size = 2,       count = 6,      type = i16\n==2433831==   # 2: offset = 4,   size = 4,       count = 182303, type = i32\n==2433831==   # 3: offset = 8,   size = 8,       count = 263953900, type = %\"class.rocksdb::MemTableRep::KeyComparator\"*\n==2433831==   # 4: offset = 16,  size = 8,       count = 136409, type = %\"class.rocksdb::Allocator\"*\n==2433831==   # 5: offset = 24,  size = 8,       count = 366628820, type = %\"struct.rocksdb::InlineSkipList<const rocksdb::MemTableRep::KeyComparator &>::Node\"*\n==2433831==   # 6: offset = 32,  size = 4,       count = 6280031, type = %\"struct.std::atomic\" = type { %\"struct.std::__atomic_base\" }\n==2433831==   # 7: offset = 40,  size = 8,       count = 136405, type = %\"struct.rocksdb::InlineSkipList<const rocksdb::MemTableRep::KeyComparator &>::Splice\"*\n==2433831==EfficiencySanitizer: total struct field access count = 6107964986\n\nBefore re-ordering\n[trentxintong@devbig460.frc2 ~/fbsource/fbcode]$ fgrep readwhilewriting\nwithout-ro.log\nreadwhilewriting :       0.036 micros/op 27545605 ops/sec;   26.8 MB/s\n(45954 of 5000000 found)\nreadwhilewriting :       0.036 micros/op 28024240 ops/sec;   27.2 MB/s\n(43158 of 5000000 found)\nreadwhilewriting :       0.037 micros/op 27345145 ops/sec;   27.1 MB/s\n(46725 of 5000000 found)\nreadwhilewriting :       0.037 micros/op 27072588 ops/sec;   27.3 MB/s\n(42605 of 5000000 found)\nreadwhilewriting :       0.034 micros/op 29578781 ops/sec;   28.3 MB/s\n(44294 of 5000000 found)\nreadwhilewriting :       0.035 micros/op 28528304 ops/sec;   27.7 MB/s\n(44176 of 5000000 found)\nreadwhilewriting :       0.037 micros/op 27075497 ops/sec;   26.5 MB/s\n(43763 of 5000000 found)\nreadwhilewriting :       0.036 micros/op 28024117 ops/sec;   27.1 MB/s\n(40622 of 5000000 found)\nreadwhilewriting :       0.037 micros/op 27078709 ops/sec;   27.6 MB/s\n(47774 of 5000000 found)\nreadwhilewriting :       0.034 micros/op 29020689 ops/sec;   28.1 MB/s\n(45066 of 5000000 found)\nAVERAGE()=27.37 MB/s\n\nAfter re-ordering\n[trentxintong@devbig460.frc2 ~/fbsource/fbcode]$ fgrep readwhilewriting\nro.log\nreadwhilewriting :       0.036 micros/op 27542409 ops/sec;   27.7 MB/s\n(46163 of 5000000 found)\nreadwhilewriting :       0.036 micros/op 28021148 ops/sec;   28.2 MB/s\n(46155 of 5000000 found)\nreadwhilewriting :       0.036 micros/op 28021035 ops/sec;   27.3 MB/s\n(44039 of 5000000 found)\nreadwhilewriting :       0.036 micros/op 27538659 ops/sec;   27.5 MB/s\n(46781 of 5000000 found)\nreadwhilewriting :       0.036 micros/op 28028604 ops/sec;   27.6 MB/s\n(44689 of 5000000 found)\nreadwhilewriting :       0.036 micros/op 27541452 ops/sec;   27.3 MB/s\n(43156 of 5000000 found)\nreadwhilewriting :       0.034 micros/op 29041338 ops/sec;   28.8 MB/s\n(44895 of 5000000 found)\nreadwhilewriting :       0.036 micros/op 27784974 ops/sec;   26.3 MB/s\n(39963 of 5000000 found)\nreadwhilewriting :       0.036 micros/op 27538892 ops/sec;   28.1 MB/s\n(46570 of 5000000 found)\nreadwhilewriting :       0.038 micros/op 26622473 ops/sec;   27.0 MB/s\n(43236 of 5000000 found)\nAVERAGE()=27.58 MB/s\nCloses https://github.com/facebook/rocksdb/pull/3855\n\nReviewed By: siying\n\nDifferential Revision: D8048781\n\nPulled By: trentxintong\n\nfbshipit-source-id: bc9807a9845e2a92cb171ce1ecb5a2c8a51f1481",
        "modified_files_count": 1,
        "modified_files": [
            "memtable/inlineskiplist.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aed7abbcca7574ed438c3b22e27db9bf249e8de3"
    },
    {
        "hash": "46fde6b65336c5e176d347b80422fd5f6a7ae7c2",
        "author": "Maysam Yabandeh",
        "date": "2018-05-16T13:01:33-07:00",
        "message": "Fix race condition between log_.erase and log_.back\n\nSummary:\nlog_ contract specifies that it should not be modified unless both mutex_ and log_write_mutex_ are held. log_.erase however does that with only holding mutex_. This causes a race condition with two_write_queues since logs_.back is read with holding only log_write_mutex_ (which is correct according to logs_ contract) but logs_.erase is called concurrently. This is probably the cause of logs_.back returning nullptr in https://github.com/facebook/rocksdb/issues/3852 although I could not reproduce it.\nFixes https://github.com/facebook/rocksdb/issues/3852\nCloses https://github.com/facebook/rocksdb/pull/3859\n\nDifferential Revision: D8026103\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: ee394e00fe4aa520d884c5ef87981e9d6b5ccb28",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/46fde6b65336c5e176d347b80422fd5f6a7ae7c2"
    },
    {
        "hash": "12ad711247af50a16b4d2ad2012bde1c1eb4ca8a",
        "author": "Maysam Yabandeh",
        "date": "2018-05-14T21:13:35-07:00",
        "message": "Suppress tsan lock-order-inversion on FlushWAL\n\nSummary:\nTSAN reports a false alarm for lock-order-inversion in DBWriteTest.IOErrorOnWALWritePropagateToWriteThreadFollower but Open and FlushWAL are not run concurrently. Suppressing the error by skipping FlushWAL in the test until TSAN is fixed.\n\nThe alternative would be to use\n```\nTSAN_OPTIONS=\"suppressions=tsan-suppressions.txt\" ./db_write_test\n```\nbut it does not seem straightforward to integrate it to our test infra.\nCloses https://github.com/facebook/rocksdb/pull/3854\n\nDifferential Revision: D8000202\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: fde33483d963a7ad84d3145123821f64960a4802",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_write_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/12ad711247af50a16b4d2ad2012bde1c1eb4ca8a"
    },
    {
        "hash": "ebb823f746777dff104e44761306ff92810a2430",
        "author": "Sagar Vemuri",
        "date": "2018-05-14T11:14:07-07:00",
        "message": "Fix db_stress build on mac\n\nSummary:\nI noticed, while debugging an unrelated issue, that db_stress is failing to build on mac, leading to a failed `make all`.\n```\n$ make db_stress -j4\n...\ntools/db_stress.cc:862:69: error: cannot initialize a parameter of type 'uint64_t *' (aka 'unsigned long long *') with an rvalue of type 'size_t *' (aka 'unsigned long *')\n        status = FLAGS_env->GetFileSize(FLAGS_expected_values_path, &size);\n                                                                    ^~~~~\n./include/rocksdb/env.h:277:66: note: passing argument to parameter 'file_size' here\n  virtual Status GetFileSize(const std::string& fname, uint64_t* file_size) = 0;\n                                                                 ^\n1 error generated.\nmake: *** [tools/db_stress.o] Error 1\nmake: *** Waiting for unfinished jobs....\n```\nCloses https://github.com/facebook/rocksdb/pull/3839\n\nDifferential Revision: D7979236\n\nPulled By: sagar0\n\nfbshipit-source-id: 0615e7bb5405bade71e4203803bf723720422d62",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ebb823f746777dff104e44761306ff92810a2430"
    },
    {
        "hash": "ddfd2525d2a5f9476a8ca79f541ecade4f552ca0",
        "author": "Siying Dong",
        "date": "2018-05-09T10:27:26-07:00",
        "message": "Make BlockIter final\n\nSummary:\nNow BlockBasedTableIterator directly uses BlockIter. By making BlockIter final, we can prevent unintended virtual function overriding.\nCloses https://github.com/facebook/rocksdb/pull/3828\n\nDifferential Revision: D7933816\n\nPulled By: siying\n\nfbshipit-source-id: 026a08cb5c5b6d3d6f44743152b4251da4756f2c",
        "modified_files_count": 1,
        "modified_files": [
            "table/block.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ddfd2525d2a5f9476a8ca79f541ecade4f552ca0"
    },
    {
        "hash": "cee138c7d7edb728c0afcf40be208237a2e8dda2",
        "author": "Huachao Huang",
        "date": "2018-05-08T12:13:18-07:00",
        "message": "Add missing options in BuildColumnfamilyOptions\n\nSummary:\nsoft_pending_compaction_bytes_limit and hard_pending_compaction_bytes_limit are added to BuildColumnfamilyOptions.\nCloses https://github.com/facebook/rocksdb/pull/3823\n\nDifferential Revision: D7909246\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 89032efbf6b5bd302ea50cbd7a234977984a1fca",
        "modified_files_count": 1,
        "modified_files": [
            "options/options_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cee138c7d7edb728c0afcf40be208237a2e8dda2"
    },
    {
        "hash": "d72a51e9e1fbe57a29c7eb3669626a4551890a9b",
        "author": "Maysam Yabandeh",
        "date": "2018-05-07T12:29:58-07:00",
        "message": "Split FaultInjectionTest.FaultTest to avoid timeout\n\nSummary:\ntsan flavor of this test occasionally times out in our test infra. The patch split the test to two, each working on half of the option range.\nBefore:\n[       OK ] FaultTest/FaultInjectionTest.FaultTest/0 (5918 ms)\n[       OK ] FaultTest/FaultInjectionTest.FaultTest/1 (5336 ms)\nAfter:\n[       OK ] FaultTest/FaultInjectionTestSplitted.FaultTest/0 (2930 ms)\n[       OK ] FaultTest/FaultInjectionTestSplitted.FaultTest/1 (2676 ms)\n[       OK ] FaultTest/FaultInjectionTestSplitted.FaultTest/2 (2759 ms)\n[       OK ] FaultTest/FaultInjectionTestSplitted.FaultTest/3 (2546 ms)\nCloses https://github.com/facebook/rocksdb/pull/3819\n\nDifferential Revision: D7894975\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 809f1411cbcc27f8aa71a6b29a16b039f51b67c9",
        "modified_files_count": 1,
        "modified_files": [
            "db/fault_injection_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d72a51e9e1fbe57a29c7eb3669626a4551890a9b"
    },
    {
        "hash": "4c5a3232e4dbef66df476f064777ba2eef91a29b",
        "author": "Andrew Kryczka",
        "date": "2018-05-04T16:45:15-07:00",
        "message": "Fix db_stress memory leak ASAN error\n\nSummary:\nIn case `--expected_values_path` is unset, we allocate a buffer internally to hold the expected DB state. This PR makes sure it is freed.\nCloses https://github.com/facebook/rocksdb/pull/3804\n\nDifferential Revision: D7874694\n\nPulled By: ajkr\n\nfbshipit-source-id: a8f7655e009507c4e639ceebfc3525d69c856e3b",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4c5a3232e4dbef66df476f064777ba2eef91a29b"
    },
    {
        "hash": "fc522bdb3ebbcc9354407717733e1f886504a2b8",
        "author": "Maysam Yabandeh",
        "date": "2018-05-04T15:28:06-07:00",
        "message": "Evenly split HarnessTest.Randomized\n\nSummary:\nCurrently HarnessTest.Randomized is already split but some of the splits are faster than the others. The reason is that each split takes a continuous range of the generated args and the test with later args takes longer to finish. The patch evenly split the args among splits in a round robin fashion.\nBefore:\n```\n[       OK ] HarnessTest.Randomized1n2 (2278 ms)\n[       OK ] HarnessTest.Randomized3n4 (1095 ms)\n[       OK ] HarnessTest.Randomized5 (658 ms)\n[       OK ] HarnessTest.Randomized6 (1258 ms)\n[       OK ] HarnessTest.Randomized7 (6476 ms)\n[       OK ] HarnessTest.Randomized8 (8182 ms)\n```\nAfter\n```\n[       OK ] HarnessTest.Randomized1 (2649 ms)\n[       OK ] HarnessTest.Randomized2 (2645 ms)\n[       OK ] HarnessTest.Randomized3 (2577 ms)\n[       OK ] HarnessTest.Randomized4 (2490 ms)\n[       OK ] HarnessTest.Randomized5 (2553 ms)\n[       OK ] HarnessTest.Randomized6 (2560 ms)\n[       OK ] HarnessTest.Randomized7 (2501 ms)\n[       OK ] HarnessTest.Randomized8 (2574 ms)\n```\nCloses https://github.com/facebook/rocksdb/pull/3808\n\nDifferential Revision: D7882663\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 09b749a9684b6d7d65466aa4b00c5334a49e833e",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fc522bdb3ebbcc9354407717733e1f886504a2b8"
    },
    {
        "hash": "a8d77ca3819b098a2e0e7d69b15cef576e6b21ff",
        "author": "Maysam Yabandeh",
        "date": "2018-05-03T16:13:09-07:00",
        "message": "Speedup ManualCompactionTest.Test\n\nSummary:\nManualCompactionTest.Test occasionally times out in tsan flavor of our test infra. The patch reduces the number of keys to make the test run faster. The change does not seem to negatively impact the coverage of the test.\nCloses https://github.com/facebook/rocksdb/pull/3802\n\nDifferential Revision: D7865596\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: b4f60e32c3ae1677e25506f71c766e33fa985785",
        "modified_files_count": 1,
        "modified_files": [
            "db/manual_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a8d77ca3819b098a2e0e7d69b15cef576e6b21ff"
    },
    {
        "hash": "5bed8a0065af2f85c3d69f15f1b3dd3e5d04b656",
        "author": "Maysam Yabandeh",
        "date": "2018-05-02T18:13:05-07:00",
        "message": "WritePrepared Txn: split SeqAdvanceConcurrentTest\n\nSummary:\nThe tsan flavor of SeqAdvanceConcurrentTest times out in our test infra. The patch splits it into 10 tests.\nOn my vm before:\n[       OK ] WritePreparedTransactionTest/WritePreparedTransactionTest.SeqAdvanceConcurrentTest/0 (5194 ms)\nafter:\n[       OK ] OneWriteQueue/SeqAdvanceConcurrentTest.SeqAdvanceConcurrentTest/0 (1906 ms)\nCloses https://github.com/facebook/rocksdb/pull/3799\n\nDifferential Revision: D7854515\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 4fbac42a1f974326cbc237f8cb9d6232d379c431",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5bed8a0065af2f85c3d69f15f1b3dd3e5d04b656"
    },
    {
        "hash": "19fde548419e29975963d2c325710f532fba4022",
        "author": "Andrew Kryczka",
        "date": "2018-05-01T13:27:05-07:00",
        "message": "initialize local variable for UBSAN in PosixEnv function\n\nSummary:\nthis is a repeat commit of a8a28da2159648a2f72c35ea507371df8a97a2a9, which got reverted together with 6afe22db2e667799d8c903db61750d676bffe152, but forgotten about when that commit was un-reverted in 46152d53bf58748fc3ed0681d8970c342bcfc47a.\nCloses https://github.com/facebook/rocksdb/pull/3796\n\nDifferential Revision: D7826077\n\nPulled By: ajkr\n\nfbshipit-source-id: edb22375da56e2feda50c5b35f942f4d2d52b19c",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/19fde548419e29975963d2c325710f532fba4022"
    },
    {
        "hash": "282099fc0f1218d1918749acdf64a75ae7e3442b",
        "author": "Vincent Lee",
        "date": "2018-04-30T11:43:09-07:00",
        "message": "fix missing perfcontext destroy declare in C API\n\nSummary:\n`rocksdb_perfcontext_destroy` declare is missing in C API.\nCloses https://github.com/facebook/rocksdb/pull/3787\n\nDifferential Revision: D7816490\n\nPulled By: ajkr\n\nfbshipit-source-id: 3a488607bfc897c7ce846a1b3c2b7af693134d0d",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/282099fc0f1218d1918749acdf64a75ae7e3442b"
    },
    {
        "hash": "459bb9028fc199a61e30bfcd08e2541b0dcbb0f4",
        "author": "Zhongyi Xie",
        "date": "2018-04-27T12:13:19-07:00",
        "message": "remove prefixscanrandom from db_bench help\n\nSummary:\nfix issue reported in https://github.com/facebook/rocksdb/issues/3757\nCloses https://github.com/facebook/rocksdb/pull/3784\n\nDifferential Revision: D7794107\n\nPulled By: miasantreble\n\nfbshipit-source-id: 43535074fcb82adb5656bcb916284b2dfc5cbb64",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/459bb9028fc199a61e30bfcd08e2541b0dcbb0f4"
    },
    {
        "hash": "7004e454899490f16e0a2e5fd2e26f10d01ef091",
        "author": "Andrew Kryczka",
        "date": "2018-04-26T14:43:11-07:00",
        "message": "Remove block-based table assertion for non-empty filter block\n\nSummary:\n7a6353bd1c516fe3f7118248c77035697c5ac247 prevents empty filter blocks from being written for SST files containing range deletions only. However the assertion this PR removes is still a problem as we could be reading from a DB generated by a RocksDB build without the 7a6353bd1c516fe3f7118248c77035697c5ac247 patch. So remove the assertion. We already don't do this check when `cache_index_and_filter_blocks=false`, so it should be safe.\nCloses https://github.com/facebook/rocksdb/pull/3773\n\nDifferential Revision: D7769964\n\nPulled By: ajkr\n\nfbshipit-source-id: 7285762446f2cd2ccf16efd7a988a106fbb0d8d3",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7004e454899490f16e0a2e5fd2e26f10d01ef091"
    },
    {
        "hash": "e5a4dacf6d8aee5499d21b3e348615055eb9d3c1",
        "author": "Maysam Yabandeh",
        "date": "2018-04-26T09:27:55-07:00",
        "message": "WritePrepared Txn: disable rollback in stress test\n\nSummary:\nWritePrepared rollback implementation is not ready to be invoked in the middle of workload. This is due the lack of synchronization to obtain the cf handle from db. Temporarily disabling this until the problem with rollback is fixed.\nCloses https://github.com/facebook/rocksdb/pull/3772\n\nDifferential Revision: D7769041\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 0e3b0ce679bc2afba82e653a40afa3f045722754",
        "modified_files_count": 1,
        "modified_files": [
            "util/transaction_test_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e5a4dacf6d8aee5499d21b3e348615055eb9d3c1"
    },
    {
        "hash": "7c9f23e6dba4ce16a151a882e3a29d6a9623f802",
        "author": "Vincent Lee",
        "date": "2018-04-25T15:57:48-07:00",
        "message": "Rate limiter should be allowed to share between different rocksdb instances in C API\n\nSummary:\nCurrently, the `rocksdb_options_set_ratelimiter` in  `c.cc` will change the input to nil, which make it is\n not possible to use the shared rate limiter create by `rocksdb_ratelimiter_create` in different rocksdb option.\n\nIn this pr, I changed it to shared ptr.\nCloses https://github.com/facebook/rocksdb/pull/3758\n\nDifferential Revision: D7749740\n\nPulled By: ajkr\n\nfbshipit-source-id: c6121f8ca75402afdb4b295ce63c2338d253a1b5",
        "modified_files_count": 1,
        "modified_files": [
            "db/c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7c9f23e6dba4ce16a151a882e3a29d6a9623f802"
    },
    {
        "hash": "406b95197c4550dc22fb70ab6b805a40d80b064e",
        "author": "Anand Ananthabhotla",
        "date": "2018-04-25T15:42:46-07:00",
        "message": "Fix clang build failure with -Wgnu-redeclared-enum\n\nSummary:\nIn include/rocksdb/db.h, enum EntryType is redeclared even though\noriginal declaration in types.h in included.\nCloses https://github.com/facebook/rocksdb/pull/3766\n\nDifferential Revision: D7765504\n\nPulled By: anand1976\n\nfbshipit-source-id: 622a8ecb306993915be1b9dd5cdd79dbc6a4ea05",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/406b95197c4550dc22fb70ab6b805a40d80b064e"
    },
    {
        "hash": "dfc61e7c243553da0d39bc4c837e1059e23f6965",
        "author": "Andrew Kryczka",
        "date": "2018-04-25T13:42:02-07:00",
        "message": "initialize local variable for UBSAN in PosixEnv function\n\nSummary:\nIt seems clear to me that the variable is initialized before line 492, but it wasn't clear to UBSAN. The failure was:\n\n```\nIn file included from ./env/io_posix.h:14:0,\n                 from env/env_posix.cc:44:\n./include/rocksdb/env.h: In member function ‘virtual rocksdb::Status rocksdb::{anonymous}::PosixEnv::NewMemoryMappedFileBuffer(const string&, std::unique_ptr<rocksdb::MemoryMappedFileBuffer>*)’:\n./include/rocksdb/env.h:822:36: error: ‘base’ may be used uninitialized in this function [-Werror=maybe-uninitialized]\n       : base(_base), length(_length) {}\n                                    ^\nenv/env_posix.cc:482:11: note: ‘base’ was declared here\n     void* base;\n```\n\nWe can just initialize to nullptr to keep UBSAN happy.\nCloses https://github.com/facebook/rocksdb/pull/3770\n\nDifferential Revision: D7756287\n\nPulled By: ajkr\n\nfbshipit-source-id: 0f2efb9594e2d3a30706a4ca7e1d4a6328031bf2",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dfc61e7c243553da0d39bc4c837e1059e23f6965"
    },
    {
        "hash": "2e72a5899b3e700dcc6b71af2481be415dc2e086",
        "author": "Yi Wu",
        "date": "2018-04-20T15:42:42-07:00",
        "message": "Disable EnvPosixTest::FilePermission\n\nSummary:\nThe test is flaky in our CI but could not be reproduce manually on the same CI host. Disabling it.\nCloses https://github.com/facebook/rocksdb/pull/3753\n\nDifferential Revision: D7716320\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 6bed3b05880c1d24e8dc86bc970e5181bc98fb45",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2e72a5899b3e700dcc6b71af2481be415dc2e086"
    },
    {
        "hash": "8a9c7f71c90a3444b590330ff8acd6c24809ca3c",
        "author": "Zhongyi Xie",
        "date": "2018-04-19T18:57:43-07:00",
        "message": "fix compilation error: implicit conversion loses integer precision\n\nSummary:\nFix compilation error with clang:\n> tools/db_stress.cc:2598:21: error: implicit conversion loses integer precision: 'gflags::uint64' (aka 'unsigned long') to 'uint32_t' (aka 'unsigned int') [-Werror,-Wshorten-64-to-32]\n        Random rand(FLAGS_seed);\n               ~~~~ ^~~~~~~~~~\nCloses https://github.com/facebook/rocksdb/pull/3746\n\nDifferential Revision: D7703209\n\nPulled By: miasantreble\n\nfbshipit-source-id: 18c56a5138a2f308e4213594bc82e8e64bc21570",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8a9c7f71c90a3444b590330ff8acd6c24809ca3c"
    },
    {
        "hash": "2ee1496c43bd66081ec5fcb4ccfd54a9ac975bdc",
        "author": "Yanqin Jin",
        "date": "2018-04-17T09:57:40-07:00",
        "message": "Add missing whitespace.\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3729\n\nDifferential Revision: D7645465\n\nPulled By: riversand963\n\nfbshipit-source-id: a64da0960fe6c39847ef848b8888fe9a9c1df25d",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2ee1496c43bd66081ec5fcb4ccfd54a9ac975bdc"
    },
    {
        "hash": "2c2f3888976667ad878a838defc34a32f39cf3cb",
        "author": "Yi Wu",
        "date": "2018-04-16T18:01:47-07:00",
        "message": "db_bench fillXXXdeterministic should respect compression type\n\nSummary:\ndb_bench fillXXXdeterministic should respect compression type when calling CompactFiles().\nCloses https://github.com/facebook/rocksdb/pull/3731\n\nDifferential Revision: D7647761\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 15e12429e0dd93ece2231b015f2e26c2d94781e6",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2c2f3888976667ad878a838defc34a32f39cf3cb"
    },
    {
        "hash": "b4f333922ac4c73c1c3cc5222048e4f1cb436e64",
        "author": "Harry Wong",
        "date": "2018-04-16T16:58:20-07:00",
        "message": "Improve the comment on TableFactory::NewTableReader()\n\nSummary:\n`DBImpl::AddFile()` has been replaced by `DBImpl::IngestExternalFile()`.\nCloses https://github.com/facebook/rocksdb/pull/3726\n\nDifferential Revision: D7646875\n\nPulled By: ajkr\n\nfbshipit-source-id: 241eb7a8d88527fdc5c26b0c3f6faec3296451f8",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/table.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b4f333922ac4c73c1c3cc5222048e4f1cb436e64"
    },
    {
        "hash": "5e48811844f4adf51ce4d3e16d000d76e2f8d0ee",
        "author": "Yanqin Jin",
        "date": "2018-04-16T14:28:01-07:00",
        "message": "Initialize a boolean member variable of a struct.\n\nSummary:\nThe reason for this initialization is that LLVM UBSAN check will fail due to\nuninitialized bool. [StackOverflow post](https://stackoverflow.com/questions/31420154/runtime-error-load-of-value-127-which-is-not-a-valid-value-for-type-bool).\n\nUBSAN log:\n> ===== Running external_sst_file_basic_test\n[==========] Running 7 tests from 1 test case.\n[----------] Global test environment set-up.\n[----------] 7 tests from ExternalSSTFileBasicTest\n[ RUN      ] ExternalSSTFileBasicTest.Basic\n[       OK ] ExternalSSTFileBasicTest.Basic (6 ms)\n[ RUN      ] ExternalSSTFileBasicTest.NoCopy\ndb/external_sst_file_ingestion_job.h:23:8: runtime error: load of value 253, which is not a valid value for type 'bool'\n\nmiasantreble  I've tested this locally using the following command.\n```\nTEST_TMPDIR=/dev/shm/rocksdb COMPILE_WITH_UBSAN=1 OPT=-g make J=1 -j8 ubsan_check\n```\n\najkr This PR is related to your review comment in [PR](https://github.com/facebook/rocksdb/pull/3713/). It turns out that, with UBSAN enabled, we must provide a default value for boolean member variables.\nCloses https://github.com/facebook/rocksdb/pull/3728\n\nDifferential Revision: D7642476\n\nPulled By: riversand963\n\nfbshipit-source-id: 4c09a4b8d271151cb99ae7393db9e4ad9f29762e",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_ingestion_job.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5e48811844f4adf51ce4d3e16d000d76e2f8d0ee"
    },
    {
        "hash": "af95aecd01b2b0e19c8affb2a2594ac7a846f285",
        "author": "Zhongyi Xie",
        "date": "2018-04-15T23:56:39-07:00",
        "message": "use delete[] to dealloc an array\n\nSummary:\nfix a bug in `db_stress` where an int array was incorrectly deallocated using delete instead of delete[]\nCloses https://github.com/facebook/rocksdb/pull/3725\n\nDifferential Revision: D7634749\n\nPulled By: miasantreble\n\nfbshipit-source-id: 489b776f5f4c03de1824edac5495787ec19cc910",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/af95aecd01b2b0e19c8affb2a2594ac7a846f285"
    },
    {
        "hash": "81d44f2bc56a7e7ad5e101ce6b7cc64e2b01311c",
        "author": "Jingguo Yao",
        "date": "2018-04-15T13:12:23-07:00",
        "message": "fix-typo: add missing periods\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3720\n\nDifferential Revision: D7631525\n\nPulled By: ajkr\n\nfbshipit-source-id: 50cf4dc363b0d32b150d963011171a8a6f53a384",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/iterator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/81d44f2bc56a7e7ad5e101ce6b7cc64e2b01311c"
    },
    {
        "hash": "28087acd796b2d14f35e4e49224a91ebea4c57d6",
        "author": "Amy Tai",
        "date": "2018-04-13T22:13:13-07:00",
        "message": "Implemented Knuth shuffle to construct permutation for selecting no_o…\n\nSummary:\n…verwrite_keys. Also changed each no_overwrite_key set to an unordered set, otherwise Knuth shuffle only gets you 2x time improvement, because insertion (and subsequent internal sorting) into an ordered set is the bottleneck.\n\nWith this change, each iteration of permutation construction and prefix selection takes around 40 secs, as opposed to 360 secs previously. However, this still means that with the default 10 CF per blackbox test case, the test is going to time out given the default interval of 200 secs.\n\nAlso, there is currently an assertion error affecting all blackbox tests in db_crashtest.py; this assertion error will be fixed in a future PR.\nCloses https://github.com/facebook/rocksdb/pull/3699\n\nDifferential Revision: D7624616\n\nPulled By: amytai\n\nfbshipit-source-id: ea64fbe83407ff96c1c0ecabbc6c830576939393",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/28087acd796b2d14f35e4e49224a91ebea4c57d6"
    },
    {
        "hash": "1f5457ef2119ed2ef63984ab75552dbbf6c4a3f2",
        "author": "Steven Fackler",
        "date": "2018-04-13T11:12:54-07:00",
        "message": "Merge raw and shared pointer log method impls\n\nSummary:\nCalling rocksdb::Log, rocksdb::Info, etc with a `shared_ptr<Logger>` should behave the same as calling those functions with a `Logger *`. This PR achieves it by making the `shared_ptr<Logger>` versions delegate to the `Logger *` versions.\n\nCloses #3689\nCloses https://github.com/facebook/rocksdb/pull/3710\n\nDifferential Revision: D7595557\n\nPulled By: ajkr\n\nfbshipit-source-id: 64dd7f20fd42dc821bac7b8032705c35b483e00d",
        "modified_files_count": 1,
        "modified_files": [
            "env/env.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1f5457ef2119ed2ef63984ab75552dbbf6c4a3f2"
    },
    {
        "hash": "65fe8d6cd6083dbef73af8ff273fb570236331f6",
        "author": "Gihwan Oh",
        "date": "2018-04-09T13:42:31-07:00",
        "message": "Change a comment\n\nSummary:\nIn this case, we add input files of compaction, not outputs.\nCloses https://github.com/facebook/rocksdb/pull/3686\n\nDifferential Revision: D7556781\n\nPulled By: ajkr\n\nfbshipit-source-id: ae135bb6eda60db8f275a9ba2d21c18aaadef5b7",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/65fe8d6cd6083dbef73af8ff273fb570236331f6"
    },
    {
        "hash": "1c27cbfbd1fde4f8b3a6aff8c3e64260fadbe9fd",
        "author": "Andrew Kryczka",
        "date": "2018-04-09T13:42:31-07:00",
        "message": "fix intra-L0 FIFO for uncompressed use case\n\nSummary:\n- inflate the argument passed as `max_compact_bytes_per_del_file` by a bit (10%). The intent of this argument is prevent L0 files from being intra-L0 compacted multiple times. Without compression, some intra-L0 compactions exceed this limit (and thus aren't executed), even though none of their files have gone through intra-L0 before.\n- fix `FindIntraL0Compaction` as it was rejecting some valid intra-L0 compactions. In particular, `compact_bytes_per_del_file` is the work-per-deleted-file for the span [0, span_len), whereas `new_compact_bytes_per_del_file` is the work-per-deleted-file for the span [0, span_len+1). The former is more correct for checking whether we've found an eligible span.\nCloses https://github.com/facebook/rocksdb/pull/3684\n\nDifferential Revision: D7530396\n\nPulled By: ajkr\n\nfbshipit-source-id: cad4f50902bdc428ac9ff6fffb13eb288648d85e",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1c27cbfbd1fde4f8b3a6aff8c3e64260fadbe9fd"
    },
    {
        "hash": "f3a1d9e049e8858a6ab9d0cf627573e203109734",
        "author": "Zhongyi Xie",
        "date": "2018-04-09T12:28:28-07:00",
        "message": "fix data race\n\nSummary:\nFix a TSAN failure in `DBRangeDelTest.ValidLevelSubcompactionBoundaries`:\nhttps://gist.github.com/miasantreble/712e04b4de2ff7f193c98b1acf07e899\nCloses https://github.com/facebook/rocksdb/pull/3691\n\nDifferential Revision: D7541400\n\nPulled By: miasantreble\n\nfbshipit-source-id: b0b4538980bce7febd0385e61d6e046580bcaefb",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f3a1d9e049e8858a6ab9d0cf627573e203109734"
    },
    {
        "hash": "74767deec318fcd69ecab71ad85627eda566ac06",
        "author": "Gihwan Oh",
        "date": "2018-04-06T15:42:50-07:00",
        "message": "Fix typo\n\nSummary:\nregrad -> regard\nCloses https://github.com/facebook/rocksdb/pull/3685\n\nDifferential Revision: D7540952\n\nPulled By: miasantreble\n\nfbshipit-source-id: e08c9389f7fccf401c962a4441b62cd5e73a33ad",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/74767deec318fcd69ecab71ad85627eda566ac06"
    },
    {
        "hash": "685912d07f1bff8e98d432d379425a6db57f393e",
        "author": "Yi Wu",
        "date": "2018-04-05T11:57:53-07:00",
        "message": "Clock cache should check if deleter is nullptr before calling it\n\nSummary:\nClock cache should check if deleter is nullptr before calling it.\nCloses https://github.com/facebook/rocksdb/pull/3677\n\nDifferential Revision: D7493602\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 4f94b188d2baf2cbc7c0d5da30fea1215a683de4",
        "modified_files_count": 1,
        "modified_files": [
            "cache/clock_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/685912d07f1bff8e98d432d379425a6db57f393e"
    },
    {
        "hash": "c827b2dc2aed180a1fc7fd6d53307887950cafe1",
        "author": "Zhongyi Xie",
        "date": "2018-04-05T09:11:36-07:00",
        "message": "fix build for rocksdb lite\n\nSummary:\ncurrently rocksdb lite build fails due to the following errors:\n> db/db_sst_test.cc:29:51: error: ‘FlushJobInfo’ does not name a type\n   virtual void OnFlushCompleted(DB* /*db*/, const FlushJobInfo& info) override {\n                                                   ^\ndb/db_sst_test.cc:29:16: error: ‘virtual void rocksdb::FlushedFileCollector::OnFlushCompleted(rocksdb::DB*, const int&)’ marked ‘override’, but does not override\n   virtual void OnFlushCompleted(DB* /*db*/, const FlushJobInfo& info) override {\n                ^\ndb/db_sst_test.cc:24:7: error: ‘class rocksdb::FlushedFileCollector’ has virtual functions and accessible non-virtual destructor [-Werror=non-virtual-dtor]\n class FlushedFileCollector : public EventListener {\n       ^\ndb/db_sst_test.cc: In member function ‘virtual void rocksdb::FlushedFileCollector::OnFlushCompleted(rocksdb::DB*, const int&)’:\ndb/db_sst_test.cc:31:35: error: request for member ‘file_path’ in ‘info’, which is of non-class type ‘const int’\n     flushed_files_.push_back(info.file_path);\n                                   ^\ncc1plus: all warnings being treated as errors\nmake: *** [db/db_sst_test.o] Error 1\nCloses https://github.com/facebook/rocksdb/pull/3676\n\nDifferential Revision: D7493006\n\nPulled By: miasantreble\n\nfbshipit-source-id: 77dff0a5b23e27db51be9b9798e3744e6fdec64f",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c827b2dc2aed180a1fc7fd6d53307887950cafe1"
    },
    {
        "hash": "c3eb762bb0eea2c403778e60a8d7bac003314c56",
        "author": "Fosco Marotto",
        "date": "2018-03-30T11:28:05-07:00",
        "message": "Update 64-bit shift in compression.h\n\nSummary:\nThis was failing the build on windows with zstd, warning treated as an error, 32-bit shift implicitly converted to 64-bit.\nCloses https://github.com/facebook/rocksdb/pull/3624\n\nDifferential Revision: D7307883\n\nPulled By: gfosco\n\nfbshipit-source-id: 68110e9b5b1b59b668dec6cf86b67556402574e7",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c3eb762bb0eea2c403778e60a8d7bac003314c56"
    },
    {
        "hash": "89d989ed75ed89e756156d1f82e123b24591be8c",
        "author": "Maysam Yabandeh",
        "date": "2018-03-29T14:46:41-07:00",
        "message": "WritePrepared Txn: fix a bug in publishing recoverable state seq\n\nSummary:\nWhen using two_write_queue, the published seq and the last allocated sequence could be ahead of the LastSequence, even if both write queues are stopped as in WriteRecoverableState. The patch fixes a bug in WriteRecoverableState in which LastSequence was used as a reference but the result was applied to last fetched sequence and last published seq.\nCloses https://github.com/facebook/rocksdb/pull/3665\n\nDifferential Revision: D7446099\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 1449bed9aed8e9db6af85946efd347cb8efd3c0b",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/89d989ed75ed89e756156d1f82e123b24591be8c"
    },
    {
        "hash": "90c542347acc89a424c112310ba0f6c2d559fc6d",
        "author": "Sagar Vemuri",
        "date": "2018-03-27T17:13:53-07:00",
        "message": "Update comments about MergeOperator::AllowSingleOperand\n\nSummary:\nUpdated comments around AllowSingleOperand.\nReason: A couple of users were confused and encountered issues due to no overriding PartialMerge with AllowSingleOperand=true.\n\nI'll also look into modifying the default merge operator implementation so that overriding PartialMerge is not mandatory when AllowSingleOp=true.\nCloses https://github.com/facebook/rocksdb/pull/3659\n\nDifferential Revision: D7422691\n\nPulled By: sagar0\n\nfbshipit-source-id: 3d075a6ced0120f5d65cb7ae5412936f1862f342",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/merge_operator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/90c542347acc89a424c112310ba0f6c2d559fc6d"
    },
    {
        "hash": "d687670256cc8fedb7c5e4d348fc66b2f0dec4f1",
        "author": "Sagar Vemuri",
        "date": "2018-03-27T15:13:56-07:00",
        "message": "Fix a leak in FilterBlockBuilder when adding prefix\n\nSummary:\nOur valgrind continuous test found an interesting leak which got introduced in #3614. We were adding the prefix key before saving the previous prefix start offset, due to which previous prefix offset is always incorrect. Fixed it by saving the the previous sate before adding the key.\nCloses https://github.com/facebook/rocksdb/pull/3660\n\nDifferential Revision: D7418698\n\nPulled By: sagar0\n\nfbshipit-source-id: 9933685f943cf2547ed5c553f490035a2fa785cf",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_filter_block.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d687670256cc8fedb7c5e4d348fc66b2f0dec4f1"
    },
    {
        "hash": "0999e9b79a8d6264874c1433e872438b50694c1a",
        "author": "Maysam Yabandeh",
        "date": "2018-03-26T19:45:17-07:00",
        "message": "WritePrepared Txn: Increase commit cache size to 2^23\n\nSummary:\nCurrent commit cache size is 2^21. This was due to a type. With 2^23 commit entries we can have transactions as long as 64s without incurring the cost of having them evicted from the commit cache before their commit. Here is the math:\n2^23 / 2 (one out of two seq numbers are for commit) / 2^16 TPS = 2^6 = 64s\nCloses https://github.com/facebook/rocksdb/pull/3657\n\nDifferential Revision: D7411211\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: e7cacf40579f3acf940643d8a1cfe5dd201caa35",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_txn_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0999e9b79a8d6264874c1433e872438b50694c1a"
    },
    {
        "hash": "82137f0ce8e7ca3a53a430498605d43f7ef7bc10",
        "author": "Andrew Kryczka",
        "date": "2018-03-22T18:28:01-07:00",
        "message": "Add unit test for WAL corruption\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3618\n\nDifferential Revision: D7301053\n\nPulled By: ajkr\n\nfbshipit-source-id: a9dde90caa548c294d03d6386f78428c8536ca14",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/checkpoint/checkpoint_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/82137f0ce8e7ca3a53a430498605d43f7ef7bc10"
    },
    {
        "hash": "88c3e26cc05a9b87f7485f8828ce608487e81b91",
        "author": "Andrew Kryczka",
        "date": "2018-03-22T15:13:28-07:00",
        "message": "log value of CompressionOptions::zstd_max_train_bytes\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3587\n\nDifferential Revision: D7206901\n\nPulled By: ajkr\n\nfbshipit-source-id: 5d4b1a2653627b44aa3c22db7d98c9cd5dcdb67a",
        "modified_files_count": 1,
        "modified_files": [
            "options/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/88c3e26cc05a9b87f7485f8828ce608487e81b91"
    },
    {
        "hash": "620823f88b8402f99087420a805fc1eab0256d9e",
        "author": "Andrew Kryczka",
        "date": "2018-03-22T15:13:27-07:00",
        "message": "parse CompressionOptions::zstd_max_train_bytes in options string\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3588\n\nDifferential Revision: D7208087\n\nPulled By: ajkr\n\nfbshipit-source-id: 688f7a7c447cb17bee1b410d1fd891c0bf966617",
        "modified_files_count": 1,
        "modified_files": [
            "options/options_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/620823f88b8402f99087420a805fc1eab0256d9e"
    },
    {
        "hash": "fa8c050e9ff2fa2e25e3620798f0d60c3c72157e",
        "author": "Rohan Rathi",
        "date": "2018-03-22T14:08:10-07:00",
        "message": "Fixed buffer overrun in BackupEngineImpl::BackupMeta::StoreToFile\n\nSummary:\nThe 10MB buffer in BackupEngineImpl::BackupMeta::StoreToFile can be corrupted with a large number of files. Added a check to determine current buffer length and append data to file if buffer becomes full.\n\nResolves https://github.com/facebook/rocksdb/issues/3228\nCloses https://github.com/facebook/rocksdb/pull/3636\n\nDifferential Revision: D7354160\n\nPulled By: ajkr\n\nfbshipit-source-id: eec12d38095a0d17551a4aaee52b99d30a555722",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fa8c050e9ff2fa2e25e3620798f0d60c3c72157e"
    },
    {
        "hash": "8823487ff79d46a6123f52bad28eb7a3c319624d",
        "author": "Jingguo Yao",
        "date": "2018-03-21T15:58:58-07:00",
        "message": "doc: fix a typo\n\nSummary:\ns/synchromization/synchronization/\nCloses https://github.com/facebook/rocksdb/pull/3583\n\nDifferential Revision: D7276596\n\nPulled By: sagar0\n\nfbshipit-source-id: 552ec6d6935f642e1a3a7c552de6c94441ac50e0",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8823487ff79d46a6123f52bad28eb7a3c319624d"
    },
    {
        "hash": "61785c73ed2be584a3a2a50bc38a4fadeba3596e",
        "author": "Dmitri Smirnov",
        "date": "2018-03-20T18:43:02-07:00",
        "message": "CloseHandle docs says that the return is non-zero, does not say TRUE(1)\n\nSummary:\nsay it is TRUE(1). Add assert.\nCloses https://github.com/facebook/rocksdb/pull/3630\n\nDifferential Revision: D7346895\n\nPulled By: ajkr\n\nfbshipit-source-id: a46075aa4dd89f32520230606adecccecc874cdf",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/win_thread.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/61785c73ed2be584a3a2a50bc38a4fadeba3596e"
    },
    {
        "hash": "d1b26507bd97791437d870665277b55eb9e7ce95",
        "author": "Andrew Kryczka",
        "date": "2018-03-19T12:30:05-07:00",
        "message": "fix db_compaction_test when compression disabled\n\nSummary:\nPreviously, the compaction in `DBCompactionTestWithParam.ForceBottommostLevelCompaction` generated multiple files in no-compression use case, andone file in compression use case. I increased `target_file_size_base` so it generates one file in both use cases.\nCloses https://github.com/facebook/rocksdb/pull/3625\n\nDifferential Revision: D7311885\n\nPulled By: ajkr\n\nfbshipit-source-id: 97f249fa83a9924ac34357a4bb3189c969ecb107",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d1b26507bd97791437d870665277b55eb9e7ce95"
    },
    {
        "hash": "cc340268e93345ac5dc7630b1c8838fe59a36684",
        "author": "zhsj",
        "date": "2018-03-16T13:27:55-07:00",
        "message": "fix wrong length in snprintf\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3622\n\nDifferential Revision: D7307689\n\nPulled By: ajkr\n\nfbshipit-source-id: b8f52effc63fea06c2058b39c60944c2c1f814b4",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_filter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cc340268e93345ac5dc7630b1c8838fe59a36684"
    },
    {
        "hash": "cc118b0e6f8ac2fbcc947935a686a84ea6aadc25",
        "author": "Sagar Vemuri",
        "date": "2018-03-15T10:41:48-07:00",
        "message": "Update version\n\nSummary:\nWe missed updating version.h on master when cutting 5.11.fb and 5.12.fb branches. It should be the same as the version in the latest release branch (or should it be one more?).\n\nI noticed this when trying to run some upgrade/downgrade tests from 5.11 to some new code on master.\nCloses https://github.com/facebook/rocksdb/pull/3611\n\nDifferential Revision: D7282917\n\nPulled By: sagar0\n\nfbshipit-source-id: 205ee75b77c5b6bbcea95a272760b427025a4aba",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cc118b0e6f8ac2fbcc947935a686a84ea6aadc25"
    },
    {
        "hash": "449627f0ea03bbff0fca08fb596318f4997da9cb",
        "author": "Yi Wu",
        "date": "2018-03-14T14:27:28-07:00",
        "message": "Blob DB: remove unreacheable code\n\nSummary:\nFixing #3604.\nCloses https://github.com/facebook/rocksdb/pull/3606\n\nReviewed By: siying\n\nDifferential Revision: D7276604\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 915c5897b010d28956f369989e49e64785d1161f",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_iterator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/449627f0ea03bbff0fca08fb596318f4997da9cb"
    },
    {
        "hash": "6f7b7f91b5744d87a7b400272978772ec9965c98",
        "author": "Dmitri Smirnov",
        "date": "2018-03-14T00:57:25-07:00",
        "message": "Optionally create DuplicateDetector\n\nSummary:\nAddress issue https://github.com/facebook/rocksdb/issues/3579\nCloses https://github.com/facebook/rocksdb/pull/3589\n\nDifferential Revision: D7221161\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: bd875ab0aa0e414dfa98b1bf036ba9b4ed351361",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6f7b7f91b5744d87a7b400272978772ec9965c98"
    },
    {
        "hash": "e003d22526e6b3a5715316e0d1f77a5c3b2878cd",
        "author": "Chinmay Kamat",
        "date": "2018-03-14T00:57:24-07:00",
        "message": "Fix FaultInjectionTestEnv to work with DirectIO\n\nSummary:\nImplemented PositionedAppend() and use_direct_io() for TestWritableFile.\nWith these changes, FaultInjectionTestEnv can be used with DirectIO enabled.\nCloses https://github.com/facebook/rocksdb/pull/3586\n\nDifferential Revision: D7244305\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: f6b7aece53daa0f9977bc684164a0693693e514c",
        "modified_files_count": 1,
        "modified_files": [
            "util/fault_injection_test_env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e003d22526e6b3a5715316e0d1f77a5c3b2878cd"
    },
    {
        "hash": "2256dab1352abfd9f4388c37d509b9cd02a70b46",
        "author": "Andrew Kryczka",
        "date": "2018-03-13T14:57:26-07:00",
        "message": "fix flaky DBSSTTest.DeleteSchedulerMultipleDBPaths\n\nSummary:\nI landed #3544 which made this test flaky. The reason was the files scheduled for deletion sometimes went through the trash-marking process, and sometimes were deleted directly. Our counter only bumped on the former code path, so if the latter code path was used, we'd miss counting a file deleted by deletion scheduler. This PR also bumps the counter in the latter code path.\nCloses https://github.com/facebook/rocksdb/pull/3593\n\nDifferential Revision: D7226173\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 81ab44c60834df6ff88db1d73ea34e26c6e93c39",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2256dab1352abfd9f4388c37d509b9cd02a70b46"
    },
    {
        "hash": "7153153e4b12d7a84460016a5e0f99abed562d91",
        "author": "Chinmay Kamat",
        "date": "2018-03-13T11:59:02-07:00",
        "message": "Fix enable_pipelined_write output in OPTIONS file\n\nSummary:\nenable_pipelined_write was not set in BuildDBOptions() causing its default\nvalue to be dumped in the OPTIONS file\nCloses https://github.com/facebook/rocksdb/pull/3585\n\nDifferential Revision: D7226395\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 45a659a48d18103ac9ee74bb8805dd0a6ec12474",
        "modified_files_count": 1,
        "modified_files": [
            "options/options_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7153153e4b12d7a84460016a5e0f99abed562d91"
    },
    {
        "hash": "a277b0f2b7694f7bc7ac8d1e7201f9719f5898ba",
        "author": "Lukas Rist",
        "date": "2018-03-08T10:27:25-08:00",
        "message": "Clarification regarding record format\n\nSummary:\nThe CRC is actually calculated based on the record type and payload.\nThe wiki should also be updated accordingly and extended with a section on the recyclable record format.\nCloses https://github.com/facebook/rocksdb/pull/3576\n\nDifferential Revision: D7196478\n\nPulled By: siying\n\nfbshipit-source-id: 39f7a0395075cc73e2aa2bfc9e42c85bce35e765",
        "modified_files_count": 1,
        "modified_files": [
            "db/log_writer.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a277b0f2b7694f7bc7ac8d1e7201f9719f5898ba"
    },
    {
        "hash": "b560fc9f625d7002631b7709188bc8f1151288c2",
        "author": "Siying Dong",
        "date": "2018-03-08T10:12:23-08:00",
        "message": "Fix a block pinning regression introduced in b555ed30a4a93b80a3ac4781c6721ab988e03b5b\n\nSummary:\nb555ed30a4a93b80a3ac4781c6721ab988e03b5b introduces a regression, which causes blocks always to be pinned in block based iterators. Fix it.\nCloses https://github.com/facebook/rocksdb/pull/3582\n\nDifferential Revision: D7189534\n\nPulled By: siying\n\nfbshipit-source-id: 117dc7a03d0a0e360424db02efb366e12da2be03",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b560fc9f625d7002631b7709188bc8f1151288c2"
    },
    {
        "hash": "e69f6e86292c1bcd0e85537a02987534ec039eb0",
        "author": "Sagar Vemuri",
        "date": "2018-03-07T15:27:17-08:00",
        "message": "Fix API name in a comment in db.h\n\nSummary:\n... so that people are not confused.\nCloses https://github.com/facebook/rocksdb/pull/3580\n\nDifferential Revision: D7187175\n\nPulled By: sagar0\n\nfbshipit-source-id: bce70093d52e38cd24c9432fd708885d7c2c013e",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e69f6e86292c1bcd0e85537a02987534ec039eb0"
    },
    {
        "hash": "9cb4856dbd5e744f47775c47e01178b661f5246e",
        "author": "Huachao Huang",
        "date": "2018-03-05T17:57:39-08:00",
        "message": "Don't need to UpdateFilesByCompactionPri for kCompactionStyleNone\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3563\n\nDifferential Revision: D7154653\n\nPulled By: ajkr\n\nfbshipit-source-id: 4f32fb1b02451a934504c40be22b07fb1f2deb9c",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9cb4856dbd5e744f47775c47e01178b661f5246e"
    },
    {
        "hash": "92b1a68d872729f15fe399931498003d29cc3bcb",
        "author": "Zhongyi Xie",
        "date": "2018-03-05T11:12:28-08:00",
        "message": "fix FreeBSD build\n\nSummary:\nCurrently FreeBSD build is broken in master and possibly some previous releases due to unrecognized symbol `O_DIRECT`.\nThis PR will fix the build on FreeBSD\nCloses https://github.com/facebook/rocksdb/pull/3560\n\nDifferential Revision: D7148646\n\nPulled By: miasantreble\n\nfbshipit-source-id: 95b6c3d310fa531267c086b2cd40a5ab1c042b5a",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/92b1a68d872729f15fe399931498003d29cc3bcb"
    },
    {
        "hash": "15f55e5e06feb931fe951a4a57092859d2a6d72e",
        "author": "Sagar Vemuri",
        "date": "2018-03-02T16:27:21-08:00",
        "message": "Fix TSAN timeout in MergeOperatorPinningTest.Randomized/x test\n\nSummary:\n[FB - Internal]\nMergeOperatorPinningTest.Randomized/x tests are frequently failing with timeouts when run with tsan, as they are exceeding 10 minute limit for tests. The tests are in turn getting disabled due to frequent failures.\nI halved the number of rounds to make the test complete sooner. This reduces the number of testing iterations a little, but it still is much better than totally letting the test be disabled.\nCloses https://github.com/facebook/rocksdb/pull/3523\n\nDifferential Revision: D7031498\n\nPulled By: sagar0\n\nfbshipit-source-id: 9a694f2176b235259920a42bf24bca5346f7cff1",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_merge_operator_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/15f55e5e06feb931fe951a4a57092859d2a6d72e"
    },
    {
        "hash": "ec5843dca99dc7a16f1e80237468d7b5df2e6e1d",
        "author": "leviathan1995",
        "date": "2018-02-28T09:56:45-08:00",
        "message": "Comment typo\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3546\n\nDifferential Revision: D7111708\n\nPulled By: ajkr\n\nfbshipit-source-id: 522a4a00eb3e34c73afcb86c1f75cd2e90e7608d",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ec5843dca99dc7a16f1e80237468d7b5df2e6e1d"
    },
    {
        "hash": "c287c098a4112d0b2577e205fd78d556885f43de",
        "author": "Siying Dong",
        "date": "2018-02-27T12:42:31-08:00",
        "message": "Update comments in DB::Close()\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3543\n\nDifferential Revision: D7093251\n\nPulled By: siying\n\nfbshipit-source-id: 4066b82c95ecb65866c5842d68ab13ab9f85d567",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c287c098a4112d0b2577e205fd78d556885f43de"
    },
    {
        "hash": "ad05cbb182c2ca869f262b097898d5c270fae7ed",
        "author": "Zhongyi Xie",
        "date": "2018-02-26T14:58:06-08:00",
        "message": "DB:Open should fail on tmpfs when use_direct_reads=true\n\nSummary:\nBefore:\n\n> $ TEST_TMPDIR=/dev/shm ./db_bench -use_direct_reads=true -benchmarks=readrandomwriterandom -num=10000000 -reads=100000 -write_buffer_size=1048576 -target_file_size_base=1048576 -max_bytes_for_level_base=4194304 -max_background_jobs=12 -readwritepercent=50 -key_size=16 -value_size=48 -threads=32\nDB path: [/dev/shm/dbbench]\nput error: IO error: While open a file for random read: /dev/shm/dbbench/000007.sst: Invalid argument\nput error: IO error: While open a file for random read: /dev/shm/dbbench/000007.sst: Invalid argument\nput error: IO error: While open a file for random read: /dev/shm/dbbench/000007.sst: Invalid argument\nput error: IO error: While open a file for random read: /dev/shm/dbbench/000007.sst: Invalid argument\nput error: IO error: While open a file for random read: /dev/shm/dbbench/000007.sst: Invalid argument\nput error: IO error: While open a file for random read: /dev/shm/dbbench/000007.sst: Invalid argument\nput error: IO error: While open a file for random read: /dev/shm/dbbench/000007.sst: Invalid argument\nput error: IO error: While open a file for random read: /dev/shm/dbbench/000007.sst: Invalid argument\nput error: IO error: While open a file for random read: /dev/shm/dbbench/000007.sst: Invalid argument\ndb_bench: tpp.c:84: __pthread_tpp_change_priority: Assertion `new_prio == -1 || (new_prio >= fifo_min_prio && new_prio <= fifo_max_prio)' failed.\nput error: IO error: While open a file for random read: /dev/shm/dbbench/000007.sst: Invalid argument\nput error: IO error: While open a file for random read: /dev/shm/dbbench/000007.sst: Invalid argument\n\nAfter:\n> TEST_TMPDIR=/dev/shm ./db_bench -use_direct_reads=true -benchmarks=readrandomwriterandom -num=10000000 -reads=100000 -write_buffer_size=1048576 -target_file_size_base=1048576 -max_bytes_for_level_base=4194304 -max_background_jobs=12 -readwritepercent=50 -key_size=16 -value_size=48 -threads=32\nInitializing RocksDB Options from the specified file\nInitializing RocksDB Options from command-line flags\nopen error: Not implemented: Direct I/O is not supported by the specified DB.\nCloses https://github.com/facebook/rocksdb/pull/3539\n\nDifferential Revision: D7082658\n\nPulled By: miasantreble\n\nfbshipit-source-id: f9d9c6ec3b5e9e049cab52154940ee101ba4d342",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_open.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ad05cbb182c2ca869f262b097898d5c270fae7ed"
    },
    {
        "hash": "7eb292da144f319638ade09127e58eaec286f93a",
        "author": "Dmitri Smirnov",
        "date": "2018-02-26T13:46:12-08:00",
        "message": "Fix a memory leak in WindowsThread\n\nSummary:\n_endthreadex does not return and thus objects\n  for stack destructors do not run. This creates a memory leak.\n  We remove the calls since _enthreadex called automatically after the\n  threadproc returns i.e. thread exits.\nCloses https://github.com/facebook/rocksdb/pull/3542\n\nDifferential Revision: D7088713\n\nPulled By: ajkr\n\nfbshipit-source-id: 749ecafc6a9572f587f76e516547e07734349a54",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/win_thread.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7eb292da144f319638ade09127e58eaec286f93a"
    },
    {
        "hash": "30649dc6a10b9de3df91b76e8c1d187b43d6e8e0",
        "author": "Siying Dong",
        "date": "2018-02-23T11:42:33-08:00",
        "message": "Have a different function when ROCKSDB_JEMALLOC=0\n\nSummary:\nSome sanitizer is not happy with parameter name with ROCKSDB_JEMALLOC not set. Use another function instead.\nCloses https://github.com/facebook/rocksdb/pull/3536\n\nDifferential Revision: D7064849\n\nPulled By: siying\n\nfbshipit-source-id: c6ae94e044686176af1259df9172453d52c2f9d5",
        "modified_files_count": 1,
        "modified_files": [
            "db/malloc_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/30649dc6a10b9de3df91b76e8c1d187b43d6e8e0"
    },
    {
        "hash": "e9c31ab1592be6c53c6a1a86cdfefcc8cd0d6e7d",
        "author": "jsteemann",
        "date": "2018-02-20T17:44:44-08:00",
        "message": "save redundant key lookup in map of locked keys\n\nSummary:\nIn case it is found that a key is already marked as locked in a\nstripe's map of locked keys, it is not necessary to look it up\nagain using `std::unordered_map<std::string, ...>::at(size_t)`.\n\nInstead, we can use the already found position using the iterator\nproduced by the previous `find` operation. Reusing the iterator\nwill avoid having to hash the key again and do additional \"random\"\nmemory lookups in the map of keys (though the data will very\nlikely sit available in caches here already due to the previous\nfind operation)\nCloses https://github.com/facebook/rocksdb/pull/3505\n\nDifferential Revision: D7036446\n\nPulled By: sagar0\n\nfbshipit-source-id: cced51547b2bd2d49394f6bc8c5896f09fa80f68",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_lock_mgr.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e9c31ab1592be6c53c6a1a86cdfefcc8cd0d6e7d"
    },
    {
        "hash": "5263da639644ecc9b5c6b098ed0853d405c1151d",
        "author": "Igor Sugak",
        "date": "2018-02-20T16:44:00-08:00",
        "message": "fix shift UBSAN error in col_buf_encoder.cc\n\nSummary:\nAdd a static cast to perform the left shift as with an unsigned type.\n\nmake ubsan_check\nCloses https://github.com/facebook/rocksdb/pull/3517\n\nReviewed By: sagar0\n\nDifferential Revision: D7016044\n\nPulled By: igorsugak\n\nfbshipit-source-id: baf72f6197edd8f7220d010b15a23d6de6a72c49",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/col_buf_encoder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5263da639644ecc9b5c6b098ed0853d405c1151d"
    },
    {
        "hash": "ab446dc22d8c59534e56784b040afc3d91b86d04",
        "author": "Po-Chuan Hsieh",
        "date": "2018-02-16T10:41:49-08:00",
        "message": "Fix build with USE_RTTI=0\n\nSummary:\nutilities/column_aware_encoding_util.cc:61:23: error: cannot use dynamic_cast with -fno-rtti\n  table_reader_.reset(dynamic_cast<BlockBasedTable*>(table_reader.release()));\n                      ^\n1 error generated.\n\nIt was added as a [local patch](https://svnweb.freebsd.org/ports/head/databases/rocksdb/files/patch-utilities-column_aware_encoding_util.cc) on FreeBSD since RocksDB 5.8.\nIt also fixes #2707.\nCloses https://github.com/facebook/rocksdb/pull/3514\n\nDifferential Revision: D7005571\n\nPulled By: siying\n\nfbshipit-source-id: 351a9055d21d0accdd7a932e8e7bfcd3c8e22068",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/column_aware_encoding_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ab446dc22d8c59534e56784b040afc3d91b86d04"
    },
    {
        "hash": "0454f781c262f8134f6d976295a3290f02724197",
        "author": "Andrew Kryczka",
        "date": "2018-02-15T19:41:52-08:00",
        "message": "fix advance reservation of arena block addresses\n\nSummary:\nCalling `std::vector::reserve()` causes memory to be reallocated and then data to be moved. It was called prior to adding every block. This reallocation could be done a huge amount of times, e.g., for users with large index blocks.\n\nInstead, we can simply use `std::vector::emplace_back()` in such a way that preserves the no-memory-leak guarantee, while letting the vector decide when to reallocate space. Now I see reallocation/moving happen O(logN) times, rather than O(N) times, where N is the final size of vector.\nCloses https://github.com/facebook/rocksdb/pull/3508\n\nDifferential Revision: D6994228\n\nPulled By: ajkr\n\nfbshipit-source-id: ab7c11e13ff37c8c6c8249be7a79566a4068cd27",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0454f781c262f8134f6d976295a3290f02724197"
    },
    {
        "hash": "c88c57cde10a820b21d9fab0ca3f059da3852057",
        "author": "Zhongyi Xie",
        "date": "2018-02-15T14:13:39-08:00",
        "message": "Tweak external file ingestion seqno logic under universal compaction\n\nSummary:\nRight now it is possible that a file gets assigned to L0 but also assigned the seqno from a higher level which it doesn't fit\nUnder the current impl, it is possibe that seqno in lower levels (Ln) can be equal to smallest seqno of higher levels (Ln-1), which is undesirable from universal compaction's point of view.\nThis should fix the intermittent failure of `ExternalSSTFileBasicTest.IngestFileWithGlobalSeqnoPickedSeqno`\nCloses https://github.com/facebook/rocksdb/pull/3411\n\nDifferential Revision: D6813802\n\nPulled By: miasantreble\n\nfbshipit-source-id: 693d0462fa94725ccfb9d8858743e6d2d9992d14",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_ingestion_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c88c57cde10a820b21d9fab0ca3f059da3852057"
    },
    {
        "hash": "6a30b98fdcfffac4a931f4669f79d6f2b2d09374",
        "author": "jsteemann",
        "date": "2018-02-15T11:13:37-08:00",
        "message": "fix wrong indentation\n\nSummary:\nSomehow the indentation was incorrect in this file.\nThe only change in this PR is to get it right again in order to make the code more readable.\nPlease reject if you think it's not worth it.\nCloses https://github.com/facebook/rocksdb/pull/3504\n\nDifferential Revision: D6996011\n\nPulled By: miasantreble\n\nfbshipit-source-id: 060514a3a8c910d34bad795b36eb4d278512b154",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/write_batch_with_index/write_batch_with_index.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6a30b98fdcfffac4a931f4669f79d6f2b2d09374"
    },
    {
        "hash": "b3c535133598716ad19727d602ab886813240b9c",
        "author": "Siying Dong",
        "date": "2018-02-13T16:27:11-08:00",
        "message": "Direct I/O writable file should do fsync in Close()\n\nSummary:\nWe don't do fsync() after truncate in direct I/O writeable file (in fact we don't do any fsync ever). This can cause metadata not persistent to disk after the file is generated. We call it instead.\nCloses https://github.com/facebook/rocksdb/pull/3500\n\nDifferential Revision: D6981482\n\nPulled By: siying\n\nfbshipit-source-id: 7e2b591b7e5dd1b96fc0775515b8b9e6092980ef",
        "modified_files_count": 1,
        "modified_files": [
            "util/file_reader_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b3c535133598716ad19727d602ab886813240b9c"
    },
    {
        "hash": "d08d05cb6261ae3f4a1d4e20e02010b6dc9d54c8",
        "author": "Igor Sugak",
        "date": "2018-02-13T14:12:40-08:00",
        "message": "fix UBSAN errors in fault_injection_test\n\nSummary:\nThis fixes shift and signed-integer-overflow UBSAN checks in fault_injection_test by using a larger and unsigned type.\nCloses https://github.com/facebook/rocksdb/pull/3498\n\nReviewed By: siying\n\nDifferential Revision: D6981116\n\nPulled By: igorsugak\n\nfbshipit-source-id: 3688f62cce570534b161e9b5f42109ebc9ae5a2c",
        "modified_files_count": 1,
        "modified_files": [
            "db/fault_injection_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d08d05cb6261ae3f4a1d4e20e02010b6dc9d54c8"
    },
    {
        "hash": "0a0fad447bc46bb7169f4ca86d5942f2a445a5ed",
        "author": "Andrew Kryczka",
        "date": "2018-02-12T14:57:13-08:00",
        "message": "db_bench separate options for partition index and filters\n\nSummary:\nSome workloads (like my current benchmarking) may want partitioned indexes without partitioned filters. Particularly, when `-optimize_filters_for_hits=true`, the total index size may be larger than the total filter size, so it can make sense to hold all filters in-memory but not all indexes.\nCloses https://github.com/facebook/rocksdb/pull/3492\n\nDifferential Revision: D6970092\n\nPulled By: ajkr\n\nfbshipit-source-id: b7fa1828e1d13829339aefb90fd56eb7c5337f61",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0a0fad447bc46bb7169f4ca86d5942f2a445a5ed"
    },
    {
        "hash": "3f1bb07351fb0e5cd40894d434a6957066bde292",
        "author": "Zhongyi Xie",
        "date": "2018-02-12T13:28:18-08:00",
        "message": "make flush_reason_ atomic to keep TSAN happy\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3487\n\nDifferential Revision: D6967098\n\nPulled By: miasantreble\n\nfbshipit-source-id: 48e0accf2e3b3f589ddb797ff8083c8520269bf0",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3f1bb07351fb0e5cd40894d434a6957066bde292"
    },
    {
        "hash": "d62af7fa4f42fcb89e23417ca3d3ad49a687800c",
        "author": "jsteemann",
        "date": "2018-02-09T12:58:07-08:00",
        "message": "fix a typo (of a potential vi user)\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3481\n\nDifferential Revision: D6939089\n\nPulled By: siying\n\nfbshipit-source-id: ccce3ae10cc5ff50a74b85804afd044b21a3c3e2",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d62af7fa4f42fcb89e23417ca3d3ad49a687800c"
    },
    {
        "hash": "a0931b3185561254e0b22d154edb7f429ce83dd5",
        "author": "Siying Dong",
        "date": "2018-02-07T14:57:35-08:00",
        "message": "Fix UBSAN Error in WritePreparedTransactionTest\n\nSummary:\nWritePreparedTransactionTest has the UBSAN error because the wrong order of its parent class construction. Fix it.\nCloses https://github.com/facebook/rocksdb/pull/3478\n\nDifferential Revision: D6928975\n\nPulled By: siying\n\nfbshipit-source-id: 13edfd5cb9cf73f1ac5ae3b6f53061d32783733d",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a0931b3185561254e0b22d154edb7f429ce83dd5"
    },
    {
        "hash": "8f8eb4f1c0dda92efe24d3a644dbbd9bfedd6800",
        "author": "Maysam Yabandeh",
        "date": "2018-02-06T14:26:35-08:00",
        "message": "Fix leak report by asan on DuplicateKeys test\n\nSummary:\nDeletes the transaction object at the end of the test.\nVerified by:\n- COMPILE_WITH_ASAN=1 make -j32 transaction_test\n- ./transaction_test --gtest_filter=\"DBA**Duplicate*\"\nCloses https://github.com/facebook/rocksdb/pull/3470\n\nDifferential Revision: D6916473\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 8303df25408635d5d3ac2b25f309a3d15957c937",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8f8eb4f1c0dda92efe24d3a644dbbd9bfedd6800"
    },
    {
        "hash": "2f29991701ee384819add5ac51b20d1a4febc554",
        "author": "Zhongyi Xie",
        "date": "2018-02-06T13:58:18-08:00",
        "message": "split RandomizedHarnessTest more ways\n\nSummary:\nRandomizedHarnessTest enumerates different combinations of test type, compression type, restart interval, etc. For some combinations it takes very long to finish, causing the test to time out in test infrastructure.\nThis PR split the test input into smaller trunks in the hope that they will fit in the timeout window. Another possibility is to reduce `num_entries` of course\nCloses https://github.com/facebook/rocksdb/pull/3467\n\nDifferential Revision: D6910235\n\nPulled By: miasantreble\n\nfbshipit-source-id: 717246ee5d21a8a48ad82d4d9c04f9051a66f07f",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2f29991701ee384819add5ac51b20d1a4febc554"
    },
    {
        "hash": "c3401846ef334ab06f9f36d0a3252005b96b7991",
        "author": "Agam Brahma",
        "date": "2018-02-03T18:27:14-08:00",
        "message": "Minor typo in comment (s/pro/pri)\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3460\n\nDifferential Revision: D6895365\n\nPulled By: miasantreble\n\nfbshipit-source-id: 04f633d1971b1f542ac28118b738ceb0242a0228",
        "modified_files_count": 1,
        "modified_files": [
            "cache/lru_cache.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c3401846ef334ab06f9f36d0a3252005b96b7991"
    },
    {
        "hash": "6e5b341e8bdcc5dfaff6bb64eab1b4ed2df3aa1b",
        "author": "Prashant D",
        "date": "2018-02-01T14:27:42-08:00",
        "message": "options: Fix coverity issues\n\nSummary:\noptions/cf_options.cc:\n 77      memtable_insert_with_hint_prefix_extractor(\n\nCID 1396208 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR)\n2. uninit_member: Non-static class member info_log_level is not initialized in this constructor nor in any functions that it calls.\nCloses https://github.com/facebook/rocksdb/pull/3106\n\nDifferential Revision: D6874689\n\nPulled By: sagar0\n\nfbshipit-source-id: b5cd2d13915fd86d87260050f9c5d117615bbe30",
        "modified_files_count": 1,
        "modified_files": [
            "options/cf_options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6e5b341e8bdcc5dfaff6bb64eab1b4ed2df3aa1b"
    },
    {
        "hash": "e502839e25b224f9488f46da2df9d896ead71403",
        "author": "Jun Wu",
        "date": "2018-02-01T14:27:42-08:00",
        "message": "crc32: suppress -Wimplicit-fallthrough warnings\n\nSummary:\nWorkaround a bunch of \"implicit-fallthrough\" compiler errors, like:\n\n```\nutil/crc32c.cc:533:7: error: this statement may fall through [-Werror=implicit-fallthrough=]\n   crc = _mm_crc32_u64(crc, *(uint64_t*)(buf + offset));\n       ^\nutil/crc32c.cc:1016:9: note: in expansion of macro ‘CRCsinglet’\n         CRCsinglet(crc0, next, -2 * 8);\n         ^~~~~~~~~~\nutil/crc32c.cc:1017:7: note: here\n       case 1:\n```\nCloses https://github.com/facebook/rocksdb/pull/3339\n\nReviewed By: sagar0\n\nDifferential Revision: D6874736\n\nPulled By: quark-zju\n\nfbshipit-source-id: eec9f3bc135e12fca336928d01711006d5c3cb16",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e502839e25b224f9488f46da2df9d896ead71403"
    },
    {
        "hash": "b78ed0460b7f16013e62f72a0253eb98220a0965",
        "author": "Andrew Kryczka",
        "date": "2018-02-01T09:42:09-08:00",
        "message": "fix ReadaheadRandomAccessFile/iterator prefetch bug\n\nSummary:\n`ReadaheadRandomAccessFile` is used by iterators for file reads in several cases, like in compaction when `compaction_readahead_size > 0` or `use_direct_io_for_flush_and_compaction == true`, or in user iterator when `ReadOptions::readahead_size > 0`. `ReadaheadRandomAccessFile` maintains an internal buffer for readahead data. It assumes that, if the buffer's length is less than `ReadaheadRandomAccessFile::readahead_size_`, which is fixed in the constructor, then EOF has been reached so it doesn't try reading further.\n\nRecently, d938226af405681c592f25310f41c0c933bcdb19 started calling `RandomAccessFile::Prefetch` with various lengths: 8KB, 16KB, etc. When the `RandomAccessFile` is a `ReadaheadRandomAccessFile`, it triggers the above condition and incorrectly determines EOF. If a block is partially in the readahead buffer and EOF is incorrectly decided, the result is a truncated data block.\n\nThe problem is reproducible:\n\n```\nTEST_TMPDIR=/data/compaction_bench ./db_bench -benchmarks=fillrandom -write_buffer_size=1048576 -target_file_size_base=1048576 -block_size=18384 -use_direct_io_for_flush_and_compaction=true\n...\nput error: Corruption: truncated block read from /data/compaction_bench/dbbench/000014.sst offset 20245, expected 10143 bytes, got 8427\n```\nCloses https://github.com/facebook/rocksdb/pull/3454\n\nDifferential Revision: D6869405\n\nPulled By: ajkr\n\nfbshipit-source-id: 87001c299e7600a37c0dcccbd0368e0954c929cf",
        "modified_files_count": 1,
        "modified_files": [
            "util/file_reader_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b78ed0460b7f16013e62f72a0253eb98220a0965"
    },
    {
        "hash": "1edac32b77cc5ebf8f1e853b2cf850c6f9bb8281",
        "author": "Andrew Kryczka",
        "date": "2018-01-31T14:26:52-08:00",
        "message": "Update rocksdb.read.block.get.micros when block cache disabled\n\nSummary:\nPreviously `ReadBlockFromFile` for data blocks was only measured when reading a block to populate block cache. This PR adds the corresponding measurements for users who disabled block cache.\nCloses https://github.com/facebook/rocksdb/pull/3442\n\nDifferential Revision: D6848671\n\nPulled By: ajkr\n\nfbshipit-source-id: bb4bbe1797fa2cc1d9a5bad44891af2b55384b41",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1edac32b77cc5ebf8f1e853b2cf850c6f9bb8281"
    },
    {
        "hash": "6efa8e270c59e044194c9772a6cac2d5483b66b8",
        "author": "Fosco Marotto",
        "date": "2018-01-31T12:13:00-08:00",
        "message": "Update endif/else behavior for unreachable code error on Windows.\n\nSummary:\nPer #3367\nCloses https://github.com/facebook/rocksdb/pull/3389\n\nDifferential Revision: D6766126\n\nPulled By: gfosco\n\nfbshipit-source-id: e441a15e8aec6747c613d68f4f0621b605eb48a0",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6efa8e270c59e044194c9772a6cac2d5483b66b8"
    },
    {
        "hash": "5400800a56bdf63b3887e323840c8534abdd0b72",
        "author": "Fosco Marotto",
        "date": "2018-01-31T11:58:10-08:00",
        "message": "Work around VS2017 warning for unused reference\n\nSummary:\nFor #3407\nCloses https://github.com/facebook/rocksdb/pull/3425\n\nDifferential Revision: D6836900\n\nPulled By: gfosco\n\nfbshipit-source-id: 7bcaf7a1beeeeabb7c05584f2745e7b4a2473497",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5400800a56bdf63b3887e323840c8534abdd0b72"
    },
    {
        "hash": "ab5ab36ac2b23f084b5670346c72d532e38d260d",
        "author": "Andrew Kryczka",
        "date": "2018-01-30T16:50:42-08:00",
        "message": "fix DBTest2.ReadAmpBitmapLiveInCacheAfterDBClose file ID support check\n\nSummary:\nUpdated the test case to handle tmpfs mounted at directories different from \"/dev/shm/\".\nCloses https://github.com/facebook/rocksdb/pull/3440\n\nDifferential Revision: D6848213\n\nPulled By: ajkr\n\nfbshipit-source-id: 465e9dbf0921d0930161f732db6b3766bb030589",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ab5ab36ac2b23f084b5670346c72d532e38d260d"
    },
    {
        "hash": "77dc069eb92fb833b434183ed055b5c8b1042543",
        "author": "Fosco Marotto",
        "date": "2018-01-30T11:12:51-08:00",
        "message": "Change size_t cast in table_test\n\nSummary:\nFixes this build error on master (macOS):\n\n```\ntable/table_test.cc:972:27: error: implicit conversion loses integer precision: 'size_t' (aka 'unsigned long') to\n      'unsigned int' [-Werror,-Wshorten-64-to-32]\n```\nCloses https://github.com/facebook/rocksdb/pull/3434\n\nReviewed By: maysamyabandeh\n\nDifferential Revision: D6840354\n\nPulled By: gfosco\n\nfbshipit-source-id: fffac6aefbbdd134ce1299453c5590aa855a5fc8",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/77dc069eb92fb833b434183ed055b5c8b1042543"
    },
    {
        "hash": "f3fe6f883b22b49533c6506020f220dcf0f8bfa5",
        "author": "Andrew Kryczka",
        "date": "2018-01-29T21:11:42-08:00",
        "message": "fix for checkpoint directory with trailing slash(es)\n\nSummary:\npreviously if `checkpoint_dir` contained a trailing slash, we'd attempt to create the `.tmp` directory under `checkpoint_dir` due to simply concatenating `checkpoint_dir + \".tmp\"`. This failed because `checkpoint_dir` hadn't been created yet and our directory creation is non-recursive. This PR fixes the issue by always creating the `.tmp` directory in the same parent as `checkpoint_dir` by stripping trailing slashes before concatenating.\nCloses https://github.com/facebook/rocksdb/pull/3275\n\nDifferential Revision: D6574952\n\nPulled By: ajkr\n\nfbshipit-source-id: a6daa6777a901eac2460cd0140c9515f7241aefc",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/checkpoint/checkpoint_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f3fe6f883b22b49533c6506020f220dcf0f8bfa5"
    },
    {
        "hash": "e6605e53024dc07f6aa7c570de22c01b5dc364ab",
        "author": "Sagar Vemuri",
        "date": "2018-01-29T16:42:45-08:00",
        "message": "Tests for dynamic universal compaction options\n\nSummary:\nAdded a test for three dynamic universal compaction options, in the realm of read amplification:\n- size_ratio\n- min_merge_width\n- max_merge_width\n\nAlso updated DynamicUniversalCompactionSizeAmplification by adding a check on compaction reason.\nFound a bug in compaction reason setting while working on this PR, and fixed in #3412 .\n\nTODO for later: Still to add tests for these options: compression_size_percent, stop_style and trivial_move.\nCloses https://github.com/facebook/rocksdb/pull/3419\n\nDifferential Revision: D6822217\n\nPulled By: sagar0\n\nfbshipit-source-id: 074573fca6389053cbac229891a0163f38bb56c4",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_universal_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e6605e53024dc07f6aa7c570de22c01b5dc364ab"
    },
    {
        "hash": "e2d4b0efb123a12a410adc078b614ad559b1a966",
        "author": "Siying Dong",
        "date": "2018-01-29T14:27:32-08:00",
        "message": "db_bench: sanity check CuckooTable with mmap_read option\n\nSummary:\nThis is to avoid run time error. Fail the db_bench immediately if cuckoo table is used but mmap_read is not specified.\nCloses https://github.com/facebook/rocksdb/pull/3420\n\nDifferential Revision: D6838284\n\nPulled By: siying\n\nfbshipit-source-id: 20893fa28d40fadc31e4ff154bed02f5a1bad341",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e2d4b0efb123a12a410adc078b614ad559b1a966"
    },
    {
        "hash": "9f7ccc8445a73217f7f9382bdaf8def2ce56ac5d",
        "author": "Andrew Kryczka",
        "date": "2018-01-29T11:43:21-08:00",
        "message": "fix db_bench filluniquerandom key count assertion\n\nSummary:\nIt failed every time. I guess people usually ran with assertions disabled.\nCloses https://github.com/facebook/rocksdb/pull/3422\n\nDifferential Revision: D6822984\n\nPulled By: ajkr\n\nfbshipit-source-id: 2e90db75618b26ac1c46ddfa9e03c095c7bf16e3",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9f7ccc8445a73217f7f9382bdaf8def2ce56ac5d"
    },
    {
        "hash": "65cd6cd4b62cbcb8f234bc3d6d25b7241b3ee55c",
        "author": "Ben Darnell",
        "date": "2018-01-29T09:57:46-08:00",
        "message": "Rewrite comments on use_fsync option\n\nSummary:\nThis replaces a vague warning about the mostly-obsolete ext3 filesystem with\na more detailed note about a historical bug in the still-relevant ext4.\n\nFixes #3410\nCloses https://github.com/facebook/rocksdb/pull/3421\n\nDifferential Revision: D6834881\n\nPulled By: siying\n\nfbshipit-source-id: 7771ef5c89a54c0ac17821680779c48178d0b400",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/65cd6cd4b62cbcb8f234bc3d6d25b7241b3ee55c"
    },
    {
        "hash": "46acdc98838f4545e70751d09be2b507aa90f253",
        "author": "Maysam Yabandeh",
        "date": "2018-01-29T07:41:44-08:00",
        "message": "Split HarnessTest_Randomized to avoid timeout\n\nSummary:\nSplit HarnessTest_Randomized to two tests\nCloses https://github.com/facebook/rocksdb/pull/3424\n\nDifferential Revision: D6826006\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 59c9a11c7da092206effce6e4fa3792f9c66bef2",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/46acdc98838f4545e70751d09be2b507aa90f253"
    },
    {
        "hash": "439855a7743a10bc036c7bc05563521500b83068",
        "author": "Yi Wu",
        "date": "2018-01-26T15:28:44-08:00",
        "message": "StackableDB optionally take shared ownership of the underlying DB\n\nSummary:\nAllow StackableDB optionally takes a shared_ptr on construction and thus hold shared ownership of the underlying DB.\nCloses https://github.com/facebook/rocksdb/pull/3423\n\nDifferential Revision: D6824163\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: dbdc30c42e007533a987ef413785e192340f03eb",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/stackable_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/439855a7743a10bc036c7bc05563521500b83068"
    },
    {
        "hash": "0e6e405fec42f48da373bc6f19f5221c7a4872d6",
        "author": "Andrew Kryczka",
        "date": "2018-01-26T10:57:49-08:00",
        "message": "db_bench support for memtable in-place update\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3416\n\nDifferential Revision: D6820606\n\nPulled By: ajkr\n\nfbshipit-source-id: 5035ffb33ade8d50520cafeb685ee8c8fcf1cca8",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0e6e405fec42f48da373bc6f19f5221c7a4872d6"
    },
    {
        "hash": "65d431639be995169607ae06922629890ebed3bb",
        "author": "Ben Darnell",
        "date": "2018-01-25T18:12:08-08:00",
        "message": "Update comments about default WALRecoveryMode\n\nSummary:\nThe default changed in 6a14f7a9766 but this comment was not updated.\nCloses https://github.com/facebook/rocksdb/pull/3409\n\nDifferential Revision: D6808264\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 0d7e2a054eb181e9a144fcb783cf0b2c77219bc0",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/65d431639be995169607ae06922629890ebed3bb"
    },
    {
        "hash": "d46e832e9478c18c5002ee2225e9ada0403fa1a4",
        "author": "Yi Wu",
        "date": "2018-01-23T15:12:28-08:00",
        "message": "Assert last reference before destroy ColumnFamilyData\n\nSummary:\nIn ColumnFamilySet destructor, assert it hold the last reference to cfd before destroy them.\n\nCloses #3112\nCloses https://github.com/facebook/rocksdb/pull/3397\n\nDifferential Revision: D6777967\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 60b19070e0c194b3b6146699140c1d68777866cb",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d46e832e9478c18c5002ee2225e9ada0403fa1a4"
    },
    {
        "hash": "0ea7170d7d663b6363bedd65d07afc7d598020f8",
        "author": "Sagar Vemuri",
        "date": "2018-01-23T10:27:41-08:00",
        "message": "Remove old misleading comments\n\nSummary:\nFIFO and Universal compaction options were recently made dynamic, but I forgot to update these comments. These would mislead anyone who is reading the code.\nCloses https://github.com/facebook/rocksdb/pull/3399\n\nDifferential Revision: D6786358\n\nPulled By: sagar0\n\nfbshipit-source-id: 57cfc412f63deaee29bbd82b863304821d60057d",
        "modified_files_count": 1,
        "modified_files": [
            "options/options_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ea7170d7d663b6363bedd65d07afc7d598020f8"
    },
    {
        "hash": "7e3d3326cee8f0983daab89dd93d71356122bab4",
        "author": "Yi Wu",
        "date": "2018-01-22T22:41:27-08:00",
        "message": "Blob DB: dump blob_db_options.min_blob_size\n\nSummary:\nmin_blob_size was missing from BlobDBOptions::Dump.\nCloses https://github.com/facebook/rocksdb/pull/3400\n\nDifferential Revision: D6781525\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 40d9b391578d7f8c91bd89f4ce2eda5064864c25",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7e3d3326cee8f0983daab89dd93d71356122bab4"
    },
    {
        "hash": "6f5ba0bf5bcb763c656743078c05fd3868f290dd",
        "author": "Bernard Spil",
        "date": "2018-01-19T17:12:43-08:00",
        "message": "Fix building on FreeBSD\n\nSummary:\nFreeBSD uses jemalloc as the base malloc implementation.\nThe patch has been functional on FreeBSD as of the MariaDB 10.2 port.\nCloses https://github.com/facebook/rocksdb/pull/3386\n\nDifferential Revision: D6765742\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: d55dbc082eecf640ef3df9a21f26064ebe6587e8",
        "modified_files_count": 1,
        "modified_files": [
            "db/malloc_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6f5ba0bf5bcb763c656743078c05fd3868f290dd"
    },
    {
        "hash": "5568aec421eff60944f1e7a88677c97c52e4ef19",
        "author": "Yi Wu",
        "date": "2018-01-19T12:57:15-08:00",
        "message": "Fix DBTest::SoftLimit TSAN failure\n\nSummary:\nFix data race found by TSAN around WriteStallListener: https://gist.github.com/yiwu-arbug/027d2448b903648f2f0f40b05258d80f\nCloses https://github.com/facebook/rocksdb/pull/3384\n\nDifferential Revision: D6762167\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: cd3a5c9f806de390bd1af6077ea6dbbc8bcaec09",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5568aec421eff60944f1e7a88677c97c52e4ef19"
    },
    {
        "hash": "af92d4ad112f192693f6017f24f9ae1b00e1f053",
        "author": "Sunguck Lee",
        "date": "2018-01-16T13:12:12-08:00",
        "message": "Avoid too frequent MaybeScheduleFlushOrCompaction() call\n\nSummary:\nIf there's manual compaction in the queue, then \"HaveManualCompaction(compaction_queue_.front())\" will return true, and this cause too frequent MaybeScheduleFlushOrCompaction().\n\nhttps://github.com/facebook/rocksdb/issues/3198\nCloses https://github.com/facebook/rocksdb/pull/3366\n\nDifferential Revision: D6729575\n\nPulled By: ajkr\n\nfbshipit-source-id: 96da04f8fd33297b1ccaec3badd9090403da29b0",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/af92d4ad112f192693f6017f24f9ae1b00e1f053"
    },
    {
        "hash": "ba295cda29daee3ffe58549542804efdfd969784",
        "author": "Andrew Kryczka",
        "date": "2018-01-12T11:12:09-08:00",
        "message": "replace DBTest.HugeNumbersOfLevel with a more targeted test case\n\nSummary:\nThis test often causes out-of-space error when run on travis. We don't want such stress tests in our unit test suite.\n\nThe bug in #596, which this test intends to expose, can be repro'd as long as the bottommost level(s) are empty when CompactRange is called. I rewrote the test to cover this simple case without writing a lot of data.\nCloses https://github.com/facebook/rocksdb/pull/3362\n\nDifferential Revision: D6710417\n\nPulled By: ajkr\n\nfbshipit-source-id: 9a1ec85e738c813ac2fee29f1d5302065ecb54c5",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ba295cda29daee3ffe58549542804efdfd969784"
    },
    {
        "hash": "45828c721536e2145be6f825e563955d39948f02",
        "author": "Peter (Stig) Edwards",
        "date": "2018-01-11T18:57:41-08:00",
        "message": "Consider an increase to buffer size when reading option file, from 4K to 8K.\n\nSummary:\nHello and thank you for RocksDB,\n\nWhile looking into the buffered io used when an `OPTIONS` file is read I noticed the `OPTIONS` files produced by RocksDB 5.8.8 (and head of master) were just over 4096 bytes in size, resulting in the version of glibc I am using (glibc-2.17-196.el7) (on the filesystem used) being passed a 4K buffer for the `fread_unlocked` call and 2 system call reads using a 4096 buffer being used to read the contents of the `OPTIONS` file.\n\n  If the buffer size is increased to 8192 then 1 system call read is used to read the contents.\n\n  As I think the buffer size is just used for reading `OPTIONS` files, and I thought it likely that `OPTIONS` files have increased in size (as more options are added), I thought I would suggest an increase.\n\n[  If the comments from the top of the `OPTIONS` file are removed, and white space from the start of lines is removed then the size can be reduced to be under 4K, but as more options are added the size seems likely to grow again. ]\n\nCreate a new database:\n\n```\n> ./ldb --create_if_missing --db=/tmp/rdb_tmp put 1 1\nOK\n```\n\nThe OPTIONS file is 4252 bytes:\n\n```\n> stat /tmp/rdb_tmp/OPTIONS* | head -n 2\n  File: ‘/tmp/rdb_tmp/OPTIONS-000005’\n  Size: 4252            Blocks: 16         IO Block: 4096   regular file\n```\n\nBefore, the 4096 byte buffer is used from 2 system read calls:\n\n```\n> strace -f ./ldb --try_load_options --db=/tmp/rdb_tmp get DOES_NOT_EXIST 2>&1 |\n    grep -A 1 'RocksDB option file'\nread(3, \"# This is a RocksDB option file.\"..., 4096) = 4096\nread(3, \"e\\n  metadata_block_size=4096\\n  c\"..., 4096) = 156\n```\n\nltrace shows 4096 passed to fread_unlocked\n\n```\n> ltrace -S -f ./ldb --try_load_options --db=/tmp/rdb_tmp get DOES_NOT_EXIST 2>&1 |\n    grep -C 3 'RocksDB option file'\n[pid 51013] fread_unlocked(0x7ffd5fbf2d50, 1, 4096, 0x7fd2e084e780 <unfinished ...>\n[pid 51013] fstat@SYS(3, 0x7ffd5fbf28f0)         = 0\n[pid 51013] mmap@SYS(nil, 4096, 3, 34, -1, 0)    = 0x7fd2e318c000\n[pid 51013] read@SYS(3, \"# This is a RocksDB option file.\"..., 4096) = 4096\n[pid 51013] <... fread_unlocked resumed> )       = 4096\n...\n```\n\nAfter, the 8192 byte buffer is used from 1 system read call:\n\n```\n> strace -f ./ldb --try_load_options --db=/tmp/rdb_tmp get DOES_NOT_EXIST 2>&1 | grep -A 1 'RocksDB option file'\nread(3, \"# This is a RocksDB option file.\"..., 8192) = 4252\nread(3, \"\", 4096)                       = 0\n```\n\nltrace shows 8192 passed to fread_unlocked\n\n```\n> ltrace -S -f ./ldb --try_load_options --db=/tmp/rdb_tmp get DOES_NOT_EXIST 2>&1 | grep -C 3 'RocksDB option file'\n[pid 146611] fread_unlocked(0x7ffcfba382f0, 1, 8192, 0x7fc4e844e780 <unfinished ...>\n[pid 146611] fstat@SYS(3, 0x7ffcfba380f0)        = 0\n[pid 146611] mmap@SYS(nil, 4096, 3, 34, -1, 0)   = 0x7fc4eaee0000\n[pid 146611] read@SYS(3, \"# This is a RocksDB option file.\"..., 8192) = 4252\n[pid 146611] read@SYS(3, \"\", 4096)               = 0\n[pid 146611] <... fread_unlocked resumed> )      = 4252\n[pid 146611] feof(0x7fc4e844e780)                = 1\n```\nCloses https://github.com/facebook/rocksdb/pull/3294\n\nDifferential Revision: D6653684\n\nPulled By: ajkr\n\nfbshipit-source-id: 222f25f5442fefe1dcec18c700bd9e235bb63491",
        "modified_files_count": 1,
        "modified_files": [
            "options/options_parser.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/45828c721536e2145be6f825e563955d39948f02"
    },
    {
        "hash": "0c6e8be9e205d434a29418410155397f2a762e58",
        "author": "Andrew Kryczka",
        "date": "2018-01-10T15:41:46-08:00",
        "message": "Fix directory name for db_basic_test\n\nSummary:\nIt was using the same directory as `db_options_test` so transiently failed when unit tests were run in parallel.\nCloses https://github.com/facebook/rocksdb/pull/3352\n\nDifferential Revision: D6691649\n\nPulled By: ajkr\n\nfbshipit-source-id: bee433484fec4faedd5cadf2db3c92fdcc99a170",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0c6e8be9e205d434a29418410155397f2a762e58"
    },
    {
        "hash": "bafec6bb30c8da09558f1af4278dcbe1defbdfa1",
        "author": "Andrew Kryczka",
        "date": "2018-01-10T12:26:49-08:00",
        "message": "Fix checkpoint_test directory setup/cleanup\n\nSummary:\n- Change directory name from \"db_test\" to \"checkpoint_test\". Previously it used the same directory as `db_test`\n- Systematically cleanup snapshot and snapshot staging directories before each test. Previously a failed test run caused subsequent runs to fail, particularly when the first failure caused \"snapshot.tmp\" to not be cleaned up.\nCloses https://github.com/facebook/rocksdb/pull/3351\n\nDifferential Revision: D6691015\n\nPulled By: ajkr\n\nfbshipit-source-id: 4fc2ac2e21ff2617ea0e96297c5132b5f2eefd79",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/checkpoint/checkpoint_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bafec6bb30c8da09558f1af4278dcbe1defbdfa1"
    },
    {
        "hash": "6aa95f4d0fc904d2865c13f59051576619ca9811",
        "author": "Siying Dong",
        "date": "2018-01-09T14:58:33-08:00",
        "message": "Fix a wrong log formatting\n\nSummary:\nI experienced weird segfault because of this mismatch of type in log formatting. Fix it.\nCloses https://github.com/facebook/rocksdb/pull/3345\n\nDifferential Revision: D6687224\n\nPulled By: siying\n\nfbshipit-source-id: c51fb1c008b7ebc3efdc353a4adad3e8f5b3e9de",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6aa95f4d0fc904d2865c13f59051576619ca9811"
    },
    {
        "hash": "46ec52499eb0bab57f9b649b11ca9161f93ba06b",
        "author": "Yi Wu",
        "date": "2018-01-09T10:57:29-08:00",
        "message": "Fix db_bench write being disabled in lite build\n\nSummary:\nThe macro was added by mistake in #2372\nCloses https://github.com/facebook/rocksdb/pull/3343\n\nDifferential Revision: D6681356\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 4180172fb0eaef4189c07f219241e0c261c03461",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/46ec52499eb0bab57f9b649b11ca9161f93ba06b"
    },
    {
        "hash": "30a017fecae60aa7b87c4a1e283b6ac027724a92",
        "author": "Yi Wu",
        "date": "2018-01-05T16:41:58-08:00",
        "message": "Blob DB: avoid having a separate read of checksum\n\nSummary:\nPreviously on a blob db read, we are making a read of the blob value, and then make another read to get CRC checksum. I'm combining the two read into one.\n\nreadrandom db_bench with 1G database with base db size of 13M, value size 1k:\n`./db_bench --db=/home/yiwu/tmp/db_bench --use_blob_db --value_size=1024 --num=1000000 --benchmarks=readrandom --use_existing_db --cache_size=32000000`\nmaster: throughput 234MB/s, get micros p50 5.984 p95 9.998 p99 20.817 p100 787\nthis PR: throughput 261MB/s, get micros p50 5.157 p95 9.928 p99 20.724 p100 190\nCloses https://github.com/facebook/rocksdb/pull/3301\n\nDifferential Revision: D6615950\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 052410c6d8539ec0cc305d53793bbc8f3616baa3",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/30a017fecae60aa7b87c4a1e283b6ac027724a92"
    },
    {
        "hash": "1c9ada59ccbf000f8abd97a2efbb19ed2008b34c",
        "author": "Maysam Yabandeh",
        "date": "2018-01-04T11:11:45-08:00",
        "message": "Remove assert(s.ok()) from ::DeleteFile\n\nSummary:\nDestroyDB that is used in tests loops over the files returned by ::GetChildren and delete them one by one. Such files might be already deleted in the file system (during DeleteObsoleteFileImpl for example) but will get actually deleted with a delay sometimes before ::DeleteFile is called on the file name. We have some test failures where FaultInjectionTestEnv::DeleteFile fails on assert(s.ok()) during DestroyDB. This patch removes the assert statement to fix that.\nCloses https://github.com/facebook/rocksdb/pull/3324\n\nDifferential Revision: D6659545\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 4c9552fbcd494dcf3e61d475c11fc965c4388b2c",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1c9ada59ccbf000f8abd97a2efbb19ed2008b34c"
    },
    {
        "hash": "f00e176c5b5f87888e49b5cc6042c4285ffe4652",
        "author": "Andrew Kryczka",
        "date": "2017-12-20T16:12:04-08:00",
        "message": "fix ForwardIterator reference to temporary object\n\nSummary:\nFixes the following ASAN error:\n\n```\n==2108042==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7fc50ae9b868 at pc 0x7fc5112aff55 bp 0x7fff9eb9dc10 sp 0x7fff9eb9dc08\n=== How to use this, how to get the raw stack trace, and more: fburl.com/ASAN ===\nREAD of size 8 at 0x7fc50ae9b868 thread T0\nSCARINESS: 23 (8-byte-read-stack-use-after-scope)\n     #0 rocksdb/dbformat.h:164                   rocksdb::InternalKeyComparator::user_comparator() const\n     #1 librocksdb_src_rocksdb_lib.so+0x1429a7d  rocksdb::RangeDelAggregator::InitRep(std::vector<...> const&)\n     #2 librocksdb_src_rocksdb_lib.so+0x142ceae  rocksdb::RangeDelAggregator::AddTombstones(std::unique_ptr<...>)\n     #3 librocksdb_src_rocksdb_lib.so+0x1382d88  rocksdb::ForwardIterator::RebuildIterators(bool)\n     #4 librocksdb_src_rocksdb_lib.so+0x1382362  rocksdb::ForwardIterator::ForwardIterator(rocksdb::DBImpl*, rocksdb::ReadOptions const&, rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*)\n     #5 librocksdb_src_rocksdb_lib.so+0x11f433f  rocksdb::DBImpl::NewIterator(rocksdb::ReadOptions const&, rocksdb::ColumnFamilyHandle*)\n     #6 rocksdb/src/include/rocksdb/db.h:382     rocksdb::DB::NewIterator(rocksdb::ReadOptions const&)\n     #7 rocksdb/db_range_del_test.cc:807         rocksdb::DBRangeDelTest_TailingIteratorRangeTombstoneUnsupported_Test::TestBody()\n    #18 rocksdb/db_range_del_test.cc:1006        main\n\nAddress 0x7fc50ae9b868 is located in stack of thread T0 at offset 104 in frame\n     #0 librocksdb_src_rocksdb_lib.so+0x13825af  rocksdb::ForwardIterator::RebuildIterators(bool)\n```\nCloses https://github.com/facebook/rocksdb/pull/3300\n\nDifferential Revision: D6612989\n\nPulled By: ajkr\n\nfbshipit-source-id: e7ea2ed914c1b80a8a29d71d92440a6bd9cbcc80",
        "modified_files_count": 1,
        "modified_files": [
            "db/forward_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f00e176c5b5f87888e49b5cc6042c4285ffe4652"
    },
    {
        "hash": "0ef3fdd73272c01d6a843cc7a8675187bb40f1ff",
        "author": "Maysam Yabandeh",
        "date": "2017-12-20T08:12:24-08:00",
        "message": "Disable need_log_sync on bg err\n\nSummary:\nWhen there is a background error PreprocessWrite returns without marking the logs synced. If we keep need_log_sync to true, it would try to sync them at the end, which would break the logic. The patch would unset need_log_sync if the logs end up not being marked for sync in PreprocessWrite.\nCloses https://github.com/facebook/rocksdb/pull/3293\n\nDifferential Revision: D6602347\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 37ee04209e8dcfd78de891654ce50d0954abeb38",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ef3fdd73272c01d6a843cc7a8675187bb40f1ff"
    },
    {
        "hash": "58b841b3568aec6f2f7489720135074dd709df7b",
        "author": "Wouter Beek",
        "date": "2017-12-20T08:12:22-08:00",
        "message": "FIXED: string buffers potentially too small to fit formatted write\n\nSummary:\nThis fixes the following warnings when compiled with GCC7:\n\nutil/transaction_test_util.cc: In static member function ‘static rocksdb::Status rocksdb::RandomTransactionInserter::DBGet(rocksdb::DB*, rocksdb::Transaction*, rocksdb::ReadOptions&, uint16_t, uint64_t, bool, uint64_t*, std::__cxx11::string*, bool*)’:\nutil/transaction_test_util.cc:75:8: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]\n Status RandomTransactionInserter::DBGet(\n        ^~~~~~~~~~~~~~~~~~~~~~~~~\nutil/transaction_test_util.cc:84:11: note: ‘snprintf’ output between 5 and 6 bytes into a destination of size 5\n   snprintf(prefix_buf, sizeof(prefix_buf), \"%.4u\", set_i + 1);\n   ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nutil/transaction_test_util.cc: In static member function ‘static rocksdb::Status rocksdb::RandomTransactionInserter::Verify(rocksdb::DB*, uint16_t, uint64_t, bool, rocksdb::Random64*)’:\nutil/transaction_test_util.cc:245:8: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]\n Status RandomTransactionInserter::Verify(DB* db, uint16_t num_sets,\n        ^~~~~~~~~~~~~~~~~~~~~~~~~\nutil/transaction_test_util.cc:268:13: note: ‘snprintf’ output between 5 and 6 bytes into a destination of size 5\n     snprintf(prefix_buf, sizeof(prefix_buf), \"%.4u\", set_i + 1);\n     ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCloses https://github.com/facebook/rocksdb/pull/3295\n\nDifferential Revision: D6609411\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 33f0add471056eb59db2f8bd4366e6dfbb1a187d",
        "modified_files_count": 1,
        "modified_files": [
            "util/transaction_test_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/58b841b3568aec6f2f7489720135074dd709df7b"
    },
    {
        "hash": "e763e1b6239ae498e730ed1acd3a5f75e2c4116c",
        "author": "Yi Wu",
        "date": "2017-12-19T16:57:12-08:00",
        "message": "BlobDB: dump blob db options on open\n\nSummary:\nWe dump blob db options on blob db open, but it was removed by mistake in #3246. Adding it back.\nCloses https://github.com/facebook/rocksdb/pull/3298\n\nDifferential Revision: D6607177\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 2a4aacbfa52fd8f1878dc9e1fbb95fe48faf80c0",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e763e1b6239ae498e730ed1acd3a5f75e2c4116c"
    },
    {
        "hash": "2190e967272ad825b45959a62d3f54911b11b798",
        "author": "Yi Wu",
        "date": "2017-12-18T17:56:47-08:00",
        "message": "Remove incorrect comment\n\nSummary:\nWe actually create individual compaction filter from compaction filter factory per sub-compaction in `CompactionJob::ProcessKeyValueCompaction`: https://github.com/facebook/rocksdb/blob/master/db/compaction_job.cc#L742\nThe comment seems incorrect.\nCloses https://github.com/facebook/rocksdb/pull/3288\n\nDifferential Revision: D6598455\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: a6bc059a9103b87a73ae6ec4bb01ca33f5d48cf5",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/compaction_filter.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2190e967272ad825b45959a62d3f54911b11b798"
    },
    {
        "hash": "78c2eedb4fde8801922ad020061a7503070bf25c",
        "author": "Maysam Yabandeh",
        "date": "2017-12-18T14:27:28-08:00",
        "message": "fix release order in validateNumberOfEntries\n\nSummary:\nScopedArenaIterator should be defined after range_del_agg so that it destructs the assigned iterator, which depends on range_del_agg, before it range_del_agg is already destructed.\nCloses https://github.com/facebook/rocksdb/pull/3281\n\nDifferential Revision: D6592332\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 89a15d8ed13d0fc856b0c47dce3d91778738dbac",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/78c2eedb4fde8801922ad020061a7503070bf25c"
    },
    {
        "hash": "aa6509d8e43f3e741d3b3805eb1dce7bbae32c82",
        "author": "Guo Xiao",
        "date": "2017-12-18T12:28:03-08:00",
        "message": "Fix build for linux\n\nSummary:\n* Include `unistd.h` for `sleep(3)`\n* Include `sys/time.h` for `gettimeofday(3)`\n* Include `utils/random.h` for `Random64`\n\nError messages:\n\nutilities/persistent_cache/hash_table_bench.cc: In constructor ‘rocksdb::HashTableBenchmark::HashTableBenchmark(rocksdb::HashTableImpl<long unsigned int, std::__cxx11::basic_string<char> >*, size_t, size_t, size_t, size_t)’:\nutilities/persistent_cache/hash_table_bench.cc:76:28: error: ‘sleep’ was not declared in this scope\n       /* sleep override */ sleep(1);\n                            ^~~~~\nutilities/persistent_cache/hash_table_bench.cc:76:28: note: suggested alternative: ‘strsep’\n       /* sleep override */ sleep(1);\n                            ^~~~~\n                            strsep\nutilities/persistent_cache/hash_table_bench.cc: In member function ‘void rocksdb::HashTableBenchmark::RunRead()’:\nutilities/persistent_cache/hash_table_bench.cc:107:5: error: ‘Random64’ was not declared in this scope\n     Random64 rgen(time(nullptr));\n     ^~~~~~~~\nutilities/persistent_cache/hash_table_bench.cc:107:5: note: suggested alternative: ‘random_r’\n     Random64 rgen(time(nullptr));\n     ^~~~~~~~\n     random_r\nutilities/persistent_cache/hash_table_bench.cc:110:18: error: ‘rgen’ was not declared in this scope\n       size_t k = rgen.Next() % max_prepop_key;\n                  ^~~~\nutilities/persistent_cache/hash_table_bench.cc: In static member function ‘static uint64_t rocksdb::HashTableBenchmark::NowInMillSec()’:\nutilities/persistent_cache/hash_table_bench.cc:153:5: error: ‘gettimeofday’ was not declared in this scope\n     gettimeofday(&tv, /*tz=*/nullptr);\n     ^~~~~~~~~~~~\nmake[2]: *** [CMakeFiles/hash_table_bench.dir/build.make:63: CMakeFiles/hash_table_bench.dir/utilities/persistent_cache/hash_table_bench.cc.o] Error 1\nmake[1]: *** [CMakeFiles/Makefile2:3346: CMakeFiles/hash_table_bench.dir/all] Error 2\nmake[1]: *** Waiting for unfinished jobs....\nCloses https://github.com/facebook/rocksdb/pull/3283\n\nDifferential Revision: D6594850\n\nPulled By: ajkr\n\nfbshipit-source-id: fd83957338c210cdfd253763347aafd39476824f",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/persistent_cache/hash_table_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aa6509d8e43f3e741d3b3805eb1dce7bbae32c82"
    },
    {
        "hash": "95583e1532118b070cfcc548b09007f2368d5eb1",
        "author": "Maysam Yabandeh",
        "date": "2017-12-15T16:28:04-08:00",
        "message": "db_stress: skip snapshot check if cf is dropped\n\nSummary:\nWe added a new verification that ensures a value that snapshot reads when is released is the same as when it was created. This test however fails when the cf is dropped in between. The patch skips the tests if that was the case.\nCloses https://github.com/facebook/rocksdb/pull/3279\n\nDifferential Revision: D6581584\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: afe37d371c0f91818d2e279b3949b810e112e8eb",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/95583e1532118b070cfcc548b09007f2368d5eb1"
    },
    {
        "hash": "a79c7c05e8f3e5b1051ec2a32b9a7220b6e41cc8",
        "author": "Andrew Kryczka",
        "date": "2017-12-15T12:29:16-08:00",
        "message": "fix backup meta-file buffer overrun\n\nSummary:\n- check most times after calling snprintf that the buffer didn't fill up. Previously we'd proceed and use `buf_size - len` as the length in subsequent calls, which underflowed as those are unsigned size_t.\n- replace some memcpys with snprintf for consistency\nCloses https://github.com/facebook/rocksdb/pull/3255\n\nDifferential Revision: D6541464\n\nPulled By: ajkr\n\nfbshipit-source-id: 8610ea6a24f38e0a37c6d17bc65b7c712da6d932",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a79c7c05e8f3e5b1051ec2a32b9a7220b6e41cc8"
    },
    {
        "hash": "cd2e5cae7f134aae9ded3403e7f4ed5f1a23abd7",
        "author": "Maysam Yabandeh",
        "date": "2017-12-13T11:57:29-08:00",
        "message": "WritePrepared Txn: make db_stress transactional\n\nSummary:\nAdd \"--use_txn\" option to use transactional API in db_stress, default being WRITE_PREPARED policy, which is the main intention of modifying db_stress. It also extend the existing snapshots to verify that before releasing a snapshot a read from it returns the same value as before.\nCloses https://github.com/facebook/rocksdb/pull/3243\n\nDifferential Revision: D6556912\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 1ae31465be362d44bd06e635e2e9e49a1da11268",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cd2e5cae7f134aae9ded3403e7f4ed5f1a23abd7"
    },
    {
        "hash": "546a63272fe77ffdf91f230283fd248af14798f9",
        "author": "Maysam Yabandeh",
        "date": "2017-12-13T07:57:44-08:00",
        "message": "disableWAL with WriteImplWALOnly\n\nSummary:\nCurrently WriteImplWALOnly simply returns when disableWAL is set. This is an incorrect behavior since it does not allocated the sequence number, which is a side-effect of writing to the WAL. This patch fixes the issue.\nCloses https://github.com/facebook/rocksdb/pull/3262\n\nDifferential Revision: D6550974\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 745a83ae8f04e7ca6c8ffb247d6ef16c287c52e7",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/546a63272fe77ffdf91f230283fd248af14798f9"
    },
    {
        "hash": "7393ef779c2d430d93fabb8c82e0c375f24bc46e",
        "author": "Yi Wu",
        "date": "2017-12-12T12:12:38-08:00",
        "message": "Fix BlockFetcher ASAN error\n\nSummary:\nSome call sites of BlockFetcher create temporary ReadOptions and pass to BlockFetcher. The temporary object will be gone after BlockFetcher construction but BlockFetcher keep its reference, causing stack-use-after-scope. Fixing it.\nCloses https://github.com/facebook/rocksdb/pull/3258\n\nDifferential Revision: D6547152\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 6b49e9dd46bb72307f5d8f88ea15faacff35b9bc",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_fetcher.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7393ef779c2d430d93fabb8c82e0c375f24bc46e"
    },
    {
        "hash": "4bcb7fb148a8d80ccedbd7447b2361481a42676a",
        "author": "Souvik Banerjee",
        "date": "2017-12-12T12:12:38-08:00",
        "message": "Update transaction_test_util.cc\n\nSummary:\nFixes a compile error on gcc 7.2.1 (-Werror=format-truncation=).\nCloses https://github.com/facebook/rocksdb/pull/3248\n\nDifferential Revision: D6546515\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: bd78cca63f2af376faceccb1838d2d4cc9208fef",
        "modified_files_count": 1,
        "modified_files": [
            "util/transaction_test_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4bcb7fb148a8d80ccedbd7447b2361481a42676a"
    },
    {
        "hash": "e3a06f12d27fd50af7b6c5941973f529601f9a3e",
        "author": "Yi Wu",
        "date": "2017-12-12T11:12:24-08:00",
        "message": "WritePrepared Txn: fix compaction filter snapshot checks\n\nSummary:\nAdd snapshot_checker check whenever we need to check sequence against snapshots and decide what to do with an input key. The changes are related to one of:\n* compaction filter\n* single delete\n* delete at bottom level\n* merge\nCloses https://github.com/facebook/rocksdb/pull/3251\n\nDifferential Revision: D6537850\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 3faba40ed5e37779f4a0cb7ae78af9546659c7f2",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e3a06f12d27fd50af7b6c5941973f529601f9a3e"
    },
    {
        "hash": "a9c8d4ef15ed22196260ecf6326a5d3b5a5cbbe8",
        "author": "Siying Dong",
        "date": "2017-12-11T18:27:28-08:00",
        "message": "Fix memory issue introduced by 2f1a3a4d748ea92c282a1302b1523adc6d67ce81\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3256\n\nDifferential Revision: D6541714\n\nPulled By: siying\n\nfbshipit-source-id: 40efd89b68587a9d58cfe6f4eebd771c2d9f1542",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a9c8d4ef15ed22196260ecf6326a5d3b5a5cbbe8"
    },
    {
        "hash": "bb5ed4b1d1b5fd891f857247496eb9bfc333a6ac",
        "author": "Zhongyi Xie",
        "date": "2017-12-11T16:28:20-08:00",
        "message": "exclude DynamicUniversalCompactionOptions from ROCKSDB_LITE\n\nSummary:\nsince [SetOptions](https://github.com/facebook/rocksdb/blob/master/db/db_impl.cc#L494) is not supported in ROCKSDB_LITE\nRight now unit test under lite is broken\nCloses https://github.com/facebook/rocksdb/pull/3253\n\nDifferential Revision: D6539428\n\nPulled By: miasantreble\n\nfbshipit-source-id: 13172b8ecbd75682330726498ea198969bc3e637",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bb5ed4b1d1b5fd891f857247496eb9bfc333a6ac"
    },
    {
        "hash": "9a27ac5d893d588354963f6c4b37fa138343f0b8",
        "author": "Yi Wu",
        "date": "2017-12-11T13:57:48-08:00",
        "message": "Fix drop column family data race\n\nSummary:\nA data race is caught by tsan_crash test between compaction and DropColumnFamily:\nhttps://gist.github.com/yiwu-arbug/5a2b4baae05eeb99ae1719b650f30a44 Compaction checks if the column family has been dropped on each key input, while user can issue DropColumnFamily which updates cfd->dropped_, causing the data race. Fixing it by making cfd->dropped_ an atomic.\nCloses https://github.com/facebook/rocksdb/pull/3250\n\nDifferential Revision: D6535991\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 5571df020beae7fa7db6fff5ad0d598f49962895",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9a27ac5d893d588354963f6c4b37fa138343f0b8"
    },
    {
        "hash": "2e3a00987e75fdbfea2a06991b83d9bcf5742908",
        "author": "Andrew Kryczka",
        "date": "2017-12-07T11:12:43-08:00",
        "message": "fix ASAN for DeleteFilesInRange test case\n\nSummary:\nerror message was\n\n```\n==3095==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffd18216c40 at pc 0x0000005edda1 bp 0x7ffd18215550 sp 0x7ffd18214d00\n...\nAddress 0x7ffd18216c40 is located in stack of thread T0 at offset 1952 in frame\n     #0 internal_repo_rocksdb/db_compaction_test.cc:1520 rocksdb::DBCompactionTest_DeleteFileRangeFileEndpointsOverlapBug_Test::TestBody()\n```\n\nIt was unsafe to have slices referring to the temporary string objects' buffers, as those strings were destroyed before the slices were used. Fixed it by assigning the strings returned by `Key()` to local variables.\nCloses https://github.com/facebook/rocksdb/pull/3238\n\nDifferential Revision: D6507864\n\nPulled By: ajkr\n\nfbshipit-source-id: dd07de1a0070c6748c1ab4f3d7bd31f9a81889d0",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2e3a00987e75fdbfea2a06991b83d9bcf5742908"
    },
    {
        "hash": "e1c569c324e48fb48a4091ba2209330f05e13f20",
        "author": "Yi Wu",
        "date": "2017-12-06T22:58:46-08:00",
        "message": "Fix clang-analyzer false-positive on ldb_cmd.cc\n\nSummary:\nclang-analyzer complaint about db_ being nullptr, but it couldn't be because it checks exec_stats before proceed. Add an assert to get around the false-positive.\n\nTest Plan\n`make analyze`\nCloses https://github.com/facebook/rocksdb/pull/3236\n\nDifferential Revision: D6505417\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: e5b65764ea994dd9e4bab3e697b97dc70dc22cab",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e1c569c324e48fb48a4091ba2209330f05e13f20"
    },
    {
        "hash": "d51fcb21f4e0c5b46cb93c16b1a799c04147a5e4",
        "author": "Sagar Vemuri",
        "date": "2017-12-06T20:44:12-08:00",
        "message": "Blob DB: Add db_bench options\n\nSummary:\nAdding more BlobDB db_bench options which are needed for benchmarking.\nCloses https://github.com/facebook/rocksdb/pull/3230\n\nDifferential Revision: D6500711\n\nPulled By: sagar0\n\nfbshipit-source-id: 91d63122905854ef7c9148a0235568719146e6c5",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d51fcb21f4e0c5b46cb93c16b1a799c04147a5e4"
    },
    {
        "hash": "a7d32776f08f4e04d8cb9837491d0da359459343",
        "author": "Yi Wu",
        "date": "2017-12-06T17:12:27-08:00",
        "message": "Fix write_callback_test compile error\n\nSummary:\nRename shadow variable name db_impl.\n\nFixing #3227\nCloses https://github.com/facebook/rocksdb/pull/3235\n\nDifferential Revision: D6504051\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 186c9378dabb11f8d6db56f45c95cc3b029fcb88",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_callback_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a7d32776f08f4e04d8cb9837491d0da359459343"
    },
    {
        "hash": "7f04af32a5cff78a9aa773c010b344616a4c0b5a",
        "author": "Yi Wu",
        "date": "2017-12-06T16:42:26-08:00",
        "message": "ldb to allow db with --try_load_options and without an options file\n\nSummary:\nThis is to fix tools/check_format_compatible.sh. The tool try to open\nold versions of rocksdb with the provided options file. When options\nfile is missing (e.g. rocksdb 2.2), it should still proceed with default\noptions.\nCloses https://github.com/facebook/rocksdb/pull/3232\n\nDifferential Revision: D6503955\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: e44cfcce7ddc7d12cf83466ed3f3fe7624aa78b8",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7f04af32a5cff78a9aa773c010b344616a4c0b5a"
    },
    {
        "hash": "4634c735a8bb4f83b8099928fb12b50ad8df7b88",
        "author": "Alex Robinson",
        "date": "2017-12-04T01:56:15-08:00",
        "message": "Update DBOptions::IncreaseParallelism to use newer background settings\n\nSummary:\nThe Options header file recommends using max_background_jobs rather than\ndirectly setting max_background_compactions or max_background_flushes.\n\nI've personally seen a performance problem where stalls were happening\nbecause the one background flushing thread was blocked that was fixed\nby this change -\nhttps://github.com/cockroachdb/cockroach/issues/19699#issuecomment-347672485\nCloses https://github.com/facebook/rocksdb/pull/3208\n\nDifferential Revision: D6473178\n\nPulled By: ajkr\n\nfbshipit-source-id: 67c892ceb7b1909d251492640cb15a0f2262b7ed",
        "modified_files_count": 1,
        "modified_files": [
            "options/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4634c735a8bb4f83b8099928fb12b50ad8df7b88"
    },
    {
        "hash": "ed3af9ef9957866300c144cd9e60a60e2a490583",
        "author": "Andrew Kryczka",
        "date": "2017-11-28T17:28:58-08:00",
        "message": "improve ldb CLI option support\n\nSummary:\n- Made CLI arguments take precedence over options file when both are provided. Note some of the CLI args are not settable via options file, like `--compression_max_dict_bytes`, so it's necessary to allow both ways of providing options simultaneously.\n- Changed `PrepareOptionsForOpenDB` to update the proper `ColumnFamilyOptions` if one exists for the user's `--column_family_name` argument. I supported this only in the base class, `LDBCommand`, so it works for the general arguments. Will defer adding support for subcommand-specific arguments.\n- Made the command fail if `--try_load_options` is provided and loading options file returns NotFound. I found the previous behavior of silently continuing confusing.\nCloses https://github.com/facebook/rocksdb/pull/3144\n\nDifferential Revision: D6270544\n\nPulled By: ajkr\n\nfbshipit-source-id: 7c2eac9f9b38720523d74466fb9e78db53561367",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ed3af9ef9957866300c144cd9e60a60e2a490583"
    },
    {
        "hash": "c85f8ccca39a571e58f3cfd379c3147730be5b9f",
        "author": "Andrew Kryczka",
        "date": "2017-11-28T17:28:58-08:00",
        "message": "convert null terminator in ascii dump\n\nSummary:\nThe ASCII output is almost always useless to me as the first '\\0' byte in the key or value causes it to stop printing. Since all characters are already surrounded by spaces, \"\\ 0\" (how we display a backslash followed by a zero) and \"\\0\" (how this PR displays a null terminator) are distinguishable. My assumption is the value of seeing all the bytes outweighs the value of the alignment we had before, where we always had one character followed by one space.\nCloses https://github.com/facebook/rocksdb/pull/3203\n\nDifferential Revision: D6428651\n\nPulled By: ajkr\n\nfbshipit-source-id: aafc978a51e9ea029cfe3e763e2bb0e1751b9ccf",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c85f8ccca39a571e58f3cfd379c3147730be5b9f"
    },
    {
        "hash": "c1ed005a2196c0ccf830cfbd3a6b12e63e81cfc0",
        "author": "Prashant D",
        "date": "2017-11-28T15:27:41-08:00",
        "message": "tools: Fix coverity issues\n\nSummary:\ntools/ldb_cmd.cc:\n```\n310  ignore_unknown_options_ = IsFlagPresent(flags, ARG_IGNORE_UNKNOWN_OPTIONS);\n\nCID 1322798 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR)\n5. uninit_member: Non-static class member db_ttl_ is not initialized in this constructor nor in any functions that it calls.\n311}\n```\nCloses https://github.com/facebook/rocksdb/pull/3122\n\nDifferential Revision: D6428576\n\nPulled By: sagar0\n\nfbshipit-source-id: d77f04dd201f7f1d9f59ef88a215ee7ad7b934e9",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c1ed005a2196c0ccf830cfbd3a6b12e63e81cfc0"
    },
    {
        "hash": "81cf262ff51e9059e27740ad4b9c82f00103d049",
        "author": "Prashant D",
        "date": "2017-11-28T14:43:28-08:00",
        "message": "utilities/backupable : Fix coverity issues\n\nSummary:\n1. Class BackupMeta\n```\n52      : timestamp_(0), size_(0), meta_filename_(meta_filename),\n\nCID 1168103 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR)\n2. uninit_member: Non-static class member sequence_number_ is not initialized in this constructor nor in any functions that it calls.\n153        file_infos_(file_infos), env_(env) {}\n```\n2. class BackupEngineImpl\n```\n513  }\n        7. uninit_member: Non-static class member latest_backup_id_ is not initialized in this constructor nor in any functions that it calls.\n\nCID 1322803 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR)\n9. uninit_member: Non-static class member latest_valid_backup_id_ is not initialized in this constructor nor in any functions that it calls.\n514}\n```\n3. struct BackupAfterCopyOrCreateWorkItem\n```\n368  struct BackupAfterCopyOrCreateWorkItem {\n369    std::future<CopyOrCreateResult> result;\n        1. member_decl: Class member declaration for shared.\n370    bool shared;\n        3. member_decl: Class member declaration for needed_to_copy.\n371    bool needed_to_copy;\n        5. member_decl: Class member declaration for backup_env.\n372    Env* backup_env;\n373    std::string dst_path_tmp;\n374    std::string dst_path;\n375    std::string dst_relative;\n        2. uninit_member: Non-static class member shared is not initialized in this constructor nor in any functions that it calls.\n        4. uninit_member: Non-static class member needed_to_copy is not initialized in this constructor nor in any functions that it calls.\n\nCID 1396122 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR)\n6. uninit_member: Non-static class member backup_env is not initialized in this constructor nor in any functions that it calls.\n376    BackupAfterCopyOrCreateWorkItem() {}\n```\n4. struct CopyOrCreateWorkItem\n```\n318  struct CopyOrCreateWorkItem {\n319    std::string src_path;\n320    std::string dst_path;\n321    std::string contents;\n        1. member_decl: Class member declaration for src_env.\n322    Env* src_env;\n        3. member_decl: Class member declaration for dst_env.\n323    Env* dst_env;\n        5. member_decl: Class member declaration for sync.\n324    bool sync;\n        7. member_decl: Class member declaration for rate_limiter.\n325    RateLimiter* rate_limiter;\n        9. member_decl: Class member declaration for size_limit.\n326    uint64_t size_limit;\n327    std::promise<CopyOrCreateResult> result;\n328    std::function<void()> progress_callback;\n329\n        2. uninit_member: Non-static class member src_env is not initialized in this constructor nor in any functions that it calls.\n        4. uninit_member: Non-static class member dst_env is not initialized in this constructor nor in any functions that it calls.\n        6. uninit_member: Non-static class member sync is not initialized in this constructor nor in any functions that it calls.\n        8. uninit_member: Non-static class member rate_limiter is not initialized in this constructor nor in any functions that it calls.\n\nCID 1396123 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR)\n10. uninit_member: Non-static class member size_limit is not initialized in this constructor nor in any functions that it calls.\n330    CopyOrCreateWorkItem() {}\n```\n5. struct RestoreAfterCopyOrCreateWorkItem\n```\nstruct RestoreAfterCopyOrCreateWorkItem {\n410    std::future<CopyOrCreateResult> result;\n        1. member_decl: Class member declaration for checksum_value.\n411    uint32_t checksum_value;\n\nCID 1396153 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR)\n2. uninit_member: Non-static class member checksum_value is not initialized in this constructor nor in any functions that it calls.\n412    RestoreAfterCopyOrCreateWorkItem() {}\n```\nCloses https://github.com/facebook/rocksdb/pull/3131\n\nDifferential Revision: D6428556\n\nPulled By: sagar0\n\nfbshipit-source-id: a86675444543eff028e3cae6942197a143a112c4",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/81cf262ff51e9059e27740ad4b9c82f00103d049"
    },
    {
        "hash": "022c598abb87668572eb0c3ac7e9fc41dd856bbb",
        "author": "Jeffrey Dallatezza",
        "date": "2017-11-28T11:27:02-08:00",
        "message": "Fix minor typo in comment\n\nSummary:\nmean -> meant\nCloses https://github.com/facebook/rocksdb/pull/3202\n\nDifferential Revision: D6426443\n\nPulled By: sagar0\n\nfbshipit-source-id: adaf07218580ee6903986fa5686de92f43f420e1",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/listener.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/022c598abb87668572eb0c3ac7e9fc41dd856bbb"
    },
    {
        "hash": "f0dde49cda71f61ccf36f3fc19428cc9bf930e13",
        "author": "Yi Wu",
        "date": "2017-11-24T11:56:47-08:00",
        "message": "Blob DB: Fix GC handling for inlined blob\n\nSummary:\nGarbage collection checks if the offset in blob index matches the offset of the blob value in the file. If it is a mismatch, the value is the current version. However it failed to check if the blob index is an inlined type, which don't even have an offset. Fixing it.\nCloses https://github.com/facebook/rocksdb/pull/3194\n\nDifferential Revision: D6394270\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 7c2b9d795f1116f55f4d728086980f9b6e88ea78",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f0dde49cda71f61ccf36f3fc19428cc9bf930e13"
    },
    {
        "hash": "e59cb2a19b2971707d75552ae517586ca0785a6a",
        "author": "Maysam Yabandeh",
        "date": "2017-11-22T13:56:44-08:00",
        "message": "Add seq_per_batch to WriteWithCallbackTest\n\nSummary:\nAugment WriteWithCallbackTest to also test when seq_per_batch is true.\nCloses https://github.com/facebook/rocksdb/pull/3195\n\nDifferential Revision: D6398143\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 7bc4218609355ec20fed25df426a8455ec2390d3",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_callback_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e59cb2a19b2971707d75552ae517586ca0785a6a"
    },
    {
        "hash": "5fac4729ccaa72ff5500c525e7ff014523182588",
        "author": "Zhongyi Xie",
        "date": "2017-11-21T20:11:38-08:00",
        "message": "make compaction_readahead_size_ thread safe\n\nSummary:\nthis should fix the failing tsan_check\nCloses https://github.com/facebook/rocksdb/pull/3192\n\nDifferential Revision: D6390004\n\nPulled By: miasantreble\n\nfbshipit-source-id: 6cadfc6f68febb1a77b0abcdb5416570dad926a5",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test_util.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5fac4729ccaa72ff5500c525e7ff014523182588"
    },
    {
        "hash": "8954f830a0a870a8a79c1ce2025d796b962bbf26",
        "author": "Sagar Vemuri",
        "date": "2017-11-20T23:26:15-08:00",
        "message": "Blob DB: db_bench flag to control BlobDB's garbage collection\n\nSummary:\nflag: blob_db_enable_gc, to control BlobDb's enable_garbage_collection.\nCloses https://github.com/facebook/rocksdb/pull/3190\n\nDifferential Revision: D6383395\n\nPulled By: sagar0\n\nfbshipit-source-id: 4134e835150748c425b8187264273a54c6d8381c",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8954f830a0a870a8a79c1ce2025d796b962bbf26"
    },
    {
        "hash": "e27f60b1c867b0b60dbff26d7a35777e6bb9f14b",
        "author": "Andrew Kryczka",
        "date": "2017-11-15T19:41:59-08:00",
        "message": "distinguish kZSTDNotFinalCompression in compression string\n\nSummary:\nThis confused some users who were getting compression type from the logs.\nCloses https://github.com/facebook/rocksdb/pull/3153\n\nDifferential Revision: D6294964\n\nPulled By: ajkr\n\nfbshipit-source-id: 3c813376d33682dc6ccafc9a78df1a2e2528985e",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e27f60b1c867b0b60dbff26d7a35777e6bb9f14b"
    },
    {
        "hash": "175d5d6a9e7c6138e678429618759504f7f7e6e4",
        "author": "Maysam Yabandeh",
        "date": "2017-11-14T08:56:50-08:00",
        "message": "Properly destruct rebuilding_trx_\n\nSummary:\nWhen testing rebuilding_trx_ in MemTableInserter might still be set before the tests finishes which would cause ASAN alarms for leaks. This patch deletes the pointers in MemTableInserter destructor.\nCloses https://github.com/facebook/rocksdb/pull/3162\n\nDifferential Revision: D6317113\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: a68be70709a4fff7ac2b768660119311968f9c21",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/175d5d6a9e7c6138e678429618759504f7f7e6e4"
    },
    {
        "hash": "5e9e5a4702d121e65c547b2e0ed1321e09462494",
        "author": "Yi Wu",
        "date": "2017-11-08T19:42:22-08:00",
        "message": "Blob DB: Fix race condition between flush and write\n\nSummary:\nA race condition will happen when:\n* a user thread writes a value, but it hits the write stop condition because there are too many un-flushed memtables, while holding blob_db_impl.write_mutex_.\n* Flush is triggered and call flush begin listener and try to acquire blob_db_impl.write_mutex_.\n\nFixing it.\nCloses https://github.com/facebook/rocksdb/pull/3149\n\nDifferential Revision: D6279805\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 0e3c58afb78795ebe3360a2c69e05651e3908c40",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5e9e5a4702d121e65c547b2e0ed1321e09462494"
    },
    {
        "hash": "ca75f0a64a0d2aa0fb8517d6827b5e1d639e64f3",
        "author": "Yi Wu",
        "date": "2017-11-08T13:14:20-08:00",
        "message": "Blob DB: Fix release build\n\nSummary:\n`compression` shadow the method name in `BlobFile`. Rename it.\nCloses https://github.com/facebook/rocksdb/pull/3148\n\nDifferential Revision: D6274498\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 7d293596530998b23b6b8a8940f983f9b6343a98",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_file.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ca75f0a64a0d2aa0fb8517d6827b5e1d639e64f3"
    },
    {
        "hash": "114896c4e0411adf64da8fca8429a955550ff0ae",
        "author": "Andrew Kryczka",
        "date": "2017-11-07T14:00:03-08:00",
        "message": "db_bench compression options\n\nSummary:\n- moved existing compression options to `InitializeOptionsGeneral` since they cannot be set through options file\n- added flag for `zstd_max_train_bytes` which was recently introduced by #3057\nCloses https://github.com/facebook/rocksdb/pull/3128\n\nDifferential Revision: D6240460\n\nPulled By: ajkr\n\nfbshipit-source-id: 27dbebd86a55de237ba6a45cc79cff9214e82ebc",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/114896c4e0411adf64da8fca8429a955550ff0ae"
    },
    {
        "hash": "65c95d9c598414745d91eab3c02d2bd658282cda",
        "author": "Andrew Kryczka",
        "date": "2017-11-07T10:57:24-08:00",
        "message": "support db_bench compact benchmark on bottommost files\n\nSummary:\nWithout this option, running the compact benchmark on a DB containing only bottommost files simply returned immediately.\nCloses https://github.com/facebook/rocksdb/pull/3138\n\nDifferential Revision: D6256660\n\nPulled By: ajkr\n\nfbshipit-source-id: e3b64543acd503d821066f4200daa201d4fb3a9d",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/65c95d9c598414745d91eab3c02d2bd658282cda"
    },
    {
        "hash": "a6d8e30c05ac1a2cd4bfa9aa7d95a498b02b354c",
        "author": "Sagar Vemuri",
        "date": "2017-11-03T14:42:08-07:00",
        "message": "Remove unnecessary status check in TableCache::NewIterator\n\nSummary:\nWhile investigating the usage of `new_table_iterator_nanos` perf counter, I saw some code was wrapper around with unnecessary status check ... so removed it.\nCloses https://github.com/facebook/rocksdb/pull/3120\n\nDifferential Revision: D6229181\n\nPulled By: sagar0\n\nfbshipit-source-id: f8a44fe67f5a05df94553fdb233b21e54e88cc34",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a6d8e30c05ac1a2cd4bfa9aa7d95a498b02b354c"
    },
    {
        "hash": "cfb120f7371da3ae4e1c64fbb383eb96c5426233",
        "author": "Andrew Kryczka",
        "date": "2017-11-03T11:57:10-07:00",
        "message": "fix CopyFile status checks\n\nSummary:\ncopied from internal diff D6156261\nCloses https://github.com/facebook/rocksdb/pull/3124\n\nDifferential Revision: D6230167\n\nPulled By: ajkr\n\nfbshipit-source-id: 17926bb1152d607556364e3aacfec0ef3c115748",
        "modified_files_count": 1,
        "modified_files": [
            "util/file_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cfb120f7371da3ae4e1c64fbb383eb96c5426233"
    },
    {
        "hash": "d95616956355921d3535d6e4c59f27264a5f8b30",
        "author": "Yi Wu",
        "date": "2017-11-03T11:26:54-07:00",
        "message": "Fix clang build error\n\nSummary:\nFix cast from size_t to unsigned int.\nCloses https://github.com/facebook/rocksdb/pull/3125\n\nDifferential Revision: D6232863\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 4c6131168b1faec26f7820b2cf4a09c242d323b7",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d95616956355921d3535d6e4c59f27264a5f8b30"
    },
    {
        "hash": "2581c0a5a18dda0fe15055db6f8bace4546c8483",
        "author": "Yi Wu",
        "date": "2017-11-03T10:26:59-07:00",
        "message": "Blob DB: Fix BlobDBTest::SnapshotAndGarbageCollection asan failure\n\nSummary:\nFix unreleased snapshot at the end of the test.\nCloses https://github.com/facebook/rocksdb/pull/3126\n\nDifferential Revision: D6232867\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 651ca3144fc573ea2ab0ab20f0a752fb4a101d26",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2581c0a5a18dda0fe15055db6f8bace4546c8483"
    },
    {
        "hash": "30e4e01e051ceb3ddfb418e98db9783efc25210c",
        "author": "Zhongyi Xie",
        "date": "2017-11-02T22:28:06-07:00",
        "message": "add missing else\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3121\n\nDifferential Revision: D6229415\n\nPulled By: miasantreble\n\nfbshipit-source-id: 57c7ad2fddf5dd6b8d7e3aaf6f62348151327dfb",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/30e4e01e051ceb3ddfb418e98db9783efc25210c"
    },
    {
        "hash": "3c208e761657829afd174240bcac47c8ccfad71f",
        "author": "Prashant D",
        "date": "2017-11-02T11:41:50-07:00",
        "message": "HistogramStat: Handle divide by zero situation\n\nSummary:\nThe num() might return cur_num as 0 and we are making sure that\ncur_num will not be 0 down the path. The mult variable is being set to\n100.0/cur_num which makes program crash when cur_num is 0.\nCloses https://github.com/facebook/rocksdb/pull/3105\n\nDifferential Revision: D6222594\n\nPulled By: ajkr\n\nfbshipit-source-id: 986154709897ff4dbbeb0e8aa81eb8c0b2a2db76",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/histogram.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3c208e761657829afd174240bcac47c8ccfad71f"
    },
    {
        "hash": "25fbd9a99666e5e5ecd842bdfd7154f8d9839485",
        "author": "Maysam Yabandeh",
        "date": "2017-11-02T11:14:30-07:00",
        "message": "Remove the experimental notes about partitioning\n\nSummary:\nThis patch will remove the existing comments that declare partitioning indexes and filters as experimental.\nCloses https://github.com/facebook/rocksdb/pull/3115\n\nDifferential Revision: D6222227\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 6179ec43b22c518494051b674d91c9e1b54d4ac0",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/table.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/25fbd9a99666e5e5ecd842bdfd7154f8d9839485"
    },
    {
        "hash": "c1cf94c7877ee11ed6ec5baae178691d3b10ace1",
        "author": "Maysam Yabandeh",
        "date": "2017-11-01T08:56:57-07:00",
        "message": "WritePrepared Txn: sort indexes before batch collapse\n\nSummary:\nThe collapse of duplicate keys in write batch needs to sort the indexes of duplicate keys since it only checks the index in the batch with the head of the list of duplicate keys.\nCloses https://github.com/facebook/rocksdb/pull/3093\n\nDifferential Revision: D6186800\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: abc9ae8c2f1840445a5584f925cf86ecc6f37154",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/write_batch_with_index/write_batch_with_index.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c1cf94c7877ee11ed6ec5baae178691d3b10ace1"
    },
    {
        "hash": "c1be8d86c6a802b4b9bd8b15f336f582370ed6cd",
        "author": "Prashant D",
        "date": "2017-10-31T01:26:13-07:00",
        "message": "Fix removed structurally dead return statement\n\nSummary:\nThere seems to be a typo mistake in env ReuseWritableFile func\nwhere status is being returned twice.\nCloses https://github.com/facebook/rocksdb/pull/3099\n\nDifferential Revision: D6196204\n\nPulled By: ajkr\n\nfbshipit-source-id: abb6e3e1c1e772dd485fc39e7f1b9d502fa188fe",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c1be8d86c6a802b4b9bd8b15f336f582370ed6cd"
    },
    {
        "hash": "4d43c6a6a43c8d4f0c5dd3ba300020bf370ec291",
        "author": "Andrew Kryczka",
        "date": "2017-10-31T01:26:08-07:00",
        "message": "db_stress snapshot compatibility with reopens\n\nSummary:\n- Release all snapshots before crashing and reopening the DB. Without this, we may attempt to release snapshots from an old DB using a new DB. That tripped an assertion.\n- Release multiple snapshots in the same operation if needed. Without this, we would sometimes leak snapshots.\nCloses https://github.com/facebook/rocksdb/pull/3098\n\nDifferential Revision: D6194923\n\nPulled By: ajkr\n\nfbshipit-source-id: b9c89bcca7ebcbb6c7802c616f9d1175a005aadf",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4d43c6a6a43c8d4f0c5dd3ba300020bf370ec291"
    },
    {
        "hash": "b7bc9cc0384209738066fa41d778228c3332510f",
        "author": "Andrew Kryczka",
        "date": "2017-10-30T00:55:58-07:00",
        "message": "fix tracking oldest snapshot for bottom-level compaction\n\nSummary:\nThe assertion was caught by `MySQLStyleTransactionTest/MySQLStyleTransactionTest.TransactionStressTest/5` when run in a loop. The caller doesn't track whether the released snapshot is oldest, so let this function handle that case.\nCloses https://github.com/facebook/rocksdb/pull/3080\n\nDifferential Revision: D6185257\n\nPulled By: ajkr\n\nfbshipit-source-id: 4b3015c11db5d31e46521a00af568546ef4558cd",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b7bc9cc0384209738066fa41d778228c3332510f"
    },
    {
        "hash": "6a9335dbbb3ecc87fb1cb8701be39b3ec16beb20",
        "author": "Andrew Kryczka",
        "date": "2017-10-27T15:56:35-07:00",
        "message": "always drop tombstones compacted to bottommost level\n\nSummary:\nProblem was in bottommost compaction, when an L0->L0 compaction happened and L0 was bottommost. Then we'd preserve tombstones according to `Compaction::KeyNotExistsBeyondOutputLevel`, while zeroing seqnum according to `CompactionIterator::PrepareOutput`, thus triggering the assertion in `PrepareOutput`. To fix, we can just drop tombstones in L0->L0 when the output is \"bottommost\", i.e., the compaction includes the oldest L0 file and there's nothing at lower levels.\nCloses https://github.com/facebook/rocksdb/pull/3085\n\nDifferential Revision: D6175742\n\nPulled By: ajkr\n\nfbshipit-source-id: 8ab19a2e001496f362e9eb0a71757e2f6ecfdb3b",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6a9335dbbb3ecc87fb1cb8701be39b3ec16beb20"
    },
    {
        "hash": "d9240b548cbca225ff9c4b0a671e296f5e2c8860",
        "author": "Prashant D",
        "date": "2017-10-27T11:26:43-07:00",
        "message": "Fix coverity uninitialized fields warnings in lru_cache\n\nSummary:\nCoverity uninitialized member variable warnings in lru_cache\nCloses https://github.com/facebook/rocksdb/pull/3082\n\nDifferential Revision: D6173062\n\nPulled By: sagar0\n\nfbshipit-source-id: 7bcfc653457bd362d46045d06527838c9a6adad6",
        "modified_files_count": 1,
        "modified_files": [
            "cache/lru_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d9240b548cbca225ff9c4b0a671e296f5e2c8860"
    },
    {
        "hash": "67b29e26be322009760d6d9ed21752dfa7d18439",
        "author": "Prashant D",
        "date": "2017-10-26T20:56:45-07:00",
        "message": "Fix coverity issue for MutableDBOptions default constructor\n\nSummary:\n228MutableDBOptions::MutableDBOptions()\n229    : max_background_jobs(2),\n230      base_background_compactions(-1),\n231      max_background_compactions(-1),\n232      avoid_flush_during_shutdown(false),\n233      delayed_write_rate(2 * 1024U * 1024U),\n234      max_total_wal_size(0),\n235      delete_obsolete_files_period_micros(6ULL * 60 * 60 * 1000000),\n236      stats_dump_period_sec(600),\n   \t2. uninit_member: Non-static class member bytes_per_sync is not initialized in this constructor nor in any functions that it calls.\n\nCID 1419857 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR)\n4. uninit_member: Non-static class member wal_bytes_per_sync is not initialized in this constructor nor in any functions that it calls.\n237      max_open_files(-1) {}\nCloses https://github.com/facebook/rocksdb/pull/3069\n\nDifferential Revision: D6170424\n\nPulled By: ajkr\n\nfbshipit-source-id: 1f94e86b87611ad2330b8b1707911150978d68b8",
        "modified_files_count": 1,
        "modified_files": [
            "options/db_options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/67b29e26be322009760d6d9ed21752dfa7d18439"
    },
    {
        "hash": "a02ed12638e0a68de6e5cb4e440c10eaafe93367",
        "author": "Sagar Vemuri",
        "date": "2017-10-20T17:11:39-07:00",
        "message": "Exclude DBTest.DynamicFIFOCompactionOptions test under RocksDB Lite\n\nSummary:\nThis test shouldn't be enabled under the lite version; and this fixes the failing contrun test due to #3006.\nCloses https://github.com/facebook/rocksdb/pull/3056\n\nDifferential Revision: D6114681\n\nPulled By: sagar0\n\nfbshipit-source-id: dc5243549ae6b1353cec7edb820c771d95f66dda",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a02ed12638e0a68de6e5cb4e440c10eaafe93367"
    },
    {
        "hash": "f8b5bb2fd82a39ab4c0b27d21bd492bc61177742",
        "author": "Andrew Kryczka",
        "date": "2017-10-20T14:11:52-07:00",
        "message": "remove unused code\n\nSummary:\nfixup 6a541afcc4d1e5b6e6d78e288b9bee3bb2a933b5. This code didn't do anything because (1) `bytes_per_sync` is assigned in `EnvOptions`'s constructor; and (2) `OptimizeForCompactionTableWrite`'s return value was ignored, even though its only purpose is to return something.\nCloses https://github.com/facebook/rocksdb/pull/3055\n\nDifferential Revision: D6114132\n\nPulled By: ajkr\n\nfbshipit-source-id: ea4831770930e9cf83518e13eb2e1934d1f5487c",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f8b5bb2fd82a39ab4c0b27d21bd492bc61177742"
    },
    {
        "hash": "ee2b1ec1e8776d6ed154f2d66435be8e2a620da5",
        "author": "raistlin",
        "date": "2017-10-20T10:12:49-07:00",
        "message": "Fix unstable floating point exception\n\nSummary:\nFix unstable floating point exception, tested on Windows, 64-bit build.\nThe problem appeared in `SetCapacity()` method at line\n\n`high_pri_pool_capacity_ = capacity_ * high_pri_pool_ratio_;`\n\n`high_pri_pool_ratio_` was not initialized at that moment, because\n`SetHighPriorityPoolRatio()` is called after `SetCapacity()`. So,\n`high_pri_pool_ratio_` contained garbage, which caused \"Floating point\nexception\" sometimes.\nCloses https://github.com/facebook/rocksdb/pull/3052\n\nDifferential Revision: D6111161\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: d170329111ad12b4bf9bbcf37bcb6411523438ae",
        "modified_files_count": 1,
        "modified_files": [
            "cache/lru_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ee2b1ec1e8776d6ed154f2d66435be8e2a620da5"
    },
    {
        "hash": "7deed2b43c02a33a8c5106fb2eb6025658be76c2",
        "author": "Gihwan Oh",
        "date": "2017-10-18T12:32:28-07:00",
        "message": "Fix a typo in a comment\n\nSummary:\ninstad of for specific level -> instead of a specific level\nCloses https://github.com/facebook/rocksdb/pull/3040\n\nDifferential Revision: D6090811\n\nPulled By: sagar0\n\nfbshipit-source-id: 499edef0a6f596c448f61791e6aca8f5cce08e9c",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7deed2b43c02a33a8c5106fb2eb6025658be76c2"
    },
    {
        "hash": "966b32b57c673774ea677fe3a40d255e6c8916ba",
        "author": "zhangjinpeng1987",
        "date": "2017-10-17T11:13:19-07:00",
        "message": "fix delete range bug\n\nSummary:\nFix this [issue](https://github.com/facebook/rocksdb/issues/2989).\najkr PTAL\n\nClose #2989\nCloses https://github.com/facebook/rocksdb/pull/3017\n\nDifferential Revision: D6078541\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: ef3db87b37b9156f83ca468aa39dea1f6dbde49d",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/966b32b57c673774ea677fe3a40d255e6c8916ba"
    },
    {
        "hash": "b8cea7cc279fe609de85b7ce4f50d4ff4f90047f",
        "author": "Changli Gao",
        "date": "2017-10-17T10:12:37-07:00",
        "message": "VersionBuilder: Erase with iterators for better performance\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3007\n\nDifferential Revision: D6077701\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: a6fd5b8a23f4feb1660b9ce027f651a7e90352b3",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b8cea7cc279fe609de85b7ce4f50d4ff4f90047f"
    },
    {
        "hash": "60c09f5fbb43ede016cea16bfb8002fb56f774a8",
        "author": "Yi Wu",
        "date": "2017-10-13T14:42:26-07:00",
        "message": "print more table_options to info log\n\nSummary:\nprint more table_options to info log\nCloses https://github.com/facebook/rocksdb/pull/3003\n\nDifferential Revision: D6054490\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 8e6f96e08bdc906077b6c62ade419d7cb739110f",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_factory.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/60c09f5fbb43ede016cea16bfb8002fb56f774a8"
    },
    {
        "hash": "8dd0a7e11abad6bc32e59a5cba8769961e085312",
        "author": "Andrew Kryczka",
        "date": "2017-10-11T15:12:31-07:00",
        "message": "add comment in SuperVersion referencing logic\n\nSummary:\nThe referencing logic is super confusing so added a comment at the part that took me longest to figure out.\nCloses https://github.com/facebook/rocksdb/pull/2996\n\nDifferential Revision: D6034969\n\nPulled By: ajkr\n\nfbshipit-source-id: 9cc2e744c1f79d6d57d378f86ed59238a5f583db",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8dd0a7e11abad6bc32e59a5cba8769961e085312"
    },
    {
        "hash": "1a61ba179e9d8b55cdc27df5b03e184355901864",
        "author": "Jay Patel",
        "date": "2017-10-09T22:59:02-07:00",
        "message": "compaction picker to use max_bytes_for_level_multiplier_additional\n\nSummary:\nHi,\nAs part of some optimization, we're using multiple DB locations (tmpfs and spindle) to store data and configured max_bytes_for_level_multiplier_additional. But, max_bytes_for_level_multiplier_additional is not used to compute the actual size for the level while picking the DB location. So, even if DB location does not have space, RocksDB mistakenly puts the level at that location.\n\nCan someone pls. verify the fix? Let me know any other changes required.\n\nThanks,\nJay\nCloses https://github.com/facebook/rocksdb/pull/2704\n\nDifferential Revision: D5992515\n\nPulled By: ajkr\n\nfbshipit-source-id: cbbc6c0e0a7dbdca91c72e0f37b218c4cec57e28",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1a61ba179e9d8b55cdc27df5b03e184355901864"
    },
    {
        "hash": "5a38e18627d42bd79fedd7a7e0180799397d8469",
        "author": "Sagar Vemuri",
        "date": "2017-10-09T16:36:52-07:00",
        "message": "Make some WriteOptions defaults more explicit\n\nSummary:\nSome WriteOptions defaults were not clearly documented. So, added comments to make the defaults more explicit.\nCloses https://github.com/facebook/rocksdb/pull/2984\n\nDifferential Revision: D6014500\n\nPulled By: sagar0\n\nfbshipit-source-id: a28078818e335e42b303c1fc6fbfec692ed16c7c",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5a38e18627d42bd79fedd7a7e0180799397d8469"
    },
    {
        "hash": "da29eba43b17b70c1b2d2bd89a6d16bfcf6bb573",
        "author": "Sagar Vemuri",
        "date": "2017-10-06T10:59:31-07:00",
        "message": "Enable WAL for blob index\n\nSummary:\nEnabled WAL, during GC, for blob index which is stored on regular RocksDB.\nCloses https://github.com/facebook/rocksdb/pull/2975\n\nDifferential Revision: D5997384\n\nPulled By: sagar0\n\nfbshipit-source-id: b76c1487d8b5be0e36c55e8d77ffe3d37d63d85b",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/da29eba43b17b70c1b2d2bd89a6d16bfcf6bb573"
    },
    {
        "hash": "75f7f42d41d8659b43a839bd31570a81e562eb7e",
        "author": "Adam Kupczyk",
        "date": "2017-10-04T18:12:52-07:00",
        "message": "Added CPU prefetch for skiplist\n\nSummary:\nThis change causes following changes result of test:\n./db_bench --writes 10000000 --benchmarks=\"fillrandom\" --compression_type none\nfrom\nfillrandom   :       3.177 micros/op 314804 ops/sec;   34.8 MB/s\nto\nfillrandom   :       2.777 micros/op 360087 ops/sec;   39.8 MB/s\nCloses https://github.com/facebook/rocksdb/pull/2961\n\nDifferential Revision: D5977822\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 1ea77707bffa978b1592b0c5d0fe76bfa1930f8d",
        "modified_files_count": 1,
        "modified_files": [
            "memtable/inlineskiplist.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/75f7f42d41d8659b43a839bd31570a81e562eb7e"
    },
    {
        "hash": "5b2cb64bfb87e1d77025220d23ac7bf3ac8ecefd",
        "author": "Andrew Kryczka",
        "date": "2017-10-03T16:27:28-07:00",
        "message": "Prevent threads from respawning during joining\n\nSummary:\nPreviously the thread pool might be non-empty after joining since concurrent submissions could spawn new threads. This problem didn't affect our background flush/compaction thread pools because the `shutting_down_` flag prevented new jobs from being submitted during/after joining. But I wanted to be able to reuse the `ThreadPool` without such external synchronization.\nCloses https://github.com/facebook/rocksdb/pull/2953\n\nDifferential Revision: D5951920\n\nPulled By: ajkr\n\nfbshipit-source-id: 0efec7d0056d36d1338367da75e8b0c089bbc973",
        "modified_files_count": 1,
        "modified_files": [
            "util/threadpool_imp.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5b2cb64bfb87e1d77025220d23ac7bf3ac8ecefd"
    },
    {
        "hash": "821887036e5235c827029d14decb185bea01ec4b",
        "author": "Andrew Kryczka",
        "date": "2017-10-03T16:27:28-07:00",
        "message": "pin L0 filters/indexes for compaction outputs\n\nSummary:\nWe need to tell the iterator the compaction output file's level so it can apply proper optimizations, like pinning filter and index blocks when user enables `pin_l0_filter_and_index_blocks_in_cache` and the output file's level is zero.\nCloses https://github.com/facebook/rocksdb/pull/2949\n\nDifferential Revision: D5945597\n\nPulled By: ajkr\n\nfbshipit-source-id: 2389decf9026ffaa32d45801a77d002529f64a62",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/821887036e5235c827029d14decb185bea01ec4b"
    },
    {
        "hash": "283d60761ea64111de8d494db4c08f544b18b5c1",
        "author": "Maysam Yabandeh",
        "date": "2017-10-03T14:58:07-07:00",
        "message": "fix valgrind leak report in unit test\n\nSummary:\nI cannot locally reproduce the valgrind leak report but based on my code inspection not deleting txn1 might be the reason.\n```\n==197848== 2,990 (544 direct, 2,446 indirect) bytes in 1 blocks are definitely lost in loss record 15 of 16\n==197848==    at 0x4C2D06F: operator new(unsigned long) (in /usr/local/fbcode/gcc-5-glibc-2.23/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==197848==    by 0x7D5B31: rocksdb::WritePreparedTxnDB::BeginTransaction(rocksdb::WriteOptions const&, rocksdb::TransactionOptions const&, rocksdb::Transaction*) (pessimistic_transaction_db.cc:173)\n==197848==    by 0x7D80C1: rocksdb::PessimisticTransactionDB::Initialize(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<rocksdb::ColumnFamilyHandle*, std::allocator<rocksdb::ColumnFamilyHandle*> > const&) (pessimistic_transaction_db.cc:115)\n==197848==    by 0x7DC42F: rocksdb::WritePreparedTxnDB::Initialize(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<rocksdb::ColumnFamilyHandle*, std::allocator<rocksdb::ColumnFamilyHandle*> > const&) (pessimistic_transaction_db.cc:151)\n==197848==    by 0x7D8CA0: rocksdb::TransactionDB::WrapDB(rocksdb::DB*, rocksdb::TransactionDBOptions const&, std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<rocksdb::ColumnFamilyHandle*, std::allocator<rocksdb::ColumnFamilyHandle*> > const&, rocksdb::TransactionDB**) (pessimistic_transaction_db.cc:275)\n==197848==    by 0x7D9F26: rocksdb::TransactionDB::Open(rocksdb::DBOptions const&, rocksdb::TransactionDBOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<rocksdb::ColumnFamilyDescriptor, std::allocator<rocksdb::ColumnFamilyDescriptor> > const&, std::vector<rocksdb::ColumnFamilyHandle*, std::allocator<rocksdb::ColumnFamilyHandle*> >*, rocksdb::TransactionDB**) (pessimistic_transaction_db.cc:227)\n==197848==    by 0x7DB349: rocksdb::TransactionDB::Open(rocksdb::Options const&, rocksdb::TransactionDBOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rocksdb::TransactionDB**) (pessimistic_transaction_db.cc:198)\n==197848==    by 0x52ABD2: rocksdb::TransactionTest::ReOpenNoDelete() (transaction_test.h:87)\n==197848==    by 0x51F7B8: rocksdb::WritePreparedTransactionTest_BasicRecoveryTest_Test::TestBody() (write_prepared_transaction_test.cc:843)\n==197848==    by 0x857557: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest-all.cc:3824)\n==197848==    by 0x857557: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest-all.cc:3860)\n==197848==    by 0x84E7EB: testing::Test::Run() [clone .part.485] (gtest-all.cc:3897)\n==197848==    by 0x84E9BC: Run (gtest-all.cc:3888)\n==197848==    by 0x84E9BC: testing::TestInfo::Run() [clone .part.486] (gtest-all.cc:4072)\n```\nCloses https://github.com/facebook/rocksdb/pull/2963\n\nDifferential Revision: D5968856\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 2ac512bbcad37dc8eeeffe4f363978913354180c",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/283d60761ea64111de8d494db4c08f544b18b5c1"
    },
    {
        "hash": "377e00404875d8785836af57717459505710e4dc",
        "author": "Sagar Vemuri",
        "date": "2017-10-03T13:42:11-07:00",
        "message": "Fix DBOptionsTest.SetBytesPerSync test when run with no compression\n\nSummary:\nAlso made the test more easier to understand:\n- changed the value size to ~1MB.\n- switched to NoCompression. We don't anyway need compression in this test for dynamic options.\n\nThe test failures started happening starting from: #2893 .\nCloses https://github.com/facebook/rocksdb/pull/2957\n\nDifferential Revision: D5959392\n\nPulled By: sagar0\n\nfbshipit-source-id: 2d55641e429246328bc6d10fcb9ef540d6ce07da",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/377e00404875d8785836af57717459505710e4dc"
    },
    {
        "hash": "880411f54cdcb8da216722bc2f7bbe9ae6859e00",
        "author": "Andrew Kryczka",
        "date": "2017-10-02T20:41:24-07:00",
        "message": "disable populating block cache for in-place updates\n\nSummary:\nThere's no point populating the block cache during this read. The key we read is guaranteed to be overwritten with a new `kValueType` key immediately afterwards, so can't be accessed again. A user was seeing high turnover of data blocks, at least partially due to this.\nCloses https://github.com/facebook/rocksdb/pull/2959\n\nDifferential Revision: D5961672\n\nPulled By: ajkr\n\nfbshipit-source-id: e7cb27c156c5db3b32af355c780efb99dbdf087c",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/880411f54cdcb8da216722bc2f7bbe9ae6859e00"
    },
    {
        "hash": "cf51d3eb7323368544ce4d4158f2ea51e18d47a7",
        "author": "Aliaksei Sandryhaila",
        "date": "2017-10-02T15:26:29-07:00",
        "message": "Remove an \"unused\" variable\n\nSummary:\nPR 2893 introduced a variable that is only used in TEST_SYNC_POINT_CALLBACK. When RocksDB is not built in debug mode, this method is not compiled in, and the variable is unused, which triggers a compiler error.\n\nThis patch reverts the corresponding part of #2893.\nCloses https://github.com/facebook/rocksdb/pull/2956\n\nReviewed By: yiwu-arbug\n\nDifferential Revision: D5955679\n\nPulled By: asandryh\n\nfbshipit-source-id: ac4a8e85b22da7f02efb117cd2e4a6e07ba73390",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cf51d3eb7323368544ce4d4158f2ea51e18d47a7"
    },
    {
        "hash": "2a3363d52eab5d1f83fa45fbd6b295c9a66061a4",
        "author": "Siying Dong",
        "date": "2017-10-02T09:41:17-07:00",
        "message": "ldb dump can print histogram of value size\n\nSummary:\nMake \"ldb dump --count_only\" print histogram of value size. Also, fix a bug that \"ldb dump --path=<db_path>\" doesn't work.\nCloses https://github.com/facebook/rocksdb/pull/2944\n\nDifferential Revision: D5954527\n\nPulled By: siying\n\nfbshipit-source-id: c620a444ec544258b8d113f5f663c375dd53d6be",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2a3363d52eab5d1f83fa45fbd6b295c9a66061a4"
    },
    {
        "hash": "ab0542f5ec6e7c7e405267eaa2e2a603a77d570b",
        "author": "Maysam Yabandeh",
        "date": "2017-09-29T07:56:55-07:00",
        "message": "Fix for when block.cache_handle is nullptr\n\nSummary:\nWhen using with compressed cache it is possible that the status is ok but the block is not actually added to the block cache. The patch takes this case into account.\nCloses https://github.com/facebook/rocksdb/pull/2945\n\nDifferential Revision: D5937613\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 5428cf1115e5046b3d01ab78d26cb181122af4c6",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ab0542f5ec6e7c7e405267eaa2e2a603a77d570b"
    },
    {
        "hash": "c2f6e45aa3cc8b7a7f3fa217b11de83a7ac576f1",
        "author": "Andrew Kryczka",
        "date": "2017-09-28T00:12:34-07:00",
        "message": "prevent nullptr dereference in table reader error case\n\nSummary:\nA user encountered segfault on the call to `CacheDependencies()`, probably because `NewIndexIterator()` failed before populating `*index_entry`. Let's avoid the call in that case.\nCloses https://github.com/facebook/rocksdb/pull/2939\n\nDifferential Revision: D5928611\n\nPulled By: ajkr\n\nfbshipit-source-id: 484be453dbb00e5e160e9c6a1bc933df7d80f574",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c2f6e45aa3cc8b7a7f3fa217b11de83a7ac576f1"
    },
    {
        "hash": "aa67bae6cfff29114d543a8ffea3d5eddea06b09",
        "author": "Maysam Yabandeh",
        "date": "2017-09-26T14:27:30-07:00",
        "message": "Break down PinnedDataIteratorRandomized\n\nSummary:\nIts timing out under tsan.\nCloses https://github.com/facebook/rocksdb/pull/2928\n\nDifferential Revision: D5911766\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 2faacc07752ac8713a3a2abb5a4c4b7ae3bdf208",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iterator_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aa67bae6cfff29114d543a8ffea3d5eddea06b09"
    },
    {
        "hash": "be97dbb15c1bb59f54916afac62b7abf39e18d02",
        "author": "Yi Wu",
        "date": "2017-09-22T15:26:42-07:00",
        "message": "Fix WritePreparedTransactionTest::SeqAdvanceTest ASAN failure\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2922\n\nDifferential Revision: D5895310\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 52c635a25d22478ec1eca49b6817551202babac2",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/be97dbb15c1bb59f54916afac62b7abf39e18d02"
    },
    {
        "hash": "fc7476bec1169c44998de846d26b52ef9b4bf42a",
        "author": "Andrew Kryczka",
        "date": "2017-09-21T17:56:38-07:00",
        "message": "fix populating range deletions in forward iterator\n\nSummary:\nfixes #2902\nCloses https://github.com/facebook/rocksdb/pull/2917\n\nDifferential Revision: D5887175\n\nPulled By: ajkr\n\nfbshipit-source-id: 364e292c636a3238bfc53b0fb9a01ff2f82dcbb9",
        "modified_files_count": 1,
        "modified_files": [
            "db/forward_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fc7476bec1169c44998de846d26b52ef9b4bf42a"
    },
    {
        "hash": "65a9cd616876c7a1204e1a50990400e4e1f61d7e",
        "author": "PhaniShekhar",
        "date": "2017-09-21T15:57:58-07:00",
        "message": "Use L1 size as estimate for L0 size in LevelCompactionBuilder::GetPathID\n\nSummary:\nFix for [2461](https://github.com/facebook/rocksdb/issues/2461).\n\nProblem: When using multiple db_paths setting with RocksDB, RocksDB incorrectly calculates the size of L1 in LevelCompactionBuilder::GetPathId.\n\nmax_bytes_for_level_base is used as L0 size and L1 size is calculated as (L0 size * max_bytes_for_level_multiplier). However, L1 size should be max_bytes_for_level_base.\n\nSolution: Use max_bytes_for_level_base as L1 size. Also, use L1 size as the estimated size of L0.\nCloses https://github.com/facebook/rocksdb/pull/2903\n\nDifferential Revision: D5885442\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 036da1c9298d173b9b80479cc6661ee4b7a951f6",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/65a9cd616876c7a1204e1a50990400e4e1f61d7e"
    },
    {
        "hash": "8fc3de3c622896d49480a53eac0ebb20301a645b",
        "author": "Andrew Kryczka",
        "date": "2017-09-21T11:11:00-07:00",
        "message": "make rate limiter a general option\n\nSummary:\nit's unsupported in options file, so the flag should be respected by db_bench even when an options file is provided.\nCloses https://github.com/facebook/rocksdb/pull/2910\n\nDifferential Revision: D5869836\n\nPulled By: ajkr\n\nfbshipit-source-id: f67f591ae083e95e989f86b6fad50765d2e3d855",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8fc3de3c622896d49480a53eac0ebb20301a645b"
    },
    {
        "hash": "1480e6f7cffdc02ffc13b3ba04d559f0c2f688fb",
        "author": "Yi Wu",
        "date": "2017-09-21T09:56:54-07:00",
        "message": "Fix TransactionTest::SeqAdvanceTest ASAN failure\n\nSummary:\nThe test didn't delete txn before creating a new one.\nCloses https://github.com/facebook/rocksdb/pull/2913\n\nDifferential Revision: D5880236\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 7a4fcaada3d86332292754502cd8f4341143bf4f",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1480e6f7cffdc02ffc13b3ba04d559f0c2f688fb"
    },
    {
        "hash": "b4596c6174a5f8e050402f85c091f35a89a0263f",
        "author": "Yi Wu",
        "date": "2017-09-19T12:01:09-07:00",
        "message": "Fix Get does not return super version on error\n\nSummary:\nThis is caught when I was testing #2886.\nCloses https://github.com/facebook/rocksdb/pull/2907\n\nDifferential Revision: D5863153\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 8c54759ba1a0dc101f24ab50423e35731300612d",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b4596c6174a5f8e050402f85c091f35a89a0263f"
    },
    {
        "hash": "6b3c71f6ed40236b33d1fc3cf3db7b99a29f87eb",
        "author": "Yi Wu",
        "date": "2017-09-15T11:56:31-07:00",
        "message": "Fix DBImpl::NotifyOnCompactionCompleted data race\n\nSummary:\nAccess of `cfd->current()` needs to hold db mutex. The data race is caught by TSAN but hard to reproduce: https://gist.github.com/yiwu-arbug/0fc6dc0de915297a1740aa9610be9373\nCloses https://github.com/facebook/rocksdb/pull/2894\n\nDifferential Revision: D5843884\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 0a30a421bc96f51840821538ad6453dc0815a942",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6b3c71f6ed40236b33d1fc3cf3db7b99a29f87eb"
    },
    {
        "hash": "f47b4eeb1e8ab450d64561e999568f7105f289c5",
        "author": "Yi Wu",
        "date": "2017-09-15T11:37:37-07:00",
        "message": "Fix memory leak in OptionsTest::OptionsComposeDecompose\n\nSummary:\nFixing asan error.\nCloses https://github.com/facebook/rocksdb/pull/2887\n\nDifferential Revision: D5838895\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 1662ce9856eb5e6877675347dc2240f2acb6fae8",
        "modified_files_count": 1,
        "modified_files": [
            "options/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f47b4eeb1e8ab450d64561e999568f7105f289c5"
    },
    {
        "hash": "9a970c81af9807071bd690f4c808c5045866291a",
        "author": "Yi Wu",
        "date": "2017-09-13T17:26:35-07:00",
        "message": "Fix WriteBatchWithIndex::GetFromBatchAndDB not allowing StackableDB\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2881\n\nDifferential Revision: D5829682\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: abb8fa14b58cea7c416282f9be19e8b1a7961c6e",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/write_batch_with_index/write_batch_with_index.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9a970c81af9807071bd690f4c808c5045866291a"
    },
    {
        "hash": "a843df668bc14c6d549216fcfe9a7b8280f3f18b",
        "author": "Yi Wu",
        "date": "2017-09-13T16:12:02-07:00",
        "message": "Fix use-after-free in c_tset\n\nSummary:\nFix asan error introduce by #2823\nCloses https://github.com/facebook/rocksdb/pull/2879\n\nDifferential Revision: D5828454\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 50777855667f4e7b634279a654c3bfa01a1ac729",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a843df668bc14c6d549216fcfe9a7b8280f3f18b"
    },
    {
        "hash": "2d6e42122b3d247a80a11b7e2d476d88263acd07",
        "author": "Sagar Vemuri",
        "date": "2017-09-13T15:56:24-07:00",
        "message": "Remove 'experimental' comment around level_compaction_dynamic_level_bytes option\n\nSummary:\nRemove misleading 'experimental' comment around `level_compaction_dynamic_level_bytes` option. This is not experimental anymore and is ready for wider adoption. MyRocks is already using it in production.\nCloses https://github.com/facebook/rocksdb/pull/2878\n\nDifferential Revision: D5828890\n\nPulled By: sagar0\n\nfbshipit-source-id: fffb45f4999f689b7eca326e4f4caf472d40c5a9",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/advanced_options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2d6e42122b3d247a80a11b7e2d476d88263acd07"
    },
    {
        "hash": "f615f5604bd8edfbdda5c3e1e643d2f28934a046",
        "author": "gladiator",
        "date": "2017-09-12T18:01:08-07:00",
        "message": "fix missing manual_wal_flush for DBOptions ctor\n\nSummary:\ncurrently `ImmutableDBOptions::Dump` use default value for `concurrent_prepare` and `manual_wal_flush`, because DBOptions ctor does not init those member variables.\n\nso in LOG file,  it will be\n```\n             Options.concurrent_prepare: 0\n             Options.manual_wal_flush: 0\n```\nCloses https://github.com/facebook/rocksdb/pull/2864\n\nDifferential Revision: D5816240\n\nPulled By: ajkr\n\nfbshipit-source-id: 82335e8bcae3dceedc6a99224e7998de5fad1e50",
        "modified_files_count": 1,
        "modified_files": [
            "options/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f615f5604bd8edfbdda5c3e1e643d2f28934a046"
    },
    {
        "hash": "2d30aaae47a2c4ecd5c01a90d58efa953940238b",
        "author": "Maysam Yabandeh",
        "date": "2017-09-12T14:58:46-07:00",
        "message": "Exclude incompatible options in test\n\nSummary:\noptions.enable_pipelined_write and options.concurrent_prepare are incompatible and should not be set together.\nCloses https://github.com/facebook/rocksdb/pull/2875\n\nDifferential Revision: D5818358\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: dad862508f00817ab302f8b61729accf38315fb8",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_callback_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2d30aaae47a2c4ecd5c01a90d58efa953940238b"
    },
    {
        "hash": "3c42807794b8d362418dbe398d6c9bd0113bd838",
        "author": "Archit Mishra",
        "date": "2017-09-12T12:02:53-07:00",
        "message": "do not call merge when checking to see if key exists\n\nSummary:\nChanges:\n* added check for value before merge is called on code path that should check if key exists\nCloses https://github.com/facebook/rocksdb/pull/2814\n\nReviewed By: IslamAbdelRahman\n\nDifferential Revision: D5743966\n\nPulled By: armishra\n\nfbshipit-source-id: 6ac4283bc510c8ca50827d87ef0ba631f2b33b18",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3c42807794b8d362418dbe398d6c9bd0113bd838"
    },
    {
        "hash": "025b85b4ac078110302c039556e4c12ba8e7a731",
        "author": "Andrew Kryczka",
        "date": "2017-09-12T11:26:47-07:00",
        "message": "speedup DBTest.EncodeDecompressedBlockSizeTest\n\nSummary:\nit sometimes takes more than 10 minutes (i.e., times out) on our internal CI. mainly because bzip is super slow. so I reduced the amount of  work it tries to do.\nCloses https://github.com/facebook/rocksdb/pull/2856\n\nDifferential Revision: D5795883\n\nPulled By: ajkr\n\nfbshipit-source-id: e69f986ae60b44ecc26b6b024abd0f13bdf3a3c5",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/025b85b4ac078110302c039556e4c12ba8e7a731"
    },
    {
        "hash": "2dd22e54495b145a12931add763b7fcc4521ae10",
        "author": "Siying Dong",
        "date": "2017-09-11T12:04:21-07:00",
        "message": "Make DBIter class final\n\nSummary:\nDBIter is referenced in ArenaWrappedDBIter, which is a simple wrapper. If DBIter is final, some virtual function call can be avoided. Some functions can even be inlined, like DBIter.value() to ArenaWrappedDBIter.value() and DBIter.key() to ArenaWrappedDBIter.key(). The performance gain is hard to measure. I just ran the memory-only benchmark for readseq and saw it didn't regress. There shouldn't be any harm doing it. Just give compiler more choices.\nCloses https://github.com/facebook/rocksdb/pull/2859\n\nDifferential Revision: D5799888\n\nPulled By: siying\n\nfbshipit-source-id: 829788f91310c40282dcfb7e412e6ef489931143",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2dd22e54495b145a12931add763b7fcc4521ae10"
    },
    {
        "hash": "2a5915049ea917a677278a1a002725633bb0cd33",
        "author": "Huachao Huang",
        "date": "2017-09-11T11:41:27-07:00",
        "message": "Fix missing BYTES_PER_WRITE for pipeline write\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2862\n\nDifferential Revision: D5805638\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 72d38c74395690023a719f400daff01527645a17",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2a5915049ea917a677278a1a002725633bb0cd33"
    },
    {
        "hash": "ba3c58cab6c691c53c7f98589651233695da1f62",
        "author": "Kefu Chai",
        "date": "2017-09-07T12:40:57-07:00",
        "message": "specify SSE42 'target' attribute for Fast_CRC32()\n\nSummary:\nif we enable SSE42 globally when compiling the tree for preparing a\nportable binary, which could be running on CPU w/o SSE42 instructions\neven the GCC on the building host is able to emit SSE42 code, this leads\nto illegal instruction errors on machines not supporting SSE42. to solve\nthis problem, crc32 detects the supported instruction at runtime, and\nselects the supported CRC32 implementation according to the result of\n`cpuid`. but intrinics like \"_mm_crc32_u64()\" will not be available\nunless the \"target\" machine is appropriately specified in the command\nline, like \"-msse42\", or using the \"target\" attribute.\n\nwe could pass \"-msse42\" only when compiling crc32c.cc, and allow the\ncompiler to generate the SSE42 instructions, but we are still at the\nrisk of executing illegal instructions on machines does not support\nSSE42 if the compiler emits code that is not guarded by our runtime\ndetection. and we need to do the change in both Makefile and CMakefile.\n\nor, we can use GCC's \"target\" attribute to enable the machine specific\ninstructions on certain function. in this way, we have finer grained\ncontrol of the used \"target\". and no need to change the makefiles. so\nwe don't need to duplicate the changes on both makefile and cmake as\nthe previous approach.\n\nthis problem surfaces when preparing a package for GNU/Linux distribution,\nand we only applies to optimization for SSE42, so using a feature\nonly available on GCC/Clang is not that formidable.\nCloses https://github.com/facebook/rocksdb/pull/2807\n\nDifferential Revision: D5786084\n\nPulled By: siying\n\nfbshipit-source-id: bca5c0f877b8d6fb55f58f8f122254a26422843d",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ba3c58cab6c691c53c7f98589651233695da1f62"
    },
    {
        "hash": "7e19a571e93cd12ee040ddee9a066d116b03fa27",
        "author": "Maysam Yabandeh",
        "date": "2017-09-07T12:17:18-07:00",
        "message": "Remove unused TransactionCallback\n\nSummary:\nTransactionCallback was never used. Remove it to avoid confusion.\nCloses https://github.com/facebook/rocksdb/pull/2853\n\nDifferential Revision: D5787219\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: e2b6a89537e3770a269ad38be71c4b0b160a88ac",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/pessimistic_transaction.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7e19a571e93cd12ee040ddee9a066d116b03fa27"
    },
    {
        "hash": "79810e2d491895b5e4b9dab8fd6ad03ad1f2bb19",
        "author": "Maysam Yabandeh",
        "date": "2017-09-05T15:29:52-07:00",
        "message": "Skip write_prepared_transaction_test in travis\n\nSummary:\nThe patch skips write_prepared_transaction_test from travis as they time out there. They are still covered in daily runs of tests.\nCloses https://github.com/facebook/rocksdb/pull/2836\n\nDifferential Revision: D5767203\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 51045ef98a745197136e14b2ec02fc6f38081b75",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/79810e2d491895b5e4b9dab8fd6ad03ad1f2bb19"
    },
    {
        "hash": "ab95e293d2f8c3cab506989f79c2adcba5ecb2b7",
        "author": "Yi Wu",
        "date": "2017-09-01T14:13:51-07:00",
        "message": "Fix memory leak on blob db open\n\nSummary:\nFixes #2820\nCloses https://github.com/facebook/rocksdb/pull/2826\n\nDifferential Revision: D5757527\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: f495b63700495aeaade30a1da5e3675848f3d72f",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ab95e293d2f8c3cab506989f79c2adcba5ecb2b7"
    },
    {
        "hash": "37ae8cc60fd71089849b1e0ac8bfb4f8b62445af",
        "author": "Maysam Yabandeh",
        "date": "2017-09-01T11:28:52-07:00",
        "message": "Signal progress of the test to avoid timeout\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2824\n\nDifferential Revision: D5756457\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: dff53e945d8ac4ffe6775a2176424fd1a27fc189",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/write_prepared_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/37ae8cc60fd71089849b1e0ac8bfb4f8b62445af"
    },
    {
        "hash": "3b23b1d8c66315c5c08acf12fb80d492e5727e45",
        "author": "Andrew Kryczka",
        "date": "2017-09-01T11:11:56-07:00",
        "message": "fix HistogramWindowingImpl copy-{assignment,constructor}\n\nSummary:\ntheir arguments had a typo.\nCloses https://github.com/facebook/rocksdb/pull/2821\n\nDifferential Revision: D5752408\n\nPulled By: ajkr\n\nfbshipit-source-id: f2d84489c0c615b12a790f04c42d35cc0dccb02d",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/histogram_windowing.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3b23b1d8c66315c5c08acf12fb80d492e5727e45"
    },
    {
        "hash": "4a90cbf42970185ebd2d1c5aac253424ca443ccf",
        "author": "Andrew Kryczka",
        "date": "2017-08-31T16:27:04-07:00",
        "message": "Include statistics pointer in ImmutableDBOptions::Dump\n\nSummary:\nuseful when debugging to tell whether a DB has stats enabled, and whether a stats object is shared across DBs.\nCloses https://github.com/facebook/rocksdb/pull/2813\n\nDifferential Revision: D5741755\n\nPulled By: ajkr\n\nfbshipit-source-id: 9b9d51dee77d14d415cd5da985d8d61b5b3837c3",
        "modified_files_count": 1,
        "modified_files": [
            "options/db_options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4a90cbf42970185ebd2d1c5aac253424ca443ccf"
    },
    {
        "hash": "c10cf166fa1ade7a8d8af168624fd08cb4ac0778",
        "author": "Andrew Kryczka",
        "date": "2017-08-30T16:41:24-07:00",
        "message": "Dump non-final ZSTD compression type support\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2810\n\nDifferential Revision: D5739947\n\nPulled By: ajkr\n\nfbshipit-source-id: 09f99718b6b083c2711dcf17f7b68c305f3fd261",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c10cf166fa1ade7a8d8af168624fd08cb4ac0778"
    },
    {
        "hash": "dc5f29f32f6c3abaf73f961817f61653236f81b6",
        "author": "Changli Gao",
        "date": "2017-08-30T15:26:50-07:00",
        "message": "EnvWrapper: Forward more functions\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2789\n\nDifferential Revision: D5738335\n\nPulled By: ajkr\n\nfbshipit-source-id: f371303c42b144d0a0424e9304b0df545f073ad1",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dc5f29f32f6c3abaf73f961817f61653236f81b6"
    },
    {
        "hash": "b767972313677971bd96b20a72488ec9f2142747",
        "author": "Andrew Kryczka",
        "date": "2017-08-29T12:11:56-07:00",
        "message": "avoid use-after-move error\n\nSummary:\n* db/range_del_aggregator.cc (AddTombstone): Avoid a potential\nuse-after-move bug. The original code would both use and move\n`tombstone` in a context where the order of those operations is\nnot specified.  The fix is to perform the use on a new, preceding\nstatement.\n\nAuthor: meyering\nCloses https://github.com/facebook/rocksdb/pull/2796\n\nDifferential Revision: D5721163\n\nPulled By: ajkr\n\nfbshipit-source-id: a1d328d6a77a17c6425e8069860a202e615e2f48",
        "modified_files_count": 1,
        "modified_files": [
            "db/range_del_aggregator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b767972313677971bd96b20a72488ec9f2142747"
    },
    {
        "hash": "92bfd6c5078fa7bbf7a2caacfddbec255e9098ba",
        "author": "Yi Wu",
        "date": "2017-08-24T14:56:04-07:00",
        "message": "Fix DropColumnFamily data race\n\nSummary:\nIt should hold db mutex while accessing max_total_in_memory_state_.\nCloses https://github.com/facebook/rocksdb/pull/2784\n\nDifferential Revision: D5696536\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 45430634d7fe11909b38e42e5f169f618681c4ee",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/92bfd6c5078fa7bbf7a2caacfddbec255e9098ba"
    },
    {
        "hash": "19cc66dc4f8ab765f4e1415115fe4639c878a210",
        "author": "Andrew Kryczka",
        "date": "2017-08-23T15:12:05-07:00",
        "message": "fix clang bug in block-based table reader\n\nSummary:\nThis is the warning that clang considers a bug and has been causing it to fail:\n\n```\ntable/block_based_table_reader.cc:240:27: warning: Potential leak of memory pointed to by 'block.value'\n    for (; biter.Valid(); biter.Next()) {\n                          ^~~~~\n```\n\nActually clang just doesn't have enough knowledge to statically determine it's safe. We can teach it using an assert.\nCloses https://github.com/facebook/rocksdb/pull/2779\n\nDifferential Revision: D5691225\n\nPulled By: ajkr\n\nfbshipit-source-id: 3f0d545bf44636953b30ee5243c63239e8f16d8e",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/19cc66dc4f8ab765f4e1415115fe4639c878a210"
    },
    {
        "hash": "7eba54eb9b769246a6e93fa96155e034fde01a5d",
        "author": "Andrew Kryczka",
        "date": "2017-08-23T14:11:32-07:00",
        "message": "test compaction input-level split range tombstone assumption\n\nSummary:\nOne of the core assumptions of DeleteRange is that files containing portions of the same range tombstone are treated as a single unit from the perspective of compaction picker. Need better tests for this. This PR adds the tests for manual compaction.\nCloses https://github.com/facebook/rocksdb/pull/2769\n\nDifferential Revision: D5676677\n\nPulled By: ajkr\n\nfbshipit-source-id: 1b4b3382b300ff7048b872911405fdf900e4fbec",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_range_del_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7eba54eb9b769246a6e93fa96155e034fde01a5d"
    },
    {
        "hash": "39ef900551a4d88c8546ca086baaba76730e6162",
        "author": "Andrew Kryczka",
        "date": "2017-08-22T16:55:44-07:00",
        "message": "stop calling memcmp with nullptrs\n\nSummary:\nit doesn't take nullptr according to its declaration in glibc, and calling it in this way causes our sanitizers (ubsan, clang analyze) to fail.\nCloses https://github.com/facebook/rocksdb/pull/2776\n\nDifferential Revision: D5683260\n\nPulled By: ajkr\n\nfbshipit-source-id: 114b137ee188172f96eedc43139255cae7bee80a",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/slice.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/39ef900551a4d88c8546ca086baaba76730e6162"
    },
    {
        "hash": "09ac6206abf27b45e6d2cbe6f462d3c3886dfc62",
        "author": "Archit Mishra",
        "date": "2017-08-21T12:10:43-07:00",
        "message": "Circumvent ASAN false positive\n\nSummary:\nChanges:\n* checks if ASAN mode is on, and uses malloc and free in the constructor and destructor\nCloses https://github.com/facebook/rocksdb/pull/2767\n\nDifferential Revision: D5671243\n\nPulled By: armishra\n\nfbshipit-source-id: 8e4ad0f7f163400c4effa8617d3b30134119d802",
        "modified_files_count": 1,
        "modified_files": [
            "cache/lru_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/09ac6206abf27b45e6d2cbe6f462d3c3886dfc62"
    },
    {
        "hash": "c1384a707637187be3b65386816078270b8943f6",
        "author": "yiwu-arbug",
        "date": "2017-08-17T17:56:55-07:00",
        "message": "fix db_stress uint64_t to int32 cast\n\nSummary:\nClang complain about an cast from uint64_t to int32 in db_stress. Fixing it.\nCloses https://github.com/facebook/rocksdb/pull/2755\n\nDifferential Revision: D5655947\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: cfac10e796e0adfef4727090b50975b0d6e2c9be",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c1384a707637187be3b65386816078270b8943f6"
    },
    {
        "hash": "29877ec7b44b41a37a0766035a2ebe07bf56f663",
        "author": "yiwu-arbug",
        "date": "2017-08-17T15:01:09-07:00",
        "message": "Fix blob db crash during calculating write amp\n\nSummary:\nOn initial call to BlobDBImpl::WaStats() `all_periods_write_` would be empty, so it will crash when we call pop_front() at line 1627. Apparently it is mean to pop only when `all_periods_write_.size() > kWriteAmplificationStatsPeriods`.\n\nThe whole write amp calculation doesn't seems to be correct and it is not being exposed. Will work on it later.\n\nTest Plan\nChange kWriteAmplificationStatsPeriodMillisecs to 1000 (1 second) and run db_bench --use_blob_db for 5 minutes.\nCloses https://github.com/facebook/rocksdb/pull/2751\n\nDifferential Revision: D5648269\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: b843d9a09bb5f9e1b713d101ec7b87e54b5115a4",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/29877ec7b44b41a37a0766035a2ebe07bf56f663"
    },
    {
        "hash": "8f2598ac9d730bf0a7c08b9cdb6071fd7b73ba3b",
        "author": "Sagar Vemuri",
        "date": "2017-08-17T15:01:09-07:00",
        "message": "Enable Cassandra merge operator to be called with a single merge operand\n\nSummary:\nUpdating Cassandra merge operator to make use of a single merge operand when needed. Single merge operand support has been introduced in #2721.\nCloses https://github.com/facebook/rocksdb/pull/2753\n\nDifferential Revision: D5652867\n\nPulled By: sagar0\n\nfbshipit-source-id: b9fbd3196d3ebd0b752626dbf9bec9aa53e3e26a",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/cassandra/merge_operator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8f2598ac9d730bf0a7c08b9cdb6071fd7b73ba3b"
    },
    {
        "hash": "23593171c42e88ea1c6d288dd1ab6f2b65bdbbe1",
        "author": "Andrew Kryczka",
        "date": "2017-08-16T19:13:01-07:00",
        "message": "minor improvements to db_stress\n\nSummary:\nfix some things that made this command hard to use from CLI:\n\n- use default values for `target_file_size_base` and `max_bytes_for_level_base`. previously we were using small values for these but default value of `write_buffer_size`, which led to enormous number of L1 files.\n- failure message for `value_size_mult` too big. previously there was just an assert, so in non-debug mode it'd overrun the value buffer and crash mysteriously.\n- only print verification success if there's no failure. before it'd print both in the failure case.\n- support `memtable_prefix_bloom_size_ratio`\n- support `num_bottom_pri_threads` (universal compaction)\nCloses https://github.com/facebook/rocksdb/pull/2741\n\nDifferential Revision: D5629495\n\nPulled By: ajkr\n\nfbshipit-source-id: ddad97d6d4ba0884e7c0f933b0a359712514fc1d",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/23593171c42e88ea1c6d288dd1ab6f2b65bdbbe1"
    },
    {
        "hash": "3204a4f64bc718a3138d867e8083a2f71d01ec63",
        "author": "lxcode",
        "date": "2017-08-15T12:32:11-07:00",
        "message": "Fix missing stdlib include required for abort()\n\nSummary:\nIf ROCKSDB_LITE is defined, a call to abort() is introduced. This call requires stdlib.h.\n\nBuild log of unpatched 5.7.1:\n\nhttp://beefy9.nyi.freebsd.org/data/110amd64-default/447974/logs/rocksdb-lite-5.7.1.log\nCloses https://github.com/facebook/rocksdb/pull/2744\n\nReviewed By: yiwu-arbug\n\nDifferential Revision: D5632372\n\nPulled By: lxcode\n\nfbshipit-source-id: b2a8e692bf14ccf1f875f3a00463e87bba310a2b",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/filter_policy.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3204a4f64bc718a3138d867e8083a2f71d01ec63"
    },
    {
        "hash": "7aa96db7a20b0ca6e58f92e9b308324f25808aff",
        "author": "Andrew Kryczka",
        "date": "2017-08-15T12:02:16-07:00",
        "message": "db_stress rolling active window\n\nSummary:\nSupport a window of `active_width` keys that rolls through `[0, max_key)` over the duration of the test. Operations only affect keys inside the window. This gives us the ability to detect L0->L0 deletion bug (#2722).\nCloses https://github.com/facebook/rocksdb/pull/2739\n\nDifferential Revision: D5628555\n\nPulled By: ajkr\n\nfbshipit-source-id: 9cb2d8f4ab1a7c73f7797b8e19f7094970ea8749",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7aa96db7a20b0ca6e58f92e9b308324f25808aff"
    },
    {
        "hash": "74f18c13019cb367bdafef4ee7c618d02d62c08d",
        "author": "Andrew Kryczka",
        "date": "2017-08-11T13:57:17-07:00",
        "message": "db_bench support for non-uniform column family ops\n\nSummary:\nPreviously we could only select the CF on which to operate uniformly at random. This is a limitation, e.g., when testing universal compaction as all CFs would need to run full compaction at roughly the same time, which isn't realistic.\n\nThis PR allows the user to specify the probability distribution for selecting CFs via the `--column_family_distribution` argument.\nCloses https://github.com/facebook/rocksdb/pull/2677\n\nDifferential Revision: D5544436\n\nPulled By: ajkr\n\nfbshipit-source-id: 478d56260995236ae90895ce5bd51f38882e185a",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/74f18c13019cb367bdafef4ee7c618d02d62c08d"
    },
    {
        "hash": "5de98f2d50fec1b5b88a973e825b1156fb03a943",
        "author": "Andrew Kryczka",
        "date": "2017-08-11T13:13:12-07:00",
        "message": "approximate histogram stats to save cpu\n\nSummary:\nsounds like we're willing to tradeoff minor inaccuracy in stats for speed. start with histogram stats. ticker stats will be harder (and, IMO, we shouldn't change them in this manner) as many test cases rely on them being exactly correct.\nCloses https://github.com/facebook/rocksdb/pull/2720\n\nDifferential Revision: D5607884\n\nPulled By: ajkr\n\nfbshipit-source-id: 1b754cda35ea6b252d1fdd5aa3cfb58866506372",
        "modified_files_count": 1,
        "modified_files": [
            "monitoring/histogram.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5de98f2d50fec1b5b88a973e825b1156fb03a943"
    },
    {
        "hash": "3f5888430a537c0580d9ee863152c98a3f46d546",
        "author": "yiwu-arbug",
        "date": "2017-08-11T13:00:15-07:00",
        "message": "Fix c_test ASAN failure\n\nSummary:\nFix c_test missing deletion of write batch pointer.\nCloses https://github.com/facebook/rocksdb/pull/2725\n\nDifferential Revision: D5613866\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: bf3f59a6812178577c9c25bae558ef36414a1f51",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3f5888430a537c0580d9ee863152c98a3f46d546"
    },
    {
        "hash": "6f051e0c71d18dac88b8d96b8c534b6711a3a9f8",
        "author": "Andrew Kryczka",
        "date": "2017-08-11T12:29:14-07:00",
        "message": "fix corruption_test valgrind\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2724\n\nDifferential Revision: D5613416\n\nPulled By: ajkr\n\nfbshipit-source-id: ed55fb66ab1b41dfdfe765fe3264a1c87a8acb00",
        "modified_files_count": 1,
        "modified_files": [
            "db/corruption_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6f051e0c71d18dac88b8d96b8c534b6711a3a9f8"
    },
    {
        "hash": "64f8484356ee611d90a77e6b02f6855a5c26cc17",
        "author": "Daniel Black",
        "date": "2017-08-10T11:58:53-07:00",
        "message": "block_cache_tier: fix gcc-7 warnings\n\nSummary:\nError was:\n\nutilities/persistent_cache/block_cache_tier.cc: In instantiation of ‘void rocksdb::Add(std::map<std::__cxx11::basic_string<char>, double>*, const string&, const T&) [with T = double; std::__cxx11::string = std::__cxx11::basic_string<char>]’:\nutilities/persistent_cache/block_cache_tier.cc:147:40:   required from here\nutilities/persistent_cache/block_cache_tier.cc:141:23: error: type qualifiers ignored on cast result type [-Werror=ignored-qualifiers]\n\n   stats->insert({key, static_cast<const double>(t)});\n\nfixing like #2562\nCloses https://github.com/facebook/rocksdb/pull/2603\n\nDifferential Revision: D5600910\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 891a5ec7e451d2dec6ad1b6b7fac545657f87363",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/persistent_cache/block_cache_tier.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/64f8484356ee611d90a77e6b02f6855a5c26cc17"
    },
    {
        "hash": "6a9de434775abb2868132e2d438cfe932e225032",
        "author": "FireMail",
        "date": "2017-08-10T11:39:29-07:00",
        "message": "Windows.h macro call fix\n\nSummary:\n- moved the max call for numeric limits into paranthesis so that max wont be called as macro when including <Windows.h>\nCloses https://github.com/facebook/rocksdb/pull/2709\n\nDifferential Revision: D5600773\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: fd28b6f7c10ddce21bad4030f2db06f965bb08da",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6a9de434775abb2868132e2d438cfe932e225032"
    },
    {
        "hash": "23c7d135405ec14618e6e85f95c0582b9049eaa6",
        "author": "jimmyway",
        "date": "2017-08-09T22:57:01-07:00",
        "message": "fix comment\n\nSummary:\nSigned-off-by: tang.jin <tang.jin@istuary.com>\nCloses https://github.com/facebook/rocksdb/pull/2644\n\nDifferential Revision: D5600861\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 9516636cb6e77b09fe0ebef78953adf4b7e88cc8",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_thread.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/23c7d135405ec14618e6e85f95c0582b9049eaa6"
    },
    {
        "hash": "47ed3bfc3b897114172b39571235069fe8feaa33",
        "author": "Andrew Kryczka",
        "date": "2017-08-08T17:20:52-07:00",
        "message": "fix WinEnv assertions\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2702\n\nDifferential Revision: D5585389\n\nPulled By: ajkr\n\nfbshipit-source-id: cb54041eb481d0d759c440f82a8a2c5b34534173",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/47ed3bfc3b897114172b39571235069fe8feaa33"
    },
    {
        "hash": "36375de76fb2b5a43d33154d0754551b1f71544f",
        "author": "James Page",
        "date": "2017-08-08T08:56:52-07:00",
        "message": "gcc-7/i386: markup intentional fallthroughs\n\nSummary:\nMarkup i386 code paths resolving compilation\nfailure under i386 with gcc-7.\n\nSigned-off-by: James Page <james.page@ubuntu.com>\nCloses https://github.com/facebook/rocksdb/pull/2700\n\nDifferential Revision: D5583047\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: fe31bcfeaf7cd2d3f51b55f5ae0b3b0cb3788fbc",
        "modified_files_count": 1,
        "modified_files": [
            "util/murmurhash.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/36375de76fb2b5a43d33154d0754551b1f71544f"
    },
    {
        "hash": "a9a4e89c386495d65e2afee33dcba6b09f072fe7",
        "author": "Maysam Yabandeh",
        "date": "2017-08-07T08:49:52-07:00",
        "message": "Fix valgrind complaint about initialization\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2697\n\nDifferential Revision: D5573894\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 8fc03ea8ea6f3f3bc0f68b64cf90243a70562dc4",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/transaction_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a9a4e89c386495d65e2afee33dcba6b09f072fe7"
    },
    {
        "hash": "20dc5e74f276bdcb26c44c13bced506a2d920d3f",
        "author": "Sagar Vemuri",
        "date": "2017-08-05T00:15:35-07:00",
        "message": "Optimize range-delete aggregator call in merge helper.\n\nSummary:\nIn the condition:\n```\nif (range_del_agg != nullptr &&\n    range_del_agg->ShouldDelete(\n        iter->key(),\n        RangeDelAggregator::RangePositioningMode::kForwardTraversal) &&\n    filter != CompactionFilter::Decision::kRemoveAndSkipUntil) {\n...\n}\n```\nit could be possible that all the work done in `range_del_agg->ShouldDelete` is wasted due to not having the right `filter` value later on.\nInstead, check `filter` value before even calling `range_del_agg->ShouldDelete`, which is a much more involved function.\nCloses https://github.com/facebook/rocksdb/pull/2690\n\nDifferential Revision: D5568931\n\nPulled By: sagar0\n\nfbshipit-source-id: 17512d52360425c7ae9de7675383f5d7bc3dad58",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/20dc5e74f276bdcb26c44c13bced506a2d920d3f"
    },
    {
        "hash": "0d4a2b733070a1bd52f981313f9e17f126701407",
        "author": "Yi Wu",
        "date": "2017-08-04T13:12:07-07:00",
        "message": "Avoid blob db call Sync() while writing\n\nSummary:\nThe FsyncFiles background job call Fsync() periodically for blob files. However it can access WritableFileWriter concurrently with a Put() or Write(). And WritableFileWriter does not support concurrent access. It will lead to WritableFileWriter buffer being flush with same content twice, and blob file end up corrupted. Fixing by simply let FsyncFiles hold write_mutex_.\nCloses https://github.com/facebook/rocksdb/pull/2685\n\nDifferential Revision: D5561908\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: f0bb5bcab0e05694e053b8c49eab43640721e872",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0d4a2b733070a1bd52f981313f9e17f126701407"
    },
    {
        "hash": "dce6d5a8385456eaf52a3b16043129b424e0de9f",
        "author": "Andrew Kryczka",
        "date": "2017-08-03T21:41:49-07:00",
        "message": "db_bench background work thread pool size arguments\n\nSummary:\nThe background thread pools' sizes weren't easily configurable by `max_background_compactions` and `max_background_flushes` in multi-instance setups. Introduced separate arguments for their sizes.\nCloses https://github.com/facebook/rocksdb/pull/2680\n\nDifferential Revision: D5550675\n\nPulled By: ajkr\n\nfbshipit-source-id: bab5f0a7bc5db63bb084d0c10facbe437096367d",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dce6d5a8385456eaf52a3b16043129b424e0de9f"
    },
    {
        "hash": "58410aee44e902735659b80364eecc0e075676e9",
        "author": "Maysam Yabandeh",
        "date": "2017-08-03T10:43:28-07:00",
        "message": "Fix the overflow bug in AwaitState\n\nSummary:\nhttps://github.com/facebook/rocksdb/issues/2559 reports an overflow in AwaitState. nbronson has debugged the issue and presented the fix, which is applied to this patch. Moreover this patch adds more comments to clarify the logic in AwaitState.\n\nI tried with both 16 and 64 threads on update benchmark. The fix lowers cpu usage by 1.6 but also lowers the throughput by 1.6 and 2% respectively. Apparently the bug had favored using the spinning more often.\n\nBenchmarks:\nTEST_TMPDIR=/dev/shm/tmpdb time ./db_bench --benchmarks=\"fillrandom\" --threads=16 --num=2000000\nTEST_TMPDIR=/dev/shm/tmpdb time ./db_bench --use_existing_db=1 --benchmarks=\"updaterandom[X3]\" --threads=16 --num=2000000\nTEST_TMPDIR=/dev/shm/tmpdb time ./db_bench --use_existing_db=1 --benchmarks=\"updaterandom[X3]\" --threads=64 --num=200000\n\nResults\n$ cat update-16t-bug.txt | tail -4\nupdaterandom [AVG    3 runs] : 234117 ops/sec;   51.8 MB/sec\nupdaterandom [MEDIAN 3 runs] : 233581 ops/sec;   51.7 MB/sec\n3896.42user 1539.12system 6:50.61elapsed 1323%CPU (0avgtext+0avgdata 331308maxresident)k\n0inputs+0outputs (0major+1281001minor)pagefaults 0swaps\n$ cat update-16t-fixed.txt | tail -4\nupdaterandom [AVG    3 runs] : 230364 ops/sec;   51.0 MB/sec\nupdaterandom [MEDIAN 3 runs] : 226169 ops/sec;   50.0 MB/sec\n3865.46user 1568.32system 6:57.63elapsed 1301%CPU (0avgtext+0avgdata 315012maxresident)k\n0inputs+0outputs (0major+1342568minor)pagefaults 0swaps\n\n$ cat update-64t-bug.txt | tail -4\nupdaterandom [AVG    3 runs] : 261878 ops/sec;   57.9 MB/sec\nupdaterandom [MEDIAN 3 runs] : 262859 ops/sec;   58.2 MB/sec\n926.27user 578.06system 2:27.46elapsed 1020%CPU (0avgtext+0avgdata 475480maxresident)k\n0inputs+0outputs (0major+1058728minor)pagefaults 0swaps\n$ cat update-64t-fixed.txt | tail -4\nupdaterandom [AVG    3 runs] : 256699 ops/sec;   56.8 MB/sec\nupdaterandom [MEDIAN 3 runs] : 256380 ops/sec;   56.7 MB/sec\n933.47user 575.37system 2:30.41elapsed 1003%CPU (0avgtext+0avgdata 482340maxresident)k\n0inputs+0outputs (0major+1078557minor)pagefaults 0swaps\nCloses https://github.com/facebook/rocksdb/pull/2679\n\nDifferential Revision: D5553732\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 98b72dc3a8e0f22ea29d4f7c7790af10c369c5bb",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_thread.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/58410aee44e902735659b80364eecc0e075676e9"
    },
    {
        "hash": "060ccd4f84e4b266dffd3fd9e38423270fb9b422",
        "author": "Andrew Kryczka",
        "date": "2017-08-02T16:27:01-07:00",
        "message": "support multiple CFs with OPTIONS file\n\nSummary:\nMove an option necessary for running db_bench on multiple CFs into the general initialization area, so it works with both flag-based init and OPTIONS-based init.\nCloses https://github.com/facebook/rocksdb/pull/2675\n\nDifferential Revision: D5541378\n\nPulled By: ajkr\n\nfbshipit-source-id: 169926cb4ae95c17974f744faf7cc794d41e5c0a",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/060ccd4f84e4b266dffd3fd9e38423270fb9b422"
    },
    {
        "hash": "3218edc573477a091058eebf565d57d6d1e25a93",
        "author": "奏之章",
        "date": "2017-07-31T14:27:45-07:00",
        "message": "Fix universal compaction bug\n\nSummary:\nthis value ``` Compaction::is_trivial_move_ ``` uninitialized .\nunder universal compaction , we enable ```  CompactionOptionsUniversal::allow_trivial_move  ``` ,\nhttps://github.com/facebook/rocksdb/blob/9b11d4345a0f01fc3de756e01460bf1b0446f326/db/compaction.cc#L245\nhere is a disastrous bug , some sst trivial move to target level without overlap check ...\nTHEN , DATABASE DAMAGED , WE GOT A LEVEL WITH OVERLAP !\nCloses https://github.com/facebook/rocksdb/pull/2634\n\nDifferential Revision: D5530722\n\nPulled By: siying\n\nfbshipit-source-id: 425ab55bca5967110377d634258360bcf88c200e",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3218edc573477a091058eebf565d57d6d1e25a93"
    },
    {
        "hash": "a84cee8127a0e9724b26e7d1d527f220c358c328",
        "author": "Siying Dong",
        "date": "2017-07-31T12:12:03-07:00",
        "message": "Add a missing \"once\" in .h\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2670\n\nDifferential Revision: D5529018\n\nPulled By: siying\n\nfbshipit-source-id: 10a378933d509035d2dbe502247dd85fcea09789",
        "modified_files_count": 1,
        "modified_files": [
            "util/cast_util.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a84cee8127a0e9724b26e7d1d527f220c358c328"
    },
    {
        "hash": "ac748c57ed72e021cfc7c24b4920737a1973ca97",
        "author": "Sagar Vemuri",
        "date": "2017-07-28T14:42:59-07:00",
        "message": "Fix FIFO Compaction with TTL tests\n\nSummary:\n- FIFOCompactionWithTTLTest was flaky when run in parallel earlier, and hence it was disabled. Fixed it now.\n- Also, faking sleep now instead of really sleeping to make tests more realistic by using TTLs like 1 hour and 1 day.\nCloses https://github.com/facebook/rocksdb/pull/2650\n\nDifferential Revision: D5506038\n\nPulled By: sagar0\n\nfbshipit-source-id: deb429a527f045e3e2c5138b547c3e8ac8586aa2",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ac748c57ed72e021cfc7c24b4920737a1973ca97"
    },
    {
        "hash": "f33f1136831e01232f532439628359f72188e419",
        "author": "Andrew Kryczka",
        "date": "2017-07-27T12:14:37-07:00",
        "message": "fix db_bench argument type\n\nSummary:\nit should be a bool\nCloses https://github.com/facebook/rocksdb/pull/2653\n\nDifferential Revision: D5506148\n\nPulled By: ajkr\n\nfbshipit-source-id: f142f0f3aa8b678c68adef12e5ac6e1e163306f3",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f33f1136831e01232f532439628359f72188e419"
    },
    {
        "hash": "9980de262c932e273965586f6268f7d9b561bcee",
        "author": "Sagar Vemuri",
        "date": "2017-07-26T12:12:26-07:00",
        "message": "Fix FIFO compaction picker test\n\nSummary:\nA FIFO compaction picker test is accidentally testing against an instance of level compaction picker.\nCloses https://github.com/facebook/rocksdb/pull/2641\n\nDifferential Revision: D5495390\n\nPulled By: sagar0\n\nfbshipit-source-id: 301962736f629b1c499570fb504cdbe66bacb46f",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9980de262c932e273965586f6268f7d9b561bcee"
    },
    {
        "hash": "30b58cf71a7a0f3c89889f8040829db1978f5240",
        "author": "Maysam Yabandeh",
        "date": "2017-07-25T18:41:52-07:00",
        "message": "Remove the orphan assert on !need_log_sync\n\nSummary:\nWe initially had disabled support for write_options.sync when concurrent_prepare_ is set. We later added this support but the statement that asserts this combination is not used was left there. This patch cleans it up.\nCloses https://github.com/facebook/rocksdb/pull/2642\n\nDifferential Revision: D5496101\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: becbc503446f2a51bee24cc861958c090c724ec2",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/30b58cf71a7a0f3c89889f8040829db1978f5240"
    },
    {
        "hash": "2b259c9d496af4c2a48a6664d9df32010f594264",
        "author": "Maysam Yabandeh",
        "date": "2017-07-25T11:42:26-07:00",
        "message": "Lower num of iterations in DeadlockCycle test\n\nSummary:\nCurrently this test times out with tsan. This is likely due to decreased speed with tsan. By lowering the number of iterations we can still catch a bug as the test is run regularly and multiple runs of the test is equivalent with running the test with more iterations.\nCloses https://github.com/facebook/rocksdb/pull/2639\n\nDifferential Revision: D5490549\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: bd69c42a9728d337ac95a06a401088384e51731a",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2b259c9d496af4c2a48a6664d9df32010f594264"
    },
    {
        "hash": "ea8ad4f6780509ef50a3e0e051aed0ae4a0a1d22",
        "author": "Islam AbdelRahman",
        "date": "2017-07-24T11:58:02-07:00",
        "message": "Fix compaction div by zero logging\n\nSummary:\nWe will divide by zero if `stats.micros` is zero, just add a simple check\nThis happens sometimes during running tests and UBSAN complains\nCloses https://github.com/facebook/rocksdb/pull/2631\n\nDifferential Revision: D5481455\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 69aa24e64e21de15d9e2b8009adf01675fcc6598",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ea8ad4f6780509ef50a3e0e051aed0ae4a0a1d22"
    },
    {
        "hash": "a4c42e80075f5dcdf21c33bc63b14af981c8a79a",
        "author": "Islam AbdelRahman",
        "date": "2017-07-24T10:54:37-07:00",
        "message": "Fix UBSAN issue of passing nullptr to memcmp\n\nSummary:\nAs explained in the comments, Sometimes we create Slice(nullptr, 0) in our code base which cause us to do calls like\n```\nmemcmp(nullptr, \"abc\", 0);\n```\nThat's fine since the len is equal 0, but UBSAN is not happy about it\nso disable UBSAN for this function and add an assert instead\nCloses https://github.com/facebook/rocksdb/pull/2616\n\nDifferential Revision: D5458326\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: cfca32abe30f7d8f760c9f77ecd9543dfb1170dd",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/slice.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a4c42e80075f5dcdf21c33bc63b14af981c8a79a"
    },
    {
        "hash": "0302da47a7f5be2a400572477f4bdb8ddc4af5f3",
        "author": "Yi Wu",
        "date": "2017-07-20T15:02:31-07:00",
        "message": "Reduce blob db noisy logging\n\nSummary:\nRemove some of the per-key logging by blob db to reduce noise.\nCloses https://github.com/facebook/rocksdb/pull/2587\n\nDifferential Revision: D5429115\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: b89328282fb8b3c64923ce48738c16017ce7feaf",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0302da47a7f5be2a400572477f4bdb8ddc4af5f3"
    },
    {
        "hash": "3e5ea29a83270e8a0a93afe471022fc41adc8180",
        "author": "Islam AbdelRahman",
        "date": "2017-07-20T11:29:01-07:00",
        "message": "Fix Flaky DeleteSchedulerTest::ImmediateDeleteOn25PercDBSize\n\nSummary:\nIn this test we are deleting 100 files, and we are expecting DeleteScheduler to delete 26 files in the background and 74 files immediately in the foreground\n\nThe main purpose of the test is to make sure that we delete files in foreground thread, which is verified in line 546\n\nBut sometimes we may end up with 26 files or 25 files in the trash directory because the background thread may be slow and not be able to delete the first file fast enough, so sometimes this test fail.\n\nRemove\n```\nASSERT_EQ(CountFilesInDir(trash_dir_), 25);\n```\nSince it does not have any benefit any way\nCloses https://github.com/facebook/rocksdb/pull/2618\n\nDifferential Revision: D5458674\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 5556a9edfa049db71dce80b8e6ae0fdd25e1e74e",
        "modified_files_count": 1,
        "modified_files": [
            "util/delete_scheduler_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3e5ea29a83270e8a0a93afe471022fc41adc8180"
    },
    {
        "hash": "ffd2a2eefdc6ad4223dff57a4ae1735b701c198a",
        "author": "Andrew Kryczka",
        "date": "2017-07-19T20:42:00-07:00",
        "message": "delete ExpandInputsToCleanCut failure log\n\nSummary:\nI decided not even to keep it as an INFO-level log as it is too normal for compactions to be skipped due to locked input files. Removing logging here makes us consistent with how we treat locked files that weren't pulled in due to overlap.\n\nWe may want some error handling on line 422, which should never happen when called by `LevelCompactionBuilder::PickCompaction`, as `SetupInitialFiles` skips compactions where overlap causes the output level to pull in locked files.\nCloses https://github.com/facebook/rocksdb/pull/2617\n\nDifferential Revision: D5458502\n\nPulled By: ajkr\n\nfbshipit-source-id: c2e5f867c0a77c1812ce4242ab3e085b3eee0bae",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ffd2a2eefdc6ad4223dff57a4ae1735b701c198a"
    },
    {
        "hash": "36651d14eeefaa3b17740e70bceacb3e096fde1a",
        "author": "Maysam Yabandeh",
        "date": "2017-07-18T16:58:22-07:00",
        "message": "Moving static AdaptationContext to outside function\n\nSummary:\nMoving static AdaptationContext to outside function to bypass tsan's false report with static initializers.\n\nIt is because with optimization enabled std::atomic is simplified to as a simple read with no locks. The existing lock produced by static initializer is __cxa_guard_acquire which is apparently not understood by tsan as it is different from normal locks (__gthrw_pthread_mutex_lock).\n\nThis is a known problem with tsan:\nhttps://stackoverflow.com/questions/27464190/gccs-tsan-reports-a-data-race-with-a-thread-safe-static-local\nhttps://stackoverflow.com/questions/42062557/c-multithreading-is-initialization-of-a-local-static-lambda-thread-safe\n\nA workaround that I tried was to move the static variable outside the function. It is not a good coding practice since it gives global visibility to variable but it is a hackish workaround until g++ tsan is improved.\nCloses https://github.com/facebook/rocksdb/pull/2598\n\nDifferential Revision: D5445281\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 6142bd934eb5852d8fd7ce027af593ba697ed41d",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_thread.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/36651d14eeefaa3b17740e70bceacb3e096fde1a"
    },
    {
        "hash": "ecff9d5e33a25377caacbf6fc8d4c1fe2664ab91",
        "author": "Andrew Kryczka",
        "date": "2017-07-18T12:42:42-07:00",
        "message": "Include write_buffer_manager in ImmutableDBOptions::Dump\n\nSummary:\nas titled\nCloses https://github.com/facebook/rocksdb/pull/2601\n\nDifferential Revision: D5441618\n\nPulled By: ajkr\n\nfbshipit-source-id: 334b098d90caadd3d07167d051cfb4ae65db98e1",
        "modified_files_count": 1,
        "modified_files": [
            "options/db_options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ecff9d5e33a25377caacbf6fc8d4c1fe2664ab91"
    },
    {
        "hash": "00464a3140ea88e9e3575407cae14259aa779b8c",
        "author": "Yi Wu",
        "date": "2017-07-17T15:08:24-07:00",
        "message": "Fix column_family_test with LITE build\n\nSummary:\nFix column_family_test with LITE build. I need this patch to fix 5.6 branch.\nCloses https://github.com/facebook/rocksdb/pull/2597\n\nDifferential Revision: D5437171\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 88b9dc5925a6b47af10c1b41bc5b07c4251a84b5",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/00464a3140ea88e9e3575407cae14259aa779b8c"
    },
    {
        "hash": "b2dd192fed1efae9a96a869f5d8b4f559726a41d",
        "author": "Chris Lamb",
        "date": "2017-07-17T11:27:10-07:00",
        "message": "tools/write_stress.cc: Correct \"1204\" typos.\n\nSummary:\nShould be 1024, obviously :)\nCloses https://github.com/facebook/rocksdb/pull/2592\n\nDifferential Revision: D5435269\n\nPulled By: ajkr\n\nfbshipit-source-id: c59338a3900798a4733f0b205e534f21215cf049",
        "modified_files_count": 1,
        "modified_files": [
            "tools/write_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b2dd192fed1efae9a96a869f5d8b4f559726a41d"
    },
    {
        "hash": "cbaab30449fdeea90e1d97721f1bbc25681e5e35",
        "author": "Daniel Black",
        "date": "2017-07-17T10:41:56-07:00",
        "message": "table/block.h: change memset\n\nSummary:\nIn gcc-7 the following is an error identified by -Werror=class-memaccess\n\nIn file included from ./table/get_context.h:14:0,\n                 from db/version_set.cc:43:\n./table/block.h: In constructor ‘rocksdb::BlockReadAmpBitmap::BlockReadAmpBitmap(size_t, size_t, rocksdb::Statistics*)’:\n./table/block.h:73:53: error: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct std::atomic<unsigned int>’ with no trivial copy-assignment; use value-initialization instead [-Werror=class-memaccess]\n     memset(bitmap_, 0, bitmap_size * kBytesPersEntry);\n                                                     ^\nIn file included from ./db/version_set.h:23:0,\n                 from db/version_set.cc:12:\n/toolchain/include/c++/8.0.0/atomic:684:12: note: ‘struct std::atomic<unsigned int>’ declared here\n     struct atomic<unsigned int> : __atomic_base<unsigned int>\n            ^~~~~~~~~~~~~~~~~~~~\n\nAs a solution the default initializer can be applied in list context.\n\nSigned-off-by: Daniel Black <daniel.black@au.ibm.com>\nCloses https://github.com/facebook/rocksdb/pull/2561\n\nDifferential Revision: D5398714\n\nPulled By: siying\n\nfbshipit-source-id: d883fb88ec7535eee60d551038fe91f14488be36",
        "modified_files_count": 1,
        "modified_files": [
            "table/block.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cbaab30449fdeea90e1d97721f1bbc25681e5e35"
    },
    {
        "hash": "ccf5f08f882038e8b481fafa0a0c0b1a04f6a390",
        "author": "Daniel Black",
        "date": "2017-07-14T15:13:46-07:00",
        "message": "Set CACHE_LINE_SIZE for s390, PPC, ARM64\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2579\n\nDifferential Revision: D5427667\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: cd0b076aa0cd38d3554516f01723c548713ece61",
        "modified_files_count": 1,
        "modified_files": [
            "port/port_posix.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ccf5f08f882038e8b481fafa0a0c0b1a04f6a390"
    },
    {
        "hash": "5bfb67d90f4a6d93d881957bc1ecb0204b643e53",
        "author": "Yi Wu",
        "date": "2017-07-13T16:27:38-07:00",
        "message": "Enable write rate limit for updaterandom benchmark\n\nSummary:\nWe have FLAGS_benchmark_write_rate_limit to limit write rate in\ndb_bench, but it was not in use for updaterandom benchmark.\nCloses https://github.com/facebook/rocksdb/pull/2578\n\nDifferential Revision: D5420328\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 5fa48c2b88f2f2dc83d615cb9c40c472bc916835",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5bfb67d90f4a6d93d881957bc1ecb0204b643e53"
    },
    {
        "hash": "98d1a5510b10f4704d3592a969dfa0147b632247",
        "author": "Siying Dong",
        "date": "2017-07-13T12:14:17-07:00",
        "message": "db_bench to by default verify checksum\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2575\n\nDifferential Revision: D5417350\n\nPulled By: siying\n\nfbshipit-source-id: 4bc11e35a7256167a5a7d2f586f2ac74c0deddb0",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/98d1a5510b10f4704d3592a969dfa0147b632247"
    },
    {
        "hash": "43e4eef77f33fcc5992bc2df7fb317afe59b190a",
        "author": "Aaron Gao",
        "date": "2017-07-12T18:14:41-07:00",
        "message": "remove unnecessary fadvise\n\nSummary:\nWe has to remove this line because previously it is only called when use_os_buffer = false. But now we have direct io to replace it.\nCloses https://github.com/facebook/rocksdb/pull/2573\n\nDifferential Revision: D5412824\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 81f3f0cdf94566bfc09ef2ff123e40cddbe36b36",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/43e4eef77f33fcc5992bc2df7fb317afe59b190a"
    },
    {
        "hash": "269d383d5d4c5f363cde08b5a3cf723d591cc4ef",
        "author": "Islam AbdelRahman",
        "date": "2017-07-11T14:29:13-07:00",
        "message": "Bump version to 5.7\n\nSummary:\nBump version to 5.7\nCloses https://github.com/facebook/rocksdb/pull/2566\n\nDifferential Revision: D5400043\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 74aae4ff143d370d7d89807e5be08a6ab827da40",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/269d383d5d4c5f363cde08b5a3cf723d591cc4ef"
    },
    {
        "hash": "c32f27223b0b208b06ebfc8e28610465d6c58880",
        "author": "Yi Wu",
        "date": "2017-07-11T14:14:38-07:00",
        "message": "Fixes db_bench with blob db\n\nSummary:\n* Create info log before db open to make blob db able to log to LOG file.\n* Properly destroy blob db.\nCloses https://github.com/facebook/rocksdb/pull/2567\n\nDifferential Revision: D5400034\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: a49cfaf4b5c67d42d4cbb872bd5a9441828c17ce",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c32f27223b0b208b06ebfc8e28610465d6c58880"
    },
    {
        "hash": "fcd99d27c9b048f4a1b3bc3b8e8ac2c411bf1575",
        "author": "Daniel Black",
        "date": "2017-07-11T10:41:06-07:00",
        "message": "db_bench_tool: fix buffer size\n\nSummary:\nFound by gcc warning:\n\nx86_64-pc-linux-gnu-g++ --version\nx86_64-pc-linux-gnu-g++ (GCC) 7.1.1 20170710\n\ntools/db_bench_tool.cc: In member function 'void rocksdb::Benchmark::RandomWithVerify(rocksdb::ThreadState*)':\ntools/db_bench_tool.cc:4430:8: error: '%lu' directive output may be truncated writing between 1 and 19 bytes into a region of size between 0 and 66 [-Werror=format-truncation=]\n   void RandomWithVerify(ThreadState* thread) {\n        ^~~~~~~~~~~~~~~~\ntools/db_bench_tool.cc:4430:8: note: directive argument in the range [0, 9223372036854775807]\ntools/db_bench_tool.cc:4492:13: note: 'snprintf' output between 37 and 128 bytes into a destination of size 100\n     snprintf(msg, sizeof(msg),\n     ~~~~~~~~^~~~~~~~~~~~~~~~~~\n              \"( get:%\" PRIu64 \" put:%\" PRIu64 \" del:%\" PRIu64 \" total:%\" \\\n              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n              PRIu64 \" found:%\" PRIu64 \")\",\n              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n              gets_done, puts_done, deletes_done, readwrites_, found);\n              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ncc1plus: all warnings being treated as errors\nMakefile:1707: recipe for target 'tools/db_bench_tool.o' failed\nCloses https://github.com/facebook/rocksdb/pull/2558\n\nDifferential Revision: D5398703\n\nPulled By: siying\n\nfbshipit-source-id: 6ffa552bbd8b59cfc2c36289f86ff9b9acca8ca6",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fcd99d27c9b048f4a1b3bc3b8e8ac2c411bf1575"
    },
    {
        "hash": "56656e12d67d8a63f1e4c4214da9feeec2bd442b",
        "author": "Sagar Vemuri",
        "date": "2017-07-07T20:12:58-07:00",
        "message": "Temporarily disable FIFOCompactionWithTTLTest\n\nSummary:\nFIFOCompactionWithTTLTests are flaky when run in parallel, as there is a time element involved to it. Temporarily disabling them while I investigate a more robust testing solution like, say,  mocking time.\nCloses https://github.com/facebook/rocksdb/pull/2548\n\nDifferential Revision: D5386084\n\nPulled By: sagar0\n\nfbshipit-source-id: 262886b25bdf091021d8553e780443a985e9bac4",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/56656e12d67d8a63f1e4c4214da9feeec2bd442b"
    },
    {
        "hash": "b5fb85ec51ce9e2c79fbf5f2ffaa579c116ecdc9",
        "author": "Maysam Yabandeh",
        "date": "2017-07-07T18:27:08-07:00",
        "message": "fix valgrind init complaint\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2549\n\nDifferential Revision: D5386307\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 3032c95c54755053b6450765ec4dacbecb734f9d",
        "modified_files_count": 1,
        "modified_files": [
            "util/transaction_test_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b5fb85ec51ce9e2c79fbf5f2ffaa579c116ecdc9"
    },
    {
        "hash": "657df29eafb0d34cab1c757d32bf9ad1b5dd1daf",
        "author": "Andrew Kryczka",
        "date": "2017-07-07T18:13:21-07:00",
        "message": "Add max_background_jobs to db_bench\n\nSummary:\nAs titled. Also fixed an off-by-one error causing us to add one less range deletion than the user specified.\nCloses https://github.com/facebook/rocksdb/pull/2544\n\nDifferential Revision: D5383451\n\nPulled By: ajkr\n\nfbshipit-source-id: cbd5890c33f09bbb5c0c1f4bb952a1add32336e0",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/657df29eafb0d34cab1c757d32bf9ad1b5dd1daf"
    },
    {
        "hash": "7c4a9e6c928f4190262e3e735c7db2fa7c5aa466",
        "author": "Siying Dong",
        "date": "2017-07-06T15:56:57-07:00",
        "message": "Initialize a variable in ldb to make code analysis tool happy\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2529\n\nDifferential Revision: D5378787\n\nPulled By: siying\n\nfbshipit-source-id: 801ecacc2804f77cb3c9e5e665829e439db68800",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7c4a9e6c928f4190262e3e735c7db2fa7c5aa466"
    },
    {
        "hash": "98669b53568dab0ce9d53cdbfc3c1f88671c821c",
        "author": "Maysam Yabandeh",
        "date": "2017-07-06T08:48:53-07:00",
        "message": "init filters_in_partition_\n\nSummary:\nValgrind reports that it is not initialized.\nCloses https://github.com/facebook/rocksdb/pull/2541\n\nDifferential Revision: D5376084\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 55c312f4f506863aa0d25ff92c8c34b57f48b860",
        "modified_files_count": 1,
        "modified_files": [
            "table/partitioned_filter_block.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/98669b53568dab0ce9d53cdbfc3c1f88671c821c"
    },
    {
        "hash": "0013bf14efd463edd2193725f2e6b7529f6b17b0",
        "author": "Maysam Yabandeh",
        "date": "2017-07-05T19:11:39-07:00",
        "message": "fix asan and valgrind leak report in test\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2537\n\nDifferential Revision: D5371433\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 90d3e8bb1a8576f48b1ddf1bdbba5512b5986ba0",
        "modified_files_count": 1,
        "modified_files": [
            "table/partitioned_filter_block_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0013bf14efd463edd2193725f2e6b7529f6b17b0"
    },
    {
        "hash": "1cb8c6de635ee0c5ecf168e281739c29d0c19239",
        "author": "Siying Dong",
        "date": "2017-06-30T15:27:03-07:00",
        "message": "Add -enable_pipelined_write to db_bench and add two defaults\n\nSummary:\nExpose pipeline write in db_bench and change the default to parallel memtable inserts\nCloses https://github.com/facebook/rocksdb/pull/2527\n\nDifferential Revision: D5359825\n\nPulled By: siying\n\nfbshipit-source-id: e30755feb07ff19a731c4058acf101e02de4e197",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1cb8c6de635ee0c5ecf168e281739c29d0c19239"
    },
    {
        "hash": "7604b463b5dd7bc3017b675c4ec25c98caa64b7d",
        "author": "Maysam Yabandeh",
        "date": "2017-06-30T10:56:50-07:00",
        "message": "Update the AddDBStats in LITE\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2525\n\nDifferential Revision: D5356859\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: f593adad2a8aab12dcd6ab25db076eca51d30d34",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7604b463b5dd7bc3017b675c4ec25c98caa64b7d"
    },
    {
        "hash": "d310e0f33977d4e297bf25a98eef79d1a02513d7",
        "author": "Andrew Kryczka",
        "date": "2017-06-30T00:11:25-07:00",
        "message": "Regression test for empty dedicated range deletion file\n\nSummary:\nIssue: #2478\nFix: #2503\n\nThe bug happened when all of these conditions were satisfied:\n\n- A subcompaction generates no keys\n- `RangeDelAggregator::ShouldAddTombstones()` returns true because there's at least one non-obsoleted range deletion in its map\n- None of the non-obsolete tombstones overlap with the subcompaction key-range\n\nUnder those conditions, we were creating a dedicated file for range deletions which was left empty, thus causing an error in VersionEdit.\n\nI verified this test case fails before the #2503 fix and passes after.\nCloses https://github.com/facebook/rocksdb/pull/2521\n\nDifferential Revision: D5352568\n\nPulled By: ajkr\n\nfbshipit-source-id: f619cae39984ce9bb9b7a4e7a9ac0f2bb2ce43e9",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_range_del_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d310e0f33977d4e297bf25a98eef79d1a02513d7"
    },
    {
        "hash": "89468c01d4a5653b4455b8a6d753d707898e1182",
        "author": "Siying Dong",
        "date": "2017-06-26T17:28:22-07:00",
        "message": "Fix Windows build broken by 5c97a7c0664d4071768113814e9ba71fe87e18cf\n\nSummary:\nA typo conversion fails Windows build. Fix it.\nCloses https://github.com/facebook/rocksdb/pull/2500\n\nDifferential Revision: D5325962\n\nPulled By: siying\n\nfbshipit-source-id: 2cefdafc9afbc85f856f403af7c876b622400630",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_io_failure_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/89468c01d4a5653b4455b8a6d753d707898e1182"
    },
    {
        "hash": "8e6345d2df40756c5ef62f3190cb152058fec890",
        "author": "Maysam Yabandeh",
        "date": "2017-06-24T18:12:03-07:00",
        "message": "Update rename of ParanoidCheck\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2494\n\nDifferential Revision: D5317902\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 097330292180816b3d0c9f4cbbdb6f68f0180200",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8e6345d2df40756c5ef62f3190cb152058fec890"
    },
    {
        "hash": "0ac4afb9750a2bdf27aa710a3ca764301ca64c76",
        "author": "Maysam Yabandeh",
        "date": "2017-06-23T18:30:01-07:00",
        "message": "Sanitize partitioning options\n\nSummary:\nWe currently do not support partitioning filters if indexes are not partitioned. The patch makes sure that these two are consistent.\nCloses https://github.com/facebook/rocksdb/pull/2455\n\nDifferential Revision: D5275644\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: b61701ac8914c2206d06f5e33ff6f67b24406d1d",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_factory.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ac4afb9750a2bdf27aa710a3ca764301ca64c76"
    },
    {
        "hash": "521724ba8279df153ceb96eeba30a76904687853",
        "author": "jsteemann",
        "date": "2017-06-23T09:41:19-07:00",
        "message": "fixed wrong type for \"allow_compaction\" parameter\n\nSummary:\nshould be boolean, not uint64_t\nMSVC complains about it during compilation with error `include\\rocksdb\\advanced_options.h(77): warning C4800: 'uint64_t': forcing value to bool 'true' or 'false' (performance warning)`\nCloses https://github.com/facebook/rocksdb/pull/2487\n\nDifferential Revision: D5310685\n\nPulled By: siying\n\nfbshipit-source-id: 719a33b3dba4f711aa72e3f229013c188015dc86",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/advanced_options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/521724ba8279df153ceb96eeba30a76904687853"
    },
    {
        "hash": "9467eb6141a6043f9ab1f225b9096e79104a3952",
        "author": "Andrew Kryczka",
        "date": "2017-06-20T16:43:44-07:00",
        "message": "Fix flush assertion with tsan\n\nSummary:\nDBImpl's instance variables should only be accessed with mutex held. I moved an assert later to uphold this rule.\n\nDBTest.LastWriteBufferDelay test was sporadically failing TSAN because it tried to flush around the same time the db was destroyed, so the variable was accessed simultaneously by two threads.\nCloses https://github.com/facebook/rocksdb/pull/2471\n\nDifferential Revision: D5286857\n\nPulled By: ajkr\n\nfbshipit-source-id: 435abd84efa601f667c254e320b0bb5a434b971f",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9467eb6141a6043f9ab1f225b9096e79104a3952"
    },
    {
        "hash": "048446fc7412d5201bbceac234eb3c18cf31e4c5",
        "author": "Andrew Kryczka",
        "date": "2017-06-20T13:27:16-07:00",
        "message": "Fix cassandra ASAN use-after-free\n\nSummary:\nWhen we create a column based on the `string::c_str()`, we need to make sure that char array doesn't get deleted when calls to `string::append()` cause the string to expand.\nCloses https://github.com/facebook/rocksdb/pull/2470\n\nDifferential Revision: D5285049\n\nPulled By: ajkr\n\nfbshipit-source-id: f918dd426ff3c024e7a293dcb10448f10b6c98e8",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/merge_operators/cassandra/format_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/048446fc7412d5201bbceac234eb3c18cf31e4c5"
    },
    {
        "hash": "c430d69eed8f159e9995ed5d5fd103ddf29cf396",
        "author": "zhangjinpeng1987",
        "date": "2017-06-19T11:41:38-07:00",
        "message": "fix coredump for release nullptr\n\nSummary:\nCoredump will be triggered when ingest external sst file after delete range.\nref https://github.com/facebook/rocksdb/issues/2398\nCloses https://github.com/facebook/rocksdb/pull/2463\n\nDifferential Revision: D5275599\n\nPulled By: ajkr\n\nfbshipit-source-id: 0828dbc062ea8c74e913877cd63494fd3478a30d",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c430d69eed8f159e9995ed5d5fd103ddf29cf396"
    },
    {
        "hash": "0d278456c9e94459aa62d50ba18b10bcc166a75f",
        "author": "Andrew Kryczka",
        "date": "2017-06-18T12:42:42-07:00",
        "message": "default implementation for InRange\n\nSummary:\nit's confusing to implementors of prefix extractor to implement an unused function\nCloses https://github.com/facebook/rocksdb/pull/2460\n\nDifferential Revision: D5267408\n\nPulled By: ajkr\n\nfbshipit-source-id: 2f1fe3131efc978f6098ae7a80e52bc7a0b13571",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/slice_transform.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0d278456c9e94459aa62d50ba18b10bcc166a75f"
    },
    {
        "hash": "2c98b06bff6f4c23ed84eb8a76e8a7b16023edac",
        "author": "Maysam Yabandeh",
        "date": "2017-06-15T16:14:08-07:00",
        "message": "Remove pin_slice option by making it the default\n\nSummary:\nThis would simplify db_bench_tool.cc\nCloses https://github.com/facebook/rocksdb/pull/2457\n\nDifferential Revision: D5259035\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 0a9c3abda624070fe2650200b885ad7e1c60182c",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2c98b06bff6f4c23ed84eb8a76e8a7b16023edac"
    },
    {
        "hash": "c80c6115de6019880a304b543803415da4a0701c",
        "author": "Maysam Yabandeh",
        "date": "2017-06-15T16:14:08-07:00",
        "message": "add db_bench options for partitioning\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2456\n\nDifferential Revision: D5259083\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 1ed1746da7a8baadf4772d023d927c6c4e6b112a",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c80c6115de6019880a304b543803415da4a0701c"
    },
    {
        "hash": "53dda8797d17514895df06d780ec2ad2314349cb",
        "author": "Sagar Vemuri",
        "date": "2017-06-14T14:58:02-07:00",
        "message": "Do not run RateLimiterTest.Rate test on Travis+Mac OSX.\n\nSummary:\nRateLimiterTest.Rate test has been failing continuously since many days on travis in Mac OSX PLATFORM_DEPENDENT test suite.\nCheck https://travis-ci.org/facebook/rocksdb/pull_requests.\n\nDisabling this test for now, so that we can investigate more in depth.\nCloses https://github.com/facebook/rocksdb/pull/2451\n\nDifferential Revision: D5250147\n\nPulled By: sagar0\n\nfbshipit-source-id: d58476a3c2792d20e875754d1516c4bc7174e86c",
        "modified_files_count": 1,
        "modified_files": [
            "util/rate_limiter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/53dda8797d17514895df06d780ec2ad2314349cb"
    },
    {
        "hash": "0f228be3bbc157f6a93bd229a90249fef217759d",
        "author": "haoxiang",
        "date": "2017-06-13T16:41:36-07:00",
        "message": "fixed typo in util/dynamic_bloom.h\n\nSummary:\nfixed a typo in util/dynamic_bloom.h\nCloses https://github.com/facebook/rocksdb/pull/2442\n\nDifferential Revision: D5242397\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: c47fd18cc79afff6b022201a0410c0cd47626576",
        "modified_files_count": 1,
        "modified_files": [
            "util/dynamic_bloom.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0f228be3bbc157f6a93bd229a90249fef217759d"
    },
    {
        "hash": "5d5a28a98ce287c35b45a15dbf77055811981e55",
        "author": "Siying Dong",
        "date": "2017-06-13T04:56:35-07:00",
        "message": "Fix Clang release build broken by 5582123dee8426a5191dfd5e846cea8c676c793c\n\nSummary:\n5582123dee8426a5191dfd5e846cea8c676c793c broken CLANG release build because of an unexpected change. Fix it.\nCloses https://github.com/facebook/rocksdb/pull/2443\n\nDifferential Revision: D5236297\n\nPulled By: siying\n\nfbshipit-source-id: 1b410adf13ded149c53e8235e9ea9f3130fb5403",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5d5a28a98ce287c35b45a15dbf77055811981e55"
    },
    {
        "hash": "7a270069b357c3cccc5afe5f3aa71a08c1dcac0e",
        "author": "Anirban Rahut",
        "date": "2017-06-13T04:41:35-07:00",
        "message": "GNU C library for struct tm has 2 additional fields.\n\nSummary:\ninitialize 2 additional fields tm_gmtoff and tm_zone,\notherwise under strict warnings for initialization, we get errors\nin myrocks.\nCloses https://github.com/facebook/rocksdb/pull/2439\n\nDifferential Revision: D5229013\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 9fc1615a1919656f36064791706ed41e10e9db84",
        "modified_files_count": 1,
        "modified_files": [
            "env/mock_env.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7a270069b357c3cccc5afe5f3aa71a08c1dcac0e"
    },
    {
        "hash": "bc09c8a0db2c99f37d2f26c85d47e9ab6ee3486a",
        "author": "Mike Kolupaev",
        "date": "2017-06-08T19:56:22-07:00",
        "message": "Fix crash in PosixWritableFile::Close() when fstat() fails\n\nSummary:\nWe had a crash in this code: `fstat()` failed; `file_stats` contained garbage, in particular `file_stats.st_blksize == 6`; the expression `file_stats.st_blocks / (file_stats.st_blksize / 512)` divided by zero.\nCloses https://github.com/facebook/rocksdb/pull/2420\n\nDifferential Revision: D5216110\n\nPulled By: al13n321\n\nfbshipit-source-id: 6d8fc5e7c4f98c1139e68c7829ebdbac68b0fce0",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bc09c8a0db2c99f37d2f26c85d47e9ab6ee3486a"
    },
    {
        "hash": "6d0f22e42faa62982d347ad7485d840c3ee172e6",
        "author": "Yi Wu",
        "date": "2017-06-08T17:41:59-07:00",
        "message": "Fix mock_env.cc uninitialized variable\n\nSummary:\nMingw is complaining about uninitialized variable in mock_env.cc. e.g. https://travis-ci.org/facebook/rocksdb/jobs/240132276\nThe fix is to initialize the variable.\nCloses https://github.com/facebook/rocksdb/pull/2428\n\nDifferential Revision: D5211306\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: ee02bf0327dcea8590a2aa087f0176fecaf8621c",
        "modified_files_count": 1,
        "modified_files": [
            "env/mock_env.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6d0f22e42faa62982d347ad7485d840c3ee172e6"
    },
    {
        "hash": "85dace2afa3f591577ce69603ff67df62da7cb74",
        "author": "Yi Wu",
        "date": "2017-06-08T12:43:01-07:00",
        "message": "Disable DBRangeDelTest::TailingIteratorRangeTombstoneUnsupported for ubsan\n\nSummary:\nUBSAN crashes when it run the test. Disabling it for UBSAN.\nCloses https://github.com/facebook/rocksdb/pull/2427\n\nDifferential Revision: D5210897\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 2f5a876807c98d8db79ab9581965f7e6b29d4163",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_range_del_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/85dace2afa3f591577ce69603ff67df62da7cb74"
    },
    {
        "hash": "d4f7731b612f66bf726ba18c6cd7545b28c11769",
        "author": "Maysam Yabandeh",
        "date": "2017-06-08T10:41:18-07:00",
        "message": "fix travis error with init time in mockenv\n\nSummary:\n/home/travis/build/facebook/rocksdb/env/mock_env.cc: In member function ‘virtual void rocksdb::{anonymous}::TestMemLogger::Logv(const char*, va_list)’:\n/home/travis/build/facebook/rocksdb/env/mock_env.cc:391:53: error: ‘t.tm::tm_year’ may be used uninitialized in this function [-Werror=maybe-uninitialized]\n                     static_cast<int>(now_tv.tv_usec));\nCloses https://github.com/facebook/rocksdb/pull/2418\n\nDifferential Revision: D5193597\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 8801a3ef27f33eb419d534f7de747702cdf504a0",
        "modified_files_count": 1,
        "modified_files": [
            "env/mock_env.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d4f7731b612f66bf726ba18c6cd7545b28c11769"
    },
    {
        "hash": "cc5f9339ee65d1a35c749a3c1eed0e1bac1a6a1c",
        "author": "Maysam Yabandeh",
        "date": "2017-06-06T12:56:52-07:00",
        "message": "Fix concurrency issue with filter_block_set_\n\nSummary:\nfilter_block_set_ access must also be protected with mutex.\nCloses https://github.com/facebook/rocksdb/pull/2413\n\nDifferential Revision: D5193159\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 6987fc219d9a65c20b9c7e52151aef4b8e4882e6",
        "modified_files_count": 1,
        "modified_files": [
            "table/partitioned_filter_block.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cc5f9339ee65d1a35c749a3c1eed0e1bac1a6a1c"
    },
    {
        "hash": "2e64f450dc73104f3ba56651e82abf35ef59f74e",
        "author": "Aaron Gao",
        "date": "2017-06-05T16:15:21-07:00",
        "message": "bump version to 5.6\n\nSummary:\nBump version to 5.6 beforehand in master\nCloses https://github.com/facebook/rocksdb/pull/2411\n\nDifferential Revision: D5186896\n\nPulled By: lightmark\n\nfbshipit-source-id: 079538e621b1a959c2dc99dada894e9cdb99ef95",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2e64f450dc73104f3ba56651e82abf35ef59f74e"
    },
    {
        "hash": "dba9f3722bb74ddfef7269eb583f210817059a68",
        "author": "Yi Wu",
        "date": "2017-06-05T12:27:24-07:00",
        "message": "Fix db_write_test clang/windows build failure\n\nSummary:\nFix db_write_test clang/windows build failure. Explicitly cast size_t (unsigned long) to uint32_t (unsigned int).\nCloses https://github.com/facebook/rocksdb/pull/2407\n\nDifferential Revision: D5182995\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: aba225a9fccb12d5bfbdc2cd6efc11040706a9d2",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_write_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dba9f3722bb74ddfef7269eb583f210817059a68"
    },
    {
        "hash": "7e8d95cc0eae778351cba560d58aa63ea853d2af",
        "author": "Adam Retter",
        "date": "2017-06-04T18:41:33-07:00",
        "message": "Fix the Java build which was broken by a4d9c02\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2406\n\nDifferential Revision: D5181091\n\nPulled By: ajkr\n\nfbshipit-source-id: fd72525da4fb1d50143080a210f8d824cbb968d6",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/write_batch_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7e8d95cc0eae778351cba560d58aa63ea853d2af"
    },
    {
        "hash": "f68d88be51cc2ed7d9f0e4f09800b3b3320f2ffb",
        "author": "Yi Wu",
        "date": "2017-06-02T11:42:11-07:00",
        "message": "Fix DBWriteTest::ReturnSequenceNumberMultiThreaded data race\n\nSummary:\nrocksdb::Random is not thread-safe. Have one Random for each thread instead.\nCloses https://github.com/facebook/rocksdb/pull/2400\n\nDifferential Revision: D5173919\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 1a99c7b877f3893eb22355af49e321bcad4e53e6",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_write_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f68d88be51cc2ed7d9f0e4f09800b3b3320f2ffb"
    },
    {
        "hash": "bbaba51bbff633cecb28b53ab7ec79bebe1b84aa",
        "author": "Volker Mische",
        "date": "2017-06-01T11:27:04-07:00",
        "message": "Add missing index type to C-API\n\nSummary:\nWhen the `TwoLevelIndexSearch` was introduced, it wasn't added to\nthe C-API.\nCloses https://github.com/facebook/rocksdb/pull/2395\n\nDifferential Revision: D5165127\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: d077f16ab5646c18158d8202a33b0fd076c6c8ad",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bbaba51bbff633cecb28b53ab7ec79bebe1b84aa"
    },
    {
        "hash": "d03c34497c403b22b3d00a0b7c6292ef45f8bdc5",
        "author": "赵星宇",
        "date": "2017-05-26T15:12:13-07:00",
        "message": "update comment of GetNextFile\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2377\n\nDifferential Revision: D5141274\n\nPulled By: lightmark\n\nfbshipit-source-id: c237a285b73ad93488c080ea80c71a29a17f1be0",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d03c34497c403b22b3d00a0b7c6292ef45f8bdc5"
    },
    {
        "hash": "7bb1f5d4834b8f23d9a7ac0a1f636e280f8e55a6",
        "author": "Sagar Vemuri",
        "date": "2017-05-26T09:56:13-07:00",
        "message": "Increase of compaction threads should be logged at info level instead of a warning\n\nSummary:\nThis log message shouldn't be a warning; some services are seeing high warning count due to this.\n\nThe count for the below line is a few hundreds of millions, as per Logview:\n```\n[rocksdb/src/db/column_family.cc:729] [checkpoints] Increasing compaction threads because we have 2 level-0 files\n```\nCloses https://github.com/facebook/rocksdb/pull/2364\n\nDifferential Revision: D5123565\n\nPulled By: sagar0\n\nfbshipit-source-id: a07ce499a4f82f0ebde9cda9f4948fb9df6a734c",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7bb1f5d4834b8f23d9a7ac0a1f636e280f8e55a6"
    },
    {
        "hash": "0be636bf70003639d874b6cfb44913954ed7e095",
        "author": "Yi Wu",
        "date": "2017-05-25T14:11:22-07:00",
        "message": "Fix db_bench build break with blob db\n\nSummary:\nLite build does not recognize FLAGS_use_blob_db. Fixing it.\nCloses https://github.com/facebook/rocksdb/pull/2372\n\nReviewed By: anirbanr-fb\n\nDifferential Revision: D5130773\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 43131d9d0be5811f2129af562be72cca26369cb3",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0be636bf70003639d874b6cfb44913954ed7e095"
    },
    {
        "hash": "135ee6a3fcdfab12ab357a29ab358d14974caf04",
        "author": "Aaron Gao",
        "date": "2017-05-25T10:44:07-07:00",
        "message": "fix tsan crash data race\n\nSummary:\nrand_ has data race risk\nTEST_TMPDIR=\\/dev\\/shm\\/rocksdb OPT=-g COMPILE_WITH_TSAN=1 CRASH_TEST_KILL_ODD=1887 make J=1 crash_test\nCloses https://github.com/facebook/rocksdb/pull/2368\n\nDifferential Revision: D5127424\n\nPulled By: lightmark\n\nfbshipit-source-id: b7f4d1430a5769b57da9f99037106749264b2ced",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/135ee6a3fcdfab12ab357a29ab358d14974caf04"
    },
    {
        "hash": "a99fb9928fefa030c187bbd0983eb00be3daf587",
        "author": "Andrew Kryczka",
        "date": "2017-05-24T16:41:51-07:00",
        "message": "fix column_family_test asan\n\nSummary:\nstop calling Close() at the end of tests holding a compaction pressure token since it causes the write controller to be deleted while it's still needed. these calls were pointless anyways since Close() is already called in the test's destructor.\nCloses https://github.com/facebook/rocksdb/pull/2367\n\nDifferential Revision: D5125906\n\nPulled By: ajkr\n\nfbshipit-source-id: 6cad8673e5546a82ff602ac0ba59cc3f68dbde46",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a99fb9928fefa030c187bbd0983eb00be3daf587"
    },
    {
        "hash": "02594b5f11df09252c2bae13433b2d7c7d8efed2",
        "author": "Sagar Vemuri",
        "date": "2017-05-24T00:11:36-07:00",
        "message": "Fix build errors in blob_dump_tool with GCC 4.8\n\nSummary:\nFixing the build errors seen with GCC 4.8.1.\n```\nMakefile:105: Warning: Compiling in debug mode. Don't use the resulting binary in production\nutilities/blob_db/blob_dump_tool.cc: In member function ‘rocksdb::Status rocksdb::blob_db::BlobDumpTool::DumpBlobLogFooter(uint64_t, uint64_t*)’:\nutilities/blob_db/blob_dump_tool.cc:149:42: error: expected ‘)’ before ‘PRIu64’\n   fprintf(stdout, \"  Blob count     : %\" PRIu64 \"\\n\", footer.GetBlobCount());\n                                          ^\nutilities/blob_db/blob_dump_tool.cc:149:76: error: spurious trailing ‘%’ in format [-Werror=format=]\n   fprintf(stdout, \"  Blob count     : %\" PRIu64 \"\\n\", footer.GetBlobCount());\n                                                                            ^\nutilities/blob_db/blob_dump_tool.cc:149:76: error: too many arguments for format [-Werror=format-extra-args]\nutilities/blob_db/blob_dump_tool.cc: In member function ‘rocksdb::Status rocksdb::blob_db::BlobDumpTool::DumpRecord(rocksdb::blob_db::BlobDumpTool::DisplayType, rocksdb::blob_db::BlobDumpTool::DisplayType, uint64_t*)’:\nutilities/blob_db/blob_dump_tool.cc:161:49: error: expected ‘)’ before ‘PRIx64’\n   fprintf(stdout, \"Read record with offset 0x%\" PRIx64 \" (%\" PRIu64 \"):\\n\",\n                                                 ^\nutilities/blob_db/blob_dump_tool.cc:162:27: error: spurious trailing ‘%’ in format [-Werror=format=]\n           *offset, *offset);\n                           ^\nutilities/blob_db/blob_dump_tool.cc:162:27: error: too many arguments for format [-Werror=format-extra-args]\nutilities/blob_db/blob_dump_tool.cc:176:38: error: expected ‘)’ before ‘PRIu64’\n   fprintf(stdout, \"  blob size  : %\" PRIu64 \"\\n\", record.GetBlobSize());\n                                      ^\nutilities/blob_db/blob_dump_tool.cc:176:71: error: spurious trailing ‘%’ in format [-Werror=format=]\n   fprintf(stdout, \"  blob size  : %\" PRIu64 \"\\n\", record.GetBlobSize());\n                                                                       ^\nutilities/blob_db/blob_dump_tool.cc:176:71: error: too many arguments for format [-Werror=format-extra-args]\nutilities/blob_db/blob_dump_tool.cc:178:38: error: expected ‘)’ before ‘PRIu64’\n   fprintf(stdout, \"  time       : %\" PRIu64 \"\\n\", record.GetTimeVal());\n                                      ^\nutilities/blob_db/blob_dump_tool.cc:178:70: error: spurious trailing ‘%’ in format [-Werror=format=]\n   fprintf(stdout, \"  time       : %\" PRIu64 \"\\n\", record.GetTimeVal());\n                                                                      ^\nutilities/blob_db/blob_dump_tool.cc:178:70: error: too many arguments for format [-Werror=format-extra-args]\nutilities/blob_db/blob_dump_tool.cc:214:38: error: expected ‘)’ before ‘PRIu64’\n   fprintf(stdout, \"  sequence   : %\" PRIu64 \"\\n\", record.GetSN());\n                                      ^\nutilities/blob_db/blob_dump_tool.cc:214:65: error: spurious trailing ‘%’ in format [-Werror=format=]\n   fprintf(stdout, \"  sequence   : %\" PRIu64 \"\\n\", record.GetSN());\n```\nCloses https://github.com/facebook/rocksdb/pull/2359\n\nDifferential Revision: D5117684\n\nPulled By: sagar0\n\nfbshipit-source-id: 7480346bcd96205fcae890927c5e68cf004e87be",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/02594b5f11df09252c2bae13433b2d7c7d8efed2"
    },
    {
        "hash": "52d9e5f7b646906c91a346d38b56b28a3cf62f7a",
        "author": "Igor Canadi",
        "date": "2017-05-23T17:14:04-07:00",
        "message": "Fix column family seconds_up accounting\n\nSummary:\n`cf_stats_snapshot_.seconds_up` appears to be never updated, unlike `db_stats_snapshot_.seconds_up`, which is updated here: https://github.com/facebook/rocksdb/blob/master/db/internal_stats.cc#L883\n\nThis leads to wrong information in the log, for example:\n```\n** Compaction Stats [default] **\n\n....\n\nUptime(secs): 85591.2 total, 85591.2 interval\n```\n\nEven though DB's interval is correctly logged as 60 seconds:\n```\n** DB Stats **\nUptime(secs): 85591.2 total, 637.8 interval\n```\nCloses https://github.com/facebook/rocksdb/pull/2338\n\nDifferential Revision: D5114131\n\nPulled By: sagar0\n\nfbshipit-source-id: 85243a38213236ccbb601a7f7aaa8865eaa8083c",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/52d9e5f7b646906c91a346d38b56b28a3cf62f7a"
    },
    {
        "hash": "7d8207f1f27939ca738bab07c190c07e5e999e5c",
        "author": "Sagar Vemuri",
        "date": "2017-05-23T15:11:42-07:00",
        "message": "Fix errors in clang-analyzer builds\n\nSummary:\nFix build error in db_iter.cc when running clang-analyzer.\n```\n  CC       db/db_iter.o\ndb/db_iter.cc:938:21: error: no matching constructor for initialization of 'rocksdb::ParsedInternalKey'\n  ParsedInternalKey ikey(Slice(), 0, 0);\n                    ^    ~~~~~~~~~~~~~\n./db/dbformat.h:84:3: note: candidate constructor not viable: no known conversion from 'int' to 'rocksdb::ValueType' for 3rd argument\n  ParsedInternalKey(const Slice& u, const SequenceNumber& seq, ValueType t)\n  ^\n./db/dbformat.h:78:8: note: candidate constructor (the implicit copy constructor) not viable: requires 1 argument, but 3 were provided\nstruct ParsedInternalKey {\n       ^\n./db/dbformat.h:78:8: note: candidate constructor (the implicit move constructor) not viable: requires 1 argument, but 3 were provided\n./db/dbformat.h:83:3: note: candidate constructor not viable: requires 0 arguments, but 3 were provided\n  ParsedInternalKey() { }  // Intentionally left uninitialized (for speed)\n  ^\n1 error generated.\n```\nCloses https://github.com/facebook/rocksdb/pull/2354\n\nDifferential Revision: D5115751\n\nPulled By: sagar0\n\nfbshipit-source-id: b0e386d4e935e4725b07761c3ca5f7a8cbde3692",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7d8207f1f27939ca738bab07c190c07e5e999e5c"
    },
    {
        "hash": "85b8569ae820a673f3a2800beb3e84d83bcb1c85",
        "author": "Sagar Vemuri",
        "date": "2017-05-23T14:57:05-07:00",
        "message": "Fix release build on Linux\n\nSummary:\nRelease builds are failing on Linux with the error:\n```\ntools/db_stress.cc: In function ‘int main(int, char**)’:\ntools/db_stress.cc:2365:12: error: ‘rocksdb::SyncPoint’ has not been declared\n   rocksdb::SyncPoint::GetInstance()->SetCallBack(\n            ^\ntools/db_stress.cc:2370:12: error: ‘rocksdb::SyncPoint’ has not been declared\n   rocksdb::SyncPoint::GetInstance()->SetCallBack(\n            ^\ntools/db_stress.cc:2375:12: error: ‘rocksdb::SyncPoint’ has not been declared\n   rocksdb::SyncPoint::GetInstance()->EnableProcessing();\n            ^\nmake[1]: *** [tools/db_stress.o] Error 1\nmake[1]: Leaving directory `/data/sandcastle/boxes/trunk-git-rocksdb-public'\nmake: *** [release] Error 2\n```\nCloses https://github.com/facebook/rocksdb/pull/2355\n\nDifferential Revision: D5113552\n\nPulled By: sagar0\n\nfbshipit-source-id: 351df707277787da5633ba4a40e52edc7c895dc4",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/85b8569ae820a673f3a2800beb3e84d83bcb1c85"
    },
    {
        "hash": "15ba4d6c4bd965c23f90987383e5a072fc419ce7",
        "author": "Dmitri Smirnov",
        "date": "2017-05-22T10:57:06-07:00",
        "message": "Address MS Visual Studio 2017 issue with autovector\n\nSummary:\nThis addresses https://github.com/facebook/rocksdb/issues/2262\nCloses https://github.com/facebook/rocksdb/pull/2333\n\nDifferential Revision: D5097941\n\nPulled By: siying\n\nfbshipit-source-id: fb33582bfe7883ecc3f6da028703982522b5f75f",
        "modified_files_count": 1,
        "modified_files": [
            "util/autovector.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/15ba4d6c4bd965c23f90987383e5a072fc419ce7"
    },
    {
        "hash": "217b866f4710b20cc46501d9c7a79e693c43f48c",
        "author": "Siying Dong",
        "date": "2017-05-18T13:56:12-07:00",
        "message": "column_family_test: EnvCounter::num_new_writable_file_ to be atomic\n\nSummary:\nTSAN shows warning of data race of EnvCounter::num_new_writable_file_. Make it atomic.\nCloses https://github.com/facebook/rocksdb/pull/2331\n\nDifferential Revision: D5089215\n\nPulled By: siying\n\nfbshipit-source-id: 15f6dcfb770a3310cbb6337c22482c8b330daffc",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/217b866f4710b20cc46501d9c7a79e693c43f48c"
    },
    {
        "hash": "a36220ccfbcd2a2045f70db2d9ec4fecb684af01",
        "author": "Aaron Gao",
        "date": "2017-05-17T18:56:55-07:00",
        "message": "fix unity test\n\nSummary:\nunity test will fail even if we have the same function names in different anonymous namespaces in different files.\nCloses https://github.com/facebook/rocksdb/pull/2321\n\nDifferential Revision: D5083783\n\nPulled By: lightmark\n\nfbshipit-source-id: 1347aaf866900af30d23cdd4f29c1b96f17352af",
        "modified_files_count": 1,
        "modified_files": [
            "util/file_reader_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a36220ccfbcd2a2045f70db2d9ec4fecb684af01"
    },
    {
        "hash": "01ab7b528c96a5eea84336564a1b006a1e673a74",
        "author": "Sagar Vemuri",
        "date": "2017-05-17T10:22:41-07:00",
        "message": "Add ROCKSDB_LIBRARY_API macro to a few C APIs, to fix windows build\n\nSummary:\nWindows build in AppVeyor is broken, I believe due to https://github.com/facebook/rocksdb/pull/2254.\nError messages:\n```\nc_test.obj : error LNK2019: unresolved external symbol rocksdb_get_pinned referenced in function CheckPinGet [C:\\projects\\rocksdb\\build\\c_test.vcxproj]\nc_test.obj : error LNK2019: unresolved external symbol rocksdb_get_pinned_cf referenced in function CheckPinGetCF [C:\\projects\\rocksdb\\build\\c_test.vcxproj]\nc_test.obj : error LNK2019: unresolved external symbol rocksdb_pinnableslice_destroy referenced in function CheckPinGet [C:\\projects\\rocksdb\\build\\c_test.vcxproj]\nc_test.obj : error LNK2019: unresolved external symbol rocksdb_pinnableslice_value referenced in function CheckPinGet [C:\\projects\\rocksdb\\build\\c_test.vcxproj]\nC:\\projects\\rocksdb\\build\\Debug\\c_test.exe : fatal error LNK1120: 4 unresolved externals [C:\\projects\\rocksdb\\build\\c_test.vcxproj]\n```\nSee, for example: https://ci.appveyor.com/project/Facebook/rocksdb/build/1.0.4420\nCloses https://github.com/facebook/rocksdb/pull/2309\n\nDifferential Revision: D5076992\n\nPulled By: sagar0\n\nfbshipit-source-id: bf4ca063a53b5a9042ba9f655f7c60c268ea5748",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/01ab7b528c96a5eea84336564a1b006a1e673a74"
    },
    {
        "hash": "445f1235bf0ff4001d63e5bd9bd2491f6ab3ea1d",
        "author": "Yi Wu",
        "date": "2017-05-16T12:01:04-07:00",
        "message": "s/std::snprintf/snprintf\n\nSummary:\nLooks like std::snprintf is not available on all platforms (e.g. MSVC 2010). Change it back to snprintf, where we have a macro in port.h to workaround compatibility.\nCloses https://github.com/facebook/rocksdb/pull/2308\n\nDifferential Revision: D5070988\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: bedfc1660bab0431c583ad434b7e68265e1211b1",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_file.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/445f1235bf0ff4001d63e5bd9bd2491f6ab3ea1d"
    },
    {
        "hash": "4f9e69ccf4a4ad8da69cc3b8dfe183b4da303c3b",
        "author": "赵星宇",
        "date": "2017-05-15T16:15:38-07:00",
        "message": "fix log err\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2206\n\nDifferential Revision: D5054222\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: d8742bda1bf3e76d7b68eeb86df4608031b5cbc8",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_compaction_flush.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4f9e69ccf4a4ad8da69cc3b8dfe183b4da303c3b"
    },
    {
        "hash": "bbe9ee7dd4a542b191ace521ca13b4bdb063008b",
        "author": "Andrew Kryczka",
        "date": "2017-05-12T09:28:07-07:00",
        "message": "core-local array type conversions\n\nSummary:\ntry to clean up the type conversions and hope it passes on windows.\n\none interesting thing I learned is that bitshift operations are special: in `x << y`, the result type depends only on the type of `x`, unlike most arithmetic operations where the result type depends on both operands' types.\nCloses https://github.com/facebook/rocksdb/pull/2277\n\nDifferential Revision: D5050145\n\nPulled By: ajkr\n\nfbshipit-source-id: f3309e77526ac9612c632bf93a62d99757af9a29",
        "modified_files_count": 1,
        "modified_files": [
            "util/core_local.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bbe9ee7dd4a542b191ace521ca13b4bdb063008b"
    },
    {
        "hash": "3907c94ffb734825de33449b245ae668990e5070",
        "author": "Yi Wu",
        "date": "2017-05-10T23:05:44-07:00",
        "message": "Fix ColumnFamilyTest:BulkAddDrop\n\nSummary:\nFix ColumnFamilyTest:BulkAddDrop not deleted CF handles at the end, causing ASAN failure.\nCloses https://github.com/facebook/rocksdb/pull/2275\n\nDifferential Revision: D5040724\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 86cd4070c944d01173a3cc36462bb800698af192",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3907c94ffb734825de33449b245ae668990e5070"
    },
    {
        "hash": "492fc49a86446860ff3bb13df2adf0c3ad857725",
        "author": "Aaron Gao",
        "date": "2017-05-10T12:29:23-07:00",
        "message": "fix readampbitmap tests\n\nSummary:\nfix test failure of ReadAmpBitmap and ReadAmpBitmapLiveInCacheAfterDBClose.\ntest ReadAmpBitmapLiveInCacheAfterDBClose individually and make check\nCloses https://github.com/facebook/rocksdb/pull/2271\n\nDifferential Revision: D5038133\n\nPulled By: lightmark\n\nfbshipit-source-id: 803cd6f45ccfdd14a9d9473c8af311033e164be8",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/492fc49a86446860ff3bb13df2adf0c3ad857725"
    },
    {
        "hash": "3a04a254ac4b782fbe6b8521e0c77f3311f0d98c",
        "author": "Min Wei",
        "date": "2017-05-10T11:12:38-07:00",
        "message": "Flink state\n\nSummary:\nThis is to address the issue reported in\n    https://github.com/facebook/rocksdb/issues/1988\nThe fix is simple. A typo.\nCloses https://github.com/facebook/rocksdb/pull/2267\n\nDifferential Revision: D5037149\n\nPulled By: siying\n\nfbshipit-source-id: 1bb585c7a753ef77c81c4b92deafbed8e21fe8ff",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/rocksjni.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3a04a254ac4b782fbe6b8521e0c77f3311f0d98c"
    },
    {
        "hash": "a62096696928f0280b9195c36b1a6446311b5e7c",
        "author": "Jos Collin",
        "date": "2017-05-09T19:06:39-07:00",
        "message": "port: updated PhysicalCoreID()\n\nSummary:\nUpdated PhysicalCoreID() to use sched_getcpu() on x86_64 for glibc >= 2.22.  Added a new\nfunction named GetCPUID() that calls sched_getcpu(), to avoid repeated code. This change is done as per the comments of PR: https://github.com/facebook/rocksdb/pull/2230\n\nSigned-off-by: Jos Collin <jcollin@redhat.com>\nCloses https://github.com/facebook/rocksdb/pull/2260\n\nDifferential Revision: D5025734\n\nPulled By: ajkr\n\nfbshipit-source-id: f4cca68c12573cafcf8531e7411a1e733bbf8eef",
        "modified_files_count": 1,
        "modified_files": [
            "port/port_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a62096696928f0280b9195c36b1a6446311b5e7c"
    },
    {
        "hash": "6b99dbe0493cf5762193cd3623d9ddfb1135a31b",
        "author": "Aaron Gao",
        "date": "2017-05-04T01:30:13-07:00",
        "message": "fix memory alignment with logical sector size\n\nSummary:\nwe align the buffer with logical sector size and should not test it with page size, which is usually 4k.\nCloses https://github.com/facebook/rocksdb/pull/2245\n\nDifferential Revision: D5001842\n\nPulled By: lightmark\n\nfbshipit-source-id: a7135fcf6351c6db363e8908956b1e193a4a6291",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6b99dbe0493cf5762193cd3623d9ddfb1135a31b"
    },
    {
        "hash": "60847a3b080a9ce61404501732c90ed33a0ab1b8",
        "author": "Jos Collin",
        "date": "2017-05-03T13:08:55-07:00",
        "message": "port: updated PhysicalCoreID()\n\nSummary: Checked the return value of __get_cpuid(). Implemented the else case where the arch is different from i386 and x86_64.\n\nPulled By: ajkr\n\nDifferential Revision: D4973496\n\nfbshipit-source-id: c40fdef5840364c2a79b1d11df0db5d4ec3d6a4a",
        "modified_files_count": 1,
        "modified_files": [
            "port/port_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/60847a3b080a9ce61404501732c90ed33a0ab1b8"
    },
    {
        "hash": "47a09b0a88b1f1f52086aa7dc78be09c8ed2c905",
        "author": "Maysam Yabandeh",
        "date": "2017-05-01T18:12:46-07:00",
        "message": "Avoid pinning when row cache is accessed\n\nSummary:\nWith row cache being enabled, table cache is doing a short circuit for reading data. This path needs to be updated to take advantage of pinnable slice. In the meanwhile we disabling pinning in this path.\nCloses https://github.com/facebook/rocksdb/pull/2237\n\nDifferential Revision: D4982389\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 542630d0cf23cfb1f0c397da82e7053df7966591",
        "modified_files_count": 1,
        "modified_files": [
            "table/get_context.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/47a09b0a88b1f1f52086aa7dc78be09c8ed2c905"
    },
    {
        "hash": "aeaba07b2a85771b8f3261eae984281516585abd",
        "author": "Siying Dong",
        "date": "2017-05-01T16:35:15-07:00",
        "message": "Remove an assert that causes TSAN failure.\n\nSummary:\nColumnFamilyData::ConstructNewMemtable is called out of DB mutex, and it asserts current_ is not empty, but current_ should only be accessed inside DB mutex. Remove this assert to make TSAN happy.\nCloses https://github.com/facebook/rocksdb/pull/2235\n\nDifferential Revision: D4978531\n\nPulled By: siying\n\nfbshipit-source-id: 423685a7dae88ed3faaa9e1b9ccb3427ac704a4b",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aeaba07b2a85771b8f3261eae984281516585abd"
    },
    {
        "hash": "a2b05210ef5f617b32a761d2bdd53b4488f9eefc",
        "author": "Siying Dong",
        "date": "2017-04-28T17:07:56-07:00",
        "message": "Make PosixLogger::flush_pending_ atomic\n\nSummary:\nTSAN sometimes complaints data race of PosixLogger::flush_pending_. Make it atomic.\nCloses https://github.com/facebook/rocksdb/pull/2231\n\nDifferential Revision: D4973397\n\nPulled By: siying\n\nfbshipit-source-id: 571e886e3eca3231705919d573e250c1c1ec3764",
        "modified_files_count": 1,
        "modified_files": [
            "env/posix_logger.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a2b05210ef5f617b32a761d2bdd53b4488f9eefc"
    },
    {
        "hash": "da4b2070b39d171b37ce1712df3ecc7edda26338",
        "author": "Yi Wu",
        "date": "2017-04-28T13:12:10-07:00",
        "message": "Fix WriteBatchWithIndex address use after scope error\n\nSummary:\nFix use after scope error caught by ASAN.\nCloses https://github.com/facebook/rocksdb/pull/2228\n\nDifferential Revision: D4968028\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: a2a266c98634237494ab4fb2d666bc938127aeb2",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/write_batch_with_index/write_batch_with_index_internal.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/da4b2070b39d171b37ce1712df3ecc7edda26338"
    },
    {
        "hash": "0ca3ead0cb7a1554011118ecf3447b839c70caf2",
        "author": "Aaron Gao",
        "date": "2017-04-27T14:33:17-07:00",
        "message": "add GetRootDB() in DeleteFilesInRange\n\nSummary:\nIn case users cast a subclass of db* into dbimpl*\nCloses https://github.com/facebook/rocksdb/pull/2222\n\nDifferential Revision: D4964486\n\nPulled By: lightmark\n\nfbshipit-source-id: 0ccdc08ee8e7a193dfbbe0218c3cbfd795662ca1",
        "modified_files_count": 1,
        "modified_files": [
            "db/convenience.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ca3ead0cb7a1554011118ecf3447b839c70caf2"
    },
    {
        "hash": "3b4d1b7a446dcf7cc6937db4f61734f7b0093a09",
        "author": "Aaron Gao",
        "date": "2017-04-26T01:26:55-07:00",
        "message": "add <sys/sysmacros.h> to avoid warning with glibc 2.25\n\nSummary:\nhttps://github.com/facebook/rocksdb/issues/2152\nCloses https://github.com/facebook/rocksdb/pull/2208\n\nDifferential Revision: D4945577\n\nPulled By: lightmark\n\nfbshipit-source-id: 4e679150f2c9443d3be0b6008b26b65fabbda75a",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3b4d1b7a446dcf7cc6937db4f61734f7b0093a09"
    },
    {
        "hash": "72c21fb3f2f3ec0b3156d04c95f36b30ca292c97",
        "author": "Aaron Gao",
        "date": "2017-04-24T13:47:17-07:00",
        "message": "call GetRootDB() before cast to DBImpl* in CancelAllBackgroundWork\n\nSummary:\nUser could call this with wrapper class of DB or DBImpl\nCloses https://github.com/facebook/rocksdb/pull/2200\n\nDifferential Revision: D4935530\n\nPulled By: lightmark\n\nfbshipit-source-id: df9cb61d67d0f3bbcf62f714d77523a459a92883",
        "modified_files_count": 1,
        "modified_files": [
            "db/convenience.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/72c21fb3f2f3ec0b3156d04c95f36b30ca292c97"
    },
    {
        "hash": "afff9951e2b6aa0e1bb0949c68967951734604ef",
        "author": "Maysam Yabandeh",
        "date": "2017-04-21T17:42:10-07:00",
        "message": "Respect deprecated flag in table options\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2197\n\nDifferential Revision: D4932434\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 6c83c12d6d47e3f0640ab84954944215968f266f",
        "modified_files_count": 1,
        "modified_files": [
            "options/options_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/afff9951e2b6aa0e1bb0949c68967951734604ef"
    },
    {
        "hash": "1dd7760513806bf9b24dcc3aad744789ca320a46",
        "author": "Andrew Kryczka",
        "date": "2017-04-19T12:00:01-07:00",
        "message": "Change L0 compaction score using level size\n\nSummary:\nThe goal is to avoid the problem of small number of L0 files triggering compaction to base level (which increased write-amp), while still allowing L0 compaction-by-size (so intra-L0 compactions cause score to increase).\nCloses https://github.com/facebook/rocksdb/pull/2172\n\nDifferential Revision: D4908552\n\nPulled By: ajkr\n\nfbshipit-source-id: 4b170142b2b368e24bd7948b2a6f24c69fabf73d",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1dd7760513806bf9b24dcc3aad744789ca320a46"
    },
    {
        "hash": "8e84a388ef096dbaa38d9971e73b60f364271e4a",
        "author": "Maysam Yabandeh",
        "date": "2017-04-18T20:35:46-07:00",
        "message": "Re-add index_per_partition but as deprecated\n\nSummary:\nindex_per_partition should have deprecated deprecated instead of being removed. It is causing backward compatibility issues.\nCloses https://github.com/facebook/rocksdb/pull/2173\n\nDifferential Revision: D4910947\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 5c52939381847d232ede6866606f67f2b4b857ae",
        "modified_files_count": 1,
        "modified_files": [
            "options/options_helper.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8e84a388ef096dbaa38d9971e73b60f364271e4a"
    },
    {
        "hash": "071652734102b354bb40366f3c77b5e1393de1e3",
        "author": "Aaron Gao",
        "date": "2017-04-14T18:56:14-07:00",
        "message": "remove warning\n\nSummary:\nst_blocks shows 16 though the right value is 8. This happens occasionally which seems a bug.\nCloses https://github.com/facebook/rocksdb/pull/2160\n\nDifferential Revision: D4893542\n\nPulled By: lightmark\n\nfbshipit-source-id: 68e832586b58bbc6162efbe83ce273f1570d5be3",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/071652734102b354bb40366f3c77b5e1393de1e3"
    },
    {
        "hash": "13b50358fb18f33a76a956ac14f2fb88ef774689",
        "author": "Aaron Gao",
        "date": "2017-04-13T16:12:04-07:00",
        "message": "add space for buggy kernel warning\n\nSummary:\nadd the missing space\nCloses https://github.com/facebook/rocksdb/pull/2150\n\nDifferential Revision: D4880696\n\nPulled By: lightmark\n\nfbshipit-source-id: a4e0ad6a8ea45d6469d3f6c8514fdeb4cf10aaf5",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/13b50358fb18f33a76a956ac14f2fb88ef774689"
    },
    {
        "hash": "b6b9359ececa1efed20f11c36cb5e9b9f031819f",
        "author": "Igor Canadi",
        "date": "2017-04-13T16:12:03-07:00",
        "message": "Fix BYTES_WRITTEN accounting\n\nSummary:\nBYTES_WRITTEN accounting doesn't work with disabled WAL. For example, this is what we\nget in the LOG:\n\n```\nCumulative writes: 9794K writes, 228M keys, 9794K commit groups, 1.0\nwrites per commit group, ingest: 0.00 GB, 0.00 MB/s\n```\n\nWAL bytes are tracked in a different statistic:\nhttps://github.com/facebook/rocksdb/blob/master/db/internal_stats.h#L105.\nBYTES_WRITTEN should count all the writes.\nCloses https://github.com/facebook/rocksdb/pull/2133\n\nDifferential Revision: D4880615\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 8fd0b223099f3f5ad7df79d4e737d313687fec69",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_write.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b6b9359ececa1efed20f11c36cb5e9b9f031819f"
    },
    {
        "hash": "10d7546961acf61f20a9b713a0ab43de37ab8b0c",
        "author": "Aaron Gao",
        "date": "2017-04-11T17:13:33-07:00",
        "message": "set readahead buffer size from roundup(user_size) + 4k to roundup(use…\n\nSummary:\nUsers usually set readahead buffer to a multiple of 4k, more than that, usually a multiple of blocks.\nSo previously we set real buffer size 512 * n + 4k, which may introduce an additional block reading.\nCloses https://github.com/facebook/rocksdb/pull/2138\n\nDifferential Revision: D4871504\n\nPulled By: lightmark\n\nfbshipit-source-id: b070faa51d92e976e8e8468c00692699e585e243",
        "modified_files_count": 1,
        "modified_files": [
            "util/file_reader_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/10d7546961acf61f20a9b713a0ab43de37ab8b0c"
    },
    {
        "hash": "61730186dfbdabb97949ae9bbb8a3642d968850b",
        "author": "Islam AbdelRahman",
        "date": "2017-04-07T17:07:37-07:00",
        "message": "dummy diff\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2114\n\nDifferential Revision: D4854860\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: b871c5b9ccc52d20f5ceacdd172dc70b1dbf9110",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/61730186dfbdabb97949ae9bbb8a3642d968850b"
    },
    {
        "hash": "9690653db546fa3378e125f278a66f79050b79e8",
        "author": "Maysam Yabandeh",
        "date": "2017-04-07T11:39:12-07:00",
        "message": "Add a verify phase to benchmarks\n\nSummary:\nCheck the result of the benchmark againt a specified truth_db, which is\nexpected to be produced using the same benchmark but perhaps on a\ndifferent commit or with different configs.\n\nThe verification is simple and assumes that key/values are generated\ndeterministically. This assumption would break if db_bench using rand\nvariable differently from the benchmark that produced truth_db.\nCurrently it is checked to work on fillrandom and readwhilewriting.\n\nA param finish_after_writes is added to ensure that the background\nwriting thread will write the same number of entries between two\nbenchmarks.\n\nExample:\n$ TEST_TMPDIR=/dev/shm/truth_db ./db_bench\n--benchmarks=\"fillrandom,readwhilewriting\" --num=200000\n--finish_after_writes=true\n$ TEST_TMPDIR=/dev/shm/tmpdb ./db_bench\n--benchmarks=\"fillrandom,readwhilewriting,verify\" --truth_db\n/dev/shm/truth_db/dbbench --num=200000 --finish_after_writes=true\nVerifying db <= truth_db...\nVerifying db >= truth_db...\n...Verified\nCloses https://github.com/facebook/rocksdb/pull/2098\n\nDifferential Revision: D4839233\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 2f4ed31",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9690653db546fa3378e125f278a66f79050b79e8"
    },
    {
        "hash": "dd8f9e38e93231bf923bdf262ec9bd792be4f98b",
        "author": "Ayappan",
        "date": "2017-04-07T10:54:12-07:00",
        "message": "Fix compilation for GCC-5\n\nSummary:\nFixes this issue https://github.com/facebook/rocksdb/issues/2108\nCloses https://github.com/facebook/rocksdb/pull/2109\n\nDifferential Revision: D4851965\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 6ee807b",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dd8f9e38e93231bf923bdf262ec9bd792be4f98b"
    },
    {
        "hash": "72fc1e9d07cf967555235fe9cca436a2f93d3fe4",
        "author": "Nikhil Benesch",
        "date": "2017-04-07T10:39:15-07:00",
        "message": "avoid non-existent O_DIRECT on OpenBSD\n\nSummary:\nOpenBSD doesn't have `O_DIRECT`, so avoid it. (RocksDB compiles successfully on\nOpenBSD with this patch.)\nCloses https://github.com/facebook/rocksdb/pull/2106\n\nDifferential Revision: D4847833\n\nPulled By: siying\n\nfbshipit-source-id: 214b785",
        "modified_files_count": 1,
        "modified_files": [
            "env/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/72fc1e9d07cf967555235fe9cca436a2f93d3fe4"
    },
    {
        "hash": "9e729390298c25adbd1cbf19948a5e4a882d6066",
        "author": "Aaron Gao",
        "date": "2017-04-06T18:25:03-07:00",
        "message": "only FALLOC_FL_PUNCH_HOLE when ftruncate is buggy\n\nSummary:\nIn RocksDB, we sometimes preallocate the estimated space for a file to have better perf with fallocate (if supported). Usually it is a little bit bigger than the real resulting file size. At this time, we have to let the Filesystem reclaim the space not used.\n\nIdeally, calling ftruncate to truncate the file to its real size should be enough. HOWEVER, it isn't on tmpfs, which we witness in our case, with some buggy kernel version. ftruncate a file with preallocated space doesn't change number of the blocks used by the file, which means the space not used by the file is not returned to the filesystems. So in this case we need fallocate with FALLOC_FL_PUNCH_HOLE to explicitly reclaim the used blocks. It is a hack to cope with the kernel bug and usually we should not need it.\nCloses https://github.com/facebook/rocksdb/pull/2102\n\nDifferential Revision: D4848934\n\nPulled By: lightmark\n\nfbshipit-source-id: f1b40b5",
        "modified_files_count": 1,
        "modified_files": [
            "env/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9e729390298c25adbd1cbf19948a5e4a882d6066"
    },
    {
        "hash": "1d068f606757821c05029fe02896f526b42903a2",
        "author": "Ayappan",
        "date": "2017-04-06T14:09:13-07:00",
        "message": "Fix CompactRange incorrect buffer release\n\nSummary:\nWhile running `make jtest` using IBM Java, it fails at compactRangeToLevel with the below error.\n\n```\nRun: org.rocksdb.RocksDBTest testing now -> compactRangeToLevel\nJVMJNCK056E JNI error in ReleaseByteArrayElements: Got memory 0x00003FFF94AA8908 from object 0x00000000000C7F78, releasing from 0x00000000000C7F68\nJVMJNCK077E Error detected in org/rocksdb/RocksDB.compactRange0(J[BI[BIZII)V\n\nJVMJNCK024E JNI error detected. Aborting.\nJVMJNCK025I Use -Xcheck:jni:nonfatal to continue running when errors are detected.\n\nFatal error: JNI error\nMakefile:205: recipe for target 'run_test' failed\nmake[1]: *** [run_test] Error 87\nmake[1]: Leaving directory '/home/ubuntu/rocksdb/java'\nMakefile:1542: recipe for target 'jtest' failed\nmake: *** [jtest] Error 2\n```\n\nAfter checking the code, it is vivid that we are messing up the `ReleaseByteArrayElements` args in `rocksdb_compactrange_helper`.\n\n```\n   .................\n   1959     s = db->CompactRange(compact_options, &begin_slice, &end_slice);\n   1960   }\nCloses https://github.com/facebook/rocksdb/pull/2060\n\nDifferential Revision: D4831427\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: dd02037",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/rocksjni.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1d068f606757821c05029fe02896f526b42903a2"
    },
    {
        "hash": "d25e28d584d20650127cde9b1ea66c41eaf187f2",
        "author": "Nikhil Benesch",
        "date": "2017-04-03T11:39:09-07:00",
        "message": "replace sometimes-undefined uint type with unsigned int\n\nSummary:\n`uint` is nonstandard and not a built-in type on all compilers; replace it\nwith the always-valid `unsigned int`. I assume this went unnoticed because\nit's inside an `#ifdef ROCKDB_JEMALLOC`.\nCloses https://github.com/facebook/rocksdb/pull/2075\n\nDifferential Revision: D4820427\n\nPulled By: ajkr\n\nfbshipit-source-id: 0876561",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d25e28d584d20650127cde9b1ea66c41eaf187f2"
    },
    {
        "hash": "a1d7e487b32a548c5336067a656e9ae0dcceb4e6",
        "author": "Andrew Kryczka",
        "date": "2017-04-03T11:24:10-07:00",
        "message": "Add L0 write-amp to compaction level stats\n\nSummary:\nPreviously it always showed 0.0 for L0 write-amp because we were dividing by bytes read from non-output level. For L0, we should instead divide by bytes ingested to the DB. Note the numerator (bytes written to L0) includes flush bytes.\nCloses https://github.com/facebook/rocksdb/pull/2078\n\nDifferential Revision: D4816902\n\nPulled By: ajkr\n\nfbshipit-source-id: 7dca31a",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a1d7e487b32a548c5336067a656e9ae0dcceb4e6"
    },
    {
        "hash": "80fe5b3855b9598239a77c8b409228e902b93359",
        "author": "Andrew Kryczka",
        "date": "2017-03-30T16:54:52-07:00",
        "message": "disable test: DeleteSchedulerTest.DynamicRateLimiting1\n\nSummary:\ntemporarily disable since it isn't working on travis.\nCloses https://github.com/facebook/rocksdb/pull/2064\n\nDifferential Revision: D4807373\n\nPulled By: ajkr\n\nfbshipit-source-id: f2bb2b0",
        "modified_files_count": 1,
        "modified_files": [
            "util/delete_scheduler_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/80fe5b3855b9598239a77c8b409228e902b93359"
    },
    {
        "hash": "58179ec4a6506a163777a15ecc4c680864bfdeb4",
        "author": "Herman Lee",
        "date": "2017-03-30T10:39:13-07:00",
        "message": "Cleanup of ThreadStatusUtil structures should use the DB's reference\n\nSummary:\ninstead of thread_local\n\nThe cleanup path for the rocksdb database might not have the\nthread_updater_local_cache_ pointer initialized because the thread\nexecuting the cleanup is likely not a rocksdb thread. This results in a\nmemory leak detected by Valgrind. The cleanup code path should use the\nthread_status_updater pointer obtained from the DB object instead of a\nthread local one.\nCloses https://github.com/facebook/rocksdb/pull/2059\n\nDifferential Revision: D4801611\n\nPulled By: hermanlee\n\nfbshipit-source-id: 407d7de",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_status_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/58179ec4a6506a163777a15ecc4c680864bfdeb4"
    },
    {
        "hash": "8d3cb4f207ad4f541be26c1daf451999833bc14f",
        "author": "Sharan Suryanarayanan",
        "date": "2017-03-29T17:10:46-07:00",
        "message": "Added naming of backup engine threads\n\nSummary:\nChanged the naming of backup engine threads from \"ldb\" to \"backup_engine\"\nCloses https://github.com/facebook/rocksdb/pull/2053\n\nDifferential Revision: D4799325\n\nPulled By: ajkr\n\nfbshipit-source-id: 046893f",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8d3cb4f207ad4f541be26c1daf451999833bc14f"
    },
    {
        "hash": "41fe9ad75bca27b18dd26a032c3a529e47d6bb60",
        "author": "Yi Wu",
        "date": "2017-03-28T13:39:13-07:00",
        "message": "Hide usage of compaction_options_fifo from lite build\n\nSummary:\n...to fix lite build error.\nCloses https://github.com/facebook/rocksdb/pull/2046\n\nDifferential Revision: D4785910\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: b591f27",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/41fe9ad75bca27b18dd26a032c3a529e47d6bb60"
    },
    {
        "hash": "34a70859bcb74d20d0b5f265d4ffc2e8c7d3b2b4",
        "author": "Maysam Yabandeh",
        "date": "2017-03-24T17:24:11-07:00",
        "message": "Fix segmentation fault caused by #1961\n\nSummary:\nFixes #1961 which causes a segfault when filter_policy is nullptr and both\npin_l0_filter_and_index_blocks_in_cache/cache_index_and_filter_blocks\nare set.\nCloses https://github.com/facebook/rocksdb/pull/2029\n\nDifferential Revision: D4764862\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 05bd695",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/34a70859bcb74d20d0b5f265d4ffc2e8c7d3b2b4"
    },
    {
        "hash": "a5c8b543400b512822066c183875ab3e91360007",
        "author": "Andrew Kryczka",
        "date": "2017-03-23T19:24:22-07:00",
        "message": "fix a header include\n\nSummary:\nneed to consistently include \"rocksdb/persistent_cache.h\" to fix internal build\nCloses https://github.com/facebook/rocksdb/pull/2034\n\nDifferential Revision: D4768101\n\nPulled By: ajkr\n\nfbshipit-source-id: 2ecb07f",
        "modified_files_count": 1,
        "modified_files": [
            "table/persistent_cache_options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a5c8b543400b512822066c183875ab3e91360007"
    },
    {
        "hash": "91b5feb37b36433fde5a94f81e691427f9b74f69",
        "author": "Siying Dong",
        "date": "2017-03-23T18:09:57-07:00",
        "message": "Fix Windows Build broken by a recent commit\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2032\n\nDifferential Revision: D4766260\n\nPulled By: siying\n\nfbshipit-source-id: 415daa4",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/91b5feb37b36433fde5a94f81e691427f9b74f69"
    },
    {
        "hash": "15950fe3a09eff5af7ad3c91295584c1da89f9da",
        "author": "Siying Dong",
        "date": "2017-03-22T15:54:12-07:00",
        "message": "Remove ASSERT_EQ(boolean, ...)\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/2024\n\nDifferential Revision: D4755420\n\nPulled By: siying\n\nfbshipit-source-id: 7332ab1",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/15950fe3a09eff5af7ad3c91295584c1da89f9da"
    },
    {
        "hash": "be723a8d8c4cd58a5eff351e68b1418a7b938d77",
        "author": "Dmitri Smirnov",
        "date": "2017-03-22T11:24:12-07:00",
        "message": "Optionally construct Post Processing Info map in MemTableInserter\n\nSummary:\nMemTableInserter default constructs Post processing info\n  std::map. However, on Windows with 2015 STL the default\n  constructed map still dynamically allocates one node\n  which shows up on a profiler and we loose ~40% throughput\n  on fillrandom benchmark.\n  Solution: declare a map as std::aligned storage and optionally\n  construct.\n\nThis addresses https://github.com/facebook/rocksdb/issues/1976\n\nBefore:\n-------------------------------------------------------------------\n  Initializing RocksDB Options from command-line flags\n  DB path: [k:\\data\\BulkLoadRandom_10M_fillonly]\n  fillrandom   :       2.775 micros/op 360334 ops/sec;  280.4 MB/s\n  Microseconds per write:\n  Count: 10000000 Average: 2.7749  StdDev: 39.92\n  Min: 1  Median: 2.0826  Max: 26051\n  Percentiles: P50: 2.08 P75: 2.55 P99: 3.55 P99.9: 9.58 P99.99: 51.5**6\n  ------------------------------------------------------\n\n  After:\n\n  Initializing RocksDB Options from command-line flags\n  DB path: [k:\\data\\BulkLoadRandom_10M_fillon\nCloses https://github.com/facebook/rocksdb/pull/2011\n\nDifferential Revision: D4740823\n\nPulled By: siying\n\nfbshipit-source-id: 1daaa2c",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/be723a8d8c4cd58a5eff351e68b1418a7b938d77"
    },
    {
        "hash": "e474df9470c6d1dc29baf80920535d28fd4d4efa",
        "author": "Siying Dong",
        "date": "2017-03-22T11:09:13-07:00",
        "message": "db_bench: not need to check mmap for PlainTable\n\nSummary:\nPlainTable now supports non-mmap mode. We don't need to check it anymore.\nCloses https://github.com/facebook/rocksdb/pull/1882\n\nDifferential Revision: D4751643\n\nPulled By: siying\n\nfbshipit-source-id: ab14540",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e474df9470c6d1dc29baf80920535d28fd4d4efa"
    },
    {
        "hash": "21d8c317966fb3ad0bae8cc03f16c505f2c0792f",
        "author": "Maysam Yabandeh",
        "date": "2017-03-20T12:54:14-07:00",
        "message": "remove LIKELY from public headers\n\nSummary:\nFixes #2008\nCloses https://github.com/facebook/rocksdb/pull/2009\n\nDifferential Revision: D4739885\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 36fba5d",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/21d8c317966fb3ad0bae8cc03f16c505f2c0792f"
    },
    {
        "hash": "9272e12f19c4470d05993b4e1edeb9e3d3984ad8",
        "author": "Aaron Gao",
        "date": "2017-03-17T11:39:13-07:00",
        "message": "avoid ftruncate twice in buffered io\n\nSummary:\nin buffered io, the filesize_ is the real size.\nCloses https://github.com/facebook/rocksdb/pull/1991\n\nDifferential Revision: D4711433\n\nPulled By: lightmark\n\nfbshipit-source-id: ad604b9",
        "modified_files_count": 1,
        "modified_files": [
            "util/file_reader_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9272e12f19c4470d05993b4e1edeb9e3d3984ad8"
    },
    {
        "hash": "e66221add4e83fc395eef2adb0989b97aeb92c00",
        "author": "Andrew Kryczka",
        "date": "2017-03-16T17:54:12-07:00",
        "message": "fix db_bench rate limiter callsites\n\nSummary:\npass nullptr as stats object for db_bench-specific rate limiters since its stats are intended to capture background write activity only.\nCloses https://github.com/facebook/rocksdb/pull/1997\n\nDifferential Revision: D4726806\n\nPulled By: ajkr\n\nfbshipit-source-id: 8e4b225",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e66221add4e83fc395eef2adb0989b97aeb92c00"
    },
    {
        "hash": "5fa927aa97424f1e5752401141037fbb5d7ab79e",
        "author": "slyrz",
        "date": "2017-03-14T12:09:21-07:00",
        "message": "Add Xpress and ZSTD CompressionType values to C header\n\nSummary:\nThis PR copies the missing CompressionType values\n```cpp\nenum CompressionType : unsigned char {\n  ...\n  kXpressCompression = 0x6,\n  kZSTD = 0x7,\n  ...\n};\n```\ninto the C header.\nCloses https://github.com/facebook/rocksdb/pull/1989\n\nDifferential Revision: D4706265\n\nPulled By: siying\n\nfbshipit-source-id: e65e62a",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5fa927aa97424f1e5752401141037fbb5d7ab79e"
    },
    {
        "hash": "900c62be61f71c8040c83e8348a2f1fe408c2087",
        "author": "Min Wei",
        "date": "2017-03-10T11:24:09-08:00",
        "message": "fix compile for VS2015\n\nSummary:\nWithout the cast, the build will break on Windows.\nCloses https://github.com/facebook/rocksdb/pull/1982\n\nDifferential Revision: D4690462\n\nPulled By: ajkr\n\nfbshipit-source-id: c493b6c",
        "modified_files_count": 1,
        "modified_files": [
            "util/histogram.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/900c62be61f71c8040c83e8348a2f1fe408c2087"
    },
    {
        "hash": "18fc1bc0e0610a8ab1531629a9f6c96932a8f287",
        "author": "Andrew Kryczka",
        "date": "2017-03-08T17:54:11-08:00",
        "message": "minor changes for rate limiter test flakiness\n\nSummary:\nthe 50%+ drained constraint wasn't working consistently in some of our test environments, maybe their resources are too low. relax the constraints a bit.\nCloses https://github.com/facebook/rocksdb/pull/1970\n\nDifferential Revision: D4679419\n\nPulled By: ajkr\n\nfbshipit-source-id: 3789cd8",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/18fc1bc0e0610a8ab1531629a9f6c96932a8f287"
    },
    {
        "hash": "58b12dfe37784ce1bd67a03643147ab94f590451",
        "author": "Reid Horuff",
        "date": "2017-03-06T15:09:11-08:00",
        "message": "Set logs as getting flushed before releasing lock, race condition fix\n\nSummary:\nRelating to #1903:\n\nIn MaybeFlushColumnFamilies() we want to modify the 'getting_flushed' flag before releasing the db mutex when SwitchMemtable() is called.\n\nThe following 2 actions need to be atomic in MaybeFlushColumnFamilies()\n- getting_flushed is false on oldest log\n- we determine that all CFs can be flushed to successfully release oldest log\n- we set getting_flushed = true on the oldest log.\n-------\n- getting_flushed is false on oldest log\n- we determine that all CFs can NOT be flushed to successfully release oldest log\n- we set unable_to_flush_oldest_log_ = true on the oldest log.\n\n#### In the 2pc case:\n\nT1 enters function but is unable to flush all CFs to release log\nT1 sets unable_to_flush_oldest_log_ = true\nT1 begins flushing all CFs possible\n\nT2 enters function but is unable to flush all CFs to release log\nT2 sees unable_to_flush_oldes_log_ has been set so exits\n\nT3 enters function and will be able to flush all CFs to release oldest log\nT3 sets getting_flushed = true on oldes\nCloses https://github.com/facebook/rocksdb/pull/1909\n\nDifferential Revision: D4646235\n\nPulled By: reidHoruff\n\nfbshipit-source-id: c8d0447",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/58b12dfe37784ce1bd67a03643147ab94f590451"
    },
    {
        "hash": "534581a356c2cb544028c6b32179fdcba37d85fb",
        "author": "Maysam Yabandeh",
        "date": "2017-03-05T18:09:09-08:00",
        "message": "Fix a bug in tests in options operator=\n\nSummary:\nNote: Using the default operator= is an unsafe approach for Options since it destructs shared_ptr in\nthe same order of their creation, in contrast to destructors which\ndestructs them in the opposite order of creation. One particular problme is\nthat the cache destructor might invoke callback functions that use Option\nmembers such as statistics. To work around this problem, we manually call\ndestructor of table_facotry which eventually clears the block cache.\nCloses https://github.com/facebook/rocksdb/pull/1950\n\nDifferential Revision: D4655473\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: 6c4bbff",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/534581a356c2cb544028c6b32179fdcba37d85fb"
    },
    {
        "hash": "4561275c2dc0874795697521f6684c167a3c98e9",
        "author": "Andrew Kryczka",
        "date": "2017-03-03T11:09:11-08:00",
        "message": "fix rate limiter test flakiness\n\nSummary:\nfix when elapsed time spans non-integral number of intervals since the rate limiter may still be drained during a partial interval.\nCloses https://github.com/facebook/rocksdb/pull/1948\n\nDifferential Revision: D4651304\n\nPulled By: ajkr\n\nfbshipit-source-id: b1f9e70",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4561275c2dc0874795697521f6684c167a3c98e9"
    },
    {
        "hash": "0ad5af42d0459424590616651cff445522fcde68",
        "author": "Andrew Kryczka",
        "date": "2017-03-02T17:24:11-08:00",
        "message": "Clarify VerifyBackup behavior\n\nSummary:\nIt's non-obvious to users that using the same backup engine for creating/verifying provides better results than using separate backup engines, so add a comment in header.\nCloses https://github.com/facebook/rocksdb/pull/1942\n\nDifferential Revision: D4637865\n\nPulled By: ajkr\n\nfbshipit-source-id: e6efe24",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/backupable_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ad5af42d0459424590616651cff445522fcde68"
    },
    {
        "hash": "6fb9013441e346725520c835cd0fbe47a5406c9e",
        "author": "Aaron Gao",
        "date": "2017-03-02T17:24:11-08:00",
        "message": "sanitize readahead when direct read enabled\n\nSummary:\nno readahead:\nreadseq      :       8.438 micros/op 118510 ops/sec;   13.1 MB/s\nsanitize to 10MB:\nreadseq      :       6.051 micros/op 165248 ops/sec;   18.3 MB/s\nCloses https://github.com/facebook/rocksdb/pull/1945\n\nDifferential Revision: D4645811\n\nPulled By: lightmark\n\nfbshipit-source-id: 5d63770",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6fb9013441e346725520c835cd0fbe47a5406c9e"
    },
    {
        "hash": "cc253982ddb155475a0b5d3c908847eab30bc53f",
        "author": "Andrew Kryczka",
        "date": "2017-03-02T10:54:11-08:00",
        "message": "Use more default options in db_bench\n\nSummary:\nThe default behavior was too weird because, previously, we got the L0 file size limit (64MB) from Options default and L1+ file size limit (2MB) from the hardcoded value. We should get both from Options default.\nCloses https://github.com/facebook/rocksdb/pull/1943\n\nDifferential Revision: D4640301\n\nPulled By: ajkr\n\nfbshipit-source-id: fd8c0fd",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cc253982ddb155475a0b5d3c908847eab30bc53f"
    },
    {
        "hash": "90d835507581324d0449f1ded4f56a8b16f20bf7",
        "author": "xiusir",
        "date": "2017-02-28T10:39:11-08:00",
        "message": "Fix the wrong address for PREFETCH in DynamicBloom::Prefetch\n\nSummary:\n- Change data_[b] to data_[b / 8] in DynamicBloom::Prefetch, as b means the b-th bit in data_ and data_[b / 8] is the proper byte in data_.\nCloses https://github.com/facebook/rocksdb/pull/1935\n\nDifferential Revision: D4628696\n\nPulled By: siying\n\nfbshipit-source-id: bc5a0c6",
        "modified_files_count": 1,
        "modified_files": [
            "util/dynamic_bloom.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/90d835507581324d0449f1ded4f56a8b16f20bf7"
    },
    {
        "hash": "2ca2059f6694387591488256fbec4826e5316570",
        "author": "Peter (Stig) Edwards",
        "date": "2017-02-27T17:39:12-08:00",
        "message": "Get unique_ptr to use delete[] for char[] in DumpMallocStats\n\nSummary:\nAvoid mismatched free() / delete / delete [] in DumpMallocStats\nCloses https://github.com/facebook/rocksdb/pull/1927\n\nDifferential Revision: D4622045\n\nPulled By: siying\n\nfbshipit-source-id: 1131b30",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2ca2059f6694387591488256fbec4826e5316570"
    },
    {
        "hash": "253799c06da4c9b9e04082c959170048365c5e96",
        "author": "Tamir Duberstein",
        "date": "2017-02-27T17:24:13-08:00",
        "message": "Add missing include for `abort()`\n\nSummary:\nFixes #1233 (again).\nCloses https://github.com/facebook/rocksdb/pull/1931\n\nDifferential Revision: D4625289\n\nPulled By: ajkr\n\nfbshipit-source-id: 70e774e",
        "modified_files_count": 1,
        "modified_files": [
            "util/threadpool_imp.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/253799c06da4c9b9e04082c959170048365c5e96"
    },
    {
        "hash": "3b8ba703cbdd04e6c4552923b6be9838ed56dbed",
        "author": "Siying Dong",
        "date": "2017-02-23T18:39:13-08:00",
        "message": "Fix flaky DBTestUniversalCompaction.UniversalCompactionTrivialMoveTest2\n\nSummary:\nA previous fix to DBTestUniversalCompaction.UniversalCompactionTrivialMoveTest2 didn't address the right problem. The problem is L0->L0 compaction is not trivial move in the scenario, not parallel compactions. Fix this.\nCloses https://github.com/facebook/rocksdb/pull/1911\n\nDifferential Revision: D4608955\n\nPulled By: siying\n\nfbshipit-source-id: 7a712cb",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_universal_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3b8ba703cbdd04e6c4552923b6be9838ed56dbed"
    },
    {
        "hash": "e67232cff5ea895d7e452f9825245d7626a8e353",
        "author": "Andrew Kryczka",
        "date": "2017-02-23T15:39:16-08:00",
        "message": "Handle failed Finish() in SST file writer\n\nSummary:\nThe assertion in Abandon() fails when called after Finish() fails. Finish() already closes the builder so there's no need to call Abandon().\nCloses https://github.com/facebook/rocksdb/pull/1901\n\nDifferential Revision: D4601373\n\nPulled By: ajkr\n\nfbshipit-source-id: e5678be",
        "modified_files_count": 1,
        "modified_files": [
            "table/sst_file_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e67232cff5ea895d7e452f9825245d7626a8e353"
    },
    {
        "hash": "e7d902e69385d0cfa34de6f086eb4d4dc329b328",
        "author": "Aaron Gao",
        "date": "2017-02-23T11:39:14-08:00",
        "message": "add direct_io and compaction_readahead_size in db_stress\n\nSummary:\nadd direct_io and compaction_readahead_size in db_stress\ntest direct_io under db_stress with compaction_readahead_size enabled to capture bugs found in production.\n`./db_stress --allow_concurrent_memtable_write=0 --use_direct_reads --use_direct_writes --compaction_readahead_size=4096`\nCloses https://github.com/facebook/rocksdb/pull/1906\n\nDifferential Revision: D4604514\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: ebbf0ee",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e7d902e69385d0cfa34de6f086eb4d4dc329b328"
    },
    {
        "hash": "ed50308d2042bf845a9e8ddba69efb8244b879a0",
        "author": "Andrew Kryczka",
        "date": "2017-02-23T10:54:10-08:00",
        "message": "check backup directory exists before listing children\n\nSummary:\nInsertPathnameToSizeBytes() is called on shared/ and shared_checksum/ directories, which only exist for certain configurations. If we try to list a non-existent directory's contents, some Envs will dump an error message. Let's avoid this by checking whether the directory exists before listing its contents.\nCloses https://github.com/facebook/rocksdb/pull/1895\n\nDifferential Revision: D4596301\n\nPulled By: ajkr\n\nfbshipit-source-id: c809679",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ed50308d2042bf845a9e8ddba69efb8244b879a0"
    },
    {
        "hash": "f206af56fcbf8ad4be7d92de03074b471bd62752",
        "author": "Aaron Gao",
        "date": "2017-02-22T14:54:11-08:00",
        "message": "add use_direct_io() to ReadaheadRandomAccessFile\n\nSummary:\nMissing this function will cause RandomAccessFileReader not doing alignment in Direct IO mode, which introduce an IOError: invalid argument.\nCloses https://github.com/facebook/rocksdb/pull/1900\n\nDifferential Revision: D4601261\n\nPulled By: lightmark\n\nfbshipit-source-id: c3eadf1",
        "modified_files_count": 1,
        "modified_files": [
            "util/file_reader_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f206af56fcbf8ad4be7d92de03074b471bd62752"
    },
    {
        "hash": "0824934423af310fed58e5ac367f42a39ba78834",
        "author": "Aaron Gao",
        "date": "2017-02-22T10:39:11-08:00",
        "message": "truncate patch\n\nSummary:\nomit the override for the previous commit\nCloses https://github.com/facebook/rocksdb/pull/1898\n\nDifferential Revision: D4598743\n\nPulled By: lightmark\n\nfbshipit-source-id: f98a378",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test_util.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0824934423af310fed58e5ac367f42a39ba78834"
    },
    {
        "hash": "f0879e4c396ab8ffd6246afea9f6400c5098bc12",
        "author": "Daniel Black",
        "date": "2017-02-21T16:39:14-08:00",
        "message": "Page size isn't always 4k on linux\n\nSummary:\nSome places autodetected. These are the two places that didn't.\n\ncloses #1498\n\nStill unsure if the following instances of 4 * 1024 need fixing in:\nutil/io_posix.h\ninclude/rocksdb/table.h (appears to be blocksize and different)\nutilities/persistent_cache/block_cache_tier.cc\nutilities/persistent_cache/persistent_cache_test.h\ninclude/rocksdb/env.h\nutil/env_posix.cc\ndb/column_family.cc\nCloses https://github.com/facebook/rocksdb/pull/1499\n\nDifferential Revision: D4593640\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: efc48de",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f0879e4c396ab8ffd6246afea9f6400c5098bc12"
    },
    {
        "hash": "18eeb7b90e45af4bbac0777021711d8547f41eca",
        "author": "Mike Kolupaev",
        "date": "2017-02-21T16:09:10-08:00",
        "message": "Fix interference between max_total_wal_size and db_write_buffer_size checks\n\nSummary:\nThis is a trivial fix for OOMs we've seen a few days ago in logdevice.\n\nRocksDB get into the following state:\n(1) Write throughput is too high for flushes to keep up. Compactions are out of the picture - automatic compactions are disabled, and for manual compactions we don't care that much if they fall behind. We write to many CFs, with only a few L0 sst files in each, so compactions are not needed most of the time.\n(2) total_log_size_ is consistently greater than GetMaxTotalWalSize(). It doesn't get smaller since flushes are falling ever further behind.\n(3) Total size of memtables is way above db_write_buffer_size and keeps growing. But the write_buffer_manager_->ShouldFlush() is not checked because (2) prevents it (for no good reason, afaict; this is what this commit fixes).\n(4) Every call to WriteImpl() hits the MaybeFlushColumnFamilies() path. This keeps flushing the memtables one by one in order of increasing log file number.\n(5) No write stalling trigger is hit. We rely on max_write_buffer_number\nCloses https://github.com/facebook/rocksdb/pull/1893\n\nDifferential Revision: D4593590\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: af79c5f",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/18eeb7b90e45af4bbac0777021711d8547f41eca"
    },
    {
        "hash": "fce7a6e196ef3d51e25ca8a821cdcd17c36b44ee",
        "author": "Islam AbdelRahman",
        "date": "2017-02-17T13:39:17-08:00",
        "message": "Fail IngestExternalFile when bg_error_ exists\n\nSummary:\nFail IngestExternalFile() when bg_error_ exists\nCloses https://github.com/facebook/rocksdb/pull/1881\n\nDifferential Revision: D4580621\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 1194913",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fce7a6e196ef3d51e25ca8a821cdcd17c36b44ee"
    },
    {
        "hash": "756c5924e63c8e19cd21a35be48cdb2b2f5a0c37",
        "author": "Shu Zhang",
        "date": "2017-02-16T17:09:12-08:00",
        "message": "Allow adding external v1 sst file with no global seqno support\n\nSummary:\nThis is a follow up fix for https://github.com/facebook/rocksdb/pull/1783. After it, we should be able to ingest external v1 sst files with no global seqno field.\nCloses https://github.com/facebook/rocksdb/pull/1874\n\nDifferential Revision: D4576194\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 5b34a3e",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_ingestion_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/756c5924e63c8e19cd21a35be48cdb2b2f5a0c37"
    },
    {
        "hash": "43e9f01c20b53bd9e8b5ec033e8781c11b345864",
        "author": "Andrew Kryczka",
        "date": "2017-02-15T11:24:12-08:00",
        "message": "Fix repair_test on ROCKSDB_LITE\n\nSummary:\nRepairDB isn't included in rocksdb lite, so don't test it.\nCloses https://github.com/facebook/rocksdb/pull/1873\n\nDifferential Revision: D4565094\n\nPulled By: ajkr\n\nfbshipit-source-id: 8cc0898",
        "modified_files_count": 1,
        "modified_files": [
            "db/repair_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/43e9f01c20b53bd9e8b5ec033e8781c11b345864"
    },
    {
        "hash": "b48e4778bec17403d5ceecb1d8c36523fcffae95",
        "author": "Andrew Kryczka",
        "date": "2017-02-08T16:24:17-08:00",
        "message": "Consolidate file cutting logic in compaction loop\n\nSummary:\nIt was really annoying to have two places (top and bottom of compaction loop) where we cut output files. I had bugs in both DeleteRange and dictionary compression due to updating only one of the two. This diff consolidates the file-cutting logic to the bottom of the compaction loop.\n\nKeep in mind that my goal with input_status is to be consistent with the past behavior, even though I'm not sure it's ideal.\nCloses https://github.com/facebook/rocksdb/pull/1832\n\nDifferential Revision: D4503038\n\nPulled By: ajkr\n\nfbshipit-source-id: 7da5213",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b48e4778bec17403d5ceecb1d8c36523fcffae95"
    },
    {
        "hash": "d70ce7ee0bfc0567477e55f1f10ce0d81050d62a",
        "author": "Andrew Kryczka",
        "date": "2017-02-07T11:39:12-08:00",
        "message": "Move db_bench flags out of unnamed namespace\n\nSummary:\nI want to be able to, e.g., DECLARE_string(statistics_string); in my application such that I can override the default value of statistics_string. For this to work, we need to remove the unnamed namespace containing all the flags, and make sure all variables/functions covered by that namespace are static.\n\nReplaces #1828 due to internal tool issues.\nCloses https://github.com/facebook/rocksdb/pull/1844\n\nDifferential Revision: D4515124\n\nPulled By: ajkr\n\nfbshipit-source-id: 23b695e",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d70ce7ee0bfc0567477e55f1f10ce0d81050d62a"
    },
    {
        "hash": "186c7eedb0d35a16bcfcab00cfb3814c8294fdfa",
        "author": "Andrew Kryczka",
        "date": "2017-02-07T11:39:12-08:00",
        "message": "Remove incorrect statistics warning\n\nSummary:\nstatistics are always concurrently updated regardless of whether a single instance or multiple instances are used. remove the warning since it's unnecessarily preventing people from sharing stats objects across rocksdb instances.\n\nreplace #1819 which was having some problem with our internal tools.\nCloses https://github.com/facebook/rocksdb/pull/1826\n\nDifferential Revision: D4495970\n\nPulled By: ajkr\n\nfbshipit-source-id: 6601f61",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/186c7eedb0d35a16bcfcab00cfb3814c8294fdfa"
    },
    {
        "hash": "b797e4215704e0c0b54f2946f08bde8dcdf4ffe2",
        "author": "Andrew Kryczka",
        "date": "2017-02-03T12:39:16-08:00",
        "message": "Dump compression dictionary meta-block\n\nSummary:\nmake sst_dump print size/contents of the dictionary meta-block for easier debugging\nCloses https://github.com/facebook/rocksdb/pull/1837\n\nDifferential Revision: D4506399\n\nPulled By: ajkr\n\nfbshipit-source-id: b9bf668",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b797e4215704e0c0b54f2946f08bde8dcdf4ffe2"
    },
    {
        "hash": "ec79a7b53c4f3185190080b5c8be0a7d24df2a7e",
        "author": "Islam AbdelRahman",
        "date": "2017-01-31T17:39:12-08:00",
        "message": "Dedup code in option.cc and db_options.cc\n\nSummary:\nThe code in DBOptions::Dump is simply a duplicate of the code in ImmutableDBOptions::Dump and MutableDBOptions.Dump\n\nconsolidate duplicate code.\n\ntested visually\nCloses https://github.com/facebook/rocksdb/pull/1818\n\nDifferential Revision: D4486710\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 7085189",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ec79a7b53c4f3185190080b5c8be0a7d24df2a7e"
    },
    {
        "hash": "04c4ec41d1eb8095524157904ea2c8d76faa9851",
        "author": "Siying Dong",
        "date": "2017-01-27T11:24:16-08:00",
        "message": "Change corruption_test to use 4 bits.\n\nSummary:\nIn the patch which LRU cache was made use dynamic shard bits, I changed to 2 shard bits to make the test happy. Look like it is occasionally still unhappy. Change it to 4 shard bits.\nCloses https://github.com/facebook/rocksdb/pull/1815\n\nDifferential Revision: D4475849\n\nPulled By: siying\n\nfbshipit-source-id: 575ff00",
        "modified_files_count": 1,
        "modified_files": [
            "db/corruption_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/04c4ec41d1eb8095524157904ea2c8d76faa9851"
    },
    {
        "hash": "37d4a79e99f48d45f608f77f926e8a4613ff140b",
        "author": "Andrew Kryczka",
        "date": "2017-01-26T15:24:16-08:00",
        "message": "Deserialize custom Statistics object in db_bench\n\nSummary:\nAdded -statistics_string to deserialize a Statistics object using the factory functions registered by applications.\nCloses https://github.com/facebook/rocksdb/pull/1812\n\nDifferential Revision: D4469811\n\nPulled By: ajkr\n\nfbshipit-source-id: 2d80862",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/37d4a79e99f48d45f608f77f926e8a4613ff140b"
    },
    {
        "hash": "3b35134e4b46f16f46e0a96424d29ecf4e43559c",
        "author": "Andrew Kryczka",
        "date": "2017-01-26T11:24:13-08:00",
        "message": "Avoid cache lookups for range deletion meta-block\n\nSummary:\nI added the Cache::Ref() function a couple weeks ago (#1761) to make this feature possible. Like other meta-blocks, rep_->range_del_entry holds a cache handle to pin the range deletion block in uncompressed block cache for the duration of the table reader's lifetime. We can reuse this cache handle to create an iterator over this meta-block without any cache lookup. Ref() is used to increment the cache handle's refcount in case the returned iterator outlives the table reader.\nCloses https://github.com/facebook/rocksdb/pull/1801\n\nDifferential Revision: D4458782\n\nPulled By: ajkr\n\nfbshipit-source-id: 2883f10",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3b35134e4b46f16f46e0a96424d29ecf4e43559c"
    },
    {
        "hash": "94a0c32e7354ab44328b1e2d65c5a1283b5b21b8",
        "author": "Andrew Kryczka",
        "date": "2017-01-26T10:54:15-08:00",
        "message": "Fix LRU Ref() for handles with external references only\n\nSummary:\nFor case !handle->InCache() && handle->refs >= 1 (the third case mentioned in lru_cache.h), the key was overwritten by Insert(). In this case, the refcount can still be incremented, and the cache handle will never enter LRU list. Fix Ref() logic for this case.\nCloses https://github.com/facebook/rocksdb/pull/1808\n\nDifferential Revision: D4467656\n\nPulled By: ajkr\n\nfbshipit-source-id: c0784d8",
        "modified_files_count": 1,
        "modified_files": [
            "util/lru_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/94a0c32e7354ab44328b1e2d65c5a1283b5b21b8"
    },
    {
        "hash": "07dddd5f7e6d7fcdaf3044eecbaf8539e52f1cdf",
        "author": "sdong",
        "date": "2017-01-25T15:54:13-08:00",
        "message": "EnvPosixTestWithParam should wait for all threads to finish\n\nSummary:\nIf we don't wait for the threads to finish after each run, the thread queue may not be empty while the next test starts to run, which can cause unexpected behaviors.\n\nAlso make some of the relaxed read/write more restrict.\nCloses https://github.com/facebook/rocksdb/pull/1590\n\nReviewed By: AsyncDBConnMarkedDownDBException\n\nDifferential Revision: D4245922\n\nPulled By: AsyncDBConnMarkedDownDBException\n\nfbshipit-source-id: f83b74b",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/07dddd5f7e6d7fcdaf3044eecbaf8539e52f1cdf"
    },
    {
        "hash": "5dad9d6d28cef6a3df1070a6f2f09de170b22bf2",
        "author": "sdong",
        "date": "2017-01-25T15:54:13-08:00",
        "message": "Avoid logs_ operation out of DB mutex\n\nSummary:\nlogs_.back() is called out of DB mutex, which can cause data race. We move the access into the DB mutex protection area.\nCloses https://github.com/facebook/rocksdb/pull/1774\n\nReviewed By: AsyncDBConnMarkedDownDBException\n\nDifferential Revision: D4417472\n\nPulled By: AsyncDBConnMarkedDownDBException\n\nfbshipit-source-id: 2da1f1e",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5dad9d6d28cef6a3df1070a6f2f09de170b22bf2"
    },
    {
        "hash": "d438e1ec174bdf1474edcdf9902fe3cb14b8a1e2",
        "author": "Andrew Kryczka",
        "date": "2017-01-24T13:24:14-08:00",
        "message": "Test range deletion block outlives table reader\n\nSummary:\nThis test ensures RangeDelAggregator can still access blocks even if it outlives the table readers that created them (detailed description in comments).\n\nI plan to optimize away the extra cache lookup we currently do in BlockBasedTable::NewRangeTombstoneIterator(), as it is ~5% CPU in my random read benchmark in a database with 1k tombstones. This test will help make sure nothing breaks in the process.\nCloses https://github.com/facebook/rocksdb/pull/1739\n\nDifferential Revision: D4375954\n\nPulled By: ajkr\n\nfbshipit-source-id: aef9357",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_range_del_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d438e1ec174bdf1474edcdf9902fe3cb14b8a1e2"
    },
    {
        "hash": "973f1b78fd95eccc1c351768a28afd97bfbf4f19",
        "author": "yinqiwen",
        "date": "2017-01-23T12:24:14-08:00",
        "message": "memtable: delete merge value for range deleteion\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/1797\n\nDifferential Revision: D4448004\n\nPulled By: ajkr\n\nfbshipit-source-id: 3ffc27c",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/973f1b78fd95eccc1c351768a28afd97bfbf4f19"
    },
    {
        "hash": "aebfd1703b6a8339a5c0f60ca082a627a3dc020d",
        "author": "jsteemann",
        "date": "2017-01-20T16:39:22-08:00",
        "message": "fix non-portable behavior in encoder\n\nSummary:\nusing ~0UL for mask uses a uint32_t at least in MSVC, but a uint64_t is required for it to work properly\nCloses https://github.com/facebook/rocksdb/pull/1777\n\nDifferential Revision: D4444004\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 057cc42",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/col_buf_decoder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aebfd1703b6a8339a5c0f60ca082a627a3dc020d"
    },
    {
        "hash": "753ff84a3d436a5c92de8cfe5617bf5c23f02c24",
        "author": "Vitaliy Liptchinsky",
        "date": "2017-01-20T15:54:12-08:00",
        "message": "Fix get approx size\n\nSummary:\nFixing GetApproximateSize bug for the case of computing stats for mem tables only.\nCloses https://github.com/facebook/rocksdb/pull/1795\n\nDifferential Revision: D4445507\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 3905846",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/753ff84a3d436a5c92de8cfe5617bf5c23f02c24"
    },
    {
        "hash": "5ac97314e70eb7fcfbb6965c938766ae5dc6d6da",
        "author": "Changli Gao",
        "date": "2017-01-20T13:24:12-08:00",
        "message": "Fix std::out_of_range when DBOptions::keep_log_file_num is zero\n\nSummary:\nWe should validate this option, otherwise we may see\nstd::out_of_range thrown at: db/db_impl.cc:1124\n\n1123     for (unsigned int i = 0; i <= end; i++) {\n1124       std::string& to_delete = old_info_log_files.at(i);\n1125       std::string full_path_to_delete =\n1126           (immutable_db_options_.db_log_dir.empty()\nCloses https://github.com/facebook/rocksdb/pull/1722\n\nDifferential Revision: D4379495\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: e136552",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5ac97314e70eb7fcfbb6965c938766ae5dc6d6da"
    },
    {
        "hash": "3c0852d1da5aa72e7b7a1f83f9f3dc8ffc781c99",
        "author": "Shu Zhang",
        "date": "2017-01-20T12:09:19-08:00",
        "message": "Make ingest external file backward compatible\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/1783\n\nDifferential Revision: D4443463\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 39d21d6",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_ingestion_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3c0852d1da5aa72e7b7a1f83f9f3dc8ffc781c99"
    },
    {
        "hash": "602c13a9649867c1d69160e77f0c6adef32261d1",
        "author": "Yi Wu",
        "date": "2017-01-18T12:09:10-08:00",
        "message": "Remove fadvise with direct IO read\n\nSummary:\nRemove the logic since we don't use buffer cache with direct IO. Resolve\nread regression we currently have.\nCloses https://github.com/facebook/rocksdb/pull/1782\n\nDifferential Revision: D4430408\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 5557bba",
        "modified_files_count": 1,
        "modified_files": [
            "util/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/602c13a9649867c1d69160e77f0c6adef32261d1"
    },
    {
        "hash": "3ce091fd7332db5051b4a836b92edae6e0b90b7c",
        "author": "Islam AbdelRahman",
        "date": "2017-01-17T13:54:20-08:00",
        "message": "Add KEEP_DB env var option\n\nSummary:\nWhen debugging tests, it's useful to preserve the DB to investigate it and check the logs\nThis will allow us to set KEEP_DB=1 to preserve the DB\nCloses https://github.com/facebook/rocksdb/pull/1759\n\nDifferential Revision: D4393826\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 1bff689",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3ce091fd7332db5051b4a836b92edae6e0b90b7c"
    },
    {
        "hash": "77b4806625be4dcbaf8c1b7513dfb0a0acc8b9d5",
        "author": "Siying Dong",
        "date": "2017-01-17T11:24:28-08:00",
        "message": "Fix 2PC with concurrent memtable insert\n\nSummary:\nIf concurrent memtable insert is enabled, and one prepare command and a normal command are grouped into a commit group, the sequence ID will be calculated incorrectly.\nCloses https://github.com/facebook/rocksdb/pull/1730\n\nDifferential Revision: D4371081\n\nPulled By: siying\n\nfbshipit-source-id: cd40c6d",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_thread.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/77b4806625be4dcbaf8c1b7513dfb0a0acc8b9d5"
    },
    {
        "hash": "e8a096000b1aad0b459d59d3ac2b84e35c5b3518",
        "author": "Kefu Chai",
        "date": "2017-01-15T13:24:16-08:00",
        "message": "util/thread_local.h: silence a clang-build warning\n\nSummary:\notherwise clang complains with\n\n/home/jenkins/workspace/ceph-master/src/rocksdb/util/thread_local.h:205:5:\nerror: macro expansion producing 'defined' has undefined behavior\n[-Werror,-Wexpansion-to-defined]\n^\n/home/jenkins/workspace/ceph-master/src/rocksdb/util/thread_local.h:22:4:\nnote: expanded from macro 'ROCKSDB_SUPPORT_THREAD_LOCAL'\n!defined(OS_WIN) && !defined(OS_MACOSX) && !defined(IOS_CROSS_COMPILE)\n^`\n\nSigned-off-by: Kefu Chai <tchaikov@gmail.com>\nCloses https://github.com/facebook/rocksdb/pull/1757\n\nDifferential Revision: D4394140\n\nPulled By: siying\n\nfbshipit-source-id: f0beda0",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e8a096000b1aad0b459d59d3ac2b84e35c5b3518"
    },
    {
        "hash": "d4e07a8459dc16c3c397f7794818f62b4d23ac57",
        "author": "Aaron Gao",
        "date": "2017-01-12T12:39:14-08:00",
        "message": "fix warning of unused direct io helper functions\n\nSummary:\nadd build guard\nCloses https://github.com/facebook/rocksdb/pull/1771\n\nDifferential Revision: D4410779\n\nPulled By: siying\n\nfbshipit-source-id: 3796c30",
        "modified_files_count": 1,
        "modified_files": [
            "util/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d4e07a8459dc16c3c397f7794818f62b4d23ac57"
    },
    {
        "hash": "62384ebe9c76c640eb3655d8bc4dfcb77079d33c",
        "author": "Anirban Rahut",
        "date": "2017-01-11T14:24:13-08:00",
        "message": "Guarding extra fallocate call with TRAVIS because its not working pro…\n\nSummary:\n…perly on travis\n\n There is some old code in PosixWritableFile::Close(), which\ntruncates the file to the measured size and then does an extra fallocate\nwith KEEP_SIZE. This is commented as a failsafe because in some\ncases ftruncate doesn't do the right job (I don't know of an instance of\nthis btw). However doing an fallocate with KEEP_SIZE should not increase\nthe file size. However on Travis Worker which is Docker (likely AUFS )\nits not working. There are comments on web that show that the AUFS\nauthor had initially not implemented fallocate, and then did it later.\nSo not sure what is the quality of the implementation.\nCloses https://github.com/facebook/rocksdb/pull/1765\n\nDifferential Revision: D4401340\n\nPulled By: anirbanr-fb\n\nfbshipit-source-id: e2d8100",
        "modified_files_count": 1,
        "modified_files": [
            "util/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/62384ebe9c76c640eb3655d8bc4dfcb77079d33c"
    },
    {
        "hash": "9f246298e2f0af3973918a0dac0c5f46bc0993c0",
        "author": "Changli Gao",
        "date": "2017-01-11T10:54:37-08:00",
        "message": "Performance: Iterate vector by reference\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/1763\n\nDifferential Revision: D4398796\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: b82636d",
        "modified_files_count": 1,
        "modified_files": [
            "db/event_helpers.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9f246298e2f0af3973918a0dac0c5f46bc0993c0"
    },
    {
        "hash": "2172b660ebacf8acbe6543075b78559686c454a6",
        "author": "Sunpoet Po-Chuan Hsieh",
        "date": "2017-01-10T11:39:12-08:00",
        "message": "Fix build on FreeBSD\n\nSummary:\n```\n  CC       utilities/column_aware_encoding_exp.o\nutilities/column_aware_encoding_exp.cc:149:5: error: use of undeclared identifier 'exit'\n    exit(1);\n    ^\nutilities/column_aware_encoding_exp.cc:154:5: error: use of undeclared identifier 'exit'\n    exit(1);\n    ^\nutilities/column_aware_encoding_exp.cc:158:5: error: use of undeclared identifier 'exit'\n    exit(1);\n    ^\n3 errors generated.\n```\nCloses https://github.com/facebook/rocksdb/pull/1754\n\nDifferential Revision: D4399044\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: fbab5a2",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/column_aware_encoding_exp.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2172b660ebacf8acbe6543075b78559686c454a6"
    },
    {
        "hash": "76317345638919746ae3d9033595a477fec99d42",
        "author": "Maysam Yabandeh",
        "date": "2017-01-09T14:09:13-08:00",
        "message": "Fix the error in ColumnFamiliesTest\n\nSummary:\nIn the test the last change to AAAZZZ in handles[1] is deleting it. The\nresult of the get must be NotFound then. Previosuly the test did not\ncheck for the return value of Get and assumed that the status is ok. It\nthen move ahead asserting the returned value. The passed-by-reference\nstring value however was not changed (since the key was not found) and\nthe asserted value is what it contained before doing the Get.\nCloses https://github.com/facebook/rocksdb/pull/1753\n\nDifferential Revision: D4390982\n\nPulled By: maysamyabandeh\n\nfbshipit-source-id: dd55a34",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/76317345638919746ae3d9033595a477fec99d42"
    },
    {
        "hash": "60c509ff183ad23333c4e237b375aafa9747056a",
        "author": "Siying Dong",
        "date": "2017-01-09T11:54:13-08:00",
        "message": "Fix valgrind failure in test CurrentFileModifiedWhileCheckpointing2PC\n\nSummary:\nFix some memory leaks in the test. Also rename the test class name from DBTest to CheckpointTest to avoid confusion.\nCloses https://github.com/facebook/rocksdb/pull/1752\n\nDifferential Revision: D4390355\n\nPulled By: siying\n\nfbshipit-source-id: 0fa388a",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/checkpoint/checkpoint_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/60c509ff183ad23333c4e237b375aafa9747056a"
    },
    {
        "hash": "e04480faed0f0709c5294f41d224cd2585f61aa2",
        "author": "Dmitri Smirnov",
        "date": "2017-01-06T16:24:14-08:00",
        "message": "Fix MS warnings. Use ROCKSDB_Prsz for size_t.\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/1737\n\nDifferential Revision: D4378852\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: ba8b02d",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e04480faed0f0709c5294f41d224cd2585f61aa2"
    },
    {
        "hash": "76711b6e771a925125c75457b2f25acacd8bb142",
        "author": "Islam AbdelRahman",
        "date": "2017-01-03T18:09:20-08:00",
        "message": "Make ExternalSSTFileTest::CompactionDeadlock more deterministic\n\nSummary:\nIt's not always true that `ASSERT_EQ(running_threads.load(), 2);`\nCloses https://github.com/facebook/rocksdb/pull/1736\n\nDifferential Revision: D4374091\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 4f70bbd",
        "modified_files_count": 1,
        "modified_files": [
            "db/external_sst_file_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/76711b6e771a925125c75457b2f25acacd8bb142"
    },
    {
        "hash": "c963460dbc9221fd7538616c2fa5a1257939952d",
        "author": "Islam AbdelRahman",
        "date": "2017-01-03T17:54:12-08:00",
        "message": "Fix tests under GCC_481\n\nSummary:\nThis fix the issue with tests failing under GCC 481, I am not sure what is the exact reason\nCloses https://github.com/facebook/rocksdb/pull/1735\n\nDifferential Revision: D4374094\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: b3625bc",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test_util.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c963460dbc9221fd7538616c2fa5a1257939952d"
    },
    {
        "hash": "33c86d677fbdf3fc3270f0ed2f13ae25cd6be1e5",
        "author": "Andrew Kryczka",
        "date": "2017-01-01T11:24:14-08:00",
        "message": "Fix backupable db test\n\nSummary:\n#1733 started using SizeFileBytes(), so our dummy log file implementation should stop asserting that this function isn't called.\nCloses https://github.com/facebook/rocksdb/pull/1740\n\nDifferential Revision: D4376055\n\nPulled By: ajkr\n\nfbshipit-source-id: 2854d89",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/33c86d677fbdf3fc3270f0ed2f13ae25cd6be1e5"
    },
    {
        "hash": "a738af8f84580f7a17440227b7b5f8edc9fd43fb",
        "author": "leipeng",
        "date": "2016-12-28T18:54:57-08:00",
        "message": "db/pinned_iterators_manager.h: bugfix\n\nSummary:\nstd::unique(beg, end) returns an iterator of unique_end, data behind unique_end should not be accessed.\nCloses https://github.com/facebook/rocksdb/pull/1726\n\nDifferential Revision: D4371076\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 5564450",
        "modified_files_count": 1,
        "modified_files": [
            "db/pinned_iterators_manager.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a738af8f84580f7a17440227b7b5f8edc9fd43fb"
    },
    {
        "hash": "548b6280541554d72cb26210f67d167d6e71a0eb",
        "author": "Gunnar Kudrjavets",
        "date": "2016-12-27T16:09:12-08:00",
        "message": "Enable conditionally using adaptive mutexes\n\nSummary:\nTo support scenarios where we want all instances of `Mutex` be adaptive\nwe're adding a conditional `#define` so that the desired behavior can be\neasily enabled.\nCloses https://github.com/facebook/rocksdb/pull/1710\n\nDifferential Revision: D4359863\n\nPulled By: gunnarku\n\nfbshipit-source-id: 2f1e2f8",
        "modified_files_count": 1,
        "modified_files": [
            "port/port_posix.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/548b6280541554d72cb26210f67d167d6e71a0eb"
    },
    {
        "hash": "4e07b08eff9a5ce0037741b797513c0571aaa135",
        "author": "Sage Weil",
        "date": "2016-12-23T19:09:14-08:00",
        "message": "include/rocksdb/utilities/env_librados: fix typo\n\nSummary:\nBroken by 972f96b3fbae1a4675043bdf4279c9072ad69645\n\nSigned-off-by: Sage Weil <sage@redhat.com>\nCloses https://github.com/facebook/rocksdb/pull/1719\n\nDifferential Revision: D4366123\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: a11e535",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/env_librados.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4e07b08eff9a5ce0037741b797513c0571aaa135"
    },
    {
        "hash": "1beef6569a65296725b10685653c7fc6effe4d40",
        "author": "Islam AbdelRahman",
        "date": "2016-12-21T17:39:14-08:00",
        "message": "Fix c_test\n\nSummary:\naddfile phase in c_test could fail because in previous steps we did a DeleteRange.\nFix the test by simply moving the addfile phase before DeleteRange\nCloses https://github.com/facebook/rocksdb/pull/1672\n\nDifferential Revision: D4328896\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 1d946df",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1beef6569a65296725b10685653c7fc6effe4d40"
    },
    {
        "hash": "3d692822f824b3822d856bed86d5c33ea248d340",
        "author": "Siying Dong",
        "date": "2016-12-21T13:39:16-08:00",
        "message": "persistent_cache: fix two timer\n\nSummary:\nIn persistent_cache/block_cache_tier.cc, timers are never restarted, so the latency measured is not correct.\nCloses https://github.com/facebook/rocksdb/pull/1707\n\nDifferential Revision: D4355828\n\nPulled By: siying\n\nfbshipit-source-id: cd5f9e1",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/persistent_cache/block_cache_tier.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3d692822f824b3822d856bed86d5c33ea248d340"
    },
    {
        "hash": "046099c9b59f29705b691f286ecb8f6bd97f4184",
        "author": "ivan",
        "date": "2016-12-20T17:24:12-08:00",
        "message": "The array is malloced by backtrace_symbols(), and must be freed\n\nSummary:\nThe address of the array of string pointers is returned as the function result of backtrace_symbols().  This array is malloced by backtrace_symbols(), and must be freed by the caller.\nCloses https://github.com/facebook/rocksdb/pull/1692\n\nDifferential Revision: D4355737\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 5742035",
        "modified_files_count": 1,
        "modified_files": [
            "port/stack_trace.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/046099c9b59f29705b691f286ecb8f6bd97f4184"
    },
    {
        "hash": "7bd725e962d41ac4476c37e93b885da08bdc206a",
        "author": "Siying Dong",
        "date": "2016-12-19T12:39:11-08:00",
        "message": "db_bench: introduce --benchmark_read_rate_limit\n\nSummary:\nAdd the parameter in db_bench to help users to measure latency histogram with constant read rate.\nCloses https://github.com/facebook/rocksdb/pull/1683\n\nDifferential Revision: D4341387\n\nPulled By: siying\n\nfbshipit-source-id: 1b4b276",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7bd725e962d41ac4476c37e93b885da08bdc206a"
    },
    {
        "hash": "342370f1d38c5f7cdb0248f8054a016e6dfadd49",
        "author": "Daniel Black",
        "date": "2016-12-17T00:09:13-08:00",
        "message": "Simplify MemTable::Update\n\nSummary:\nAs suggested by testn in #1650\n\nThe Add is at the end of the function. Having a fallthough\nwill result in it being added twice.\nCloses https://github.com/facebook/rocksdb/pull/1676\n\nDifferential Revision: D4331906\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 895c4a0",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/342370f1d38c5f7cdb0248f8054a016e6dfadd49"
    },
    {
        "hash": "fbff4628a96c1431ce2b20e24850aeb8aeb9580e",
        "author": "Andrew Kryczka",
        "date": "2016-12-16T17:39:09-08:00",
        "message": "Reduce compaction iterator status checks\n\nSummary:\nseems it's expensive to check status since the underlying merge iterator checks status of all its children. so only do it when it's really necessary to get the status before invoking Next(), i.e., when we're advancing to get the first key in the next file.\nCloses https://github.com/facebook/rocksdb/pull/1691\n\nDifferential Revision: D4343446\n\nPulled By: siying\n\nfbshipit-source-id: 70ab315",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fbff4628a96c1431ce2b20e24850aeb8aeb9580e"
    },
    {
        "hash": "bd6cf7b51de9c72ac9fbc4078ab28cc6c015e691",
        "author": "Jianpeng Ma",
        "date": "2016-12-16T13:09:14-08:00",
        "message": "WritableFileWriter: default buffer size equal min(64k,options.writabl?\n\nSummary:\n?e_file_max_buffer_size)\n\nIf we overwrite WritableFile and has a buffer which has the same\nfunction of buf_. We hope remove the cache function of\nWritableFileWriter. So using options.writable_file_max_buffer_size = 0\nto disable cache function.\n\nSigned-off-by: Jianpeng Ma <jianpeng.ma@intel.com>\nCloses https://github.com/facebook/rocksdb/pull/1628\n\nDifferential Revision: D4307219\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 77a6e26",
        "modified_files_count": 1,
        "modified_files": [
            "util/file_reader_writer.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bd6cf7b51de9c72ac9fbc4078ab28cc6c015e691"
    },
    {
        "hash": "477b6ea5786cc3360008dd304841ad45d5d64551",
        "author": "Daniel Black",
        "date": "2016-12-14T17:09:14-08:00",
        "message": "std::remove_if requires <algorithm>\n\nSummary:\nfixes error (that occurred on gcc-7):\n\nerror:\n\nutil/env_basic_test.cc: In member function 'virtual rocksdb::Status rocksdb::NormalizingEnvWrapper::GetChildren(const string&, std::vector<std::__cxx11::basic_string<char> >*)':\nutil/env_basic_test.cc:27:21: error: 'remove_if' is not a member of 'std'\n       result->erase(std::remove_if(result->begin(), result->end(),\n                     ^~~\nCloses https://github.com/facebook/rocksdb/pull/1674\n\nDifferential Revision: D4331221\n\nPulled By: ajkr\n\nfbshipit-source-id: 9bbdc78",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/477b6ea5786cc3360008dd304841ad45d5d64551"
    },
    {
        "hash": "d71e728c7a5634a0692968f610216a6aedfb67ca",
        "author": "Islam AbdelRahman",
        "date": "2016-12-14T11:24:11-08:00",
        "message": "Print user collected properties in sst_dump\n\nSummary:\nInclude a dump of user_collected_properties in sst_dump\nCloses https://github.com/facebook/rocksdb/pull/1668\n\nDifferential Revision: D4325078\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 226b6d6",
        "modified_files_count": 1,
        "modified_files": [
            "tools/sst_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d71e728c7a5634a0692968f610216a6aedfb67ca"
    },
    {
        "hash": "e097222e645cb8d6441d0227faad01882674afbb",
        "author": "Daniel Black",
        "date": "2016-12-13T18:39:14-08:00",
        "message": "util/logging.cc: buffer of insufficient size (gcc-7 -Werror=format-length)\n\nSummary:\nutil/logging.cc:100:13: error: output may be truncated before the last format character [-Werror=format-length=]\n std::string NumberToHumanString(int64_t num) {\n             ^~~~~~~~~~~~~~~~~~~\nutil/logging.cc:106:59: note: format output between 3 and 19 bytes into a destination of size 16\n     snprintf(buf, sizeof(buf), \"%\" PRIi64 \"K\", num / 1000);\nCloses https://github.com/facebook/rocksdb/pull/1653\n\nDifferential Revision: D4318687\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 3a5c931",
        "modified_files_count": 1,
        "modified_files": [
            "util/logging.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e097222e645cb8d6441d0227faad01882674afbb"
    },
    {
        "hash": "cfc34d7c4e8e1539b288296083b826df154dd314",
        "author": "Daniel Black",
        "date": "2016-12-13T18:39:14-08:00",
        "message": "Missing break in case in DBTestBase::CurrentOptions\n\nSummary:\nFound by gcc-7 compile error.\n\nThis appeared to be a fault as these options seems too different.\nCloses https://github.com/facebook/rocksdb/pull/1667\n\nDifferential Revision: D4324174\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 0f65383",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cfc34d7c4e8e1539b288296083b826df154dd314"
    },
    {
        "hash": "67adc937b6f0f552ad8bfc0adbf14c3ea0a8e8fb",
        "author": "Daniel Black",
        "date": "2016-12-13T14:39:17-08:00",
        "message": "intentional fallthough (prevents gcc-7/clang-4 error)\n\nSummary:\ndb/memtable.cc: In member function 'void rocksdb::MemTable::Update(rocksdb::SequenceNumber, const rocksdb::Slice&, const rocksdb::Slice&)':\ndb/memtable.cc:736:11: error: this statement may fall through [-Werror=implicit-fallthrough=]\n           }\n           ^\ndb/memtable.cc:738:9: note: here\n         default:\n         ^~~~~~~\ncc1plus: all warnings being treated as errors\n\ncloses #1650\nCloses https://github.com/facebook/rocksdb/pull/1655\n\nDifferential Revision: D4318696\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 1a8981c",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/67adc937b6f0f552ad8bfc0adbf14c3ea0a8e8fb"
    },
    {
        "hash": "1a146f89c752ad67bd5189c11f5fe1e8b002076e",
        "author": "Islam AbdelRahman",
        "date": "2016-12-13T14:09:12-08:00",
        "message": "break Flush wait for dropped CF\n\nSummary:\nIn FlushJob we dont do the Flush if the CF is dropped\nhttps://github.com/facebook/rocksdb/blob/master/db/flush_job.cc#L184-L188\n\nbut inside WaitForFlushMemTable we keep waiting forever even if the CF is dropped.\nCloses https://github.com/facebook/rocksdb/pull/1664\n\nDifferential Revision: D4321032\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 6e2b25d",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1a146f89c752ad67bd5189c11f5fe1e8b002076e"
    },
    {
        "hash": "c3e5ee71543148bb0468b3db469b42a505f75df9",
        "author": "Daniel Black",
        "date": "2016-12-13T14:09:12-08:00",
        "message": "util/histogram.cc: HistogramStat::toString buffer insufficient\n\nSummary:\nIncreased buffer size to 1650.\n\nutil/histogram.cc: In member function 'std::__cxx11::string rocksdb::HistogramStat::ToString() const':\nutil/histogram.cc:189:13: error: '%.2f' directive output truncated writing between 4 and 313 bytes into a region of size 0 [-Werror=format-length=]\n std::string HistogramStat::ToString() const {\n             ^~~~~~~~~~~~~\nutil/histogram.cc:205:30: note: format output between 69 and 1614 bytes into a destination of size 200\n            Percentile(99.99));\n                              ^\ncc1plus: all warnings being treated as errors\nMakefile:1521: recipe for target 'util/histogram.o' failed\nCloses https://github.com/facebook/rocksdb/pull/1660\n\nDifferential Revision: D4318820\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 45ae6ea",
        "modified_files_count": 1,
        "modified_files": [
            "util/histogram.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c3e5ee71543148bb0468b3db469b42a505f75df9"
    },
    {
        "hash": "5334d8b44c223ea6bd27a8d6b348c1229f48eeaa",
        "author": "Daniel Black",
        "date": "2016-12-13T13:54:15-08:00",
        "message": "table/block_based_table_builder.cc: intentional fallthrough - comment to match gcc pattern\n\nSummary:\nThe gcc-7 code for parsing comments (libcpp/lex.c) didn't match\nthe intentional fallthough in this comment.\n\ntable/block_based_table_builder.cc: In member function 'void rocksdb::BlockBasedTableBuilder::WriteRawBlock(const rocksdb::Slice&, rocksdb::CompressionType, rocksdb::BlockHandle*)':\ntable/block_based_table_builder.cc:754:22: error: this statement may fall through [-Werror=implicit-fallthrough=]\n         assert(false);\n                      ^\ntable/block_based_table_builder.cc:756:7: note: here\n       case kCRC32c: {\n       ^~~~\ncc1plus: all warnings being treated as errors\nCloses https://github.com/facebook/rocksdb/pull/1661\n\nDifferential Revision: D4318817\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: e67d171",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5334d8b44c223ea6bd27a8d6b348c1229f48eeaa"
    },
    {
        "hash": "1f6f7e3e89fe68c603389a8363e07da1ea27f4d3",
        "author": "Daniel Black",
        "date": "2016-12-12T14:39:18-08:00",
        "message": "cast to signed char in ldb_cmd_test for ppc64le\n\nSummary:\nchar is unsigned on power by default causing this test to fail with the FF case. ppc64 return 255 while x86 returned -1. Casting works on both platforms.\nCloses https://github.com/facebook/rocksdb/pull/1500\n\nDifferential Revision: D4308775\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: db3e6e0",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1f6f7e3e89fe68c603389a8363e07da1ea27f4d3"
    },
    {
        "hash": "dc64f46b1c56c6d7d511aa1b161c378feb566199",
        "author": "Andrew Kryczka",
        "date": "2016-12-09T16:54:14-08:00",
        "message": "Add db_bench option for stderr logging\n\nSummary:\nThe info log file (\"LOG\") is stored in the db directory by default. When the db is on a distributed env, this is unnecessarily slow. So, I added an option to db_bench to just print the info log messages to stderr.\nCloses https://github.com/facebook/rocksdb/pull/1641\n\nDifferential Revision: D4309348\n\nPulled By: ajkr\n\nfbshipit-source-id: 1e6f851",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dc64f46b1c56c6d7d511aa1b161c378feb566199"
    },
    {
        "hash": "2cabdb8f44614f9d44f9ba90d5524c24bd4f5dcb",
        "author": "Jonathan Lee",
        "date": "2016-12-09T11:54:22-08:00",
        "message": "Increase buffer size\n\nSummary:\nWhen compiling with GCC>=7.0.0, \"db/internal_stats.cc\" fails to compile as the data being written to the buffer potentially exceeds its size.\n\nThis fix simply doubles the size of the buffer, thus accommodating the max possible data size.\nCloses https://github.com/facebook/rocksdb/pull/1635\n\nDifferential Revision: D4302162\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: c76ad59",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2cabdb8f44614f9d44f9ba90d5524c24bd4f5dcb"
    },
    {
        "hash": "4a17b47bb5a2cc09f95acb53ec565bccd171ee4e",
        "author": "Jonathan Lee",
        "date": "2016-12-09T11:54:21-08:00",
        "message": "Remove unnecessary header include\n\nSummary:\nRemove \"util/testharness.h\" from list of includes for \"db/db_filesnapshot.cc\", as it wasn't being used and thus caused an extraneous dependency on gtest.\nCloses https://github.com/facebook/rocksdb/pull/1634\n\nDifferential Revision: D4302146\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: e900c0b",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_filesnapshot.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4a17b47bb5a2cc09f95acb53ec565bccd171ee4e"
    },
    {
        "hash": "8c2b921fdf1335814b5cc093d7bce06d4a65b9ab",
        "author": "Mike Kolupaev",
        "date": "2016-12-09T10:39:12-08:00",
        "message": "Fixed a crash in debug build in flush_job.cc\n\nSummary:\nIt was doing `&range_del_iters[0]` on an empty vector. Even though the resulting pointer is never dereferenced, it's still bad for two reasons:\n* the practical reason: it crashes with `std::out_of_range` exception in our debug build,\n* the \"C++ standard lawyer\" reason: it's undefined behavior because, in `std::vector` implementation, it probably \"dereferences\" a null pointer, which is invalid even though it doesn't actually read the pointed memory, just converts a pointer into a reference (and then flush_job.cc converts it back to pointer); nullptr references are undefined behavior.\nCloses https://github.com/facebook/rocksdb/pull/1612\n\nDifferential Revision: D4265625\n\nPulled By: al13n321\n\nfbshipit-source-id: db26fb9",
        "modified_files_count": 1,
        "modified_files": [
            "db/flush_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8c2b921fdf1335814b5cc093d7bce06d4a65b9ab"
    },
    {
        "hash": "5241e0dbfc42f0ff880ea6e3beb9f82ca467733a",
        "author": "Andrew Kryczka",
        "date": "2016-12-08T11:09:14-08:00",
        "message": "fix db_bench argument type\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/1633\n\nDifferential Revision: D4298161\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 2c7af35",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5241e0dbfc42f0ff880ea6e3beb9f82ca467733a"
    },
    {
        "hash": "2c2ba68247da3dd58f56f3349a28fe6052274192",
        "author": "Andrew Kryczka",
        "date": "2016-12-07T13:09:24-08:00",
        "message": "db_stress support for range deletions\n\nSummary:\nmade db_stress capable of adding range deletions to its db and verifying their correctness. i'll make db_crashtest.py use this option later once the collapsing optimization (https://github.com/facebook/rocksdb/pull/1614) is committed because currently it slows down the test too much.\nCloses https://github.com/facebook/rocksdb/pull/1625\n\nDifferential Revision: D4293939\n\nPulled By: ajkr\n\nfbshipit-source-id: d3beb3a",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2c2ba68247da3dd58f56f3349a28fe6052274192"
    },
    {
        "hash": "b821984d31afd6df9884420ca51222ca4617a930",
        "author": "Andrew Kryczka",
        "date": "2016-12-07T12:54:17-08:00",
        "message": "DeleteRange read path end-to-end tests\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/1592\n\nDifferential Revision: D4246260\n\nPulled By: ajkr\n\nfbshipit-source-id: ce03fa2",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_range_del_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b821984d31afd6df9884420ca51222ca4617a930"
    },
    {
        "hash": "fa50fffaf547b10e5b19654443edbe5528b9dc31",
        "author": "Andrew Kryczka",
        "date": "2016-12-06T18:09:14-08:00",
        "message": "Option to expand range tombstones in db_bench\n\nSummary:\nWhen enabled, this option replaces range tombstones with a sequence of\npoint tombstones covering the same range. This can be used to A/B test perf of\nrange tombstones vs sequential point tombstones, and help us find the cross-over\npoint, i.e., the size of the range above which range tombstones outperform point\ntombstones.\nCloses https://github.com/facebook/rocksdb/pull/1594\n\nDifferential Revision: D4246312\n\nPulled By: ajkr\n\nfbshipit-source-id: 3b00b23",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fa50fffaf547b10e5b19654443edbe5528b9dc31"
    },
    {
        "hash": "c26a4d8e8a4212b03bd0b0c0056cf7dad409f48e",
        "author": "Yi Wu",
        "date": "2016-12-06T14:39:16-08:00",
        "message": "Fix compile error in trasaction_lock_mgr.cc\n\nSummary:\nFix error on mac/windows build since they don't recognize `uint`.\nCloses https://github.com/facebook/rocksdb/pull/1624\n\nDifferential Revision: D4287139\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: b7cc88f",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_lock_mgr.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c26a4d8e8a4212b03bd0b0c0056cf7dad409f48e"
    },
    {
        "hash": "edde954e7b1655aafbf8c8a2375a604509c83df4",
        "author": "Islam AbdelRahman",
        "date": "2016-12-01T18:39:10-08:00",
        "message": "fix clang build\n\nSummary:\noverride is missing for FilterV2\nCloses https://github.com/facebook/rocksdb/pull/1606\n\nDifferential Revision: D4263832\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: d8b337a",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_iterator_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/edde954e7b1655aafbf8c8a2375a604509c83df4"
    },
    {
        "hash": "56281f3a970c1479d84de72e7a722b98a6e0bf8c",
        "author": "Yi Wu",
        "date": "2016-12-01T16:54:16-08:00",
        "message": "Add memtable_insert_with_hint_prefix_size option to db_bench\n\nSummary:\nAdd memtable_insert_with_hint_prefix_size option to db_bench\nCloses https://github.com/facebook/rocksdb/pull/1604\n\nDifferential Revision: D4260549\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: cee5ef7",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/56281f3a970c1479d84de72e7a722b98a6e0bf8c"
    },
    {
        "hash": "b77007df8b4078e9148ab45795fe2e2ad92512cd",
        "author": "fangchenliaohui",
        "date": "2016-12-01T09:54:11-08:00",
        "message": "Bug: paralle_group status updated in WriteThread::CompleteParallelWorker\n\nSummary:\nMulti-write thread may update the status of the parallel_group in\nWriteThread::CompleteParallelWorker if the status of Writer is not ok!\nWhen copy write status to the paralle_group, the write thread just hold the\nmutex of the the writer processed by itself. it is useless. The thread\nshould held the the leader of the parallel_group instead.\nCloses https://github.com/facebook/rocksdb/pull/1598\n\nDifferential Revision: D4252335\n\nPulled By: siying\n\nfbshipit-source-id: 3864cf7",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_thread.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b77007df8b4078e9148ab45795fe2e2ad92512cd"
    },
    {
        "hash": "5b219eccb545992a486b2711e4446f0a9e5911c2",
        "author": "Andrew Kryczka",
        "date": "2016-11-29T12:24:13-08:00",
        "message": "deleterange end-to-end test improvements for lite/robustness\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/1591\n\nDifferential Revision: D4246019\n\nPulled By: ajkr\n\nfbshipit-source-id: 0c4aa37",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_range_del_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5b219eccb545992a486b2711e4446f0a9e5911c2"
    },
    {
        "hash": "7784980fcd92282842befd241c2650bd59bdb872",
        "author": "Siying Dong",
        "date": "2016-11-29T11:09:22-08:00",
        "message": "Fix mis-reporting of compaction read bytes to the base level\n\nSummary:\nIn dynamic leveled compaction, when calculating read bytes, output level bytes may be wronglyl calculated as input level inputs. Fix it.\nCloses https://github.com/facebook/rocksdb/pull/1475\n\nDifferential Revision: D4148412\n\nPulled By: siying\n\nfbshipit-source-id: f2f475a",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7784980fcd92282842befd241c2650bd59bdb872"
    },
    {
        "hash": "3c6b49ed66c3203f053f43a885a8e0f51e7c6d20",
        "author": "Islam AbdelRahman",
        "date": "2016-11-29T10:54:15-08:00",
        "message": "Fix implicit conversion between int64_t to int\n\nSummary:\nMake conversion explicit, implicit conversion breaks the build\nCloses https://github.com/facebook/rocksdb/pull/1589\n\nDifferential Revision: D4245158\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: aaec00d",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3c6b49ed66c3203f053f43a885a8e0f51e7c6d20"
    },
    {
        "hash": "b3b875657f5fba0d11b86bd6dc4ff8e11bd6a441",
        "author": "Siying Dong",
        "date": "2016-11-29T09:09:14-08:00",
        "message": "Remove unused assignment in db/db_iter.cc\n\nSummary:\n\"make analyze\" complains the assignment is not useful. Remove it.\nCloses https://github.com/facebook/rocksdb/pull/1581\n\nDifferential Revision: D4241697\n\nPulled By: siying\n\nfbshipit-source-id: 178f67a",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b3b875657f5fba0d11b86bd6dc4ff8e11bd6a441"
    },
    {
        "hash": "4f6e89b1d0026f5801d9846bd9b3116228d990ba",
        "author": "Andrew Kryczka",
        "date": "2016-11-28T22:54:13-08:00",
        "message": "Fix range deletion covering key in same SST file\n\nSummary:\nAddTombstones() needs to be before t->Get(), oops :'(\nCloses https://github.com/facebook/rocksdb/pull/1576\n\nDifferential Revision: D4241041\n\nPulled By: ajkr\n\nfbshipit-source-id: 781ceea",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4f6e89b1d0026f5801d9846bd9b3116228d990ba"
    },
    {
        "hash": "a2bf265a393721a30ddae9b04fde4aece6515c97",
        "author": "Islam AbdelRahman",
        "date": "2016-11-28T18:39:13-08:00",
        "message": "Avoid intentional overflow in GetL0ThresholdSpeedupCompaction\n\nSummary:\nhttps://github.com/facebook/rocksdb/commit/99c052a34f93d119b75eccdcd489ecd581d48ee9 fixes integer overflow in GetL0ThresholdSpeedupCompaction() by checking if int become -ve.\nUBSAN will complain about that since this is still an overflow, we can fix the issue by simply using int64_t\nCloses https://github.com/facebook/rocksdb/pull/1582\n\nDifferential Revision: D4241525\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: b3ae21f",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a2bf265a393721a30ddae9b04fde4aece6515c97"
    },
    {
        "hash": "1886c435b9328307dbfce48860ef06fccfdb47d4",
        "author": "Islam AbdelRahman",
        "date": "2016-11-28T16:54:16-08:00",
        "message": "Fix CompactionJob::Install division by zero\n\nSummary:\nFix CompactionJob::Install division by zero\nCloses https://github.com/facebook/rocksdb/pull/1580\n\nDifferential Revision: D4240794\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: 7286721",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1886c435b9328307dbfce48860ef06fccfdb47d4"
    },
    {
        "hash": "63c30de80df841323e9b16040a5ff6a7159e07d6",
        "author": "Islam AbdelRahman",
        "date": "2016-11-28T16:39:14-08:00",
        "message": "fix options_test ubsan\n\nSummary:\nHaving -ve value for max_write_buffer_number does not make sense and cause us to do a left shift on a -ve value number\nCloses https://github.com/facebook/rocksdb/pull/1579\n\nDifferential Revision: D4240798\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: bd6267e",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/63c30de80df841323e9b16040a5ff6a7159e07d6"
    },
    {
        "hash": "13e66a8f515b03ec65393dd321045c01edc8b0c1",
        "author": "Islam AbdelRahman",
        "date": "2016-11-28T16:39:13-08:00",
        "message": "Fix compaction_job.cc division by zero\n\nSummary:\nFix division by zero in compaction_job.cc\nCloses https://github.com/facebook/rocksdb/pull/1575\n\nDifferential Revision: D4240818\n\nPulled By: IslamAbdelRahman\n\nfbshipit-source-id: a8bc757",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/13e66a8f515b03ec65393dd321045c01edc8b0c1"
    },
    {
        "hash": "01eabf7375d4458c8a352126a8bc57eb600c46c0",
        "author": "Andrew Kryczka",
        "date": "2016-11-28T15:54:12-08:00",
        "message": "Fix double-counted deletion stat\n\nSummary:\nBoth the single deletion and the value are included in compaction outputs, so no need to update the stat for the value's deletion yet, otherwise it'd be double-counted.\nCloses https://github.com/facebook/rocksdb/pull/1574\n\nDifferential Revision: D4241181\n\nPulled By: ajkr\n\nfbshipit-source-id: c9aaa15",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/01eabf7375d4458c8a352126a8bc57eb600c46c0"
    },
    {
        "hash": "f2a8f92a150afd5ec6fdabc310099a4779e63385",
        "author": "Siying Dong",
        "date": "2016-11-21T14:54:14-08:00",
        "message": "rocks_lua_compaction_filter: add unused attribute to a variable\n\nSummary:\nRelease build shows warning without this fix.\nCloses https://github.com/facebook/rocksdb/pull/1558\n\nDifferential Revision: D4215831\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 888a755",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/lua/rocks_lua_compaction_filter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f2a8f92a150afd5ec6fdabc310099a4779e63385"
    },
    {
        "hash": "4444256ab79876bf33500ad4907c45b7b4d57137",
        "author": "Nick Terrell",
        "date": "2016-11-21T12:24:14-08:00",
        "message": "Remove use of deprecated LZ4 function\n\nSummary:\nLZ4 1.7.3 emits warnings when calling the deprecated function `LZ4_compress_limitedOutput_continue()`.  Starting in r129, LZ4 introduces `LZ4_compress_fast_continue()` as a replacement, and the two functions calls are [exactly equivalent](https://github.com/lz4/lz4/blob/dev/lib/lz4.c#L1408).\nCloses https://github.com/facebook/rocksdb/pull/1532\n\nDifferential Revision: D4199240\n\nPulled By: siying\n\nfbshipit-source-id: 138c2bc",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4444256ab79876bf33500ad4907c45b7b4d57137"
    },
    {
        "hash": "548d7fb26165ace003cb04e9811fa3a8fbd6c9cf",
        "author": "Changli Gao",
        "date": "2016-11-21T12:24:13-08:00",
        "message": "Fix fd leak when using direct IOs\n\nSummary:\nWe should close the fd, before overriding it. This bug was\nintroduced by f89caa127baa086cb100976b14da1a531cf0e823\nCloses https://github.com/facebook/rocksdb/pull/1553\n\nDifferential Revision: D4214101\n\nPulled By: siying\n\nfbshipit-source-id: 0d65de0",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/548d7fb26165ace003cb04e9811fa3a8fbd6c9cf"
    },
    {
        "hash": "a0deec960f3a8190831c673e5ba998fe6fb7ea90",
        "author": "Changli Gao",
        "date": "2016-11-20T18:24:12-08:00",
        "message": "Fix deadlock when calling getMergedHistogram\n\nSummary:\nWhen calling StatisticsImpl::HistogramInfo::getMergedHistogram(), if\nthere is a dying thread, which is calling\nThreadLocalPtr::StaticMeta::OnThreadExit() to merge its thread values to\nHistogramInfo, deadlock will occur. Because the former try to hold\nmerge_lock then ThreadMeta::mutex_, but the later try to hold\nThreadMeta::mutex_ then merge_lock. In short, the locking order isn't\nthe same.\n\nThis patch addressed this issue by releasing merge_lock before folding\nthread values.\nCloses https://github.com/facebook/rocksdb/pull/1552\n\nDifferential Revision: D4211942\n\nPulled By: ajkr\n\nfbshipit-source-id: ef89bcb",
        "modified_files_count": 1,
        "modified_files": [
            "util/statistics.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a0deec960f3a8190831c673e5ba998fe6fb7ea90"
    },
    {
        "hash": "73843aa6361bab52b10299b9a45b5f5d85c4752b",
        "author": "Siying Dong",
        "date": "2016-11-18T19:24:13-08:00",
        "message": "Direct I/O Reads Handle the last sector correctly.\n\nSummary:\nCurrently, in the Direct I/O read mode, the last sector of the file, if not full, is not handled correctly. If the return value of pread is not multiplier of kSectorSize, we still go ahead and continue reading, even if the buffer is not aligned. With the commit, if the return value is not multiplier of kSectorSize, and all but the last sector has been read, we simply return.\nCloses https://github.com/facebook/rocksdb/pull/1550\n\nDifferential Revision: D4209609\n\nPulled By: lightmark\n\nfbshipit-source-id: cb0b439",
        "modified_files_count": 1,
        "modified_files": [
            "util/io_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/73843aa6361bab52b10299b9a45b5f5d85c4752b"
    },
    {
        "hash": "635a7bd1adb9e9d943bebb34dc9e42789a06e25f",
        "author": "Andrew Kryczka",
        "date": "2016-11-17T14:39:13-08:00",
        "message": "refactor TableCache Get/NewIterator for single exit points\n\nSummary:\nthese functions were too complicated to change with exit points everywhere, so refactored them.\n\nbtw, please review urgently, this is a prereq to fix the 5.0 perf regression\nCloses https://github.com/facebook/rocksdb/pull/1534\n\nDifferential Revision: D4198972\n\nPulled By: ajkr\n\nfbshipit-source-id: 04ebfb7",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/635a7bd1adb9e9d943bebb34dc9e42789a06e25f"
    },
    {
        "hash": "760ef68a69d1e727e80487a5f9d15ccad47bab00",
        "author": "Andrew Kryczka",
        "date": "2016-11-16T14:09:07-08:00",
        "message": "fix deleterange asan issue\n\nSummary:\npinned_iters_mgr_ pins iterators allocated with arena_, so we should order the\ninstance variable declarations such that the pinned iterators have their destructors\nexecuted before the arena is destroyed.\nCloses https://github.com/facebook/rocksdb/pull/1528\n\nDifferential Revision: D4191984\n\nPulled By: ajkr\n\nfbshipit-source-id: 1386f20",
        "modified_files_count": 1,
        "modified_files": [
            "db/range_del_aggregator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/760ef68a69d1e727e80487a5f9d15ccad47bab00"
    },
    {
        "hash": "327085b7b2ca72504800e023bab20c33ffa5474e",
        "author": "Andrew Kryczka",
        "date": "2016-11-16T12:09:11-08:00",
        "message": "fix valgrind\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/1526\n\nDifferential Revision: D4191257\n\nPulled By: ajkr\n\nfbshipit-source-id: d09dc76",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/327085b7b2ca72504800e023bab20c33ffa5474e"
    },
    {
        "hash": "018bb2ebf52e547e3f1a6a61eca7df0ec575f07f",
        "author": "Andrew Kryczka",
        "date": "2016-11-15T17:39:47-08:00",
        "message": "DeleteRange support for db_bench\n\nSummary:\nAdded a few options to configure when to add range tombstones during\nany benchmark involving writes.\nCloses https://github.com/facebook/rocksdb/pull/1522\n\nDifferential Revision: D4187388\n\nPulled By: ajkr\n\nfbshipit-source-id: 2c8a473",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/018bb2ebf52e547e3f1a6a61eca7df0ec575f07f"
    },
    {
        "hash": "eba99c28e40337cf4cd04d139dd1f7617c9c1863",
        "author": "Islam AbdelRahman",
        "date": "2016-11-15T13:54:08-08:00",
        "message": "Fix min_write_buffer_number_to_merge = 0 bug\n\nSummary:\nIt's possible that we set min_write_buffer_number_to_merge to 0.\nThis should never happen\nCloses https://github.com/facebook/rocksdb/pull/1515\n\nDifferential Revision: D4183356\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: c9d39d7",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eba99c28e40337cf4cd04d139dd1f7617c9c1863"
    },
    {
        "hash": "3b192f61861ce64aad7696fb084e976bfaaa940c",
        "author": "Andrew Kryczka",
        "date": "2016-11-14T17:54:20-08:00",
        "message": "Handle full final subcompaction output file with range deletions\n\nSummary:\nThis conditional should only open a new file that's dedicated to range deletions when it's the sole output of the subcompaction. Previously, we created such a file whenever the table builder was nullptr, which would've also been the case whenever the CompactionIterator's final key coincided with the final output table becoming full.\nCloses https://github.com/facebook/rocksdb/pull/1507\n\nDifferential Revision: D4174613\n\nPulled By: ajkr\n\nfbshipit-source-id: 9ffacea",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3b192f61861ce64aad7696fb084e976bfaaa940c"
    },
    {
        "hash": "b39b2ee12f302021fdfb69051204128482caf638",
        "author": "Aaron Gao",
        "date": "2016-11-10T11:24:20-08:00",
        "message": "do not call get() in recovery mode\n\nSummary:\nThis is a previous fix that has a typo\nCloses https://github.com/facebook/rocksdb/pull/1487\n\nDifferential Revision: D4157381\n\nPulled By: lightmark\n\nfbshipit-source-id: f079be8",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b39b2ee12f302021fdfb69051204128482caf638"
    },
    {
        "hash": "14c0380e78637df0e94b874907b1e86a32d134ca",
        "author": "Anirban Rahut",
        "date": "2016-11-10T10:09:21-08:00",
        "message": "Convenience option to parse an internal key on command line\n\nSummary:\nenhancing sst_dump to be able to parse internal key\nCloses https://github.com/facebook/rocksdb/pull/1482\n\nDifferential Revision: D4154175\n\nPulled By: siying\n\nfbshipit-source-id: b0e28b1",
        "modified_files_count": 1,
        "modified_files": [
            "tools/sst_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/14c0380e78637df0e94b874907b1e86a32d134ca"
    },
    {
        "hash": "a9fb346e4abf16fd88922c843ed456617cb8644b",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-11-09T12:24:18-08:00",
        "message": "Fix RocksDB Lite build failure in c_test.cc\n\nSummary:\nFix the following RocksDB Lite build failure in c_test.cc\n\ndb/c_test.c:1051:3: error: implicit declaration of function 'fprintf' is invalid in C99 [-Werror,-Wimplicit-function-declaration]\n  fprintf(stderr, \"SKIPPED\\n\");\n  ^\ndb/c_test.c:1051:3: error: declaration of built-in function 'fprintf' requires inclusion of the header <stdio.h> [-Werror,-Wbuiltin-requires-header]\ndb/c_test.c:1051:11: error: use of undeclared identifier 'stderr'\n  fprintf(stderr, \"SKIPPED\\n\");\n          ^\n3 errors generated.\nCloses https://github.com/facebook/rocksdb/pull/1479\n\nDifferential Revision: D4151160\n\nPulled By: yhchiang\n\nfbshipit-source-id: a471a30",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a9fb346e4abf16fd88922c843ed456617cb8644b"
    },
    {
        "hash": "144cdb8f1654da2a55a1c4921d05fb7981b8264b",
        "author": "Peter (Stig) Edwards",
        "date": "2016-11-09T11:24:20-08:00",
        "message": "16384 as e.g .value for compression_max_dict_bytes\n\nSummary:\nUse 16384 as e.g .value for ldb the --compression_max_dict_bytes option.\nI think 14 was copy and pasted from the options in the lines above.\nCloses https://github.com/facebook/rocksdb/pull/1483\n\nDifferential Revision: D4154393\n\nPulled By: siying\n\nfbshipit-source-id: ef53a69",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/144cdb8f1654da2a55a1c4921d05fb7981b8264b"
    },
    {
        "hash": "5c5d01ae740272399b4265139131f415667831ec",
        "author": "Islam AbdelRahman",
        "date": "2016-11-04T11:24:14-07:00",
        "message": "Fix wrong comment (Maximum supported block size)\n\nSummary:\nWe can support SST files >2GB but we don't support blocks >2GB\nCloses https://github.com/facebook/rocksdb/pull/1465\n\nDifferential Revision: D4132140\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 63bf12d",
        "modified_files_count": 1,
        "modified_files": [
            "table/block.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5c5d01ae740272399b4265139131f415667831ec"
    },
    {
        "hash": "ce22ea99a0487bec176e491b1d7178871038fa72",
        "author": "Adam Retter",
        "date": "2016-11-01T10:09:16-07:00",
        "message": "Fix casts for MSVC\n\nSummary:\nI am not sure if this is the best way to fix this?\nCloses https://github.com/facebook/rocksdb/pull/1452\n\nDifferential Revision: D4109338\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: ca40809",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ce22ea99a0487bec176e491b1d7178871038fa72"
    },
    {
        "hash": "d5555d95a366f8132fba7b7ab367552c0be60f34",
        "author": "Vladislav Vaintroub",
        "date": "2016-10-31T17:24:18-07:00",
        "message": "Fix MSVC compile error in 32 bit compilation\n\nSummary:\nPassing std::atomic<uint64_t> variables to ASSERT_EQ()\nresults in compile error\nC2718 'const T1': actual parameter with requested alignment of 8 won't be aligned.\n\nVS2015 defines std::atomic as specially aligned type ( with 'alignas'),\nhowever the compiler does not like declspec(align)ed  function\narguments.\n\nWorked around by casting std::atomic<uint64_t> types to uint64_t\nin ASSERT_EQ.\nCloses https://github.com/facebook/rocksdb/pull/1450\n\nDifferential Revision: D4106788\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 5fb42c3",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iterator_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d5555d95a366f8132fba7b7ab367552c0be60f34"
    },
    {
        "hash": "da61f348d37e45a0cfd70893499d9f6625111b4e",
        "author": "Siying Dong",
        "date": "2016-10-31T16:09:13-07:00",
        "message": "Print compression and Fast CRC support info as Header level\n\nSummary:\nCurrently the compression suppport and fast CRC support information is printed as info level. They should be in the same level as options, which is header level.\n\nAlso add ZSTD to this printing.\nCloses https://github.com/facebook/rocksdb/pull/1448\n\nDifferential Revision: D4106608\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: cb9a076",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/da61f348d37e45a0cfd70893499d9f6625111b4e"
    },
    {
        "hash": "f9eb56791a0f4b2f9bf2b4da67ba59292f43db20",
        "author": "Siying Dong",
        "date": "2016-10-31T14:54:26-07:00",
        "message": "db_bench: --dump_malloc_stats takes no effect\n\nSummary:\nFix the bug that --dump_malloc_stats is set before opening the DB.\nCloses https://github.com/facebook/rocksdb/pull/1447\n\nDifferential Revision: D4106001\n\nPulled By: siying\n\nfbshipit-source-id: 4e746da",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f9eb56791a0f4b2f9bf2b4da67ba59292f43db20"
    },
    {
        "hash": "1b295ac8ae6a4871e8bf1b181558f7f49a9ee3bc",
        "author": "Siying Dong",
        "date": "2016-10-29T16:09:18-07:00",
        "message": "DBTest.GetThreadStatus: Wait for test results for longer\n\nSummary:\nThe current 10 millisecond waiting for test results may not be sufficient in some test environments. Increase it to 60 seconds and check the results for every 1 milliseond.\n\nAlready reviewed: https://reviews.facebook.net/D65457\nCloses https://github.com/facebook/rocksdb/pull/1437\n\nDifferential Revision: D4099443\n\nPulled By: siying\n\nfbshipit-source-id: cf1f205",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1b295ac8ae6a4871e8bf1b181558f7f49a9ee3bc"
    },
    {
        "hash": "b50a81a2bb812332ba3cbc68590ffab54c765c8b",
        "author": "Aaron Gao",
        "date": "2016-10-28T18:24:14-07:00",
        "message": "Add a test for tailing_iterator\n\nSummary:\nA bug that tailingIterator->Seek(target) skips records.\n\nI think the bug is in the SeekInternal starting at lines 387:\nsearch_left_bound > search_right_bound\nThere are only 2 cases this can happen:\n(1) target key is smaller than left most file\n(2) target key is larger than right most file\n\nThe comment is wrong, there is another possibility that at the higher level there is a big gap such that the file in the lower level fits completely in the gap and then\nindexer->GetNextLevelIndex returns search_left_bound > search_right_bound I think pointing on the files after and before the gap.\ndetails: https://github.com/facebook/rocksdb/issues/1372\n\nfixed this bug with test case added.\nCloses https://github.com/facebook/rocksdb/pull/1436\n\nReviewed By: IslamAbdelRahman\n\nDifferential Revision: D4099313\n\nPulled By: lightmark\n\nfbshipit-source-id: 6a675b3",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_tailing_iter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b50a81a2bb812332ba3cbc68590ffab54c765c8b"
    },
    {
        "hash": "04751d53459d5198e8f12a32aa525eeee4ebfd58",
        "author": "Siying Dong",
        "date": "2016-10-28T17:39:20-07:00",
        "message": "L0 compression should follow options.compression_per_level if not empty\n\nSummary:\nCurrently, we don't use options.compression_per_level[0] as the compression style for L0 compression type, unless it is None. This behavior\n doesn't look like on purpose. This diff will make sure L0 compress using the style of options.compression_per_level[0].\n\nReviewed and accepted in: https://reviews.facebook.net/D65607\nCloses https://github.com/facebook/rocksdb/pull/1435\n\nDifferential Revision: D4099368\n\nPulled By: siying\n\nfbshipit-source-id: cfbbdcd",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/04751d53459d5198e8f12a32aa525eeee4ebfd58"
    },
    {
        "hash": "2946cadc46e444601e30b3ced0d59d9c938df84b",
        "author": "Andrew Kryczka",
        "date": "2016-10-28T15:54:21-07:00",
        "message": "Improve RangeDelAggregator documentation\n\nSummary:\nas requested in D62259\nCloses https://github.com/facebook/rocksdb/pull/1434\n\nDifferential Revision: D4099047\n\nPulled By: ajkr\n\nfbshipit-source-id: a258cfb",
        "modified_files_count": 1,
        "modified_files": [
            "db/range_del_aggregator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2946cadc46e444601e30b3ced0d59d9c938df84b"
    },
    {
        "hash": "c6168d13ab391bbb0a0aaf4ce061551624055fe3",
        "author": "Jan Doms",
        "date": "2016-10-28T10:33:49-07:00",
        "message": "removed some declarations from c.h which resulted in undefined symbols (#1407)",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c6168d13ab391bbb0a0aaf4ce061551624055fe3"
    },
    {
        "hash": "bc429de490ede37d6e33d9a511fc3bc5c82746e2",
        "author": "Aaron Gao",
        "date": "2016-10-28T10:25:39-07:00",
        "message": "revert fractional cascading in farward iterator\n\nSummary: As offline discussion with Siying, revert this since it has bug with seek.\n\nTest Plan: make check -j64\n\nReviewers: yiwu, andrewkr, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D65559",
        "modified_files_count": 1,
        "modified_files": [
            "db/forward_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bc429de490ede37d6e33d9a511fc3bc5c82746e2"
    },
    {
        "hash": "9ee84067f6df733fc8d689bc2d6060f14579d9df",
        "author": "Siying Dong",
        "date": "2016-10-25T10:23:50-07:00",
        "message": "Disable DBTest.RepeatedWritesToSameKey (#1420)\n\nSummary:\r\nThe verification condition of the test DBTest.RepeatedWritesToSameKey doesn't hold anymore after 3ce3bb3da2486c2c18a332128dda7c05a91abb85.\r\nDisable the test for now before we find a way to replace it.\r\n\r\nTest Plan: Run the test and make sure it is disabled.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9ee84067f6df733fc8d689bc2d6060f14579d9df"
    },
    {
        "hash": "1d9dbef64e6101e995035cfcf765255898a6bac5",
        "author": "sdong",
        "date": "2016-10-20T15:43:00-07:00",
        "message": "Restrict running condition of UniversalCompactionTrivialMoveTest2\n\nSummary: DBTestUniversalCompaction.UniversalCompactionTrivialMoveTest2 verifies non-trivial move is not triggered if we load data in sequential order. However, if there are multiple compaction threads, this conditon may not hold. Restrict the running condition to 1 compaction thread to make the test more robust.\n\nTest Plan: Run the test and make sure at least it doesn't regress normally.\n\nReviewers: yhchiang, andrewkr, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D65277",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_universal_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1d9dbef64e6101e995035cfcf765255898a6bac5"
    },
    {
        "hash": "48e4e842b79a0fe26ee9044830110f9a3484c20a",
        "author": "yiwu-arbug",
        "date": "2016-10-19T18:18:42-07:00",
        "message": "Disable auto compactions in memory_test and re-enable the test (#1408)\n\nSummary: Auto-compactions will change memory usage of DB but memory_test\r\ndidn't take it into account. This PR disable auto compactions in the\r\ntest and hopefully it fixes its flakyness.\r\n\r\nTest Plan:\r\nUBSAN build used to catch the flakyness. Run `make ubsan_check` and it\r\npasses.",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/memory/memory_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/48e4e842b79a0fe26ee9044830110f9a3484c20a"
    },
    {
        "hash": "fb2e412943ef0bb8ee7084822eb1d53ada6af366",
        "author": "sdong",
        "date": "2016-10-19T15:55:56-07:00",
        "message": "column_family_test: disable some tests in LITE\n\nSummary: Some tests in column_family_test depend on functions that are not available in LITE build, which sometimes cause flakiness. Disable them.\n\nTest Plan: Run those tests in LITE build.\n\nReviewers: yiwu, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D65271",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fb2e412943ef0bb8ee7084822eb1d53ada6af366"
    },
    {
        "hash": "5af651db24beffa019a0721e3e57b001e2275e21",
        "author": "Aaron Gao",
        "date": "2016-10-19T13:37:51-07:00",
        "message": "fix data race in compact_files_test\n\nSummary: fix data race\n\nTest Plan: compact_files_test\n\nReviewers: sdong, yiwu, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D65259",
        "modified_files_count": 1,
        "modified_files": [
            "db/compact_files_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5af651db24beffa019a0721e3e57b001e2275e21"
    },
    {
        "hash": "52c9808c3a5c31daf48f8b11b64a41d518916d8e",
        "author": "Aaron Gao",
        "date": "2016-10-18T16:30:34-07:00",
        "message": "not split file in compaciton on level 0\n\nSummary: we should not split file on level 0 in compaction because it will fail the following verification of seqno order on level 0\n\nTest Plan: check with filldeterministic in db_bench\n\nReviewers: yhchiang, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D65193",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/52c9808c3a5c31daf48f8b11b64a41d518916d8e"
    },
    {
        "hash": "b4d07123c4f3f84e7cbc0e6fcb400fdbf1bf1eb4",
        "author": "sdong",
        "date": "2016-10-18T14:01:10-07:00",
        "message": "SamePrefixTest.InDomainTest to clear the test directory before testing\n\nSummary: SamePrefixTest.InDomainTest may fail if the previous run of some test cases in prefix_test fail.\n\nTest Plan: Run the test\n\nReviewers: lightmark, yhchiang, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D65163",
        "modified_files_count": 1,
        "modified_files": [
            "db/prefix_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b4d07123c4f3f84e7cbc0e6fcb400fdbf1bf1eb4"
    },
    {
        "hash": "5027dd17a7623a24f8ca854637de8b59f2f9aa1e",
        "author": "dhruba borthakur",
        "date": "2016-10-17T10:40:30-07:00",
        "message": "Fix a minor bug in the ldb tool that was not selecting the specified (#1399)\n\ncolumn family for compaction.",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5027dd17a7623a24f8ca854637de8b59f2f9aa1e"
    },
    {
        "hash": "040328a30d1ae7f3df3b8e17877833d6ad8dab57",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-10-13T14:26:57-07:00",
        "message": "Remove an assertion for single-delete in MergeHelper::MergeUntil\n\nSummary:\nPreviously we have an assertion which triggers when we issue Merges\nafter a single delete.  However, merges after a single delete are\nunrelated to that single delete.  Thus this behavior should be\nallowed.\n\nThis will address a flakyness of db_stress.\n\nTest Plan: db_stress\n\nReviewers: IslamAbdelRahman, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D64923",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/040328a30d1ae7f3df3b8e17877833d6ad8dab57"
    },
    {
        "hash": "8cbe3e10cab26a242286c90d8f9e6eda9b98114c",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-10-13T14:26:12-07:00",
        "message": "Relax the acceptable bias RateLimiterTest::Rate test be 25%\n\nSummary:\nIn the current implementation of RateLimiter, the difference\nbetween the configured rate and the actual rate might be more\nthan 20%, while our test only allows 15% difference.  This diff\nrelaxes the acceptable bias RateLimiterTest::Rate test be 25%\nto make the test less flaky.\n\nTest Plan: rate_limiter_test\n\nReviewers: IslamAbdelRahman, andrewkr, yiwu, lightmark, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D64941",
        "modified_files_count": 1,
        "modified_files": [
            "util/rate_limiter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8cbe3e10cab26a242286c90d8f9e6eda9b98114c"
    },
    {
        "hash": "f26a139d89eba71bd28946e1f14bf59b8139cd11",
        "author": "Islam AbdelRahman",
        "date": "2016-10-13T11:56:27-07:00",
        "message": "Log successful AddFile\n\nSummary: Log successful AddFile\n\nTest Plan: visually check LOG file\n\nReviewers: yiwu, andrewkr, lightmark, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, jkedgar, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D65019",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_add_file.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f26a139d89eba71bd28946e1f14bf59b8139cd11"
    },
    {
        "hash": "e4892709807f19703a5a378d90deaf0c8610315b",
        "author": "Dmitri Smirnov",
        "date": "2016-10-12T11:16:16-07:00",
        "message": "Fix scoped arena iterator (#1387)",
        "modified_files_count": 1,
        "modified_files": [
            "table/scoped_arena_iterator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e4892709807f19703a5a378d90deaf0c8610315b"
    },
    {
        "hash": "f8d8cf53fe8ff15dcaf70fc7467e9f22531efcd2",
        "author": "Peter (Stig) Edwards",
        "date": "2016-10-11T16:45:51-07:00",
        "message": "Fix log_write_bench -bytes_per_sync option. (#1375)\n\nHello and thanks for RocksDB,\r\n \r\nWhen log_write_bench is run with the -bytes_per_sync option, the option does not influence any *sync* behaviour.\r\n \r\n> strace -e trace=write,sync_file_range ./log_write_bench -record_interval 0 -record_size 1048576 -num_records 11 -bytes_per_sync 2097152 2>&1 | egrep '^(sync|write.*XXXX)'\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\n \r\nI suspect that this is because the bytes_per_sync option now needs to be using a `WritableFileWriter` and not a `WritableFile`.\r\n \r\nWith the diff below applied, it changes to:\r\n \r\n> strace -e trace=write,sync_file_range ./log_write_bench -record_interval 0 -record_size 1048576 -num_records 11 -bytes_per_sync 2097152 2>&1 | egrep '^(sync|write.*XXXX)'\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nsync_file_range(0x3, 0, 0x200000, 0x2)  = 0\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nsync_file_range(0x3, 0x200000, 0x200000, 0x2) = 0\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nsync_file_range(0x3, 0x400000, 0x200000, 0x2) = 0\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nsync_file_range(0x3, 0x600000, 0x200000, 0x2) = 0\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 1048576) = 1048576\r\nsync_file_range(0x3, 0x800000, 0x200000, 0x2) = 0\r\n \r\n( Note that the first 1MB is not synced as mentioned in util/file_reader_writer.cc::WritableFileWriter::Flush() )\r\n \r\nThis diff also includes the fix from https://github.com/facebook/rocksdb/pull/1373\r\n \r\n> diff -du util/log_write_bench.cc.orig util/log_write_bench.cc\r\n--- util/log_write_bench.cc.orig        2016-10-04 12:06:29.115122580 -0400\r\n+++ util/log_write_bench.cc     2016-10-05 07:24:09.677037576 -0400\r\n@@ -14,6 +14,7 @@\r\n #include <gflags/gflags.h>\r\n\r\n #include \"rocksdb/env.h\"\r\n+#include \"util/file_reader_writer.h\"\r\n #include \"util/histogram.h\"\r\n #include \"util/testharness.h\"\r\n #include \"util/testutil.h\"\r\n@@ -38,19 +39,21 @@\r\n   env_options.bytes_per_sync = FLAGS_bytes_per_sync;\r\n   unique_ptr<WritableFile> file;\r\n   env->NewWritableFile(file_name, &file, env_options);\r\n+  unique_ptr<WritableFileWriter> writer;\r\n+  writer.reset(new WritableFileWriter(std::move(file), env_options));\r\n\r\n   std::string record;\r\n-  record.assign('X', FLAGS_record_size);\r\n+  record.assign(FLAGS_record_size, 'X');\r\n\r\n   HistogramImpl hist;\r\n\r\n   uint64_t start_time = env->NowMicros();\r\n   for (int i = 0; i < FLAGS_num_records; i++) {\r\n     uint64_t start_nanos = env->NowNanos();\r\n-    file->Append(record);\r\n-    file->Flush();\r\n+    writer->Append(record);\r\n+    writer->Flush();\r\n     if (FLAGS_enable_sync) {\r\n-      file->Sync();\r\n+      writer->Sync(false);\r\n     }\r\n     hist.Add(env->NowNanos() - start_nanos);",
        "modified_files_count": 1,
        "modified_files": [
            "util/log_write_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f8d8cf53fe8ff15dcaf70fc7467e9f22531efcd2"
    },
    {
        "hash": "02b3e3985ce55d70f9192799fa2ac5fb248ff0eb",
        "author": "Reid Horuff",
        "date": "2016-10-11T15:48:50-07:00",
        "message": "Make txn->GetState() const\n\nSummary: makes Transaction::GetState() a const function.\n\nTest Plan: compiles.\n\nReviewers: mung\n\nReviewed By: mung\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D64929",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/transaction.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/02b3e3985ce55d70f9192799fa2ac5fb248ff0eb"
    },
    {
        "hash": "67501cfc9aabd32c626c1c7a6f4f8b53a92d70dd",
        "author": "Islam AbdelRahman",
        "date": "2016-10-07T17:16:13-07:00",
        "message": "Fix -ve std::string::resize\n\nSummary:\nI saw this exception thrown because sometimes we may resize with -ve value\nif we have empty max_bytes_for_level_multiplier_additional vector\n\nTest Plan: run the tests\n\nReviewers: yiwu\n\nReviewed By: yiwu\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D64791",
        "modified_files_count": 1,
        "modified_files": [
            "util/cf_options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/67501cfc9aabd32c626c1c7a6f4f8b53a92d70dd"
    },
    {
        "hash": "8c55bb87c8ccd7d97275ed7b588179db0c939d06",
        "author": "Reid Horuff",
        "date": "2016-10-07T15:04:05-07:00",
        "message": "Make Lock Info test multiple column families\n\nSummary: Modifies the lock info export test to test multiple column families after I was experiencing a bug while developing the MyRocks front-end for this.\n\nTest Plan: is test.\n\nReviewers: mung\n\nReviewed By: mung\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D64725",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8c55bb87c8ccd7d97275ed7b588179db0c939d06"
    },
    {
        "hash": "043cb62d638d94d840038db86f46b369d9bb1bc1",
        "author": "Peter (Stig) Edwards",
        "date": "2016-10-06T10:45:31-07:00",
        "message": "Fix record_size in log_write_bench, swap args to std::string::assign. (#1373)\n\nHello and thank you for RocksDB,\r\n \r\nI noticed when using log_write_bench that writes were always 88 bytes:\r\n \r\n> strace -e trace=write ./log_write_bench -num_records 2 2>&1 | head -n 2\r\nwrite(3, \"\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\"..., 88) = 88\r\nwrite(3, \"\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\\371\"..., 88) = 88\r\n\r\n> strace -e trace=write ./log_write_bench -record_size 4096 -num_records 2 2>&1 | head -n 2\r\nwrite(3, \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"..., 88) = 88\r\nwrite(3, \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"..., 88) = 88\r\n \r\nI think this should be:\r\n\r\n<<    record.assign('X', FLAGS_record_size);\r\n>>    record.assign(FLAGS_record_size, 'X');\r\n\r\nSo fill and not buffer. Otherwise I always see writes of size 88 (the decimal value for chr \"X\").\r\n\r\nstring& assign (const char* s, size_t n);\r\nbuffer - Copies the first n characters from the array of characters pointed by s.\r\n\r\nstring& assign (size_t n, char c);\r\nfill   - Replaces the current value by n consecutive copies of character c.\r\n\r\nperl -le 'print ord \"X\"'\r\n88\r\n \r\nWith the change:\r\n \r\n> strace -e trace=write ./log_write_bench -record_size 4096 -num_records 2 2>&1 | head -n 2\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 4096) = 4096\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 4096) = 4096\r\n \r\n> strace -e trace=write ./log_write_bench -num_records 2 2>&1 | head -n 2\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 249) = 249\r\nwrite(3, \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"..., 249) = 249\r\n\r\nThanks.\r\n\r\nhttps://github.com/facebook/rocksdb/commit/01c27be5fb42524c5052b4b4a23e05501e1d1421\r\nhttps://reviews.facebook.net/D16239",
        "modified_files_count": 1,
        "modified_files": [
            "util/log_write_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/043cb62d638d94d840038db86f46b369d9bb1bc1"
    },
    {
        "hash": "4985f60fc88f6bd8e715067ef02d443dea32a826",
        "author": "Sage Weil",
        "date": "2016-10-06T10:43:05-07:00",
        "message": "env_mirror: fix a few leaks (#1363)\n\n* env_mirror: fix leak from LockFile\r\n\r\nSigned-off-by: Sage Weil <sage@redhat.com>\r\n\r\n* env_mirror: instruct EnvMirror whether mirrored Envs should be destroyed\r\n\r\nThe lifecycle rules for Env are frustrating and undocumented.  Notably,\r\nEnv::Default() should *not* be freed, but any Env instances we created\r\nshould be.\r\n\r\nExplicitly instruct EnvMirror whether to clean up child Env instances.\r\nDefault to false so that we do not affect existing callers.\r\n\r\nSigned-off-by: Sage Weil <sage@redhat.com>",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/env_mirror.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4985f60fc88f6bd8e715067ef02d443dea32a826"
    },
    {
        "hash": "5aded67ddbb01db01e18e2e5a46173f76ba2b54d",
        "author": "Igor Mihalik",
        "date": "2016-10-06T10:37:19-07:00",
        "message": "update of c.h (#1371)\n\nAdded rocksdb_options_set_memtable_prefix_bloom_size_ratio function implemented in c.cc but not exported via c.h",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5aded67ddbb01db01e18e2e5a46173f76ba2b54d"
    },
    {
        "hash": "9d6c96138374af940a71fe97d31f7c6459e9cde3",
        "author": "Islam AbdelRahman",
        "date": "2016-10-03T18:25:10-07:00",
        "message": "Fix Mac build",
        "modified_files_count": 1,
        "modified_files": [
            "util/testutil.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9d6c96138374af940a71fe97d31f7c6459e9cde3"
    },
    {
        "hash": "13f7a01f61c122dc800016e16b998f32c708abd3",
        "author": "Tomas Kolda",
        "date": "2016-09-29T17:11:32-04:00",
        "message": "Fixing JNI release build for gcc (#975)",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/write_batch_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/13f7a01f61c122dc800016e16b998f32c708abd3"
    },
    {
        "hash": "26388247aa7f85bdd1f46aca914140333ec16793",
        "author": "Aaron Gao",
        "date": "2016-09-29T13:19:58-07:00",
        "message": "delete unused variable for PrevInterval()\n\nSummary: delete unused variable\n\nTest Plan: make check\n\nReviewers: sdong, andrewkr, IslamAbdelRahman, tianx\n\nReviewed By: tianx\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D64509",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/26388247aa7f85bdd1f46aca914140333ec16793"
    },
    {
        "hash": "4defe306fb7ff7242a3d6e1e20613fad95ac8692",
        "author": "wenduo",
        "date": "2016-09-27T20:39:15-07:00",
        "message": "fix typo in comments (#1360)\n\n* fix typo in option.h's comment\r\n\r\n* fix typo in checkpoint's comment",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/checkpoint/checkpoint.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4defe306fb7ff7242a3d6e1e20613fad95ac8692"
    },
    {
        "hash": "9e9f5a0b92fbf906838afb49a6c87cd72b8f6ce0",
        "author": "Islam AbdelRahman",
        "date": "2016-09-26T10:39:07-07:00",
        "message": "Fix CompactFilesTest.ObsoleteFiles timeout (#1353)",
        "modified_files_count": 1,
        "modified_files": [
            "db/compact_files_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9e9f5a0b92fbf906838afb49a6c87cd72b8f6ce0"
    },
    {
        "hash": "da5a9a65c1a50cb11286a7096795ec415dcd1ede",
        "author": "Islam AbdelRahman",
        "date": "2016-09-21T20:22:09-07:00",
        "message": "Fix mac build",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/da5a9a65c1a50cb11286a7096795ec415dcd1ede"
    },
    {
        "hash": "d45eb6c6d258a375ad13ea7334b5a3ff600884aa",
        "author": "Giuseppe Ottaviano",
        "date": "2016-09-21T20:06:56-07:00",
        "message": "Fix typo (#1349)",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d45eb6c6d258a375ad13ea7334b5a3ff600884aa"
    },
    {
        "hash": "5735b3dc2aa8ef5c7f345fa143c0baf24b72acb1",
        "author": "Islam AbdelRahman",
        "date": "2016-09-20T13:02:41-07:00",
        "message": "Fix compiling under -Werror=missing-field-initializers\n\nSummary:\nMyRocks build is broken because they are using \"-Werror=missing-field-initializers\"\nWe should fix that by explicitly passing these arguments\n\nTest Plan: Build MyRocks\n\nReviewers: sdong, yiwu\n\nReviewed By: yiwu\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D64161",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_helper.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5735b3dc2aa8ef5c7f345fa143c0baf24b72acb1"
    },
    {
        "hash": "654ed9a28090a6f6533e8703c33d40122b8ba2e1",
        "author": "Aaron Gao",
        "date": "2016-09-20T12:28:59-07:00",
        "message": "loose the assertion condition of rate_limiter_test\n\nSummary: 0.9 can make the test flaky since just found one test fail with 0.88\n\nTest Plan: make all check\n\nReviewers: sdong, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D63939",
        "modified_files_count": 1,
        "modified_files": [
            "util/rate_limiter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/654ed9a28090a6f6533e8703c33d40122b8ba2e1"
    },
    {
        "hash": "e4d3f5d9b8fc1f2049992b27f1024843eda7bb9d",
        "author": "Yi Wu",
        "date": "2016-09-20T10:17:28-07:00",
        "message": "Fix DBImpl::GetWalPreallocateBlockSize Mac build error\n\nSummary: Specify type param with std::min to resolve compile error on Mac.\n\nTest Plan: https://travis-ci.org/facebook/rocksdb/builds/161223845\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D64143",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e4d3f5d9b8fc1f2049992b27f1024843eda7bb9d"
    },
    {
        "hash": "7afbb7420b7bd7f24d34b0edda51e62267f7523a",
        "author": "panfengfeng",
        "date": "2016-09-20T10:11:51-07:00",
        "message": "solve the problem of table_factory_to_write_=nullptr (#1342)",
        "modified_files_count": 1,
        "modified_files": [
            "table/adaptive_table_factory.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7afbb7420b7bd7f24d34b0edda51e62267f7523a"
    },
    {
        "hash": "8d9bf5c498f9dd50a11276cc48a35a362429c49c",
        "author": "Yi Wu",
        "date": "2016-09-15T14:57:32-07:00",
        "message": "Fix DBOptionsTest.GetLatestOptions\n\nSummary: RandomInitCFOptions will allocate a new compaction filter, which we have to delete afterward.\n\nTest Plan: valgrind against the test\n\nReviewers: IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D64011",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8d9bf5c498f9dd50a11276cc48a35a362429c49c"
    },
    {
        "hash": "40cfa3e0215008057c295d6bcac04a3f52b85f05",
        "author": "Yi Wu",
        "date": "2016-09-15T13:44:33-07:00",
        "message": "Fix DBWALTest.RecoveryWithLogDataForSomeCFs with mac\n\nSummary: Seems there's no std::array on mac+clang. Use raw array instead.\n\nTest Plan: run ./db_wal_test on mac.\n\nReviewers: andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D64005",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_wal_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/40cfa3e0215008057c295d6bcac04a3f52b85f05"
    },
    {
        "hash": "215d12826d82d56e7cac8ab7f544f3b028eb1f8e",
        "author": "Jo Liss",
        "date": "2016-09-14T14:12:31-07:00",
        "message": "Fix typo (#903)\n\nPresumably a leftover from optimistic_transaction_example.cc.",
        "modified_files_count": 1,
        "modified_files": [
            "examples/transaction_example.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/215d12826d82d56e7cac8ab7f544f3b028eb1f8e"
    },
    {
        "hash": "a958c264351e2811409686a53503757cfca64509",
        "author": "Yi Wu",
        "date": "2016-09-14T13:12:55-07:00",
        "message": "Rename jvalue to jval in rocksjni\n\nSummary: jvalue shadows a global name in <jni.h>. Rename it to jval to fix java build.\n\nTest Plan:\n    JAVA_HOME=/usr/local/jdk-7u10-64 make rocksdbjava -j64\n\nReviewers: adamretter, yhchiang, IslamAbdelRahman\n\nReviewed By: yhchiang, IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D63981",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/rocksjni.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a958c264351e2811409686a53503757cfca64509"
    },
    {
        "hash": "9e4aa798c3d47c6be64324bd9d38f0813c8ead7b",
        "author": "somnathr",
        "date": "2016-09-12T16:53:42-07:00",
        "message": "Summary: (#1313)\n\nIf log recycling is enabled with the rocksdb (recycle_log_file_num=16)\r\n db->Writebatch is erroring out with keynotfound after ~5-6 hours of run\r\n (1M seq but can happen to any workload I guess).See my detailed bug\r\n report here (https://github.com/facebook/rocksdb/issues/1303).\r\n This commit is the fix for this, a check is been added not to delete\r\n the log file if it is already there in the recycle list.\r\n\r\nTest Plan:\r\n Unit tested it and ran the similar profile. Not reproducing anymore.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9e4aa798c3d47c6be64324bd9d38f0813c8ead7b"
    },
    {
        "hash": "0fcb6dbed7853080fbea41dfa2902307729a119a",
        "author": "ammongit",
        "date": "2016-09-08T11:31:06-07:00",
        "message": "Remove extraneous function prototypes from c.h (#1326)\n\n* Fix function prototypes from upstream commit 32149059.\r\n\r\n* Fix removed function.\r\n\r\n* Readd removed function.",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0fcb6dbed7853080fbea41dfa2902307729a119a"
    },
    {
        "hash": "67036c0406a53fa04213399bd323555cb710e51f",
        "author": "sdong",
        "date": "2016-09-07T11:19:15-07:00",
        "message": "Fix Flaky ColumnFamilyTest.FlushCloseWALFiles\n\nSummary: In ColumnFamilyTest.FlushCloseWALFiles, there is a small window in which the flush has finished but the log writer is not yet closed, causing the assert failure. Fix it by explicitly waiting the flush job to finish.\n\nTest Plan: Run the test many times in high parallelism.\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D63423",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/67036c0406a53fa04213399bd323555cb710e51f"
    },
    {
        "hash": "0e2da497c6b35823f72fe5346f87dec03e837a23",
        "author": "wenduo",
        "date": "2016-09-07T01:36:16-07:00",
        "message": "fix typo in option.h's comment (#1321)",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0e2da497c6b35823f72fe5346f87dec03e837a23"
    },
    {
        "hash": "22696b08813723ab44952f2f3e59ed9329eef7a9",
        "author": "sdong",
        "date": "2016-09-02T17:06:20-07:00",
        "message": "Fix uninitlized CompactionJob::SubcompactionState::current_output_file_size\n\nSummary: The new variable introduced in 2149059f910149197d1a0f79ac08cf19465ea2d may be unitialized. Valgrind is failing because of it.\n\nTest Plan: Run valgrind tests\n\nReviewers: yiwu, andrewkr, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D63201",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/22696b08813723ab44952f2f3e59ed9329eef7a9"
    },
    {
        "hash": "5051755e35854651725d72844b003f6c24e74b60",
        "author": "Islam AbdelRahman",
        "date": "2016-09-02T10:58:08-07:00",
        "message": "Fix db_bench memory use after free (detected by clang_analyze)\n\nSummary: Fix using `arg[i].thread` after deleting it\n\nTest Plan: run clang_analyze\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D63171",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5051755e35854651725d72844b003f6c24e74b60"
    },
    {
        "hash": "85bb3082585af37afacb0d854bf9eb9628cd8965",
        "author": "Sherlock",
        "date": "2016-09-01T13:47:21-07:00",
        "message": "Expose Utility function StringToMap() (#1306)",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/convenience.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/85bb3082585af37afacb0d854bf9eb9628cd8965"
    },
    {
        "hash": "8ce1b8440a8f3f4436a8fd806219b6c3b81d33f3",
        "author": "Islam AbdelRahman",
        "date": "2016-08-31T15:10:12-07:00",
        "message": "Fix Travis on Mac\n\nSummary: not sure why travis complain about this line, works fine on my mac\n\nTest Plan: run on my mac\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D63045",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8ce1b8440a8f3f4436a8fd806219b6c3b81d33f3"
    },
    {
        "hash": "380e651afcd9bbc76b95fc4a278bed01571782e9",
        "author": "Kien-hung Li",
        "date": "2016-08-31T15:03:10-07:00",
        "message": "Fix Mac build failure (#1309)",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/persistent_cache/persistent_cache_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/380e651afcd9bbc76b95fc4a278bed01571782e9"
    },
    {
        "hash": "6a14d55bd913490dbd61d682567e6e0625756c0d",
        "author": "Aaron Gao",
        "date": "2016-08-31T12:07:09-07:00",
        "message": "add prefix_seek_mode to db_iter_test\n\nSummary: add prefix_seek_mode to db_iter_test to enable data race test for iterator when prefix_extractor != nullptr\n\nTest Plan: make all check -j64\n\nReviewers: andrewkr, IslamAbdelRahman, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D63027",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6a14d55bd913490dbd61d682567e6e0625756c0d"
    },
    {
        "hash": "de47e2bd4d7cdad05887c6b91eb09452c9cfc707",
        "author": "Yi Wu",
        "date": "2016-08-31T08:56:34-07:00",
        "message": "Fix ClockCache memory leak\n\nSummary:\nFix ClockCache memory leak found by valgrind:\n# Add destructor to cleanup cached values.\n# Delete key with cache handle immediately after handle is recycled, and erase table entry immediately if duplicated cache entry is inserted.\n\nTest Plan:\n    make DISABLE_JEMALLOC=1 valgrind_check\n\nReviewers: IslamAbdelRahman, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D62973",
        "modified_files_count": 1,
        "modified_files": [
            "util/clock_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/de47e2bd4d7cdad05887c6b91eb09452c9cfc707"
    },
    {
        "hash": "db74b1a21905336e2c178ff1f2ffd12c7852b7b8",
        "author": "Aaron Gao",
        "date": "2016-08-30T22:19:42-07:00",
        "message": "fix bug in merge_iterator when data race happens\n\nSummary:\ncore dump when run\n`./db_stress --max_background_compactions=1 --max_write_buffer_number=3 --sync=0 --reopen=20 --write_buffer_size=33554432 --delpercent=5 --log2_keys_per_lock=10 --block_size=16384 --allow_concurrent_memtable_write=1 --test_batches_snapshots=0 --max_bytes_for_level_base=67108864 --progress_reports=0 --mmap_read=1 --kill_prefix_blacklist=WritableFileWriter::Append,WritableFileWriter::WriteBuffered --writepercent=35 --disable_data_sync=0 --readpercent=50 --subcompactions=3 --ops_per_thread=20000000 --memtablerep=skip_list --prefix_size=0 --target_file_size_multiplier=1 --column_families=1 --db=/dev/shm/rocksdb/rocksdb_crashtest_whitebox --threads=32 --disable_wal=0 --open_files=500000 --destroy_db_initially=0 --target_file_size_base=16777216 --nooverwritepercent=1 --iterpercent=10 --max_key=100000000 --prefixpercent=0 --use_clock_cache=false --kill_random_test=189 --cache_size=1048576 --verify_checksum=1`\nActually the relevant flag is `--threads`, data race when --thread > 1 cause problem.\nIt is possible that multiple\nthreads read/write memtable simultaneously. After one thread\ncalls Prev(), another thread may insert a new key just between\nthe current key and the key next, which may cause the\nassert(current_ == CurrentForward()) failure when the first\nthread calls Next() again if in prefix seek mode\n\nTest Plan: rerun db_stress with >1 thread / make all check -j64\n\nReviewers: sdong, andrewkr, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D62979",
        "modified_files_count": 1,
        "modified_files": [
            "table/merger.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/db74b1a21905336e2c178ff1f2ffd12c7852b7b8"
    },
    {
        "hash": "b18f9c9eace89d63f37432ce1a3dba48bddbcef0",
        "author": "Aaron Gao",
        "date": "2016-08-30T13:48:31-07:00",
        "message": "add nullptr check to internal_prefix_transform\n\nSummary: patch for D62361\n\nTest Plan: make all check\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D62883",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b18f9c9eace89d63f37432ce1a3dba48bddbcef0"
    },
    {
        "hash": "7541c7a79e3a3e84b75b2e5559aa885bddb67b54",
        "author": "Yi Wu",
        "date": "2016-08-29T10:40:00-07:00",
        "message": "Fix cache_test valgrind_check failure\n\nSummary: Refactor cache_test to get around gtest valgrind failure.\n\nTest Plan:\n    make valgrind_check\n\nReviewers: sdong, kradhakrishnan, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D62817",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7541c7a79e3a3e84b75b2e5559aa885bddb67b54"
    },
    {
        "hash": "4ad928e170e23f8a77ccc1a845b3a9af9cff139e",
        "author": "Aaron Gao",
        "date": "2016-08-26T11:36:14-07:00",
        "message": "add comment to SimCache to estimate actual capacity\n\nSummary: as title\n\nTest Plan: make all check\n\nReviewers: yiwu\n\nReviewed By: yiwu\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D62493",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/sim_cache.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4ad928e170e23f8a77ccc1a845b3a9af9cff139e"
    },
    {
        "hash": "cce702a6e44be094b7c63ca4ed9eb018ed10d58a",
        "author": "Islam AbdelRahman",
        "date": "2016-08-25T12:57:35-07:00",
        "message": "[db_bench] Support single benchmark arguments (Repeat for X times, Warm up for X times), Support CombinedStats (AVG / MEDIAN)\n\nSummary:\nThis diff allow us to run a single benchmark X times and warm it up for Y times. and see the AVG & MEDIAN throughput of these X runs\nfor example\n\n```\n$ ./db_bench --benchmarks=\"fillseq,readseq[X5-W2]\"\nInitializing RocksDB Options from the specified file\nInitializing RocksDB Options from command-line flags\nRocksDB:    version 4.12\nDate:       Wed Aug 24 10:45:26 2016\nCPU:        32 * Intel(R) Xeon(R) CPU E5-2660 0 @ 2.20GHz\nCPUCache:   20480 KB\nKeys:       16 bytes each\nValues:     100 bytes each (50 bytes after compression)\nEntries:    1000000\nPrefix:    0 bytes\nKeys per prefix:    0\nRawSize:    110.6 MB (estimated)\nFileSize:   62.9 MB (estimated)\nWrite rate: 0 bytes/second\nCompression: Snappy\nMemtablerep: skip_list\nPerf Level: 1\nWARNING: Assertions are enabled; benchmarks unnecessarily slow\n------------------------------------------------\nInitializing RocksDB Options from the specified file\nInitializing RocksDB Options from command-line flags\nDB path: [/tmp/rocksdbtest-8616/dbbench]\nfillseq      :       4.695 micros/op 212971 ops/sec;   23.6 MB/s\nDB path: [/tmp/rocksdbtest-8616/dbbench]\nWarming up benchmark by running 2 times\nreadseq      :       0.214 micros/op 4677005 ops/sec;  517.4 MB/s\nreadseq      :       0.212 micros/op 4706834 ops/sec;  520.7 MB/s\nRunning benchmark for 5 times\nreadseq      :       0.218 micros/op 4588187 ops/sec;  507.6 MB/s\nreadseq      :       0.208 micros/op 4816538 ops/sec;  532.8 MB/s\nreadseq      :       0.213 micros/op 4685376 ops/sec;  518.3 MB/s\nreadseq      :       0.214 micros/op 4676787 ops/sec;  517.4 MB/s\nreadseq      :       0.217 micros/op 4618532 ops/sec;  510.9 MB/s\nreadseq [AVG    5 runs] : 4677084 ops/sec;  517.4 MB/sec\nreadseq [MEDIAN 5 runs] : 4676787 ops/sec;  517.4 MB/sec\n```\n\nTest Plan: run db_bench\n\nReviewers: sdong, andrewkr, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D62235",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cce702a6e44be094b7c63ca4ed9eb018ed10d58a"
    },
    {
        "hash": "b2ce59537cb89422be2abb6bf56e5dc3984a2805",
        "author": "Justin Gibbs",
        "date": "2016-08-25T12:24:22-07:00",
        "message": "Persist data during user initiated shutdown\n\nSummary:\nMove the manual memtable flush for databases containing data that has\nbypassed the WAL from DBImpl's destructor to CancleAllBackgroundWork().\n\nCancelAllBackgroundWork() is a publicly exposed API which allows\nasync operations performed by background threads to be disabled on a\ndatabase. In effect, this places the database into a \"shutdown\" state\nin advance of calling the database object's destructor. No compactions\nor flushing of SST files can occur once a call to this API completes.\n\nWhen writes are issued to a database with WriteOptions::disableWAL\nset to true, DBImpl::has_unpersisted_data_ is set so that\nmemtables can be flushed when the database object is destroyed. If\nCancelAllBackgroundWork() has been called prior to DBImpl's destructor,\nthis flush operation is not possible and is skipped, causing unnecessary\nloss of data.\n\nSince CancelAllBackgroundWork() is already invoked by DBImpl's destructor\nin order to perform the thread join portion of its cleanup processing,\nmoving the manual memtable flush to CancelAllBackgroundWork() ensures\ndata is persisted regardless of client behavior.\n\nTest Plan:\nWrite an amount of data that will not cause a memtable flush to a rocksdb\ndatabase with all writes marked with WriteOptions::disableWAL. Properly\n\"close\" the database. Reopen database and verify that the data was\npersisted.\n\nReviewers: IslamAbdelRahman, yiwu, yoshinorim, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D62277",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b2ce59537cb89422be2abb6bf56e5dc3984a2805"
    },
    {
        "hash": "a081f798b0aad6e83d2be21ae5caa680a0b184f8",
        "author": "Andrew Kryczka",
        "date": "2016-08-25T10:42:26-07:00",
        "message": "Relax consistency for thread-local ticker stats\n\nSummary: see discussion in D62337\n\nTest Plan: unit tests\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D62577",
        "modified_files_count": 1,
        "modified_files": [
            "util/statistics.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a081f798b0aad6e83d2be21ae5caa680a0b184f8"
    },
    {
        "hash": "f85f99bf6976236c27f2560a52fc53939ab742dc",
        "author": "Adam Retter",
        "date": "2016-08-25T10:16:26-07:00",
        "message": "Fix the Windows build of RocksDB Java. Similar to https://github.com/facebook/rocksdb/issues/1220 (#1284)",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f85f99bf6976236c27f2560a52fc53939ab742dc"
    },
    {
        "hash": "7b81095171b00c3931f9892fa9d0f070c5febdb0",
        "author": "Mike Kolupaev",
        "date": "2016-08-25T04:39:26-07:00",
        "message": "Fix a crash when compaction fails to open a file\n\nSummary:\nWe've got a crash with this stack trace:\n\n  Program terminated with signal SIGTRAP, Trace/breakpoint trap.\n\n  #0  0x00007fc85f2f4009 in raise () from /usr/local/fbcode/gcc-4.9-glibc-2.20-fb/lib/libpthread.so.0\n  #1  0x00000000005c8f61 in facebook::logdevice::handle_sigsegv(int) () at logdevice/server/sigsegv.cpp:159\n  #2  0x00007fc85f2f4150 in <signal handler called> () at /usr/local/fbcode/gcc-4.9-glibc-2.20-fb/lib/libpthread.so.0\n  #3  0x00000000031ed80c in rocksdb::NewReadaheadRandomAccessFile() at util/file_reader_writer.cc:383\n  #4  0x00000000031ed80c in rocksdb::NewReadaheadRandomAccessFile() at util/file_reader_writer.cc:472\n  #5  0x00000000031558e7 in rocksdb::TableCache::GetTableReader() at db/table_cache.cc:99\n  #6  0x0000000003156329 in rocksdb::TableCache::NewIterator() at db/table_cache.cc:198\n  #7  0x0000000003166568 in rocksdb::VersionSet::MakeInputIterator() at db/version_set.cc:3345\n  #8  0x000000000324a94f in rocksdb::CompactionJob::ProcessKeyValueCompaction(rocksdb::CompactionJob::SubcompactionState*) () at db/compaction_job.cc:650\n  #9  0x000000000324c2f6 in rocksdb::CompactionJob::Run() () at db/compaction_job.cc:530\n  #10 0x00000000030f5ae5 in rocksdb::DBImpl::BackgroundCompaction() at db/db_impl.cc:3269\n  #11 0x0000000003108d36 in rocksdb::DBImpl::BackgroundCallCompaction(void*) () at db/db_impl.cc:2970\n  #12 0x00000000029a2a9a in facebook::logdevice::RocksDBEnv::callback(void*) () at logdevice/server/locallogstore/RocksDBEnv.cpp:26\n  #13 0x00000000029a2a9a in facebook::logdevice::RocksDBEnv::callback(void*) () at logdevice/server/locallogstore/RocksDBEnv.cpp:30\n  #14 0x00000000031e7521 in rocksdb::ThreadPool::BGThread() at util/threadpool.cc:230\n  #15 0x00000000031e7663 in rocksdb::BGThreadWrapper(void*) () at util/threadpool.cc:254\n  #16 0x00007fc85f2ea7f1 in start_thread () at /usr/local/fbcode/gcc-4.9-glibc-2.20-fb/lib/libpthread.so.0\n  #17 0x00007fc85e8fb46d in clone () at /usr/local/fbcode/gcc-4.9-glibc-2.20-fb/lib/libc.so.6\n\nFrom looking at the code, probably what happened is this:\n - `TableCache::GetTableReader()` called `Env::NewRandomAccessFile()`, which dispatched to a `PosixEnv::NewRandomAccessFile()`, where probably an `open()` call failed, so the `NewRandomAccessFile()` left a nullptr in the resulting file,\n - `TableCache::GetTableReader()` called `NewReadaheadRandomAccessFile()` with that `nullptr` file,\n - it tried to call file's method and crashed.\n\nThis diff is a trivial fix to this crash.\n\nTest Plan: `make -j check`\n\nReviewers: sdong, andrewkr, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D62451",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7b81095171b00c3931f9892fa9d0f070c5febdb0"
    },
    {
        "hash": "2a9c97108e44f9075a0f8bc7355ca2ad6ad89533",
        "author": "Islam AbdelRahman",
        "date": "2016-08-24T15:32:01-07:00",
        "message": "[Flaky Test] Disable DBPropertiesTest.GetProperty\n\nSummary: Disable flaky test\n\nTest Plan: run it\n\nReviewers: yiwu, andrewkr, kradhakrishnan, yhchiang, lightmark, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D62487",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_properties_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2a9c97108e44f9075a0f8bc7355ca2ad6ad89533"
    },
    {
        "hash": "f57bc1d0347151b3e84c962515a201b3c308aed9",
        "author": "Andrew Kryczka",
        "date": "2016-08-23T13:34:56-07:00",
        "message": "Fix lambda expression for clang/windows\n\nSummary:\nmake the variables static so capturing is unnecessary since I couldn't\nfind a portable way to capture variables in a lambda that's converted to a\nC-style pointer-to-function.\n\nTest Plan: https://ci.appveyor.com/project/Facebook/rocksdb/build/1.0.1658\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D62403",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f57bc1d0347151b3e84c962515a201b3c308aed9"
    },
    {
        "hash": "5440675c3d4cee703ccd7e7ef59257c9da5c9ffc",
        "author": "Andrew Kryczka",
        "date": "2016-08-23T10:20:00-07:00",
        "message": "Fix lambda capture expression for windows\n\nSummary:\nthere was an error when accessing kItersPerThread in the lambda:\nhttps://ci.appveyor.com/project/Facebook/rocksdb/build/1.0.1654\n\nTest Plan: doitlive\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D62379",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5440675c3d4cee703ccd7e7ef59257c9da5c9ffc"
    },
    {
        "hash": "ecf9003860ac1d2a0e1bec5846c40fe24ce61e7e",
        "author": "Andrew Kryczka",
        "date": "2016-08-22T10:27:50-07:00",
        "message": "Fix bug in printing values for block-based table\n\nSummary: value is not an InternalKey, we do not need to decode it\n\nTest Plan:\nsetup:\n\n  $ ldb put --create_if_missing=true k v\n  $ ldb put --db=./tmp --create_if_missing k v\n  $ ldb compact --db=./tmp\n\nbefore:\n\n  $ sst_dump --command=raw --file=./tmp/000004.sst\n  ...\n  terminate called after throwing an instance of 'std::length_error'\n\nafter:\n\n  $ ./sst_dump --command=raw --file=./tmp/000004.sst\n  $ cat tmp/000004_dump.txt\n  ...\n  ASCII  k : v\n  ...\n\nReviewers: sdong, yhchiang, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D62301",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ecf9003860ac1d2a0e1bec5846c40fe24ce61e7e"
    },
    {
        "hash": "236756f2cf10984db3320ccedf444a74969b81ea",
        "author": "Andrew Kryczka",
        "date": "2016-08-16T06:19:46-07:00",
        "message": "Make SyncPoint return immediately when disabled\n\nSummary:\nWe were frequently seeing a race between SyncPoint::Process() and\nSyncPoint::~SyncPoint() (e.g.,\nhttps://our.intern.facebook.com/intern/sandcastle/log/?instance_id=207289975&step_id=2412725431).\nThe issue was marked_thread_id_ gets deleted when the main thread is exiting and\nsimultaneously background threads may access it. We can prevent this race\ncondition by checking whether sync points are disabled (assuming the test terminates\nwith them disabled) before attempting to access that member. I do not understand\nwhy accesses to other members (mutex_ and enabled_) are ok but anyways the\ntest no longer fails tsan.\n\nTest Plan: ran tests\n\nReviewers: sdong, yhchiang, IslamAbdelRahman, yiwu, wanning\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D62133",
        "modified_files_count": 1,
        "modified_files": [
            "util/sync_point.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/236756f2cf10984db3320ccedf444a74969b81ea"
    },
    {
        "hash": "64a0082c69fc22efd3fa1e6979a7addfbbcc2585",
        "author": "Islam AbdelRahman",
        "date": "2016-08-15T14:04:40-07:00",
        "message": "Fix DBSSTest::AddExternalSstFileSkipSnapshot valgrind fail\n\nSummary: Fix the test by releasing the last snapshot\n\nTest Plan: run the test under valgrind\n\nReviewers: andrewkr, yiwu, lightmark, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D62091",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/64a0082c69fc22efd3fa1e6979a7addfbbcc2585"
    },
    {
        "hash": "4fe12baa6630042b198404eb6de6adec54f7fb7f",
        "author": "Mark Callaghan",
        "date": "2016-08-15T11:07:05-07:00",
        "message": "Make db_bench less space for --stats_per_interval\n\nSummary:\nChanges compaction IO stats to be printed once per interval rather\nthan once per interval per thread. https://github.com/facebook/rocksdb/issues/1276\n\nTask ID: #12698508\n\nTest Plan: run db_bench\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D62067",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4fe12baa6630042b198404eb6de6adec54f7fb7f"
    },
    {
        "hash": "6525ce4cafcaaccfa32e9a8c30af5789cdc11278",
        "author": "sdong",
        "date": "2016-08-15T10:47:29-07:00",
        "message": "Compaction stats printing: \"batch\" => \"commit group\"\n\nSummary: \"Batch\" is ambiguous in this context. It can mean \"write batch\" or commit group. Change it to commit group to be clear.\n\nTest Plan: Build\n\nReviewers: MarkCallaghan, yhchiang, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D62055",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6525ce4cafcaaccfa32e9a8c30af5789cdc11278"
    },
    {
        "hash": "a117891b4b7bb48377991616b2d1a67b8be93a70",
        "author": "Edouard A",
        "date": "2016-08-15T09:21:01-07:00",
        "message": "Fixed typo (#1279)\n\nUsers shouldn't reply on -> users shouldn't rely on",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a117891b4b7bb48377991616b2d1a67b8be93a70"
    },
    {
        "hash": "b248e98cf990cb72663c350c8f00704a21bc60db",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-08-15T09:04:55-07:00",
        "message": "Fix a destruction order issue in ThreadStatusUpdater\n\nSummary:\nEnv holds a pointer of ThreadStatusUpdater, which will be deleted when\nEnv is deleted.  However, in case a rocksdb database is deleted after\nEnv is deleted.  Then this will introduce a free-after-use of this\nThreadStatusUpdater.\n\nThis patch fix this by never deleting the ThreadStatusUpdater in Env,\nwhich is in general safe as Env is a singleton in most cases.\n\nTest Plan: thread_list_test\n\nReviewers: andrewkr, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D59187",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b248e98cf990cb72663c350c8f00704a21bc60db"
    },
    {
        "hash": "deda159b55d3e603bc3406b211b2236ebd98e6a1",
        "author": "Philipp Unterbrunner",
        "date": "2016-08-12T16:34:11-07:00",
        "message": "Added min/max/avg data block size output to sst_dump\n\nSummary: Added min/max/avg data block size output to sst_dump. Output was added to the end of BlockBasedTable::DumpDataBlocks, so it appears after the data block details, at the very end of the dump file.\n\nTest Plan:\n```\n./db_bench --benchmarks=fillrandom\n./sst_dump --file=/tmp/rocksdbtest-xyz/dbbench/000007.sst --command=raw\ntail -n 6 /tmp/rocksdbtest-xyz/dbbench/000007_dump.txt\n```\n```\nData Block Summary:\n--------------------------------------\n  # data blocks: 11336\n  min data block size: 903\n  max data block size: 2268\n  avg data block size: 2245.363356\n```\n\nReviewers: IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D61815",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/deda159b55d3e603bc3406b211b2236ebd98e6a1"
    },
    {
        "hash": "a297643f2e327a8bc7061bfc838fdf11935a2cf2",
        "author": "Islam AbdelRahman",
        "date": "2016-08-11T23:34:19-07:00",
        "message": "Fix valgrind memory leak",
        "modified_files_count": 1,
        "modified_files": [
            "db/forward_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a297643f2e327a8bc7061bfc838fdf11935a2cf2"
    },
    {
        "hash": "d1be59463696d64dcc20fee5129ca7bc23d54904",
        "author": "Dhruba Borthakur",
        "date": "2016-08-11T15:10:09-07:00",
        "message": "Improve documentation of SliceTransform.\n\nTest Plan: make check\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D61875",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/slice_transform.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d1be59463696d64dcc20fee5129ca7bc23d54904"
    },
    {
        "hash": "4beffe001db952a7a842b7068fd4939e696e91b9",
        "author": "sdong",
        "date": "2016-08-10T13:56:50-07:00",
        "message": "Fix test data race in two FaultInjectionTest tests\n\nSummary: Background sleeping tasks may conflict with test cleaning up. Wait for the sleeping tasks to finish before ending the test.\n\nTest Plan: Run these tests.\n\nReviewers: andrewkr, yiwu\n\nReviewed By: yiwu\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D61827",
        "modified_files_count": 1,
        "modified_files": [
            "db/fault_injection_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4beffe001db952a7a842b7068fd4939e696e91b9"
    },
    {
        "hash": "821bcb0b39421af583928bb4c6d8cdb912c0bef9",
        "author": "Willem Jan Withagen",
        "date": "2016-08-10T13:52:23-07:00",
        "message": "util/arena.cc: FreeBSD: More portable use of mmap(MAP_ANON) (#1254)\n\nFrom the Linux manual:\r\n  MAP_ANONYMOUS\r\n     The  mapping  is  not  backed  by any file; its contents\r\n     are initialized to zero.  The fd and offset arguments are\r\n     ignored; however, some implementations require fd to be -1\r\n     if MAP_ANONYMOUS (or MAP_ANON) is specified, and portable\r\n     applications  should  ensure  this.\r\n\r\nFreeBSD is such a case, it wil just return an error.",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/821bcb0b39421af583928bb4c6d8cdb912c0bef9"
    },
    {
        "hash": "5370f44a8348e7ff7cba3d1b208492a33b7ecbdd",
        "author": "sdong",
        "date": "2016-08-10T13:25:31-07:00",
        "message": "Increase RocksDB version\n\nSummary: RocksDB 4.11 has been branched out. Now need to move to 4.12.\n\nTest Plan: N/A\n\nReviewers: kradhakrishnan, andrewkr, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D61845",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5370f44a8348e7ff7cba3d1b208492a33b7ecbdd"
    },
    {
        "hash": "7882cb9773a89f7fc707c69a2ac55e98bb9f39bd",
        "author": "Yi Wu",
        "date": "2016-08-05T16:45:57-07:00",
        "message": "Make DBOptionsTest::EnableAutoCompactionAndTriggerStall less falky\n\nSummary: Explicitly flush two times to generate two sst files.\n\nTest Plan: run the test.\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D61671",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7882cb9773a89f7fc707c69a2ac55e98bb9f39bd"
    },
    {
        "hash": "f35b16f246046536863d89ac10a14a4433dcae47",
        "author": "sdong",
        "date": "2016-08-04T11:06:00-07:00",
        "message": "db_bench add an option of --base_background_compactions\n\nSummary: As title.\n\nTest Plan: Run the benchmark with and without the parameter.\n\nReviewers: yiwu, andrewkr, lightmark, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D61491",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f35b16f246046536863d89ac10a14a4433dcae47"
    },
    {
        "hash": "c3a4bea5dcf851b0236c682bf2fa4eba85a7c125",
        "author": "omegaga",
        "date": "2016-08-03T15:19:35-07:00",
        "message": "Fix flaky test `ObsoleteFiles`\n\nSummary: The test `ObsoleteFiles` failed occasionally on slow device. This problem appears on Travis CI several times. The reason is that we did not wait until compaction jobs are finished in the test, while in slower device the background jobs take longer time to finish.\n\nTest Plan: Pass existing tests.\n\nReviewers: yiwu, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D61479",
        "modified_files_count": 1,
        "modified_files": [
            "db/compact_files_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c3a4bea5dcf851b0236c682bf2fa4eba85a7c125"
    },
    {
        "hash": "712dd27e673b4b39c512f48d634a27dfbf37bb4e",
        "author": "krad",
        "date": "2016-08-02T10:30:29-07:00",
        "message": "Build break fixes\n\nSummary: Regex support for c++ is very inconsistent across compilers, converting\nthe logic to simple string manipulation.\n\nTest Plan: Local test\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D61377",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/persistent_cache/block_cache_tier.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/712dd27e673b4b39c512f48d634a27dfbf37bb4e"
    },
    {
        "hash": "64046e581cf8f98efdc1c6148710b5c70ede560e",
        "author": "omegaga",
        "date": "2016-08-01T12:28:51-07:00",
        "message": "Write a benchmark to emulate time series data\n\nSummary: Add a benchmark to `db_bench`. In this benchmark, a write thread will populate time series data in the format of 'id | timestamp', and multiple read threads will randomly retrieve all data from one id at a time.\n\nTest Plan: Run the benchmark: `num=134217728;bpl=536870912;mb=67108864;overlap=10;mcz=2;del=300000000;levels=6;ctrig=4;delay=8;stop=12;wbn=3;mbc=20;wbs=134217728;dds=0;sync=0;t=32;vs=800;bs=4096;cs=17179869184;of=500000;wps=0;si=10000000; kir=100000; dir=/data/users/jhli/test/; ./db_bench --benchmarks=timeseries --disable_seek_compaction=1 --mmap_read=0 --statistics=1 --histogram=1 --num=$num --threads=$t --value_size=$vs --block_size=$bs --cache_size=$cs --bloom_bits=10 --cache_numshardbits=6 --open_files=$of --verify_checksum=1 --db=$dir --sync=$sync --disable_wal=0 --compression_type=none --stats_interval=$si --compression_ratio=1 --disable_data_sync=$dds --write_buffer_size=$wbs --target_file_size_base=$mb --max_write_buffer_number=$wbn --max_background_compactions=$mbc --level0_file_num_compaction_trigger=$ctrig --level0_slowdown_writes_trigger=$delay --level0_stop_writes_trigger=$stop --num_levels=$levels --delete_obsolete_files_period_micros=$del --min_level_to_compress=$mcz --max_grandparent_overlap_factor=$overlap --stats_per_interval=1 --max_bytes_for_level_base=$bpl --use_existing_db=0 --key_id_range=$kir`\n\nReviewers: andrewkr, sdong\n\nReviewed By: sdong\n\nSubscribers: lgalanis, andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D60651",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/64046e581cf8f98efdc1c6148710b5c70ede560e"
    },
    {
        "hash": "7c01d6534433b220dfcc0213a5134e4f14fe4624",
        "author": "Islam AbdelRahman",
        "date": "2016-07-29T12:47:15-07:00",
        "message": "[Fix Java] Remove duplicate cases in LoggerJniCallback::Logv\n\nSummary: Remove duplicate cases in LoggerJniCallback::Logv and fix complication error\n\nTest Plan: make jclean rocksdbjava jtest -j4\n\nReviewers: adamretter, andrewkr, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D61335",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/loggerjnicallback.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7c01d6534433b220dfcc0213a5134e4f14fe4624"
    },
    {
        "hash": "5e2c796589ea805196672a6e24be7cc445e30bc9",
        "author": "Islam AbdelRahman",
        "date": "2016-07-29T11:42:28-07:00",
        "message": "Make DBTest.CompressionStatsTest more deterministic\n\nSummary:\nDBTest.CompressionStatsTest on non_shm test where the storage device is slow\n\nDBTest.CompressionStatsTest assumes that a flush happens to check the number of compressed blocks.\nThis is not always true if the Flush is slow, make the test more deterministic by forcing a flush before doing the check\n\nTest Plan: Run the test locally\n\nReviewers: andrewkr, yiwu, lightmark, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D61317",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5e2c796589ea805196672a6e24be7cc445e30bc9"
    },
    {
        "hash": "557748ff7b020f0cdef913c6cc84ad7c2aa45f60",
        "author": "Islam AbdelRahman",
        "date": "2016-07-29T11:02:03-07:00",
        "message": "Fix db_stress failure (pass merge_operator even if not used)\n\nSummary:\ndb_stress test is now failing because of this scenario\n- run db_stress with merge_operator enabled (now we have a db with merge operands)\n- run db_stress with merge_operator disabled (now when we fail to open the db)\n\nthe solution is to pass the merge_operator to the DB even if we are not going to do any merge operations\n\nTest Plan: Check the failure\n\nReviewers: andrewkr, yiwu, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D61311",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/557748ff7b020f0cdef913c6cc84ad7c2aa45f60"
    },
    {
        "hash": "e72ea485ed525cc5601db290e65e7c52b5756407",
        "author": "Aaron Gao",
        "date": "2016-07-27T18:45:53-07:00",
        "message": "add InDomain regression test\n\nSummary: regression tests to make sure seek keys not in domain would not fail assertion\n\nTest Plan:\n```\n[gzh@dev6163.prn2 ~/local/rocksdb] ./prefix_test --gtest_filter=SamePrefixTest.*\n/tmp/rocksdbtest-112628/prefix_test\nNote: Google Test filter = SamePrefixTest.*\n[==========] Running 1 test from 1 test case.\n[----------] Global test environment set-up.\n[----------] 1 test from SamePrefixTest\n[ RUN      ] SamePrefixTest.InDomainTest\n[       OK ] SamePrefixTest.InDomainTest (211 ms)\n[----------] 1 test from SamePrefixTest (211 ms total)\n\n[----------] Global test environment tear-down\n[==========] 1 test from 1 test case ran. (211 ms total)\n```\n\nReviewers: andrewkr, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D61161",
        "modified_files_count": 1,
        "modified_files": [
            "db/prefix_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e72ea485ed525cc5601db290e65e7c52b5756407"
    },
    {
        "hash": "d4c45428af62f7e8b6678a7314ffedfc70f60ed5",
        "author": "sdong",
        "date": "2016-07-27T12:08:16-07:00",
        "message": "db_stress shouldn't assert file size 0 if file creation fails\n\nSummary: OnTableFileCreated() now is also called when the file creaion fails. In that case, we shouldn't assert the file size is not 0.\n\nTest Plan: Run crash test\n\nReviewers: yiwu, andrewkr, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: IslamAbdelRahman, leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D61137",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d4c45428af62f7e8b6678a7314ffedfc70f60ed5"
    },
    {
        "hash": "e12270dfee290d526608772d1a43c920511290f1",
        "author": "Wanning Jiang",
        "date": "2016-07-26T11:15:14-07:00",
        "message": "fix previous typo\n\nSummary: old typos with FILTER/INDEX_CACHE\n\nTest Plan: still pass this unit test\n\nReviewers: andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D61185",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_block_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e12270dfee290d526608772d1a43c920511290f1"
    },
    {
        "hash": "16e225f70d12ee90d48e058425b951b44b956186",
        "author": "Islam AbdelRahman",
        "date": "2016-07-25T15:31:41-07:00",
        "message": "Fix MergeContext::copied_operands_ strings moving\n\nSummary:\nMergeContext::copied_operands contain strings that MergeContext::operand_list_ Slices point to\nIt's possible that when MergeContext::copied_operands grow, these strings are moved and there place in memory is changed, this will cause MergeContext::operand_list_ to point to invalid memory.\nfix this problem by using unique_ptr<string> instead of string\n\nTest Plan: run tests under mac/clang\n\nReviewers: sdong, yiwu\n\nReviewed By: yiwu\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D61023",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_context.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/16e225f70d12ee90d48e058425b951b44b956186"
    },
    {
        "hash": "ae0ad719de4869df4051d70b82088f376f9d39c5",
        "author": "Yi Wu",
        "date": "2016-07-25T15:09:34-07:00",
        "message": "Fix flaky DBSSTTEST::DeleteObsoleteFilesPendingOutputs\n\nSummary: The test is flaky on Travis in osx environment. The background flush the test wanting to block can run behind the L2 manual compaction, making the test actually blocking the L2 compaction and won't able to proceed.\n\nTest Plan: Test run on travis\n\nReviewers: kradhakrishnan, sdong, andrewkr, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D61101",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ae0ad719de4869df4051d70b82088f376f9d39c5"
    },
    {
        "hash": "b2a8016df1a7c3c16c0d217310b07a344919d144",
        "author": "zhang-tong",
        "date": "2016-07-25T14:50:44-07:00",
        "message": "Update db_bench_tool.cc (#1239)\n\n* Update db_bench_tool.cc\r\n\r\n* Update db_bench_tool.cc",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b2a8016df1a7c3c16c0d217310b07a344919d144"
    },
    {
        "hash": "c6654588bda62fcd66be2edfe83cba37464a8267",
        "author": "Yi Wu",
        "date": "2016-07-25T11:48:17-07:00",
        "message": "Disable two dynamic options tests under lite build\n\nSummary: RocksDB lite don't support dynamic options. Disable the two test from lite build, and assert `SetOptions` should return `status::OK`.\n\nTest Plan: Run the db_options test under lite build and normal build.\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D61119",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c6654588bda62fcd66be2edfe83cba37464a8267"
    },
    {
        "hash": "b06ca5f8602a0aa4fc87fac84362fb7de918cc39",
        "author": "Peter (Stig) Edwards",
        "date": "2016-07-22T11:46:40-07:00",
        "message": "ldb load, prefer ifsteam(/dev/stdin) to std::cin (#1207)\n\ngetline on std::cin can be very inefficient when ldb is loading large values, with high CPU usage in libc _IO_(un)getc, this is because of the performance penalty that comes from synchronizing stdio and iostream buffers.\r\nSee the reproducers and tests in #1133 .\r\nIf an ifstream on /dev/stdin is used (when available) then using ldb to load large values can be much more efficient.\r\nI thought for ldb load, that this approach is preferable to using <cstdio> or std::ios_base::sync_with_stdio(false).\r\nI couldn't think of a use case where ldb load would need to support reading unbuffered input, an alternative approach would be to add support for passing --input_file=/dev/stdin.\r\nI have a CLA in place, thanks.\r\n\r\nThe CI tests were failing at the time of https://github.com/facebook/rocksdb/pull/1156, so this change and PR will supersede it.",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b06ca5f8602a0aa4fc87fac84362fb7de918cc39"
    },
    {
        "hash": "89f319c2dfc7c1c40b45d0ba916cdd75b19f307e",
        "author": "Yi Wu",
        "date": "2016-07-21T14:32:12-07:00",
        "message": "Fix unit test which breaks lite build\n\nSummary: Comment out assertion of number of table files from lite build.\n\nTest Plan:\n    OPT=-DROCKSDB_LITE make check\n\nReviewers: lightmark\n\nReviewed By: lightmark\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D60999",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_flush_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/89f319c2dfc7c1c40b45d0ba916cdd75b19f307e"
    },
    {
        "hash": "b9a97181aa1d57b21f3f0789047a2a29c44a0714",
        "author": "krad",
        "date": "2016-07-21T12:22:14-07:00",
        "message": "Bump next release version\n\nSummary: Bump master version to the next potential release version of 4.11\n\nTest Plan: Compile\n\nReviewers: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D60993",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b9a97181aa1d57b21f3f0789047a2a29c44a0714"
    },
    {
        "hash": "e70ba4e40e3ff515902c507a54fe818ac4e915ec",
        "author": "sdong",
        "date": "2016-07-19T18:10:18-07:00",
        "message": "MemTable::PostProcess() can skip updating num_deletes if the delta is 0\n\nSummary: In many use cases there is no deletes. No need to pay the overhead of atomically updating num_deletes.\n\nTest Plan: Run existing test.\n\nReviewers: ngbronson, yiwu, andrewkr, igor\n\nReviewed By: andrewkr\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D60555",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e70ba4e40e3ff515902c507a54fe818ac4e915ec"
    },
    {
        "hash": "2a282e5f545d4a456e26e8e631a957b280fe5b0a",
        "author": "sdong",
        "date": "2016-07-19T15:46:20-07:00",
        "message": "DBTablePropertiesTest.GetPropertiesOfTablesInRange: Fix Flaky\n\nSummary:\nSummary\nThere is a possibility that there is no L0 file after writing the data. Generate an L0 file to make it work.\n\nTest Plan: Run the test many times.\n\nReviewers: andrewkr, yiwu\n\nReviewed By: yiwu\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D60825",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_table_properties_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2a282e5f545d4a456e26e8e631a957b280fe5b0a"
    },
    {
        "hash": "21c55bdb6e97d3d86efab3770264be0d188c0a07",
        "author": "sdong",
        "date": "2016-07-15T16:10:09-07:00",
        "message": "DBTest.DynamicLevelCompressionPerLevel: Tune Threshold\n\nSummary: Each SST's file size increases after we add more table properties. Threshold in DBTest.DynamicLevelCompressionPerLevel need to adjust accordingly to avoid occasional failures.\n\nTest Plan: Run the test\n\nReviewers: andrewkr, yiwu\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D60819",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/21c55bdb6e97d3d86efab3770264be0d188c0a07"
    },
    {
        "hash": "56222f57df3a6c06dc1582f2d901987ed6132631",
        "author": "Andrew Kryczka",
        "date": "2016-07-13T15:36:22-07:00",
        "message": "Avoid FileMetaData copy\n\nSummary: as titled\n\nTest Plan: unit tests\n\nReviewers: sdong, lightmark\n\nReviewed By: lightmark\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D60597",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_edit.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/56222f57df3a6c06dc1582f2d901987ed6132631"
    },
    {
        "hash": "15b7a4ab887fa77b44886df2901659a92064fc0c",
        "author": "Jay Edgar",
        "date": "2016-07-13T09:10:06-07:00",
        "message": "Fixed output size and removed unneeded loop\n\nSummary: In Zlib_Compress and BZip2_Compress the calculation for size was slightly off when using compression_foramt_version 2 (which includes the decompressed size in the output).  Also there were unnecessary loops around the deflate/BZ2_bzCompress calls.  In Zlib_Compress there was also a possible exit from the function after calling deflateInit2 that didn't call deflateEnd.\n\nTest Plan: Standard tests\n\nReviewers: sdong, IslamAbdelRahman, igor\n\nReviewed By: igor\n\nSubscribers: sdong, IslamAbdelRahman, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D60537",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/15b7a4ab887fa77b44886df2901659a92064fc0c"
    },
    {
        "hash": "816ae098ea048ba80bc90b41f38b5b0d144bae4d",
        "author": "Aaron Gao",
        "date": "2016-07-11T13:33:52-07:00",
        "message": "fix test failure\n\nSummary: fix Rocksdb Unit Test USER_FAILURE\n\nTest Plan: make all check -j64\n\nReviewers: sdong, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D60603",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/816ae098ea048ba80bc90b41f38b5b0d144bae4d"
    },
    {
        "hash": "e295da1266ecf9bef56f45d2dae795eb2a427235",
        "author": "Andrew Kryczka",
        "date": "2016-07-11T11:16:53-07:00",
        "message": "Fix Log() doc for default level\n\nSummary: as titled\n\nTest Plan: none\n\nReviewers: sdong, lightmark\n\nReviewed By: lightmark\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D60507",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e295da1266ecf9bef56f45d2dae795eb2a427235"
    },
    {
        "hash": "0f691c4b5ba83b7c7e923f620d2a8a65a785bc3a",
        "author": "Wanning Jiang",
        "date": "2016-07-07T17:51:36-07:00",
        "message": "CLI option & Rename() allow overwrite\n\nSummary: this test support CLI option to select HdfsEnv/NativeHdfsEnv now. The latter one is default. add test about when Rename(src, target) should overwrite target\n\nTest Plan: existing test\n\nReviewers: sdong, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D60399",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0f691c4b5ba83b7c7e923f620d2a8a65a785bc3a"
    },
    {
        "hash": "7c190070b41c59752c7a81e017b470f82db18a64",
        "author": "Aaron Gao",
        "date": "2016-07-07T16:34:41-07:00",
        "message": "delete unnessary pointer cast in beginInternalTransaction() function\n\nSummary: use of dynamic_cast<TransactionImpl*> is unnecessary and also introduce difficulty for fbrocksdb support of TransactionDB\n\nTest Plan: ./transaction_test\n\nReviewers: sdong, IslamAbdelRahman, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D60501",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7c190070b41c59752c7a81e017b470f82db18a64"
    },
    {
        "hash": "b954847fcad59af80b72c50a793d9840c2dbfc52",
        "author": "Gunnar Kudrjavets",
        "date": "2016-07-06T16:07:53-07:00",
        "message": "Fix release build for MyRocks by using debug-only code only in debug builds\n\nSummary: MyRocks release integration build breaks because we treat warnings caused by unused variables as errors. Variable `edit` is only used in debug builds. Therefore we need to guard it using `#ifndef NDEBUG` check.\n\nTest Plan:\n- `[p]arc diff --preview` for the default validation.\n- Verify that release build fails before this fix and passes after applying it.\n\nReviewers: andrewkr, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D60423",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b954847fcad59af80b72c50a793d9840c2dbfc52"
    },
    {
        "hash": "eb53c05a359edf95716a8c65a828f2215bbc940f",
        "author": "Zun Wang",
        "date": "2016-07-06T12:54:01-07:00",
        "message": "Add comment for GetBackupInfo about returned BackupInfos order\n\nSummary: #title\n\nTest Plan: n/a\n\nReviewers: uddipta, ldemailly, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D60393",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eb53c05a359edf95716a8c65a828f2215bbc940f"
    },
    {
        "hash": "1a11c934d23f0cbac2f2327084883cc140f2c229",
        "author": "Andrew Kryczka",
        "date": "2016-07-04T15:42:33-07:00",
        "message": "Disable some persistent cache tests on linux/clang",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/persistent_cache/persistent_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1a11c934d23f0cbac2f2327084883cc140f2c229"
    },
    {
        "hash": "ff45d1b547bc64fc5eab17bebde2549fd3210d2a",
        "author": "Wanning Jiang",
        "date": "2016-07-01T11:36:33-07:00",
        "message": "if read only backup engine can't find meta dirs, return NotFound() instead of IOError()\n\nSummary: Read only backup engine return NotFound() on missing meta dir (for e2e test)\n\nTest Plan: backupable_db_test\n\nReviewers: andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D60273",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ff45d1b547bc64fc5eab17bebde2549fd3210d2a"
    },
    {
        "hash": "6b7167651f4730037d104bb571e3de7e5a602392",
        "author": "Andrew Kryczka",
        "date": "2016-06-30T18:34:29-07:00",
        "message": "Run env_basic_test on Env::Default\n\nSummary:\nPreviously we couldn't run env_basic_test on Env::Default (PosixEnv on\nour platforms) since GetChildren*() behavior was inconsistent with our other\nEnvs. We can normalize the output of GetChildren*() such that these test cases\nwork on PosixEnv too.\n\nTest Plan: ran env_basic_test\n\nReviewers: wanning\n\nReviewed By: wanning\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D59943",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6b7167651f4730037d104bb571e3de7e5a602392"
    },
    {
        "hash": "9eb0b539540034b254ed07ef8453e6bd7d59153e",
        "author": "Andrew Kryczka",
        "date": "2016-06-30T18:33:49-07:00",
        "message": "Move env_basic_test cleanup to TearDown\n\nSummary:\nmove cleanup to TearDown and handle directories, so cleanup will happen\neven if a test fails in the middle.\n\nTest Plan: ./env_basic_test\n\nReviewers: wanning\n\nReviewed By: wanning\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D60243",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9eb0b539540034b254ed07ef8453e6bd7d59153e"
    },
    {
        "hash": "bdb1d19a6918b69b22623ca49d44ad9a1b2e8c84",
        "author": "Gunnar Kudrjavets",
        "date": "2016-06-29T10:49:25-07:00",
        "message": "Fix UBSan build break caused by variable not initialized\n\nSummary: UBSan is unhappy because `cfd` is not initialized. This breaks UBSan build which in turn breaks MyRocks continuous integration with RocksDB which in turns makes me unhappy :-) Fix this.\n\nTest Plan:\n- `[p]arc diff --preview` + Sandcastle.\n- Verify that `COMPILE_WITH_UBSAN=1 OPT=-g make J=1 ubsan_check` gets past the break.\n\nReviewers: andrewkr, hermanlee4, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D60117",
        "modified_files_count": 1,
        "modified_files": [
            "db/repair.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bdb1d19a6918b69b22623ca49d44ad9a1b2e8c84"
    },
    {
        "hash": "b726bf59619d43651838e03cce9f876b3560cbda",
        "author": "Willem Jan Withagen",
        "date": "2016-06-29T07:35:17-07:00",
        "message": "FreeBSD does not have std::to_string (#1190)\n\nSubmitted-by: Willem Jan Withagen <wjw@digiware.nl>",
        "modified_files_count": 1,
        "modified_files": [
            "util/string_util.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b726bf59619d43651838e03cce9f876b3560cbda"
    },
    {
        "hash": "3fc713ed925f46532dc8a0274af1f197e0403d3e",
        "author": "Wanning Jiang",
        "date": "2016-06-24T12:31:58-07:00",
        "message": "delete 2nd level children for default env\n\nSummary: ensure no 2nd level children under test_dir_\n\nTest Plan: env_basic_test on 4 envs\n\nReviewers: andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D59979",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3fc713ed925f46532dc8a0274af1f197e0403d3e"
    },
    {
        "hash": "af6248d8b8bf9454a5b00f87d0c4acb026b897cc",
        "author": "Islam AbdelRahman",
        "date": "2016-06-22T18:28:38-07:00",
        "message": "Fix max_bytes_for_level_base comment\n\nSummary: Fix max_bytes_for_level_base comment\n\nTest Plan: none\n\nReviewers: yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D59955",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/af6248d8b8bf9454a5b00f87d0c4acb026b897cc"
    },
    {
        "hash": "0d7b2612362c4eed7dbbafc723558ba0495f44e4",
        "author": "Wanning Jiang",
        "date": "2016-06-22T16:16:21-07:00",
        "message": "add tests to env_basic_test.cc\n\nSummary: test NativeHdfsEnv\n\nTest Plan: env_basic_test.cc\n\nReviewers: andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D59889",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_basic_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0d7b2612362c4eed7dbbafc723558ba0495f44e4"
    },
    {
        "hash": "88a2776db52015c7c32767bdd38b6d072fd1dbd6",
        "author": "Islam AbdelRahman",
        "date": "2016-06-20T11:26:25-07:00",
        "message": "Update SstFileWriter to use bottommost_compression if avaliable\n\nSummary: SstFileWriter ignore Options::bottommost_compression, update it to use bottommost_compression if available\n\nTest Plan:\nmake check -j64\nverified used compression using ./sst_dump\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, yoshinorim\n\nDifferential Revision: https://reviews.facebook.net/D59841",
        "modified_files_count": 1,
        "modified_files": [
            "table/sst_file_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/88a2776db52015c7c32767bdd38b6d072fd1dbd6"
    },
    {
        "hash": "4939fc3892fef3ce6cf3fc84f58b01b3082b869a",
        "author": "sdong",
        "date": "2016-06-17T09:58:50-07:00",
        "message": "Bulk load mode shouldn't stop ingest\n\nSummary: We introduced default slow down and stop condition, but didn't reset it in bulk load mode. Fix it.\n\nTest Plan: N/A\n\nReviewers: igor, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D59757",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4939fc3892fef3ce6cf3fc84f58b01b3082b869a"
    },
    {
        "hash": "3a2bccc8451a8b49df9c869144d27bb4a4ce713a",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-06-17T04:53:30-07:00",
        "message": "Fixed a crash bug that incorrectly parse deprecated options in options_helper\n\nSummary: Fixed a crash bug that incorrectly parse deprecated options in options_helper\n\nTest Plan:\nrun db_bench with an old options file with memtable_prefix_bloom_probes\n./db_bench --options_file=AN_OLD_OPTIONS_FILE --num=100 --benchmarks=fillseq\n\nReviewers: sdong, IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D59787",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3a2bccc8451a8b49df9c869144d27bb4a4ce713a"
    },
    {
        "hash": "249e796dfcce77d753704fa6b6ab0b2a69f44fb7",
        "author": "sdong",
        "date": "2016-06-15T12:00:51-07:00",
        "message": "Fix Flaky DBCompactionTest.SkipStatsUpdateTest\n\nSummary: DBCompactionTest.SkipStatsUpdateTest sometimes fails. I don't see any verification related to the deletes issued. Remove them to avoid the uncertainty.\n\nTest Plan: Run the test.\n\nReviewers: IslamAbdelRahman, andrewkr, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D59613",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/249e796dfcce77d753704fa6b6ab0b2a69f44fb7"
    },
    {
        "hash": "8366e10ffcb9a4269e90565d17f8440f40e30166",
        "author": "Islam AbdelRahman",
        "date": "2016-06-15T00:24:33-07:00",
        "message": "Fix clang build\n\nSummary: Fix clang build\n\nTest Plan: USE_CLANG=1 make check -j64\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D59667",
        "modified_files_count": 1,
        "modified_files": [
            "table/block.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8366e10ffcb9a4269e90565d17f8440f40e30166"
    },
    {
        "hash": "f5177c761ffb256ecba3ddb9c1af3bc52a105cca",
        "author": "Islam AbdelRahman",
        "date": "2016-06-13T16:22:14-07:00",
        "message": "Remove wasteful instrumentation in FullMerge (stacked on D59577)\n\nSummary:\n[ This diff is stacked on top of D59577 ]\n\nWe keep calling timer.ElapsedNanos() on every call to MergeOperator::FullMerge even when statistics are disabled, this is wasteful.\n\nI run the readseq benchmark on a DB containing 100K merge operands for 100K keys (1 operand per key) with 1GB block cache\nI see slight performance improvment\n\nOriginal results\n\n```\n$ ./db_bench --benchmarks=\"readseq,readseq,readseq,readseq,readseq,readseq,readseq,readseq,readseq\" --merge_operator=\"max\" --merge_keys=100000 --num=100000 --db=\"/dev/shm/100K_merge_compacted/\" --cache_size=1073741824 --use_existing_db --disable_auto_compactions\n------------------------------------------------\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.498 micros/op 2006597 ops/sec;  222.0 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.295 micros/op 3393627 ops/sec;  375.4 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.285 micros/op 3511155 ops/sec;  388.4 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.286 micros/op 3500470 ops/sec;  387.2 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.283 micros/op 3530751 ops/sec;  390.6 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.289 micros/op 3464811 ops/sec;  383.3 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.277 micros/op 3612814 ops/sec;  399.7 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.283 micros/op 3539640 ops/sec;  391.6 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.285 micros/op 3503766 ops/sec;  387.6 MB/s\n```\n\nAfter patch\n\n```\n$ ./db_bench --benchmarks=\"readseq,readseq,readseq,readseq,readseq,readseq,readseq,readseq,readseq\" --merge_operator=\"max\" --merge_keys=100000 --num=100000 --db=\"/dev/shm/100K_merge_compacted/\" --cache_size=1073741824 --use_existing_db --disable_auto_compactions\n------------------------------------------------\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.476 micros/op 2100119 ops/sec;  232.3 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.278 micros/op 3600887 ops/sec;  398.4 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.275 micros/op 3636698 ops/sec;  402.3 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.271 micros/op 3691661 ops/sec;  408.4 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.273 micros/op 3661534 ops/sec;  405.1 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.276 micros/op 3627106 ops/sec;  401.3 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.272 micros/op 3682635 ops/sec;  407.4 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.266 micros/op 3758331 ops/sec;  415.8 MB/s\nDB path: [/dev/shm/100K_merge_compacted/]\nreadseq      :       0.266 micros/op 3761907 ops/sec;  416.2 MB/s\n```\n\nTest Plan: make check -j64\n\nReviewers: yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D59583",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f5177c761ffb256ecba3ddb9c1af3bc52a105cca"
    },
    {
        "hash": "9a33a723ba32244016b26722e9f172925bc27f64",
        "author": "sdong",
        "date": "2016-06-13T16:13:22-07:00",
        "message": "Remove the comments saying allow_concurrent_memtable_write and enable_write_thread_adaptive_yield are not stable\n\nSummary: allow_concurrent_memtable_write and enable_write_thread_adaptive_yield went through extensive stress test and benchmarks. Should be considered stable.\n\nTest Plan: N/A\n\nReviewers: ngbronson, yhchiang, IslamAbdelRahman, dhruba\n\nReviewed By: dhruba\n\nSubscribers: MarkCallaghan, leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D59415",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9a33a723ba32244016b26722e9f172925bc27f64"
    },
    {
        "hash": "2d05eaeb281ea2835957d317db4be96354c72cac",
        "author": "omegaga",
        "date": "2016-06-10T15:39:17-07:00",
        "message": "Fix name conflict in delete_shceduler_test and db_sst_test\n\nSummary: delete_scheduler_test and db_sst_test share a same directory name, causing possible fails on both tests when running in parallel. Fixed by changing directory name.\n\nTest Plan: Run the two tests in parallel: `parallel -u ./{} ::: delete_scheduler_test db_sst_test`\n\nReviewers: sdong, andrewkr\n\nReviewed By: sdong, andrewkr\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D59529",
        "modified_files_count": 1,
        "modified_files": [
            "util/delete_scheduler_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2d05eaeb281ea2835957d317db4be96354c72cac"
    },
    {
        "hash": "a683d4aba9c1ba230248fc985b26208ee81bbc63",
        "author": "Andrew Kryczka",
        "date": "2016-06-09T17:53:03-07:00",
        "message": "URI-based Env selection for db_bench\n\nSummary:\nAdded an option, --env_uri. When provided, it is used as an argument to\nNewEnvFromUri(), which instantiates an Env based on it.\n\nTest Plan:\nbuilt a simple binary that registers ChrootEnv for prefix \"/\", then\nran:\n\n  $ ./tmp --env_uri /tmp/ --db /abcde\n\n/tmp/ is the chroot directory and /abcde is the db_name. Then I verified\ndb_bench uses /tmp/abcde\n\nReviewers: sdong, kradhakrishnan, lightmark\n\nReviewed By: lightmark\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D59325",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a683d4aba9c1ba230248fc985b26208ee81bbc63"
    },
    {
        "hash": "281fbdddc26da6851913133fa5df0e9cb3194230",
        "author": "Islam AbdelRahman",
        "date": "2016-06-09T10:39:42-07:00",
        "message": "Temporarily remove PersistentCacheOptions from persistent_cache_tier.h to fix unity build\n\nSummary:\nPersistentCacheOptions class in persistent_cache_tier.h is not used any where yet in the code base\nbut it break the unity build because it have the same name as PersistentCacheOptions in table/persistent_cache_helper.h\n\nRemove it temporarily, and the @krad can add it again with a different name when we start using it\n\nTest Plan:\nmake unity_test -j64\nmake check -j64\n\nReviewers: kradhakrishnan, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D59349",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/persistent_cache/persistent_cache_tier.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/281fbdddc26da6851913133fa5df0e9cb3194230"
    },
    {
        "hash": "8ff59b2b40434f3a589c46056ac24d77cd06d5a9",
        "author": "Islam AbdelRahman",
        "date": "2016-06-08T12:42:33-07:00",
        "message": "Disable PersistentCacheTierTest.VolatileCacheInsertWithEviction test under TSAN temporarily\n\nSummary: Disable the test under TSAN temporary to temporarily the build\n\nTest Plan: run the test under TSAN\n\nReviewers: kradhakrishnan, andrewkr, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D59337",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/persistent_cache/persistent_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8ff59b2b40434f3a589c46056ac24d77cd06d5a9"
    },
    {
        "hash": "1ba452226f86ac4bf550642b558d22e1c523eeba",
        "author": "Frank Celler",
        "date": "2016-06-08T08:47:20-07:00",
        "message": "Fix for GCC 5.4 (#1157)\n\nGCC 5.4 will complain (see also options_parser.cc):\r\n\r\n    /home/abuild/rpmbuild/BUILD/arangodb-3.0.0r1/3rdParty/rocksdb/rocksdb/util/options_builder.cc: In function 'rocksdb::CompactionStyle rocksdb::{anonymous}::PickCompactionStyle(size_t, int, int, uint64_t)':\r\n    /home/abuild/rpmbuild/BUILD/arangodb-3.0.0r1/3rdParty/rocksdb/rocksdb/util/options_builder.cc:29:7: error: 'log' is not a member of 'std'\r\n           std::log(target_db_size / write_buffer_size) / std::log(kBytesForLevelMultiplier)));\r\n           ^\r\n    /home/abuild/rpmbuild/BUILD/arangodb-3.0.0r1/3rdParty/rocksdb/rocksdb/util/options_builder.cc:29:7: note: suggested alternative:\r\n    In file included from /usr/include/features.h:365:0,\r\n                     from /usr/include/math.h:26,\r\n                     from /home/abuild/rpmbuild/BUILD/arangodb-3.0.0r1/3rdParty/rocksdb/rocksdb/util/options_builder.cc:6:\r\n    /usr/include/bits/mathcalls.h:109:1: note:   'log'\r\n     __MATHCALL_VEC (log,, (_Mdouble_ __x));",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1ba452226f86ac4bf550642b558d22e1c523eeba"
    },
    {
        "hash": "a73b26f601016fbae98315da53d8468d2b72a02b",
        "author": "Anirban Rahut",
        "date": "2016-06-07T18:04:15-07:00",
        "message": "Adding test for contiguous WAL detection\n\nSummary:\nAdd a test to detect that when WAL gets truncated,\nseq no's are checked to be contiguous.\n\nThis test is put in ColumnFamilyTest as it has the necessary\ninfrastructure/functions for flushing column families, which\nwe use to ensure 2 active WAL files\n\nTest Plan:\nThis is a test, no feature has been added.\nThis test fails today and hence disabled\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: lgalanis, dhruba, andrewkr, pritamdamania\n\nDifferential Revision: https://reviews.facebook.net/D59253",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a73b26f601016fbae98315da53d8468d2b72a02b"
    },
    {
        "hash": "5647fa427c4eab87c0caf8bcbb91f5846a4623f9",
        "author": "Willem Jan Withagen",
        "date": "2016-06-05T17:40:43-07:00",
        "message": "stack_trace,cc: The current Stacktrace code does not compile for FreeBSD (#1153)\n\n* stack_trace,cc: The current Stacktrace code does not compile for FreeBSD\r\n\r\nSo set it to generate empty routines\r\n\r\n* stack_trace,cc: The current Stacktrace code does not compile for FreeBSD\r\n\r\nUse the definition also used in other commits",
        "modified_files_count": 1,
        "modified_files": [
            "port/stack_trace.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5647fa427c4eab87c0caf8bcbb91f5846a4623f9"
    },
    {
        "hash": "0d65acec0c46d35d6cb3235d9a550cea191c578d",
        "author": "Willem Jan Withagen",
        "date": "2016-06-05T17:23:38-07:00",
        "message": "threadpool.cc: abort() lives in stdlib.h on FreeBSD (#1155)",
        "modified_files_count": 1,
        "modified_files": [
            "util/threadpool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0d65acec0c46d35d6cb3235d9a550cea191c578d"
    },
    {
        "hash": "19dd5a61cd483cc899d06e1ae83cd0168c79ab43",
        "author": "Willem Jan Withagen",
        "date": "2016-06-05T17:22:55-07:00",
        "message": "env_chroot.cc: FreeBSD likes stdlib.h for realpaht() and friends (#1154)",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_chroot.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/19dd5a61cd483cc899d06e1ae83cd0168c79ab43"
    },
    {
        "hash": "630b732cb32a832413e9f2f80847d33e8b420521",
        "author": "Aaron Gao",
        "date": "2016-06-02T18:39:25-07:00",
        "message": "fix flaky sim_cache_test\n\nSummary: fix flaky test\n\nTest Plan: `make all check`\n\nReviewers: sdong, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D59157",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/simulator_cache/sim_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/630b732cb32a832413e9f2f80847d33e8b420521"
    },
    {
        "hash": "842958651f804e2cfa0d3ddee0d14e8dfda20dfa",
        "author": "Andrew Kryczka",
        "date": "2016-06-02T17:11:45-07:00",
        "message": "Fix race condition in SwitchMemtable\n\nSummary:\nMemTableList::current_ could be written by background flush thread and\nsimultaneously read in the user thread (NumNotFlushed() is used in\nSwitchMemtable()). Use the lock to prevent this case. Found the error from tsan.\n\nRelated: D58833\n\nTest Plan:\n  $ OPT=-g COMPILE_WITH_TSAN=1 make -j64 db_test\n  $ TEST_TMPDIR=/dev/shm/rocksdb ./db_test --gtest_filter=DBTest.RepeatedWritesToSameKey\n\nReviewers: lightmark, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D59139",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/842958651f804e2cfa0d3ddee0d14e8dfda20dfa"
    },
    {
        "hash": "27ad1707122d7fa0117234e7492a472554b385bc",
        "author": "krad",
        "date": "2016-06-01T18:07:59-07:00",
        "message": "Fix Windows build break\n\nSummary:\nDirect IO checkin breaks Windows build. Fixing the code to work for\nWindows.\n\nTest Plan: Run env_test in Windows 10 and make check in Linux\n\nReviewers: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D59073",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/27ad1707122d7fa0117234e7492a472554b385bc"
    },
    {
        "hash": "71c7eed91ca5419d556efd4605ff7c2d0b37a28e",
        "author": "Vasile Paraschiv",
        "date": "2016-06-01T09:07:09-07:00",
        "message": "Assert boundary checks for SetPerfLevel()\n\nSummary: Add asserts around PerfLevel enum\n\nTest Plan: make all check -j32\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D59007",
        "modified_files_count": 1,
        "modified_files": [
            "util/perf_level.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/71c7eed91ca5419d556efd4605ff7c2d0b37a28e"
    },
    {
        "hash": "5d85fdb2c58d1b3988ff07ac6d4feaaa7ddbaab1",
        "author": "Reid Horuff",
        "date": "2016-05-31T12:26:48-07:00",
        "message": "add missing lock",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5d85fdb2c58d1b3988ff07ac6d4feaaa7ddbaab1"
    },
    {
        "hash": "590e2617ee9204f465770de69dac48947925a3b4",
        "author": "Zuoyan Qin",
        "date": "2016-05-29T14:26:55-07:00",
        "message": "fix delete file bug when do checkpoint (#1138)",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/checkpoint/checkpoint.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/590e2617ee9204f465770de69dac48947925a3b4"
    },
    {
        "hash": "472c06e90366bc906d48caac6d9e6320e4823116",
        "author": "Vasile Paraschiv",
        "date": "2016-05-27T10:10:27-07:00",
        "message": "Add low and upper bound values for rocksdb::PerfLevel enum\n\nSummary:\nAdd under and over limits for rocksdb::PerfLevel enum\nto allow us to do boundary checks before casting ints or unints\nto this enum.\n\nTest Plan: make all check -j32\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D58521",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/perf_level.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/472c06e90366bc906d48caac6d9e6320e4823116"
    },
    {
        "hash": "157e0633e7dd69916a3b6377f1d24747f4918fcd",
        "author": "sdong",
        "date": "2016-05-27T09:41:35-07:00",
        "message": "MutexLock -> ThreadPoolMutexLock in util/threadpool.cc\n\nSummary: util/threadpool.cc's function name is the same as a well-known class name. It breaks unity build. Rename it.\n\nTest Plan: Run all existing test.\n\nReviewers: yiwu, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D58881",
        "modified_files_count": 1,
        "modified_files": [
            "util/threadpool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/157e0633e7dd69916a3b6377f1d24747f4918fcd"
    },
    {
        "hash": "23d4cf483c64040d772a9f4049db72cc492f54c3",
        "author": "sdong",
        "date": "2016-05-26T11:23:50-07:00",
        "message": "include/rocksdb/sst_file_writer.h should not depend on util/mutable_cf_options.h\n\nSummary: I don't think util/mutable_cf_options.h is needed inside include/rocksdb/sst_file_writer.h and it is not allowed. Remove it.\n\nTest Plan: Run all tests\n\nReviewers: IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: lightmark, leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D58827",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/sst_file_writer.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/23d4cf483c64040d772a9f4049db72cc492f54c3"
    },
    {
        "hash": "345fd73faf5f0dde31a9abc949a405bf96d7e035",
        "author": "sdong",
        "date": "2016-05-26T10:13:24-07:00",
        "message": "Fix flaky DBTestDynamicLevel.DynamicLevelMaxBytesBase2\n\nSummary: We added more table properties for each SST file, so when using 2KB SST file size, the estimated size of SST files is off by almost half, causing the LSM tree structure not as expected. Fix it by making file size 4x as previously, as well as LSM base size. Also avoid the sleeping based synchronization and turn to use sync points.\n\nTest Plan: Run paralell unit tests multiple times and make sure they always pass.\n\nReviewers: IslamAbdelRahman, kradhakrishnan\n\nReviewed By: kradhakrishnan\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D58749",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_dynamic_level_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/345fd73faf5f0dde31a9abc949a405bf96d7e035"
    },
    {
        "hash": "8fc75de3270bf709bc9525a069107585704a94a8",
        "author": "krad",
        "date": "2016-05-24T17:45:50-07:00",
        "message": "Minor fix to disable DynamicLevelMaxBytesBase2",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_dynamic_level_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8fc75de3270bf709bc9525a069107585704a94a8"
    },
    {
        "hash": "9dd50d990290b3d72357559d01e3138cce34246d",
        "author": "Islam AbdelRahman",
        "date": "2016-05-24T17:27:44-07:00",
        "message": "Fix db_bench\n\nSummary: Fix simple issue with FLAGS_simcache_size condition\n\nTest Plan: run db_bench\n\nReviewers: lightmark\n\nReviewed By: lightmark\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D58743",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9dd50d990290b3d72357559d01e3138cce34246d"
    },
    {
        "hash": "11f329bd40ff6d6cd730e3dd276c5662188538a0",
        "author": "Sage Weil",
        "date": "2016-05-22T22:00:15-07:00",
        "message": "db/db_impl: restrict WALRecoveryMode when using recycled log files\n\nkPointInTimeRecovery is indistinguishable from\nkTolerateCorruptedTailRecords in recycle mode since we define\nthe \"end\" of the log as the first corrupt record we encounter.\n\nkAbsoluteConsistency doesn't make sense because even a clean\nshutdown leaves old junk at the end of the log file.\n\nSigned-off-by: Sage Weil <sage@redhat.com>",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/11f329bd40ff6d6cd730e3dd276c5662188538a0"
    },
    {
        "hash": "2b2a898e0b9ffe12e4ffb9e2bf4a697c843278f0",
        "author": "Sage Weil",
        "date": "2016-05-22T22:00:15-07:00",
        "message": "db/log_reader: combine kBadRecord{Len,Checksum} for readability\n\nThese vary only by the corruption string reported.\n\nSigned-off-by: Sage Weil <sage@redhat.com>",
        "modified_files_count": 1,
        "modified_files": [
            "db/log_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2b2a898e0b9ffe12e4ffb9e2bf4a697c843278f0"
    },
    {
        "hash": "0e77246ba90836bf5c2aa6d4e9cbed2537dc49c5",
        "author": "sdong",
        "date": "2016-05-20T10:16:49-07:00",
        "message": "backupable_db.cc: lambada to explictly caputre \"this\" when escaping scope\n\nSummary:\nGoogle C++ Style writes: In particular, prefer to write lambda captures explicitly when capturing this or if the lambda will escape the current scope.\nHere it is the case for both.\n\nTest Plan: Run all test suites.\n\nReviewers: andrewkr, dhruba\n\nReviewed By: andrewkr, dhruba\n\nSubscribers: yhchiang, IslamAbdelRahman, leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D58515",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0e77246ba90836bf5c2aa6d4e9cbed2537dc49c5"
    },
    {
        "hash": "05c5c39a7cf1b427737721c3358cbf869b77ae57",
        "author": "Islam AbdelRahman",
        "date": "2016-05-18T00:41:14-07:00",
        "message": "Fix build",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/05c5c39a7cf1b427737721c3358cbf869b77ae57"
    },
    {
        "hash": "2ead11511674d64abdd185ec8466e4ae08a31916",
        "author": "Islam AbdelRahman",
        "date": "2016-05-17T18:54:27-07:00",
        "message": "Fix TransactionTest.TwoPhaseMultiThreadTest under TSAN\n\nSummary:\nTransactionTest.TwoPhaseMultiThreadTest runs forever under TSAN and our CI builds time out\nlooks like the reason is that some threads keep running and other threads dont get a chance to increment the counter\n\nTest Plan: run the test under TSAN\n\nReviewers: sdong, horuff\n\nReviewed By: horuff\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D58359",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2ead11511674d64abdd185ec8466e4ae08a31916"
    },
    {
        "hash": "a4003363987fa09fc70858f6f480ad72946c3304",
        "author": "Reid Horuff",
        "date": "2016-05-12T13:54:08-07:00",
        "message": "TransactionLogIterator sequence gap fix\n\nSummary: DBTestXactLogIterator.TransactionLogIterator was failing due the sequence gaps. This was caused by an off-by-one error when calculating the new sequence number after recovering from logs.\n\nTest Plan: db_log_iter_test\n\nReviewers: andrewkr\n\nSubscribers: andrewkr, hermanlee4, dhruba, IslamAbdelRahman\n\nDifferential Revision: https://reviews.facebook.net/D58053",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a4003363987fa09fc70858f6f480ad72946c3304"
    },
    {
        "hash": "40123b380571fc62e1d2cf046a97da5ad55a186d",
        "author": "Reid Horuff",
        "date": "2016-05-11T14:22:43-07:00",
        "message": "signed vs unsigned comparison fix",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/40123b380571fc62e1d2cf046a97da5ad55a186d"
    },
    {
        "hash": "c1af07ce845110fa1ded32e81c31ac5204809a59",
        "author": "Islam AbdelRahman",
        "date": "2016-05-11T12:25:32-07:00",
        "message": "Disable backupable_db_test.cc on Windows\n\nSummary: Disable backupable_db_test.cc on Windows since EnvChroot is not supported\n\nTest Plan: check ROCKSDB_LITE\n\nReviewers: andrewkr\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D58035",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c1af07ce845110fa1ded32e81c31ac5204809a59"
    },
    {
        "hash": "e61ba052b3687de8b02e921232254e21ac2241dd",
        "author": "Andrew Kryczka",
        "date": "2016-05-11T08:18:44-07:00",
        "message": "Isolate db env and backup Env in unit tests\n\nSummary:\n- Used ChrootEnv so the database and backup Envs are isolated in the filesystem.\n- Removed DifferentEnvs test since now every test uses different Envs\n\nDepends on D57543\n\nTest Plan:\n- ran backupable_db_test\n- verified backupable_db_test now catches the bug when D57159 is backed out (this bug previously passed through the test cases, which motivated this change)\n\nReviewers: sdong, lightmark, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D57615",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e61ba052b3687de8b02e921232254e21ac2241dd"
    },
    {
        "hash": "560358dc9354009747c5e612ce4e4b4f92b8c10d",
        "author": "Islam AbdelRahman",
        "date": "2016-05-10T19:30:09-07:00",
        "message": "Fix data race in GetObsoleteFiles()\n\nSummary:\nGetObsoleteFiles() and LogAndApply() functions modify obsolete_manifests_ vector\nwe need to make sure that the mutex is held when we modify the obsolete_manifests_\n\nTest Plan: run the test under TSAN\n\nReviewers: andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D58011",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/560358dc9354009747c5e612ce4e4b4f92b8c10d"
    },
    {
        "hash": "f548da33e87e4cadc7ce0705aa65409ecc981b57",
        "author": "Andrew Kryczka",
        "date": "2016-05-10T09:53:52-07:00",
        "message": "Follow symlinks in chroot directory\n\nSummary:\nOn Mac OS X, the chroot directory we typically use (\"/tmp\") is actually\na symlink for \"/private/tmp\". Since we dereference symlinks in user-defined\npaths, we must also dereference symlinks in chroot_dir_ such that we can perform\nstring comparisons on those paths.\n\nTest Plan: ran env_test on Mac OS X and devserver\n\nReviewers: sdong, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D57957",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_chroot.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f548da33e87e4cadc7ce0705aa65409ecc981b57"
    },
    {
        "hash": "d86f9b9c3f7197b2816de5ebb77e981cba3447b6",
        "author": "Islam AbdelRahman",
        "date": "2016-05-09T16:08:30-07:00",
        "message": "Fix lite build\n\nSummary: Fix lite build\n\nTest Plan: run under lite\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D57945",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d86f9b9c3f7197b2816de5ebb77e981cba3447b6"
    },
    {
        "hash": "258459ed540b1eeb01524677ed08d4ed23b90938",
        "author": "Andrew Kryczka",
        "date": "2016-05-09T14:38:50-07:00",
        "message": "Properly destroy ChrootEnv in env_test\n\nSummary: see title\n\nTest Plan:\n  $ /mnt/gvfs/third-party2/valgrind/af85c56f424cd5edfc2c97588299b44ecdec96bb/3.10.0/gcc-4.9-glibc-2.20/e9936bf/bin/valgrind --error-exitcode=2 --leak-check=full ./env_test\n\nReviewers: IslamAbdelRahman, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D57897",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/258459ed540b1eeb01524677ed08d4ed23b90938"
    },
    {
        "hash": "e1951b6f28cc9dc3ec92fcc1546815c20ac2e760",
        "author": "Islam AbdelRahman",
        "date": "2016-05-09T12:09:05-07:00",
        "message": "Add --index_block_restart_interval option in db_bench\n\nSummary:\nPass --index_block_restart_interval flag to block_based_options in db_bench tool.\n\nTest Plan: none\n\nReviewers: sdong, kradhakrishnan\n\nReviewed By: kradhakrishnan\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D57699",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e1951b6f28cc9dc3ec92fcc1546815c20ac2e760"
    },
    {
        "hash": "a9b3c47c8e4ceceff6d1ff1c88fcf3f26cecc150",
        "author": "Andrew Kryczka",
        "date": "2016-05-06T18:32:54-07:00",
        "message": "Fix includes for clang on OS X\n\nSummary:\nFix below error:\n\n  use of undeclared identifier 'errno'\n\nTest Plan: doitlive\n\nReviewers: IslamAbdelRahman, sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D57849",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_chroot.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a9b3c47c8e4ceceff6d1ff1c88fcf3f26cecc150"
    },
    {
        "hash": "967476eaee1a3e71f3be8f76200d3c1e36f5f614",
        "author": "Islam AbdelRahman",
        "date": "2016-05-05T11:24:08-07:00",
        "message": "Fix valgrind (DBIteratorTest.ReadAhead)\n\nSummary: This test is failing under valgrind because we dont delete the Env that we allocated\n\nTest Plan: run the test under valgrind\n\nReviewers: andrewkr, yhchiang, yiwu, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D57693",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iterator_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/967476eaee1a3e71f3be8f76200d3c1e36f5f614"
    },
    {
        "hash": "9790b94c924453cea4d230a0f40edf02015f71e8",
        "author": "Mark Callaghan",
        "date": "2016-05-05T07:32:10-07:00",
        "message": "Add optimize_filters_for_hits option to db_bench\n\nSummary:\nAdd optimize_filters_for_hits option to db_bench\n\nTask ID: #\n\nBlame Rev:\n\nTest Plan:\nrun db_bench\n\nRevert Plan:\n\nDatabase Impact:\n\nMemcache Impact:\n\nOther Notes:\n\nEImportant:\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D57621",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9790b94c924453cea4d230a0f40edf02015f71e8"
    },
    {
        "hash": "a4ea345b042454354bcf5cae128c5cee58b62a69",
        "author": "Yi Wu",
        "date": "2016-05-04T17:20:52-07:00",
        "message": "Fixing lite build\n\nSummary: Fixing lite build broke in unit test. `FilesPerLevel()` depends on `DB::GetProperty()`, which lite build doesn't support.\n\nTest Plan: OPT=-DROCKSDB_LITE make check -j64\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D57651",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iterator_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a4ea345b042454354bcf5cae128c5cee58b62a69"
    },
    {
        "hash": "cba752d5880d13b8142bb6ab27f999d85a31893a",
        "author": "Patrick Chan",
        "date": "2016-05-03T08:46:24-07:00",
        "message": "sst_dump won't print size for unsupported compression type",
        "modified_files_count": 1,
        "modified_files": [
            "tools/sst_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cba752d5880d13b8142bb6ab27f999d85a31893a"
    },
    {
        "hash": "b8cf9130f84ad75a063b94d83a4ac6abb7eacbff",
        "author": "Warren Falk",
        "date": "2016-05-02T10:04:37-07:00",
        "message": "Fix #1110, 32-bit build failure on Mac OSX (#1112)\n\nUsing explicit 64-bit type in conditional in platforms above 32-bits\r\nThis appears to be necessary on Mac OSX as std::conditional does not appear to short circuit and evaluates the third template arg\r\nMaking the third template arg be 64 bits explicitly works around this problem and will work on both 32 bit and 64+ bit platforms.",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b8cf9130f84ad75a063b94d83a4ac6abb7eacbff"
    },
    {
        "hash": "4ea6e051ee8dde163c0afae1a9297b964d8f94b6",
        "author": "Dmitri Smirnov",
        "date": "2016-04-29T16:43:13-07:00",
        "message": "Fix multiple issues with WinMmapFile fo sequential writing (#1108)\n\nmake preallocation inline with other writable files\r\n  make sure that we map no more than pre-allocated size.",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4ea6e051ee8dde163c0afae1a9297b964d8f94b6"
    },
    {
        "hash": "f3bb024fd6eba9ba95abd653efa47e3b37e1a999",
        "author": "Islam AbdelRahman",
        "date": "2016-04-29T15:19:19-07:00",
        "message": "Fix clang build\n\nSummary: fix clang build\n\nTest Plan: USE_CLANG make all -j64\n\nReviewers: horuff, sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D57453",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f3bb024fd6eba9ba95abd653efa47e3b37e1a999"
    },
    {
        "hash": "1d2e4ef747d4e1828b125814b8e5898e04bfe575",
        "author": "Reid Horuff",
        "date": "2016-04-29T11:47:24-07:00",
        "message": "ldb support new WAL records",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1d2e4ef747d4e1828b125814b8e5898e04bfe575"
    },
    {
        "hash": "e8115cea453bc7f827ca844e313c0a3eda24cda1",
        "author": "PraveenSinghRao",
        "date": "2016-04-28T22:50:26-07:00",
        "message": "Revert \"Use async file handle for better parallelism (#1049)\" (#1105)\n\nThis reverts commit b54c34742412af0001a69c2f7d909bc05e1ea71f.\r\n\r\nRevert async file handle change as it causes failures with appveyor",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e8115cea453bc7f827ca844e313c0a3eda24cda1"
    },
    {
        "hash": "029022b0f19bff7bdff2e2641242da01522e0ea7",
        "author": "Islam AbdelRahman",
        "date": "2016-04-28T15:59:33-07:00",
        "message": "Fix crash_test\n\nSummary:\ncrash_test grep for 'fail' string in the output and if found it consider that we failed.\nUpdate the output to use something else\n\nTest Plan: make crash_test (still running)\n\nReviewers: yhchiang, sdong, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D57381",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/029022b0f19bff7bdff2e2641242da01522e0ea7"
    },
    {
        "hash": "a06faa6327b5d20717673f8571ac5f9ded6e2da9",
        "author": "Andrew Kryczka",
        "date": "2016-04-28T15:11:28-07:00",
        "message": "Skip PresetCompressionDict test for lite\n\nSummary:\nThis test relies on \"rocksdb.num-files-at-levelN\" property that isn't\nimplemented in rocksdb lite. So we will compile it only for non-lite builds.\n\nTest Plan:\n  $ make -j40 check 'OPT=-g -DROCKSDB_LITE'\n\nReviewers: sdong, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D57387",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a06faa6327b5d20717673f8571ac5f9ded6e2da9"
    },
    {
        "hash": "e7899c6618c42186763c26745ba34ea353375f1f",
        "author": "Dmitri Smirnov",
        "date": "2016-04-28T11:39:12-07:00",
        "message": "Fix build issue. (#1103)",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e7899c6618c42186763c26745ba34ea353375f1f"
    },
    {
        "hash": "0f428c56193c62258ab09745b41afaf127f98636",
        "author": "Andrew Kryczka",
        "date": "2016-04-28T10:42:10-07:00",
        "message": "Fix compression dictionary clang osx error\n\nSummary:\nThere was one narrowing conversion in D52287 that only showed up with\nclang on osx.\n\nTest Plan:\n  $ make clean && USE_CLANG=1 DISABLE_JEMALLOC=1 TEST_TMPDIR=/dev/shm/rocksdb OPT=-g make -j32 check\n\nReviewers: sdong, lightmark, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D57357",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0f428c56193c62258ab09745b41afaf127f98636"
    },
    {
        "hash": "ad573b90271d8e235452a29413c284d58ef4b88d",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-04-27T16:50:51-07:00",
        "message": "Temporarily disable CompactFiles in db_stress in its default setting\n\nSummary:\nAs db_stress with CompactFiles possibly catches a previous bug currently,\ntemporarily disable CompactFiles in db_stress in its default setting\nto allows new bug to be detected while investigating the bug in CompactFiles.\n\nTest Plan: crash test\n\nReviewers: sdong, kradhakrishnan, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D57333",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ad573b90271d8e235452a29413c284d58ef4b88d"
    },
    {
        "hash": "eb7398085362da04789916ee45c06aaaa4f4a190",
        "author": "Islam AbdelRahman",
        "date": "2016-04-26T16:07:04-07:00",
        "message": "Fix BackupableDBTest\n\nSummary: Fix BackupableDBTest.NoDoubleCopy and BackupableDBTest.DifferentEnvs by mocking the db files in db_env instead of backup_env_\n\nTest Plan: make check -j64\n\nReviewers: sdong, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D57273",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eb7398085362da04789916ee45c06aaaa4f4a190"
    },
    {
        "hash": "1995e34d6aadce99d539058d07a40f5cb1d89470",
        "author": "Andrew Kryczka",
        "date": "2016-04-26T12:33:30-07:00",
        "message": "Retrieve file size from proper Env\n\nSummary:\nWhen db_env_ != backup_env_, InsertPathnameToSizeBytes() would\nuse the wrong Env during backup creation. This happened because this function\nused backup_env_ instead of db_env_ to get WAL/data file sizes.\n\nThis diff adds an argument to InsertPathnameToSizeBytes() indicating which Env\nto use.\n\nTest Plan: ran @anirbanb's BackupTestTool\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D57159",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1995e34d6aadce99d539058d07a40f5cb1d89470"
    },
    {
        "hash": "f3eb0b5b8c9d1c84f25bd930ec0374147b041be6",
        "author": "Islam AbdelRahman",
        "date": "2016-04-25T18:18:35-07:00",
        "message": "Make EventListenerTest.CompactionReasonLevel more deterministic\n\nSummary:\nIn this test some times automatic compactions do everything and Manual compaction become a no-op.\nUpdate the test to make sure manual compaction is not a no-op\n\nTest Plan: run the test\n\nReviewers: andrewkr, yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D57189",
        "modified_files_count": 1,
        "modified_files": [
            "db/listener_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f3eb0b5b8c9d1c84f25bd930ec0374147b041be6"
    },
    {
        "hash": "995353e46ac52507f721c2e63cd10f9cd5cb36ac",
        "author": "Dhruba Borthakur",
        "date": "2016-04-25T20:09:36+01:00",
        "message": "Fix null-pointer-dereference detected by Infer (https://github.com/facebook/infer)\n\nTest Plan: make check\n\nReviewers: leveldb, sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D57165",
        "modified_files_count": 1,
        "modified_files": [
            "table/adaptive_table_factory.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/995353e46ac52507f721c2e63cd10f9cd5cb36ac"
    },
    {
        "hash": "b54c34742412af0001a69c2f7d909bc05e1ea71f",
        "author": "PraveenSinghRao",
        "date": "2016-04-22T13:27:33-07:00",
        "message": "Use async file handle for better parallelism (#1049)",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b54c34742412af0001a69c2f7d909bc05e1ea71f"
    },
    {
        "hash": "644f978c18278e3013a2d4725867905268b651cc",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-04-21T14:47:23-07:00",
        "message": "Fix RocksDB Lite build in db_stress\n\nSummary: Fix RocksDB Lite build in db_stress\n\nTest Plan: OPT=-DROCKSDB_LITE db_stress\n\nReviewers: IslamAbdelRahman, kradhakrishnan, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D57045",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/644f978c18278e3013a2d4725867905268b651cc"
    },
    {
        "hash": "874c96ac1d3a231d807ce262ecbc9bbcb2c80900",
        "author": "flabby",
        "date": "2016-04-19T14:51:24-07:00",
        "message": "Merge pull request #1083 from flabby/master\n\nfix typo  in comment of options.h",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/874c96ac1d3a231d807ce262ecbc9bbcb2c80900"
    },
    {
        "hash": "6cbffd50d0fb7aa09f16b20b096fb6b5aa9c3a43",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-04-19T14:36:09-07:00",
        "message": "Enable testing CompactFiles in db_stress\n\nSummary:\nEnable testing CompactFiles in db_stress by adding flag test_compact_files\nto db_stress.\n\nTest Plan:\n./db_stress --test_compact_files=1 --compaction_style=0 --allow_concurrent_memtable_write=false --ops_per_thread=100000\n./db_stress --test_compact_files=1 --compaction_style=1 --allow_concurrent_memtable_write=false --ops_per_thread=100000\n\nSample output (note that it's normal to have some CompactFiles() failed):\n    Stress Test : 491.891 micros/op 65054 ops/sec\n                : Wrote 21.98 MB (0.45 MB/sec) (45% of 3200352 ops)\n                : Wrote 1440728 times\n                : Deleted 441616 times\n                : Single deleted 38181 times\n                : 319251 read and 19025 found the key\n                : Prefix scanned 640520 times\n                : Iterator size sum is 9691415\n                : Iterated 319704 times\n                : Got errors 0 times\n                : 1323 CompactFiles() succeed\n                : 32 CompactFiles() failed\n    2016/04/11-15:50:58  Verification successful\n\nReviewers: sdong, IslamAbdelRahman, kradhakrishnan, yiwu, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D56565",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6cbffd50d0fb7aa09f16b20b096fb6b5aa9c3a43"
    },
    {
        "hash": "b95510ddf4bdf861fde70911bbffced38b937c2b",
        "author": "Islam AbdelRahman",
        "date": "2016-04-19T14:05:48-07:00",
        "message": "Fix DBTest.RateLimitedDelete flakiness\n\nSummary: We need to enable sync_point processing before creating the SstFileManager to ensure that we are holding the bg delete scheduler thread from running\n\nTest Plan:\nrun the test\ndebug using printf\n\nReviewers: sdong, yhchiang, yiwu, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D56871",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_sst_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b95510ddf4bdf861fde70911bbffced38b937c2b"
    },
    {
        "hash": "6356b4d516b504999d18e3de08ffe3f7533a6e3f",
        "author": "Islam AbdelRahman",
        "date": "2016-04-19T13:57:05-07:00",
        "message": "Fix nullptr dereference in adaptive_table\n\nSummary:\n@dulmarod Ran infer on RocksDB and found that we dereference nullptr in adaptive_table\nhttps://fb.facebook.com/groups/rocksdb/permalink/1046374415411173/\n\nTest Plan: make check -j64\n\nReviewers: sdong, yhchiang, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D56973",
        "modified_files_count": 1,
        "modified_files": [
            "table/adaptive_table_factory.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6356b4d516b504999d18e3de08ffe3f7533a6e3f"
    },
    {
        "hash": "725184b04e08b55e8604a7f772d1b68a4a1d89e0",
        "author": "Yi Wu",
        "date": "2016-04-18T11:34:11-07:00",
        "message": "Fix db_block_cache_test in lite build\n\nSummary: D56715 move some of the tests from db_test to db_block_cache_test. Some of them should be disabled in lite build.\n\nTest Plan:\n    make check -j32\n    OPT='-DROCKSDB_LITE' make check -j32\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D56907",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_block_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/725184b04e08b55e8604a7f772d1b68a4a1d89e0"
    },
    {
        "hash": "290883d94aa82d60bca41fd84be8a5fa843dc0c6",
        "author": "Yi Wu",
        "date": "2016-04-18T10:47:10-07:00",
        "message": "Fix lite build\n\nSummary: Fix rocksdb lite build after D56715.\n\nTest Plan:\n  make -j40 'OPT=-g -DROCKSDB_LITE'\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D56895",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test_util.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/290883d94aa82d60bca41fd84be8a5fa843dc0c6"
    },
    {
        "hash": "23089fd2816c7c27302bb7db222fdfa6fa0fb7d0",
        "author": "sdong",
        "date": "2016-04-18T10:18:41-07:00",
        "message": "write_callback_test: clean test directory before running tests\n\nSummary: write_callback_test fails if previous run didn't finish cleanly. Clean the DB before runing the test.\n\nTest Plan: Run the test that see it doesn't fail any more.\n\nReviewers: andrewkr, yhchiang, yiwu, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: kradhakrishnan, leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D56859",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_callback_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/23089fd2816c7c27302bb7db222fdfa6fa0fb7d0"
    },
    {
        "hash": "6d436a3f85425e7658e8ec5ae809538b57001265",
        "author": "sdong",
        "date": "2016-04-15T17:36:57-07:00",
        "message": "DBTest.HardLimit made more deterministic\n\nSummary: In DBTest.HardLimit, multiple flushes may merge into one, based on thread scheduling. Avoid it by waiting each flush to finish before generating the next one.\n\nTest Plan: Run test in parallel several times and see it doesn't fail any more.\n\nReviewers: yhchiang, kradhakrishnan, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: yiwu, leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D56853",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6d436a3f85425e7658e8ec5ae809538b57001265"
    },
    {
        "hash": "9d35ae649ef1efaa5d3f5ec094adcd0f26c16349",
        "author": "sdong",
        "date": "2016-04-15T16:16:53-07:00",
        "message": "Make DBTestUniversalCompaction.IncreaseUniversalCompactionNumLevels more deterministic\n\nSummary: DBTestUniversalCompaction, IncreaseUniversalCompactionNumLevels fails one in about 30 runs when running in parallel. We wait for compaction after each flush to make the compaction behavior deterministic.\n\nTest Plan: Run the test 1000 times in parallel and it still passes.\n\nReviewers: yhchiang, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: kradhakrishnan, yiwu, leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D56841",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_universal_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9d35ae649ef1efaa5d3f5ec094adcd0f26c16349"
    },
    {
        "hash": "19ef3de57e3a47a47f155d52dfbafaf2bcbf79b4",
        "author": "Islam AbdelRahman",
        "date": "2016-04-13T10:38:45-07:00",
        "message": "Fix ManualCompactionPartial test flakiness\n\nSummary: The reason for this test flakiness is that we try to verify that number of files in L0 is 3 after flushing the 3rd file although we may have a compaction running in the background that may finish before we do the check and the 3 L0 files are converted to 1 L1 file\n\nTest Plan: Run a modified version of the test that sleep before doing the check\n\nReviewers: sdong, andrewkr, kradhakrishnan, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D56643",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/19ef3de57e3a47a47f155d52dfbafaf2bcbf79b4"
    },
    {
        "hash": "b345b36620c9cbdd30d04c23c632da5e382703b9",
        "author": "Jay Edgar",
        "date": "2016-04-13T09:01:42-07:00",
        "message": "Add a minimum value for the refill bytes per period value\n\nSummary: If the user specified a small enough value for the rate limiter's bytes per second, the calculation for the number of refill bytes per period could become zero which would effectively cause the server to hang forever.\n\nTest Plan: Existing tests\n\nReviewers: sdong, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D56631",
        "modified_files_count": 1,
        "modified_files": [
            "util/rate_limiter.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b345b36620c9cbdd30d04c23c632da5e382703b9"
    },
    {
        "hash": "71303e04e76dadb3179c718740c89c100c500175",
        "author": "Hyunyoung Lee",
        "date": "2016-04-12T17:05:09-04:00",
        "message": "Update db_bench_tool.cc (#1073)\n\n* Update db_bench_tool.cc\r\n\r\nI fixed the wrong letters, LevelDB -> rocksDB, because I thought of LevelDB as the wrong presentation.\r\n\r\nthe following show my fix :\r\n\r\nfprintf(stderr, \"LevelDB:    version %d.%d\\n\",\r\n            kMajorVersion, kMinorVersion);\r\n\r\n----------------->\r\nfprintf(stderr, \"rocksDB:    version %d.%d\\n\",\r\n            kMajorVersion, kMinorVersion);\r\n\r\n* Update db_bench_tool.cc\r\n\r\n* Update db_bench_tool.cc",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/71303e04e76dadb3179c718740c89c100c500175"
    },
    {
        "hash": "63cf15bb9f6767a85037e999a35bc8f2a93982b8",
        "author": "sdong",
        "date": "2016-04-12T14:03:35-07:00",
        "message": "Fix option settable tests\n\nSummary: In option settable tests, bytes for pointers are not all skipped, so that they may be the same as the special character and cause false positive.\n\nTest Plan: Run the test. Manually verify the issue is not there any more.\n\nReviewers: IslamAbdelRahman, andrewkr\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: kradhakrishnan, yiwu, yhchiang, leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D56553",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_settable_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/63cf15bb9f6767a85037e999a35bc8f2a93982b8"
    },
    {
        "hash": "13e6c8e97ac2d6cbdf0777b67f492fb45d2afe65",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-04-11T20:15:52-07:00",
        "message": "Relax an assertion in Compaction::ShouldStopBefore\n\nSummary:\nIn some case, it is possible to have two concesutive SST files might sharing\nsame boundary keys.  However, in the assertion in Compaction::ShouldStopBefore,\nit exclude such possibility.\n\nThis patch fix this issue by relaxing the assertion to allow the equal case.\n\nTest Plan: rocksdb tests\n\nReviewers: IslamAbdelRahman, kradhakrishnan, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D55875",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/13e6c8e97ac2d6cbdf0777b67f492fb45d2afe65"
    },
    {
        "hash": "ae21d71e94ebe82689aea39359c1661776871d52",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-04-11T19:59:25-07:00",
        "message": "Fixed a bug in RocksDB Statistics where flush is considered as compaction\n\nSummary: Fixed a bug in RocksDB Statistics where flush is considered as compaction\n\nTest Plan: unit test\n\nReviewers: sdong, IslamAbdelRahman, rven, kradhakrishnan, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D56271",
        "modified_files_count": 1,
        "modified_files": [
            "db/flush_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ae21d71e94ebe82689aea39359c1661776871d52"
    },
    {
        "hash": "8e0e22f76b98c5894c3cfc46e11b65a3187e5213",
        "author": "Andrew Kryczka",
        "date": "2016-04-11T19:21:00-07:00",
        "message": "Fix Windows build by replacing strings.h include\n\nSummary:\nstrings.h header does not exist on Windows. So, we can try another way\nto compare strings ignoring case.\n\nTest Plan:\nbuilt and ran:\n\n  $ ./ldb_cmd_test\n\nReviewers: sdong, yhchiang, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D56535",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8e0e22f76b98c5894c3cfc46e11b65a3187e5213"
    },
    {
        "hash": "30d72ee43c599d049c192cec1e9c5df1cc246516",
        "author": "sdong",
        "date": "2016-04-11T13:02:56-07:00",
        "message": "PrefixTest.PrefixAndWholeKeyTest should run against a different directory from prefix_test\n\nSummary: PrefixTest.PrefixAndWholeKeyTest runs against the same directory as prefix_test, which sometimes fail parallel tests. Fix it.\n\nTest Plan: Run it in parallel and see it doesn't fail anymore.\n\nReviewers: andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D56541",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/30d72ee43c599d049c192cec1e9c5df1cc246516"
    },
    {
        "hash": "0e3cc2cf1f3aafe783432e631633140053861bdc",
        "author": "Andrew Kryczka",
        "date": "2016-04-08T18:50:18-07:00",
        "message": "Add column family info to TableProperties::ToString()\n\nSummary: This is used at least by `sst_dump --show_properties`\n\nTest Plan:\n- default CF\n\n```\n  $ ./sst_dump --show_properties --file=./tmp-db/000007.sst | grep 'column family'\n  column family ID: 0\n  column family name: default\n```\n\n- custom CF\n\n```\n  $ ./sst_dump --show_properties --file=./tmp-db/000012.sst | grep 'column family'\n  column family ID: 1\n  column family name: col-fam-1\n```\n\n- no CF\n\n```\n  $ ./sst_dump --show_properties --file=./tmp-db/000017.sst | grep 'column family'\n  column family ID: N/A\n  column family name: N/A\n```\n\nReviewers: IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D56499",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_properties.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0e3cc2cf1f3aafe783432e631633140053861bdc"
    },
    {
        "hash": "052299035803827efa6f1c2cb28d3dc3c6e8b1f7",
        "author": "Islam AbdelRahman",
        "date": "2016-04-08T12:05:02-07:00",
        "message": "Improve sst_dump help message\n\nSummary:\nCurrent Message\n\n```\nsst_dump [--command=check|scan|none|raw] [--verify_checksum] --file=data_dir_OR_sst_file [--output_hex] [--input_key_hex] [--from=<user_key>] [--to=<user_key>] [--read_num=NUM] [--show_properties] [--show_compression_sizes] [--show_compression_sizes [--set_block_size=<block_size>]]\n```\nNew message\n\n```\nsst_dump --file=<data_dir_OR_sst_file> [--command=check|scan|raw]\n    --file=<data_dir_OR_sst_file>\n      Path to SST file or directory containing SST files\n\n    --command=check|scan|raw\n        check: Iterate over entries in files but dont print anything except if an error is encounterd (default command)\n        scan: Iterate over entries in files and print them to screen\n        raw: Dump all the table contents to <file_name>_dump.txt\n\n    --output_hex\n      Can be combined with scan command to print the keys and values in Hex\n\n    --from=<user_key>\n      Key to start reading from when executing check|scan\n\n    --to=<user_key>\n      Key to stop reading at when executing check|scan\n\n    --read_num=<num>\n      Maximum number of entries to read when executing check|scan\n\n    --verify_checksum\n      Verify file checksum when executing check|scan\n\n    --input_key_hex\n      Can be combined with --from and --to to indicate that these values are encoded in Hex\n\n    --show_properties\n      Print table properties after iterating over the file\n\n    --show_compression_sizes\n      Independent command that will recreate the SST file using 16K block size with different\n      compressions and report the size of the file using such compression\n\n    --set_block_size=<block_size>\n      Can be combined with --show_compression_sizes to set the block size that will be used\n      when trying different compression algorithms\n```\n\nTest Plan: none\n\nReviewers: yhchiang, andrewkr, kradhakrishnan, yiwu, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D56325",
        "modified_files_count": 1,
        "modified_files": [
            "tools/sst_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/052299035803827efa6f1c2cb28d3dc3c6e8b1f7"
    },
    {
        "hash": "0930e5e99f0805897d3aad95f4b4cd216f8ebea1",
        "author": "sdong",
        "date": "2016-04-08T11:27:08-07:00",
        "message": "Update comments on include/rocksdb/perf_context.h\n\nSummary: Some grammer mistakes in code comments in include/rocksdb/perf_context.h. Also polish it a liitlebit.\n\nTest Plan: Not needed\n\nReviewers: IslamAbdelRahman, yhchiang, yiwu, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D56307",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/perf_context.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0930e5e99f0805897d3aad95f4b4cd216f8ebea1"
    },
    {
        "hash": "ada88b63f5102ff9c7ec6a4bd853414fda7016b6",
        "author": "flabby",
        "date": "2016-04-07T09:02:28-07:00",
        "message": "fix wrong assignment of level0_stop_writes_trigger in spatialdb (#1061)",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ada88b63f5102ff9c7ec6a4bd853414fda7016b6"
    },
    {
        "hash": "ab4c62332e116748e8714fa584b443be8b8f4c64",
        "author": "Igor Canadi",
        "date": "2016-04-06T15:00:15-07:00",
        "message": "Don't use version in the error message\n\nSummary: We use object `v` in the error message, which is not initialized if the edit is column family manipulation. This doesn't provide much useful info, so this diff is removing it. Instead, it dumps actual VersionEdit contents.\n\nTest Plan: compiles. would be great to get tests in version_set_test.cc that cover cases where a file write fails\n\nReviewers: sdong, yhchiang, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D56349",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ab4c62332e116748e8714fa584b443be8b8f4c64"
    },
    {
        "hash": "d02eb8d00b5beddd1a3e23d7def063e347bcd391",
        "author": "Islam AbdelRahman",
        "date": "2016-04-04T11:10:46-07:00",
        "message": "Fix unused variable warning\n\nSummary:\nMy last diff introduced a warning when compiling under release mode\nhttps://reviews.facebook.net/D55539\n\nfix the warning\n\nTest Plan:\nDEBUG_LEVEL=0 make db_bench\nmake check\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D56295",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/write_batch_with_index/write_batch_with_index.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d02eb8d00b5beddd1a3e23d7def063e347bcd391"
    },
    {
        "hash": "63e8f1b55b2490e4c65140d84d8f606b27059e61",
        "author": "Sandeep Joshi",
        "date": "2016-03-31T08:26:55+05:30",
        "message": "Formatted lines to adhere to 80 char limit",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/63e8f1b55b2490e4c65140d84d8f606b27059e61"
    },
    {
        "hash": "24420947d9e144f52a931a98a43e64228de9ac4c",
        "author": "Sandeep Joshi",
        "date": "2016-03-30T23:13:00+05:30",
        "message": "Replace kHeader by WriteBatchInternal::kHeader in few more places\nkHeader was moved from write_batch.cc to header file because\nit is being used wherever the number \"12\" was being used to\ncheck for record size",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/24420947d9e144f52a931a98a43e64228de9ac4c"
    },
    {
        "hash": "e7c64fb115d255a03cf17f8d54b3f088f29464ca",
        "author": "Islam AbdelRahman",
        "date": "2016-03-29T13:20:26-07:00",
        "message": "Imporve sst_file_manager comment\n\nSummary: Improve the comment for sst_file_manager\n\nTest Plan: none\n\nReviewers: yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D56001",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e7c64fb115d255a03cf17f8d54b3f088f29464ca"
    },
    {
        "hash": "ad2fdaa823bff24e71e7b20c3b22c76d2688823c",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-03-24T19:39:13-07:00",
        "message": "Correct a typo in a comment\n\nSummary: Correct a typo in a comment\n\nTest Plan: No code change.\n\nReviewers: sdong, kradhakrishnan, IslamAbdelRahman\n\nReviewed By: kradhakrishnan, IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D55803",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ad2fdaa823bff24e71e7b20c3b22c76d2688823c"
    },
    {
        "hash": "3996770d0bfbb7f7939092752268738ed19603ac",
        "author": "sdong",
        "date": "2016-03-23T14:26:25-07:00",
        "message": "Add comments to perf_context skip counters\n\nSummary: Document the skipped counters in perf context more clearly.\n\nTest Plan: Comment only.\n\nReviewers: IslamAbdelRahman, yhchiang, MarkCallaghan\n\nReviewed By: MarkCallaghan\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D55833",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/perf_context.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3996770d0bfbb7f7939092752268738ed19603ac"
    },
    {
        "hash": "4e85b74790de48895e682869414e43d4a12f409c",
        "author": "Mike Kolupaev",
        "date": "2016-03-23T09:14:56-07:00",
        "message": "Make WritableFileWrapper not screw up preallocation\n\nSummary:\nWithout this diff, this is what happens to compaction output file if it's a subclass of WritableFileWrapper:\n- during compaction, all `PrepareWrite()` calls update `last_preallocated_block_` of the `WritableFileWrapper` itself, not of `target_`, since `PrepareWrite()` is not virtual,\n- `PrepareWrite()` calls `Allocate()`, which is virtual; it does `fallocate()` on `target_`,\n- after writing data, `target_->Close()` calls `GetPreallocationStatus()` of `target_`; it returns `last_preallocated_block_` of `target_`, which is zero because it was never touched before,\n- `target_->Close()` doesn't call `ftruncate()`; file remains big.\n\nThis diff fixes it in a straightforward way, by making the methods virtual. `WritableFileWrapper` ends up having the useless fields `last_preallocated_block_` and `preallocation_block_size_`. I think ideally the preallocation logic should be outside `WritableFile`, the same way as `log_writer.h` and `file_reader_writer.h` moved some non-platform-specific logic out of Env, but that's probably not worth the effort now.\n\nTest Plan: `make -j check`; I'm going to deploy it on our test tier and see if it fixes space reclamation problem there\n\nReviewers: yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba, sdong\n\nDifferential Revision: https://reviews.facebook.net/D54681",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4e85b74790de48895e682869414e43d4a12f409c"
    },
    {
        "hash": "b9d4fa890b3da49380a64eabc2dafd105702434b",
        "author": "sdong",
        "date": "2016-03-22T16:21:53-07:00",
        "message": "Options settable tests to use a different special charactor\n\nSummary: Something changed and the special charactor seems to be conflict with an exisitng value. Change it to unblock the build.\n\nTest Plan: Run the test and make sure it passes\n\nReviewers: kradhakrishnan\n\nReviewed By: kradhakrishnan\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D55845",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b9d4fa890b3da49380a64eabc2dafd105702434b"
    },
    {
        "hash": "fbbb8a6144c7cb93d3a7b950993b36187ce75a5d",
        "author": "agiardullo",
        "date": "2016-03-18T16:16:20-07:00",
        "message": "Add test for Snapshot 0\n\nSummary:\nI ran into this assert when stress testing transactions.  It's pretty easy to repro.\n\nChanging VersionSet::last_sequence_ to start at 1 seems pretty straightforward.  We would just need to change the 4 callers of SetLastSequence(), including recovery code.  I'd make this change myself, but I do not have enough time to test changes to recovery code-paths this week.  But checking in this test case (disabled) for future fixing.\n\nTest Plan: n/a\n\nReviewers: yhchiang, kradhakrishnan, andrewkr, anthony, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D55311",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test2.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fbbb8a6144c7cb93d3a7b950993b36187ce75a5d"
    },
    {
        "hash": "7d371863e59afffbc5b18690fc42f195fa32f609",
        "author": "Praveen Rao",
        "date": "2016-03-18T14:43:22-07:00",
        "message": "travis build fixes",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7d371863e59afffbc5b18690fc42f195fa32f609"
    },
    {
        "hash": "fbea4dc66030c4047dc8ff7bdc92efa7da0f5b09",
        "author": "Karthikeyan Radhakrishnan",
        "date": "2016-03-18T14:27:55-07:00",
        "message": "Merge pull request #1042 from SherlockNoMad/HistFix\n\nFix in HistogramWindowingImpl",
        "modified_files_count": 1,
        "modified_files": [
            "util/histogram_windowing.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fbea4dc66030c4047dc8ff7bdc92efa7da0f5b09"
    },
    {
        "hash": "44756260aeae05847614022ad8382686333adf70",
        "author": "Marton Trencseni",
        "date": "2016-03-18T06:13:54+00:00",
        "message": "Reset block cache in failing unit test.\n\nTest Plan: make -j40 check OPT=-g, on both /tmp and /dev/shm\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D55701",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/44756260aeae05847614022ad8382686333adf70"
    },
    {
        "hash": "4ecc03c039a23f9a52a6b6abdf932a1d7bd915c4",
        "author": "SherlockNoMad",
        "date": "2016-03-17T14:28:41-07:00",
        "message": "Fix in HistogramWindowingImpl",
        "modified_files_count": 1,
        "modified_files": [
            "util/histogram_windowing.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4ecc03c039a23f9a52a6b6abdf932a1d7bd915c4"
    },
    {
        "hash": "9cad56861a7b4ad87998239d43a738f35870e926",
        "author": "Siying Dong",
        "date": "2016-03-16T10:30:01-07:00",
        "message": "Merge pull request #1039 from bureau14/master\n\nImprove documentation of the allow_os_buffer parameter.",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9cad56861a7b4ad87998239d43a738f35870e926"
    },
    {
        "hash": "3d29f914665ade3c5e657006e2506ec27d71327d",
        "author": "Edouard Alligand",
        "date": "2016-03-16T15:37:55+01:00",
        "message": "Improve documentation of the allow_os_buffer parameter.",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3d29f914665ade3c5e657006e2506ec27d71327d"
    },
    {
        "hash": "3ff98bd209cae4b1d6751ee7d1bd02629003f7f3",
        "author": "Islam AbdelRahman",
        "date": "2016-03-15T12:17:40-07:00",
        "message": "Fix no compression test\n\nSummary:\nDBBlockCacheTest.TestWithCompressedBlockCache is depending on compression using snappy, so this test fail when snappy is not available\nblock this test when we don't have snappy\n\nhttps://ci-builds.fb.com/view/rocksdb/job/rocksdb_no_compression/833/console\n\nTest Plan: run the test when compression libraries are not avaliable\n\nReviewers: sdong, yiwu\n\nReviewed By: yiwu\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D55413",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_block_cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3ff98bd209cae4b1d6751ee7d1bd02629003f7f3"
    },
    {
        "hash": "b9cc42a72c69bb0e40ed3aa41e396604930c4ab0",
        "author": "Igor Canadi",
        "date": "2016-03-15T11:43:06-07:00",
        "message": "Merge pull request #1038 from SherlockNoMad/HistFix\n\nFix FB internal CI build failure",
        "modified_files_count": 1,
        "modified_files": [
            "util/histogram.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b9cc42a72c69bb0e40ed3aa41e396604930c4ab0"
    },
    {
        "hash": "f76b260eff1086968fc7813112d9993525cd6dd6",
        "author": "SherlockNoMad",
        "date": "2016-03-15T11:38:15-07:00",
        "message": "Fix FB internal CI build failure",
        "modified_files_count": 1,
        "modified_files": [
            "util/histogram.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f76b260eff1086968fc7813112d9993525cd6dd6"
    },
    {
        "hash": "6b03f93d4fd9e6e3f41dba818483eaeac2acec2e",
        "author": "Gunnar Kudrjavets",
        "date": "2016-03-15T10:30:10-07:00",
        "message": "Fix the build break on Ubuntu 15.10 when gcc 5.2.1 is used\n\nSummary:\nUsing gcc 5.2.1 to compile RocksDB on Ubuntu 15.10 results in a warning about unused variable. Warning is treated as an error and all of it results in a build break. Fix the issue and make sure that everything compiles with that particular configuration.\n\nP.S. Lint complains about a non-ASCII character used in the source code (\"Wagner-Fischer\"). Fix this as well.\n\nTest Plan:\n  # Everything compiler cleanly on the system which exhibited the problem.\n  # `make clean && make -j 16` on CentOS.\n  # `make clean && USE_CLANG=1 make -j 16` on CentOS.\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D55503",
        "modified_files_count": 1,
        "modified_files": [
            "third-party/gtest-1.7.0/fused-src/gtest/gtest.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6b03f93d4fd9e6e3f41dba818483eaeac2acec2e"
    },
    {
        "hash": "58379bfb5579c6359e88bf422e0155351454fe3f",
        "author": "SherlockNoMad",
        "date": "2016-03-14T21:41:13-07:00",
        "message": "remove division from histogramwidowing impl",
        "modified_files_count": 1,
        "modified_files": [
            "util/histogram_windowing.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/58379bfb5579c6359e88bf422e0155351454fe3f"
    },
    {
        "hash": "1a2cc27e013b561c9d3c8b81384d14443822057f",
        "author": "Dhruba Borthakur",
        "date": "2016-03-14T16:21:54-07:00",
        "message": "ColumnFamilyOptions SanitizeOptions is buggy on 32-bit platforms.\n\nSummary:\nThe pre-existing code is trying to clamp between 65,536 and 0,\nresulting in clamping to 65,536, resulting in very small buffers,\nresulting in ShouldFlushNow() being true quite easily,\nresulting in assertion failing and database performance\nbeing \"not what it should be\".\n\nhttps://github.com/facebook/rocksdb/issues/1018\n\nTest Plan: make check\n\nReviewers: sdong, andrewkr, IslamAbdelRahman, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, andrewkr, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D55455",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1a2cc27e013b561c9d3c8b81384d14443822057f"
    },
    {
        "hash": "fd664a27b5174a0b6197ddbbdad28c5f4db7db22",
        "author": "SherlockNoMad",
        "date": "2016-03-11T22:56:25-08:00",
        "message": "Fix Build Error",
        "modified_files_count": 1,
        "modified_files": [
            "util/histogram_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fd664a27b5174a0b6197ddbbdad28c5f4db7db22"
    },
    {
        "hash": "e8e6cf0173849ee323cf6972121a179d085505b1",
        "author": "Baris Yazici",
        "date": "2016-03-11T11:11:45-08:00",
        "message": "fix: handle_fatal_signal (sig=6) in std::vector<std::string, std::allocator<std::string> >::_M_range_check | c++/4.8.2/bits/stl_vector.h:794 #174\n\nSummary:\nFix for https://github.com/facebook/mysql-5.6/issues/174\n\nWhen there is no old files to purge, vector.at(i) function was crashing\n\nif (old_info_log_file_count != 0 &&\n      old_info_log_file_count >= db_options_.keep_log_file_num) {\n    std::sort(old_info_log_files.begin(), old_info_log_files.end());\n    size_t end = old_info_log_file_count - db_options_.keep_log_file_num;\n    for (unsigned int i = 0; i <= end; i++) {\n      std::string& to_delete = old_info_log_files.at(i);\n\nAdded check to old_info_log_file_count be non zero.\n\nTest Plan: run existing tests\n\nReviewers: gunnarku, vasilep, sdong, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: andrewkr, webscalesql-eng, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D55245",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e8e6cf0173849ee323cf6972121a179d085505b1"
    },
    {
        "hash": "765597fa7891f9171ba6965b0971b97d85f6032a",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-03-10T14:34:28-08:00",
        "message": "Update compaction score right after CompactFiles forms a compaction\n\nSummary:\nThis is a follow-up patch of https://reviews.facebook.net/D54891.\nAs the information about files being compacted will also be used\nwhen making compaction decision, it is necessary to update the compaction\nscore when a compaction plan has been made but not yet execute.\n\nThis patch adds a missing call to update the compaction score in\nCompactFiles().\n\nTest Plan: compact_files_test\n\nReviewers: sdong, IslamAbdelRahman, kradhakrishnan, yiwu, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: andrewkr, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D55227",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/765597fa7891f9171ba6965b0971b97d85f6032a"
    },
    {
        "hash": "bf1c4089db50abe1f19bf0d92efff6b0afb430d3",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-03-04T16:03:31-08:00",
        "message": "Use pure if-then check instead of assert in EraseColumnFamilyInfo\n\nSummary:\nUse pure if-then check instead of assert in EraseColumnFamilyInfo\nwhen the specified column family does not found in the cf_info_map_.\nSo the second deletion will be no op instead of crash.\n\nTest Plan: existing test.\n\nReviewers: sdong, anthony, kradhakrishnan, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D55023",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_status_updater.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bf1c4089db50abe1f19bf0d92efff6b0afb430d3"
    },
    {
        "hash": "451678c8c9f4f0cb2637199719468bbde1d941aa",
        "author": "Igor Canadi",
        "date": "2016-03-03T15:24:25-08:00",
        "message": "Merge pull request #1025 from SherlockNoMad/BuildFix\n\nFix Windows build",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/451678c8c9f4f0cb2637199719468bbde1d941aa"
    },
    {
        "hash": "58ecd91326bdc011efe5fd0be11795b6cbca74b4",
        "author": "SherlockNoMad",
        "date": "2016-03-03T15:08:24-08:00",
        "message": "Fix Windows build",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/58ecd91326bdc011efe5fd0be11795b6cbca74b4"
    },
    {
        "hash": "ef204df7efac05ed83961783d94ce429f7aa4aac",
        "author": "sdong",
        "date": "2016-03-02T21:23:28-08:00",
        "message": "Compaction always needs to be removed from level0_compactions_in_progress_ for universal compaction\n\nSummary: We always put compaction to level0_compactions_in_progress_ for universal compaction, so we should also remove it. The bug causes assert failure when running manual compaction.\n\nTest Plan:\nTEST_TMPDIR=/dev/shm/ ./db_bench --benchmarks=fillrandom,compact --subcompactions=16 --compaction_style=1\nalways fails on my host. After the fix, it doesn't fail any more.\n\nReviewers: IslamAbdelRahman, andrewkr, kradhakrishnan, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D55017",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ef204df7efac05ed83961783d94ce429f7aa4aac"
    },
    {
        "hash": "19ea40f8b67514b6eda63b4a0cf5ac100c69d039",
        "author": "sdong",
        "date": "2016-03-02T15:45:07-08:00",
        "message": "Subcompaction boundary keys should not terminate after an empty level\n\nSummary: Now we skip to add boundary keys to subcompaction candidates since we see an empty level. This makes subcompaction almost disabled for universal compaction. We should consider all files instead.\n\nTest Plan: Run existing tests.\n\nReviewers: IslamAbdelRahman, andrewkr, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D55005",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/19ea40f8b67514b6eda63b4a0cf5ac100c69d039"
    },
    {
        "hash": "4572a2d8c08d70705728d42edef522502b410701",
        "author": "sdong",
        "date": "2016-03-01T14:26:44-08:00",
        "message": "Update current version to 4.6\n\nSummary: 4.5 is already cut, we can now increase the version in 4.6.\n\nTest Plan: Not needed.\n\nReviewers: anthony, kradhakrishnan, andrewkr, yhchiang, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D54963",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4572a2d8c08d70705728d42edef522502b410701"
    },
    {
        "hash": "b5b1db167a3437aca27c9ca85da6ade040c46484",
        "author": "sdong",
        "date": "2016-02-29T17:17:51-08:00",
        "message": "Recompute compaction score after scheduling manual compaction\n\nSummary: After we made manual compaction runnable concurrently with automaticallly compaction, we need to run ComputeCompactionScore() to prepare a coming compaction picking call before the compaction finishes.\n\nTest Plan: Run existing tests.\n\nReviewers: yhchiang, IslamAbdelRahman, andrewkr, kradhakrishnan, anthony, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D54891",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b5b1db167a3437aca27c9ca85da6ade040c46484"
    },
    {
        "hash": "8800975fb0f333ff20bb567e94c0a3fda3df9c1d",
        "author": "sdong",
        "date": "2016-02-26T11:59:31-08:00",
        "message": "Make DBTestUniversalCompaction.IncreaseUniversalCompactionNumLevels more robust\n\nSummary:\nBased on thread scheduling, DBTestUniversalCompaction.IncreaseUniversalCompactionNumLevels can fail to flush enough files to trigger expected compactions. Fix it by waiting for flush after inserting each key.\nThere are failrue reported:\n\ndb/db_universal_compaction_test.cc:1134: Failure\nExpected: (NumTableFilesAtLevel(options.num_levels - 1, 1)) > (0), actual: 0 vs 0\n\nbut I can't repro it. Try to fix the bug and see whether it goes away.\n\nTest Plan: Run the test multiple time.\n\nReviewers: IslamAbdelRahman, anthony, andrewkr, kradhakrishnan, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D54747",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_universal_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8800975fb0f333ff20bb567e94c0a3fda3df9c1d"
    },
    {
        "hash": "cd3fe675a97fa2b615686ad53669e436f295e185",
        "author": "agiardullo",
        "date": "2016-02-25T17:44:35-08:00",
        "message": "Remove stale TODO\n\nSummary: This was fixed by 0c2bd5cb\n\nTest Plan: n/a\n\nReviewers: gabijs\n\nReviewed By: gabijs\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D54753",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/transaction_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cd3fe675a97fa2b615686ad53669e436f295e185"
    },
    {
        "hash": "69c98f043185f49ee1d83465b2eafe2afdef7c98",
        "author": "Andrew Kryczka",
        "date": "2016-02-24T10:32:11-08:00",
        "message": "Reorder instance variables in backup test for proper destruction order\n\nSummary:\nAs titled. This fixes the tsan error caused by logger_ being used in\nbackup_engine_'s destructor. It does not fix the transient unit test failure,\nwhich is caused by MANIFEST file changing while backup is happening.\n\nTest Plan:\nverified the tsan error no longer happens on either success or\nfailure.\n\n  $ COMPILE_WITH_TSAN=1 make -j32 backupable_db_test\n  $ while ./backupable_db_test --gtest_filter=BackupableDBTest.CorruptionsTest ; do : ; done\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D54669",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/69c98f043185f49ee1d83465b2eafe2afdef7c98"
    },
    {
        "hash": "82f15fb15d9cce7cc0190aba04533afffdcd5f5d",
        "author": "sdong",
        "date": "2016-02-24T10:25:38-08:00",
        "message": "Add test to make sure DropColumnFamily doesn't impact existing iterators\n\nSummary: Add a test case in ColumnFamilyTest.ReadDroppedColumnFamily to make sure existing iterator is not impacted by column family dropping.\n\nTest Plan: N/A\n\nReviewers: igor, yhchiang, anthony, andrewkr, kradhakrishnan, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D54657",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/82f15fb15d9cce7cc0190aba04533afffdcd5f5d"
    },
    {
        "hash": "4b1b4b8aece0c3597b2ebed18928d12a378c67b0",
        "author": "Igor Canadi",
        "date": "2016-02-19T14:27:18-08:00",
        "message": "Merge pull request #1004 from yuslepukhin/child_attr\n\nImplement ConsistentChildrenAttribute on Windows",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4b1b4b8aece0c3597b2ebed18928d12a378c67b0"
    },
    {
        "hash": "9ea2968d26546e456faed9eb6b62cd9ce58126dc",
        "author": "Dmitri Smirnov",
        "date": "2016-02-19T14:20:34-08:00",
        "message": "Implement ConsistentChildrenAttribute\n  by using default implementation for now as it works.",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9ea2968d26546e456faed9eb6b62cd9ce58126dc"
    },
    {
        "hash": "c7f1a8a468e9de32e0d0abee858f3b6e5f3a2120",
        "author": "sdong",
        "date": "2016-02-19T13:57:18-08:00",
        "message": "Fix LITE build thread_local_test\n\nSummary: Recent change break thread_local_test by introducing exception, which is disabled in LITE build. Fix it by disabling exception handling in LITE build.\n\nTest Plan: Build with both of LITE and non-LITE\n\nReviewers: anthony, IslamAbdelRahman, yhchiang, kradhakrishnan, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D54513",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c7f1a8a468e9de32e0d0abee858f3b6e5f3a2120"
    },
    {
        "hash": "d825fc70d4995527a8daebc64c51515baf2670ad",
        "author": "Andrew Kryczka",
        "date": "2016-02-18T18:03:53-08:00",
        "message": "Use condition variable in log roller test\n\nSummary:\nPreviously I just slept until the flush_thread was \"probably\" ready\nsince proper synchronization in test cases seemed like overkill. But then tsan\ncomplained about it, so I did the synchronization (mostly) properly now.\n\nTest Plan:\n  $ COMPILE_WITH_TSAN=1 make -j32 auto_roll_logger_test\n  $ ./auto_roll_logger_test\n\nReviewers: anthony, IslamAbdelRahman, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D54399",
        "modified_files_count": 1,
        "modified_files": [
            "db/auto_roll_logger_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d825fc70d4995527a8daebc64c51515baf2670ad"
    },
    {
        "hash": "6b2a047dfcc290bbb79659a67e3180c1ace0669d",
        "author": "Islam AbdelRahman",
        "date": "2016-02-18T11:25:19-08:00",
        "message": "Fix SstFileManager uninitialized data member\n\nSummary: I have introduced max_allowed_space_ but did not initialize it\n\nTest Plan: make check\n\nReviewers: sdong, yhchiang, anthony\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D54357",
        "modified_files_count": 1,
        "modified_files": [
            "util/sst_file_manager_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6b2a047dfcc290bbb79659a67e3180c1ace0669d"
    },
    {
        "hash": "a3db93c2618f66411db51198cc6dab49d1f29335",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-02-17T23:32:14-08:00",
        "message": "Remove the SyncPoint usage in the destructor of PosixEnv\n\nSummary:\nRemove the SyncPoint usage in the destructor of PosixEnv as none\nof any active tests is using it.\n\nSyncPoint is a test-only utility class, and it's a static varible.\nAs a result, using SyncPoint in the destructor of PosixEnv will\nmake default Env depends on SyncPoint.  Removing such dependency\ncould solve the problem crash issue only reproducable in Mac\nenvironment.\n\nTest Plan: OPT=-DTRAVIS V=1 make -j4 check on Mac environment\n\nReviewers: sdong, anthony\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D54333",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a3db93c2618f66411db51198cc6dab49d1f29335"
    },
    {
        "hash": "d733dd572856677fab530dc930ab45ac29bf861b",
        "author": "Andrew Kryczka",
        "date": "2016-02-17T11:57:04-08:00",
        "message": "[build] Fix env_win.cc compiler errors\n\nSummary: I broke it in D53781.\n\nTest Plan: tried the same code in util/env_posix.cc and it compiled successfully\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D54303",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d733dd572856677fab530dc930ab45ac29bf861b"
    },
    {
        "hash": "351252b497f9846d27306c5c3dae6ef92422c5d8",
        "author": "Igor Canadi",
        "date": "2016-02-17T09:06:07-08:00",
        "message": "Merge pull request #998 from fengjian0106/master\n\nfix ios build error",
        "modified_files_count": 1,
        "modified_files": [
            "util/perf_context_imp.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/351252b497f9846d27306c5c3dae6ef92422c5d8"
    },
    {
        "hash": "1336052497b982f4ae5c27133da1d51c15a2bbf1",
        "author": "fengjian",
        "date": "2016-02-17T20:22:40+08:00",
        "message": "fix ios build error",
        "modified_files_count": 1,
        "modified_files": [
            "util/perf_context_imp.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1336052497b982f4ae5c27133da1d51c15a2bbf1"
    },
    {
        "hash": "d08d50295cfaae2153c88c4065be1881e5ca0c99",
        "author": "agiardullo",
        "date": "2016-02-16T17:15:05-08:00",
        "message": "Fix transaction locking\n\nSummary: Broke transaction locking in 4.4 in D52197.  Will cherry-pick this change into 4.4 (which hasn't yet been fully released).  Repro'd using db_bench.\n\nTest Plan: unit tests and db_Bench\n\nReviewers: sdong, yhchiang, kradhakrishnan, ngbronson\n\nReviewed By: ngbronson\n\nSubscribers: ngbronson, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D54021",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_db_mutex_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d08d50295cfaae2153c88c4065be1881e5ca0c99"
    },
    {
        "hash": "730a422c3a41df569e0c51cc7b7e0d8938d33ee8",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-02-16T14:55:24-08:00",
        "message": "Improve the documentation of LoadLatestOptions\n\nSummary: Improve the documentation of LoadLatestOptions\n\nTest Plan: No code change\n\nReviewers: anthony, IslamAbdelRahman, kradhakrishnan, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D54087",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/options_util.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/730a422c3a41df569e0c51cc7b7e0d8938d33ee8"
    },
    {
        "hash": "a7b6f0748a1bcdead0168df19901cfc15c9dc881",
        "author": "reid horuff",
        "date": "2016-02-16T14:04:14-08:00",
        "message": "Improve write_with_callback_test to sync WAL\n\nSummary: Currently write_with_callback_test does not test with WAL syncing enabled. This addresses that.\n\nTest Plan: write_with_callback_test\n\nReviewers: anthony\n\nReviewed By: anthony\n\nSubscribers: leveldb, dhruba, hermanlee4\n\nDifferential Revision: https://reviews.facebook.net/D54255",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_callback_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a7b6f0748a1bcdead0168df19901cfc15c9dc881"
    },
    {
        "hash": "871cc5f9874c3a4b9c8f113f0cb9079745a7e840",
        "author": "Jonathan Wiepert",
        "date": "2016-02-16T12:16:47-08:00",
        "message": "fix build without gflags\n\nTest Plan:\nBuilt and ran with gflags:\n% ./db_bench\nLevelDB:    version 4.5\nDate:       Tue Feb 16 12:04:23 2016\nCPU:        40 * Intel(R) Xeon(R) CPU E5-2660 v2 @ 2.20GHz\n...\n\nAnd without gflags:\n% ./db_bench\nPlease install gflags to run rocksdb tools\n%\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: igor, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D54243",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_bench_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/871cc5f9874c3a4b9c8f113f0cb9079745a7e840"
    },
    {
        "hash": "c90d63a23dbf8d2250ad8e8db74cda483d8347cd",
        "author": "Igor Canadi",
        "date": "2016-02-16T11:24:40-08:00",
        "message": "can_unlock set but not used\n\nTest Plan: I couldn't repro, but I hope this fixes it. See the error here: https://evergreen.mongodb.com/task_log_raw/mongodb_mongo_master_ubuntu1404_rocksdb_compile_6e9fd902d5cb25aef992363efa128640affd5196_16_02_11_04_33_37/0?type=T\n\nReviewers: yhchiang, andrewkr, sdong, anthony\n\nReviewed By: anthony\n\nSubscribers: meyering, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D54123",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_base.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c90d63a23dbf8d2250ad8e8db74cda483d8347cd"
    },
    {
        "hash": "44371501f00588530d876d938a46c8c276975912",
        "author": "Mike Kolupaev",
        "date": "2016-02-16T11:11:16-08:00",
        "message": "Fixed a segfault when compaction fails\n\nSummary: We've hit it today.\n\nTest Plan: `make -j check`; didn't reproduce the issue\n\nReviewers: yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D54219",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/44371501f00588530d876d938a46c8c276975912"
    },
    {
        "hash": "2f084d39b9bed9972b7d0bb110aca04033233ab4",
        "author": "Igor Canadi",
        "date": "2016-02-16T10:26:25-08:00",
        "message": "Merge pull request #992 from jofusa/jdennison/options-typo-fix\n\nfixes typo in options logging",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2f084d39b9bed9972b7d0bb110aca04033233ab4"
    },
    {
        "hash": "bd5f842bbad5cf54d8fd38e2f76af52b6be82730",
        "author": "John Dennison",
        "date": "2016-02-15T23:55:29+00:00",
        "message": "fixes typo in options logging",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bd5f842bbad5cf54d8fd38e2f76af52b6be82730"
    },
    {
        "hash": "1c868d684822f760636d66785d3aeae5c55cc57d",
        "author": "Andrew Kryczka",
        "date": "2016-02-12T14:17:14-08:00",
        "message": "Fix includes for env_test\n\nSummary:\nPreviously compilation failed when ROCKSDB_NO_FBCODE=1 because fcntl.h\nwasn't included for open().\n\nRelated issue: https://github.com/facebook/rocksdb/issues/977\n\nTest Plan:\nverified below command works now:\n\n  $ make clean && ROCKSDB_NO_FBCODE=1 ROCKSDB_DISABLE_FALLOCATE=1 make -j32 env_test\n\nReviewers: sdong, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D54135",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1c868d684822f760636d66785d3aeae5c55cc57d"
    },
    {
        "hash": "3dc3d1c144da8a240892583e68880c74be4df0cd",
        "author": "Igor Canadi",
        "date": "2016-02-11T10:22:40-08:00",
        "message": "Merge pull request #984 from petermattis/pmattis/comparator-iterate-upper-bound\n\nUse user_comparator when comparing against iterate_upper_bound.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3dc3d1c144da8a240892583e68880c74be4df0cd"
    },
    {
        "hash": "239aaf2fc0fddadaa4e4130592d9c581f196d98d",
        "author": "Peter Mattis",
        "date": "2016-02-11T08:47:16-05:00",
        "message": "Use user_comparator when comparing against iterate_upper_bound.\n\nFixes #983.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/239aaf2fc0fddadaa4e4130592d9c581f196d98d"
    },
    {
        "hash": "3a67bffaa8c03f7c7fe06e81962eccc347f977cc",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-02-10T12:06:59-08:00",
        "message": "Fix an ASAN error in transaction_test.cc\n\nSummary:\nOne test in transaction_test.cc forgets to call SyncPoint::DisableProcessing().\nAs a result, a program might to access the SyncPoint singleton after it\nalready goes out of scope.\n\nThis patch fix this error by calling SyncPoint::DisableProcessing().\n\nTest Plan: transaction_test\n\nReviewers: sdong, IslamAbdelRahman, kradhakrishnan, anthony\n\nReviewed By: anthony\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D54033",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3a67bffaa8c03f7c7fe06e81962eccc347f977cc"
    },
    {
        "hash": "2a04268be31d98ba16ecfb6e55d27c86ad59924d",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-02-09T16:28:34-08:00",
        "message": "Temporarily disable unstable tests in memory_test.cc\n\nSummary:\nmemory_test.cc has some tests that are not unstable but\nhard to reproduce, and the cause is the test itself not\nthe code.  Temporarily disable the tests until\nwe have a good fix.\n\nTest Plan: memory_test\n\nReviewers: sdong, anthony, IslamAbdelRahman, rven, kradhakrishnan\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D54009",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/memory/memory_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2a04268be31d98ba16ecfb6e55d27c86ad59924d"
    },
    {
        "hash": "a76e9093f06a47251e0ebd8ba2d54019388a554f",
        "author": "sdong",
        "date": "2016-02-05T14:29:09-08:00",
        "message": "Fix LITE db_test build broken by previous commit\n\nSummary: Previous commit introduces a test that is not supported in LITE. Fix it.\n\nTest Plan: Build the test with ROCKSDB_LITE.\n\nReviewers: kradhakrishnan, IslamAbdelRahman, anthony, yhchiang, andrewkr\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D53901",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a76e9093f06a47251e0ebd8ba2d54019388a554f"
    },
    {
        "hash": "5fcd1ba30a2432a0d1241f4f8d52a97b362ec31f",
        "author": "Nathan Bronson",
        "date": "2016-02-02T18:24:47-08:00",
        "message": "disable kConcurrentSkipList multithreaded test\n\nSummary: Disable test that is intermittently failing\n\nTest Plan: unit tests\n\nReviewers: igor, andrewkr, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D53715",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test_util.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5fcd1ba30a2432a0d1241f4f8d52a97b362ec31f"
    },
    {
        "hash": "a62c519bb6129bce4f2300cb07c305ad6c0c945b",
        "author": "Tomas Kolda",
        "date": "2016-02-02T10:33:49+01:00",
        "message": "RollLogFile tries to find non conflicting file until there is no conflict.",
        "modified_files_count": 1,
        "modified_files": [
            "db/auto_roll_logger.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a62c519bb6129bce4f2300cb07c305ad6c0c945b"
    },
    {
        "hash": "52153930d84e977fd2b5f9a467d127c6028fc794",
        "author": "Tomas Kolda",
        "date": "2016-02-02T09:45:18+01:00",
        "message": "Adding support for Windows JNI build - fix Java unit test for release build of JNI DLL",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/write_batch_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/52153930d84e977fd2b5f9a467d127c6028fc794"
    },
    {
        "hash": "1ad8182950f8423134f8c0a92213bced34cbf2df",
        "author": "Islam AbdelRahman",
        "date": "2016-02-01T16:07:53-08:00",
        "message": "Fix WriteBatchTest.ManyUpdates, WriteBatchTest.LargeKeyValue under clang\n\nSummary:\nFix current clang failure\nhttps://ci-builds.fb.com/view/rocksdb/job/rocksdb_clang_build/1398/console\n\nTest Plan:\nmake sure that both clang and g++ compilation succeed\n\nUSE_CLANG=1 make check -j64\nmake check -j64\n\nReviewers: anthony, yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D53667",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1ad8182950f8423134f8c0a92213bced34cbf2df"
    },
    {
        "hash": "1d854fa3d46cc8da984b5f70ec7856917bb52e70",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-02-01T12:45:45-08:00",
        "message": "Fixed the asan error on column_family_test\n\nSummary:\nFixed the asan error on column_family_test caused by not disabling\nSyncPoint.\n\nTest Plan: column_family_test\n\nReviewers: anthony, rven, kradhakrishnan, sdong, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D53505",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1d854fa3d46cc8da984b5f70ec7856917bb52e70"
    },
    {
        "hash": "6ee38bb15c5421f4089e680ba67054cc14540b9d",
        "author": "sdong",
        "date": "2016-01-28T21:52:29-08:00",
        "message": "Slowdown of writing to the last memtable should not override stopping\n\nSummary: Now slowing down for the last mem table takes priority against some stopping conditions. This is logically confusing. Fix it.\n\nTest Plan: Run all existing tests.\n\nReviewers: yhchiang, IslamAbdelRahman, kradhakrishnan, andrewkr, anthony\n\nReviewed By: anthony\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D53529",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6ee38bb15c5421f4089e680ba67054cc14540b9d"
    },
    {
        "hash": "035857a31248b814cd22fde20934d6bb761e339f",
        "author": "Andrew Kryczka",
        "date": "2016-01-26T13:15:36-08:00",
        "message": "Fix RocksDB lite build\n\nSummary:\nNewMemEnv() is defined in rocksdb lite but just returns nullptr --\nwould it be better to just not define it so we can catch issues like this at\ncompile-time?\n\nTest Plan:\n  $ make clean && OPT=\"-DTRAVIS -DROCKSDB_LITE\" V=1 make -j32 db_test\n  $ ./db_test --gtest_filter='DBTest.MemEnvTest'\n  ...\n  [  PASSED  ] 0 tests.\n\nReviewers: yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D53427",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/035857a31248b814cd22fde20934d6bb761e339f"
    },
    {
        "hash": "955ecf8b49ba71666548fefd2d9aeb5f43b8ab9e",
        "author": "Yueh-Hsuan Chiang",
        "date": "2016-01-26T11:30:30-08:00",
        "message": "Fix an ASAN error in compact_files_test\n\nSummary:\ncompact_files_test enables SyncPoint but never disable it before\nthe test terminates.  As a result, it might cause heap-use-after-free\nerror when some code path trying to access the static variable of\nSyncPoint when it has already gone out of scope after the main thread\ndies.\n\nTest Plan:\nCOMPILE_WITH_ASAN=1 make compact_files_test -j32\n./compact_files_test\n\nReviewers: sdong, anthony, kradhakrishnan, rven, andrewkr, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D53379",
        "modified_files_count": 1,
        "modified_files": [
            "db/compact_files_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/955ecf8b49ba71666548fefd2d9aeb5f43b8ab9e"
    },
    {
        "hash": "f1ed1701058a0832076574f6a514df227897213d",
        "author": "sdong",
        "date": "2016-01-22T16:18:44-08:00",
        "message": "Add tests to make sure new DB or ColumnFamily options are settable through string\n\nSummary: Add a test to fail if someone adds a DB options.\n\nTest Plan: Run the test, run the test with valgrind. Add an option to DB option in the middle or in the end and make sure it fails.\n\nReviewers: yhchiang, anthony, IslamAbdelRahman, kradhakrishnan, rven, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D53097",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f1ed1701058a0832076574f6a514df227897213d"
    },
    {
        "hash": "8019aa9b55c90ae2b89889d6260674f4c8fd19ff",
        "author": "agiardullo",
        "date": "2016-01-22T11:47:59-08:00",
        "message": "improve test for manifest write failure\n\nSummary: Improve testing per discussion in D52989\n\nTest Plan: ran test\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D53211",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8019aa9b55c90ae2b89889d6260674f4c8fd19ff"
    },
    {
        "hash": "bb2888738cc6573179c8b3c321ec8cf0dd508b34",
        "author": "Andrew Kryczka",
        "date": "2016-01-21T11:38:15-08:00",
        "message": "Cleanup property-related variable names\n\nSummary:\nI noticed these names were quite confusing while updating GetProperty\ndocumentation.\n\nTest Plan: running \"make commit-prereq -j32\"\n\nReviewers: yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D53073",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bb2888738cc6573179c8b3c321ec8cf0dd508b34"
    },
    {
        "hash": "2c2b72218d1693c55a528893daeb792b0a87c194",
        "author": "sdong",
        "date": "2016-01-21T10:56:34-08:00",
        "message": "Disable OptionsParserTest.BlockBasedTableOptionsAllFieldsSettable under CLANG\n\nSummary: OptionsParserTest.BlockBasedTableOptionsAllFieldsSettable is failiong under CLANG. Disable the test to unblock the build.\n\nTest Plan: Run it both of CLANG and GCC\n\nReviewers: kradhakrishnan, rven, andrewkr, anthony, yhchiang, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D53157",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2c2b72218d1693c55a528893daeb792b0a87c194"
    },
    {
        "hash": "202be23e4618da7a59b222a14e0414a7132c1aa2",
        "author": "sdong",
        "date": "2016-01-20T21:59:28-08:00",
        "message": "Add test that verifies all options in BlockBasedTableOptions is settable through GetBlockBasedTableOptionsFromString()\n\nSummary: Add a test OptionsParserTest.BlockBasedTableOptionsAdded, which will fail if a new option is added to BlockBasedTableOptions but is not settable through GetBlockBasedTableOptionsFromString().\n\nTest Plan: Run the test. Also manually remove and add options and make sure it fails.\n\nReviewers: anthony, IslamAbdelRahman, kradhakrishnan, rven, yhchiang, andrewkr\n\nReviewed By: andrewkr\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52953",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/202be23e4618da7a59b222a14e0414a7132c1aa2"
    },
    {
        "hash": "94918ae84bec80c9aca7b03e14b2d0f2ddb76123",
        "author": "sdong",
        "date": "2016-01-19T18:11:46-08:00",
        "message": "db_bench: explicitly clear buffer in compress benchmark\n\nSummary: It is reported that in compress benchmark in db_bench, zlib will cause an OOM. The suggestd fix was to clear the buffer.\n\nTest Plan: Build and run compress benchmark.\n\nReviewers: IslamAbdelRahman, yhchiang, rven, andrewkr, kradhakrishnan, anthony\n\nReviewed By: anthony\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52857",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/94918ae84bec80c9aca7b03e14b2d0f2ddb76123"
    },
    {
        "hash": "34704d5c7bfb1dbcfeb4986bc8eb42f1f78481a0",
        "author": "Mike Kolupaev",
        "date": "2016-01-19T11:46:52-08:00",
        "message": "[easy] Fixed a crash in LogAndApply() when CF creation failed\n\nSummary: That line used to dereference `column_family_data`, which is nullptr if we're creating a column family.\n\nTest Plan: `make -j check`\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52881",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/34704d5c7bfb1dbcfeb4986bc8eb42f1f78481a0"
    },
    {
        "hash": "aec10f734b52bb4d9dbf06a99663c6aaa35961a6",
        "author": "Gunnar Kudrjavets",
        "date": "2016-01-14T22:47:15-08:00",
        "message": "Guard falloc.h inclusion to avoid build breaks\n\nSummary: Depending on the order of include paths and versions of various headers we may end up in a situation where we'll encounter a build break caused by redefinition of constants. gcc-4.9-glibc-2.20 header update to include/bits/fcntl-linux.h introduced the definitions of FALLOC_FL_* constants. However, linux/falloc.h from kernel-headers also has FALLOC_FL_* constants defined. Therefore during the compilation we'll get \"previously defined\" errors.\n\nTest Plan:\nBoth in the environment where the build break manifests (to make sure that the change fixed the problem) and in the environment where everything builds fine (to make sure that there are no regressions):\n\nmake clean\nmake -j 32\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D52821",
        "modified_files_count": 1,
        "modified_files": [
            "util/posix_logger.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aec10f734b52bb4d9dbf06a99663c6aaa35961a6"
    },
    {
        "hash": "48a8667c3086d4cf91e62909dc11b88e3ea6d24b",
        "author": "Igor Canadi",
        "date": "2016-01-12T11:02:36-08:00",
        "message": "Merge pull request #929 from warrenfalk/fix32\n\nfix a compile error on 32-bit (fixes #634)",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/48a8667c3086d4cf91e62909dc11b88e3ea6d24b"
    },
    {
        "hash": "d9bca1e14c80616f1f1df0f4def2062bf5841677",
        "author": "Islam AbdelRahman",
        "date": "2016-01-11T16:48:15-08:00",
        "message": "Reduce iterator deletion overhead\n\nSummary:\nAfter introducing Iterator::PinData(), we have extra overhead of deleting the pinned iterators that we track in a std::set\nThis patch avoid inserting to the std::set if we have only one iterator (normal use case when no iterators are pinned)\n\nBefore this change\n```\nDEBUG_LEVEL=0 make db_bench -j64 && ./db_bench --benchmarks=\"newiterator\" --db=\"/tmp/rocksdbtest-8616/dbbench\" --use_existing_db --disable_auto_compactions\nnewiterator  :       1.006 micros/op 994013 ops/sec;\nnewiterator  :       0.994 micros/op 1006295 ops/sec;\nnewiterator  :       0.990 micros/op 1010422 ops/sec;\n```\n\nAfter change\n\n```\nDEBUG_LEVEL=0 make db_bench -j64 && ./db_bench --benchmarks=\"newiterator\" --db=\"/tmp/rocksdbtest-8616/dbbench\" --use_existing_db --disable_auto_compactions\nnewiterator  :       0.754 micros/op 1326588 ops/sec;\nnewiterator  :       0.759 micros/op 1317394 ops/sec;\nnewiterator  :       0.691 micros/op 1446704 ops/sec;\n```\n\nTest Plan: make check -j64\n\nReviewers: yhchiang, rven, anthony, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52761",
        "modified_files_count": 1,
        "modified_files": [
            "table/iterator_wrapper.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d9bca1e14c80616f1f1df0f4def2062bf5841677"
    },
    {
        "hash": "45d794068ce9927341e8773faf13e76a2738b8c1",
        "author": "Igor Canadi",
        "date": "2016-01-11T16:16:17-08:00",
        "message": "Merge pull request #940 from yuslepukhin/fix_windows_build_signed_unsigned\n\nFix compile error.",
        "modified_files_count": 1,
        "modified_files": [
            "db/plain_table_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/45d794068ce9927341e8773faf13e76a2738b8c1"
    },
    {
        "hash": "20d7902df927afa50e5c641b6edf2a32d64c8ed7",
        "author": "Dmitri Smirnov",
        "date": "2016-01-11T16:10:48-08:00",
        "message": "Fix compile error.\n  Use constructor style initialization instead of a cast for\n  simplicity.",
        "modified_files_count": 1,
        "modified_files": [
            "db/plain_table_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/20d7902df927afa50e5c641b6edf2a32d64c8ed7"
    },
    {
        "hash": "e16438bb86f42eb58e3a7495ddd28055a58824e0",
        "author": "Alexander Fenster",
        "date": "2016-01-11T11:23:33-08:00",
        "message": "fixing build warning",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e16438bb86f42eb58e3a7495ddd28055a58824e0"
    },
    {
        "hash": "df7e3b6229c8ab1abfc0795e1544e9ea14280e16",
        "author": "sdong",
        "date": "2016-01-08T17:34:53-08:00",
        "message": "Include <array> in table/plain_table_key_coding.h\n\nSummary: <array> is not included in table/plain_table_key_coding.h. It may be the cause of one CLANG build failure.\n\nTest Plan: Build it\n\nReviewers: yhchiang, rven, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52725",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_key_coding.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/df7e3b6229c8ab1abfc0795e1544e9ea14280e16"
    },
    {
        "hash": "94d9df24820df62f70be24c348c6fb8c755457dc",
        "author": "Warren Falk",
        "date": "2016-01-07T13:27:20-05:00",
        "message": "fix an unused function compiler warning in crc32c in 32-bit mode",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/94d9df24820df62f70be24c348c6fb8c755457dc"
    },
    {
        "hash": "2f01e10fa99227d778e83674ed55c9bf051af19f",
        "author": "Warren Falk",
        "date": "2016-01-07T13:22:09-05:00",
        "message": "use static_cast in crc32c instead of c-style cast",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2f01e10fa99227d778e83674ed55c9bf051af19f"
    },
    {
        "hash": "601f1306a1eabea7807c0ad0600f8a12bc3eb717",
        "author": "Warren Falk",
        "date": "2016-01-07T13:12:15-05:00",
        "message": "fix shorten-64-to-32 warning in crc32c",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/601f1306a1eabea7807c0ad0600f8a12bc3eb717"
    },
    {
        "hash": "f3fb39814db5a2e611553d52f65b003ccece0334",
        "author": "Islam AbdelRahman",
        "date": "2016-01-07T09:48:29-08:00",
        "message": "Fix BlockBasedTableTest.NoopTransformSeek failure\n\nSummary:\ntable_test is failing because we are creating a temp InternalComparator\n\n14:27:28 [ RUN      ] BlockBasedTableTest.NoopTransformSeek\n14:27:28 pure virtual method called\n14:27:28 terminate called without an active exception\n14:27:28 /bin/sh: line 7: 2346261 Aborted                 (core dumped) ./$t\n\nTest Plan: make table_test -j64 && ./table_test --gtest_filter=\"BlockBasedTableTest.NoopTransformSeek\"\n\nReviewers: igor, sdong, anthony, rven\n\nReviewed By: rven\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52671",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f3fb39814db5a2e611553d52f65b003ccece0334"
    },
    {
        "hash": "55b37efa158560fc724dbb4ca1cbca61e6a0a491",
        "author": "Warren Falk",
        "date": "2016-01-07T11:51:52-05:00",
        "message": "fix a compile error on 32-bit",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/55b37efa158560fc724dbb4ca1cbca61e6a0a491"
    },
    {
        "hash": "8c71eb5afce8917db9ad78bb4fac136427891b99",
        "author": "Islam AbdelRahman",
        "date": "2016-01-07T07:59:14-08:00",
        "message": "Optimize DBIter::Prev() by reducing stack overhead\n\nSummary:\nIt looks like we are spending significant amount of time creating std::deque<std::string> every time we do Iterator::Prev()\n\n{F921567}\n\nBy using merge_operands_ as a DBIter data member w create it once and reduce this overhead and see ~30% performance improvement when using Iterator::Prev() on hot data\n\nOrignal performance\n\n```\nDEBUG_LEVEL=0 make db_bench -j64 && ./db_bench --benchmarks=\"readreverse\" --db=\"/dev/shm/bench_prev_opt/\" --use_existing_db --disable_auto_compactions\nreadreverse  :       0.713 micros/op 1402219 ops/sec;  155.1 MB/s\nreadreverse  :       0.609 micros/op 1641386 ops/sec;  181.6 MB/s\nreadreverse  :       0.684 micros/op 1461150 ops/sec;  161.6 MB/s\nreadreverse  :       0.629 micros/op 1589842 ops/sec;  175.9 MB/s\nreadreverse  :       0.647 micros/op 1544530 ops/sec;  170.9 MB/s\n```\n\nAfter optimization\n\n```\nDEBUG_LEVEL=0 make db_bench -j64 && ./db_bench --benchmarks=\"readreverse\" --db=\"/dev/shm/bench_prev_opt/\" --use_existing_db --disable_auto_compactions\nreadreverse  :       0.488 micros/op 2051189 ops/sec;  226.9 MB/s\nreadreverse  :       0.505 micros/op 1980892 ops/sec;  219.1 MB/s\nreadreverse  :       0.541 micros/op 1846971 ops/sec;  204.3 MB/s\nreadreverse  :       0.497 micros/op 2013612 ops/sec;  222.8 MB/s\nreadreverse  :       0.480 micros/op 2082665 ops/sec;  230.4 MB/s\n```\n\nTest Plan: make check -j64\n\nReviewers: sdong, anthony, rven, igor, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: jkedgar, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52563",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8c71eb5afce8917db9ad78bb4fac136427891b99"
    },
    {
        "hash": "9760c842cea96dcca0049209b413a7721f179311",
        "author": "agiardullo",
        "date": "2016-01-06T18:04:58-08:00",
        "message": "fix valgrind failure in backupable_db_test\n\nSummary: fix memory leak in test code\n\nTest Plan: ran test\n\nReviewers: rven, igor, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D52617",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9760c842cea96dcca0049209b413a7721f179311"
    },
    {
        "hash": "51adc5457aba009c5308ea4dea65067f09380e3f",
        "author": "agiardullo",
        "date": "2016-01-06T11:51:53-08:00",
        "message": "fix sporadic failure in fault_injection_test\n\nSummary: Need to make sure the background task gets scheduled before it goes out of scope.\n\nTest Plan: ran test.  Will see if sporadic valgrind failures go away.\n\nReviewers: kradhakrishnan\n\nReviewed By: kradhakrishnan\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D52575",
        "modified_files_count": 1,
        "modified_files": [
            "db/fault_injection_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/51adc5457aba009c5308ea4dea65067f09380e3f"
    },
    {
        "hash": "a2422f05339736fbed275656ca491c50932b4a22",
        "author": "agiardullo",
        "date": "2016-01-06T11:51:09-08:00",
        "message": "fix potential test SleepingTask race condition\n\nSummary: Make sure SleepingTask has bene run before it goes out of scope.\n\nTest Plan: run test\n\nReviewers: kradhakrishnan\n\nReviewed By: kradhakrishnan\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D52581",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a2422f05339736fbed275656ca491c50932b4a22"
    },
    {
        "hash": "1627c4b1b385883cd17bc4c555e32faa6c0435da",
        "author": "Igor Canadi",
        "date": "2016-01-05T08:09:58-08:00",
        "message": "Merge pull request #918 from mkurdej/fix/assertion-on-no-disk-space\n\nFix failing assertion in logger on Windows when the disk is full.",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/win_logger.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1627c4b1b385883cd17bc4c555e32faa6c0435da"
    },
    {
        "hash": "92d0850f1cacb1a6dd9d3a8d1005f8a8db41ffce",
        "author": "Marek Kurdej",
        "date": "2016-01-05T13:35:14+01:00",
        "message": "Fix failing assertion in logger on Windows when the disk is full.",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/win_logger.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/92d0850f1cacb1a6dd9d3a8d1005f8a8db41ffce"
    },
    {
        "hash": "ab5a9a66d2f268b8204d1f9151d717c46d804887",
        "author": "Islam AbdelRahman",
        "date": "2015-12-30T10:52:26-08:00",
        "message": "Merge pull request #911 from shuzhang1989/fix_envhdfs_virtual_func\n\nfix vfunc inconsistency between env_hdfs and env",
        "modified_files_count": 1,
        "modified_files": [
            "hdfs/env_hdfs.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ab5a9a66d2f268b8204d1f9151d717c46d804887"
    },
    {
        "hash": "eb5a13904f7ee87d965883769ca5b1cab933e3f4",
        "author": "Shu Zhang",
        "date": "2015-12-30T10:12:44-08:00",
        "message": "update posix env schedule call",
        "modified_files_count": 1,
        "modified_files": [
            "hdfs/env_hdfs.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eb5a13904f7ee87d965883769ca5b1cab933e3f4"
    },
    {
        "hash": "a41f68ac228ecaa92efed26975cffcc034ed58cf",
        "author": "Shu Zhang",
        "date": "2015-12-29T19:51:49-08:00",
        "message": "fix inconsistency between env_hdfs and env",
        "modified_files_count": 1,
        "modified_files": [
            "hdfs/env_hdfs.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a41f68ac228ecaa92efed26975cffcc034ed58cf"
    },
    {
        "hash": "7238be090ed810d4a3a6228b911c942e02bf3743",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-12-29T16:44:12-08:00",
        "message": "Fix clang build in db_compaction_test\n\nSummary:\nFix CLANG build error caused by type mismatch. Changed type to\nsize_t.\n\nTest Plan: Clang build and make check\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52413",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7238be090ed810d4a3a6228b911c942e02bf3743"
    },
    {
        "hash": "c9e2490bc6320ef66fb4a237b65292ce7ab0f99c",
        "author": "sdong",
        "date": "2015-12-29T16:28:45-08:00",
        "message": "Fix DynamicBloomTest.concurrent_with_perf to pass TSAN\n\nSummary: TSAN fails on DynamicBloomTest.concurrent_with_perf. This change fixes it. Not sure why though.\n\nTest Plan: Run the test with TSAN and make sure no warning shown.\n\nReviewers: yhchiang, IslamAbdelRahman, anthony, ngbronson, rven\n\nReviewed By: rven\n\nSubscribers: rven, leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52383",
        "modified_files_count": 1,
        "modified_files": [
            "util/dynamic_bloom_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c9e2490bc6320ef66fb4a237b65292ce7ab0f99c"
    },
    {
        "hash": "edf1cd497f2ed98b4d7cba5c3b4ae77992aa1c55",
        "author": "sdong",
        "date": "2015-12-28T18:37:23-08:00",
        "message": "Not generating \"__attribute__((__unused__))\" for padding fields if it is not CLANG\n\nSummary: Adding \"__attribute__((__unused__))\" after padding fields will pass CLANG build but will fail gcc 4.8.1. Fix it by not generating it under GCC 4.8.1.\n\nTest Plan: Build under four combinations of USE_CLANG=0,1 and ROCKSDB_FBCODE_BUILD_WITH_481=0.1.\n\nReviewers: yhchiang, rven, ngbronson, anthony, IslamAbdelRahman\n\nReviewed By: anthony\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52371",
        "modified_files_count": 1,
        "modified_files": [
            "util/concurrent_arena.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/edf1cd497f2ed98b4d7cba5c3b4ae77992aa1c55"
    },
    {
        "hash": "fcafac053fab462fe4f3cc6aae8a53bebf6656aa",
        "author": "sdong",
        "date": "2015-12-28T12:30:21-08:00",
        "message": "Fix memory leak in ColumnFamilyTest.WriteStall*\n\nSummary: ColumnFamilyTest.WriteStallSingleColumnFamily and ColumnFamilyTest.WriteStallTwoColumnFamilies didn't clean up test state cleanly, causing memory leak. Fix it.\n\nTest Plan: Run the two tests in valgrind and make sure they now pass.\n\nReviewers: yhchiang, anthony, rven, kradhakrishnan, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52347",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fcafac053fab462fe4f3cc6aae8a53bebf6656aa"
    },
    {
        "hash": "b99d4276f2111d1cb3c6d59163cd1ac15b7fd44e",
        "author": "sdong",
        "date": "2015-12-28T11:51:39-08:00",
        "message": "Fix java test buid broken by 7d87f02799bd0a8fd36df24fab5baa4968615c86\n\nSummary: 7d87f02799bd0a8fd36df24fab5baa4968615c86 changed WriteBatch::InsertInto(). Need to change it.\n\nTest Plan: Run it.\n\nReviewers: yhchiang, ngbronson\n\nReviewed By: ngbronson\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52353",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/write_batch_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b99d4276f2111d1cb3c6d59163cd1ac15b7fd44e"
    },
    {
        "hash": "2b7c810db8b1dc21f4bb3392e6e270f41cabd6e0",
        "author": "Shu Zhang",
        "date": "2015-12-26T19:52:35-08:00",
        "message": "more foramt",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_hdfs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2b7c810db8b1dc21f4bb3392e6e270f41cabd6e0"
    },
    {
        "hash": "b79ccbd573742f26979dc7efc95b15cf904a5307",
        "author": "Shu Zhang",
        "date": "2015-12-26T19:50:28-08:00",
        "message": "indent",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_hdfs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b79ccbd573742f26979dc7efc95b15cf904a5307"
    },
    {
        "hash": "5b2587b5cb5c7be1ea690e915437f1790977030c",
        "author": "sdong",
        "date": "2015-12-25T10:25:34-08:00",
        "message": "DBTest.HardLimit use special memtable\n\nSummary: DBTest.HardLimit fails in appveyor build. Use special mem table to make the test behavior depends less on platform\n\nTest Plan: Run the test with JEMALLOC both on and off.\n\nReviewers: yhchiang, kradhakrishnan, rven, anthony, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52317",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5b2587b5cb5c7be1ea690e915437f1790977030c"
    },
    {
        "hash": "b4aa823661dcc701b3e05e464b84f81d6c827531",
        "author": "Shu Zhang",
        "date": "2015-12-24T20:38:35-08:00",
        "message": "format",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_hdfs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b4aa823661dcc701b3e05e464b84f81d6c827531"
    },
    {
        "hash": "4dfdd1d92876ffa6b8432812bbd952f04dd9752d",
        "author": "Shu Zhang",
        "date": "2015-12-24T20:32:29-08:00",
        "message": "format",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_hdfs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4dfdd1d92876ffa6b8432812bbd952f04dd9752d"
    },
    {
        "hash": "4c5560d70a258f8cdfdcc0f4e188889494fe5a53",
        "author": "Siying Dong",
        "date": "2015-12-23T22:45:03-08:00",
        "message": "Merge pull request #895 from zhipeng-jia/develop\n\nFix computation of size of last sub-compaction",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4c5560d70a258f8cdfdcc0f4e188889494fe5a53"
    },
    {
        "hash": "d43da8ae0dd7feb2404264fb1572cfefb4c48479",
        "author": "sdong",
        "date": "2015-12-23T22:38:12-08:00",
        "message": "DBTest.DelayedWriteRate: fix assert of sign and unsign comparison\n\nSummary: DBTest.DelayedWriteRate has sign and unsign comparisons that break Windows build. Fix it.\n\nTest Plan: Build and run the test modified.\n\nReviewers: IslamAbdelRahman, rven, anthony, yhchiang, kradhakrishnan\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52311",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d43da8ae0dd7feb2404264fb1572cfefb4c48479"
    },
    {
        "hash": "3280ae9a296762a516c3d7e808cbd0c254279dd1",
        "author": "sdong",
        "date": "2015-12-23T22:38:12-08:00",
        "message": "Fix warning in release\n\nSummary: Warning in release build.\n\nTest Plan: Make release and make all\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52305",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/env_mirror.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3280ae9a296762a516c3d7e808cbd0c254279dd1"
    },
    {
        "hash": "ec2664fefd231e9ad297a8d2da8c5a529aa8cee6",
        "author": "Zhipeng Jia",
        "date": "2015-12-24T12:41:40+08:00",
        "message": "Fix clang compile error under Linux",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_sanity_check.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ec2664fefd231e9ad297a8d2da8c5a529aa8cee6"
    },
    {
        "hash": "445d5b8c5cc51f21617a732604c57f4f1a11964d",
        "author": "Andrew Kryczka",
        "date": "2015-12-23T10:49:42-08:00",
        "message": "Fix clang build\n\nSummary:\nMissed this in https://reviews.facebook.net/D51633 because I didn't\nwait for 'make commit-prereq' to finish\n\nTest Plan: make clean && USE_CLANG=1 make -j32 all\n\nReviewers: IslamAbdelRahman, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D52275",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/445d5b8c5cc51f21617a732604c57f4f1a11964d"
    },
    {
        "hash": "06c05495e81dbdc07a55bd21356ccde115ae487d",
        "author": "Siying Dong",
        "date": "2015-12-23T09:43:25-08:00",
        "message": "Merge pull request #898 from zhipeng-jia/fix_move_warning\n\nFix clang warning",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/06c05495e81dbdc07a55bd21356ccde115ae487d"
    },
    {
        "hash": "aa515823bc81a645245fcd494ce0b604279155f9",
        "author": "Zhipeng Jia",
        "date": "2015-12-23T19:23:58+08:00",
        "message": "Fix clang warning",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aa515823bc81a645245fcd494ce0b604279155f9"
    },
    {
        "hash": "2ba03196d8fb5015ff29df86d1298b7d0bf8c9b6",
        "author": "Siying Dong",
        "date": "2015-12-22T18:00:04-08:00",
        "message": "Merge pull request #897 from yuslepukhin/enable_status_move\n\nMake Status moveable",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/status.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2ba03196d8fb5015ff29df86d1298b7d0bf8c9b6"
    },
    {
        "hash": "dbb8260f7e50659166415fb188bb288955723280",
        "author": "Dmitri Smirnov",
        "date": "2015-12-22T16:06:20-08:00",
        "message": "Make Status moveable\n  Status is a class which is frequently returned by value from functions.\n  Making it movable avoids 99% of the copies automatically\n  on return by value.",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/status.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dbb8260f7e50659166415fb188bb288955723280"
    },
    {
        "hash": "2bf9b968ca89a22108622b68a5308373788bcbb4",
        "author": "Islam AbdelRahman",
        "date": "2015-12-22T11:58:13-08:00",
        "message": "Fix lite_build\n\nSummary: Fix compiling under ROCKSDB_LITE\n\nTest Plan:\nOPT=\"-DROCKSDB_LITE\" make -j64 check\nmake check -j64\n\nReviewers: rven, yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52239",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/listener.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2bf9b968ca89a22108622b68a5308373788bcbb4"
    },
    {
        "hash": "728f944f0d48cc2476cae799d39c2de7fe738d5a",
        "author": "Zhipeng Jia",
        "date": "2015-12-22T18:37:51+08:00",
        "message": "Fix computation of size of last sub-compaction",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/728f944f0d48cc2476cae799d39c2de7fe738d5a"
    },
    {
        "hash": "e53e8219adc55e20a48bd1cd50ef0184677af363",
        "author": "Igor Canadi",
        "date": "2015-12-22T09:26:56+01:00",
        "message": "Merge pull request #894 from zhipeng-jia/develop\n\nSorting std::vector instead of using std::set",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e53e8219adc55e20a48bd1cd50ef0184677af363"
    },
    {
        "hash": "e0abec15805939de64d87bafab70ee147b5b97a5",
        "author": "Zhipeng Jia",
        "date": "2015-12-22T14:34:57+08:00",
        "message": "Sorting std::vector instead of using std::set",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e0abec15805939de64d87bafab70ee147b5b97a5"
    },
    {
        "hash": "22c6b50ee88d81f84d6e04d3154f41e56b3f2d30",
        "author": "Siying Dong",
        "date": "2015-12-21T10:01:22-08:00",
        "message": "Merge pull request #893 from zhipeng-jia/develop\n\nFix clang warning regarding implicit conversion",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/22c6b50ee88d81f84d6e04d3154f41e56b3f2d30"
    },
    {
        "hash": "24c7dae130ff930042c6d94aab7ce98af63e04ed",
        "author": "Zhipeng Jia",
        "date": "2015-12-21T23:57:55+08:00",
        "message": "Fix clang warning regarding implicit conversion",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/24c7dae130ff930042c6d94aab7ce98af63e04ed"
    },
    {
        "hash": "521da3abb33565c3c364a143290d8b4ab38b38e6",
        "author": "Islam AbdelRahman",
        "date": "2015-12-18T11:17:21-08:00",
        "message": "Fix BlockBasedTableTest.BlockCacheLeak valgrind failure\n\nSummary:\nI added this line in my previous patch D48999 (which is incorrect)\nWe should not release the iterator since releasing it will evict the blocks from cache\n\nTest Plan:\nRun the test under valgrind\nmake check\n\nReviewers: rven, yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52161",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/521da3abb33565c3c364a143290d8b4ab38b38e6"
    },
    {
        "hash": "a48382399d7682f7e1d10dd5b3f9c91f7c526f7a",
        "author": "Nathan Bronson",
        "date": "2015-12-18T06:42:57-08:00",
        "message": "Fix use-after free in db_bench\n\nTest Plan: valgrind db_bench\n\nReviewers: igor, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52101",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a48382399d7682f7e1d10dd5b3f9c91f7c526f7a"
    },
    {
        "hash": "bf8ffc1d6093c901fc8b034157b6dce8bea4d6f5",
        "author": "Igor Canadi",
        "date": "2015-12-18T10:08:45+01:00",
        "message": "Merge pull request #890 from zhipeng-jia/develop\n\nfix typo: sr to picking_sr",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bf8ffc1d6093c901fc8b034157b6dce8bea4d6f5"
    },
    {
        "hash": "131f7ddf63fed5327ad6f8d14aa3889f887c511d",
        "author": "Zhipeng Jia",
        "date": "2015-12-18T17:02:36+08:00",
        "message": "fix typo: sr to picking_sr",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/131f7ddf63fed5327ad6f8d14aa3889f887c511d"
    },
    {
        "hash": "c37729a6a6f1241282ab75d338ca5652f019975b",
        "author": "sdong",
        "date": "2015-12-17T18:28:56-08:00",
        "message": "db_bench: --soft_pending_compaction_bytes_limit should set options.soft_pending_compaction_bytes_limit\n\nSummary: Fix a bug that options.soft_pending_compaction_bytes_limit is not actually set with --soft_pending_compaction_bytes_limit\n\nTest Plan: Run db_bench with this parameter and make sure the parameter is set correctly.\n\nReviewers: anthony, kradhakrishnan, yhchiang, IslamAbdelRahman, igor, rven\n\nReviewed By: rven\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52125",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c37729a6a6f1241282ab75d338ca5652f019975b"
    },
    {
        "hash": "6b2a3ac92c26c86b0f4e7ec3032bd9b12349ea96",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-12-17T10:41:39-08:00",
        "message": "Add documentation for unschedFunction\n\nSummary:\nDocumenting the unschedFunction parameter to Schedule as\nrequested by Michael Kolupaev.\n\nTest Plan: build, unit test\n\nReviewers: sdong, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: kolmike, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52089",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6b2a3ac92c26c86b0f4e7ec3032bd9b12349ea96"
    },
    {
        "hash": "167fb919a55e8dc5d12d4debe7965208029e3505",
        "author": "sdong",
        "date": "2015-12-16T16:58:04-08:00",
        "message": "ZSTD to use CompressionOptions.level\n\nSummary: Now ZSTD hard code level 1. Change it to use the compression level setting.\n\nTest Plan: Run it with hacked codes of sst_dump and show ZSTD compression sizes with different levels.\n\nReviewers: rven, anthony, yhchiang, kradhakrishnan, igor, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: yoshinorim, leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52041",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/167fb919a55e8dc5d12d4debe7965208029e3505"
    },
    {
        "hash": "32ff05e97128c9c36fc4a0f9bbe04ba712dea127",
        "author": "Islam AbdelRahman",
        "date": "2015-12-16T14:32:58-08:00",
        "message": "Bump version to 4.4\n\nSummary: Bump version to 4.4\n\nTest Plan: none\n\nReviewers: sdong, rven, yhchiang, anthony, kradhakrishnan\n\nReviewed By: kradhakrishnan\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D52035",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/32ff05e97128c9c36fc4a0f9bbe04ba712dea127"
    },
    {
        "hash": "b68dc0f83e725b00e65b4c397070b67a3560390f",
        "author": "Islam AbdelRahman",
        "date": "2015-12-15T14:00:09-08:00",
        "message": "Merge pull request #885 from yuslepukhin/fix_size_t_formatting\n\nUse port size_t formatting",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b68dc0f83e725b00e65b4c397070b67a3560390f"
    },
    {
        "hash": "b6d19adcf761a8e2ec56bb55c4a4512a03a405fc",
        "author": "Dmitri Smirnov",
        "date": "2015-12-15T11:34:22-08:00",
        "message": "Use port size_t formatting",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b6d19adcf761a8e2ec56bb55c4a4512a03a405fc"
    },
    {
        "hash": "963660eb55af96aeaf6bcea89271dd6f326ff0bb",
        "author": "Igor Canadi",
        "date": "2015-12-15T18:12:19+01:00",
        "message": "Merge pull request #883 from zhipeng-jia/master\n\nFix typo",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/963660eb55af96aeaf6bcea89271dd6f326ff0bb"
    },
    {
        "hash": "99ae549d370e28071cf925ac097202b87ee8edaa",
        "author": "Zhipeng Jia",
        "date": "2015-12-15T23:47:47+08:00",
        "message": "Fix typo",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/99ae549d370e28071cf925ac097202b87ee8edaa"
    },
    {
        "hash": "d26a4ea621f36912c0a4d9bace7834512cb6fc05",
        "author": "Islam AbdelRahman",
        "date": "2015-12-11T21:27:10-08:00",
        "message": "Merge pull request #882 from SherlockNoMad/BuildFix\n\nFix appVeyor Build problem",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/delete_scheduler.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d26a4ea621f36912c0a4d9bace7834512cb6fc05"
    },
    {
        "hash": "768a61486c1563d45868bc60dd8687794604b3f3",
        "author": "SherlockNoMad",
        "date": "2015-12-11T21:10:49-08:00",
        "message": "Fix appVeyor Build problem",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/delete_scheduler.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/768a61486c1563d45868bc60dd8687794604b3f3"
    },
    {
        "hash": "a3ba5915c8ff560a6d014563b0ae564bc308c36c",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-12-10T16:39:10-08:00",
        "message": "Correct a comment in include/rocksdb/cache.h\n\nSummary: Correct a comment in include/rocksdb/cache.h\n\nTest Plan: No code change.\n\nReviewers: igor, sdong, IslamAbdelRahman, rven, kradhakrishnan, anthony\n\nReviewed By: anthony\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D51831",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/cache.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a3ba5915c8ff560a6d014563b0ae564bc308c36c"
    },
    {
        "hash": "f0a8e5a2d85a2dc801111ce49d98a9ece614dc41",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-12-10T11:53:53-08:00",
        "message": "Fixed the valgrind error in ColumnFamilyTest::CreateAndDropRace\n\nSummary: Fixed the valgrind error in ColumnFamilyTest::CreateAndDropRace\n\nTest Plan: valgrind --error-exitcode=2 --leak-check=full ./column_family_test\n\nReviewers: kradhakrishnan, rven, anthony, IslamAbdelRahman, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D51795",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f0a8e5a2d85a2dc801111ce49d98a9ece614dc41"
    },
    {
        "hash": "de6958b2e28770fe2f4fda4b6fefb145b858ca63",
        "author": "Igor Canadi",
        "date": "2015-12-09T15:14:27-08:00",
        "message": "Merge pull request #877 from yuslepukhin/fix_unnecessary_type_truncation\n\nPrefer integer arithmetics",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/de6958b2e28770fe2f4fda4b6fefb145b858ca63"
    },
    {
        "hash": "49957f9a9888790bf665426b3d9b3787fef64f51",
        "author": "yuslepukhin",
        "date": "2015-12-09T14:06:23-08:00",
        "message": "Prefer integer arithmetics\n  The code had conversion to double then casting to size_t\n  and then casting uint32_t which caused compiler warning (VS15).",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/49957f9a9888790bf665426b3d9b3787fef64f51"
    },
    {
        "hash": "ac8e56f050d11bc83db896ba937bc10a86106ff6",
        "author": "sdong",
        "date": "2015-12-08T18:11:58-08:00",
        "message": "db_bench: in uncompress benchmark, get Snappy size from compressed stream\n\nSummary: Now in benchmark \"uncompress\" in db_bench, we get size from compressed stream for all other compression types except Snappy, where we allocate memory based on parameter. Change it to match to behavior of other compression types.\n\nTest Plan: Run ./db_bench --benchmarks=uncompress with snappy and other compression types.\n\nReviewers: yhchiang, kradhakrishnan, anthony, IslamAbdelRahman, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D51681",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ac8e56f050d11bc83db896ba937bc10a86106ff6"
    },
    {
        "hash": "ad6aaf4fabcd1cd1d70cf285a62359144adcc5a7",
        "author": "Siying Dong",
        "date": "2015-12-08T17:58:40-08:00",
        "message": "Merge pull request #848 from SherlockNoMad/db_bench\n\nSplit histogram per OperationType in db_bench",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ad6aaf4fabcd1cd1d70cf285a62359144adcc5a7"
    },
    {
        "hash": "56bbecc316ad1fa13d79da8375795757838026a3",
        "author": "Siying Dong",
        "date": "2015-12-08T17:58:29-08:00",
        "message": "Merge pull request #867 from SherlockNoMad/CacheFix\n\nReplace malloc with new for LRU Cache Handle",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/56bbecc316ad1fa13d79da8375795757838026a3"
    },
    {
        "hash": "3d8bb2c8902354339c5b41a2eb14d4a8b9d19ce2",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-12-08T11:45:29-08:00",
        "message": "Fix valgrind failure in IncreaseUniversalCompactionNumLevels\n\nSummary:\nFixing a valgrind failure in DBTestUniversalCompaction\nin the IncreaseUniversalCompactionNumLevels test. Using\nSpecialSkipList with 10 rows per file.\n\nTest Plan: Run valgrind and functional tests.\n\nReviewers: anthony, yhchiang, kradhakrishnan, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D51705",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_universal_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3d8bb2c8902354339c5b41a2eb14d4a8b9d19ce2"
    },
    {
        "hash": "ebc2d490d11cb56ee93ba052f9ac678d8bbc1e0e",
        "author": "SherlockNoMad",
        "date": "2015-12-07T17:33:18-08:00",
        "message": "Split histogram per OperationType in db_bench",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ebc2d490d11cb56ee93ba052f9ac678d8bbc1e0e"
    },
    {
        "hash": "f276c3a821779300a9ecb6f591cba16adb4d772b",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-12-07T11:57:00-08:00",
        "message": "Fix valgrind failures in 3 tests in db_compaction_test due to new skiplist changes\n\nSummary:\nSeveral tests in db_compaction_test are failing with aborts in\nvalgrind. These are LevelCompactionThirdPath, LevelCompactionPathUse and\nCompressLevelCompaction. We now use the SpecialSkipListFactory to make\nthem more deterministic\n\nTest Plan: valgrind\n\nReviewers: anthony, yhchiang, kradhakrishnan, IslamAbdelRahman, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D51663",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f276c3a821779300a9ecb6f591cba16adb4d772b"
    },
    {
        "hash": "291088ae4e583ccdf4de0881a8762bb5412f7d27",
        "author": "sdong",
        "date": "2015-12-07T10:53:29-08:00",
        "message": "Fix undeterministic failure of ColumnFamilyTest.DifferentWriteBufferSizes\n\nSummary: After the skip list optimization, ColumnFamilyTest.DifferentWriteBufferSizes can occasionally fail with flush triggering of column family 3. Insert more data to it to make sure flush will trigger.\n\nTest Plan: Run it multiple times with both of jemaloc on and off and see it always passes. (Without thd commit the run with jemalloc fails with chance of about one in two)\n\nReviewers: rven, yhchiang, IslamAbdelRahman, anthony, kradhakrishnan, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D51645",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/291088ae4e583ccdf4de0881a8762bb5412f7d27"
    },
    {
        "hash": "3c2b995fba815e4ff18685e26809751dcb389171",
        "author": "SherlockNoMad",
        "date": "2015-12-07T10:52:53-08:00",
        "message": "Merge branch 'master' of https://github.com/facebook/rocksdb into CacheFix",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3c2b995fba815e4ff18685e26809751dcb389171"
    },
    {
        "hash": "3a98a7ae7fb16f1c1d85ca6da4ca8b27e4866398",
        "author": "SherlockNoMad",
        "date": "2015-12-04T15:12:07-08:00",
        "message": "Replace malloc with new for LRU Cache Handle",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3a98a7ae7fb16f1c1d85ca6da4ca8b27e4866398"
    },
    {
        "hash": "a9ca9107b9bccbb5052734d544efbb5ce2b9d1dd",
        "author": "Islam AbdelRahman",
        "date": "2015-12-04T13:27:56-08:00",
        "message": "Fix db_universal_compaction_test\n\nSummary:\ndb_universal_compaction_test is still failing because of\nUniversalCompactionNumLevels/DBTestUniversalCompaction.UniversalCompactionSecondPathRatio/0\n\nhttps://travis-ci.org/facebook/rocksdb/jobs/94949919\n\nUse same approach to fix other tests to fix this test\n\nTest Plan: Run ./db_universal_compaction_test on mac and make sure all the tests pass\n\nReviewers: kradhakrishnan, yhchiang, rven, anthony, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D51591",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_universal_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a9ca9107b9bccbb5052734d544efbb5ce2b9d1dd"
    },
    {
        "hash": "19b1201b2b3e5b77cff344a525c4eedae6532e67",
        "author": "Islam AbdelRahman",
        "date": "2015-12-03T17:32:20-08:00",
        "message": "Merge pull request #865 from yuslepukhin/fix_db_table_properties_test\n\nAvoid empty ranges vector with subsequent zero element access",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_table_properties_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/19b1201b2b3e5b77cff344a525c4eedae6532e67"
    },
    {
        "hash": "e0de7ef87b85891a31ffcaf90104b5db9393be18",
        "author": "yuslepukhin",
        "date": "2015-12-02T14:50:33-08:00",
        "message": "Avoid empty ranges vector with subsequent zero element access",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_table_properties_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e0de7ef87b85891a31ffcaf90104b5db9393be18"
    },
    {
        "hash": "a330f0b3bb92ba33389e577c0a8ae160c879c2e6",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-12-02T14:09:09-08:00",
        "message": "Fix incorrect merge in db/db_compaction_test.cc\n\nSummary: Fix incorrect merge in db/db_compaction_test.cc\n\nTest Plan: db_compaction_test\n\nReviewers: igor, sdong, anthony, IslamAbdelRahman, rven, kradhakrishnan\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D51531",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a330f0b3bb92ba33389e577c0a8ae160c879c2e6"
    },
    {
        "hash": "bd7a49d4486d59267b59854b30cafc61a2ef4697",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-12-02T14:06:33-08:00",
        "message": "Make DBCompactionTestWithParam::CompactionTrigger more deterministic\n\nSummary: Make DBCompactionTestWithParam::CompactionTrigger more deterministic\n\nTest Plan: ./db_compaction_test\n\nReviewers: anthony, IslamAbdelRahman, rven, kradhakrishnan, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D51507",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bd7a49d4486d59267b59854b30cafc61a2ef4697"
    },
    {
        "hash": "be006d28874e6d97951e762c26e7c025420f728e",
        "author": "Zhang Yangyang",
        "date": "2015-12-02T21:46:48+08:00",
        "message": "fix LinkFile() undefined reference error",
        "modified_files_count": 1,
        "modified_files": [
            "hdfs/env_hdfs.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/be006d28874e6d97951e762c26e7c025420f728e"
    },
    {
        "hash": "4687ced5db183eb0634bf07a9dc953ec8a1526a9",
        "author": "Zhang Yangyang",
        "date": "2015-12-02T21:45:28+08:00",
        "message": "fix ToString() not declared error",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_hdfs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4687ced5db183eb0634bf07a9dc953ec8a1526a9"
    },
    {
        "hash": "bcd7bd12293ac7e2cfaabe458b79ddfead84631a",
        "author": "sdong",
        "date": "2015-12-01T21:12:24-08:00",
        "message": "Relax verification condition of DBTest.SuggestCompactRangeTest\n\nSummary: Verifiction condition of DBTest.SuggestCompactRangeTest is too strict. Based on key distribution, we might have more small files in last level. Not check number of files in the last level.\n\nTest Plan: Run DBTest.SuggestCompactRangeTest with both of jemalloc on and off.\n\nReviewers: rven, IslamAbdelRahman, yhchiang, kradhakrishnan, igor, anthony\n\nReviewed By: anthony\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D51501",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bcd7bd12293ac7e2cfaabe458b79ddfead84631a"
    },
    {
        "hash": "0ad68518bb2e04707c06b6c87535b21ae44b6ced",
        "author": "sdong",
        "date": "2015-12-01T12:25:22-08:00",
        "message": "Fix DBCompactionTestWithParam.CompactionTrigger in non-jemalloc build.\n\nSummary: DBCompactionTestWithParam.CompactionTrigger fails in non-jemalloc build, after the skip list memtable change. Fix it by making mem table flush trigger by number of entries.\n\nTest Plan: Run the test using both of jemalloc and non-jemalloc build.\n\nReviewers: anthony, IslamAbdelRahman, rven, kradhakrishnan, igor, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D51471",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ad68518bb2e04707c06b6c87535b21ae44b6ced"
    },
    {
        "hash": "459c7fba36fbcbfe848947bf3e3e903895b2233c",
        "author": "sdong",
        "date": "2015-11-30T21:55:05-08:00",
        "message": "Revert previous behavior of internal_key_skipped_count\n\nSummary: With recent commit 33e0c93826fd45640b24324a642ca03d8b9ef123, db iterator skips perf context counter internal_key_skipped_count when blindly issuing internal Next(). Now increment the counter by one when issuing this Next()\n\nTest Plan: Run all existing tests\n\nReviewers: rven, yhchiang, IslamAbdelRahman, kradhakrishnan, igor, anthony\n\nReviewed By: anthony\n\nSubscribers: yoshinorim, leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D51465",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/459c7fba36fbcbfe848947bf3e3e903895b2233c"
    },
    {
        "hash": "481f9edb15749595baa87f6fea9632e009aeb3ad",
        "author": "agiardullo",
        "date": "2015-11-30T20:02:13-08:00",
        "message": "Fix CLANG build\n\nSummary: fix clang build\n\nTest Plan: build\n\nReviewers: IslamAbdelRahman, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D51453",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test_util.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/481f9edb15749595baa87f6fea9632e009aeb3ad"
    },
    {
        "hash": "4a009f91729a7ed5c29a0b15bed06ef8f9050cd8",
        "author": "Siying Dong",
        "date": "2015-11-30T11:18:09-08:00",
        "message": "Merge pull request #860 from SherlockNoMad/BuildFix\n\nFix ms version Appveyor build error",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4a009f91729a7ed5c29a0b15bed06ef8f9050cd8"
    },
    {
        "hash": "b4efaebff0b08ef2f986b35f49ecf80946396562",
        "author": "SherlockNoMad",
        "date": "2015-11-30T11:07:47-08:00",
        "message": "Fix ms version Appveyor build error",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b4efaebff0b08ef2f986b35f49ecf80946396562"
    },
    {
        "hash": "d27ea4c9e535626de68f9847b6298db79f8f49ee",
        "author": "sdong",
        "date": "2015-11-30T10:30:35-08:00",
        "message": "Initialize options.row_cache\n\nSummary: options.row_cache should already been initialized as null by default. Still try to set it following current convention, because one valgrind failure reports a failure related to it.\n\nTest Plan: Run all unit tests\n\nReviewers: yhchiang, kradhakrishnan, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D51303",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d27ea4c9e535626de68f9847b6298db79f8f49ee"
    },
    {
        "hash": "72930485b5ed2885f7916570a7579d9ef47dc51c",
        "author": "Islam AbdelRahman",
        "date": "2015-11-30T10:03:07-08:00",
        "message": "Fix clang build\n\nSummary: Fix clang\n\nTest Plan: make check\n\nReviewers: sdong, yhchiang, rven\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D51417",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/72930485b5ed2885f7916570a7579d9ef47dc51c"
    },
    {
        "hash": "f3ea00bc85e0bdbd422289486cd6ac91d9edc5e5",
        "author": "Igor Canadi",
        "date": "2015-11-25T11:38:09-08:00",
        "message": "Merge pull request #856 from ceph/wip-env\n\nEnvWrapper: add ReuseWritableFile",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f3ea00bc85e0bdbd422289486cd6ac91d9edc5e5"
    },
    {
        "hash": "4cedd6b0380f43b4978f34d667571daf4f1b7a24",
        "author": "Sage Weil",
        "date": "2015-11-25T14:30:05-05:00",
        "message": "EnvWrapper: add ReuseWritableFile\n\nThis was missed when ReuseWritableFile was added to Env in\n1bcafb62f4aa7c0b2b3786a958220411347f27b8.\n\nSigned-off-by: Sage Weil <sage@redhat.com>",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4cedd6b0380f43b4978f34d667571daf4f1b7a24"
    },
    {
        "hash": "c5b467306d34b87eded191330fdd5eea0d74de96",
        "author": "agiardullo",
        "date": "2015-11-20T18:26:48-08:00",
        "message": "Fix race condition that causes valgrind failures\n\nSummary: DBTest.DynamicLevelCompressionPerLevel2 sometimes fails during valgrind runs.  This causes our valgrind tests to fail.  Not sure what the best fix is for this test, but hopefully this simple change is sufficient.\n\nTest Plan: run test\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D51111",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c5b467306d34b87eded191330fdd5eea0d74de96"
    },
    {
        "hash": "51fce92e113587c4cbea686f93c84173bdb8707a",
        "author": "sdong",
        "date": "2015-11-17T18:07:11-08:00",
        "message": "\"ldb compact\" should force bottommost level compaction\n\nSummary: Now \"ldb compact\" skips the bottommost level compaction. This is an unintended behavior change. Reverting it now. Maybe we need to add another mode later for it.\n\nTest Plan: Run a manual test of 'ldb' to make sure bottom most level is compacted.\n\nReviewers: IslamAbdelRahman, yhchiang, anthony, kradhakrishnan, rven\n\nReviewed By: rven\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D50925",
        "modified_files_count": 1,
        "modified_files": [
            "tools/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/51fce92e113587c4cbea686f93c84173bdb8707a"
    },
    {
        "hash": "189b3e03df479c0da976785954e180b4cf634a26",
        "author": "sdong",
        "date": "2015-11-17T16:22:17-08:00",
        "message": "Fix uninitilizeded SpecialEnv::time_elapse_only_sleep_\n\nSummary: SpecialEnv::time_elapse_only_sleep_ is not initialized, which might cause some test failures. Fix it.\n\nTest Plan: Run some unit tests. Since tests already broken. Might want to commit it sooner.\n\nReviewers: IslamAbdelRahman, yhchiang, anthony\n\nReviewed By: anthony\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D50937",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test_util.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/189b3e03df479c0da976785954e180b4cf634a26"
    },
    {
        "hash": "605a24d94e4db8a9fdb90cfc258d8cf4ac4a5683",
        "author": "Islam AbdelRahman",
        "date": "2015-11-17T11:51:37-08:00",
        "message": "Block forward_iterator_bench under MAC and Windows\n\nSummary:\nTravis is now failing because we cannot compile forward_iterator_bench under MAC\nhttps://travis-ci.org/facebook/rocksdb/jobs/91524025\n\nIn forward_iterator_bench.cc we are using multiple functions that are not available in MAC like\nhtobe64\nbe64toh\n\nBlocking forward_iterator_bench under MAC\n\nTest Plan: compile under mac\n\nReviewers: rven, yhchiang, anthony, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D50889",
        "modified_files_count": 1,
        "modified_files": [
            "db/forward_iterator_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/605a24d94e4db8a9fdb90cfc258d8cf4ac4a5683"
    },
    {
        "hash": "9b8c9be0b53331be7cb62bb9933199f9e7598818",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-11-17T10:27:51-08:00",
        "message": "Fix forward_iterator allocation of vector.\n\nSummary:\ndb_tailing_iter_test was failing on some platforms because of\nan incorrect allocation and use. This diff fixes the issue.\n\nTest Plan:\ndb_tailing_iter_test\nRun valgrind for db_tailing_iter_test\n\nReviewers: igor, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D50835",
        "modified_files_count": 1,
        "modified_files": [
            "db/forward_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9b8c9be0b53331be7cb62bb9933199f9e7598818"
    },
    {
        "hash": "5cbb7e43e04e5827652ea51b6c5cf247dd82b9ad",
        "author": "sdong",
        "date": "2015-11-16T19:47:07-08:00",
        "message": "DBTest.MergeTestTime: relax counter upper bound verification\n\nSummary: Timing counters' upper bounds depend on platform. It frequently fails in valgrind runs. Relax the upper bound.\n\nTest Plan: Run the same valgrind test and make sure it passes.\n\nReviewers: rven, anthony, kradhakrishnan, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D50829",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5cbb7e43e04e5827652ea51b6c5cf247dd82b9ad"
    },
    {
        "hash": "314f62194aafed7bfb5b42c17b77ac3e34795751",
        "author": "Dmitri Smirnov",
        "date": "2015-11-16T15:08:11-08:00",
        "message": "Remove headers from the cc since they are in the module's header.",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/win_logger.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/314f62194aafed7bfb5b42c17b77ac3e34795751"
    },
    {
        "hash": "472c74006f4dd990bb58d85fca801bc4e9db22a4",
        "author": "Dmitri Smirnov",
        "date": "2015-11-16T14:41:11-08:00",
        "message": "Add necessary headers after cpplint rearranged includes",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/win_logger.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/472c74006f4dd990bb58d85fca801bc4e9db22a4"
    },
    {
        "hash": "3381e2c3e7b15acb7d43420a6a5486015903eaff",
        "author": "Reid Horuff",
        "date": "2015-11-16T14:20:18-08:00",
        "message": "Handle multiple calls to DBImpl::PauseBackgroundWork() and DBImpl::ContinueBackgroundWork()\n\nSummary: Handle multiple calls to DBImpl::PauseBackgroundWork() and DBImpl::ContinueBackgroundWork()\n\nTest Plan: rocksdb.information_schema handles this case.\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: hermanlee4, jkedgar, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D50781",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3381e2c3e7b15acb7d43420a6a5486015903eaff"
    },
    {
        "hash": "ca5566d2094d13c48862931a52607b05eedd8540",
        "author": "Islam AbdelRahman",
        "date": "2015-11-16T14:14:39-08:00",
        "message": "Fix clang build\n\nSummary: Fix clang\n\nTest Plan:\nUSE_CLANG=1 make all -j64\n\nReviewers: sdong, yhchiang, anthony, rven\n\nReviewed By: rven\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D50793",
        "modified_files_count": 1,
        "modified_files": [
            "db/forward_iterator_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ca5566d2094d13c48862931a52607b05eedd8540"
    },
    {
        "hash": "4175472ad6c930e0eb3021d5450e36d3f310fca4",
        "author": "Igor Canadi",
        "date": "2015-11-16T14:07:17-08:00",
        "message": "Merge pull request #832 from yuslepukhin/fix_forward_iter_outofbounds\n\nFix empty vector write in ForwardIterator",
        "modified_files_count": 1,
        "modified_files": [
            "db/forward_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4175472ad6c930e0eb3021d5450e36d3f310fca4"
    },
    {
        "hash": "cb9459f85cafd41e1bd4ffec3f084a935c98f177",
        "author": "Dmitri Smirnov",
        "date": "2015-11-16T13:58:10-08:00",
        "message": "Fix empty vector write in ForwardIterator",
        "modified_files_count": 1,
        "modified_files": [
            "db/forward_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cb9459f85cafd41e1bd4ffec3f084a935c98f177"
    },
    {
        "hash": "d06b63e99f7231c5b7df34b72a470beed6005f03",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-11-16T09:57:08-08:00",
        "message": "Fix Rocksdb lite build failure in forward_iterator_bench\n\nSummary:\nFixed Rocksdb lite build failure in forward_iterator_bench by\ndefining main for the ROCKSDB_LITE case\n\nTest Plan: build ROCKSDB_LITE\n\nReviewers: anthony, yhchiang, IslamAbdelRahman, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D50733",
        "modified_files_count": 1,
        "modified_files": [
            "db/forward_iterator_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d06b63e99f7231c5b7df34b72a470beed6005f03"
    },
    {
        "hash": "5ac16300b010281d49140b61e562a5bba119489f",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-11-12T14:12:27-08:00",
        "message": "Fixed valgrind error in options_util_test\n\nSummary:\nFixed valgrind error in options_util_test by deleting the\ncompaction_filter allocated from RandomInitCFOptions().\n\nTest Plan: valgrind --error-exitcode=2 --leak-check=full ./options_util_test\n\nReviewers: anthony, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D50661",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/options/options_util_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5ac16300b010281d49140b61e562a5bba119489f"
    },
    {
        "hash": "56245ddcf56fc30521d25dc25342eae49a716a9b",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-11-12T07:45:53-08:00",
        "message": "Fixed DBCompactionTest.SkipStatsUpdateTest\n\nSummary:\nDBCompactionTest.SkipStatsUpdateTest relies on the number\nof files opened during the DB::Open process, but the persisting\noptions file support altered this number and thus makes\nDBCompactionTest.SkipStatsUpdateTest in certain environment.\n\nThis patch fixed this test failure.\n\nTest Plan: db_compaction_test\n\nReviewers: igor, sdong, anthony, IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D50637",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/56245ddcf56fc30521d25dc25342eae49a716a9b"
    },
    {
        "hash": "e78389b554d0d8faf3bf485f7467b84dd15b25f2",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-11-10T23:23:36-08:00",
        "message": "Fixed build failure of RocksDBLite test on options_file_test.cc\n\nSummary: Fixed build failure of RocksDBLite test\n\nTest Plan: options_file_test\n\nReviewers: igor, sdong, anthony, IslamAbdelRahman\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D50595",
        "modified_files_count": 1,
        "modified_files": [
            "db/options_file_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e78389b554d0d8faf3bf485f7467b84dd15b25f2"
    },
    {
        "hash": "f3ca28ab0331ccc116da507f91a3f8c184474cda",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-11-08T09:02:35-08:00",
        "message": "Correct the comment of GetApproximateMemoryUsageByType\n\nSummary: Correct the comment of GetApproximateMemoryUsageByType.\n\nTest Plan: No code change.\n\nReviewers: igor, sdong, anthony, IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D50409",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/memory_util.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f3ca28ab0331ccc116da507f91a3f8c184474cda"
    },
    {
        "hash": "2b42000f4392a1b8f73778d8f220a28875279025",
        "author": "Nathan Bronson",
        "date": "2015-11-06T09:23:55-08:00",
        "message": "incorrect batch group size computation for write throttling\n\nSummary:\nWhen a write batch can't join a batch group due to the total\nsize of the contained batches, the write controller's GetDelay is passed\na size value that includes the rejected batch.\n\nTest Plan: make check\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D50343",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_thread.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2b42000f4392a1b8f73778d8f220a28875279025"
    },
    {
        "hash": "ae7940b6282b74943ab2680a5bc5eaf887ea59f3",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-11-05T16:43:54-08:00",
        "message": "Fix regression failure in PrefixTest.PrefixValid\n\nSummary: Use IterKey to store prefix_start_ so that it doesn't get freed\n\nTest Plan: PrefixTest.PrefixValid\n\nReviewers: anthony, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D50289",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ae7940b6282b74943ab2680a5bc5eaf887ea59f3"
    },
    {
        "hash": "c8e01ef98297a5871f40218ec4898b7121284796",
        "author": "Satnam Singh",
        "date": "2015-11-05T13:30:51-08:00",
        "message": "Delete test iterators\n\nSummary:\nValgrind reports an issue with the test for GeoIterator.\nThis diff explicitly deletes the two iterators used in this test.\n\nTest Plan: This diff is for a test. The test still passes.\n\nReviewers: IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D50193",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/geodb/geodb_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c8e01ef98297a5871f40218ec4898b7121284796"
    },
    {
        "hash": "042fb053fd8661842e952411561119c41e7d1645",
        "author": "Islam AbdelRahman",
        "date": "2015-11-04T21:02:20-08:00",
        "message": "Fix clang\n\nSummary: Fix build for clang\n\nTest Plan:\nUSE_CLANG=1 make all -j64\nmake clean\nmake check -j64\n\nReviewers: yhchiang\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D50217",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_sanity_check.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/042fb053fd8661842e952411561119c41e7d1645"
    },
    {
        "hash": "2419f435a1c48034c82e96e0008c50ece0e8b9c7",
        "author": "Islam AbdelRahman",
        "date": "2015-11-04T20:40:57-08:00",
        "message": "Merge pull request #816 from SherlockNoMad/GeoDBTestFix\n\nFix appveyor build failure",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/geodb/geodb_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2419f435a1c48034c82e96e0008c50ece0e8b9c7"
    },
    {
        "hash": "2e454099107bb33890d96a6aa7141eac03a4ecfb",
        "author": "SherlockNoMad",
        "date": "2015-11-04T20:10:16-08:00",
        "message": "Fix appveyor build failure",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/geodb/geodb_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2e454099107bb33890d96a6aa7141eac03a4ecfb"
    },
    {
        "hash": "dba5e007419655e1e4c8007c26a9bc61135dc79e",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-11-03T18:06:23-08:00",
        "message": "Fixed the compile error in RocksDBLite in memory_test.cc\n\nSummary:\nFixed the following compile error in RocksDBLite:\n\n18:00:33   CC       utilities/memory/memory_test.o\n18:00:33 utilities/memory/memory_test.cc: In function ‘int main(int, char**)’:\n18:00:33 utilities/memory/memory_test.cc:268:66: error: ‘printf’ was not declared in this scope\n18:00:33    printf(\"Skipped in RocksDBLite as utilities are not supported.\");\n18:00:33                                                                   ^\n\nTest Plan: make OPT=-DROCKSDB_LITE memory_test\n\nReviewers: igor, sdong, anthony, IslamAbdelRahman\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D50145",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/memory/memory_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dba5e007419655e1e4c8007c26a9bc61135dc79e"
    },
    {
        "hash": "df7ed91ef9b97f6c843aed57af4e9c528cdb00be",
        "author": "SherlockNoMad",
        "date": "2015-11-02T14:12:29-08:00",
        "message": "Fix white space at end of line",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/df7ed91ef9b97f6c843aed57af4e9c528cdb00be"
    },
    {
        "hash": "279c8e0cd8ed64d054d4ed855ab626fdbd1a2055",
        "author": "Igor Canadi",
        "date": "2015-11-02T12:44:27-08:00",
        "message": "Merge pull request #811 from OverlordQ/unused-variable-warning\n\nFix introduced in 2ab7065 was reverted by 18285c1.",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtablerep_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/279c8e0cd8ed64d054d4ed855ab626fdbd1a2055"
    },
    {
        "hash": "affd8336905921b4e9f717a1c9001a7a0d39f12a",
        "author": "Brent Garber",
        "date": "2015-11-02T15:35:45-05:00",
        "message": "Fix introduced in 2ab7065 was reverted by 18285c1.\n\nCorrects:\n\ndb/memtablerep_bench.cc:135:22: error: ‘FLAGS_env’ defined but not used [-Werror=unused-variable]\n static rocksdb::Env* FLAGS_env = rocksdb::Env::Default();\n                      ^\ncc1plus: all warnings being treated as errors\nMakefile:1147: recipe for target 'db/memtablerep_bench.o' failed",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtablerep_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/affd8336905921b4e9f717a1c9001a7a0d39f12a"
    },
    {
        "hash": "9ac88c85516eca9050d4dfc0b91a6e6aeb6c088f",
        "author": "SherlockNoMad",
        "date": "2015-10-30T15:59:02-07:00",
        "message": "Merge branch 'master' of https://github.com/facebook/rocksdb into OptionTestFix",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9ac88c85516eca9050d4dfc0b91a6e6aeb6c088f"
    },
    {
        "hash": "11c71a365af28cbfccd49ef122047ef48e6c4b0e",
        "author": "sdong",
        "date": "2015-10-30T15:02:33-07:00",
        "message": "db_bench: --compaction_pri default should be rocksdb::Options().compaction_pri\n\nSummary: Currently db_bnech's --compaction_pri default is set to be rocksdb::Options().compaction_style. Change it to rocksdb::Options().compaction_pri. Although, for now both is 0.\n\nTest Plan: Build db_bench\n\nReviewers: anthony, rven, IslamAbdelRahman, kradhakrishnan, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D49773",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/11c71a365af28cbfccd49ef122047ef48e6c4b0e"
    },
    {
        "hash": "335e4ce8ca3b598ce4fc1f811a8371afb38521a2",
        "author": "sdong",
        "date": "2015-10-30T11:53:47-07:00",
        "message": "options_test: fix a bug of assertion\n\nSummary: new_cf_opt.table_factory->Name() is char*, ASSERT_EQ doesn't work with char* directly. Construct a string using it.\n\nTest Plan: Run the test that failed.\n\nReviewers: igor, kradhakrishnan, rven, IslamAbdelRahman, anthony\n\nReviewed By: anthony\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D49767",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/335e4ce8ca3b598ce4fc1f811a8371afb38521a2"
    },
    {
        "hash": "550af4ee6887d00882c647347aa48d49d9d311a9",
        "author": "SherlockNoMad",
        "date": "2015-10-29T22:41:57-07:00",
        "message": "Fix Travis Build Error",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/550af4ee6887d00882c647347aa48d49d9d311a9"
    },
    {
        "hash": "f4cbb90c416cd4765741bd6cd3118c1a8cfd7552",
        "author": "Islam AbdelRahman",
        "date": "2015-10-29T13:41:36-07:00",
        "message": "Merge pull request #799 from yuslepukhin/fix_random_generator_compile\n\nFix compilation problem on Windows.",
        "modified_files_count": 1,
        "modified_files": [
            "tools/write_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f4cbb90c416cd4765741bd6cd3118c1a8cfd7552"
    },
    {
        "hash": "1277a48f1b155ffa81b8f2c6b2fdd1597e6c5998",
        "author": "Dmitri Smirnov",
        "date": "2015-10-29T11:34:34-07:00",
        "message": "Fix 80 character limit issue.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1277a48f1b155ffa81b8f2c6b2fdd1597e6c5998"
    },
    {
        "hash": "ee2c3236dd44a0eaa7ee1c34b05939d29ed6a06e",
        "author": "Dmitri Smirnov",
        "date": "2015-10-29T11:29:18-07:00",
        "message": "Fix compilation problem on Windows.\n  char is not a valid template parameter for std::uniform_int_distribution\n  according to the standard. Replacing with int should be just fine.",
        "modified_files_count": 1,
        "modified_files": [
            "tools/write_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ee2c3236dd44a0eaa7ee1c34b05939d29ed6a06e"
    },
    {
        "hash": "c97667d9f11519519dd26ba8240a6054b1d200a3",
        "author": "Igor Canadi",
        "date": "2015-10-28T16:37:39-07:00",
        "message": "Fix RocksDB lite build for write_stress\n\nSummary: We don't have access to GetLiveFilesMetadata() in RocksDB lite. If compiling write_stress for lite, I skip the check for leaked files, which depends on this function.\n\nTest Plan: OPT=-DROCKSDB_LITE m write_stress\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D49647",
        "modified_files_count": 1,
        "modified_files": [
            "tools/write_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c97667d9f11519519dd26ba8240a6054b1d200a3"
    },
    {
        "hash": "0d720dfc1727dae23e81fb9c00fee7fd801c28ba",
        "author": "Herman Lee",
        "date": "2015-10-28T16:28:11-07:00",
        "message": "Use the correct variable when fetching table properties.\n\nSummary:\nAn uninitialized parameter was being passed into the call to fetch the table\nproperties during the compaction notification callbacks.\n\nTest Plan:\nBuild it with myrocks and verify unit test passed.\nRun unit tests.\n\nReviewers: rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D49635",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0d720dfc1727dae23e81fb9c00fee7fd801c28ba"
    },
    {
        "hash": "d6911111464b3ddc35405200c4f9d77045f9110a",
        "author": "sdong",
        "date": "2015-10-23T07:45:00-07:00",
        "message": "include/posix/io_posix.h should have a once declartion\n\nSummary: include/posix/io_posix.h doesn't not prevent multiple includes. Need to fix it. It is also breaking unity build.\n\nTest Plan: Run unity build and see error go away.\n\nReviewers: rven, igor, IslamAbdelRahman, kradhakrishnan, anthony\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D49281",
        "modified_files_count": 1,
        "modified_files": [
            "include/posix/io_posix.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d6911111464b3ddc35405200c4f9d77045f9110a"
    },
    {
        "hash": "980a82ee2fa2c0e16b2278e9f732d50b9df7ce3c",
        "author": "Alexey Maykov",
        "date": "2015-10-21T18:34:39-07:00",
        "message": "Fix a bug in GetApproximateSizes\n\nSummary: Need to pass through the memtable parameter.\n\nTest Plan: built, tested through myrocks\n\nReviewers: igor, sdong, rven\n\nReviewed By: rven\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D49167",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/stackable_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/980a82ee2fa2c0e16b2278e9f732d50b9df7ce3c"
    },
    {
        "hash": "e3d4e140753e19083c777b0c3d42d0ff94bae4bd",
        "author": "sdong",
        "date": "2015-10-20T10:36:49-07:00",
        "message": "DBCompactionTestWithParam.ManualCompaction to verify block cache is not filled in manual compaction\n\nSummary: Manual compaction should not fill block cache. Add the verification in unit test\n\nTest Plan: Run the test\n\nReviewers: yhchiang, kradhakrishnan, rven, IslamAbdelRahman, anthony, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D49089",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e3d4e140753e19083c777b0c3d42d0ff94bae4bd"
    },
    {
        "hash": "7951b9b07979ca8f478ea16156a78da86053ffc2",
        "author": "Praveen Rao",
        "date": "2015-10-19T17:03:01-07:00",
        "message": "make field order match initialization order",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7951b9b07979ca8f478ea16156a78da86053ffc2"
    },
    {
        "hash": "90228bb0888e421d2809cfb64ade7cb351e008ac",
        "author": "Siying Dong",
        "date": "2015-10-19T15:26:22-07:00",
        "message": "Merge pull request #771 from maximecaron/patch-1\n\nFix build error using Visual Studio 12",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/document/json_document.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/90228bb0888e421d2809cfb64ade7cb351e008ac"
    },
    {
        "hash": "e3b1d23d3ec3f3686dcdd154ad9b9a32f3b5decc",
        "author": "Islam AbdelRahman",
        "date": "2015-10-19T15:05:59-07:00",
        "message": "Bump version to 4.2\n\nSummary: Bump the version to 4.2 ( the unreleased version ), so that when fbcode_unittests run it can differentiate between old and new APIs\n\nTest Plan: make check\n\nReviewers: sdong, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D49041",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e3b1d23d3ec3f3686dcdd154ad9b9a32f3b5decc"
    },
    {
        "hash": "5c727de6a36a025213ad8743b5ef35116022bf0b",
        "author": "Igor Canadi",
        "date": "2015-10-19T13:23:41-07:00",
        "message": "Merge pull request #777 from yuslepukhin/fix_win_build_uint\n\nuint is a not a datatype on windows.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_table_properties_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5c727de6a36a025213ad8743b5ef35116022bf0b"
    },
    {
        "hash": "cfaa33f9a5de1c1d80b213cfe8fffcc1dd50168a",
        "author": "agiardullo",
        "date": "2015-10-19T13:08:18-07:00",
        "message": "Update transaction iterator documentation\n\nSummary: Remove warning about an issue that was resolved.  Turns out the issue was a false-alarm.\n\nTest Plan: n/a\n\nReviewers: igor, yhchiang, rven, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D49011",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/transaction.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cfaa33f9a5de1c1d80b213cfe8fffcc1dd50168a"
    },
    {
        "hash": "2f680ed094e6789a3903ab8b7deea41cb5a9fc76",
        "author": "Dmitri Smirnov",
        "date": "2015-10-19T12:29:11-07:00",
        "message": "Make index same type as auto deduced uint32_t",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_table_properties_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2f680ed094e6789a3903ab8b7deea41cb5a9fc76"
    },
    {
        "hash": "09f853550c58e9efd1acfbec21a94bda1144d13a",
        "author": "Dmitri Smirnov",
        "date": "2015-10-19T11:28:22-07:00",
        "message": "uint is a not a datatype on windows.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_table_properties_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/09f853550c58e9efd1acfbec21a94bda1144d13a"
    },
    {
        "hash": "d666225a0a01f531c910b81945329bff397c6537",
        "author": "Sage Weil",
        "date": "2015-10-18T21:21:24-04:00",
        "message": "db_impl: disable recycle_log_files if WAL archive is enabled\n\nWe can't recycle the files if they are being archived.\n\nSigned-off-by: Sage Weil <sage@redhat.com>",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d666225a0a01f531c910b81945329bff397c6537"
    },
    {
        "hash": "92060b2153fd32c602e51eefefb59f7c99fd738b",
        "author": "Maxime Caron",
        "date": "2015-10-14T16:05:55-07:00",
        "message": "Fix build error using Visual Studio 12",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/document/json_document.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/92060b2153fd32c602e51eefefb59f7c99fd738b"
    },
    {
        "hash": "d662b8dab589c8f48e7105996e112c349a16108e",
        "author": "Siying Dong",
        "date": "2015-10-14T10:07:17-07:00",
        "message": "Merge pull request #766 from PraveenSinghRao/lockfix\n\nmove debug variable under ifndef NDEBUG",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/port_win.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d662b8dab589c8f48e7105996e112c349a16108e"
    },
    {
        "hash": "29a47cd2b8f87bd2e0d3f39f7d239fc7b8bd77cf",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-10-13T17:24:13-07:00",
        "message": "Include the time unit in the comment of perf_context timers\n\nSummary: Include the time unit in the comment of perf_context timers\n\nTest Plan: make perf_context_test\n\nReviewers: igor, IslamAbdelRahman, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D48663",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/perf_context.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/29a47cd2b8f87bd2e0d3f39f7d239fc7b8bd77cf"
    },
    {
        "hash": "2b925ccb435efcfdeea99b8d4675c23ef6d13b32",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-10-13T17:23:40-07:00",
        "message": "Correct the comments in db/internal_stats.h\n\nSummary: Correct the comments in db/internal_stats.h\n\nTest Plan: no code change\n\nReviewers: igor, IslamAbdelRahman, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D48675",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2b925ccb435efcfdeea99b8d4675c23ef6d13b32"
    },
    {
        "hash": "91c041e57818e01b96c40aae282b4ab28ee23332",
        "author": "Praveen Rao",
        "date": "2015-10-13T14:28:11-07:00",
        "message": "move debug variable under ifndef",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/port_win.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/91c041e57818e01b96c40aae282b4ab28ee23332"
    },
    {
        "hash": "a6efefef79ae201869c234ffc8476bb5c57a9b79",
        "author": "Praveen Rao",
        "date": "2015-10-12T19:20:09-07:00",
        "message": "Fix format specifiers",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a6efefef79ae201869c234ffc8476bb5c57a9b79"
    },
    {
        "hash": "f7b2a7b40b15dd79a0bd8cb2af48f4cc52a5826b",
        "author": "Praveen Rao",
        "date": "2015-10-12T18:55:46-07:00",
        "message": "Fix format specifiers",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f7b2a7b40b15dd79a0bd8cb2af48f4cc52a5826b"
    },
    {
        "hash": "2379944093530b04ff7dbd8f5d365a702b8dd1e6",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-10-11T17:42:22-07:00",
        "message": "Fixed an incorrect replace of const value in util/options_helper.cc\n\nSummary: Fixed an incorrect replace of const value in util/options_helper.cc\n\nTest Plan: options_test\n\nReviewers: igor, sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D48513",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2379944093530b04ff7dbd8f5d365a702b8dd1e6"
    },
    {
        "hash": "fa4b5b3db87a0ff7803ca2864d24b3b67226ef5f",
        "author": "Alexey Maykov",
        "date": "2015-10-09T19:37:51-07:00",
        "message": "Fix for the travis build caused by my previous commit\n\nSummary: My previous commit ('Passing table properties to compaction callback') broke the clang build. Here is the fix.\n\nTest Plan: USE_CLANG=1 make all -j\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D48489",
        "modified_files_count": 1,
        "modified_files": [
            "db/listener_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fa4b5b3db87a0ff7803ca2864d24b3b67226ef5f"
    },
    {
        "hash": "e61d9c1484c32bd0028604ef65a724f7f55f2447",
        "author": "sdong",
        "date": "2015-10-09T09:47:56-07:00",
        "message": "Make DBTest.AggregatedTableProperties more deterministic\n\nSummary: Now based on environment, DBTest.AggregatedTableProperties has a possibility of issuing a L0->L1 compaction after reopening and the results are not what we expected. We tune the L0 compaction trigger to make it less likely to happen.\n\nTest Plan: I can't repro the failure but I think the change is better. Just run the test and make sure it passes.\n\nReviewers: kradhakrishnan, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D48423",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e61d9c1484c32bd0028604ef65a724f7f55f2447"
    },
    {
        "hash": "40cdf797d2e9a51c42ca8e792a8a55b0406b2432",
        "author": "Igor Canadi",
        "date": "2015-10-07T11:02:23-07:00",
        "message": "Fix compile error on platforms without fallocate()\n\nSummary:\nIf a platform doesn't have ROCKSDB_FALLOCATE_PRESENT, then compiler complains:\n\nutil/env_posix.cc:354:8: error: private field 'allow_fallocate_' is not used [-Werror,-Wunused-private-field]\n\nThis was caught by travis.\n\nTest Plan: compiles with ROCKSDB_FALLOCATE_PRESENT.\n\nReviewers: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D48327",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/40cdf797d2e9a51c42ca8e792a8a55b0406b2432"
    },
    {
        "hash": "77e4ad7ce2737d797713fb56b74f875f79113076",
        "author": "Igor Canadi",
        "date": "2015-10-07T10:17:47-07:00",
        "message": "Fix compile failure on Travis\n\nSummary:\nTravis is complaining against using {} to initialize KVMap: https://travis-ci.org/facebook/rocksdb/jobs/84132600\n\n      db/compaction_job_test.cc:526:26: error: chosen constructor is explicit in copy-initialization\n        RunCompaction({files}, {});\n\nThis diff should fix it\n\nTest Plan: travis\n\nReviewers: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D48309",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/77e4ad7ce2737d797713fb56b74f875f79113076"
    },
    {
        "hash": "7bbe10c013c73797baf1a35e68c8e5faf16af4fb",
        "author": "Igor Canadi",
        "date": "2015-10-06T16:34:43-07:00",
        "message": "Merge pull request #751 from yuslepukhin/return_noerror\n\nMmap reads should not return error if reading past file",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7bbe10c013c73797baf1a35e68c8e5faf16af4fb"
    },
    {
        "hash": "e95b703b7fe7a7d7c116195e4e0c44b6d0c8ae93",
        "author": "Dmitri Smirnov",
        "date": "2015-10-06T16:19:58-07:00",
        "message": "Mmap reads should not return error if reading past file\n\nSummary:\n  This mirrors  https://reviews.facebook.net/D45645\n  Currently, mmap returns IOError when user tries to read\n  data past the end of the file. This diff changes the behavior.\n  Now, we return just the bytes that we can, and report the size\n  we returned via a Slice result. This is consistent with non-mmap\n  behavior and also pread() system call.",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/env_win.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e95b703b7fe7a7d7c116195e4e0c44b6d0c8ae93"
    },
    {
        "hash": "9eaff629e3a568617a1ca6ab92e61c1ff4d8c1f2",
        "author": "Igor Canadi",
        "date": "2015-10-05T14:46:28-07:00",
        "message": "Make corruption_test more robust\n\nSummary:\nLatest travis failed because of corruption test TableFileIndexData: https://travis-ci.org/facebook/rocksdb/jobs/83732558\n\nThis diff makes the test more explicit:\n1. create two files\n2. corrupt the second's file index\n3. expect to get only 5000 keys when range scanning\n\nTest Plan: the test is still passing :)\n\nReviewers: sdong, rven, yhchiang, kradhakrishnan, IslamAbdelRahman, anthony\n\nReviewed By: anthony\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D48183",
        "modified_files_count": 1,
        "modified_files": [
            "db/corruption_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9eaff629e3a568617a1ca6ab92e61c1ff4d8c1f2"
    },
    {
        "hash": "bf19dbff44f9cba014ed8dd2973422daaeb4beef",
        "author": "Igor Canadi",
        "date": "2015-10-05T10:10:11-07:00",
        "message": "Fix valgrind - Initialize done variable\n\nSummary: Fixes the valgrind warning \"Conditional jump or move depends on uninitialised value(s)\"\n\nTest Plan: valgrind test, no more warning\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D48177",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bf19dbff44f9cba014ed8dd2973422daaeb4beef"
    },
    {
        "hash": "c29af48d3ead252e42d46367125501834b1cf894",
        "author": "Islam AbdelRahman",
        "date": "2015-09-30T09:51:31-07:00",
        "message": "Add max_file_opening_threads to db_bench\n\nSummary: Add an option to db_bench for max_file_opening_threads\n\nTest Plan: compile and run db_bench\n\nReviewers: sdong, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, paultuckfield\n\nDifferential Revision: https://reviews.facebook.net/D47811",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c29af48d3ead252e42d46367125501834b1cf894"
    },
    {
        "hash": "da1cf8a9bce32982f3a3b7d5a8902bfa5b5e4a57",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-09-29T17:58:00-07:00",
        "message": "Add a missing check for deprecated options in options_helper.cc\n\nSummary: Add a missing check for deprecated options in options_helper.cc\n\nTest Plan: options_test\n\nReviewers: sdong, anthony, IslamAbdelRahman, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D47793",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/da1cf8a9bce32982f3a3b7d5a8902bfa5b5e4a57"
    },
    {
        "hash": "a8b8295d1881f1bab6718e4eba47ce793b904f9a",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-09-29T14:59:02-07:00",
        "message": "Fixed a compile warning in options_test.cc under clang\n\nSummary:\nFixed the following compile warning in options_test.cc under clang\nutil/options_test.cc:94:12: error: 'Skip' overrides a member function but is not marked 'override' [-Werror,-Winconsistent-missing-override]\n    Status Skip(uint64_t n) {\n           ^\n./include/rocksdb/env.h:368:18: note: overridden virtual function is here\n  virtual Status Skip(uint64_t n) = 0;\n                 ^\n\nTest Plan: options_test\n\nReviewers: igor, sdong, anthony, IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D47763",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a8b8295d1881f1bab6718e4eba47ce793b904f9a"
    },
    {
        "hash": "1eff1834b23aea13d9d9323fd53c84293fcdb756",
        "author": "Igor Canadi",
        "date": "2015-09-29T09:34:42-07:00",
        "message": "Remove non-existing functions. Closes #680\n\nSummary: See https://github.com/facebook/rocksdb/issues/680\n\nTest Plan: compiles\n\nReviewers: sdong, yhchiang, anthony\n\nReviewed By: anthony\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D47721",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1eff1834b23aea13d9d9323fd53c84293fcdb756"
    },
    {
        "hash": "16d1ba7001d5ecff48a5e249d0dbb168d21f18d9",
        "author": "Islam AbdelRahman",
        "date": "2015-09-28T15:58:50-07:00",
        "message": "Clear SyncPoint Trace in DeleteSchedulerTests\n\nSummary: DeleteSchedulerTests is running the same test with different rates, After the first iteraton sync points become useless because ClearTrace was not being called\n\nTest Plan: Run the test\n\nReviewers: sdong, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D47709",
        "modified_files_count": 1,
        "modified_files": [
            "util/delete_scheduler_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/16d1ba7001d5ecff48a5e249d0dbb168d21f18d9"
    },
    {
        "hash": "30f74fa9645bd110c5093fe1e3747f4748823b6e",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-09-28T13:55:53-07:00",
        "message": "Make CompactionJobStatsTest.UniversalCompactionTest more robust\n\nSummary:\nCompactionJobStatsTest.UniversalCompactionTest assumes compaction\nkicks in when the number of L0 files equals to the compaction trigger.\nHowever, in some case, the compaction might not catch up the write\nspeed and thus compaction might not kick in until the number of L0 files\nis GREATER than the compaction trigger.\n\nThis patch tries to fix this corner case by making the Put thread wait\nfor a potential compaction whenever it flushes.\n\nTest Plan: ./compaction_job_stats_test\n\nReviewers: sdong, anthony, IslamAbdelRahman, igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D47589",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job_stats_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/30f74fa9645bd110c5093fe1e3747f4748823b6e"
    },
    {
        "hash": "a263002a361fccd3a53f0a7df38b0065af405c56",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-09-28T12:06:43-07:00",
        "message": "Fixed a tsan warning in db_stress.cc\n\nSummary:\nFixed the following tsan warning in db_stress.cc\n\n  WARNING: ThreadSanitizer: data race (pid=3163194)\n  Read of size 8 at 0x7fd1797cb518 by thread T32:\n    #0 VerifyDb tools/db_stress.cc:1731 (db_stress+0x000000040674)\n    #1 rocksdb::StressTest::ThreadBody(void*) tools/db_stress.cc:1191 (db_stress+0x0000000625a9)\n    #2 StartThreadWrapper util/env_posix.cc:1648 (db_stress+0x00000028bbbd)\n\n  Previous write of size 8 at 0x7fd1797cb518 by thread T31:\n    #0 VerifyDb tools/db_stress.cc:1726 (db_stress+0x00000004072a)\n    #1 rocksdb::StressTest::ThreadBody(void*) tools/db_stress.cc:1191 (db_stress+0x0000000625a9)\n    #2 StartThreadWrapper util/env_posix.cc:1648 (db_stress+0x00000028bbbd)\n\nThe cause is that in VerifyDb(), the static local const variable long max_key\ncan be read and written at the same time.  This patch fixed it by making it\nnon-static.\n\nTest Plan: db_stress\n\nReviewers: igor, sdong, IslamAbdelRahman, anthony\n\nReviewed By: anthony\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D47703",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a263002a361fccd3a53f0a7df38b0065af405c56"
    },
    {
        "hash": "e4861e7d680f3989d75bbbae579f97526deb4869",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-09-28T11:51:32-07:00",
        "message": "Fixed a compile error in util/arena.h\n\nSummary:\nFixed the compile error in util/arena.h caused by not\nincluding TLB related header.\n\nTest Plan: make db_stress\n\nReviewers: igor, sdong, anthony, IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D47697",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e4861e7d680f3989d75bbbae579f97526deb4869"
    },
    {
        "hash": "0fdb4f1688ebe160944c30c213f5afad4b13fb0f",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-09-28T11:43:04-07:00",
        "message": "Fixed a compile warning in util/arena.cc when hugetlb is not supported.\n\nSummary:\nFixed the following compile warning when hugetlb is not supported.\n\n    ./util/arena.h:102:10: error: private field 'hugetlb_size_' is not used [-Werror,-Wunused-private-field]\n      size_t hugetlb_size_ = 0;\n             ^\n    1 error generated.\n\nTest Plan: make db_stress\n\nReviewers: igor, sdong, anthony, IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D47691",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0fdb4f1688ebe160944c30c213f5afad4b13fb0f"
    },
    {
        "hash": "dac3f22b7745e0785ded1cdf234764b282b4e759",
        "author": "Igor Canadi",
        "date": "2015-09-25T13:55:11-07:00",
        "message": "Fix the test failure\n\nSummary: AllocateFromHugePage() can return nullptr, and then we need to try to allocate the block with AllocateNewBlock()\n\nTest Plan: arena_test\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D47607",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dac3f22b7745e0785ded1cdf234764b282b4e759"
    },
    {
        "hash": "7ee445dd6857203842384daebab5cccc89e058dd",
        "author": "Igor Canadi",
        "date": "2015-09-25T13:17:19-07:00",
        "message": "Fix the compile warning\n\nSummary: clang is a bit confused, see here: https://travis-ci.org/facebook/rocksdb/jobs/82214750\n\nTest Plan: travis CI\n\nReviewers: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D47601",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7ee445dd6857203842384daebab5cccc89e058dd"
    },
    {
        "hash": "174e2be5f067330f6bd9bf4fb06bac26ba51e6c7",
        "author": "Igor Canadi",
        "date": "2015-09-25T12:35:15-07:00",
        "message": "Merge pull request #735 from jsteemann/fix-potential-leak-in-allocate\n\nprevent potential memleaks in Arena::Allocate*()",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/174e2be5f067330f6bd9bf4fb06bac26ba51e6c7"
    },
    {
        "hash": "aa58958d3853157ae3f2bdba0a17fe90f4fe4edb",
        "author": "jsteemann",
        "date": "2015-09-25T21:23:40+02:00",
        "message": "prevent potential memleaks in Arena::Allocate*()\n\nThe previous memory allocation procedures tried to allocate memory\nvia `new` or `mmap` and inserted the pointer to the memory into an\nstd::vector afterwards. In case `new` or `mmap` threw or returned\na nullptr, no memory was leaking. If `new` or `mmap` worked ok, the\nfollowing `vector::push_back` could still fail and throw an exception.\nIn this case, the memory just allocated was leaked.\n\nThe fix is to reserve space in the target memory pointer block\nbeforehand. If this throws, then no memory is allocated nor leaked.\nIf the reserve works but the actual allocation fails, still no\nmemory is leaked, only the target vector will have space for at\nleast one more element than actually required (but this may be\nreused for the next allocation)",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aa58958d3853157ae3f2bdba0a17fe90f4fe4edb"
    },
    {
        "hash": "b6aa3f962dc2b33fffa2262006963b7719aea88e",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-09-25T12:07:32-07:00",
        "message": "Fixed a memory leak issue in DBTest.UnremovableSingleDelete\n\nSummary: Fixed a memory leak issue in DBTest.UnremovableSingleDelete\n\nTest Plan: valgrind --error-exitcode=2 --leak-check=full ./db_test --gtest_filter=\"*UnremovableSingleDelete*\"\n\nReviewers: sdong, anthony, IslamAbdelRahman, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D47583",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b6aa3f962dc2b33fffa2262006963b7719aea88e"
    },
    {
        "hash": "c58bac701c49206419ace216c04ac163eb77517b",
        "author": "Mayank Pundir",
        "date": "2015-09-23T17:41:42-07:00",
        "message": "Fix valgrind failure due to memory leaks\n\nSummary: Test cases for IsBottommostLevel function create FileMetaData objects which were not getting deleted in the destructor.\n\nTest Plan: Valgrind check on compaction_picker_test\n\nReviewers: yhchiang, igor, sdong\n\nSubscribers: rven, kradhakrishnan, IslamAbdelRahman, dhruba, anthony\n\nDifferential Revision: https://reviews.facebook.net/D47463",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c58bac701c49206419ace216c04ac163eb77517b"
    },
    {
        "hash": "a70d08ec07a577ed8247eca2b2d326724d598cda",
        "author": "sdong",
        "date": "2015-09-23T16:16:26-07:00",
        "message": "Fix the bug of using freed memory introduced by recent plain table reader patch\n\nSummary: Recent patch introduced a bug that if non-mmap mode is used, in prefix encoding case, there is a resizing of cur_key_ within the same prefix, we still read prefix from the released buffer. It fails ASAN tests and this commit fixes it.\n\nTest Plan: Run the ASAN tests for the failing test case.\n\nReviewers: IslamAbdelRahman, yhchiang, anthony, igor, kradhakrishnan, rven\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D47457",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_key_coding.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a70d08ec07a577ed8247eca2b2d326724d598cda"
    },
    {
        "hash": "3fdb6e5234022df4000edc37b1dc472f7a40b807",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-09-23T12:39:16-07:00",
        "message": "Fixed old lint errors in db/filename.cc\n\nSummary: Fixed old lint errors in db/filename.cc\n\nTest Plan: make\n\nReviewers: igor, sdong, anthony, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D47445",
        "modified_files_count": 1,
        "modified_files": [
            "db/filename.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3fdb6e5234022df4000edc37b1dc472f7a40b807"
    },
    {
        "hash": "b349d227860477f2f90fa1fed1ecc8d3e4f3e3e3",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-09-23T12:22:44-07:00",
        "message": "Fixed old lint errors in db/filename.h\n\nSummary: Fixed old lint errors in db/filename.h\n\nTest Plan: make\n\nReviewers: igor, sdong, anthony, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D47439",
        "modified_files_count": 1,
        "modified_files": [
            "db/filename.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b349d227860477f2f90fa1fed1ecc8d3e4f3e3e3"
    },
    {
        "hash": "d0c31641d22b1bc8ca1bba3eb7f80f0979bfd033",
        "author": "sdong",
        "date": "2015-09-22T14:23:11-07:00",
        "message": "Internal stats WAL file synced to match meaning of the stats of the same name\n\nSummary: https://reviews.facebook.net/D23343 changed WAL sync bytes to extra fsync. This change does the same for internal stats.\n\nTest Plan: Run all existing unit tests and verify results in db_bench.\n\nReviewers: anthony, rven, igor, MarkCallaghan, kradhakrishnan, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D47349",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d0c31641d22b1bc8ca1bba3eb7f80f0979bfd033"
    },
    {
        "hash": "5e8f0a66db9da5f1cc4353b08df2793b0a4789bb",
        "author": "Dmitri Smirnov",
        "date": "2015-09-21T16:56:47-07:00",
        "message": "Use port::constant for std::muneric_limtis<>::max()",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/write_batch_with_index/write_batch_with_index_internal.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5e8f0a66db9da5f1cc4353b08df2793b0a4789bb"
    },
    {
        "hash": "199744f4c4d1d31f682bfbb15ca0e3d852246333",
        "author": "Igor Canadi",
        "date": "2015-09-21T19:50:00+02:00",
        "message": "Merge pull request #728 from jsteemann/fix-missing-include-header\n\nadd missing header required for std::function",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/backupable_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/199744f4c4d1d31f682bfbb15ca0e3d852246333"
    },
    {
        "hash": "669b892f97963caa49e782ff3a16cca1bc3c5458",
        "author": "jsteemann",
        "date": "2015-09-18T22:18:40+02:00",
        "message": "add missing header required for std::function\n\notherwise Visual Studio will have trouble compiling this file",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/backupable_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/669b892f97963caa49e782ff3a16cca1bc3c5458"
    },
    {
        "hash": "624ef456ddb2e88ae16790236a4e8c89b67428da",
        "author": "jsteemann",
        "date": "2015-09-18T22:03:47+02:00",
        "message": "fixed formatting. thanks @4tXJ7f for pointing me at `make format`",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/write_batch.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/624ef456ddb2e88ae16790236a4e8c89b67428da"
    },
    {
        "hash": "bbb18c8278b108c58098c9050aa7e93db5824918",
        "author": "jsteemann",
        "date": "2015-09-18T20:23:50+02:00",
        "message": "removed unused variable of type Status, fixed indentation",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bbb18c8278b108c58098c9050aa7e93db5824918"
    },
    {
        "hash": "4704833357a8609e7c42df4f337f938a8e870c08",
        "author": "jsteemann",
        "date": "2015-09-18T20:20:32+02:00",
        "message": "pass input string to WriteBatch() by const reference\n\nthis may lead to copying less data (in case compilers don't\noptimize away copying the string by themselves)",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/write_batch.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4704833357a8609e7c42df4f337f938a8e870c08"
    },
    {
        "hash": "5ec129971bbc1c69f476fa908424ae8939d1ef17",
        "author": "jsteemann",
        "date": "2015-09-18T20:15:20+02:00",
        "message": "key_ cannot become nullptr, so no check is needed for that\n\n(ignoring the unlikely case that some overrides\n`operator new throw(std::bad_alloc)` with a function that returns a nullptr)",
        "modified_files_count": 1,
        "modified_files": [
            "db/dbformat.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5ec129971bbc1c69f476fa908424ae8939d1ef17"
    },
    {
        "hash": "834b12a8d5fc9c0de113fc6ac82be24d3aa13102",
        "author": "jsteemann",
        "date": "2015-09-18T20:10:00+02:00",
        "message": "made Size() function const because it does not modify data",
        "modified_files_count": 1,
        "modified_files": [
            "db/dbformat.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/834b12a8d5fc9c0de113fc6ac82be24d3aa13102"
    },
    {
        "hash": "c7fba8029135c2ead57d9033c687472befe0424e",
        "author": "agiardullo",
        "date": "2015-09-17T20:14:51-07:00",
        "message": "Fix non-deterministic failure in backupable_db_test\n\nSummary: FailOverwritingBackups has unexpected results when auto-compaction runs.\n\nTest Plan: ran test a bunch of times\n\nReviewers: IslamAbdelRahman, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D47181",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c7fba8029135c2ead57d9033c687472befe0424e"
    },
    {
        "hash": "f35560d00d8d76565f34e3659debbf43d88555d2",
        "author": "Igor Canadi",
        "date": "2015-09-17T11:26:11-07:00",
        "message": "Merge pull request #723 from jsteemann/fix-typos\n\nfixed typos in comments of options.h",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f35560d00d8d76565f34e3659debbf43d88555d2"
    },
    {
        "hash": "f8b770a942a79503f3ad43d487b23b114c48100b",
        "author": "jsteemann",
        "date": "2015-09-17T19:58:09+02:00",
        "message": "fixed typos",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f8b770a942a79503f3ad43d487b23b114c48100b"
    },
    {
        "hash": "51e1c11254543b2c59aaede46b38e560f4212804",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-09-17T10:21:34-07:00",
        "message": "Do not flag error if file to be deleted does not exist\n\nSummary:\nSome users have observed errors in the log file when\nthe log file or sst file is already deleted.\n\nTest Plan:\nMake sure that the errors do not appear for already deleted\nfiles.\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: anthony, kradhakrishnan, yhchiang, rven, igor, IslamAbdelRahman, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D47115",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/51e1c11254543b2c59aaede46b38e560f4212804"
    },
    {
        "hash": "9aca7cd6d8e182c0a67204dc0756c75b2ae996ce",
        "author": "sdong",
        "date": "2015-09-16T16:33:39-07:00",
        "message": "DB::Open() to flush info log after printing DB pointer\n\nSummary: Now DB::Open() flushes info log before printing DB pointer, so it may not show up if no activity after DB open. Move log flushing from after printing options to printing DB pointer.\n\nTest Plan: make commit-prereq\n\nReviewers: igor, IslamAbdelRahman, yhchiang, kradhakrishnan, anthony, rven\n\nReviewed By: rven\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D47121",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9aca7cd6d8e182c0a67204dc0756c75b2ae996ce"
    },
    {
        "hash": "16934d495979fbed9e6c69dba6e04d8da37849cf",
        "author": "Andres Noetzli",
        "date": "2015-09-16T13:04:05-07:00",
        "message": "Fix wrong constants in db_test_util\n\nSummary: Fix two constants in WaitFor() that multiply a value with 000 instead of 1000.\n\nTest Plan: make clean all check\n\nReviewers: rven, anthony, yhchiang, aekmekji, sdong, MarkCallaghan, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D47091",
        "modified_files_count": 1,
        "modified_files": [
            "util/db_test_util.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/16934d495979fbed9e6c69dba6e04d8da37849cf"
    },
    {
        "hash": "3ebf11ed16039b188eda8231a3c1815c28f33f0c",
        "author": "Alexey Maykov",
        "date": "2015-09-16T11:00:49-07:00",
        "message": "Adding the increment for a counter for a number of WAL syncs\n\nSummary: This will unblock the corresponding change in MyRocks\n\nTest Plan: ran rocksdb.write_sync test\n\nReviewers: sdong, kolmike\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D46911",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3ebf11ed16039b188eda8231a3c1815c28f33f0c"
    },
    {
        "hash": "81a61d75dcfce3e9ff9974447eefca2441705bb6",
        "author": "Igor Canadi",
        "date": "2015-09-15T22:59:53-07:00",
        "message": "Skipped tests shouldn't be failures [part 2]\n\nSummary: Missed one file in the previous commit\n\nTest Plan: compiles\n\nReviewers: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D47055",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_reader_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/81a61d75dcfce3e9ff9974447eefca2441705bb6"
    },
    {
        "hash": "5ba3297d0d38a51849a5e3b58ce5e33d680de301",
        "author": "Ari Ekmekji",
        "date": "2015-09-15T17:11:44-07:00",
        "message": "Add compaction time to log output\n\nSummary:\nAlthough compaction time is recorded in the statistics,\nit is helpful to include this value in the log output corresponding\nto the end of compaction.\n\nTest Plan: make all && make check\n\nReviewers: yhchiang, sdong, igor, noetzli, MarkCallaghan\n\nReviewed By: MarkCallaghan\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D47007",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5ba3297d0d38a51849a5e3b58ce5e33d680de301"
    },
    {
        "hash": "0e50a3fcc078774121dd02e5cb9b70a71765d9ca",
        "author": "Igor Canadi",
        "date": "2015-09-15T11:35:23-07:00",
        "message": "Merge issue with D46773\n\nSummary: There was a merge issue with SleepingBackgroundTask\n\nTest Plan: compiles now\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D46977",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0e50a3fcc078774121dd02e5cb9b70a71765d9ca"
    },
    {
        "hash": "df22e2fb71be07d25448a01e1eef77f65506b429",
        "author": "Andres Noetzli",
        "date": "2015-09-15T10:52:00-07:00",
        "message": "Relax memory order for faster tickers\n\nSummary:\nThe default behavior for atomic operations is sequentially consistent ordering\nwhich is not needed for simple counters (see:\nhttp://en.cppreference.com/w/cpp/atomic/memory_order). Change the memory order\nto std::memory_order_relaxed for better performance.\n\nTest Plan: make clean all check\n\nReviewers: rven, anthony, yhchiang, aekmekji, sdong, MarkCallaghan, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D46953",
        "modified_files_count": 1,
        "modified_files": [
            "util/statistics.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/df22e2fb71be07d25448a01e1eef77f65506b429"
    },
    {
        "hash": "5ce63e30ea63ee790e6a6c94ad59339ec26dd2aa",
        "author": "Igor Canadi",
        "date": "2015-09-15T09:54:37-07:00",
        "message": "Merge pull request #720 from AMDmi3/fix-constant-overflow\n\nFix `integer overflow in expression' error",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5ce63e30ea63ee790e6a6c94ad59339ec26dd2aa"
    },
    {
        "hash": "925babc761d9cb1c43346516df92d5db3d15c115",
        "author": "Igor Canadi",
        "date": "2015-09-15T09:09:01-07:00",
        "message": "Merge pull request #721 from AMDmi3/printf-size_t\n\nFix printf format for size_t",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/checkpoint/checkpoint.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/925babc761d9cb1c43346516df92d5db3d15c115"
    },
    {
        "hash": "f171faa240ccd12ac05d54b7ea0a8c29d2f1d9d6",
        "author": "Dmitry Marakasov",
        "date": "2015-09-15T15:04:56+03:00",
        "message": "Fix printf format for size_t",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/checkpoint/checkpoint.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f171faa240ccd12ac05d54b7ea0a8c29d2f1d9d6"
    },
    {
        "hash": "4b0b0201c9abb7675413ce25e5044b1c9a8853c8",
        "author": "Dmitry Marakasov",
        "date": "2015-09-15T14:41:00+03:00",
        "message": "Fix `integer overflow in expression' error",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4b0b0201c9abb7675413ce25e5044b1c9a8853c8"
    },
    {
        "hash": "f3170b6f6c88d2bb7992e2c4303d2c317af4cfa4",
        "author": "sdong",
        "date": "2015-09-14T23:39:30-07:00",
        "message": "DBImpl::FindObsoleteFiles() shouldn't release mutex between getting min_pending_output and scanning files\n\nSummary:\nReleasing mutex between getting min_pending_output and scanning files may cause min_pending_output to be max but some non-final files are found in file scanning, ending up with deleting wrong files.\nAs a recent regression, mutex can be released while waiting for log sync. We move it to after file scanning.\n\nTest Plan: Run all existing tests. Don't think it is easy to write a unit test. Maybe we should find a way to assert lock not released so that we can have some test verification for similar cases.\n\nReviewers: igor, anthony, IslamAbdelRahman, kradhakrishnan, yhchiang, kolmike, rven\n\nReviewed By: rven\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D46899",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f3170b6f6c88d2bb7992e2c4303d2c317af4cfa4"
    },
    {
        "hash": "e467bf0de057e3cbec976bc305ae8a3a7365a1b1",
        "author": "Islam AbdelRahman",
        "date": "2015-09-14T17:41:40-07:00",
        "message": "Fix valgrind error\n\nSummary:\nValgrind is complaining because we are using hard_rate_limit (when serializing the options) without being initialized\nhttp://our.intern.facebook.com/intern/sandcastle/3962140295/77533971/\n\nTest Plan: run the test under valgrind\n\nReviewers: kradhakrishnan, yhchiang, igor, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D46929",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e467bf0de057e3cbec976bc305ae8a3a7365a1b1"
    },
    {
        "hash": "7143242d123bc782a8855b7cbe88fbff5550ba8f",
        "author": "Islam AbdelRahman",
        "date": "2015-09-14T12:42:06-07:00",
        "message": "Fix compaction_job_stats under ROCKSDB_LITE\n\nSummary: Fix compaction_job_stats under ROCKSDB_LITE\n\nTest Plan: compile using ROCKSDB_LITE\n\nReviewers: yhchiang, igor, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D46887",
        "modified_files_count": 1,
        "modified_files": [
            "util/compaction_job_stats_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7143242d123bc782a8855b7cbe88fbff5550ba8f"
    },
    {
        "hash": "ad0d70ca1e094799367f9bf68ad725e695f5ff72",
        "author": "Andres Noetzli",
        "date": "2015-09-14T11:54:47-07:00",
        "message": "Relax asserts in arena_test\n\nSummary:\nCommit c67d2068988edccd0c732faec3d3c206089482c0 did not fix all test conditions\nwhich use Arena::MemoryAllocatedBytes() (see Travis failure\nhttps://travis-ci.org/facebook/rocksdb/jobs/79957700). The assumption of that\ncommit was that aligned allocations do not call Arena::AllocateNewBlock(), so\nmalloc_usable_block_size() would not be used for Arena::MemoryAllocatedBytes().\nHowever, there is a code path where Arena::AllocateAligned() calls\nAllocateFallback() which in turn calls Arena::AllocateNewBlock(), so\nArena::MemoryAllocatedBytes() may return a greater value than expected even for\naligned requests.\n\nTest Plan: make arena_test && ./arena_test\n\nReviewers: rven, anthony, yhchiang, aekmekji, igor, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D46869",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ad0d70ca1e094799367f9bf68ad725e695f5ff72"
    },
    {
        "hash": "c67d2068988edccd0c732faec3d3c206089482c0",
        "author": "Andres Noetzli",
        "date": "2015-09-11T12:32:59-07:00",
        "message": "Fixed arena_test failure due to malloc_usable_size()\n\nSummary:\nArenaTest.MemoryAllocatedBytes on Travis failed:\nhttps://travis-ci.org/facebook/rocksdb/jobs/79887849 . This is probably due to\nmalloc_usable_size() returning a value greater than the requested size. From\nthe man page:\n\n   The value returned by malloc_usable_size() may be greater than the requested\n   size of the allocation because of alignment and minimum size constraints.\n   Although the excess bytes can be overwritten by the application without ill\n   effects, this is not good programming practice: the number of excess bytes\n   in an allocation depends on the underlying implementation.\n\nTest Plan: make arena_test && ./arena_test\n\nReviewers: rven, anthony, yhchiang, aekmekji, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D46743",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c67d2068988edccd0c732faec3d3c206089482c0"
    },
    {
        "hash": "34cedaff66619769ac51ba79a6fd15536a7f6c5d",
        "author": "Andres Noetzli",
        "date": "2015-09-11T12:07:54-07:00",
        "message": "Initialize variable to avoid warning\n\nSummary:\nRocksDB debug version failed to build under gcc-4.8.1 on sandcastle with the following error:\n\n```\ndb/db_compaction_filter_test.cc:570:33: error: â€˜snapshotâ€™ may be used uninitialized in this function [-Werror=maybe-uninitialized]\n```\n\nTest Plan: make db_compaction_filter_test && ./db_compaction_filter_test\n\nReviewers: rven, anthony, yhchiang, aekmekji, igor, sdong\n\nReviewed By: igor, sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D46725",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_filter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/34cedaff66619769ac51ba79a6fd15536a7f6c5d"
    },
    {
        "hash": "6db0a939d2ee182882d12c693cf3623238b9c3f7",
        "author": "Ari Ekmekji",
        "date": "2015-09-10T14:37:00-07:00",
        "message": "Fix DBCompactionTest failure with parallel L0-L1 compactions\n\nSummary:\nThe test SuggestCompactRangeNoTwoLevel0Compactions in\nDBCompactionTest fails when there are parallel L0-L1 compactions\ntaking place because the test makes sure that only one compaction\ninvolving L0 takes place at any given time (since before having\nparallel compactions this was impossible). I changed the test to only\nrun with DBOptions.max_subcompactions=1 so as to not hit this issue\nwhich is not a correctness issue but just an inherent changing of\nassumptions after introducing parallel compactions.\n\nThis failed after landing https://reviews.facebook.net/D43269#inline-321303\nso now this should fix it\n\nTest Plan: make all && make check\n\nReviewers: yhchiang, igor, anthony, noetzli, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D46617",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6db0a939d2ee182882d12c693cf3623238b9c3f7"
    },
    {
        "hash": "95ffc5d2bca40347a6216b74299424d7c56d52f2",
        "author": "Igor Canadi",
        "date": "2015-09-10T14:17:12-07:00",
        "message": "Correct ASSERT_OK() in ReadDroppedColumnFamily\n\nSummary: ReadDroppedColumnFamily is consistently failing in Travis CI environment (can't repro locally). I suspect it might be failing with non-OK status. This diff will give us more info about the failure.\n\nTest Plan: none\n\nReviewers: sdong, kradhakrishnan\n\nReviewed By: kradhakrishnan\n\nSubscribers: kradhakrishnan, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D46611",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/95ffc5d2bca40347a6216b74299424d7c56d52f2"
    },
    {
        "hash": "11266440825ddebe0527458bceb6bb28209dc9f2",
        "author": "krad",
        "date": "2015-09-10T12:56:17-07:00",
        "message": "Relaxing consistency detection to include errors while inserting to memtable as WAL recovery error.\n\nSummary: The current code, considers data to be consistent if the record\nchecksum passes. We do have customer issues where the record checksum passed but\nthe data was incomprehensible. There is no way to get out of this error case\nsince all WAL recovery model will consider this error as unrelated to WAL.\n\nRelaxing the definition and including errors while inserting to memtable as WAL\nerrors and handing them as per the recovery level.\n\nTest Plan: Used customer dump to verify the fix for different level. The db\nopens for kSkipAnyCorruptedRecords and kPointInTimeRecovery, but fails for\nkAbsoluteConsistency and kTolerateCorruptedTailRecords.\n\nReviewers: sdon igor\n\nCC: leveldb@\n\nTask ID: #7918721\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/11266440825ddebe0527458bceb6bb28209dc9f2"
    },
    {
        "hash": "abc7f5fdb266745493d89b09719d9dd091e2b3b8",
        "author": "sdong",
        "date": "2015-09-10T11:32:19-07:00",
        "message": "Make DBTest.ReadLatencyHistogramByLevel more robust\n\nSummary: DBTest.ReadLatencyHistogramByLevel was not written as expected. After writes, reads aren't guaranteed to hit data written. It was not expected. Fix it.\n\nTest Plan: Run the test multiple times\n\nReviewers: IslamAbdelRahman, rven, anthony, kradhakrishnan, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D46587",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/abc7f5fdb266745493d89b09719d9dd091e2b3b8"
    },
    {
        "hash": "c66d53feed4c480fae7ffa77e49c288e4cd1432b",
        "author": "Andres Noetzli",
        "date": "2015-09-09T16:36:19-07:00",
        "message": "Fixed minor issue in CompressionTypeSupported()\n\nSummary:\nCompressionTypeSupported was returning LZ4_Supported() for\nkZSTDNotFinalCompression. This patch changes it to ZSTD_Supported().\n\nTest Plan: make clean all check\n\nReviewers: rven, anthony, yhchiang, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D46521",
        "modified_files_count": 1,
        "modified_files": [
            "util/compression.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c66d53feed4c480fae7ffa77e49c288e4cd1432b"
    },
    {
        "hash": "44b6e99e1b49193198b021c87d7f173ba1858184",
        "author": "agiardullo",
        "date": "2015-09-09T13:36:38-07:00",
        "message": "update max_write_buffer_number_to_maintain docblock\n\nSummary: fix comment\n\nTest Plan: n/a\n\nReviewers: sdong, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D46455",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/44b6e99e1b49193198b021c87d7f173ba1858184"
    },
    {
        "hash": "342ba8089528ac1ed4636f2c320b4508151b1f0b",
        "author": "sdong",
        "date": "2015-09-08T19:31:34-07:00",
        "message": "Make DBTest.OptimizeFiltersForHits more deterministic\n\nSummary:\nThis commit makes DBTest.OptimizeFiltersForHits more deterministic by:\n(1) make key inserts more random\n(2) make sure L0 has one file\n(3) make file size smaller compared to level target so L1 will cover more range.\n\nTest Plan: Run the test many times.\n\nReviewers: rven, IslamAbdelRahman, kradhakrishnan, igor, anthony\n\nReviewed By: anthony\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D46461",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/342ba8089528ac1ed4636f2c320b4508151b1f0b"
    },
    {
        "hash": "e17e92ea1968a308dda83ed33d86da2e190a6566",
        "author": "Andres Notzli",
        "date": "2015-09-08T17:15:11-07:00",
        "message": "Relaxed assert in forward iterator\n\nSummary:\nIt looks like in some cases an assert in SeekInternal failed when computing the\nhints for the next level because user_key was the same as the largest key and\nnot strictly smaller. Relaxing the assert to expect smaller or equal keys.\n\nTest Plan: make clean all check\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D46443",
        "modified_files_count": 1,
        "modified_files": [
            "db/forward_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e17e92ea1968a308dda83ed33d86da2e190a6566"
    },
    {
        "hash": "0ccf2db385a73370fe4503ba4b2847e8dc9f399d",
        "author": "Andres Notzli",
        "date": "2015-09-08T15:46:16-07:00",
        "message": "Fixed broken build due to format specifier\n\nSummary:\nClang expects %llu for uint64_t, while gcc expects %lu. Replaced the format\nspecifier with a format macro. This should fix the build on gcc and Clang.\n\nTest Plan: Build on gcc and clang.\n\nReviewers: rven, anthony, yhchiang, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D46431",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ccf2db385a73370fe4503ba4b2847e8dc9f399d"
    },
    {
        "hash": "3a0df7f1619c97fd31d3e85b370fce3ab311f3f4",
        "author": "Andres Noetzli",
        "date": "2015-09-08T09:47:54-07:00",
        "message": "Fixed comparison in ForwardIterator when computing hint for GetNextLevelIndex()\n\nSummary: When computing the hint for GetNextLevelIndex(), ForwardIterator was doing a redundant comparison. This patch fixes the comparison (using https://github.com/facebook/rocksdb/blob/master/db/version_set.cc#L158 as a reference) and moves it inside an assert because we expect `level_files[f_idx]` to contain the next key after Seek(), so user_key should always be smaller than the largest key.\n\nTest Plan: make clean all check\n\nReviewers: rven, anthony, yhchiang, igor, sdong\n\nReviewed By: sdong\n\nSubscribers: tnovak, sdong, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D46227",
        "modified_files_count": 1,
        "modified_files": [
            "db/forward_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3a0df7f1619c97fd31d3e85b370fce3ab311f3f4"
    },
    {
        "hash": "14456aea52b1dcec1bcd0615174e452a080225f6",
        "author": "Igor Canadi",
        "date": "2015-09-02T16:05:53-07:00",
        "message": "Fix compile\n\nSummary: There was a merge conflict with https://reviews.facebook.net/D45993\n\nTest Plan: make check\n\nReviewers: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D46065",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/14456aea52b1dcec1bcd0615174e452a080225f6"
    },
    {
        "hash": "0e6e5472e19a4ad31e6b8b1df900bc1c28062b90",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-09-02T15:07:44-07:00",
        "message": "Fixed a compile warning in rocksjni/loggerjnicallback.cc\n\nSummary:\nThis patch fixes the following compile warning.\n    java/rocksjni/loggerjnicallback.cc: In constructor ‘rocksdb::LoggerJniCallback::LoggerJniCallback(JNIEnv*, jobject)’:\n    java/rocksjni/loggerjnicallback.cc:19:14: warning: unused variable ‘rs’ [-Wunused-variable]\n       const jint rs = env->GetJavaVM(&m_jvm);\n                  ^\n\nTest Plan: make rocksdbjavastaticrelease\n\nReviewers: sdong, anthony, IslamAbdelRahman, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D45981",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/loggerjnicallback.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0e6e5472e19a4ad31e6b8b1df900bc1c28062b90"
    },
    {
        "hash": "20c44fefb709043fdd2d12f892cd2d0544702700",
        "author": "Amit Arya",
        "date": "2015-09-02T11:17:02-07:00",
        "message": "t6913679: Use fallocate on LOG FILESS\n\nSummary: Use fallocate on LOG FILES to\n\nTest Plan:\nmake check\n+\n===check with strace===\n\n[arya@devvm1441 ~/rocksdb] strace -e trace=fallocate ./ldb --db=/tmp/test_new scan\nfallocate(3, 01, 0, 4194304)            = 0\n\nReviewers: sdong, anthony, IslamAbdelRahman, kradhakrishnan, lgalanis, rven, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D45969",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/20c44fefb709043fdd2d12f892cd2d0544702700"
    },
    {
        "hash": "90415cfebe90bda845b9ee3e5a00e86d4f80e02e",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-08-31T18:35:12-07:00",
        "message": "Fixed a compile warning in linux32 environment.\n\nSummary:\nFixed the following compile warning in linux32 environment.\n\n    ==> linux32: util/sst_dump_tool.cc: In member function ‘int\n                 rocksdb::SstFileReader::ShowAllCompressionSizes(size_t)’:\n    ==> linux32: util/sst_dump_tool.cc:167:50: warning: format ‘%lu’ expects\n                 argument of type ‘long unsigned int’, but argument 3 has type\n                 ‘size_t {aka unsigned int}’ [-Wformat=]\n    ==> linux32:    fprintf(stdout, \"Block Size: %lu\\n\", block_size);\n\nTest Plan: make sst_dump\n\nReviewers: anthony, IslamAbdelRahman, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D45885",
        "modified_files_count": 1,
        "modified_files": [
            "util/sst_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/90415cfebe90bda845b9ee3e5a00e86d4f80e02e"
    },
    {
        "hash": "9d6503f88dcc50800d071ce3ec970a258c87a7b9",
        "author": "sdong",
        "date": "2015-08-31T16:53:23-07:00",
        "message": "Fix arena_test test break using glibc-2.17\n\nSummary: arena_test is failing with glibc-2.17. Make it more robust\n\nTest Plan: Run arena_test using both of glibc-2.17 and 2.2 and make sure both passes.\n\nReviewers: yhchiang, rven, IslamAbdelRahman, kradhakrishnan, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D45879",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9d6503f88dcc50800d071ce3ec970a258c87a7b9"
    },
    {
        "hash": "18db1e46959f4472a1b4564471de3ffe91491505",
        "author": "agiardullo",
        "date": "2015-08-31T15:56:07-07:00",
        "message": "better db_bench options for transactions\n\nSummary:\nPessimistic Transaction expiration time checking currently causes a performace regression,  Lets disable it in db_bench by default.\n\nAlso, in order to be able to better tune how much contention we're simulating, added new optinos to set lock timeout and snapshot.\n\nTest Plan: run db_bench randomtranansaction\n\nReviewers: sdong, igor, yhchiang, MarkCallaghan\n\nReviewed By: MarkCallaghan\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D45831",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/18db1e46959f4472a1b4564471de3ffe91491505"
    },
    {
        "hash": "0be260523c5e1b995c221853f71394ee172bec17",
        "author": "Igor Canadi",
        "date": "2015-08-31T13:48:26-07:00",
        "message": "Merge pull request #702 from PraveenSinghRao/remove_spurious\n\nremove spurious compression definitions",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/port_win.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0be260523c5e1b995c221853f71394ee172bec17"
    },
    {
        "hash": "64f07deb88f081a4e3c506b806950fa3e1fce0ef",
        "author": "Praveen Rao",
        "date": "2015-08-28T11:17:02-07:00",
        "message": "remove spurious compression definitions",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/port_win.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/64f07deb88f081a4e3c506b806950fa3e1fce0ef"
    },
    {
        "hash": "72a9b73c9e820e13583778e17424c189bd5cbc08",
        "author": "Andres Noetzli",
        "date": "2015-08-28T11:13:20-07:00",
        "message": "Removed unnecessary checks in DBTest.ApproximateMemoryUsage\n\nSummary:\nJust realized that after D45675, part of the code in\nDBTest.ApproximateMemoryUsage, does not really test anything anymore, so I\nremoved it.\n\nTest Plan: make clean all check\n\nReviewers: rven, igor, sdong, anthony, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D45783",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/72a9b73c9e820e13583778e17424c189bd5cbc08"
    },
    {
        "hash": "e853191c17eb85f527d0e495a612fd0679b241ea",
        "author": "Andres Noetzli",
        "date": "2015-08-27T16:17:08-07:00",
        "message": "Fix DBTest.ApproximateMemoryUsage\n\nSummary:\nThis patch fixes two issues in DBTest.ApproximateMemoryUsage:\n- It was possible that a flush happened between getting the two properties in\n  Phase 1, resulting in different numbers for the properties and failing the\n  assertion. This is fixed by waiting for the flush to finish before getting\n  the properties.\n- There was a similar issue in Phase 2 and additionally there was an issue that\n  rocksdb.size-all-mem-tables was not monotonically increasing because it was\n  possible that a flush happened just after getting the properties and then\n  another flush just before getting the properties in the next round. In this\n  situation, the reported memory usage decreased. This is fixed by forcing a\n  flush before getting the properties.\n\nNote: during testing, I found that kFlushesPerRound does not seem very\naccurate. I added a TODO for this and it would be great to get some input on\nwhat to do there.\n\nTest Plan:\nThe first issue can be made more likely to trigger by inserting a\n`usleep(10000);` between the calls to GetIntProperty() in Phase 1.\nThe second issue can be made more likely to trigger by inserting a\n`if (r != 0) usleep(10000);` before the calls to GetIntProperty() and a\n`usleep(10000);` after the calls.\nThen execute make db_test && ./db_test --gtest_filter=DBTest.ApproximateMemoryUsage\n\nReviewers: rven, yhchiang, igor, sdong, anthony\n\nReviewed By: anthony\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D45675",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e853191c17eb85f527d0e495a612fd0679b241ea"
    },
    {
        "hash": "8ef0144e2f077c6891a6b3f5a81a9989376d7f63",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-08-26T18:27:23-07:00",
        "message": "Add argument --show_table_properties to db_bench\n\nSummary:\nAdd argument --show_table_properties to db_bench\n\n  -show_table_properties (If true, then per-level table properties will be\n    printed on every stats-interval when stats_interval is set and\n    stats_per_interval is on.) type: bool default: false\n\nTest Plan:\n./db_bench --show_table_properties=1 --stats_interval=100000 --stats_per_interval=1\n./db_bench --show_table_properties=1 --stats_interval=100000 --stats_per_interval=1 --num_column_families=2\n\nSample Output:\n\n    Compaction Stats [column_family_name_000001]\n    Level    Files   Size(MB) Score Read(GB)  Rn(GB) Rnp1(GB) Write(GB) Wnew(GB) Moved(GB) W-Amp Rd(MB/s) Wr(MB/s) Comp(sec) Comp(cnt) Avg(sec) Stall(cnt)  KeyIn KeyDrop\n    ---------------------------------------------------------------------------------------------------------------------------------------------------------------------\n      L0      3/0          5   0.8      0.0     0.0      0.0       0.0      0.0       0.0   0.0      0.0     86.3         0        17    0.021          0       0      0\n      L1      5/0          9   0.9      0.0     0.0      0.0       0.0      0.0       0.0   0.0      0.0      0.0         0         0    0.000          0       0      0\n      L2      9/0         16   0.2      0.0     0.0      0.0       0.0      0.0       0.0   0.0      0.0      0.0         0         0    0.000          0       0      0\n     Sum     17/0         31   0.0      0.0     0.0      0.0       0.0      0.0       0.0   1.0      0.0     86.3         0        17    0.021          0       0      0\n     Int      0/0          0   0.0      0.0     0.0      0.0       0.0      0.0       0.0   1.0      0.0     83.9         0         2    0.022          0       0      0\n    Flush(GB): cumulative 0.030, interval 0.004\n    Stalls(count): 0 level0_slowdown, 0 level0_numfiles, 0 memtable_compaction, 0 leveln_slowdown_soft, 0 leveln_slowdown_hard\n\n    Level[0]: # data blocks=2571; # entries=84813; raw key size=2035512; raw average key size=24.000000; raw value size=8481300; raw average value size=100.000000; data block size=5690119; index block size=82415; filter block size=0; (estimated) table size=5772534; filter policy name=N/A;\n    Level[1]: # data blocks=4285; # entries=141355; raw key size=3392520; raw average key size=24.000000; raw value size=14135500; raw average value size=100.000000; data block size=9487353; index block size=137377; filter block size=0; (estimated) table size=9624730; filter policy name=N/A;\n    Level[2]: # data blocks=7713; # entries=254439; raw key size=6106536; raw average key size=24.000000; raw value size=25443900; raw average value size=100.000000; data block size=17077893; index block size=247269; filter block size=0; (estimated) table size=17325162; filter policy name=N/A;\n    Level[3]: # data blocks=0; # entries=0; raw key size=0; raw average key size=0.000000; raw value size=0; raw average value size=0.000000; data block size=0; index block size=0; filter block size=0; (estimated) table size=0; filter policy name=N/A;\n    Level[4]: # data blocks=0; # entries=0; raw key size=0; raw average key size=0.000000; raw value size=0; raw average value size=0.000000; data block size=0; index block size=0; filter block size=0; (estimated) table size=0; filter policy name=N/A;\n    Level[5]: # data blocks=0; # entries=0; raw key size=0; raw average key size=0.000000; raw value size=0; raw average value size=0.000000; data block size=0; index block size=0; filter block size=0; (estimated) table size=0; filter policy name=N/A;\n    Level[6]: # data blocks=0; # entries=0; raw key size=0; raw average key size=0.000000; raw value size=0; raw average value size=0.000000; data block size=0; index block size=0; filter block size=0; (estimated) table size=0; filter policy name=N/A;\n\nReviewers: anthony, IslamAbdelRahman, MarkCallaghan, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D45651",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8ef0144e2f077c6891a6b3f5a81a9989376d7f63"
    },
    {
        "hash": "16ebe3a2a9ac911cd89c16f275e4912cec22a2af",
        "author": "Igor Canadi",
        "date": "2015-08-26T14:51:38-07:00",
        "message": "Mmap reads should not return error if reading past file\n\nSummary:\nCurrently, mmap returns IOError when user tries to read data past the end of the file. This diff changes the behavior. Now, we return just the bytes that we can, and report the size we returned via a Slice result. This is consistent with non-mmap behavior and also pread() system call.\n\nThis diff is taken out of D45123.\n\nTest Plan: make check\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D45645",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/16ebe3a2a9ac911cd89c16f275e4912cec22a2af"
    },
    {
        "hash": "9ccf1bd3e24f59bdaa934de5a42b3598a00fb66a",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-08-25T16:45:23-07:00",
        "message": "Correct the comment for GetProperty() API.\n\nSummary:\n\"rocksdb.aggregated-table-properties\" and \"rocksdb.aggregated-table-properties-at-level<N>\"\nshould belong to GetProperty() instead of GetIntProperty(), but the comment mistakenly\nclassifies them to GetIntProperty().\n\nThis patch fix this comment error.\n\nTest Plan: no code change.\n\nReviewers: sdong, anthony, IslamAbdelRahman, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D45561",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9ccf1bd3e24f59bdaa934de5a42b3598a00fb66a"
    },
    {
        "hash": "bab9934d9e709fa1ac663d039cdc1b6463c3f842",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-08-25T14:02:03-07:00",
        "message": "Fix build failure caused by bad merge.\n\nSummary: There was a bad merge during refresh.\n\nTest Plan: make -j all; make check\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D45555",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_tailing_iter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bab9934d9e709fa1ac663d039cdc1b6463c3f842"
    },
    {
        "hash": "5bf890762282477e446dc7666a7ac85dcd782c89",
        "author": "Dmitri Smirnov",
        "date": "2015-08-20T14:14:02-07:00",
        "message": "More indent adjustment.",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5bf890762282477e446dc7666a7ac85dcd782c89"
    },
    {
        "hash": "e2a9f43d640db8abcc51c6b66e1d8354b6713b15",
        "author": "Dmitri Smirnov",
        "date": "2015-08-20T14:10:51-07:00",
        "message": "Adjust indent",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e2a9f43d640db8abcc51c6b66e1d8354b6713b15"
    },
    {
        "hash": "137c376675e03fa66e4c6b7c7f9ca95963012019",
        "author": "Ari Ekmekji",
        "date": "2015-08-19T08:52:22-07:00",
        "message": "Removing variables used only in assertions to prevent build error\n\nSummary:\nA couple variables were declared but only used in assertions\nwhich causes issues when building in fbcode.\n\nTest Plan: make dbg  and   make release\n\nReviewers: yhchiang, sdong, igor, anthony, MarkCallaghan\n\nReviewed By: MarkCallaghan\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D44937",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/137c376675e03fa66e4c6b7c7f9ca95963012019"
    },
    {
        "hash": "b2df20a890f552740c4c0a3c043669489c8d7b75",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-08-18T13:19:55-07:00",
        "message": "Make HashCuckooRep::ApproximateMemoryUsage() return reasonable estimation.\n\nSummary:\nHashCuckooRep::ApproximateMemoryUsage() previously return\nstd::numeric_limits<size_t>::max() when it cannot accept more\nentries.  This patch makes it return a more reasonable estimation.\n\nThis change is necessary in order to make GetIntProperty(\"rocksdb.cur-size-all-mem-tables\")\nhandles HashCuckooRep properly in diff https://reviews.facebook.net/D44229.\n\nTest Plan: db_test\n\nReviewers: sdong, anthony, IslamAbdelRahman, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D44241",
        "modified_files_count": 1,
        "modified_files": [
            "util/hash_cuckoo_rep.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b2df20a890f552740c4c0a3c043669489c8d7b75"
    },
    {
        "hash": "601b1aaca02f77f5e928cca55bdb578498cdfb53",
        "author": "Ari Ekmekji",
        "date": "2015-08-18T12:27:12-07:00",
        "message": "Fixing Failed Assertion in Subcompaction State Diff\n\nSummary:\nIn D43239 (https://reviews.facebook.net/D43239) there is an\nassertion to make sure a subcompaction's output is never empty at the\nend of execution. This assertion however breaks the build because some\ntests lead to exactly that scenario. So instead I have altered the logic\nto handle this case instead of just failing the assertion.\n\nThe reason that it is possible for a subcompaction's output to be empty is\nthat during a sequential execution of subcompactions, if a user aborts the\ncompaction job then some of the later subcompactions to be executed may\nhave yet to process any keys and therefore have yet to generate output files.\nThis becomes very rare once the subcompactions are executed in parallel,\nbut for now they are still sequential so the case is possible when there is an\nearly termination, as in some of the tests.\n\nTest Plan: ./db_test  ./db_compaction_test\n\nReviewers: sdong, igor, anthony, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D44877",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/601b1aaca02f77f5e928cca55bdb578498cdfb53"
    },
    {
        "hash": "dc9d5634fd0c51be2c4fdf0ba5467375af67c653",
        "author": "Islam AbdelRahman",
        "date": "2015-08-13T11:17:10-07:00",
        "message": "Change master to 3.14\n\nSummary: Change master version to 3.14\n\nTest Plan: simple change\n\nReviewers: sdong, yhchiang, kradhakrishnan, rven, anthony, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D44187",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dc9d5634fd0c51be2c4fdf0ba5467375af67c653"
    },
    {
        "hash": "c2868cbc52ca655f5ae28bcd07c4f9fbf0868da9",
        "author": "Islam AbdelRahman",
        "date": "2015-08-11T14:47:14-07:00",
        "message": "Use manual_compaction for compaction_job_test\n\nSummary:\nUnder certain conditions (disable compression) the compactions that are created in compaction_job_test will pass the trivial_move conditions\nThis will cause problems since we assert that we dont run a compaction if it's a trivial move\nhttps://github.com/facebook/rocksdb/blob/master/db/compaction_job.cc#L144-L147\n\nfor example when we disable compression, compactions become a valid trivial move and the assert fails\nhttps://ci-builds.fb.com/view/rocksdb/job/rocksdb_no_compression/180/console\n\nTest Plan: compaction_job_test\n\nReviewers: sdong, yhchiang, noetzli, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D43983",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c2868cbc52ca655f5ae28bcd07c4f9fbf0868da9"
    },
    {
        "hash": "1ae27113c7d4f760fa846fedf3761c3b76481e5f",
        "author": "Nathan Bronson",
        "date": "2015-08-11T11:25:22-07:00",
        "message": "reduce comparisons by skiplist\n\nSummary:\nKey comparison is the single largest CPU user for CPU-bound\nworkloads. This diff reduces the number of comparisons in two ways.\n\nThe first is that it moves predecessor array gathering from\nFindGreaterOrEqual to FindLessThan, so that FindGreaterOrEqual can\nreturn immediately if compare_ returns 0.  As part of this change I\nmoved the sequential insertion optimization into Insert, to remove the\nundocumented (and smelly) requirement that prev must be equal to prev_\nif it is non-null.\n\nThe second optimization is that all of the search functions skip calling\ncompare_ when moving to a lower level that has the same Next pointer.\nWith a branching factor of 4 we would expect this to happen 1/4 of\nthe time.\n\nOn a single-threaded CPU-bound workload (-benchmarks=fillrandom -threads=1\n-batch_size=1 -memtablerep=skip_list -value_size=0 --num=1600000\n-level0_slowdown_writes_trigger=9999 -level0_stop_writes_trigger=9999\n-disable_auto_compactions --max_write_buffer_number=8\n-max_background_flushes=8 --disable_wal --write_buffer_size=160000000)\non my dev server this is good for a 7% perf win.\n\nTest Plan: unit tests\n\nReviewers: rven, ljin, yhchiang, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D43233",
        "modified_files_count": 1,
        "modified_files": [
            "db/skiplist.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1ae27113c7d4f760fa846fedf3761c3b76481e5f"
    },
    {
        "hash": "a9dcc0a6380d2acc48ce0e0efcaf286d6e35edb8",
        "author": "Islam AbdelRahman",
        "date": "2015-08-10T11:30:36-07:00",
        "message": "Fix clang build\n\nSummary:\nhttps://ci-builds.fb.com/view/rocksdb/job/rocksdb_clang_build/893/console\nFixing clang build\n\nTest Plan:\nmake clean\nUSE_CLANG=1 make all -j64\n\nReviewers: sdong, noetzli, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D43959",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a9dcc0a6380d2acc48ce0e0efcaf286d6e35edb8"
    },
    {
        "hash": "2cf0f4f471f8040263fdc5b80cc8a300fba378f6",
        "author": "Yoshinori Matsunobu",
        "date": "2015-08-10T09:43:30-07:00",
        "message": "Adding wal_recovery_mode log message\n\nSummary:\nwal_recovery_mode setting was not written to LOG. This diff\nadds the log message\n\nTest Plan: manually checked\n\nReviewers: kradhakrishnan, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D43953",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2cf0f4f471f8040263fdc5b80cc8a300fba378f6"
    },
    {
        "hash": "22dcaaff30917e3922ad29254529c1e20031c1b0",
        "author": "Islam AbdelRahman",
        "date": "2015-08-07T15:37:56-07:00",
        "message": "More accurate time measurement for delete_scheduler_test\n\nSummary: Start measuring time spent before BackgroundEmptyTrash starts\n\nTest Plan: delete_scheduler_test\n\nReviewers: yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D43857",
        "modified_files_count": 1,
        "modified_files": [
            "util/delete_scheduler_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/22dcaaff30917e3922ad29254529c1e20031c1b0"
    },
    {
        "hash": "0093271ee07596ec3701274da9e2a933965ffbff",
        "author": "Siying Dong",
        "date": "2015-08-07T11:50:45-07:00",
        "message": "Merge pull request #685 from flandr/fix-tls-build\n\nFix OSX + Windows build",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0093271ee07596ec3701274da9e2a933965ffbff"
    },
    {
        "hash": "ac04a6cfb80a7e7074b70f5fcf678312b390a957",
        "author": "Nate Rosenblum",
        "date": "2015-08-07T10:47:05-07:00",
        "message": "Fix OSX + Windows build\n\nCommit 257ee89 added a static destruction helper to avoid notional\n\"leaks\" of TLS on main thread exit. This helper fails to compile on\nOS X (and presumably Windows, though I haven't checked), which lacks\nthe __thread storage class StaticMeta::tls_ member.\n\nThis patch fixes the builds. Do note that the static cleanup mechanism\nmay be somewhat brittle and atexit(3) may be a more suitable approach\nto releasing the main thread's TLS if it's highly desirable for this\nmemory to not be reported \"reachable\" by Valgrind at exit.",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ac04a6cfb80a7e7074b70f5fcf678312b390a957"
    },
    {
        "hash": "40f893f4a9f4fcd9dd725884631b584b4db16579",
        "author": "Islam AbdelRahman",
        "date": "2015-08-06T10:56:00-07:00",
        "message": "Fix delete_scheduler_test valgrind error\n\nSummary: Use shared_ptr instead of deleting in destructor\n\nTest Plan: DISABLE_JEMALLOC=1 make delete_scheduler_test -j64 && valgrind --error-exitcode=2 --leak-check=full ./delete_scheduler_test\n\nReviewers: yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D43659",
        "modified_files_count": 1,
        "modified_files": [
            "util/delete_scheduler_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/40f893f4a9f4fcd9dd725884631b584b4db16579"
    },
    {
        "hash": "7d364d0d9402be99dc24cc845d37a0cd0949d3c2",
        "author": "Poornima Chozhiyath Raman",
        "date": "2015-08-05T16:38:12-07:00",
        "message": "Fix build failure\n\nSummary: fix the build failure\n\nTest Plan: make all\n\nReviewers: sdong, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D43623",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7d364d0d9402be99dc24cc845d37a0cd0949d3c2"
    },
    {
        "hash": "9aec75fbb932fa7e1782436d28e490c554788608",
        "author": "Islam AbdelRahman",
        "date": "2015-08-05T11:47:07-07:00",
        "message": "Enable DBTest.FlushSchedule under TSAN\n\nSummary: This patch will fix the false positive of DBTest.FlushSchedule under TSAN, we dont need to disable this test\n\nTest Plan: COMPILE_WITH_TSAN=1 make -j64 db_test && ./db_test --gtest_filter=\"DBTest.FlushSchedule\"\n\nReviewers: yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D43599",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9aec75fbb932fa7e1782436d28e490c554788608"
    },
    {
        "hash": "bd2fc5f5fbe637bfacb0813be52aa9a8bc48b70c",
        "author": "Islam AbdelRahman",
        "date": "2015-08-05T11:45:31-07:00",
        "message": "Fix TSAN for delete_scheduler_test\n\nSummary: Fixing TSAN false positive and relaxing the conditions when we are running under TSAN\n\nTest Plan: COMPILE_WITH_TSAN=1 make -j64 delete_scheduler_test && ./delete_scheduler_test\n\nReviewers: yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D43593",
        "modified_files_count": 1,
        "modified_files": [
            "util/delete_scheduler_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bd2fc5f5fbe637bfacb0813be52aa9a8bc48b70c"
    },
    {
        "hash": "f5d072ae6c8186b58e38f73f9c906a715cbf3645",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-08-04T17:01:08-07:00",
        "message": "Fixed RocksJava test failure of shouldSetTestCappedPrefixExtractor\n\nSummary:\nFixed RocksJava test failure of shouldSetTestCappedPrefixExtractor\nby adding the missing native implementation of\nuseCappedPrefixExtractor.\n\nTest Plan:\nmake jclean\nmake rocksdbjava -j32\nmake jtest\n\nReviewers: igor, anthony, IslamAbdelRahman, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D43551",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f5d072ae6c8186b58e38f73f9c906a715cbf3645"
    },
    {
        "hash": "241bb2aef3e592360cdd25ffaa26c3c19f90ed59",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-08-04T15:47:05-07:00",
        "message": "Make DBCompactionTest.SkipStatsUpdateTest more stable.\n\nSummary:\nMake DBCompactionTest.SkipStatsUpdateTest more stable by\nremoving flaky but unnecessary assertion on the size of db\nas simply checking the random file open count is suffice.\n\nTest Plan: db_compaction_test\n\nReviewers: igor, anthony, IslamAbdelRahman, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D43533",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/241bb2aef3e592360cdd25ffaa26c3c19f90ed59"
    },
    {
        "hash": "d5c0a6da6c5ea02fb0db0a900716f2369142a69f",
        "author": "Boyang Zhang",
        "date": "2015-08-04T10:56:49-07:00",
        "message": "Merge branch 'master' of github.com:facebook/rocksdb\n\nFixed memory leak error",
        "modified_files_count": 1,
        "modified_files": [
            "util/sst_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d5c0a6da6c5ea02fb0db0a900716f2369142a69f"
    },
    {
        "hash": "2d41403f457ed21873ef14657aecc30e94c50d4a",
        "author": "Boyang Zhang",
        "date": "2015-08-04T10:55:42-07:00",
        "message": "Made change to fix the memory leak\n\nSummary: So I took a look and I used a pointer to TableBuilder.  Changed it to a unique_ptr.  I think this should work, but I cannot run valgrind correctly on my local machine to test it.\n\nTest Plan: Run valgrind, but it's not working locally.  It says I'm executing an unrecognized instruction.\n\nReviewers: yhchiang\n\nSubscribers: dhruba, sdong\n\nDifferential Revision: https://reviews.facebook.net/D43485",
        "modified_files_count": 1,
        "modified_files": [
            "util/sst_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2d41403f457ed21873ef14657aecc30e94c50d4a"
    },
    {
        "hash": "92f7039eec437cb507668f6d0d47d4c1ccd79374",
        "author": "sdong",
        "date": "2015-08-04T10:48:44-07:00",
        "message": "fix memory corruption issue in sst_dump --show_compression_sizes\n\nSummary: In \"sst_dump --show_compression_sizes\", a reference of CompressionOptions is kept in TableBuilderOptions, which is destroyed later, causing a memory issue.\n\nTest Plan: Run valgrind against SSTDumpToolTest.CompressedSizes and make sure it is fixed\n\nReviewers: IslamAbdelRahman, yhchiang, kradhakrishnan, rven\n\nReviewed By: rven\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D43497",
        "modified_files_count": 1,
        "modified_files": [
            "util/sst_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/92f7039eec437cb507668f6d0d47d4c1ccd79374"
    },
    {
        "hash": "be8621ffafe34ac5e4560a70b0e795eee6f2bc6b",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-08-03T20:53:15-07:00",
        "message": "Fix compile warning in compact_on_deletion_collector in some environment\n\nSummary: Fix compile warning in compact_on_deletion_collector some environment\n\nTest Plan: make\n\nReviewers: igor, sdong, anthony, IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D43467",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/table_properties_collectors/compact_on_deletion_collector.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/be8621ffafe34ac5e4560a70b0e795eee6f2bc6b"
    },
    {
        "hash": "87df6295dd3b2e50eb6dd7becc6dd61be45d9b1d",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-08-03T15:52:52-07:00",
        "message": "Make SuggestCompactRangeNoTwoLevel0Compactions deterministic\n\nSummary:\nMade SuggestCompactRangeNoTwoLevel0Compactions by forcing\na flush after generating a file and waiting for compaction at the end.\n\nTest Plan: Run SuggestCompactRangeNoTwoLevel0Compactions\n\nReviewers: yhchiang, igor, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D43449",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/87df6295dd3b2e50eb6dd7becc6dd61be45d9b1d"
    },
    {
        "hash": "47316c2d084a11790f50a1f5a88b306c2928e3c5",
        "author": "sdong",
        "date": "2015-08-03T11:02:09-07:00",
        "message": "dump_manifest supports DB with more number of levels\n\nSummary: Now ldb dump_manifest refuses to work if there are 20 levels. Extend the limit to 64.\n\nTest Plan: Run the tool with 20 number of levels\n\nReviewers: kradhakrishnan, anthony, IslamAbdelRahman, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42879",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/47316c2d084a11790f50a1f5a88b306c2928e3c5"
    },
    {
        "hash": "bd852bf118586f556dee660a6ce7ce80715fe4e8",
        "author": "Andres Noetzli",
        "date": "2015-07-31T14:11:43-07:00",
        "message": "Fixed typos in db_stress\n\nSummary: Fixed typos.\n\nTest Plan: None\n\nReviewers: igor, yhchiang, sdong, anthony, rven\n\nReviewed By: rven\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D43365",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bd852bf118586f556dee660a6ce7ce80715fe4e8"
    },
    {
        "hash": "544be638ab52adad3cc83607c83758b1ed090da2",
        "author": "Andres Noetzli",
        "date": "2015-07-30T17:46:47-07:00",
        "message": "Fixing fprintf of non string literal\n\nSummary:\nsst_dump_tool contains two instances of `fprintf`s where the `format` argument is not\na string literal. This prevents the code from compiling with some compilers/compiler\noptions because of the potential security risks associated with printing non-literals.\n\nTest Plan: make all\n\nReviewers: rven, igor, yhchiang, sdong, anthony\n\nReviewed By: anthony\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D43305",
        "modified_files_count": 1,
        "modified_files": [
            "util/sst_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/544be638ab52adad3cc83607c83758b1ed090da2"
    },
    {
        "hash": "193dc977e758a1378396ab1f73e69ddde0e9210e",
        "author": "Andres Notzli",
        "date": "2015-07-30T16:59:03-07:00",
        "message": "Fixing dead code in table_properties_collector_test\n\nSummary:\nThere was a bug in table_properties_collector_test that this patch\nis fixing: `!backward_mode && !test_int_tbl_prop_collector` in\nTestCustomizedTablePropertiesCollector was never true, so the code\nin the if-block never got executed. The reason is that the\nCustomizedTablePropertiesCollector test was skipping tests with\n`!backward_mode_ && !encode_as_internal`. The reason for skipping\nthe tests is unknown.\n\nTest Plan: make table_properties_collector_test && ./table_properties_collector_test\n\nReviewers: rven, igor, yhchiang, anthony, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D43281",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_properties_collector_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/193dc977e758a1378396ab1f73e69ddde0e9210e"
    },
    {
        "hash": "14f413760246685b376166209eba1a3324d706e4",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-07-24T16:29:05-07:00",
        "message": "Correct the comment of DB::GetApproximateSizes\n\nSummary: Correct the comment of DB::GetApproximateSizes\n\nTest Plan: no code change\n\nReviewers: igor, anthony, IslamAbdelRahman, kradhakrishnan, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D42939",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/14f413760246685b376166209eba1a3324d706e4"
    },
    {
        "hash": "82f148ef97a0c9405d81290e903aaa9ebfaccf72",
        "author": "sdong",
        "date": "2015-07-22T13:46:56-07:00",
        "message": "Fix test DBCompactionTest.PartialCompactionFailure undeterministic failure\n\nSummary: DBCompactionTest.PartialCompactionFailure has a risk that one flush job writes out two mem tables into one file, so that the total files flushed are less than expected. Fix it by writing for flush to finish after every write.\n\nTest Plan: Run the test\n\nReviewers: IslamAbdelRahman, kradhakrishnan, yhchiang, anthony\n\nReviewed By: anthony\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42831",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_compaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/82f148ef97a0c9405d81290e903aaa9ebfaccf72"
    },
    {
        "hash": "4922af6f8d0a69ea271559f396268c6163f31dd1",
        "author": "Mike Kolupaev",
        "date": "2015-07-22T12:37:49-07:00",
        "message": "fixed DBTest.GetPropertiesOfAllTablesTest and DBTest.GetUserDefinedTablaProperties flakiness\n\nSummary: These tests used to fail if a compaction happened between flushing tables and enumerating them to get properties.\n\nTest Plan: this reports occasional failures without this diff and no failures with it: `for i in {1..10000}; do echo $i; done | parallel --gnu -j100 'TEST_TMPDIR=`TMPDIR=/dev/shm/rockstemp mktemp -d -t` ./db_test --gtest_filter=DBTest.GetUserDefinedTablaProperties >&/dev/null || echo {} failed'`\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42861",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4922af6f8d0a69ea271559f396268c6163f31dd1"
    },
    {
        "hash": "3bf9f9a8323239c30d835a89161ec2d015bc12e2",
        "author": "Mike Kolupaev",
        "date": "2015-07-22T12:27:39-07:00",
        "message": "cleaned up PosixMmapFile a little\n\nSummary: https://reviews.facebook.net/D42321 has left PosixMmapFile in some weird state. This diff removes pending_sync_ that was now unused, fixes indentation and prevents Fsync() from calling both fsync() and fdatasync().\n\nTest Plan: `make -j check`\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42885",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3bf9f9a8323239c30d835a89161ec2d015bc12e2"
    },
    {
        "hash": "02b635fa3854d652ab87d3e176c005daf5037db4",
        "author": "sdong",
        "date": "2015-07-21T17:13:23-07:00",
        "message": "Fix undeterministic failure of DBTest.GetPropertiesOfAllTablesTest\n\nSummary: DBTest.GetPropertiesOfAllTablesTest generates four files and expects four files there, but a L0->L1 comapction can trigger to compact to one single file. Fix it by raising level 0 number of file compaction trigger\n\nTest Plan: Run it many times and see it never fails.\n\nReviewers: kradhakrishnan, IslamAbdelRahman, yhchiang, anthony\n\nReviewed By: anthony\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42789",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/02b635fa3854d652ab87d3e176c005daf5037db4"
    },
    {
        "hash": "a75f23eb871b4981d9e784f763e08dcc3e8c0437",
        "author": "krad",
        "date": "2015-07-20T12:37:54-07:00",
        "message": "Relax assertions in unit DropWrites to be more permissible\n\nSummary: This unit test is blocking our release since it fails under certain\ncompiler versions. The failure is due to a race in the unit test and not the\ncore functionality.\n\nTest Plan: Run locally\n\nReviewers: sdong\n\nCC: leveldb\n\nTask ID: #7760955\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a75f23eb871b4981d9e784f763e08dcc3e8c0437"
    },
    {
        "hash": "ee80432ff8eb4176a49b84f1104761e82bf10eb7",
        "author": "sdong",
        "date": "2015-07-20T11:56:12-07:00",
        "message": "db_bench add an option of --universal_allow_trivial_move\n\nSummary: Now we allow trivial move in universal compaction. Add a parameter in db_bench\n\nTest Plan: Run db_bench with this option on and off and make sure the option is switched correctly.\n\nReviewers: yhchiang, igor, kradhakrishnan, anthony\n\nReviewed By: anthony\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D41427",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ee80432ff8eb4176a49b84f1104761e82bf10eb7"
    },
    {
        "hash": "58b4209e051de96d865eca96d1abc398a9535a7b",
        "author": "sdong",
        "date": "2015-07-20T11:51:57-07:00",
        "message": "Trigger non-trivial compaction in fault_injection_test\n\nSummary: Now the major test cases of fault_injection_test only insert keys in sorted order so compactions will be trivial move. Add a new mode to insert in non-sequential order to trigger non-trivial compactions.\n\nTest Plan: Run the test\n\nReviewers: kradhakrishnan, anthony, IslamAbdelRahman, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42435",
        "modified_files_count": 1,
        "modified_files": [
            "db/fault_injection_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/58b4209e051de96d865eca96d1abc398a9535a7b"
    },
    {
        "hash": "59eca2cc9991ee10fd1af54e5e022a04aef2f819",
        "author": "Islam AbdelRahman",
        "date": "2015-07-20T11:35:10-07:00",
        "message": "Make memenv_test runnable in ROCKSDB_LITE\n\nSummary: Make memenv_test runnable in ROCKSDB_LITE\n\nTest Plan: memenv_test\n\nReviewers: sdong, igor, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42123",
        "modified_files_count": 1,
        "modified_files": [
            "util/memenv_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/59eca2cc9991ee10fd1af54e5e022a04aef2f819"
    },
    {
        "hash": "ce9712d34099893a3671ee8479b14d405d3c4d55",
        "author": "Islam AbdelRahman",
        "date": "2015-07-20T11:19:51-07:00",
        "message": "Make mock_env_test runnable in ROCKSDB_LITE\n\nSummary: Make mock_env_test runnable in ROCKSDB_LITE\n\nTest Plan: mock_env_test\n\nReviewers: igor, sdong, yhchiang, kradhakrishnan, anthony\n\nReviewed By: anthony\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42585",
        "modified_files_count": 1,
        "modified_files": [
            "util/mock_env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ce9712d34099893a3671ee8479b14d405d3c4d55"
    },
    {
        "hash": "c06d1d83932be91e344893a23b1ffb6cbd7bbf61",
        "author": "Islam AbdelRahman",
        "date": "2015-07-20T11:17:52-07:00",
        "message": "Make merge_test runnable in ROCKSDB_LITE\n\nSummary: Make merge_test runnable in ROCKSDB_LITE\n\nTest Plan: merge_test\n\nReviewers: igor, sdong, yhchiang, kradhakrishnan, anthony\n\nReviewed By: anthony\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42579",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c06d1d83932be91e344893a23b1ffb6cbd7bbf61"
    },
    {
        "hash": "144d2910db47e69f701f8a7706f395516a2e68ba",
        "author": "Islam AbdelRahman",
        "date": "2015-07-20T11:15:16-07:00",
        "message": "Block backupable_db_test_lite in ROCKSDB_LITE\n\nSummary: BackupableDB is not supported in ROCKSDB_LITE, blocking backupable_db_test_lite\n\nTest Plan: backupable_db_test\n\nReviewers: sdong, igor, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42165",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/144d2910db47e69f701f8a7706f395516a2e68ba"
    },
    {
        "hash": "0d1d9aeebef4d4cfe87575522373b7dae1ff6a1c",
        "author": "Islam AbdelRahman",
        "date": "2015-07-20T11:12:02-07:00",
        "message": "Block plain_table_db_test in ROCKSDB_LITE\n\nSummary: Block plain_table_db_test in ROCKSDB_LITE since plain table is not supported in ROCKSDB_LITE\n\nTest Plan: plain_table_db_test\n\nReviewers: igor, sdong, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42159",
        "modified_files_count": 1,
        "modified_files": [
            "db/plain_table_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0d1d9aeebef4d4cfe87575522373b7dae1ff6a1c"
    },
    {
        "hash": "4853e228ef4515d1e30880b39057c4434c72ac3d",
        "author": "Islam AbdelRahman",
        "date": "2015-07-20T11:09:14-07:00",
        "message": "Make table_test runnable in ROCKSDB_LITE\n\nSummary: Remove plain table tests from table_test since plain table is not supported in ROCKSDB_LITE\n\nTest Plan: table_test\n\nReviewers: igor, sdong, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42153",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4853e228ef4515d1e30880b39057c4434c72ac3d"
    },
    {
        "hash": "f0fe9126f270adbe507822dc0639fd1b33d2ae5b",
        "author": "Islam AbdelRahman",
        "date": "2015-07-20T10:54:15-07:00",
        "message": "Fix compile for write_callback_test in ROCKSDB_LITE\n\nSummary: Add main for write_callback_test when compiled under ROCKSDB_LITE\n\nTest Plan: write_callback_test\n\nReviewers: igor, sdong, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42147",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_callback_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f0fe9126f270adbe507822dc0639fd1b33d2ae5b"
    },
    {
        "hash": "20922c4a5a1c5250a94b6de06d9d63978cd24f8a",
        "author": "Islam AbdelRahman",
        "date": "2015-07-20T10:46:09-07:00",
        "message": "Make compaction_picker_test runnable in ROCKSDB_LITE\n\nSummary: Remove universal and fifo compaction tests from ROCKSDB_LITE since they are not supported\n\nTest Plan: compaction_picker_test\n\nReviewers: sdong, igor, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42129",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/20922c4a5a1c5250a94b6de06d9d63978cd24f8a"
    },
    {
        "hash": "26ca893198f73793e81214bf844b4d5805df4b12",
        "author": "Islam AbdelRahman",
        "date": "2015-07-17T12:54:30-07:00",
        "message": "Block document_db_test in ROCKSDB_LITE\n\nSummary: DocumentDB is not supported in ROCKSDB_LITE\n\nTest Plan: document_db_test\n\nReviewers: yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42177",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/document/document_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/26ca893198f73793e81214bf844b4d5805df4b12"
    },
    {
        "hash": "aede5cd8e6d1626c566e3362ae6d4db526811783",
        "author": "Siying Dong",
        "date": "2015-07-16T18:06:11-07:00",
        "message": "Merge pull request #656 from qinzuoyan/fb-master\n\nfix append bug in DumpDBFileSummary()",
        "modified_files_count": 1,
        "modified_files": [
            "util/db_info_dumper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aede5cd8e6d1626c566e3362ae6d4db526811783"
    },
    {
        "hash": "ac2b9367fe3fdc0c526d458a24818f9c4fbe6141",
        "author": "sdong",
        "date": "2015-07-16T12:17:24-07:00",
        "message": "Fix a typo in variable\n\nSummary: Typo seqeuntial -> sequential in db/fault_injection_test.cc\n\nTest Plan: Build it\n\nReviewers: ott, igor, anthony, kradhakrishnan, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42417",
        "modified_files_count": 1,
        "modified_files": [
            "db/fault_injection_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ac2b9367fe3fdc0c526d458a24818f9c4fbe6141"
    },
    {
        "hash": "e4af3bfb27679abdb22e5c6e33ecf23abb9f8f54",
        "author": "Andres Notzli",
        "date": "2015-07-16T09:18:35-07:00",
        "message": "Test for compaction of corrupted keys\n\nSummary:\nFixes T7697334. Adds a simple test to check whether CompactionJob deals\nwith corrupted keys correctly. Right now, we preserve corrupted keys.\nNote: depending on the type of corruption and options like comparators,\nCompactionJob fails. This test just checks whether corrupted keys that\ndo not fail CompactionJob are preserved.\n\nTest Plan:\n`make compaction_job_test && ./compaction_job_test` -> Tests pass.\nAdd `input->Next(); continue;` in CompactionJob::ProcessKeyValueCompaction()\ninside then-branch of `!ParseInternalKey(key, &ikey)` -> Tests fail.\n\nReviewers: sdong, rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D42237",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e4af3bfb27679abdb22e5c6e33ecf23abb9f8f54"
    },
    {
        "hash": "c5bca53198054fba6cf501ba6695b9740c42f88e",
        "author": "Igor Canadi",
        "date": "2015-07-16T11:22:21+02:00",
        "message": "Fix compile on Mac\n\nSummary: as title\n\nTest Plan: compiles\n\nReviewers: lovro\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D42411",
        "modified_files_count": 1,
        "modified_files": [
            "util/heap_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c5bca53198054fba6cf501ba6695b9740c42f88e"
    },
    {
        "hash": "487bba4348bb182fd07327c876eda7e7803e5577",
        "author": "qinzuoyan",
        "date": "2015-07-16T13:56:17+08:00",
        "message": "extend temp str buffer size",
        "modified_files_count": 1,
        "modified_files": [
            "util/db_info_dumper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/487bba4348bb182fd07327c876eda7e7803e5577"
    },
    {
        "hash": "84c3577af98a88b5fc8e6b077594b8b8acf083c9",
        "author": "qinzuoyan",
        "date": "2015-07-16T12:02:03+08:00",
        "message": "fix append bug in DumpDBFileSummary()",
        "modified_files_count": 1,
        "modified_files": [
            "util/db_info_dumper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/84c3577af98a88b5fc8e6b077594b8b8acf083c9"
    },
    {
        "hash": "43e98256254baeacdbc6a9af90385ec68c1cda3d",
        "author": "agiardullo",
        "date": "2015-07-15T18:24:02-07:00",
        "message": "Fix mongo build -take 2\n\nSummary: quick fix for now.  will figure out a better fix soon\n\nTest Plan: build\n\nReviewers: sdong, igor, kradhakrishnan\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D42381",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/convenience.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/43e98256254baeacdbc6a9af90385ec68c1cda3d"
    },
    {
        "hash": "d8263d95849a88ad7484136e786b936091525910",
        "author": "agiardullo",
        "date": "2015-07-15T17:56:37-07:00",
        "message": "Unbreak mongo build\n\nSummary: Unbreak build for mongo.  later, we'll have to figure out if there is a platform independent way to implement ROCKSDB_WARNING\n\nTest Plan: build\n\nReviewers: igor, sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D42369",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/convenience.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d8263d95849a88ad7484136e786b936091525910"
    },
    {
        "hash": "12c5528a897a6103ebe0183a93af57607522a1be",
        "author": "Igor Canadi",
        "date": "2015-07-15T16:03:20-07:00",
        "message": "Bump to RocksDB 3.13\n\nSummary: master is now 3.13-to-be. I'm testing some internal stuff that has #ifdef based on RocksDB version.\n\nTest Plan: none\n\nReviewers: sdong, anthony\n\nReviewed By: anthony\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D42249",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/12c5528a897a6103ebe0183a93af57607522a1be"
    },
    {
        "hash": "c613960690f53aa15e570faf095971963cc564a7",
        "author": "krad",
        "date": "2015-07-15T11:25:10-07:00",
        "message": "Build fix.\n\nSummary: gcc-4.9-glibc-2.20 complains about uninitialized variable.\n\ndb/compaction_picker.cc: In member function 'bool\nrocksdb::CompactionPicker::IsInputNonOverlapping(rocksdb::Compaction*)':\ndb/compaction_picker.cc:1174:17: error:\n'prev.rocksdb::{anonymous}::InputFileInfo::f' may be used uninitialized in this\nfunction [-Werror=maybe-uninitialized]\n   InputFileInfo prev, curr, next;\n\nTest Plan: pmake on local environment\n\nReviewers: sdong igor\n\nCC: leveldb@\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c613960690f53aa15e570faf095971963cc564a7"
    },
    {
        "hash": "2c8de0ecae3503339c892dc013afb817ebe22f0a",
        "author": "Aaron Feldman",
        "date": "2015-07-15T10:21:09-07:00",
        "message": "Update --help message in db_bench.\n\nSummary:\nRemove --help entry for readhot.\n\nUpdate read_random_exp_range flag description: The distribution is num *\nexp(-r), not num * exp(r).\n\nTest Plan: Run ./db_bench --help\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42303",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2c8de0ecae3503339c892dc013afb817ebe22f0a"
    },
    {
        "hash": "9a6a0bd8c975d41451468f580587cc2ecb00c244",
        "author": "Igor Canadi",
        "date": "2015-07-15T09:36:47+02:00",
        "message": "Style fix in compaction_job.cc\n\nSummary: I didn't know this can work :)\n\nTest Plan: none\n\nReviewers: sdong, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D42081",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9a6a0bd8c975d41451468f580587cc2ecb00c244"
    },
    {
        "hash": "ddad40e930427dadca1037a602f53bda25a4834a",
        "author": "Andres Notzli",
        "date": "2015-07-14T23:12:34-07:00",
        "message": "Fixed nullptr deref and added assert\n\nSummary:\nFixes two minor issues in CompactionJob.\nCompactionJob::Run() dereferences log_buffer_ without a check, so\nthis patch adds an assert in the constructor where log_buffer_\nis assigned. compaction_job_stats_ can be null but\nProcessKeyValueCompaction was dereferencing it without a check.\n\nTest Plan: make && make check\n\nReviewers: sdong, rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D42231",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ddad40e930427dadca1037a602f53bda25a4834a"
    },
    {
        "hash": "49640bd82fcb5e566aa4e2498794db555c756023",
        "author": "Islam AbdelRahman",
        "date": "2015-07-14T10:35:35-07:00",
        "message": "Allow write_batch_test to run with ROCKSDB_LITE\n\nSummary: Remove ColumnFamiliesBatchWithIndexTest from ROCKSDB_LITE since WriteBatchWithIndex is not supported\n\nTest Plan: write_batch_test\n\nReviewers: yhchiang, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D42033",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/49640bd82fcb5e566aa4e2498794db555c756023"
    },
    {
        "hash": "04d201fa0b539479d7ec8ccfb7a89bf1c4aab887",
        "author": "Islam AbdelRahman",
        "date": "2015-07-13T18:35:03-07:00",
        "message": "Block spatial_db_test in ROCKSDB_LITE\n\nSummary: Block spatial_db_test in ROCKSDB_LITE as SpatialDB is not supported\n\nTest Plan: spatial_db_test\n\nReviewers: yhchiang, igor, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D41991",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/04d201fa0b539479d7ec8ccfb7a89bf1c4aab887"
    },
    {
        "hash": "e8e8c9049960d3a1ef48b80a65d8282b455ba621",
        "author": "Islam AbdelRahman",
        "date": "2015-07-13T16:42:40-07:00",
        "message": "fix compile for optimistic_transaction_test under ROCKSDB_LITE\n\nSummary: Adding a main for optimistic_transaction_test that report that it was skipped when using ROCKSDB_LITE\n\nTest Plan: optimistic_transaction_test\n\nReviewers: yhchiang, sdong, igor, anthony\n\nReviewed By: anthony\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D41979",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/transactions/optimistic_transaction_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e8e8c9049960d3a1ef48b80a65d8282b455ba621"
    },
    {
        "hash": "7189e90c2206c6825ae0459e5f424e437723d1bc",
        "author": "krad",
        "date": "2015-07-09T13:43:52-07:00",
        "message": "Fix a noisy unit test.\n\nSummary: The t/DBTest.DropWrites test still fails under certain gcc version in release unit test.\n\nI unfortunately cannot repro the failure (since the compilers have mapped library which I am not able to map to correctly). I am suspecting the clock skew.\n\nTest Plan: Run make check\n\nReviewers:\n\nCC: sdong igore\n\nTask ID: #7312624\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7189e90c2206c6825ae0459e5f424e437723d1bc"
    },
    {
        "hash": "1f4d56570946f79377fcec2e12ee26d3c8053d5a",
        "author": "Aaron Feldman",
        "date": "2015-07-09T13:36:16-07:00",
        "message": "Add db_bench flag to set cache_index_and_filter_blocks\n\nSummary:\nThe new flag --cache_index_and_filter_blocks sets\nBlockBasedTableOptions.cache_index_and_filter_blocks\n\nTest Plan: make db_bench. Working on benchmarks with the new flag.\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D41481",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1f4d56570946f79377fcec2e12ee26d3c8053d5a"
    },
    {
        "hash": "e2e3d84b2c3727d6bb05fd18b4d97136e3a144c8",
        "author": "krad",
        "date": "2015-07-08T14:39:00-07:00",
        "message": "Added multi WAL log testing to recovery tests.\n\nSummary: Currently there is no test in the suite to test the case where\nthere are multiple WAL files and there is a corruption in one of them. We have\ntests for single WAL file corruption scenarios. Added tests to mock\nthe scenarios for all combinations of recovery modes and corruption in\nspecified file locations.\n\nTest Plan: Run make check\n\nReviewers: sdong igor\n\nCC: leveldb@\n\nTask ID: #7501229\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e2e3d84b2c3727d6bb05fd18b4d97136e3a144c8"
    },
    {
        "hash": "4f56632b16d8ae62b7e9dd6087e22d6c161e49a9",
        "author": "agiardullo",
        "date": "2015-07-07T16:10:23-07:00",
        "message": "Fix occasional failure in compaction_job_test\n\nSummary: Coverage test has been occasionally failing due to this timing check.\n\nTest Plan: run test\n\nReviewers: yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D41367",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4f56632b16d8ae62b7e9dd6087e22d6c161e49a9"
    },
    {
        "hash": "411c8e3d198cdc2d72751b39f4a005e024fc071f",
        "author": "Poornima Chozhiyath Raman",
        "date": "2015-07-07T15:21:17-07:00",
        "message": "Build fail fix\n\nSummary: Build fail fix. Type cast issues.\n\nTest Plan: compiled\n\nReviewers: sdong, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D41349",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/411c8e3d198cdc2d72751b39f4a005e024fc071f"
    },
    {
        "hash": "d8e3e766f9344f9e386bb8524b204c11fabbb776",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-07-07T14:00:03-07:00",
        "message": "Fixed a bug in test ThreadStatusSingleCompaction\n\nSummary:\nFixed a bug in test ThreadStatusSingleCompaction where\nSyncPoint traces are not cleared before the test begins\nits second iteration.\n\nTest Plan: db_test\n\nReviewers: sdong, anthony, IslamAbdelRahman, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D41337",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d8e3e766f9344f9e386bb8524b204c11fabbb776"
    },
    {
        "hash": "57d216ea6518c7f34eaea6538690bc52e6c605d1",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-07-07T12:45:06-07:00",
        "message": "Remove assert(current_ == CurrentReverse()) in MergingIterator::Prev()\n\nSummary:\nRemove assert(current_ == CurrentReverse()) in MergingIterator::Prev()\nbecause it is possible to have some keys larger than the seek-key\ninserted between Seek() and SeekToLast(), which makes current_ not\nequal to CurrentReverse().\n\nTest Plan: db_stress\n\nReviewers: igor, sdong, IslamAbdelRahman, anthony\n\nReviewed By: anthony\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D41331",
        "modified_files_count": 1,
        "modified_files": [
            "table/merger.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/57d216ea6518c7f34eaea6538690bc52e6c605d1"
    },
    {
        "hash": "e12b403991217c5472135a1e2f8faad1b915d011",
        "author": "Aaron Feldman",
        "date": "2015-07-07T10:49:16-07:00",
        "message": "Initialize threads later in constructor\n\nSummary: This addresses a test failure where an exception occured in the constructor's call to CreateDirIfMissing(). The existence of unjoined threads prevented this exception from propogating properly. See http://stackoverflow.com/questions/7381757/c-terminate-called-without-an-active-exception\n\nTest Plan: Re-run tests from task #7626266\n\nReviewers: sdong, anthony, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D41313",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e12b403991217c5472135a1e2f8faad1b915d011"
    },
    {
        "hash": "58d7ab3c68b05d544499fb32692662a29a9c6b24",
        "author": "Andres Notzli",
        "date": "2015-07-06T22:25:27-07:00",
        "message": "Added tests for ExpandWhileOverlapping()\n\nSummary:\nThis patch adds three test cases for ExpandWhileOverlapping()\nto the compaction_picker_test test suite.\nExpandWhileOverlapping() only has an effect if the comparison\nfunction for the internal keys allows for overlapping user\nkeys in different SST files on the same level. Thus, this\npatch adds a comparator based on sequence numbers to\ncompaction_picker_test for the new test cases.\n\nTest Plan:\n- make compaction_picker_test && ./compaction_picker_test\n  -> All tests pass\n- Replace body of ExpandWhileOverlapping() with `return true`\n  -> Compile and run ./compaction_picker_test as before\n  -> New tests fail\n\nReviewers: sdong, yhchiang, rven, anthony, IslamAbdelRahman, kradhakrishnan, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D41277",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/58d7ab3c68b05d544499fb32692662a29a9c6b24"
    },
    {
        "hash": "155ce60dafbc3841da73eedf0d9dc6c4fabd8404",
        "author": "Igor Canadi",
        "date": "2015-07-06T11:14:08-07:00",
        "message": "Fix compaction_job_test\n\nSummary:\nTwo issues:\n* the input keys to the compaction don't include sequence number.\n* sequence number is set to max(seq_num), but it should be set to max(seq_num)+1, because the condition here is strictly-larger (i.e. we will only zero-out sequence number if the DB's sequence number is strictly greater than the key's sequence number): https://github.com/facebook/rocksdb/blob/master/db/compaction_job.cc#L830\n\nTest Plan: make compaction_job_test && ./compaction_job_test\n\nReviewers: sdong, lovro\n\nReviewed By: lovro\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D41247",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/155ce60dafbc3841da73eedf0d9dc6c4fabd8404"
    },
    {
        "hash": "e25ee32e3d7e8ddcb28f1466e67f5ff930450b57",
        "author": "Dmitri Smirnov",
        "date": "2015-07-02T17:41:05-07:00",
        "message": "Arena needs mman header for mmap",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e25ee32e3d7e8ddcb28f1466e67f5ff930450b57"
    },
    {
        "hash": "acee2b08a2d37154b8f9e2dc74b1966202c15ec5",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-07-02T16:10:31-07:00",
        "message": "Fixed endless loop in DBIter::FindPrevUserKey()\n\nSummary: Fixed endless loop in DBIter::FindPrevUserKey()\n\nTest Plan: ./db_stress --test_batches_snapshots=1 --threads=32 --write_buffer_size=4194304 --destroy_db_initially=0 --reopen=20 --readpercent=45 --prefixpercent=5 --writepercent=35 --delpercent=5 --iterpercent=10 --db=/tmp/rocksdb_crashtest_KdCI5F --max_key=100000000 --mmap_read=0 --block_size=16384 --cache_size=1048576 --open_files=500000 --verify_checksum=1 --sync=0 --progress_reports=0 --disable_wal=0 --disable_data_sync=1 --target_file_size_base=2097152 --target_file_size_multiplier=2 --max_write_buffer_number=3 --max_background_compactions=20 --max_bytes_for_level_base=10485760 --filter_deletes=0 --memtablerep=prefix_hash --prefix_size=7 --ops_per_thread=200 --kill_random_test=97\n\nReviewers: tnovak, igor, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D41085",
        "modified_files_count": 1,
        "modified_files": [
            "table/merger.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/acee2b08a2d37154b8f9e2dc74b1966202c15ec5"
    },
    {
        "hash": "e70115e71b74e6cce9484fcf2ded7ecb2d77ece3",
        "author": "Aaron Feldman",
        "date": "2015-07-02T12:27:35-07:00",
        "message": "Fix unity build by removing anonymous namespace\n\nSummary: see title\n\nTest Plan: run 'make unity'\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D41079",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e70115e71b74e6cce9484fcf2ded7ecb2d77ece3"
    },
    {
        "hash": "326da912ded287e5209be08961e34d72857a5a75",
        "author": "Dmitri Smirnov",
        "date": "2015-07-01T17:21:38-07:00",
        "message": "Add string.h to Histogram as we init the array out of curly braces",
        "modified_files_count": 1,
        "modified_files": [
            "util/histogram.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/326da912ded287e5209be08961e34d72857a5a75"
    },
    {
        "hash": "19e13a595d9c2a8d34511d519f5f924f2fa4bde9",
        "author": "Dmitri Smirnov",
        "date": "2015-07-01T16:35:51-07:00",
        "message": "Fix header inclusion",
        "modified_files_count": 1,
        "modified_files": [
            "port/dirent.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/19e13a595d9c2a8d34511d519f5f924f2fa4bde9"
    },
    {
        "hash": "b0f1927dbb7a104c1d20cea69af4e45d8535a17a",
        "author": "krad",
        "date": "2015-06-30T11:11:56-07:00",
        "message": "Increasing timeout for drop writes.\n\nSummary: We have a race in the way test works. We avoided the race by adding the\nwait to the counter. I thought 1s was eternity, but that is not true in some\nscenarios. Increasing the timeout to 10s and adding warnings.\n\nAlso, adding nosleep to avoid the case where the wakeup thread is waiting behind\nthe sleeping thread for scheduling.\n\nTest Plan: Run make check\n\nReviewers: siying igorcanadi\n\nCC: leveldb@\n\nTask ID: #7312624\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b0f1927dbb7a104c1d20cea69af4e45d8535a17a"
    },
    {
        "hash": "501591c4233f7b24bf15a4e29f19d672af6d7d91",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-06-29T14:39:01-07:00",
        "message": "Make column_family_test runnable in ROCKSDB_LITE\n\nSummary: Make column_family_test runnable in ROCKSDB_LITE.\n\nTest Plan: column_family_test\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D40251",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/501591c4233f7b24bf15a4e29f19d672af6d7d91"
    },
    {
        "hash": "6199cba9987e4c57481b053e9764bbaaafe3de65",
        "author": "krad",
        "date": "2015-06-29T11:40:21-07:00",
        "message": "Fix race in unit test.\n\nSummary: Avoid falling victim to race condition.\n\nTest Plan: Run the unit test\n\nReviewers: sdong igor\n\nCC: leveldb@\n\nTask ID: #7312624\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6199cba9987e4c57481b053e9764bbaaafe3de65"
    },
    {
        "hash": "619167ee66e57316f126312066c19d3da5277eda",
        "author": "Igor Canadi",
        "date": "2015-06-26T10:29:24-07:00",
        "message": "Fix mac compile\n\nSummary: as title\n\nTest Plan: make check\n\nReviewers: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D40785",
        "modified_files_count": 1,
        "modified_files": [
            "tools/dump/rocksdb_dump.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/619167ee66e57316f126312066c19d3da5277eda"
    },
    {
        "hash": "62a8fd154a4d16307be1daa3aa3bf9625fa2667f",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-06-24T15:01:43-07:00",
        "message": "Make stringappend_test runnable in ROCKSDB_LITE\n\nSummary: Make stringappend_test runnable in ROCKSDB_LITE\n\nTest Plan: stringappend_test\n\nReviewers: sdong, rven, anthony, kradhakrishnan, IslamAbdelRahman, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D40593",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/merge_operators/string_append/stringappend_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/62a8fd154a4d16307be1daa3aa3bf9625fa2667f"
    },
    {
        "hash": "48da7a9cad76f1a736e54a495525c7721f4a9967",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-06-24T15:00:51-07:00",
        "message": "Improve the comment for BYTES_READ in statistics.\n\nSummary:\nBYTES_READ only count the number of logical bytes read from\nthe DB::Get() function.  It neither includes all logical bytes read\nnor indicates IO read bytes.\n\nThis patch improves the comment for BYTES_READ.\n\nTest Plan: Only change comment.\n\nReviewers: sdong, rven, anthony, kradhakrishnan, IslamAbdelRahman, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D40599",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/statistics.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/48da7a9cad76f1a736e54a495525c7721f4a9967"
    },
    {
        "hash": "72cab8895958b6522eb93107cc6dc570902f5c7a",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-06-24T01:44:21-07:00",
        "message": "Block redis_test in ROCKSDB_LITE\n\nSummary: Block redis_test in ROCKSDB_LITE as utilities not supported in ROCKSDB_LITE.\n\nTest Plan: redis_test\n\nReviewers: sdong, igor, rven, anthony, kradhakrishnan, IslamAbdelRahman\n\nReviewed By: IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D40587",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/redis/redis_lists_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/72cab8895958b6522eb93107cc6dc570902f5c7a"
    },
    {
        "hash": "dec2c9f564d7015f1a0855a1011ac030816dfadf",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-06-24T01:38:53-07:00",
        "message": "Make table_properties_collector_test runnable in ROCKSDB_LITE\n\nSummary: Make table_properties_collector_test runnable in ROCKSDB_LITE\n\nTest Plan: table_properties_collector_test\n\nReviewers: sdong, rven, anthony, kradhakrishnan, IslamAbdelRahman, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D40581",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_properties_collector_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dec2c9f564d7015f1a0855a1011ac030816dfadf"
    },
    {
        "hash": "530534fcebebfb39847e7ccfa37ab82ccfa7fbad",
        "author": "Islam AbdelRahman",
        "date": "2015-06-22T15:20:30-07:00",
        "message": "Fix trivial move merge\n\nSummary: Fixing bad merge\n\nTest Plan: make -j64 check (this is not enough to verify the fix)\n\nReviewers: igor, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D40521",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/530534fcebebfb39847e7ccfa37ab82ccfa7fbad"
    },
    {
        "hash": "e1d3c7dbe42a9812ae6ab8e4e3ca5cf2ed8438cd",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-06-19T20:21:23-07:00",
        "message": "Fixing valgrind error in checkpoint_test\n\nSummary: Fixed a valgrind issue in checkpoint_test\n\nTest Plan: valgrind on checkpoint_test\n\nReviewers: igor, anthony\n\nReviewed By: anthony\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D40455",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/checkpoint/checkpoint_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e1d3c7dbe42a9812ae6ab8e4e3ca5cf2ed8438cd"
    },
    {
        "hash": "18cc5018b7454d931cff623302c5e7216f112f99",
        "author": "Aaron Feldman",
        "date": "2015-06-19T09:43:08-07:00",
        "message": "Fix memory leaks in PinnedUsageTest\n\nSummary: See title\n\nTest Plan: Run valgrind ./cache_test\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: anthony, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D40419",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/18cc5018b7454d931cff623302c5e7216f112f99"
    },
    {
        "hash": "bf03f59c1180e75bdc7eea03eb50df61f680b7a3",
        "author": "Igor Canadi",
        "date": "2015-06-18T18:46:26-07:00",
        "message": "Disable CompressLevelCompaction() if Zlib is not supported\n\nSummary: CompressLevelCompaction() depends on Zlib. We should skip it when zlib is not present.\n\nTest Plan: `make check` without zlib\n\nReviewers: yhchiang\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D40401",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bf03f59c1180e75bdc7eea03eb50df61f680b7a3"
    },
    {
        "hash": "df719d49643e37c2bc07d288bd0e77f10dbb8f8e",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-06-18T15:58:00-07:00",
        "message": "Make autovector_test runnable in ROCKSDB_LITE\n\nSummary: Make autovector_test runnable in ROCKSDB_LITE\n\nTest Plan: autovector_test\n\nReviewers: sdong, rven, anthony, kradhakrishnan, IslamAbdelRahman, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D40245",
        "modified_files_count": 1,
        "modified_files": [
            "util/autovector_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/df719d49643e37c2bc07d288bd0e77f10dbb8f8e"
    },
    {
        "hash": "4d6d47688c27161ead30b3c4eedba35c32c7cb5d",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-06-18T15:57:19-07:00",
        "message": "Block geodb_test in ROCKSDB_LITE\n\nSummary:\nBlock geodb_test in ROCKSDB_LITE as geodb is not supported\nin ROCKSDB_LITE\n\nTest Plan: geodb_test\n\nReviewers: sdong, rven, anthony, kradhakrishnan, IslamAbdelRahman, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D40335",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/geodb/geodb_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4d6d47688c27161ead30b3c4eedba35c32c7cb5d"
    },
    {
        "hash": "f06be62fd2d1c71a47457e470b5f776bd00613a1",
        "author": "Poornima Chozhiyath Raman",
        "date": "2015-06-17T20:44:26-07:00",
        "message": "Replace %llu with format macros in ParsedInternalKey::DebugString())\n\nTest Plan: successfully compiled the code\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D40233",
        "modified_files_count": 1,
        "modified_files": [
            "db/dbformat.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f06be62fd2d1c71a47457e470b5f776bd00613a1"
    },
    {
        "hash": "2dc3910b5e56afdaeea7133d6fe17a89e3f7e75a",
        "author": "Igor Canadi",
        "date": "2015-06-17T16:44:52-07:00",
        "message": "Add --benchmark_write_rate_limit option to db_bench\n\nSummary:\nSo far, we benchmarked RocksDB by writing as fast as possible. With this change, we're able to limit our write throughput, which should help us better understand how RocksDB performes under varying write workloads.\n\nSpecifically, I'm currently interested in the shape of the graph that has write throughput on one axis and write rate on another. This should help us with designing our stall system, as we have started to do with D36351.\n\nTest Plan:\n    $ ./db_bench --benchmarks=fillrandom --benchmark_write_rate_limit=1000000\n    fillrandom   :     118.523 micros/op 8437 ops/sec;    0.9 MB/s\n    $ ./db_bench --benchmarks=fillrandom --benchmark_write_rate_limit=2000000\n    fillrandom   :      59.136 micros/op 16910 ops/sec;    1.9 MB/s\n\nReviewers: MarkCallaghan, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39759",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2dc3910b5e56afdaeea7133d6fe17a89e3f7e75a"
    },
    {
        "hash": "bee8d033f4323fc4e49934dc948627f3e56341c5",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-06-12T10:45:02-07:00",
        "message": "Removed two unused macros in iostats_context\n\nSummary: Removed two unused macros in iostats_context\n\nTest Plan: make all check\n\nReviewers: sdong, rven, IslamAbdelRahman, kradhakrishnan, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D40005",
        "modified_files_count": 1,
        "modified_files": [
            "util/iostats_context_imp.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bee8d033f4323fc4e49934dc948627f3e56341c5"
    },
    {
        "hash": "5fec963877543e1bc1865050bcfa86ec69252a88",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-06-12T10:44:07-07:00",
        "message": "Fixed false alarm of size comparison in compaction_job_stats_test\n\nSummary: Fixed false alarm of size comparison in compaction_job_stats_test\n\nTest Plan: compaction_job_stats_test\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39921",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job_stats_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5fec963877543e1bc1865050bcfa86ec69252a88"
    },
    {
        "hash": "ab455ce495bea2833e163715f6e39f2eea6cfbba",
        "author": "Islam AbdelRahman",
        "date": "2015-06-11T14:32:10-07:00",
        "message": "fix clang build",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ab455ce495bea2833e163715f6e39f2eea6cfbba"
    },
    {
        "hash": "51440f83ec82b4b3fa54c1963f58d07a8b2c2810",
        "author": "Igor Canadi",
        "date": "2015-06-10T10:42:15-07:00",
        "message": "Fix compile\n\nSummary: Ooops, sorry about this.\n\nTest Plan: compiles\n\nReviewers: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39885",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/write_batch_with_index/write_batch_with_index.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/51440f83ec82b4b3fa54c1963f58d07a8b2c2810"
    },
    {
        "hash": "62c3a95796fdf1926cfe89acf89a1285e44c5af4",
        "author": "Igor Canadi",
        "date": "2015-06-09T13:10:31-07:00",
        "message": "Add test for iteration+mutation of WBWI\n\nSummary: We should support use-cases that mutate WBWI while they're iterating it. This diff adds a unit test to check this behavior.\n\nTest Plan: this is a test\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39501",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/write_batch_with_index/write_batch_with_index_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/62c3a95796fdf1926cfe89acf89a1285e44c5af4"
    },
    {
        "hash": "21f2492ac0d5f5a020e72d25d893ade2d37a6b5d",
        "author": "sdong",
        "date": "2015-06-08T11:35:22-07:00",
        "message": "Fix CYGWin release build\n\nSummary: Change from one std::to_string() to ToString() for Cygwin build\n\nTest Plan: Build it under cygwin\n\nReviewers: rven, anthony, IslamAbdelRahman, igor, kradhakrishnan\n\nReviewed By: igor, kradhakrishnan\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D39657",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/write_batch_with_index/write_batch_with_index_internal.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/21f2492ac0d5f5a020e72d25d893ade2d37a6b5d"
    },
    {
        "hash": "f02ce0c6514d9695ea5991df123c02cb226cb4c9",
        "author": "Igor Canadi",
        "date": "2015-06-08T11:28:40-07:00",
        "message": "Fix ASAN errors in c_test\n\nSummary: key_sizes claims that 3rd key is of length 8, but it's really only 3. This diff makes it length 8.\n\nTest Plan: asan c_test works again.\n\nReviewers: sdong, yhchiang\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39699",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f02ce0c6514d9695ea5991df123c02cb226cb4c9"
    },
    {
        "hash": "31e60e2a773559139181917d7590ea29ff6bcf08",
        "author": "Islam AbdelRahman",
        "date": "2015-06-05T11:06:14-07:00",
        "message": "Unlock mutex in ReFitLevel\n\nSummary: I encountered an issue where the database hang, it looks like the mutex is not unlocked on return in ReFitLevel function\n\nTest Plan: make -j64 check\n\nReviewers: yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D39609",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/31e60e2a773559139181917d7590ea29ff6bcf08"
    },
    {
        "hash": "b2785472c8f927e8da68222a4cf34d24bafac29e",
        "author": "Igor Canadi",
        "date": "2015-06-05T09:41:45-04:00",
        "message": "Fix compile\n\nSummary:\nThis commit broke the compile: https://github.com/facebook/rocksdb/commit/3ce3bb3da2486c2c18a332128dda7c05a91abb85\nAs evidenced here: https://evergreen.mongodb.com/task/mongodb_mongo_master_ubuntu1404_rocksdb_compile_ce2b1d11d42de93f7b375f7e6c41fb709f66e969_15_06_04_23_09_36\n\nThis should fix it\n\nTest Plan: make check\n\nReviewers: IslamAbdelRahman\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39627",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b2785472c8f927e8da68222a4cf34d24bafac29e"
    },
    {
        "hash": "2d0b9e5f0a1e4f85c9282978bba14273bd6fff26",
        "author": "Igor Canadi",
        "date": "2015-06-03T16:52:51-04:00",
        "message": "Fix compile on darwin\n\nSummary: We need to start doing some CI on Macs.\n\nTest Plan: works now\n\nReviewers: yhchiang\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39489",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job_stats_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2d0b9e5f0a1e4f85c9282978bba14273bd6fff26"
    },
    {
        "hash": "3af668ed1759321660a24a8edf8d45bdb0ce8342",
        "author": "sdong",
        "date": "2015-06-03T12:08:37-07:00",
        "message": "Fix DBTest.MigrateToDynamicLevelMaxBytesBase slowness with valgrind\n\nSummary:\nDBTest.MigrateToDynamicLevelMaxBytesBase with valgrind test is\nextremely slow. Work it around by not having both threads running\neverything non-stop.\n\nTest Plan: Run the test with valgrind which used to take too long to finish and see it finish in reasonable time.\n\nReviewers: yhchiang, anthony, rven, kradhakrishnan, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D39477",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3af668ed1759321660a24a8edf8d45bdb0ce8342"
    },
    {
        "hash": "0483dab2abcbd8bde9d6eea756c370c685934667",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-06-02T18:38:57-07:00",
        "message": "Remove a TODO that has been done\n\nSummary: Remove a TODO that has been done\n\nTest Plan: make\n\nReviewers: sdong, igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39429",
        "modified_files_count": 1,
        "modified_files": [
            "db/event_helpers.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0483dab2abcbd8bde9d6eea756c370c685934667"
    },
    {
        "hash": "3083ed2129df7ff7ec5b44f939a5c2412f27e8b5",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-06-02T16:23:01-07:00",
        "message": "Fixed heap-use-after-free error in compaction_job_test.cc\n\nSummary: Fixed heap-use-after-free error in compaction_job_test.cc\n\nTest Plan: compaction_job_test\n\nReviewers: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39411",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3083ed2129df7ff7ec5b44f939a5c2412f27e8b5"
    },
    {
        "hash": "8d8d4e45ba24f4f7bea86774caab3788271dbf4f",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-06-02T14:27:46-07:00",
        "message": "Fixed ROCKSDB_LITE compile error due to the missing of TableFileCreationInfo\n\nSummary: Fixed ROCKSDB_LITE compile error due to the missing of TableFileCreationInfo\n\nTest Plan: make OPT=-DROCKSDB_LITE shared_lib -j32\n\nReviewers: sdong, igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39405",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/listener.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8d8d4e45ba24f4f7bea86774caab3788271dbf4f"
    },
    {
        "hash": "ab946af08ae6e753e52564bbeeab792cc10f26fe",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-06-02T14:20:27-07:00",
        "message": "Fix a compile warning in listener_test.cc\n\nSummary:\nFixed the following compile warning in listener_test.cc:\ndb/listener_test.cc:214:8: error: 'OnTableFileCreated' overrides a member function but is not marked 'override' [-Werror,-Winconsistent-missing-override]\n14:16:46   void OnTableFileCreated(\n\nTest Plan:\nmake listener_test\n\nReviewers: sdong, igor\n\nSubscribers: leveldb",
        "modified_files_count": 1,
        "modified_files": [
            "db/listener_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ab946af08ae6e753e52564bbeeab792cc10f26fe"
    },
    {
        "hash": "ac81130fa03a21075be3e0e7d9a93eae12783d47",
        "author": "sdong",
        "date": "2015-06-02T10:00:58-07:00",
        "message": "Fix Bug: CompactRange() doesn't change to correct level caused by using wrong level\n\nSummary: In previous change https://reviews.facebook.net/D39099 , while renaming parameters, use a wrong parameter, causing CompactRange() to compact not wrong level.\n\nTest Plan: Run \"DBTest.MigrateToDynamicLevelMaxBytesBase\" which failed with the patch.\n\nReviewers: rven, yhchiang, kradhakrishnan, igor, anthony\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D39393",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ac81130fa03a21075be3e0e7d9a93eae12783d47"
    },
    {
        "hash": "495ce6018a1f7fabc3675bbee1320a3b1c38e9f0",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-06-01T14:59:51-07:00",
        "message": "Fixed compile warning in compact_files_example.cc\n\nSummary: Fixed compile warning in compact_files_example.cc\n\nTest Plan: compact_files_example\n\nReviewers: sdong, igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39309",
        "modified_files_count": 1,
        "modified_files": [
            "examples/compact_files_example.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/495ce6018a1f7fabc3675bbee1320a3b1c38e9f0"
    },
    {
        "hash": "16c197627a58761035bb3c99d44723233e3b401e",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-05-30T14:26:00-07:00",
        "message": "Fixed db_stress\n\nSummary:\nFixed db_stress by correcting the verification of column family\nnames in the Listener of db_stress\n\nTest Plan: db_stress\n\nReviewers: igor, sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39255",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/16c197627a58761035bb3c99d44723233e3b401e"
    },
    {
        "hash": "bc7a7a400c8f7bee11395b023a6d38aa601f7e6d",
        "author": "agiardullo",
        "date": "2015-05-29T15:22:00-07:00",
        "message": "fix LITE build\n\nSummary: Broken by optimistic transaction diff.  (I only built 'release' not 'static_lib' when testing).\n\nTest Plan: build\n\nReviewers: yhchiang, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39219",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bc7a7a400c8f7bee11395b023a6d38aa601f7e6d"
    },
    {
        "hash": "832271f6b156c270bd1dbf41cc4e82d6721d25a1",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-05-29T15:00:25-07:00",
        "message": "Fixed a compile warning in db_stress in NDEBUG mode.\n\nSummary: Fixed a compile warning in db_stress in NDEBUG mode.\n\nTest Plan: make OPT=-DNDEBUG db_stress\n\nReviewers: sdong, anthony\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39213",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/832271f6b156c270bd1dbf41cc4e82d6721d25a1"
    },
    {
        "hash": "d5a0c0e69ba42eafa23de1f19f3d53465b90319f",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-05-29T13:37:59-07:00",
        "message": "Fixed a compile warning in db_stress\n\nSummary:\nFixed the following compile warning in db_stress:\nerror: 'OnCompactionCompleted' overrides a member function but is not marked 'override' [-Werror,-Winconsistent-missing-override]\n\nTest Plan: make db_stress\n\nReviewers: sdong, igor, anthony\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39207",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d5a0c0e69ba42eafa23de1f19f3d53465b90319f"
    },
    {
        "hash": "ebfdb3c7f67b5f5a2a8ebb47adf23591bcb7aa92",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-05-29T13:21:09-07:00",
        "message": "Fixed a compile error in ROCKSDB_LITE\n\nSummary: Fixed a compile error in ROCKSDB_LITE\n\nTest Plan: make db_stress OPT=-DROCKSDB_LITE -j32\n\nReviewers: sdong, igor, anthony\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D39201",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/immutable_options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ebfdb3c7f67b5f5a2a8ebb47adf23591bcb7aa92"
    },
    {
        "hash": "3ab8ffd4dd406d25a4164ea0d7e1aa5b30bca5a8",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-05-26T14:05:38-07:00",
        "message": "Compaction now conditionally boosts the size of deletion entries.\n\nSummary:\nCompaction now boosts the size of deletion entries of a file only when\nthe number of deletion entries is greater than the number of non-deletion\nentries in the file.  The motivation here is that in a stable workload,\nthe number of deletion entries should be roughly equal to the number of\nnon-deletion entries.  If we compensate the size of deletion entries in a\nstable workload, the deletion compensation logic might introduce unwanted\neffet which changes the shape of LSM tree.\n\nTest Plan: db_test --gtest_filter=\"*Deletion*\"\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D38703",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3ab8ffd4dd406d25a4164ea0d7e1aa5b30bca5a8"
    },
    {
        "hash": "6d299b70b853ed8ab0eed7dfdfcf5d1ed1054f26",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-05-26T10:55:46-07:00",
        "message": "Fixed a bug in EventLoggerHelpers::LogTableFileCreation\n\nSummary:\nFixed a missing \"}\" at the end of the generated JSON Log\nin EventLoggerHelpers::LogTableFileCreation.\n\nTest Plan: db_bench\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D38919",
        "modified_files_count": 1,
        "modified_files": [
            "db/event_logger_helpers.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6d299b70b853ed8ab0eed7dfdfcf5d1ed1054f26"
    },
    {
        "hash": "328ad902abf2e1a16122c1566397d12e42bae7eb",
        "author": "Reed Allman",
        "date": "2015-05-22T22:56:32-07:00",
        "message": "update an import path to fit in with the rest of the kids",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_operation.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/328ad902abf2e1a16122c1566397d12e42bae7eb"
    },
    {
        "hash": "32198343ff10ccf892a35ff44dfe72c13b574e26",
        "author": "agiardullo",
        "date": "2015-05-22T16:13:11-07:00",
        "message": "fix typo in c_simple_example\n\nSummary: fix typo\n\nTest Plan: none\n\nReviewers: tfarina, igor\n\nReviewed By: tfarina, igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D37347",
        "modified_files_count": 1,
        "modified_files": [
            "examples/c_simple_example.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/32198343ff10ccf892a35ff44dfe72c13b574e26"
    },
    {
        "hash": "ea6d3a8ac023f10ebabc1d1db4293192a2a1e387",
        "author": "Igor Canadi",
        "date": "2015-05-22T15:30:43-04:00",
        "message": "Don't skip last level when calculating compaction stats\n\nSummary: We have a bug where we don't report the last level's files as being compacted. This fixes it.\n\nTest Plan: See the fix in action here: https://phabricator.fb.com/P19845738\n\nReviewers: MarkCallaghan, sdong\n\nReviewed By: sdong\n\nSubscribers: yhchiang, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D38727",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ea6d3a8ac023f10ebabc1d1db4293192a2a1e387"
    },
    {
        "hash": "5c224d1b70ca873fc77afbd809c2380fc67d5934",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-05-22T12:10:51-07:00",
        "message": "Fixed two bugs on logging file deletion.\n\nSummary:\nThis patch fixes the following two bugs on logging file deletion.\n\n1.  Previously, file deletion failure was only logged in INFO_LEVEL.\n    This patch changes it to ERROR_LEVEL and does some code clean.\n\n2.  EventLogger previously will always generate the same log on\n    table file deletion even when file deletion is not successful.\n    Now the resulting status of file deletion will also be logged.\n\nTest Plan: make all check\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D38817",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5c224d1b70ca873fc77afbd809c2380fc67d5934"
    },
    {
        "hash": "2abb59268825b2f172c97fbed86b1e6834580b18",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-05-22T11:24:12-07:00",
        "message": "Avoid logging under mutex in DBImpl::WriteLevel0TableForRecovery().\n\nSummary: Avoid logging under mutex in DBImpl::WriteLevel0TableForRecovery().\n\nTest Plan: make all check\n\nReviewers: igor, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D38823",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2abb59268825b2f172c97fbed86b1e6834580b18"
    },
    {
        "hash": "812c461c96869ebcd8e629da8f01e1cea01c00ca",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-05-19T18:42:17-07:00",
        "message": "Dump db stats in WARN level\n\nSummary: Dump db stats in WARN level\n\nTest Plan: run db_bench and verify the LOG\n\nReviewers: igor, MarkCallaghan\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D38691",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/812c461c96869ebcd8e629da8f01e1cea01c00ca"
    },
    {
        "hash": "04feaeebb922c3af6fb08762326753d93231e000",
        "author": "Igor Canadi",
        "date": "2015-05-19T10:59:30-07:00",
        "message": "Fix comparison between signed and usigned integers\n\nSummary: Not sure why this fails on some compilers and doesn't on others.\n\nTest Plan: none\n\nReviewers: meyering, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D38673",
        "modified_files_count": 1,
        "modified_files": [
            "db/log_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/04feaeebb922c3af6fb08762326753d93231e000"
    },
    {
        "hash": "74f3832d85e932ed485a4f8d8c01b0adc6b3e502",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-05-18T13:48:56-07:00",
        "message": "Fixed compile errors due to some gcc does not have std::map::emplace\n\nSummary:\nFixed the following compile errors due to some gcc does not have std::map::emplace\n\nutil/thread_status_impl.cc: In static member function ‘static std::map<std::basic_string<char>, long unsigned int> rocksdb::ThreadStatus::InterpretOperationProperties(rocksdb::ThreadStatus::OperationType, const uint64_t*)’:\nutil/thread_status_impl.cc:88:20: error: ‘class std::map<std::basic_string<char>, long unsigned int>’ has no member named ‘emplace’\nutil/thread_status_impl.cc:90:20: error: ‘class std::map<std::basic_string<char>, long unsigned int>’ has no member named ‘emplace’\nutil/thread_status_impl.cc:94:20: error: ‘class std::map<std::basic_string<char>, long unsigned int>’ has no member named ‘emplace’\nutil/thread_status_impl.cc:96:20: error: ‘class std::map<std::basic_string<char>, long unsigned int>’ has no member named ‘emplace’\nutil/thread_status_impl.cc:98:20: error: ‘class std::map<std::basic_string<char>, long unsigned int>’ has no member named ‘emplace’\nutil/thread_status_impl.cc:101:20: error: ‘class std::map<std::basic_string<char>, long unsigned int>’ has no member named ‘emplace’\nmake: *** [util/thread_status_impl.o] Error 1\n\nTest Plan: make db_bench\n\nReviewers: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D38643",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_status_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/74f3832d85e932ed485a4f8d8c01b0adc6b3e502"
    },
    {
        "hash": "0c8017dbae7fa668ceb5aa135f857b34ea6ca8f5",
        "author": "stash93",
        "date": "2015-05-18T23:44:52+03:00",
        "message": "Remove duplicated code\n\nSummary: Call Flush() function instead\n\nTest Plan: make all check\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D38583",
        "modified_files_count": 1,
        "modified_files": [
            "util/posix_logger.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0c8017dbae7fa668ceb5aa135f857b34ea6ca8f5"
    },
    {
        "hash": "fb5bdbf9875bb2c9b583b82eb6d881ac2c39ddc7",
        "author": "sdong",
        "date": "2015-05-18T11:49:45-07:00",
        "message": "DBTest.DynamicLevelMaxBytesCompactRange: make sure L0 is not empty before running compact range\n\nSummary: DBTest.DynamicLevelMaxBytesCompactRange needs to make sure L0 is not empty to properly cover the code paths we want to cover. However, current codes have a bug that might leave the condition not held. Improve the test to ensure it.\n\nTest Plan: Run the test in an environment that is used to fail. Also run it many times.\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D38631",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fb5bdbf9875bb2c9b583b82eb6d881ac2c39ddc7"
    },
    {
        "hash": "84a9c6a53a5fef0c782265201c6b394b5fbe8f40",
        "author": "Holodov Alexander",
        "date": "2015-05-16T15:29:39+04:00",
        "message": "add comment",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/84a9c6a53a5fef0c782265201c6b394b5fbe8f40"
    },
    {
        "hash": "a66f643e97d7926ea3365d883bac4dc91f54a909",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-05-15T15:55:20-07:00",
        "message": "Use a better way to initialize ThreadStatus::kNumOperationProperties.\n\nSummary: Use a better way to initialize ThreadStatus::kNumOperationProperties.\n\nTest Plan: make\n\nReviewers: sdong, rven, anthony, krishnanm86, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D38547",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/thread_status.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a66f643e97d7926ea3365d883bac4dc91f54a909"
    },
    {
        "hash": "7413306d9461fb8fb6242b8448f6808e9f148b71",
        "author": "Igor Canadi",
        "date": "2015-05-15T14:14:40-07:00",
        "message": "Take a chance on a random file when choosing compaction\n\nSummary:\nWhen trying to compact entire database with SuggestCompactRange(), we'll first try the left-most files. This is pretty bad, because:\n1) the left part of LSM tree will be overly compacted, but right part will not be touched\n2) First compaction will pick up the left-most file. Second compaction will try to pick up next left-most, but this will not be possible, because there's a big chance that second's file range on N+1 level is already being compacted.\n\nI observe both of those problems when running Mongo+RocksDB and trying to compact the DB to clean up tombstones. I'm unable to clean them up :(\n\nThis diff adds a bit of randomness into choosing a file. First, it chooses a file at random and tries to compact that one. This should solve both problems specified here.\n\nTest Plan: make check\n\nReviewers: yhchiang, rven, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D38379",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7413306d9461fb8fb6242b8448f6808e9f148b71"
    },
    {
        "hash": "5aad881298a05aa9364233216209915104431c98",
        "author": "sdong",
        "date": "2015-05-14T09:22:43-07:00",
        "message": "DBTest.DynamicLevelMaxBytesBase2: remove an unnecesary check\n\nSummary: DBTest.DynamicLevelMaxBytesBase2 has a check that is not necessary and may fail. Remove it, and add two unrelated check.\n\nTest Plan: Run the test\n\nReviewers: yhchiang, rven, kradhakrishnan, anthony, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D38457",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5aad881298a05aa9364233216209915104431c98"
    },
    {
        "hash": "bc68bd5a13091ee03fcdb1896cbfda157746bccf",
        "author": "sdong",
        "date": "2015-05-13T10:03:41-07:00",
        "message": "db_bench to support rate limiter\n\nSummary: Add --rate_limiter_bytes_per_sec to db_bench to allow rater limit to disk\n\nTest Plan:\nRun\n./db_bench --benchmarks=fillseq --num=30000000 --rate_limiter_bytes_per_sec=3000000 --num_multi_db=8 -disable_wal\nAnd see io_stats to have the rate limited.\n\nReviewers: yhchiang, rven, anthony, kradhakrishnan, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D38385",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bc68bd5a13091ee03fcdb1896cbfda157746bccf"
    },
    {
        "hash": "df1f87a882da558bb10ca9ef611a52e6e1a44543",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-05-12T16:20:03-07:00",
        "message": "Fixed compile error in db/column_family.cc\n\nSummary:\nFixed the following compile error in db/column_family.cc\n    db/column_family.cc:633:33: error: ‘ASSERT_GT’ was not declared in this scope\n    16:14:45    ASSERT_GT(listeners.size(), 0U);\n\nTest Plan: make db_test\n\nReviewers: igor, sdong, rven\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D38367",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/df1f87a882da558bb10ca9ef611a52e6e1a44543"
    },
    {
        "hash": "3996fff8a19d1c230fdefdfbc9f85ad523090fa8",
        "author": "Igor Canadi",
        "date": "2015-05-09T11:04:14-07:00",
        "message": "Fix clang build - add override\n\nSummary: In new clang we need to add override to every overriden function\n\nTest Plan: none\n\nReviewers: rven\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D38259",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3996fff8a19d1c230fdefdfbc9f85ad523090fa8"
    },
    {
        "hash": "962f8ba332bac5b9df49b23c97b833bfb45b164d",
        "author": "Igor Canadi",
        "date": "2015-05-07T13:27:14-07:00",
        "message": "Bump to 3.11\n\nSummary: as title\n\nTest Plan: none\n\nReviewers: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D38175",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/962f8ba332bac5b9df49b23c97b833bfb45b164d"
    },
    {
        "hash": "7ea769487f9fbc447f24425c702f5eba34e68d1d",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-05-05T15:59:02-07:00",
        "message": "Fix flakiness in column_family_test\n\nSummary:\nFixes #6840824, running \"make check\" on centos6 hits\na deadlock in column_family_test\n\nTest Plan:\nseq 10000 | parallel --gnu --eta 't=/dev/shm/rdb-{}; rm -rf\n$t; mkdir $t && export TEST_TMPDIR=$t; ./column_family_test > $t/log-{}'\nMade the test deterministic by narrrowing the window for the flush.\n\nReviewers: igor, meyering\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D38079",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7ea769487f9fbc447f24425c702f5eba34e68d1d"
    },
    {
        "hash": "36a7408896e60adc5a7cb33be1c380d8b743899c",
        "author": "Igor Canadi",
        "date": "2015-05-05T08:57:34-07:00",
        "message": "Fix UNLIKELY parenthesis\n\nSummary: Ooops :) status.ok() is acutally highly likely :)\n\nTest Plan: none\n\nReviewers: rven, yhchiang, anthony\n\nReviewed By: anthony\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D38043",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/36a7408896e60adc5a7cb33be1c380d8b743899c"
    },
    {
        "hash": "2ab7065af1565211409456c443431ebe093f53a2",
        "author": "Jim Meyering",
        "date": "2015-05-02T13:19:10-07:00",
        "message": "build: avoid unused-variable warning\n\nSummary:\n[noticed a new warning when building with the very latest gcc]\n* db/memtablerep_bench.cc (FLAGS_env): Remove declaration\nof unused varaible, to avoid this warning/error:\n\ndb/memtablerep_bench.cc:135:22: error: ‘FLAGS_env’ defined but not\\\n  used [-Werror=unused-variable]\n static rocksdb::Env* FLAGS_env = rocksdb::Env::Default();\n                      ^\n\nTest Plan: compile\n\nReviewers: ljin, rven, igor.sugak, yhchiang, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D37983",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtablerep_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2ab7065af1565211409456c443431ebe093f53a2"
    },
    {
        "hash": "b6b100fe04c2c6c0f797d1e2222e9f2160437184",
        "author": "Mark Callaghan",
        "date": "2015-05-01T14:17:45-07:00",
        "message": "Remove iter_refresh_interval_us\n\nSummary:\nThe default, use one iter for the whole test, isn't good. This cost me\na few hours of debugging and a few days of tessting. For readonly\nthat isn't realistic and for read-write that keeps a lot of old sst files around.\nI remove the option because nothing uses it and not calling gettimeofday per\nloop iteration adds about 3% to QPS at 20 threads.\n\nTask ID: #\n\nBlame Rev:\n\nTest Plan:\nrun db_bench\n\nRevert Plan:\n\nDatabase Impact:\n\nMemcache Impact:\n\nOther Notes:\n\nEImportant:\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D37965",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b6b100fe04c2c6c0f797d1e2222e9f2160437184"
    },
    {
        "hash": "dddceefe5efe5d9038f19f399d8a4ca7eefcf688",
        "author": "Igor Canadi",
        "date": "2015-04-30T11:11:35-07:00",
        "message": "Fix clang build\n\nSummary: fix build\n\nTest Plan: works\n\nReviewers: kradhakrishnan\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D37911",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dddceefe5efe5d9038f19f399d8a4ca7eefcf688"
    },
    {
        "hash": "fd96b554026d5c1d4278d4b2fef7ba09a7fc8d83",
        "author": "Igor Canadi",
        "date": "2015-04-30T09:29:51-07:00",
        "message": "Making GetOptions() comment better (#597)",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fd96b554026d5c1d4278d4b2fef7ba09a7fc8d83"
    },
    {
        "hash": "3db81d535a62b35a8c569d70add73d6d070cd332",
        "author": "Aashish Pant",
        "date": "2015-04-26T21:47:30-07:00",
        "message": "Fix memory leak in cache_test introduced in the previous commit\n\nTest Plan: Verified that valgrind build passes for cache_test\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D37665",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3db81d535a62b35a8c569d70add73d6d070cd332"
    },
    {
        "hash": "4961a9622c8a659f92010668224cd20a60321cd9",
        "author": "Igor Canadi",
        "date": "2015-04-25T21:12:52-07:00",
        "message": "Fix build\n\nSummary: Build broken by https://github.com/facebook/rocksdb/commit/6ede020dc419c1621254f26060076ee6d2c2d792\n\nTest Plan: make all\n\nReviewers: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D37689",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4961a9622c8a659f92010668224cd20a60321cd9"
    },
    {
        "hash": "242f9b4c260b6c108f55aea1c1050da81cfa0112",
        "author": "Aashish Pant",
        "date": "2015-04-24T14:45:12-07:00",
        "message": "Fix CLANG build issue introduced in previous commit\n\nSummary: Added keyword override for SetCapacity()\n\nTest Plan: Fixes build\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D37647",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/242f9b4c260b6c108f55aea1c1050da81cfa0112"
    },
    {
        "hash": "aa14670b2717494d44c6fbbe43dfbfa0e1f48759",
        "author": "Igor Canadi",
        "date": "2015-04-23T17:46:15-07:00",
        "message": "Add an assertion in CompactionPicker\n\nSummary: Reading CompactionPicker I noticed this dangerous substraction of two unsigned integers. We should assert to mark this as safe.\n\nTest Plan: make check\n\nReviewers: anthony, rven, yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: kradhakrishnan, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D37041",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aa14670b2717494d44c6fbbe43dfbfa0e1f48759"
    },
    {
        "hash": "9bf40b64d030b36cefe83ac39c1078c43f899447",
        "author": "sdong",
        "date": "2015-04-23T11:34:36-07:00",
        "message": "Print max score in level summary\n\nSummary: Add more logging to help debugging issues.\n\nTest Plan: Run test suites\n\nReviewers: yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D37401",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9bf40b64d030b36cefe83ac39c1078c43f899447"
    },
    {
        "hash": "618d07b06860ba9d776d2bc768f4c33f08f18526",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-04-23T08:35:02-07:00",
        "message": "Making PreShutdown tests more reliable.\n\nSummary:\nA couple of times on Travis, we have had the thread status say that there were no compactions done and since we assert for it, the test failed.\nWe now fix this by waiting till compaction started.\n\nTest Plan:\nrun DBTEST::*PreShutdown*\n\nd=/tmp/j; rm -rf $d; seq 200 | parallel --gnu --eta 'd=/tmp/j/d-{}; mkdir -p $d; TEST_TMPDIR=$d ./db_test --gtest_filter=DBTest.PreShutdown* >& '$d'/log-{}'\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D37545",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/618d07b06860ba9d776d2bc768f4c33f08f18526"
    },
    {
        "hash": "0a91bca5db9e31d8415f013e2cd6cbadc19dca44",
        "author": "Jim Meyering",
        "date": "2015-04-23T08:00:56-07:00",
        "message": "test: avoid vuln-inducing use of temporary directory\n\nSummary:\nWithout this change, someone on the machine on which\nI run \"make check\" could cause me to overwrite arbitrary\nfiles owned by me, via a symlink attack.\n\nInstead of using a predictable temporary directory and\naccepting to use a preexisting one, always create a new\none using mkdtemp.  If $TEST_IOCTL_FRIENDLY_TMPDIR is\nset and usable, attempt first to find a usable\ntemporary directory therein.  If not, or if unusable,\nthen try /var/tmp and /tmp.  If none of those is usable\nabort with a diagnostic.\n\nTo do that, I added a new class.\nIts constructor finds a suitable directory or aborts,\nthe sole member prints that directory's name, and the\ndestructor unlinks what should be an empty directory.\n\nNote that while the code before this did not remove\nits temporary directory, there was only one per $UID.\nNow, there would be at least one per run or one per\ntest, depending on implementation, so it is important\nto remove them.\n\nTest Plan:\n  Run this on a fedora rawhide system, where /tmp\n  is a tmpfs file system, and /var/tmp is ext4.\n\n  # This gives a diagnostic that /dev/shm is not suitable\n  # and ends up using /var/tmp.\n  TEST_IOCTL_FRIENDLY_TMPDIR=/dev/shm ./env_test\n\n  # Uses /var/tmp; same as when envvar not set.\n  TEST_IOCTL_FRIENDLY_TMPDIR=/var/tmp ./env_test\n\n  # Uses /tmp unless it's tmpfs, in which case it gives\n  # a diagnostic and uses /var/tmp.\n  TEST_IOCTL_FRIENDLY_TMPDIR=/tmp ./env_test\n\nReviewers: ljin, rven, igor.sugak, yhchiang, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D37287",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0a91bca5db9e31d8415f013e2cd6cbadc19dca44"
    },
    {
        "hash": "79c21ec0c4af76e69a728a1e27aa3de558d27c8f",
        "author": "Jim Meyering",
        "date": "2015-04-17T20:39:02-07:00",
        "message": "skip ioctl-using tests when not supported\n\nSummary:\n[NB: this is a prerequisite for the /tmp-abuse-fixing patch]\nThis avoids spurious test failure on Linux systems\nlike Fedora for which /tmp is a tmpfs file system.\n\nOn a devtmpfs file\nsystem, ioctl(fd, FS_IOC_GETVERSION, &version) returns -1 with\nerrno == ENOTTTY, indicating that that ioctl is not supported\non such a file system.  Do not let this cause test failures, e.g.,\nwhere env_test would assert that file->GetUniqueId(...) > 0.\n\nBefore this change, ./env_test would fail these three tests\non a fedora rawhide system:\n\n  [  FAILED  ] 3 tests, listed below:\n  [  FAILED  ] EnvPosixTest.RandomAccessUniqueID\n  [  FAILED  ] EnvPosixTest.RandomAccessUniqueIDConcurrent\n  [  FAILED  ] EnvPosixTest.RandomAccessUniqueIDDeletes\n   3 FAILED TESTS\n\nThe fix:\n  When support for that ioctl is lacking, skip each affected test.\n  Could be improved by noting which sub-tests are being skipped.\n\nTest Plan:\nrun these on F21 and note that they now pass.\n\n  TEST_TMPDIR=/dev/shm/rdb ./env_test\n  ./env_test\n\nReviewers: ljin, rven, igor.sugak, yhchiang, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D37323",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/79c21ec0c4af76e69a728a1e27aa3de558d27c8f"
    },
    {
        "hash": "b5400f90fe3eb217707fcb4e3a48cf11be352b94",
        "author": "Igor Canadi",
        "date": "2015-04-17T12:07:47-07:00",
        "message": "Kill dead code\n\nSummary: this is not used anywhere\n\nTest Plan: compiles\n\nReviewers: yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D37053",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b5400f90fe3eb217707fcb4e3a48cf11be352b94"
    },
    {
        "hash": "48b0a045da0ef7c07b59c529fc9a5c5f682853b6",
        "author": "Igor Canadi",
        "date": "2015-04-16T19:31:34-07:00",
        "message": "Speed up reduce_levels_test\n\nSummary: For some reason reduce_levels is opening the databse with 65.000 levels. This makes ComputeCompactionScore() function terribly slow and the tests is also very slow (20seconds).\n\nTest Plan: mr reduce_levels_test now takes 20ms\n\nReviewers: sdong, rven, kradhakrishnan, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D37059",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/48b0a045da0ef7c07b59c529fc9a5c5f682853b6"
    },
    {
        "hash": "00c2afcd386d47412b1c0f248333bc5bd1834230",
        "author": "Igor Canadi",
        "date": "2015-04-16T19:31:10-07:00",
        "message": "Fix bug in ExpandWhileOverlapping()\n\nSummary: If ExpandWhileOverlapping() we don't clear inputs. That's a bug introduced by my recent patch https://reviews.facebook.net/D36687. However, we have no tests covering ExpandWhileOverlapping(). I created a task t6771252 to add ExpandWhileOverlapping() tests.\n\nTest Plan: make check\n\nReviewers: sdong, rven, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D37077",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/00c2afcd386d47412b1c0f248333bc5bd1834230"
    },
    {
        "hash": "a1271c6c6fa5c52e347105e6e50c836a4c0c08b2",
        "author": "sdong",
        "date": "2015-04-14T16:42:37-07:00",
        "message": "Fix build break introduced by new SyncPoint interface change\n\nSummary: When commiting the sync point interface change, didn't resolve the new occurance of the old interface in rebase. Fix it.\n\nTest Plan: Build and see it pass\n\nReviewers: igor, yhchiang, rven, anthony, kradhakrishnan\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D37095",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a1271c6c6fa5c52e347105e6e50c836a4c0c08b2"
    },
    {
        "hash": "281db8bb62d0f42c89abd2ed0812961843e32ad5",
        "author": "Igor Canadi",
        "date": "2015-04-13T19:30:40-07:00",
        "message": "Temporarily disable test CompactFilesOnLevelCompaction\n\nSummary: https://reviews.facebook.net/D36963 made the debug build much faster and that triggered failures of CompactFilesOnLevelCompaction test. 3 out of 4 last tests on Jenkins failed. I'm disabling this test temporarily, since we likely know the reason why it's failing and there's already work in progress to address it -- https://reviews.facebook.net/D36225\n\nTest Plan: none\n\nReviewers: sdong, rven, yhchiang, meyering\n\nReviewed By: meyering\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D36993",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/281db8bb62d0f42c89abd2ed0812961843e32ad5"
    },
    {
        "hash": "1983fadcbca1ab5fab252220ff8ee7d9f1570c85",
        "author": "Igor Canadi",
        "date": "2015-04-13T17:33:24-07:00",
        "message": "assert(sorted) in vector rep\n\nSummary: based on discussion on https://reviews.facebook.net/D36969\n\nTest Plan: will let jenkins do its job\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D36975",
        "modified_files_count": 1,
        "modified_files": [
            "util/vectorrep.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1983fadcbca1ab5fab252220ff8ee7d9f1570c85"
    },
    {
        "hash": "d41a565a4a48ac7818bca8bf0a311bc25462c3c2",
        "author": "Igor Canadi",
        "date": "2015-04-13T16:11:47-07:00",
        "message": "Don't do O(N^2) operations in debug mode for vector memtable\n\nSummary: As title. For every operation we're asserting Valid(), which sorts the data. That's pretty terrible. We have to be careful to have decent performance even with DEBUG builds.\n\nTest Plan: make check\n\nReviewers: sdong, rven, yhchiang, MarkCallaghan\n\nReviewed By: MarkCallaghan\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D36969",
        "modified_files_count": 1,
        "modified_files": [
            "util/vectorrep.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d41a565a4a48ac7818bca8bf0a311bc25462c3c2"
    },
    {
        "hash": "08be1803eecb5ae464440812ea06e79b21289053",
        "author": "Igor Canadi",
        "date": "2015-04-13T15:58:45-07:00",
        "message": "Fix bad performance in debug mode\n\nSummary:\nSee github issue 574: https://github.com/facebook/rocksdb/issues/574\n\nBasically when we're running in DEBUG mode we're calling `usleep(0)` on\nevery mutex lock. I bisected the issue to\nhttps://reviews.facebook.net/D36963. Instead of calling sleep(0), this\ndiff just avoids calling SleepForMicroseconds() when delay is not set.\n\nTest Plan:\n    bpl=10485760;overlap=10;mcz=2;del=300000000;levels=2;ctrig=10000000; delay=10000000; stop=10000000; wbn=30; mbc=20; mb=1073741824;wbs=268435456; dds=1; sync=0; r=100000; t=1; vs=800; bs=65536; cs=1048576; of=500000; si=1000000; ./db_bench --benchmarks=fillrandom --disable_seek_compaction=1 --mmap_read=0 --statistics=1 --histogram=1 --num=$r --threads=$t --value_size=$vs --block_size=$bs --cache_size=$cs --bloom_bits=10 --cache_numshardbits=4 --open_files=$of --verify_checksum=1 --db=/tmp/rdb10test --sync=$sync --disable_wal=1 --compression_type=snappy --stats_interval=$si --compression_ratio=0.5 --disable_data_sync=$dds --write_buffer_size=$wbs --target_file_size_base=$mb --max_write_buffer_number=$wbn --max_background_compactions=$mbc --level0_file_num_compaction_trigger=$ctrig --level0_slowdown_writes_trigger=$delay --level0_stop_writes_trigger=$stop --num_levels=$levels --delete_obsolete_files_period_micros=$del --min_level_to_compress=$mcz --max_grandparent_overlap_factor=$overlap --stats_per_interval=1 --max_bytes_for_level_base=$bpl --memtablerep=vector --use_existing_db=0 --disable_auto_compactions=1 --source_compaction_factor=10000000 | grep ops\n\nBefore:\nfillrandom   :     117.525 micros/op 8508 ops/sec;    6.6 MB/s\nAfter:\nfillrandom   :       1.283 micros/op 779502 ops/sec;  606.6 MB/s\n\nReviewers: rven, yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: meyering, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D36963",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_status_util_debug.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/08be1803eecb5ae464440812ea06e79b21289053"
    },
    {
        "hash": "e7ad14926a70fcc6317b346f273dfc0110d69f25",
        "author": "Igor Canadi",
        "date": "2015-04-13T11:39:45-07:00",
        "message": "Fix flakiness in FIFOCompaction test (github issue #573)\n\nSummary:\nThe problem is that sometimes two memtables will be compacted together into a single file. In that case, our assertion\n\n        ASSERT_EQ(NumTableFilesAtLevel(0), 5);\n\nfails because same amount of data is in 4 files instead of 5. We should wait for flush so that we prevent two memtables merging into a single file.\n\nTest Plan: `for i in `seq 20`; do mrtest FIFOCompactionTest; done` -- fails at least once before. fails zero times after.\n\nReviewers: rven\n\nReviewed By: rven\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D36939",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e7ad14926a70fcc6317b346f273dfc0110d69f25"
    },
    {
        "hash": "590fadc4076d2eb3ca46e7f73b7b132da4707c86",
        "author": "Igor Canadi",
        "date": "2015-04-10T15:14:57-07:00",
        "message": "Fix compile warning on CLANG\n\nSummary: oops\n\nTest Plan: compiles now\n\nReviewers: sdong, yhchiang\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D36867",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/590fadc4076d2eb3ca46e7f73b7b132da4707c86"
    },
    {
        "hash": "697380f3d7a0e7c054278f8cbb171ac2d9b8170a",
        "author": "krad",
        "date": "2015-04-10T12:35:28-07:00",
        "message": "Repairer documentation improvement.\n\nSummary: Adding verbosity to existing comments.\n\nTest Plan: None\n\nReviewers: sdong\n\nCC: leveldb\n\nTask ID: #6718960\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/repair.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/697380f3d7a0e7c054278f8cbb171ac2d9b8170a"
    },
    {
        "hash": "0feeee6433f1daee59430baabdfc11b80a8f8417",
        "author": "agiardullo",
        "date": "2015-04-09T22:11:35-07:00",
        "message": "Fix memtable_list_test\n\nSummary:\nTest failing due to a missing directory caused by a simple bug (did not run into this on my dev box since the path already existed).\n\nWe should look into deleting test::TmpDir() before each test run.\n\nTest Plan: ran test\n\nReviewers: igor, yhchiang, meyering, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D36831",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable_list_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0feeee6433f1daee59430baabdfc11b80a8f8417"
    },
    {
        "hash": "9741dec0e5ad9e470132bf4c494345c04a387bc9",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-04-09T17:07:29-07:00",
        "message": "Fix a compile error in ROCKSDB_LITE in db/db_impl.cc\n\nSummary:\nFix a compile error in ROCKSDB_LITE in db/db_impl.cc\nrelated to internal_stats.\n\nTest Plan: make OPT=-DROCKSDB_LITE shared_lib\n\nReviewers: sdong, igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D36819",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9741dec0e5ad9e470132bf4c494345c04a387bc9"
    },
    {
        "hash": "d2a056241af1fcdcf397684332fc957adbd7f0bf",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-04-09T16:43:54-07:00",
        "message": "Fix a compilation error in ROCKSDB_LITE in db/internal_stats.h\n\nSummary:\nFix a compilation error in ROCKSDB_LITE in db/internal_stats.h\n\nOther compilation errors will be fixed in a separate diff.\n\nTest Plan: make OPT=-DROCKSDB_LITE\n\nReviewers: sdong, igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D36807",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d2a056241af1fcdcf397684332fc957adbd7f0bf"
    },
    {
        "hash": "316ec80bf8e71339ec3e486b19e14f327fb69820",
        "author": "sdong",
        "date": "2015-04-09T16:15:42-07:00",
        "message": "fault_injection_test: add a test case to cover log syncing after a log roll\n\nSummary:\nAdd a test case:\nWrite some keys without sync, flush, write other keys and do sync. Before flush finishes, host crashes and unsync data is dropped.\nTag the new test as disabled since it is not passing.\n\nTest Plan: Run the test\n\nReviewers: MarkCallaghan, rven, anthony, igor, kradhakrishnan\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D36741",
        "modified_files_count": 1,
        "modified_files": [
            "db/fault_injection_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/316ec80bf8e71339ec3e486b19e14f327fb69820"
    },
    {
        "hash": "ed229a0deea8ac22bd8fd6f8d3c8fe4def05e175",
        "author": "Mark Callaghan",
        "date": "2015-04-09T15:51:34-07:00",
        "message": "Fixes for readcache-flashcache\n\nSummary:\nThis fixes two problems:\n1) the env should not be created twice when use_existing_db is false\n2) the env dtor should run before cachedev_fd_ is closed.\n\nTask ID: #\n\nBlame Rev:\n\nTest Plan:\nRevert Plan:\n\nDatabase Impact:\n\nMemcache Impact:\n\nOther Notes:\n\nEImportant:\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D36795",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ed229a0deea8ac22bd8fd6f8d3c8fe4def05e175"
    },
    {
        "hash": "2b019a1512441b9e1ddad7b9336b9c8955dc27c0",
        "author": "krad",
        "date": "2015-04-08T15:52:02-07:00",
        "message": "Enabling checksum in repair db as it should have been.\n\nSummary: I think the checksum was turned off by mistake.\n\nTest Plan: Run make check\n\nReviewers: igor sdong chip\n\nCC:\n\nTask ID:\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/repair.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2b019a1512441b9e1ddad7b9336b9c8955dc27c0"
    },
    {
        "hash": "b1bbdd79191d8fc605e3fd41e801b23022d59b5b",
        "author": "sdong",
        "date": "2015-04-08T14:40:42-07:00",
        "message": "Create EnvOptions using sanitized DB Options\n\nSummary: Now EnvOptions uses unsanitized DB options. bytes_per_sync is tuned off when rate_limiter is used, but this change doesn't take effort.\n\nTest Plan: See different I/O pattern in db_bench running fillseq.\n\nReviewers: yhchiang, kradhakrishnan, rven, anthony, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D36723",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b1bbdd79191d8fc605e3fd41e801b23022d59b5b"
    },
    {
        "hash": "db6569cd4a7837bb911653c17c840284cb16c493",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-04-07T15:27:23-07:00",
        "message": "Fix the compilation error in flashcache.cc on Mac\n\nSummary:\nFix the following compilation error in flashcache.cc on Mac\n\nUndefined symbols for architecture x86_64:\n\n\"rocksdb::NewFlashcacheAwareEnv(rocksdb::Env*, int)\", referenced from:\n    rocksdb::Benchmark::Open(rocksdb::Options*) in db_bench.o\n\nTest Plan: make db_bench\n\nReviewers: sdong, igor, rven\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D36657",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/flashcache/flashcache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/db6569cd4a7837bb911653c17c840284cb16c493"
    },
    {
        "hash": "f12614070fb233402062ccd30454b6d2247b7ac2",
        "author": "Yoshinori Matsunobu",
        "date": "2015-04-06T17:37:36-07:00",
        "message": "Fix TSAN build error of D36447\n\nSummary:\nD36447 caused build error when using COMPILE_WITH_TSAN=1.\nThis diff fixes the error.\n\nTest Plan: jenkins\n\nReviewers: igor, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D36579",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f12614070fb233402062ccd30454b6d2247b7ac2"
    },
    {
        "hash": "a45e7581b71b950e3c352199dae75bc60ddbdeca",
        "author": "sdong",
        "date": "2015-04-06T11:49:13-07:00",
        "message": "Avoid naming conflict of EntryType\n\nSummary:\nFix build break on travis build:\n\n$ OPT=-DTRAVIS V=1 make unity && make clean && OPT=-DTRAVIS V=1 make db_test && ./db_test\n\n......\n\nIn file included from unity.cc:65:0:\n./table/plain_table_key_coding.cc: In member function ‘rocksdb::Status rocksdb::PlainTableKeyDecoder::NextPrefixEncodingKey(const char*, const char*, rocksdb::ParsedInternalKey*, rocksdb::Slice*, size_t*, bool*)’:\n./table/plain_table_key_coding.cc:224:3: error: reference to ‘EntryType’ is ambiguous\n   EntryType entry_type;\n   ^\nIn file included from ./db/table_properties_collector.h:9:0,\n                 from ./db/builder.h:11,\n                 from ./db/builder.cc:10,\n                 from unity.cc:1:\n./include/rocksdb/table_properties.h:81:6: note: candidates are: enum rocksdb::EntryType\n enum EntryType {\n      ^\nIn file included from unity.cc:65:0:\n./table/plain_table_key_coding.cc:16:6: note:                 enum rocksdb::{anonymous}::EntryType\n enum EntryType : unsigned char {\n      ^\n./table/plain_table_key_coding.cc:231:51: error: ‘entry_type’ was not declared in this scope\n     const char* pos = DecodeSize(key_ptr, limit, &entry_type, &size);\n                                                   ^\nmake: *** [unity.o] Error 1\n\nTest Plan:\nOPT=-DTRAVIS V=1 make unity\n\nAnd make sure it doesn't break anymore.\n\nReviewers: yhchiang, kradhakrishnan, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D36549",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_key_coding.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a45e7581b71b950e3c352199dae75bc60ddbdeca"
    },
    {
        "hash": "d2a92c13bc245d7f83058817c4f9d0eff63e66fb",
        "author": "Jim Meyering",
        "date": "2015-04-03T14:46:35-07:00",
        "message": "avoid returning a number-of-active-keys estimate of nearly 2^64\n\nSummary:\nIf accumulated_num_non_deletions_ were ever smaller than\naccumulated_num_deletions_, the computation of\n\"accumulated_num_non_deletions_ - accumulated_num_deletions_\"\nwould result in a logically \"negative\" value, but since\nthe two operands are unsigned (uint64_t), the result corresponding\nto e.g., -1 would 2^64-1.\n\nInstead, return 0 in that case.\n\nTest Plan:\n  - ensure \"make check\" still passes\n  - temporarily add an \"abort();\" call in the new \"if\"-block, and\n      observe that it fails in some test cases.  However, note that\n      this case is triggered only when the two numbers are equal.\n      Thus, no test case triggers the erroneous behavior this\n      change is designed to avoid. If anyone can construct a\n      scenario in which that bug would be triggered, I'll be\n      happy to add a test case.\n\nReviewers: ljin, igor, rven, igor.sugak, yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D36489",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d2a92c13bc245d7f83058817c4f9d0eff63e66fb"
    },
    {
        "hash": "089509b847fe7143932ea5c72e1f87ac47776c3c",
        "author": "sdong",
        "date": "2015-04-02T16:17:58-07:00",
        "message": "db_test: clean up sync points in test cleaning up\n\nSummary: In some db_test tests sync points are not cleared which will cause unexpected results in the next tests. Clean them up in test cleaning up.\n\nTest Plan:\nRun the same tests that used to fail:\n\nbuild using USE_CLANG=1 and run\n./db_test --gtest_filter=\"DBTest.CompressLevelCompaction:*DBTestUniversalCompactionParallel*\"\n\nReviewers: rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D36429",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/089509b847fe7143932ea5c72e1f87ac47776c3c"
    },
    {
        "hash": "51c8133a72dadabde26ae96a64f6e5dd6a9674d9",
        "author": "Herman Lee",
        "date": "2015-04-01T10:48:42-07:00",
        "message": "Fix make unity build compiler warning about \"stats\" shadowing global variable\n\nSummary:\nFix the make unity build. The local stats variable name was shadowing a\nglobal stats variable.\n\nTest Plan:\nRun the build\nOPT=-DTRAVIS V=1 make unity\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D36285",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/51c8133a72dadabde26ae96a64f6e5dd6a9674d9"
    },
    {
        "hash": "76d63b4525a4709b42490feb5df41d0c2d20a152",
        "author": "sdong",
        "date": "2015-03-30T15:53:44-07:00",
        "message": "Fix one non-determinism of DBTest.DynamicCompactionOptions\n\nSummary:\nAfter recent change of DBTest.DynamicCompactionOptions, occasionally hit another non-deterministic case where L0 showdown is triggered while timeout should not triggered for hard limit.\nFix it by increasing L0 slowdown trigger at the same time.\n\nTest Plan: Run the failed test.\n\nReviewers: igor, rven\n\nReviewed By: rven\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D36219",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/76d63b4525a4709b42490feb5df41d0c2d20a152"
    },
    {
        "hash": "2158e0f83134c7f85dc954dd53c53f36b527292f",
        "author": "Igor Canadi",
        "date": "2015-03-30T10:03:23-07:00",
        "message": "Fix clang build\n\nSummary: as title\n\nTest Plan: clang builds\n\nReviewers: leveldb\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D36183",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/flashcache/flashcache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2158e0f83134c7f85dc954dd53c53f36b527292f"
    },
    {
        "hash": "e9fddb7a2bdee6aafe634de0372f964d7edb9847",
        "author": "Igor Canadi",
        "date": "2015-03-27T09:56:48-04:00",
        "message": "Merge pull request #560 from xiaoxichen/patch-1\n\nFix interger overflow on i386 arch",
        "modified_files_count": 1,
        "modified_files": [
            "util/logging.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e9fddb7a2bdee6aafe634de0372f964d7edb9847"
    },
    {
        "hash": "bcd8a71a28fcee41dffe4de552f3a7bfc733423c",
        "author": "xiaoxichen",
        "date": "2015-03-27T08:38:53+08:00",
        "message": "Fix interger overflow on i386 arch\n\nThe error was:\r\n\r\nutil/logging.cc: In function 'int rocksdb::AppendHumanMicros(uint64_t, char*, int)':\r\nerror: util/logging.cc:41:39: integer overflow in expression [-Werror=overflow]\r\n} else if (micros < 1000000l * 60 * 60) {\r\n^\r\nerror: util/logging.cc:41:39: comparison between signed and unsigned integer expressions [-Werror=sign-compare]",
        "modified_files_count": 1,
        "modified_files": [
            "util/logging.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bcd8a71a28fcee41dffe4de552f3a7bfc733423c"
    },
    {
        "hash": "030859eb5d45f58bd9c08705b2fca38a06249f3c",
        "author": "Igor Canadi",
        "date": "2015-03-26T11:22:20-07:00",
        "message": "Dump compression info on startup\n\nSummary: It's useful to know if we have compression support or no\n\nTest Plan:\nObserved this in my LOG:\n\n      2015/03/26-10:34:35.460681 7f5b322b7840 Snappy supported\n      2015/03/26-10:34:35.460682 7f5b322b7840 Zlib supported\n      2015/03/26-10:34:35.460686 7f5b322b7840 Bzip supported\n      2015/03/26-10:34:35.460687 7f5b322b7840 LZ4 NOT supported\n\nReviewers: sdong, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D35955",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/030859eb5d45f58bd9c08705b2fca38a06249f3c"
    },
    {
        "hash": "3539e06448882b00bda2d0eed950342400372f45",
        "author": "Igor Canadi",
        "date": "2015-03-26T10:02:09-04:00",
        "message": "Merge pull request #558 from aamihailov/master\n\nfix compilation error (same as fix #284)",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3539e06448882b00bda2d0eed950342400372f45"
    },
    {
        "hash": "a3e4b32483dd728877be77291bd93148e588be19",
        "author": "Alexander.Mikhaylov",
        "date": "2015-03-26T14:53:42+06:00",
        "message": "fix compilation error (same as fix #284)\n\n[maa@srv2-nskb-devg2 rocksdb-master]$ CXX=/usr/local/CC/gcc-4.7.4/bin/g++ EXTRA_CXXFLAGS=-std=c++11 DISABLE_WARNING_AS_ERROR=1  make db_bench\n  CC       db/db_bench.o\ndb/db_bench.cc: In member function 'rocksdb::Slice rocksdb::Benchmark::AllocateKey(std::unique_ptr<const char []>*)':\ndb/db_bench.cc:1434:41: error: use of deleted function 'void std::unique_ptr<_Tp [], _Dp>::reset(_Up) [with _Up = char*; _Tp = const char; _Dp = std::default_delete<const char []>]'\nIn file included from /usr/local/CC/gcc-4.7.4/lib/gcc/x86_64-unknown-linux-gnu/4.7.4/../../../../include/c++/4.7.4/memory:86:0,\n                 from ./include/rocksdb/db.h:14,\n                 from ./db/dbformat.h:14,\n                 from ./db/db_impl.h:21,\n                 from db/db_bench.cc:33:",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a3e4b32483dd728877be77291bd93148e588be19"
    },
    {
        "hash": "1e57f2bf2b4dff7f2317d3c62843e64b3819f86d",
        "author": "Anurag Indu",
        "date": "2015-03-24T17:00:28-07:00",
        "message": "Fix build\n\nTest Plan: Running make all\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: rven, yhchiang, igor, meyering, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D35889",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_reader_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1e57f2bf2b4dff7f2317d3c62843e64b3819f86d"
    },
    {
        "hash": "cd987c383acf431557eb97b00f1d6baee29b99ca",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-03-24T14:52:59-07:00",
        "message": "Fix compile error when NROCKSDB_THREAD_STATUS is not used.\n\nSummary: Fix compile error when NROCKSDB_THREAD_STATUS is not used.\n\nTest Plan: make dbg OPT=-DNROCKSDB_THREAD_STATUS -j32\n\nReviewers: sdong, igor, rven\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D35847",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_status_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cd987c383acf431557eb97b00f1d6baee29b99ca"
    },
    {
        "hash": "315abac945abf46d79eef228d988ec28ed69e1a0",
        "author": "Igor Canadi",
        "date": "2015-03-24T09:42:38-07:00",
        "message": "Undeprecate GetLiveFiles()\n\nSummary: There is no alternative to GetLiveFiles() function\n\nTest Plan: none\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D35805",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/315abac945abf46d79eef228d988ec28ed69e1a0"
    },
    {
        "hash": "689391406a16899278bef2694f786db4b90fd915",
        "author": "krad",
        "date": "2015-03-23T14:30:11-07:00",
        "message": "Make SSTDumpTest.GetProperties less noisy\n\nSummary:\nLimiting verbose printing to \"command=scan\"\n\nTest Plan:\nRun make check and manual testing of sst_dump_test\n\nReviewers: sdong\n\nCC: leveldb\n\nTask ID: #6575982\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "util/sst_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/689391406a16899278bef2694f786db4b90fd915"
    },
    {
        "hash": "38d286f14660c14dc8ba9e7343fa8400d2273710",
        "author": "sdong",
        "date": "2015-03-20T12:34:24-07:00",
        "message": "Clean-up WAL directory before running db_test\n\nSummary: DBTest doesn't clean up wal directory. It might cause failure after a failure test run. Fix it.\n\nTest Plan:\nRun unit tests\nTry open DB with non-empty db_path/wal.\n\nReviewers: rven, yhchiang, kradhakrishnan, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D35559",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/38d286f14660c14dc8ba9e7343fa8400d2273710"
    },
    {
        "hash": "6b626ff24c5dc0fbba14d6871cb3d269934c099a",
        "author": "Igor Sugak",
        "date": "2015-03-18T18:18:12-07:00",
        "message": "rocksdb: change db_test::MultiThreadedDBTest as value parameterized test.\n\nSummary: This is a simple change to make db_test::MultiThreadedDBTest as value parameterized test. There is a value of creating a separate set of such tests later.\n\nTest Plan:\n```lang=bash\n% make db_test\n% ./make db_test\n```\n\nAlso with the following command I can execute all db_test in 2:37.87 on my box\n```\n% ./db_test --gtest_list_tests | sed 's/\\# GetParam.*//' | tr -d ' ' | env time parallel --gnu --eta --joblog=LOG -- 'TEST_TMPDIR=/dev/shm/rocksdb-{} ./db_test --gtest_filter=\"*{}\"'\n```\n\nReviewers: igor, rven, meyering, sdong\n\nReviewed By: meyering\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D35361",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6b626ff24c5dc0fbba14d6871cb3d269934c099a"
    },
    {
        "hash": "652db51a318cff13f6df5ffce4a3dae6439ea4e2",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-03-18T15:10:57-07:00",
        "message": "Fix compilation error in rocksjni/write_batch_test.cc\n\nSummary: Fix compilation error in rocksjni/write_batch_test.cc\n\nTest Plan: make rocksdbjava -j32\n\nReviewers: sdong, igor, rven\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D35343",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/write_batch_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/652db51a318cff13f6df5ffce4a3dae6439ea4e2"
    },
    {
        "hash": "230e68727ab7e0570623e8ab9f00e96f090508b4",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-03-18T11:40:46-07:00",
        "message": "Fix TSAN failue in env_test\n\nSummary: Check for state of task before deleting it.\n\nTest Plan: Run env_test with TSAN\n\nReviewers: igor, sdong\n\nReviewed By: sdong\n\nSubscribers: meyering, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D35283",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/230e68727ab7e0570623e8ab9f00e96f090508b4"
    },
    {
        "hash": "155d468c56d141d4bd053728e334e681fdac9488",
        "author": "Islam AbdelRahman",
        "date": "2015-03-18T11:26:10-07:00",
        "message": "Using chrono as a fallback\n\nSummary:\nRight now if they system we are compiling on is not Linux and not Mac we will get a compilation error\nthis diff use chrono as a fallback when we are compiling on something other than Linux/FreeBSD/Mac\n\nTest Plan:\ncompile on CentOS/FreeBSD\n./db_test (still running)\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D35277",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/155d468c56d141d4bd053728e334e681fdac9488"
    },
    {
        "hash": "969aa806b715cbcf6c000138ee5d421f4bfbc3bc",
        "author": "Danny Al-Gaaf",
        "date": "2015-03-17T12:04:05+01:00",
        "message": "util/xfunc.h: fix #elif check for NDEBUG\n\nFix '#elif with no expression', add defined() to check.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "util/xfunc.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/969aa806b715cbcf6c000138ee5d421f4bfbc3bc"
    },
    {
        "hash": "87c7d49d6761d90129d8f63d20fe0b2a0accdc80",
        "author": "Danny Al-Gaaf",
        "date": "2015-03-17T12:03:11+01:00",
        "message": "util/env_posix.cc: fix #elif check for __MACH__\n\nFix '#elif with no expression' add defined() to check.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/87c7d49d6761d90129d8f63d20fe0b2a0accdc80"
    },
    {
        "hash": "c86e5d7b9370d4440334a458f9dadf11993a67d6",
        "author": "Danny Al-Gaaf",
        "date": "2015-03-17T12:00:55+01:00",
        "message": "stack_trace.cc: fix #elif check for OS_MACOSX\n\nFix '#elif with no expression' add defined() to check.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "port/stack_trace.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c86e5d7b9370d4440334a458f9dadf11993a67d6"
    },
    {
        "hash": "d4d42c02ea94262cad9442fb8926b0f353c05b25",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-03-16T19:51:25-07:00",
        "message": "Fixed clang build in env.h\n\nSummary: Mark function as override.\n\nTest Plan: USE_CLANG=1 make -j32 check\n\nReviewers: sdong, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D35163",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d4d42c02ea94262cad9442fb8926b0f353c05b25"
    },
    {
        "hash": "56337faf3e76120980026669f6689836179f5966",
        "author": "Mark Callaghan",
        "date": "2015-03-16T11:50:23-07:00",
        "message": "Fix compaction IO stats to handle large file counts\n\nSummary:\nThe output did not have space for 6-digit file counts or for 3-digit\ncounts of files being compacted. This adds space for that while preserving\nexisting alignment. See https://gist.github.com/mdcallag/0a61c6a18dd467224c11\n\nTask ID: #\n\nBlame Rev:\n\nTest Plan:\nrun db_bench, look at output\n\nRevert Plan:\n\nDatabase Impact:\n\nMemcache Impact:\n\nOther Notes:\n\nEImportant:\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D35091",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/56337faf3e76120980026669f6689836179f5966"
    },
    {
        "hash": "fd1b3f385a5e0e10620aa06c68aee57ce0dca5b3",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-03-14T08:03:02-07:00",
        "message": "Fix the issue in PreShutdownMultipleCompaction\n\nSummary: Fix the issue in PreShutdownMultipleCompaction\n\nTest Plan:\nexport ROCKSDB_TESTS=PreShutdownMultipleCompaction\n./db_test\n\nReviewers: rven, sdong, igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D35055",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fd1b3f385a5e0e10620aa06c68aee57ce0dca5b3"
    },
    {
        "hash": "56c4a9c7607ef6b21ef334c0446bec0c99ee0c7a",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-03-13T18:09:01-07:00",
        "message": "Fix compile warning in thread_status_util.h on Mac\n\nSummary:\nFix compile warning in thread_status_util.h on Mac\n\nTest Plan:\nmake dbg -j32",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_status_util.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/56c4a9c7607ef6b21ef334c0446bec0c99ee0c7a"
    },
    {
        "hash": "417367c42d7c52fa0e9ba97afbf836599ee79954",
        "author": "Igor Canadi",
        "date": "2015-03-13T16:41:00-07:00",
        "message": "Fix SIGSEGV when not using cache",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/417367c42d7c52fa0e9ba97afbf836599ee79954"
    },
    {
        "hash": "e25ff039c868f46aea8ba69745b5abaf22b2639c",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-03-13T14:51:40-07:00",
        "message": "Prevent slowdowns and stalls in PreShutdown tests\n\nSummary:\nThe preshutdown tests check for stopped compactions/flushes.\nRemoving stalls on the write path.\n\nTest Plan: DBTests.PreShutdown*\n\nReviewers: yhchiang, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D35037",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e25ff039c868f46aea8ba69745b5abaf22b2639c"
    },
    {
        "hash": "f69071265203edb0084f136b03bd4fcb42f16911",
        "author": "Igor Canadi",
        "date": "2015-03-13T14:45:15-07:00",
        "message": "Speed up db_bench shutdown\n\nSummary: See t6489044\n\nTest Plan: compiles\n\nReviewers: MarkCallaghan\n\nReviewed By: MarkCallaghan\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D34977",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f69071265203edb0084f136b03bd4fcb42f16911"
    },
    {
        "hash": "c1b3cde18abf2749ca6772cb8747510778c410b3",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-03-13T13:16:53-07:00",
        "message": "Improve the robustness of ThreadStatusSingleCompaction\n\nSummary:\nImprove the robustness of ThreadStatusSingleCompaction\nby ensuring the number of files flushed in the test.\n\nTest Plan:\nexport ROCKSDB_TESTS=ThreadStatus\n./db_test\n\nReviewers: sdong, igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D35019",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c1b3cde18abf2749ca6772cb8747510778c410b3"
    },
    {
        "hash": "b16ead531d073a4becbc6fecdff39ffbec39eaa0",
        "author": "sdong",
        "date": "2015-03-13T11:26:17-07:00",
        "message": "DBTest.DynamicLevelCompressionPerLevel should not run without snappy support\n\nSummary: The test depends on snappy to be used. Skip the test if it is not supported.\n\nTest Plan: Run the test\n\nReviewers: meyering, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D34995",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b16ead531d073a4becbc6fecdff39ffbec39eaa0"
    },
    {
        "hash": "a5e60bafc25455e388bfe55e3d5c59b9e5d0e43c",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-03-13T11:20:17-07:00",
        "message": "Fix a typo / test failure in ThreadStatusSingleCompaction\n\nSummary:\nFix a typo / test failure in ThreadStatusSingleCompaction\n\nTest Plan:\nexport ROCKSDB_TESTS=ThreadStatus\n./db_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a5e60bafc25455e388bfe55e3d5c59b9e5d0e43c"
    },
    {
        "hash": "cb2c91850c88343ae87080da83052298507f60d9",
        "author": "Igor Canadi",
        "date": "2015-03-13T11:08:50-07:00",
        "message": "Don't run some tests is snappy is not present\n\nSummary: Currently, we have `ifdef SNAPPY` around bunch of db_test code. Some tests that don't even use compression are also blocked when running system doesn't have snappy. This also causes hard-to-catch bugs, like D34983. We should dynamically figure out if compression is supported or not.\n\nTest Plan: compiles\n\nReviewers: sdong, meyering\n\nReviewed By: meyering\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D34989",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cb2c91850c88343ae87080da83052298507f60d9"
    },
    {
        "hash": "9d22a1f13665cbafd84463cbb82664840a056389",
        "author": "Islam AbdelRahman",
        "date": "2015-03-12T20:53:18-07:00",
        "message": "Allow negative Wnew\n\nSummary:\nwe are using uint64_t for Wnew this is not correct since this value can be negative\nhttps://github.com/facebook/rocksdb/issues/535\n\nTest Plan: run db_bench and check what happens when Wnew is -ve\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D34935",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9d22a1f13665cbafd84463cbb82664840a056389"
    },
    {
        "hash": "53996149d4ff1f0772cf7c478e3177a272a5a2f1",
        "author": "stash93",
        "date": "2015-03-12T21:13:53+03:00",
        "message": "Removing unnecessary kInlineSize\n\nSummary: Remove unnecessary rocksdb::kInlineSize, since it's not used and there is rocksdb::Arena::kInlineSize.\n\nTest Plan: make all check\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D34905",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/53996149d4ff1f0772cf7c478e3177a272a5a2f1"
    },
    {
        "hash": "b411d06031984ef3736ef47e2bbefd422dfdbaa2",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-03-12T10:49:06-07:00",
        "message": "Prevent stalls in preshutdown tests\n\nSummary:\nThe tests using sync_point for intent to shutdown stop\ncompaction and this results in stalls if too many rows are written. We\nnow limit the number of rows written to prevent stalls, since the focus\nof the test is to cancel background work, which is being correctly\ntested. This fixes a Jenkins issue.\n\nTest Plan: DBTest.PreShutdown*\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D34893",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b411d06031984ef3736ef47e2bbefd422dfdbaa2"
    },
    {
        "hash": "1d43bc41fb136df9ae623779c91758b22d8e78aa",
        "author": "Islam AbdelRahman",
        "date": "2015-03-11T17:57:16-07:00",
        "message": "Fixing segmentation fault in db_bench\n\nSummary:\nFixing segmentation fault when running db_bench\n\nThis seg fault happens because num_created is used without being initialized\n\nTest Plan:\nrunning db_bench using these arguments\nbpl=10485760;overlap=10;mcz=2;del=300000000;levels=6;ctrig=4; delay=8; stop=12; wbn=3; mbc=20; mb=67108864;wbs=134217728; dds=0; sync=0; r=1000000; t=1; vs=800; bs=65536; cs=1048576; of=500000; si=1000000; ./db_bench --benchmarks=overwrite --disable_seek_compaction=1 --mmap_read=0 --statistics=1 --histogram=1 --num=$r --threads=$t --value_size=$vs --block_size=$bs --cache_size=$cs --bloom_bits=10 --cache_numshardbits=4 --open_files=$of --verify_checksum=1 --db=/home/tec/koko/ --sync=$sync --disable_wal=1 --compression_type=zlib --stats_interval=$si --compression_ratio=0.5 --disable_data_sync=$dds --write_buffer_size=$wbs --target_file_size_base=$mb --max_write_buffer_number=$wbn --max_background_compactions=$mbc --level0_file_num_compaction_trigger=$ctrig --level0_slowdown_writes_trigger=$delay --level0_stop_writes_trigger=$stop --num_levels=$levels --delete_obsolete_files_period_micros=$del --min_level_to_compress=$mcz --max_grandparent_overlap_factor=$overlap --stats_per_interval=1 --max_bytes_for_level_base=$bpl --use_existing_db=1\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D34881",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1d43bc41fb136df9ae623779c91758b22d8e78aa"
    },
    {
        "hash": "6f557986830536dc0a1cdc223973fdc73bbfc5ba",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-03-11T13:02:46-07:00",
        "message": "Fixed a compile error in db_bench in mac.\n\nSummary:\nFixed a compile error in db_bench in mac.\n\nTest Plan:\nmake db_bench",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_status_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6f557986830536dc0a1cdc223973fdc73bbfc5ba"
    },
    {
        "hash": "2884b100badd45b2e762260591e13c4da1382a90",
        "author": "sdong",
        "date": "2015-03-11T11:46:14-07:00",
        "message": "db_bench: Better way to randomize repeated read keys in -read_random_exp_range\n\nSummary: Use a better way to map from a key with locality to a random location. Now with the same -read_random_exp_range setting, hit rate drops, which it is expected.\n\nTest Plan: ./db_bench --benchmarks=readrandom -statistics -use_existing_db -cache_size=5000000 --read_random_exp_range=<multiple_values>\n\nReviewers: MarkCallaghan, kradhakrishnan, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D34761",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2884b100badd45b2e762260591e13c4da1382a90"
    },
    {
        "hash": "2ddf53b2cad65283538e65436580f9589060a221",
        "author": "Igor Canadi",
        "date": "2015-03-10T17:53:22-07:00",
        "message": "Get OptimizeFilterForHits work on Mac\n\nSummary: Got it working by some voodoo programming\n\nTest Plan: works!\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D34611",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2ddf53b2cad65283538e65436580f9589060a221"
    },
    {
        "hash": "37921b499760f68ea8c3e2d8e44e452e8da3ddc3",
        "author": "sdong",
        "date": "2015-03-09T11:34:52-07:00",
        "message": "db_bench: Add Option -read_random_exp_range to allow read skewness.\n\nSummary: Introduce parameter -read_random_exp_range in db_bench to provide some key skewness in readrandom and multireadrandom benchmarks. It will helpful to cover block cache better.\n\nTest Plan:\nRun benchmarks with this new parameter. I can clearly see block cache hit rate change while I increase this value (DB size is about 66MB):\n\n./db_bench --benchmarks=readrandom -statistics -use_existing_db -cache_size=5000000 --read_random_exp_range=0.0\nrocksdb.block.cache.data.miss COUNT : 958418\nrocksdb.block.cache.data.hit COUNT : 41582\n\n./db_bench --benchmarks=readrandom -statistics -use_existing_db -cache_size=5000000 --read_random_exp_range=5.0\nrocksdb.block.cache.data.miss COUNT : 819518\nrocksdb.block.cache.data.hit COUNT : 180482\n\n./db_bench --benchmarks=readrandom -statistics -use_existing_db -cache_size=5000000 --read_random_exp_range=10.0\nrocksdb.block.cache.data.miss COUNT : 450479\nrocksdb.block.cache.data.hit COUNT : 549521\n\n./db_bench --benchmarks=readrandom -statistics -use_existing_db -cache_size=5000000 --read_random_exp_range=20.0\nrocksdb.block.cache.data.miss COUNT : 223192\nrocksdb.block.cache.data.hit COUNT : 776808\n\nReviewers: MarkCallaghan, kradhakrishnan, yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D34629",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/37921b499760f68ea8c3e2d8e44e452e8da3ddc3"
    },
    {
        "hash": "492f6d27ed82e63c710a7a0a679a6060e494b21f",
        "author": "Tian Xia",
        "date": "2015-03-06T10:12:50-08:00",
        "message": "Fix a segfault in fbson under Mac OS X compiler\n\nSummary:\nThe problem appears to be caused by a bug in Mac OS X compiler\n(http://llvm.org/bugs/show_bug.cgi?id=15337). We need explicitly construct the\nbase object std::ostream(std::streambuf*) with nullptr. Otherwise, ostream will\ntry to delete the underlying streambuf* which apparently is undefined in the\nMac OS X compiler.\n\nhttps://github.com/facebook/rocksdb/issues/525\n\nTest Plan:\nunit test in fbson\nmake all check\ndocument_db_test (on mac)\n\nReviewers: IslamAbdelRahman, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D34587",
        "modified_files_count": 1,
        "modified_files": [
            "third-party/fbson/FbsonStream.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/492f6d27ed82e63c710a7a0a679a6060e494b21f"
    },
    {
        "hash": "b8d23cdcb8a126f3ab38ed92e153d6483fe08f42",
        "author": "Igor Canadi",
        "date": "2015-03-03T11:29:31-08:00",
        "message": "Revert chrono use\n\nSummary:\nFor some reason, libstdc++ implements steady_clock::now() using syscall instead of VDSO optimized clock_gettime() when using glibc 2.16 and earlier. This leads to significant performance degradation for users with older glibcs. See bug reported here: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=59177\n\nWe observed this behavior when testing mongo on AWS hosts. Facebook hosts are unaffected since we use glibc2.17 and 2.20.\n\nRevert \"Fix timing\"\nThis reverts commit 965d9d50b8cbb413de5e834b5b83ddbb682d0f1d.\n\nRevert \"Use chrono for timing\"\nThis reverts commit 001ce64dc7659c65569ffb1c440e26cd23db3c94.\n\nTest Plan: make check\n\nReviewers: MarkCallaghan, yhchiang, rven, meyering, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D34371",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b8d23cdcb8a126f3ab38ed92e153d6483fe08f42"
    },
    {
        "hash": "c4bd03a97e31e3e8826dda811cabe78b2fd9634f",
        "author": "Mark Callaghan",
        "date": "2015-03-02T09:35:50-08:00",
        "message": "Fix typo in log message\n\nSummary:\nfix typo\n\nTask ID: #\n\nBlame Rev:\n\nTest Plan:\nRevert Plan:\n\nDatabase Impact:\n\nMemcache Impact:\n\nOther Notes:\n\nEImportant:\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D34251",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c4bd03a97e31e3e8826dda811cabe78b2fd9634f"
    },
    {
        "hash": "216a9e16f42e309abaff8568b2c6dba8226fa8b4",
        "author": "Igor Canadi",
        "date": "2015-02-27T14:21:16-08:00",
        "message": "Fix compile\n\nSummary: I was pretty sure I compiled this before landing, sorry :/\n\nTest Plan: compiles\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D34173",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/216a9e16f42e309abaff8568b2c6dba8226fa8b4"
    },
    {
        "hash": "8984e5f848b1b78071d71722b72f9d08375bcb02",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-02-26T15:11:50-08:00",
        "message": "Fix race in sync point.\n\nSummary:\nThe LoadDependency function does not take a lock when it runs\nand it could be modifying data structures while other threads are\naccessing it.\n\nTest Plan: Run TSAN.\n\nReviewers: igor, sdong\n\nReviewed By: igor, sdong\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D34095",
        "modified_files_count": 1,
        "modified_files": [
            "util/sync_point.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8984e5f848b1b78071d71722b72f9d08375bcb02"
    },
    {
        "hash": "03b432d4b823004d3ee0a717dd9e4bcf026d5f6e",
        "author": "Igor Sugak",
        "date": "2015-02-26T14:19:51-08:00",
        "message": "rocksdb: Fix uninitialized use error\n\nSummary:\nWhen using latest clang (3.6 or 3.7/trunck) rocksdb is failing with many errors. Some errors are uninitialized use errors.\n\n```\n...\n  CC       db/log_test.o\nutil/ldb_cmd.cc:394:16: error: base class 'rocksdb::LDBCommand' is uninitialized when used here to access 'rocksdb::LDBCommand::BuildCmdLineOptions' [-Werror,-Wuninitialized]\n               BuildCmdLineOptions({ARG_FROM, ARG_TO, ARG_HEX, ARG_KEY_HEX,\n               ^\n...\n```\n\n```lang=c++\nCompactorCommand::CompactorCommand(const vector<string>& params,\n      const map<string, string>& options, const vector<string>& flags) :\n    LDBCommand(options, flags, false,\n               BuildCmdLineOptions({ARG_FROM, ARG_TO, ARG_HEX, ARG_KEY_HEX,\n                                    ARG_VALUE_HEX, ARG_TTL})),\n    null_from_(true), null_to_(true) {\n. . .\n}\n```\nFor the fourth parameter of the base constructor (`LDBCommand`) we call `BuildCmdLineOptions`, which is a private non-static method of `LDBCommand` base class.\n\nThis diff adds missing `static` keyword for `LDBCommand::BuildCmdLineOptions` method.\n\nTest Plan:\nBuild with trunk clang and make sure all tests are passing.\n```lang=bash\n% # Have trunk clang present in path.\n% ROCKSDB_NO_FBCODE=1 CC=clang CXX=clang++ make check\n``\n\nReviewers: meyering, sdong, rven, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D34083",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/03b432d4b823004d3ee0a717dd9e4bcf026d5f6e"
    },
    {
        "hash": "182b4ceacdf80ce7922205edee4d673d0f1644de",
        "author": "Mark Callaghan",
        "date": "2015-02-25T15:53:45-08:00",
        "message": "Limit key range to number of keys, not number of writes\n\nSummary:\nAn old commit (482401) changed DoWrite to use the value of --writes rather\nthan --num to determine the range for keys. This restores the old and correct\nbehavior which is to limit it using --num.\n\nTask ID: #6353043\n\nBlame Rev:\n\nTest Plan:\nrun db_bench\n\nRevert Plan:\n\nDatabase Impact:\n\nMemcache Impact:\n\nOther Notes:\n\nEImportant:\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D34065",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/182b4ceacdf80ce7922205edee4d673d0f1644de"
    },
    {
        "hash": "4ade89962d9d6c921c405f3752de3963ef1a1901",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-02-24T16:24:53-08:00",
        "message": "Fix compile error on MacOS.\n\nSummary:\nIn a release build, a member was not being accessed. This\nmember was only being accessed in a debug build. We now add an accessor\nfunction for this member and the buid succeeds.\n\nTest Plan: build release/unity/debug on linux/mac\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D34035",
        "modified_files_count": 1,
        "modified_files": [
            "db/managed_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4ade89962d9d6c921c405f3752de3963ef1a1901"
    },
    {
        "hash": "ace3d850680b8c627a24642f8c28ed426251075b",
        "author": "Igor Canadi",
        "date": "2015-02-24T13:27:41-08:00",
        "message": "Revert \"Unused managed iterator\"\n\nThis reverts commit bd339a97984d58d1cbf1bde95196a74d1d404c31.\n\nConflicts:\n\tdb/managed_iterator.cc",
        "modified_files_count": 1,
        "modified_files": [
            "db/managed_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ace3d850680b8c627a24642f8c28ed426251075b"
    },
    {
        "hash": "7b8f348e56fda14c3807ebe22840e77463e7bb48",
        "author": "Igor Canadi",
        "date": "2015-02-24T12:20:43-08:00",
        "message": "Attempt at fixing travis issue",
        "modified_files_count": 1,
        "modified_files": [
            "db/managed_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7b8f348e56fda14c3807ebe22840e77463e7bb48"
    },
    {
        "hash": "bd339a97984d58d1cbf1bde95196a74d1d404c31",
        "author": "Igor Canadi",
        "date": "2015-02-24T09:51:52-08:00",
        "message": "Unused managed iterator\n\nSummary: This causes warnings on OS X\n\nTest Plan: compiles\n\nReviewers: rven, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D33969",
        "modified_files_count": 1,
        "modified_files": [
            "db/managed_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bd339a97984d58d1cbf1bde95196a74d1d404c31"
    },
    {
        "hash": "a2b911b63f21185ca58381c0eb3ac04121615914",
        "author": "Jim Meyering",
        "date": "2015-02-20T11:52:20-08:00",
        "message": "inputs: restore \"const\" attribute removed by D33759\n\nSummary:\nThe \"const\" attribute applies to the type, and placing it\nbefore that return type retains the desired semantics,\nyet avoids the compiler error/warning.\n\nTest Plan: Run make\n\nReviewers: ljin, sdong, igor.sugak, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D33789",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a2b911b63f21185ca58381c0eb3ac04121615914"
    },
    {
        "hash": "c6d54b503702fca054f999cdfbc5923c6824b53c",
        "author": "Jim Meyering",
        "date": "2015-02-20T11:07:17-08:00",
        "message": "fix erroneous assert: cast kBlockSize (of type unsigned int) to \"int\"\n\nSummary:\nOtherwise, we would assert that an unsigned expression is always >= 0.\nThe intent was to form a possibly negative number, and to assert that\nthat value is always >= 0, but since one variable in the computation\nwas unsigned, the result was guaranteed to be unsigned, too, rendering\nthe assertion useless.\n\nCast that unsigned variable to \"int\", so that all operands\nare signed, and thus so that the result can be negative.\n\nTest Plan:\n  Run \"make EXTRA_CXXFLAGS='-W -Wextra'\" and see fewer errors.\n\nReviewers: ljin, sdong, igor.sugak, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D33771",
        "modified_files_count": 1,
        "modified_files": [
            "db/log_writer.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c6d54b503702fca054f999cdfbc5923c6824b53c"
    },
    {
        "hash": "aa5d8e6d956250ef8f378662e4fb6eb95784dade",
        "author": "Jim Meyering",
        "date": "2015-02-20T11:07:11-08:00",
        "message": "table_test.cc: add missing 5th arg in TestArgs initializer\n\nSummary:\nAdding -W and -Wextra to CXXFLAGS provoked this failure:\n\n\t  table/table_test.cc:1854:56: error: missing initializer for member ‘rocksdb::TestArgs::format_version’ [-Werror=missing-field-initializers]\n\t     TestArgs args = { DB_TEST, false, 16, kNoCompression };\n\t                                                          ^\n\nAdd the missing, 5th value (format_version).\n\nTest Plan:\n  Run \"make EXTRA_CXXFLAGS='-W -Wextra'\" and see fewer errors.\n\nReviewers: ljin, sdong, igor.sugak, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D33765",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aa5d8e6d956250ef8f378662e4fb6eb95784dade"
    },
    {
        "hash": "92416fa7f299ab784c693e8452f5a60fa1821720",
        "author": "Igor Canadi",
        "date": "2015-02-19T19:26:38-08:00",
        "message": "Fix mac build",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/92416fa7f299ab784c693e8452f5a60fa1821720"
    },
    {
        "hash": "73711f956c5ddc897190237d77a2ac15998e8dcc",
        "author": "Igor Sugak",
        "date": "2015-02-19T14:27:48-08:00",
        "message": "rocksdb: Fix scan-build bug 'Memory leak' in db/db_bench.cc\n\nSummary:\nThe bug is detected by scan-build.\n\nIn `void WriteSeqSeekSeq(ThreadState* thread)` memory is allocated in line 3118 `Slice key = AllocateKey();` but `Slice` is not responsible deleting `Slice::data()`.\n\nAdded `std::unique_ptr<const char[]>*` parameter to ` AllocateKey()`, so that it requires caller to not forget about Slice::data() management.\n\nscan-build bug report: http://home.fburl.com/~sugak/latest6/report-6e9754.html#EndPath\n\nTest Plan:\nMake sure scan-build does not report 'Memory leak' in db/db_bench.cc and all tests are passing.\n```lang=bash\n% make analyze\n% make check\n```\n\nReviewers: lgalanis, igor, meyering, sdong\n\nReviewed By: meyering, sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D33501",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/73711f956c5ddc897190237d77a2ac15998e8dcc"
    },
    {
        "hash": "98870c7b9c24b423d374d0b8c2227a0e95efaeea",
        "author": "Igor Sugak",
        "date": "2015-02-19T14:07:38-08:00",
        "message": "rocksdb: Fix scan-build memory warning in table/block_based_table_reader.cc\n\nSummary:\nscan-build is reporting two memory leak bugs in `table/block_based_table_reader.cc`. They are both false positives. In both cases we allocate memory in `ReadBlockFromFile` if `s.ok()`. Then after the function `ReadBlockFromFile` returns we check for the same variable if `s.ok()` and then use the memory that was allocated. The bugs reported by scan-build is if `ReadBlockFromFile` allocates memory and returns, but for some reason status `s` is not the same and `s.ok() != true`.\n\nIn this case scan-build is concerned that memory owner transfer is not explicit. I modified `ReadBlockFromFile` to accept `std::unique_ptr<Block>*` as a parameter, instead of raw pointer.\n\nscan-build reports:\nhttp://home.fburl.com/~sugak/latest2/report-a4b3fa.html#EndPath\nhttp://home.fburl.com/~sugak/latest2/report-29adbf.html#EndPath\n\nTest Plan:\nMake sure scan-build does not report these bugs and all tests are passing.\n```lang=bash\n% make check\n% make analyze\n```\n\nReviewers: sdong, lgalanis, meyering, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D33681",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/98870c7b9c24b423d374d0b8c2227a0e95efaeea"
    },
    {
        "hash": "12753130ec9b54189a1a0b0b9a821c47e6c17dc5",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-02-17T12:04:56-08:00",
        "message": "Remove ThreadStatusMultiCompaction test\n\nSummary:\nRemove ThreadStatusMultiCompaction test as it's currently written\nin a way that depends on some randomness, while the flush / compaction\nstatus of a single thread is also covered in ThreadStatusFlush\nand ThreadStatusSingleCompaction tests.\n\nTest Plan: ./db_test\n\nReviewers: igor, sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D33537",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/12753130ec9b54189a1a0b0b9a821c47e6c17dc5"
    },
    {
        "hash": "5f00af45708b0a40a7aaac630807871096643a7a",
        "author": "sdong",
        "date": "2015-02-11T16:16:50-08:00",
        "message": "DBTest.DestroyDBMetaDatabase: create DB directories if not exists\n\nSummary: DBTest.DestroyDBMetaDatabase occasionally fails on my dev host, for file not existing. Always create directories to avoid that.\n\nTest Plan: Run the test\n\nReviewers: rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D33321",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5f00af45708b0a40a7aaac630807871096643a7a"
    },
    {
        "hash": "fd5970b454b89aabba7e67f91fb1f36c9ff5044e",
        "author": "Igor Canadi",
        "date": "2015-02-10T19:56:33-08:00",
        "message": "Merge pull request #503 from weiweisd/master\n\nmodify double type equal check in json_document.cc",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/document/json_document.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fd5970b454b89aabba7e67f91fb1f36c9ff5044e"
    },
    {
        "hash": "513ad866b28bfe82d88caa7a93a019fc1f260562",
        "author": "Wei Wei",
        "date": "2015-02-11T10:19:52+08:00",
        "message": "modify double type euqal compare in json_document.cc",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/document/json_document.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/513ad866b28bfe82d88caa7a93a019fc1f260562"
    },
    {
        "hash": "5e8e453d598c56683a31ceac20c09a6e4cb782e7",
        "author": "fyrz",
        "date": "2015-02-10T21:12:27+01:00",
        "message": "[RocksJava] Integrated changes from D33165",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/rocksjni.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5e8e453d598c56683a31ceac20c09a6e4cb782e7"
    },
    {
        "hash": "91ac3b2067804920b3444aab7d2535cdb825f50a",
        "author": "sdong",
        "date": "2015-02-09T12:52:58-08:00",
        "message": "Print DB pointer when opening a DB\n\nSummary: Having a pointer for DB will be helpful to debug when GDB or working on a dump. If the client process doesn't have any thread actively working on RocksDB, it can be hard to find out.\n\nTest Plan: make all check\n\nReviewers: rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: yoshinorim, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D33159",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/91ac3b2067804920b3444aab7d2535cdb825f50a"
    },
    {
        "hash": "82faa377a8276faedfaeeebfbec6da6e2bc68540",
        "author": "Marko Kevac",
        "date": "2015-02-09T19:34:50+03:00",
        "message": "added simple example for db restore from backup",
        "modified_files_count": 1,
        "modified_files": [
            "examples/c_simple_example.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/82faa377a8276faedfaeeebfbec6da6e2bc68540"
    },
    {
        "hash": "d090330c8eb5b7ac61370e16305510e1e86cd913",
        "author": "Marko Kevac",
        "date": "2015-02-09T12:16:04+03:00",
        "message": "fixed c_simple_example and added some comments",
        "modified_files_count": 1,
        "modified_files": [
            "examples/c_simple_example.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d090330c8eb5b7ac61370e16305510e1e86cd913"
    },
    {
        "hash": "9651308307234b6eb08b3cdf62324b10df1e94e9",
        "author": "Marko Kevac",
        "date": "2015-02-09T12:11:42+03:00",
        "message": "renamed backup to backup_and_restore in c_test for clarity",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9651308307234b6eb08b3cdf62324b10df1e94e9"
    },
    {
        "hash": "218c3ecea3de9b0ced9e9ab7b68810e5e2e1b337",
        "author": "Igor Canadi",
        "date": "2015-02-06T13:01:59-08:00",
        "message": "Fix std::cout data race\n\nSummary: std::cout is not thread safe. tsan complains. Eliminate it.\n\nTest Plan: env_test with TSAN\n\nReviewers: yhchiang, rven, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D33087",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/218c3ecea3de9b0ced9e9ab7b68810e5e2e1b337"
    },
    {
        "hash": "8e83a9d3153e36ab0dadf433aa795d9cff124886",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-02-06T02:38:14-08:00",
        "message": "Add a missing field for STATE_MUTEX_WAIT to global_state_table\n\nSummary:\nAdd a missing field for STATE_MUTEX_WAIT to global_state_table.\nThis will fix the failure of thread_list_test.\n\nTest Plan:\nthread_list_test",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_operation.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8e83a9d3153e36ab0dadf433aa795d9cff124886"
    },
    {
        "hash": "7de4e99a8eedcff113e3d6e74d50a051f6a96c89",
        "author": "Igor Canadi",
        "date": "2015-02-05T11:44:17-08:00",
        "message": "Revert \"Fix wal_dir not getting cleaned\"\n\nThis reverts commit f36d394aeddf420661e54a1a0a54fcc790c9cffb.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7de4e99a8eedcff113e3d6e74d50a051f6a96c89"
    },
    {
        "hash": "9a52e06a02cb1e06cc27a68d652a0afe6c760d85",
        "author": "Jonah Cohen",
        "date": "2015-02-05T08:26:33-08:00",
        "message": "Add GetID to ColumnFamilyHandle\n\nSummary:\nExpose GetID to ColumnFamilyHandle interface so that we can save column\nfamily data by id instead of name.\n\nTest Plan: Testing in MySQL on Rocks.\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D32943",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9a52e06a02cb1e06cc27a68d652a0afe6c760d85"
    },
    {
        "hash": "f36d394aeddf420661e54a1a0a54fcc790c9cffb",
        "author": "Igor Canadi",
        "date": "2015-02-04T18:57:22-08:00",
        "message": "Fix wal_dir not getting cleaned",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f36d394aeddf420661e54a1a0a54fcc790c9cffb"
    },
    {
        "hash": "53ae09c398921a4eec63e5d92550bb8e0f49afd0",
        "author": "sdong",
        "date": "2015-02-04T18:32:53-08:00",
        "message": "db_test: fix a data race in SpecialEnv\n\nSummary: db_test's test class SpecialEnv has a thread unsafe variable rnd_ but it can be accessed by multiple threads. It is complained by TSAN. Protect it by a mutex.\n\nTest Plan: Run the test\n\nReviewers: yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D32895",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/53ae09c398921a4eec63e5d92550bb8e0f49afd0"
    },
    {
        "hash": "fe9f6911947a655b0f6dd579b40658f1beca17e8",
        "author": "sdong",
        "date": "2015-02-04T17:49:07-08:00",
        "message": "Fix fault_injestion_test\n\nSummary: A bug in MockEnv causes fault_injestion_test to fail. I don't know why it doesn't fail every time but it doesn't seem to be right.\n\nTest Plan:\nRun fault_injestion_test\nAlso run db_test with MEM_ENV=1 until the first failure.\n\nReviewers: yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D32877",
        "modified_files_count": 1,
        "modified_files": [
            "util/mock_env.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fe9f6911947a655b0f6dd579b40658f1beca17e8"
    },
    {
        "hash": "3e53760fc437b653298f23c4e5073edd53e8599a",
        "author": "Igor Canadi",
        "date": "2015-02-04T16:20:25-08:00",
        "message": "Fix compaction_picker_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3e53760fc437b653298f23c4e5073edd53e8599a"
    },
    {
        "hash": "756e1f151e4768a3adfbe067849d25130f4708ca",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-02-03T17:53:05-08:00",
        "message": "Remove unused util/thread_event_info.h\n\nSummary:\nRemove unused util/thread_event_info.h, which is replaced by\nutil/thread_operation.h\n\nTest Plan:\nmake dbg -j32\nmake release -j32",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_event_info.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/756e1f151e4768a3adfbe067849d25130f4708ca"
    },
    {
        "hash": "9898f639889a82490861e0bb3006ac7d2b0e1a59",
        "author": "sdong",
        "date": "2015-02-03T09:48:03-08:00",
        "message": "Divide test DBIteratorTest.DBIterator to smaller tests\n\nSummary:\nWhen building on my host, I saw warning:\n\nIn file included from db/db_iter_test.cc:17:0:\ndb/db_iter_test.cc: In member function â€˜void rocksdb::_Test_DBIterator::_Run()â€™:\n./util/testharness.h:147:14: note: variable tracking size limit exceeded with -fvar-tracking-assignments, retrying without\n void TCONCAT(_Test_,name)::_Run()\n              ^\n./util/testharness.h:134:23: note: in definition of macro â€˜TCONCAT1â€™\n #define TCONCAT1(a,b) a##b\n                       ^\n./util/testharness.h:147:6: note: in expansion of macro â€˜TCONCATâ€™\n void TCONCAT(_Test_,name)::_Run()\n      ^\ndb/db_iter_test.cc:589:1: note: in expansion of macro â€˜TESTâ€™\n TEST(DBIteratorTest, DBIterator) {\n ^\n\nBy dividing the test into small tests, it should fix the problem\n\nTest Plan: Run the test\n\nReviewers: rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D32679",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9898f639889a82490861e0bb3006ac7d2b0e1a59"
    },
    {
        "hash": "829363b449fc6f0f9c973f530222f5767c625704",
        "author": "sdong",
        "date": "2015-02-03T09:46:04-08:00",
        "message": "Options::PrepareForBulkLoad() to increase parallelism of flushes\n\nSummary: Increasing parallelism of flushes will help bulk load throughput.\n\nTest Plan: Compile it.\n\nReviewers: MarkCallaghan, yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D32685",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/829363b449fc6f0f9c973f530222f5767c625704"
    },
    {
        "hash": "2c2d5ab7e86c387c538f3a9eda8b9cc9408df54c",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-02-02T15:20:19-08:00",
        "message": "Fix compile warning in util/xfunc.h\n\nSummary:\n./util/xfunc.h:31:1: error: class 'Options' was previously declared as a struct [-Werror,-Wmismatched-tags]\nclass Options;\n^\n\nTest Plan:\nmake dbg -j32",
        "modified_files_count": 1,
        "modified_files": [
            "util/xfunc.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2c2d5ab7e86c387c538f3a9eda8b9cc9408df54c"
    },
    {
        "hash": "868bfa40336b99005beb9f4fc9cf2acc0d330ae1",
        "author": "Igor Canadi",
        "date": "2015-02-02T00:13:25-06:00",
        "message": "Merge pull request #488 from ekg/master\n\nremove old debugging message (#487)",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/868bfa40336b99005beb9f4fc9cf2acc0d330ae1"
    },
    {
        "hash": "e6eaf938c384d899374f4bab8852413b79dc0662",
        "author": "Erik Garrison",
        "date": "2015-02-01T20:34:24+00:00",
        "message": "remove old debugging message (#487)\n\nIt doesn't seem this is needed.",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e6eaf938c384d899374f4bab8852413b79dc0662"
    },
    {
        "hash": "68cd93b8739161a8cc7148256d49039fee9eaf4f",
        "author": "fyrz",
        "date": "2015-01-31T15:15:48+01:00",
        "message": "[RocksJava] GetUpdatesSince support\n\nSummary:\nThis differential describes further changes to the Java-API\n\nNew methods:\n\n* GetUpdatesSince\n* GetLatestSequenceNumber\n* EnableFileDeletions\n* DisableFileDeletions\n\nThis pull requests depends on: https://github.com/facebook/rocksdb/pull/472\n\nTest Plan:\nmake rocksdbjava\nmake jtest\nmvn -f rocksjni.pom package\n\nReviewers: yhchiang, adamretter, ankgup87\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D32151",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/transaction_log.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/68cd93b8739161a8cc7148256d49039fee9eaf4f"
    },
    {
        "hash": "caedd40ddd189eadc2b2974c77b129117c6a8560",
        "author": "fyrz",
        "date": "2015-01-31T15:15:47+01:00",
        "message": "[RocksJava] Adjusted auto pointer",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/rocksjni.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/caedd40ddd189eadc2b2974c77b129117c6a8560"
    },
    {
        "hash": "d3a736761b34caa8ac18625d20fb6e662d8e02f9",
        "author": "Adam Retter",
        "date": "2015-01-31T14:11:13+00:00",
        "message": "Merge pull request #482 from fyrz/RocksJava-TTL-Fix\n\n[RocksJava] Fix ColumnFamily name alloc in TTL DB",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/ttl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d3a736761b34caa8ac18625d20fb6e662d8e02f9"
    },
    {
        "hash": "939bb36597d9fc812888c3dae33fe32fd5f1c428",
        "author": "fyrz",
        "date": "2015-01-31T14:43:21+01:00",
        "message": "[RocksJava] Fix ColumnFamily name alloc in TTL DB\n\nWhile fixing the RocksDB ColumnFamily name the TTL DB\nwasn`t touched. This commit resolves this.",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/ttl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/939bb36597d9fc812888c3dae33fe32fd5f1c428"
    },
    {
        "hash": "db9ed5fdb44a78e955c56b0483c50caa0c4dd22e",
        "author": "sdong",
        "date": "2015-01-30T16:07:35-08:00",
        "message": "Unaddressed comment in previous diff. Change only in code comments.",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/slice_transform.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/db9ed5fdb44a78e955c56b0483c50caa0c4dd22e"
    },
    {
        "hash": "173c52a97f464fb3d0101612c6eef8a70c9a4c3e",
        "author": "Igor Canadi",
        "date": "2015-01-29T13:43:09-08:00",
        "message": "Fix build on older compilers -- emplace() is not available",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/173c52a97f464fb3d0101612c6eef8a70c9a4c3e"
    },
    {
        "hash": "d07fec3bdcda95e1c0957fc200c78af694a77082",
        "author": "sdong",
        "date": "2015-01-28T16:19:27-08:00",
        "message": "make DBTest.SharedWriteBuffer to pass MockEnv\n\nSummary: DBTest.SharedWriteBuffer uses an Options that doesn't pass CurrentOptions(), so that it doesn't use MockEnv. However, DBTest's constructor uses MockEnv to call DestoryDB() to clean up, causing uncleaned state before it runs.\n\nTest Plan: Run the test modified to make sure they pass default Env and SharedWriteBuffer now passes MockEnv.\n\nReviewers: rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D32475",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d07fec3bdcda95e1c0957fc200c78af694a77082"
    },
    {
        "hash": "e84299c769f57c62aa6c9bf353802f31347b3ac8",
        "author": "sdong",
        "date": "2015-01-28T15:21:39-08:00",
        "message": "Fix bug recently introduced in MemFile::Lock()\n\nSummary: This bug fails DBTest.CheckLock\n\nTest Plan: DBTest.CheckLock now passes with MEM_ENV=1.\n\nReviewers: rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D32451",
        "modified_files_count": 1,
        "modified_files": [
            "util/mock_env.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e84299c769f57c62aa6c9bf353802f31347b3ac8"
    },
    {
        "hash": "e5aab4c2b230b8e3171fb571c614a6f81121608d",
        "author": "sdong",
        "date": "2015-01-28T15:16:52-08:00",
        "message": "Fix data race in HashLinkList\n\nSummary:\n1) need to do acquire load when read the first entry in the bucket.\n2) Make num_entries atomic\n\nTest Plan: Ran DBTest.MultiThreaded with TSAN\n\nReviewers: yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D32361",
        "modified_files_count": 1,
        "modified_files": [
            "util/hash_linklist_rep.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e5aab4c2b230b8e3171fb571c614a6f81121608d"
    },
    {
        "hash": "0c4d1053dfe7e9ff2b2e936b9a4a09c35969504c",
        "author": "Igor Canadi",
        "date": "2015-01-28T13:42:40-08:00",
        "message": "Fix data race #5\n\nSummary: TSAN complained that these are non-atomic reads and writes from different threads.\n\nTest Plan: TSAN no longer complains\n\nReviewers: yhchiang, rven, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D32409",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_status_util_debug.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0c4d1053dfe7e9ff2b2e936b9a4a09c35969504c"
    },
    {
        "hash": "cc0d8be011e3dc89e0f88431bb1068d58060ca8b",
        "author": "fyrz",
        "date": "2015-01-28T21:54:01+01:00",
        "message": "[RocksJava] Integrated review comments (D32145)",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/portal.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cc0d8be011e3dc89e0f88431bb1068d58060ca8b"
    },
    {
        "hash": "5257c9c42c489828863f7da5d20efc4a78f3d1f4",
        "author": "Igor Canadi",
        "date": "2015-01-28T10:53:46-08:00",
        "message": "Merge pull request #452 from robertabcd/backupable-mem\n\nReduce memory footprint in backupable db.",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5257c9c42c489828863f7da5d20efc4a78f3d1f4"
    },
    {
        "hash": "560ed402bdd74497470948e9f570ed4fd60c83cb",
        "author": "Igor Canadi",
        "date": "2015-01-27T21:00:33-08:00",
        "message": "[minor] fprintf to stderr instead of stdout in test",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/560ed402bdd74497470948e9f570ed4fd60c83cb"
    },
    {
        "hash": "d2a2b058f089d9b0b9e70aa3b365a04008cdd504",
        "author": "sdong",
        "date": "2015-01-27T17:06:47-08:00",
        "message": "fault_injection_test: to support file closed after being deleted\n\nSummary: fault_injection_test occasionally fails because file closing can happen after deletion. Improve the test to support it.\n\nTest Plan: I have a new test case I'm working on, where the issue appears almost every time. With the patch, the problem goes away.\n\nReviewers: rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D32373",
        "modified_files_count": 1,
        "modified_files": [
            "db/fault_injection_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d2a2b058f089d9b0b9e70aa3b365a04008cdd504"
    },
    {
        "hash": "ea7d0b943a07ee54bba826e30d022927376c6f77",
        "author": "alabid",
        "date": "2015-01-27T19:37:36-05:00",
        "message": "Added WriteBatch block to simple_example.cc",
        "modified_files_count": 1,
        "modified_files": [
            "examples/simple_example.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ea7d0b943a07ee54bba826e30d022927376c6f77"
    },
    {
        "hash": "d6c7300ccfef3554da0ffbc874fd261cf2b1de98",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-01-27T15:01:04-08:00",
        "message": "Fixed a compile warning in clang in db/listener_test.cc\n\nSummary: Fixed a compile warning in clang in db/listener_test.cc\n\nTest Plan: make listener_test\n\nReviewers: oridb\n\nReviewed By: oridb\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D32337",
        "modified_files_count": 1,
        "modified_files": [
            "db/listener_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d6c7300ccfef3554da0ffbc874fd261cf2b1de98"
    },
    {
        "hash": "e919ecedfc18d1e2007711ddf2dc0f641f689528",
        "author": "sdong",
        "date": "2015-01-27T14:08:08-08:00",
        "message": "SuperVersion::Unref() to use sequential consistency to decrease ref counting\n\nSummary: I'm not sure the expected results of std::atomic::fetch_sub() when using memory_order_relaxed, and I suspect TSAN complains.\n\nTest Plan: make all check\n\nReviewers: rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D32259",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e919ecedfc18d1e2007711ddf2dc0f641f689528"
    },
    {
        "hash": "4c49fedaf15bca9f8cb82d92a8dc934e7d1a3309",
        "author": "sdong",
        "date": "2015-01-27T13:56:03-08:00",
        "message": "Use ustricter consistency in thread local operations\n\nSummary:\nThreadSanitizer complains data race of super version and version's destructor with Get(). This patch will fix those warning.\n\nThe warning is likely from ColumnFamilyData::ReturnThreadLocalSuperVersion(). With relaxed consistency of CAS, reading the data of the super version can technically happen after swapping it in, enabling the background thread to clean it up.\n\nTest Plan: make all check\n\nReviewers: rven, igor, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D32265",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4c49fedaf15bca9f8cb82d92a8dc934e7d1a3309"
    },
    {
        "hash": "1b43ab58d96a44af2dc43cdac2216658755dbcb4",
        "author": "sdong",
        "date": "2015-01-27T13:53:17-08:00",
        "message": "fault_injection_test: add more logging and makes synchronization slightly stronger\n\nSummary:\nWe see failure of the test in travis but I can't repro it.\nAdd more logging in failure cases to help us figure out which failure it is.\nAlso makes synchronization slightly stronger, though there isn't seem to be a problem without it\n\nTest Plan: Run the test\n\nReviewers: rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D32319",
        "modified_files_count": 1,
        "modified_files": [
            "db/fault_injection_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1b43ab58d96a44af2dc43cdac2216658755dbcb4"
    },
    {
        "hash": "b3c1331488b573e741ae9fb53913af9ccb27c713",
        "author": "fyrz",
        "date": "2015-01-27T21:14:47+01:00",
        "message": "[RocksJava] Removed todo comment in portal.h\n\nAs jclass instances shall not be cached, both\ntodos are obsolete and can be removed.",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/portal.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b3c1331488b573e741ae9fb53913af9ccb27c713"
    },
    {
        "hash": "7ffcc457ffad8abd6938296185a0fb8ea292a906",
        "author": "fyrz",
        "date": "2015-01-27T21:14:47+01:00",
        "message": "[RocksJava] Cleanup portal.h\n\nSimple Java Native Objects usually are represented using\nthe same functionality but within different classes.\n\nWith this commit a template class was introduced to remove\nthe redundant impelementation to a certain extent.",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/portal.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7ffcc457ffad8abd6938296185a0fb8ea292a906"
    },
    {
        "hash": "c1de6c42a0cabd1180b52f34b4b52d00290b7446",
        "author": "sdong",
        "date": "2015-01-26T15:53:21-08:00",
        "message": "fault_injection_test: add a test case to drop random number of unsynced data\n\nSummary: Currently fault_injection_test has a test case to drop all the unsynced data. Add one more case to take a randomized bytes from it.\n\nTest Plan: Run the test\n\nReviewers: rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D32229",
        "modified_files_count": 1,
        "modified_files": [
            "db/fault_injection_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c1de6c42a0cabd1180b52f34b4b52d00290b7446"
    },
    {
        "hash": "26b50783d30c54205aba4a2e0693efdec6e0798d",
        "author": "Igor Canadi",
        "date": "2015-01-23T18:10:52-08:00",
        "message": "Fix assert in histogramData",
        "modified_files_count": 1,
        "modified_files": [
            "util/statistics.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/26b50783d30c54205aba4a2e0693efdec6e0798d"
    },
    {
        "hash": "42189612c3b6ce6557337b8e1b78dbfb47485764",
        "author": "Igor Canadi",
        "date": "2015-01-23T18:04:39-08:00",
        "message": "Fix data race #2\n\nSummary: We should not be calling InternalStats methods outside of the mutex.\n\nTest Plan:\nCOMPILE_WITH_TSAN=1 m db_test && ROCKSDB_TESTS=CompactionTrigger ./db_test\n\nfailing before the diff, works now\n\nReviewers: yhchiang, rven, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D32127",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/42189612c3b6ce6557337b8e1b78dbfb47485764"
    },
    {
        "hash": "f5a839835263ec3a296b731a89ddbdb65d580a80",
        "author": "Igor Canadi",
        "date": "2015-01-23T17:35:12-08:00",
        "message": "Fix archive WAL race conditions\n\nSummary: More race condition bugs with our archive WAL files. I do believe this caused t5988326, but can't reproduce the failure unfortunately.\n\nTest Plan: make check\n\nReviewers: yhchiang, rven, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D32103",
        "modified_files_count": 1,
        "modified_files": [
            "db/wal_manager.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f5a839835263ec3a296b731a89ddbdb65d580a80"
    },
    {
        "hash": "43ec4e68ba609b246993f1d8dfb33f4657382ecf",
        "author": "sdong",
        "date": "2015-01-23T16:30:43-08:00",
        "message": "fault_injection_test: bring back 3 iteration runs\n\nSummary: 3 iterations were disabled by mistake by one recent commit, causing CLANG build error. Fix it\n\nTest Plan:\nUSE_CLANG=1 make fault_injection_test\nand run the test\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D32109",
        "modified_files_count": 1,
        "modified_files": [
            "db/fault_injection_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/43ec4e68ba609b246993f1d8dfb33f4657382ecf"
    },
    {
        "hash": "c2e8e8c1c0751246da71a9256ae5237484f29857",
        "author": "sdong",
        "date": "2015-01-23T16:12:48-08:00",
        "message": "Fix two namings in fault_injection_test.cc\n\nSummary: fault_injection_test.cc has two variable names not following the convention fix it.\n\nTest Plan: run the test\n\nReviewers: rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D32097",
        "modified_files_count": 1,
        "modified_files": [
            "db/fault_injection_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c2e8e8c1c0751246da71a9256ae5237484f29857"
    },
    {
        "hash": "b4c13a868a57cda00c12b7d8a202fa0499c21578",
        "author": "sdong",
        "date": "2015-01-23T15:50:15-08:00",
        "message": "fault_injection_test: improvements and add new tests\n\nSummary:\nWrapper classes in fault_injection_test doesn't simulate RocksDB Env behavior close enough. Improve it by:\n(1) when fsync, don't sync parent\n(2) support directory fsync\n(3) support multiple directories\n\nAdd test cases of\n(1) persisting by WAL fsync, not just compact range\n(2) different WAL dir\n(3) combination of (1) and (2)\n(4) data directory is not the same as db name.\n\nTest Plan: Run the test and make sure it passes.\n\nReviewers: rven, yhchiang, igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D32031",
        "modified_files_count": 1,
        "modified_files": [
            "db/fault_injection_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b4c13a868a57cda00c12b7d8a202fa0499c21578"
    },
    {
        "hash": "a52dd00243ae939ab6dbd1e72c0585ae840066b4",
        "author": "Igor Canadi",
        "date": "2015-01-23T15:02:43-08:00",
        "message": "Fix ASAN failure with backupable DB\n\nSummary: It looks like ASAN with gcc 4.9 works better than 4.8.1. It detected this possibility of heap buffer overflow. This was in our codebase for a year :)\n\nTest Plan: COMPILE_WITH_ASAN=1 make backupable_db && ./backupable_db\n\nReviewers: yhchiang, rven, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D32085",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a52dd00243ae939ab6dbd1e72c0585ae840066b4"
    },
    {
        "hash": "3b494a6103d1c6585f9fe96796c907bc0d1e096d",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-01-22T16:57:16-08:00",
        "message": "Make options_test runnable on ROCKSDB_LITE\n\nSummary:\nMake options_test runnable on ROCKSDB_LITE by blocking\nthose tests that require non-ROCKSDB_LITE feature.\n\nTest Plan:\nmake options_test OPT=-DROCKSDB_LITE -j32\n./options_test\nmake clean\nmake options_test -j32\n./options_test\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D32025",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3b494a6103d1c6585f9fe96796c907bc0d1e096d"
    },
    {
        "hash": "46a7048dcdd1ccc29058d1ed1f16dd19fb532721",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-01-22T15:45:02-08:00",
        "message": "Reduce false alarm in ThreadStatusMultipleCompaction test",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/46a7048dcdd1ccc29058d1ed1f16dd19fb532721"
    },
    {
        "hash": "aed0286984cc6b2a8563a8d79c283ef60e4afd3d",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-01-22T15:41:28-08:00",
        "message": "Merge pull request #462 from fyrz/RocksJava-JNI-allocation-correction\n\n[RocksJava] ColumnFamily name JNI correction",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/rocksjni.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aed0286984cc6b2a8563a8d79c283ef60e4afd3d"
    },
    {
        "hash": "e5df90f5d06b891ead0adc1205c5d3b6e2400129",
        "author": "Igor Canadi",
        "date": "2015-01-22T14:59:36-08:00",
        "message": "Fix comment (minor)",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/table.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e5df90f5d06b891ead0adc1205c5d3b6e2400129"
    },
    {
        "hash": "2efe22849999728d4118c28451931b76a8091d3d",
        "author": "fyrz",
        "date": "2015-01-22T23:37:45+01:00",
        "message": "[RocksJava] Incorporated changes for D31809",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/rocksjni.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2efe22849999728d4118c28451931b76a8091d3d"
    },
    {
        "hash": "e204a5a16c9fec2cc8704be67d81ae219cf958f2",
        "author": "fyrz",
        "date": "2015-01-22T23:29:45+01:00",
        "message": "[RocksJava] ColumnFamily name JNI correction\n\nSummary:\nPrevious to this commit there was a problem with unterminated\nString usage as jByteArrays are not zero terminated.\n\nTest Plan:\nmake rocksdbjava\nmake jtest\nmvn -f rocksjni.pom package\n\nReviewers: yhchiang, adamretter, ankgup87\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D31809",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/rocksjni.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e204a5a16c9fec2cc8704be67d81ae219cf958f2"
    },
    {
        "hash": "96264784d94e7d5a2f46256656ae2a40e55b776d",
        "author": "fyrz",
        "date": "2015-01-22T23:29:45+01:00",
        "message": "[RocksJava] ColumnFamily name JNI correction\n\nPrevious to this commit there was a problem with unterminated\nString usage as jByteArrays are not zero terminated.",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/rocksjni.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/96264784d94e7d5a2f46256656ae2a40e55b776d"
    },
    {
        "hash": "ae82849bc9320347cced1c050089eeab8c1fc3e4",
        "author": "Igor Canadi",
        "date": "2015-01-21T18:23:12-08:00",
        "message": "Fix build failure",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ae82849bc9320347cced1c050089eeab8c1fc3e4"
    },
    {
        "hash": "423dee8418d2ca6b091805c39d11b3f4e4492a9f",
        "author": "Igor Canadi",
        "date": "2015-01-21T18:18:15-08:00",
        "message": "Abort db_bench if Get() returns error\n\nSummary:\nI saw this when running readrandom benchmark with corrupted database -- benchmark worked!\n\nIf a Get() returns corruption we should probably abort.\n\nTest Plan: compiles\n\nReviewers: yhchiang, rven, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D31701",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/423dee8418d2ca6b091805c39d11b3f4e4492a9f"
    },
    {
        "hash": "206237d12126ced35688e5fa75ce1c0d059bec5b",
        "author": "sdong",
        "date": "2015-01-21T16:36:13-08:00",
        "message": "DBImpl::CheckConsistency() shouldn't create path name with double \"/\"\n\nSummary: GetLiveFilesMetaData() already adds a leading \"/\" in file name. No need to add one extra \"/\" in DBImpl::CheckConsistency()\n\nTest Plan: make all check\n\nReviewers: yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D31779",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/206237d12126ced35688e5fa75ce1c0d059bec5b"
    },
    {
        "hash": "4ffe0be41452b27191ea7cb04e090979a014fcdf",
        "author": "fyrz",
        "date": "2015-01-19T22:19:58+01:00",
        "message": "[RocksJava] Integrated changes for D31449",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/ttl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4ffe0be41452b27191ea7cb04e090979a014fcdf"
    },
    {
        "hash": "1190ebe5aadc43506fc559fedeeeea66ba287005",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-01-17T09:08:50-08:00",
        "message": "Merge pull request #461 from fyrz/RocksJava-DirectSlice-Fix\n\n[RocksJava] DirectSlice String termination fix",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/slice.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1190ebe5aadc43506fc559fedeeeea66ba287005"
    },
    {
        "hash": "ea25ff7158b26e2b0acb9f26be206b6b57af4abb",
        "author": "fyrz",
        "date": "2015-01-17T01:22:29+01:00",
        "message": "[RocksJava] Integrated proposed simplificiation",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/slice.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ea25ff7158b26e2b0acb9f26be206b6b57af4abb"
    },
    {
        "hash": "d68e83c356626664988ad28c3916c02c08ac2e78",
        "author": "fyrz",
        "date": "2015-01-17T01:15:49+01:00",
        "message": "[RocksJava] DirectSlice String termination fix\n\nDirectSlice fix for non terminated String copy. This lead sometimes\nto problems with DirectSliceTest.",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/slice.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d68e83c356626664988ad28c3916c02c08ac2e78"
    },
    {
        "hash": "3d628f8f226daec723bafa9cd276092cd634e216",
        "author": "Igor Canadi",
        "date": "2015-01-16T09:18:45-08:00",
        "message": "Update format_version comment\n\nSummary: We added a new format version. Reflect that in the comments.\n\nTest Plan: none\n\nReviewers: sdong, rven, yhchiang, MarkCallaghan\n\nReviewed By: MarkCallaghan\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D31629",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/table.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3d628f8f226daec723bafa9cd276092cd634e216"
    },
    {
        "hash": "f2ddb8b452bb27eceef6752b5827bd287465f540",
        "author": "Venkatesh Radhakrishnan",
        "date": "2015-01-15T11:47:41-08:00",
        "message": "Fix for bug where GeoDB accesses key after next modification of iterator\n\nSummary:\nWhile running cross-functional tests for weak iterators, I\nencountered a bug in GeoDB. GeoDB reads a key from the database and\ntries to use it after doing a Seek. Fixing it by storing the key locally\nso that it is still visible after the Seek.\n\nTest Plan: Run geodb_test\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D31599",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/geodb/geodb_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f2ddb8b452bb27eceef6752b5827bd287465f540"
    },
    {
        "hash": "2bb059007b5bd8783148f7dcf4e1cc2a1068816f",
        "author": "Igor Canadi",
        "date": "2015-01-14T16:25:36-08:00",
        "message": "Change db_stress to work with format_version == 2",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2bb059007b5bd8783148f7dcf4e1cc2a1068816f"
    },
    {
        "hash": "516a04267ed77edc9b902b6aaf3407c940a81f2d",
        "author": "Igor Canadi",
        "date": "2015-01-14T09:45:29-08:00",
        "message": "Add LZ4 compression to sanity test\n\nSummary: This will be used to test format changes in https://reviews.facebook.net/D31461\n\nTest Plan: run it\n\nReviewers: MarkCallaghan, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D31515",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_sanity_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/516a04267ed77edc9b902b6aaf3407c940a81f2d"
    },
    {
        "hash": "2ccc54301da8e7ee518dd0cd3f89abed8e1f770a",
        "author": "Igor Canadi",
        "date": "2015-01-13T18:19:26-08:00",
        "message": "Merge pull request #460 from neutronsharc/master\n\nRemove duplicated method declarations in C header.",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2ccc54301da8e7ee518dd0cd3f89abed8e1f770a"
    },
    {
        "hash": "2a7bd0ea45f18cb82ae784ce1a1a618235787b3f",
        "author": "Xiangyong Ouyang",
        "date": "2015-01-14T01:20:30+00:00",
        "message": "Remove duplicated method declarations in C header.",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2a7bd0ea45f18cb82ae784ce1a1a618235787b3f"
    },
    {
        "hash": "bb128bfec3e620597a4827bfb727de6d083c42ff",
        "author": "sdong",
        "date": "2015-01-13T16:48:18-08:00",
        "message": "More accurate message for compaction applied to a different version\n\nTest Plan: Compile. Run it.\n\nReviewers: yhchiang, dhruba, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D31479",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bb128bfec3e620597a4827bfb727de6d083c42ff"
    },
    {
        "hash": "53f615df6acfd716945a040cd4a9e50d9c6c8783",
        "author": "Igor Canadi",
        "date": "2015-01-13T12:27:28-08:00",
        "message": "Fix clang build",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtablerep_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/53f615df6acfd716945a040cd4a9e50d9c6c8783"
    },
    {
        "hash": "02b30202cd074d1e78585ed536403394f570ea62",
        "author": "Igor Canadi",
        "date": "2015-01-13T09:08:32-08:00",
        "message": "Merge pull request #455 from Andersbakken/stdlib_fix\n\nBuild with clang 3.5 on Linux.",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/02b30202cd074d1e78585ed536403394f570ea62"
    },
    {
        "hash": "2159484dd6a3af5de3fa05e358aacc4f8f378e6a",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-01-13T01:40:11-08:00",
        "message": "Remove two unnecessary blank lines in db/db_test.cc",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2159484dd6a3af5de3fa05e358aacc4f8f378e6a"
    },
    {
        "hash": "d2c018fd5bc45152e3d69ab29edf00dc10448d23",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-01-13T01:02:10-08:00",
        "message": "Make ThreadStatusMultipleCompaction more robust.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d2c018fd5bc45152e3d69ab29edf00dc10448d23"
    },
    {
        "hash": "bf9aa4dfcd27e7dc4f55d63d0adf5abaf86b06bd",
        "author": "Yueh-Hsuan Chiang",
        "date": "2015-01-13T00:38:09-08:00",
        "message": "Improve GetThreadStatus to avoid false alarm in some case.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bf9aa4dfcd27e7dc4f55d63d0adf5abaf86b06bd"
    },
    {
        "hash": "402c1152a7b69c2aee7d4aa8f678d65a0f222058",
        "author": "Igor Canadi",
        "date": "2015-01-12T18:17:30-08:00",
        "message": "Fix c_simple_example",
        "modified_files_count": 1,
        "modified_files": [
            "examples/c_simple_example.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/402c1152a7b69c2aee7d4aa8f678d65a0f222058"
    },
    {
        "hash": "a9ea65d65275d419a9178f5906a3f98c8a30e267",
        "author": "Anders Bakken",
        "date": "2015-01-12T09:59:36-08:00",
        "message": "Build with clang 3.5 on Linux.",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a9ea65d65275d419a9178f5906a3f98c8a30e267"
    },
    {
        "hash": "93b35c299b6c69c0ec702881f85219d62ea5f9c0",
        "author": "Igor Canadi",
        "date": "2015-01-09T09:34:08-08:00",
        "message": "Merge pull request #453 from fyrz/SimpleCExampleSigSegv\n\nMemory issue fix in c_simple_example",
        "modified_files_count": 1,
        "modified_files": [
            "examples/c_simple_example.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/93b35c299b6c69c0ec702881f85219d62ea5f9c0"
    },
    {
        "hash": "628a67b0071f77ce45334601d12269a49db94d95",
        "author": "Robert",
        "date": "2015-01-09T16:58:13+08:00",
        "message": "Reduce memory footprint in backupable db.\n\n* Use emplace when possible.\n* Make FileInfo shared among all BackupMeta, instead of storing filenames.\n* Make checksum_value in FileInfo constant.\n* Reserve space beforehand if container size is known.\n* Make FileInfo and BackupMeta non-copyable and non-assignable to prevent future logic errors.\n  It is very dangerous to copy BackupMeta without careful handling refcounts of FileInfo.\n* Remove a copy of BackupMeta when detected corrupt backup.",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/628a67b0071f77ce45334601d12269a49db94d95"
    },
    {
        "hash": "ef390164244b14d3cecdd87dde1ff2404a6ae86b",
        "author": "fyrz",
        "date": "2015-01-09T09:41:36+01:00",
        "message": "Fixed memory issue in c_simple_example\n\nValgrind report prior to this fix:\n==20829== Memcheck, a memory error detector\n==20829== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.\n==20829== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info\n==20829== Command: ./c_simple_example\n==20829==\n==20829== Invalid read of size 1\n==20829==    at 0x4C2F1C8: strcmp (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==20829==    by 0x422522: main (in /home/user/rocksgit/transfer/rocksdb-git/examples/c_simple_example)\n==20829==  Address 0x5f60df5 is 0 bytes after a block of size 5 alloc'd\n==20829==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==20829==    by 0x4226D5: CopyString (c.cc:498)\n==20829==    by 0x423032: rocksdb_get (c.cc:730)\n==20829==    by 0x4224EB: main (in /home/user/rocksgit/transfer/rocksdb-git/examples/c_simple_example)\n==20829==\n==20829==\n==20829== HEAP SUMMARY:\n==20829==     in use at exit: 77 bytes in 5 blocks\n==20829==   total heap usage: 4,491 allocs, 4,486 frees, 839,216 bytes allocated\n==20829==\n==20829== LEAK SUMMARY:\n==20829==    definitely lost: 5 bytes in 1 blocks\n==20829==    indirectly lost: 0 bytes in 0 blocks\n==20829==      possibly lost: 0 bytes in 0 blocks\n==20829==    still reachable: 72 bytes in 4 blocks\n==20829==         suppressed: 0 bytes in 0 blocks\n==20829== Rerun with --leak-check=full to see details of leaked memory\n==20829==\n==20829== For counts of detected and suppressed errors, rerun with: -v\n==20829== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)",
        "modified_files_count": 1,
        "modified_files": [
            "examples/c_simple_example.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ef390164244b14d3cecdd87dde1ff2404a6ae86b"
    },
    {
        "hash": "9ef59a09a50c61e4743fc7edac6a660853cbd9fd",
        "author": "sdong",
        "date": "2015-01-07T12:03:40-08:00",
        "message": "VersionSet::AddLiveFiles() to assert current version is included.\n\nSummary: Add an extra assert to make sure current version is included in VersionSet::AddLiveFiles().\n\nTest Plan: make all check\n\nReviewers: yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, hermanlee4, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D30819",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9ef59a09a50c61e4743fc7edac6a660853cbd9fd"
    },
    {
        "hash": "07aa4e0e35831a29a68e82747b271cca1d5058f6",
        "author": "Igor Canadi",
        "date": "2015-01-05T17:32:49-08:00",
        "message": "Fix compaction summary log for trivial move\n\nSummary: When trivial move commit is done, we log the summary of the input version instead of current. This is inconsistent with other log messages and confusing.\n\nTest Plan: compiles\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D30939",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/07aa4e0e35831a29a68e82747b271cca1d5058f6"
    },
    {
        "hash": "fa0b126c0ca60e593eee4a8e833be8b724a3499b",
        "author": "Igor Canadi",
        "date": "2015-01-05T10:49:41-08:00",
        "message": "Fix corruption_test -- if status is not OK, return status -- during recovery",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fa0b126c0ca60e593eee4a8e833be8b724a3499b"
    },
    {
        "hash": "9619081d9bf14b74a203bf308af6f92fdb9967b1",
        "author": "Igor Canadi",
        "date": "2015-01-05T09:59:50-08:00",
        "message": "Merge pull request #449 from robertabcd/improve-backupable\n\nImprove backupable db performance on loading BackupMeta",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9619081d9bf14b74a203bf308af6f92fdb9967b1"
    },
    {
        "hash": "49376bfe87cb4bb8aa7667d1258a5248054d54a2",
        "author": "Robert",
        "date": "2015-01-05T21:21:04+08:00",
        "message": "Fix errors when using -Wshorten-64-to-32.",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/49376bfe87cb4bb8aa7667d1258a5248054d54a2"
    },
    {
        "hash": "a8c5564a9de2014306887d8121328caeffb6480d",
        "author": "Robert",
        "date": "2015-01-04T12:20:49+08:00",
        "message": "Do not issue extra GetFileSize() calls when loading BackupMeta.",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a8c5564a9de2014306887d8121328caeffb6480d"
    },
    {
        "hash": "caa1fd0e0e26b520ff4fd2da25224a3372935a7d",
        "author": "Robert",
        "date": "2015-01-04T12:19:32+08:00",
        "message": "Improve performance when loading BackupMeta.\n\n* Use strtoul() and strtoull() instead of sscanf().\n  glibc's sscanf() will do a implicit strlen().\n\n* Move implicit construction of Slice(\"crc32 \") out of loop.",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/caa1fd0e0e26b520ff4fd2da25224a3372935a7d"
    },
    {
        "hash": "e9ca3581579c03799856edad5b4413ad430f8263",
        "author": "sdong",
        "date": "2014-12-30T18:33:49-08:00",
        "message": "Fix CLANG build for db_bench\n\nSummary: CLANG was broken for a recent change in db_ench. Fix it.\n\nTest Plan: Build db_bench using CLANG.\n\nReviewers: rven, igor, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D30801",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e9ca3581579c03799856edad5b4413ad430f8263"
    },
    {
        "hash": "a801c1fb099167cf48a714483163061062e3dcb7",
        "author": "sdong",
        "date": "2014-12-24T09:00:23-08:00",
        "message": "db_bench --num_hot_column_families to be default off\n\nSummary: Having --num_hot_column_families default on fails some existing regression tests. By default turn it off\n\nTest Plan: Run db_bench to make sure it is default off.\n\nReviewers: yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D30705",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a801c1fb099167cf48a714483163061062e3dcb7"
    },
    {
        "hash": "2067058a608be3bb070523f598d124deb39b18aa",
        "author": "Manish Patil",
        "date": "2014-12-23T18:01:29-08:00",
        "message": "Dump routine to BlockBasedTableReader (valgrind)\n\nSummary: Fixed valgrind issue\n\nTest Plan: valgrind check done\n\nReviewers: rven, sdong\n\nReviewed By: sdong\n\nSubscribers: sdong, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D30699",
        "modified_files_count": 1,
        "modified_files": [
            "util/sst_dump_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2067058a608be3bb070523f598d124deb39b18aa"
    },
    {
        "hash": "ddc81440d5fb35a7ae1d0652bd81240cc0aff446",
        "author": "sdong",
        "date": "2014-12-23T16:52:05-08:00",
        "message": "db_bench to add an option as number of hot column families to add to\n\nSummary:\nAdd option --num_hot_column_families in db_bench. If it is set, write options will first write to that number of column families, and then move on to next set of hot column families. The working set of column families can be smaller than total number of CFs.\n\nIt is to test how RocksDB can handle cold column families\n\nTest Plan: Run db_bench with  --num_hot_column_families set and not set.\n\nReviewers: yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D30663",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ddc81440d5fb35a7ae1d0652bd81240cc0aff446"
    },
    {
        "hash": "a944afd3565e807eee455d6fb02acd822c63dca4",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-12-23T16:19:40-08:00",
        "message": "Fixed a compile error in db/db_impl.cc on ROCKSDB_LITE",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a944afd3565e807eee455d6fb02acd822c63dca4"
    },
    {
        "hash": "b623009619c2ab08e8a212c8a79a3bea4d82dbe9",
        "author": "Igor Canadi",
        "date": "2014-12-23T17:14:44+01:00",
        "message": "Fix compile of compact_file_example",
        "modified_files_count": 1,
        "modified_files": [
            "examples/compact_files_example.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b623009619c2ab08e8a212c8a79a3bea4d82dbe9"
    },
    {
        "hash": "ded26605f4ac3cd787cacd26c088f4f56e06d0ac",
        "author": "Igor Canadi",
        "date": "2014-12-23T15:26:45+01:00",
        "message": "Merge pull request #444 from adamretter/java-api-fix\n\nFix the Java API build on Mac OS X",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/slice.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ded26605f4ac3cd787cacd26c088f4f56e06d0ac"
    },
    {
        "hash": "98490bccf605478f98cb8101b6faf1f4d857b87f",
        "author": "Adam Retter",
        "date": "2014-12-23T14:22:56+00:00",
        "message": "Fix the build on Mac OS X",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/slice.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/98490bccf605478f98cb8101b6faf1f4d857b87f"
    },
    {
        "hash": "4d997297417bd584e150a6a07716f6d130d82d50",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-12-22T23:57:19-08:00",
        "message": "Merge pull request #443 from behanna/master\n\nFix the build with -DNDEBUG.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4d997297417bd584e150a6a07716f6d130d82d50"
    },
    {
        "hash": "d232cb156bf541db5105cc15319316e23bdef5d9",
        "author": "Chris BeHanna",
        "date": "2014-12-22T17:06:18-06:00",
        "message": "Fix the build with -DNDEBUG.\n\nDike out the body of VerifyCompactionResult.  With assert() compiled out, the\nloop index variable in the inner loop was unused, breaking the build when\n-Werror is enabled.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d232cb156bf541db5105cc15319316e23bdef5d9"
    },
    {
        "hash": "4fd26f287ca1b1453a5af9dc178cc7cba93594f6",
        "author": "Igor Canadi",
        "date": "2014-12-22T12:05:14+01:00",
        "message": "Only execute flush from compaction if max_background_flushes = 0\n\nSummary: As title. We shouldn't need to execute flush from compaction if there are dedicated threads doing flushes.\n\nTest Plan: make check\n\nReviewers: rven, yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D30579",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4fd26f287ca1b1453a5af9dc178cc7cba93594f6"
    },
    {
        "hash": "d8c4ce6b50720ee96085c73ba90c621557368579",
        "author": "Igor Canadi",
        "date": "2014-12-22T09:07:51+01:00",
        "message": "Merge pull request #442 from alabid/alabid/fix-example-typo\n\nfix really trivial typo in column families example",
        "modified_files_count": 1,
        "modified_files": [
            "examples/column_families_example.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d8c4ce6b50720ee96085c73ba90c621557368579"
    },
    {
        "hash": "949bd71fd0f1dac2cec92e21815b5163e897624e",
        "author": "alabid",
        "date": "2014-12-22T00:36:16-05:00",
        "message": "fix really trivial typo",
        "modified_files_count": 1,
        "modified_files": [
            "examples/column_families_example.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/949bd71fd0f1dac2cec92e21815b5163e897624e"
    },
    {
        "hash": "f8999fcf31be758d99fac3f64bc4ca0717b7f576",
        "author": "Igor Canadi",
        "date": "2014-12-21T00:23:28-08:00",
        "message": "Fix a SIGSEGV in BackgroundFlush\n\nSummary:\nThis one wasn't easy to find :)\n\nWhat happens is we go through all cfds on flush_queue_ and find no cfds to flush, *but* the cfd is set to the last CF we looped through and following code assumes we want it flushed.\n\nBTW @sdong do you think we should also make BackgroundFlush() only check a single cfd for flushing instead of doing this `while (!flush_queue_.empty())`?\n\nTest Plan: regression test no longer fails\n\nReviewers: sdong, rven, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: sdong, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D30591",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f8999fcf31be758d99fac3f64bc4ca0717b7f576"
    },
    {
        "hash": "1fed1282ad338fc92c9608b8bd6f97e969f64120",
        "author": "fyrz",
        "date": "2014-12-18T22:27:50+01:00",
        "message": "[RocksJava] Incorporated changes D30081",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/slice.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1fed1282ad338fc92c9608b8bd6f97e969f64120"
    },
    {
        "hash": "5fbba60b6af5054797cf88ca95e275b1ffea4637",
        "author": "fyrz",
        "date": "2014-12-18T22:15:00+01:00",
        "message": "[RocksJava] Incorporated changes D30081",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/slice.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5fbba60b6af5054797cf88ca95e275b1ffea4637"
    },
    {
        "hash": "b0230d7e094183330d7c551c211ccf11066122d3",
        "author": "fyrz",
        "date": "2014-12-18T22:05:07+01:00",
        "message": "[RocksJava] Incorporate additions for D30081",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/slice.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b0230d7e094183330d7c551c211ccf11066122d3"
    },
    {
        "hash": "28424d734bee62ff1999b17e6938c42abfd8bdc9",
        "author": "Haneef Mubarak",
        "date": "2014-12-18T06:48:46-08:00",
        "message": "style fixes in c example",
        "modified_files_count": 1,
        "modified_files": [
            "examples/simple_example.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/28424d734bee62ff1999b17e6938c42abfd8bdc9"
    },
    {
        "hash": "7198ed5a2ed6285123b374af78f36a440469eef6",
        "author": "Venkatesh Radhakrishnan",
        "date": "2014-12-17T16:25:09-08:00",
        "message": "Handle errors during pthread calls\n\nSummary: Release locks before calling exit.\n\nTest Plan: Force errors in debugger and verify correctness\n\nReviewers: igor, yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D30423",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7198ed5a2ed6285123b374af78f36a440469eef6"
    },
    {
        "hash": "91c58752fa4bc32cfd51189b3f35edde77816ff4",
        "author": "Haneef Mubarak",
        "date": "2014-12-17T02:06:36-08:00",
        "message": "error detection and memory leaks in c example",
        "modified_files_count": 1,
        "modified_files": [
            "examples/simple_example.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/91c58752fa4bc32cfd51189b3f35edde77816ff4"
    },
    {
        "hash": "25f70a5abbc2e3e38b8a67013f91c1ccea961aaa",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-12-16T17:10:23-08:00",
        "message": "Avoid unnecessary unlock and lock mutex when notifying events.\n\nSummary: Avoid unnecessary unlock and lock mutex when notifying events.\n\nTest Plan: ./listener_test\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: sdong, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D30267",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/25f70a5abbc2e3e38b8a67013f91c1ccea961aaa"
    },
    {
        "hash": "7ab1526c0e32f72ccfd74c0184a2f78ed36fb826",
        "author": "sdong",
        "date": "2014-12-12T12:44:00-08:00",
        "message": "Add an assert and avoid std::sort(autovector) to investigate an ASAN issue\n\nSummary:\nASAN build fails once for this error:\n\n14:04:52 ==== Test DBTest.CompactFilesOnLevelCompaction\n14:04:52 db_test: db/version_set.cc:1062: void rocksdb::VersionStorageInfo::AddFile(int, rocksdb::FileMetaData*): Assertion `level <= 0 || level_files->empty() || internal_comparator_->Compare( (*level_files)[level_files->size() - 1]->largest, f->smallest) < 0' failed.\n\nNot abling figure out reason. We use std:vector for sorting for save and add one more assert to help figure out whether it is the sorting's problem.\n\nTest Plan: make all check\n\nReviewers: yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D30117",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7ab1526c0e32f72ccfd74c0184a2f78ed36fb826"
    },
    {
        "hash": "74b3fb6d97c402f8a22685fe3df5a26eca140fa6",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-12-11T14:15:13-08:00",
        "message": "Fix Mac compile errors on util/cache_test.cc\n\nSummary:\nFix Mac compile errors on util/cache_test.cc\n\nTest Plan:\nmake dbg -j32\n./cache_test",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/74b3fb6d97c402f8a22685fe3df5a26eca140fa6"
    },
    {
        "hash": "0ab0242f373608c304aead5a291335a784ae0176",
        "author": "sdong",
        "date": "2014-12-10T18:53:30-08:00",
        "message": "VersionBuilder to use unordered set and map to store added and deleted files\n\nSummary: Set operations in VerisonBuilder is shown as a performance bottleneck of restarting DB when there are lots of files. Make both of added_files and deleted_files use unordered set or map. Only when adding the files, sort the added files.\n\nTest Plan: make all check\n\nReviewers: yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: hermanlee4, leveldb, dhruba, ljin\n\nDifferential Revision: https://reviews.facebook.net/D30051",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ab0242f373608c304aead5a291335a784ae0176"
    },
    {
        "hash": "cb82d7b081105dc4d6277ac93b67ce76a5287283",
        "author": "Igor Canadi",
        "date": "2014-12-09T10:22:07-08:00",
        "message": "Fix #434\n\nSummary: Why do we assert here? This doesn't seem like user friendly thing to do :)\n\nTest Plan: none\n\nReviewers: sdong, yhchiang, rven\n\nReviewed By: rven\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D30027",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cb82d7b081105dc4d6277ac93b67ce76a5287283"
    },
    {
        "hash": "635c61fd3b97c02bf0704cf35afc3a2ddb179041",
        "author": "Leonidas Galanis",
        "date": "2014-12-08T12:53:24-08:00",
        "message": "Fix problem with create_if_missing option when wal_dir is used\n\nSummary: When wal_dir is used, DestroyDB is not passed the wal_dir option and so we get a Corruption exception.\n\nTest Plan:\nVerified manually that the following command line works now:\n./db_bench --db=/mnt/db/rocksdb ... --disable_wal=0 --wal_dir=/data/users/rocksdb/WAL... --benchmarks=filluniquerandom --use_existing_db=0...\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D29859",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/635c61fd3b97c02bf0704cf35afc3a2ddb179041"
    },
    {
        "hash": "d84b2badebe7f1a5313d098f8f6acb02166aba06",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-12-05T13:30:57-08:00",
        "message": "Replace exception by abort() in dummy HdfsEnv implementation.\n\nSummary: Replace exception by abort() in dummy HdfsEnv implementation.\n\nTest Plan: make dbg -j32\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D29895",
        "modified_files_count": 1,
        "modified_files": [
            "hdfs/env_hdfs.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d84b2badebe7f1a5313d098f8f6acb02166aba06"
    },
    {
        "hash": "9260e1ad743900e269ab20f27fb0af500a79ac37",
        "author": "Igor Canadi",
        "date": "2014-12-05T11:05:24-08:00",
        "message": "Bump version to 3.9",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9260e1ad743900e269ab20f27fb0af500a79ac37"
    },
    {
        "hash": "8f4e1c1c9a9c7f433df9978fc73aeb8224a45263",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-12-04T13:56:14-08:00",
        "message": "Remove the compability check on log2 OS_ANDROID as it's already blocked by ROCKSDB_LITE\n\nSummary:\nRemove the compability check on log2 OS_ANDROID as it's already blocked by ROCKSDB_LITE\n\nTest Plan:\nmake OPT=\"-DROCKSDB_LITE -DOS_ANDROID\" shared_lib -j32\nmake shared_lib -j32",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8f4e1c1c9a9c7f433df9978fc73aeb8224a45263"
    },
    {
        "hash": "c4a7423c1dc0799256cbe84443689c4ad27b184b",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-12-04T13:35:31-08:00",
        "message": "Replace runtime_error exception by abort() in thread_local\n\nSummary: Replace runtime_error exception by abort() in thread_local\n\nTest Plan: make dbg -j32\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D29853",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c4a7423c1dc0799256cbe84443689c4ad27b184b"
    },
    {
        "hash": "a5d4fc0a25b58283bcca6cbac7c47bd2b357356d",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-12-04T11:59:29-08:00",
        "message": "Fix compile warning in db_stress\n\nSummary:\nFix compile warning in db_stress\n\nTest Plan:\nmake db_stress",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a5d4fc0a25b58283bcca6cbac7c47bd2b357356d"
    },
    {
        "hash": "1a8f4821a76df0cd7e10bc28f0e9233b79263a8f",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-12-04T11:41:56-08:00",
        "message": "Replace exception by assertion in autovector\n\nSummary: Replace exception by assertion in autovector\n\nTest Plan: autovector_test\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D29847",
        "modified_files_count": 1,
        "modified_files": [
            "util/autovector.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1a8f4821a76df0cd7e10bc28f0e9233b79263a8f"
    },
    {
        "hash": "97c19408825cac2de54f3681af44e8a3bff4739c",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-12-04T11:19:12-08:00",
        "message": "Fix compile warning in db_stress.cc on Mac\n\nSummary:\nFix the following compile warning in db_stress.cc on Mac\ntools/db_stress.cc:1688:52: error: format specifies type 'unsigned long' but the argument has type '::google::uint64' (aka 'unsigned long long') [-Werror,-Wformat]\n    fprintf(stdout, \"DB-write-buffer-size: %lu\\n\", FLAGS_db_write_buffer_size);\n                                           ~~~     ^~~~~~~~~~~~~~~~~~~~~~~~~~\n                                           %llu\n\nTest Plan:\nmake",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/97c19408825cac2de54f3681af44e8a3bff4739c"
    },
    {
        "hash": "5f719d72027a7e9a9bcd2ae4582fa611bd76cb20",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-12-04T11:11:11-08:00",
        "message": "Replace exception by setting valid_ = false in DBIter::MergeValuesNewToOld()\n\nSummary: Replace exception by setting valid_ = false in DBIter::MergeValuesNewToOld().\n\nTest Plan:\nNot sure if I am right at this, but it seems we currently don't have a good\nway to test that code path as it requires dynamically set merge_operator = nullptr\nat the time while Merge() is calling.\n\nReviewers: igor, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D29811",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5f719d72027a7e9a9bcd2ae4582fa611bd76cb20"
    },
    {
        "hash": "c0dee851c32f7afebb202856a8da36aeb87ee694",
        "author": "Mark Callaghan",
        "date": "2014-12-04T10:34:06-08:00",
        "message": "Improve formatting, add missing newlines\n\nSummary:\nImprove formatting\n\nTask ID: #\n\nBlame Rev:\n\nTest Plan:\nmake\n\nRevert Plan:\n\nDatabase Impact:\n\nMemcache Impact:\n\nOther Notes:\n\nEImportant:\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D29829",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c0dee851c32f7afebb202856a8da36aeb87ee694"
    },
    {
        "hash": "815f638cd0e7bd2eafda81a0fe2bc105df19a1ce",
        "author": "Igor Canadi",
        "date": "2014-12-03T19:06:57-08:00",
        "message": "Fix java build",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/815f638cd0e7bd2eafda81a0fe2bc105df19a1ce"
    },
    {
        "hash": "9c34d5e36152f067c1f4068e3f9fdd8405de636e",
        "author": "Haneef Mubarak",
        "date": "2014-11-27T13:53:04-08:00",
        "message": "fix type in C simple example",
        "modified_files_count": 1,
        "modified_files": [
            "examples/simple_example.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9c34d5e36152f067c1f4068e3f9fdd8405de636e"
    },
    {
        "hash": "0a9a7e753c499db59a62a3232ce2f275e2028339",
        "author": "Haneef Mubarak",
        "date": "2014-11-27T13:49:19-08:00",
        "message": "added C version of simple_example",
        "modified_files_count": 1,
        "modified_files": [
            "examples/simple_example.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0a9a7e753c499db59a62a3232ce2f275e2028339"
    },
    {
        "hash": "beb74c14ca55a9ffb339aa26b6a037bc34316ee9",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-26T09:42:13-08:00",
        "message": "Fix travis-build error\n\nSummary:\nFix travis-build error",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/beb74c14ca55a9ffb339aa26b6a037bc34316ee9"
    },
    {
        "hash": "26109d487a2e7b6ce20cb5510cc6364d8685f441",
        "author": "Matt Amos",
        "date": "2014-11-26T11:29:13+00:00",
        "message": "Store upper bound `Slice` with the same lifetime as the `ReadOptions` so that we can provide a pointer to it.",
        "modified_files_count": 1,
        "modified_files": [
            "db/c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/26109d487a2e7b6ce20cb5510cc6364d8685f441"
    },
    {
        "hash": "a97314219e3a3a11b1b9e30d05e3923b2bf519a6",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-25T23:39:52-08:00",
        "message": "Fix compile error in ROCKSDB_LITE",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a97314219e3a3a11b1b9e30d05e3923b2bf519a6"
    },
    {
        "hash": "9d5019327bfd10e10cc0d0d27119d5c82e0fa98c",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-25T23:28:36-08:00",
        "message": "Replace log2 by implementing Log2 in options_builder\n\nSummary:\nlog2 function is only used in options_builder, and this function\nis not available under certain platform such as android.\nThis patch implements Log2 by log(n) / log(2).\n\nTest Plan:\nmake",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9d5019327bfd10e10cc0d0d27119d5c82e0fa98c"
    },
    {
        "hash": "805bac6d25f548c8864f4e70f8136802c0c3da28",
        "author": "Matt Amos",
        "date": "2014-11-25T23:07:40+00:00",
        "message": "Add test for upper bounds on iterators using C interface.",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/805bac6d25f548c8864f4e70f8136802c0c3da28"
    },
    {
        "hash": "90ee85f8e11d52a04dedc663f20c8128ee0bde8d",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-24T18:28:06-08:00",
        "message": "Improve listener_test to avoid possible false alarm\n\nSummary:\nImprove listener_test to avoid possible false alarm\n\nTest Plan:\n./listener_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/listener_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/90ee85f8e11d52a04dedc663f20c8128ee0bde8d"
    },
    {
        "hash": "2946e37a087fd7d2834d65d585ae3579279472ff",
        "author": "Lei Jin",
        "date": "2014-11-24T15:18:09-08:00",
        "message": "remove unreliable test in db/cuckoo_table_db_test.cc\n\nSummary:\nThis compaction trigger does not seem to test any thing specific to\ncuckoo table. Remove it.\n\nTest Plan: make all check\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D29523",
        "modified_files_count": 1,
        "modified_files": [
            "db/cuckoo_table_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2946e37a087fd7d2834d65d585ae3579279472ff"
    },
    {
        "hash": "9c7ca65d21561a55110c8ce9cab9d376e130004b",
        "author": "Lei Jin",
        "date": "2014-11-24T15:03:08-08:00",
        "message": "free builders in VersionSet::DumpManifest\n\nSummary:\nReported by bootcamper\nThis causes ldb tool to fail the assertion in ~ColumnFamilyData()\n\nTest Plan:\n./ldb --db=/tmp/test_db1 --create_if_missing put a1 b1\n./ldb manifest_dump --path=/tmp/test_db1/MANIFEST-000001\n\nReviewers: sdong, yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D29517",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9c7ca65d21561a55110c8ce9cab9d376e130004b"
    },
    {
        "hash": "325722149925b8dfdfcdf96531b2ae114b736b32",
        "author": "Venkatesh Radhakrishnan",
        "date": "2014-11-24T10:20:50-08:00",
        "message": "Fixes valgrind error in GetSnapshotLink. Free checkpoint now.\n\nSummary: Free checkpoint after its directory is removed.\n\nTest Plan: Run valgrind with GetSnapshotLink.\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D29493",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/325722149925b8dfdfcdf96531b2ae114b736b32"
    },
    {
        "hash": "3a40c427b9dc84275c3ad7fff7e8f9f22b60ea6b",
        "author": "sdong",
        "date": "2014-11-21T11:30:22-08:00",
        "message": "Fix db_bench on CLANG mode\n\nSummary: \"build all\" breaks in Clang mode with db_bench. Fix it.\n\nTest Plan: USE_CLANG=1 make all\n\nReviewers: ljin, rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D29379",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3a40c427b9dc84275c3ad7fff7e8f9f22b60ea6b"
    },
    {
        "hash": "9222a2d02495fb3b9b2868b2e31938e990ab7999",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-21T11:00:42-08:00",
        "message": "Fixed iOS build caused by GetThreadList feature.\n\nSummary:\nFixed iOS build caused by GetThreadList feature.",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_status_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9222a2d02495fb3b9b2868b2e31938e990ab7999"
    },
    {
        "hash": "aa31fc506827b11b585d150b63b42f103a74f07a",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-21T10:22:05-08:00",
        "message": "Improve listener_test by ensuring flushes are completed before assert.\n\nSummary: Improve listener_test by ensuring flushes are completed before assert.\n\nTest Plan: listener_test\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D29319",
        "modified_files_count": 1,
        "modified_files": [
            "db/listener_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aa31fc506827b11b585d150b63b42f103a74f07a"
    },
    {
        "hash": "7ec71f101c30381af1d1dda6711e28debaa11809",
        "author": "Igor Canadi",
        "date": "2014-11-21T11:05:48-05:00",
        "message": "Provide default implementation of LinkFile, don't break the build\n\nSummary: By providing default implementation of LinkFile, we don't break other implementations of Env.\n\nTest Plan: none\n\nReviewers: rven, dhruba\n\nReviewed By: dhruba\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D29355",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7ec71f101c30381af1d1dda6711e28debaa11809"
    },
    {
        "hash": "d84069995c74a25f7e29b6d36de793ee603167eb",
        "author": "Igor Canadi",
        "date": "2014-11-21T09:42:45-05:00",
        "message": "Fix mac compile",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/utilities/leveldb_options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d84069995c74a25f7e29b6d36de793ee603167eb"
    },
    {
        "hash": "353307758b056dd328b3e5a9da9d9022d1794f9a",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-20T16:13:20-08:00",
        "message": "Add IOS_CROSS_COMPILE to macro guard for GetThreadList feature.",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/thread_status.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/353307758b056dd328b3e5a9da9d9022d1794f9a"
    },
    {
        "hash": "eecdebe65b1f2b37f2da92b7ef58e824481bb107",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-20T16:02:03-08:00",
        "message": "Fixed the destruction order of static variables in ThreadStatusImpl.",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_status_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eecdebe65b1f2b37f2da92b7ef58e824481bb107"
    },
    {
        "hash": "beabc6879c9a2b7153a4f21262e7d62160c8b23b",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-20T15:45:56-08:00",
        "message": "Fixed ~ThreadStatusImpl().",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_status_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/beabc6879c9a2b7153a4f21262e7d62160c8b23b"
    },
    {
        "hash": "3d78c7a8cfd2553a7f24133b185ccdc5cb5b99ad",
        "author": "fyrz",
        "date": "2014-11-20T22:51:31+01:00",
        "message": "[RocksJava] Lint adjustments",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/backupablejni.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3d78c7a8cfd2553a7f24133b185ccdc5cb5b99ad"
    },
    {
        "hash": "a564be715da5651ac442e7922a1d5fe3515fc054",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-20T11:47:18-08:00",
        "message": "Fix asan error in thread_status_impl.cc",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_status_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a564be715da5651ac442e7922a1d5fe3515fc054"
    },
    {
        "hash": "7165d18869c46ee4aa7d2f076d788cfbfea86fb4",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-20T11:00:21-08:00",
        "message": "Fix clang compile error",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_status_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7165d18869c46ee4aa7d2f076d788cfbfea86fb4"
    },
    {
        "hash": "be005e17bb39b2ddadf37cd72e61bf18772aa911",
        "author": "Lei Jin",
        "date": "2014-11-18T20:42:32-08:00",
        "message": "fix clang compilation\n\nSummary:\nas title",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/be005e17bb39b2ddadf37cd72e61bf18772aa911"
    },
    {
        "hash": "55a344872d9ad7cf3541bcbc06058ac87a003576",
        "author": "Igor Canadi",
        "date": "2014-11-18T17:35:34-08:00",
        "message": "Merge pull request #408 from fyrz/Missing-include\n\nMissing header in build on CentOS 6.5, GCC4.7",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_helper.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/55a344872d9ad7cf3541bcbc06058ac87a003576"
    },
    {
        "hash": "9e9a83baf77a204650091a0c80b5e33d3794035e",
        "author": "fyrz",
        "date": "2014-11-18T22:21:02+01:00",
        "message": "Missing header in build on CentOS\n\nWhile building RocksJava the build fails on\nCentOS because of the missing stdexcept header.",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_helper.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9e9a83baf77a204650091a0c80b5e33d3794035e"
    },
    {
        "hash": "98e59f9813f3cb6c6573c977d67eca77fd7708e2",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-16T21:52:23-08:00",
        "message": "Fixed a bug which could hide non-ok status in CompactionJob::Run()\n\nSummary: Fixed a bug which could hide non-ok status in CompactionJob::Run()\n\nTest Plan: make\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D28995",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/98e59f9813f3cb6c6573c977d67eca77fd7708e2"
    },
    {
        "hash": "0ce38fe983c5827b8424719c95f3d0aa8ef99fd4",
        "author": "Igor Canadi",
        "date": "2014-11-14T16:33:41-08:00",
        "message": "Fix signed/unsigned compile",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ce38fe983c5827b8424719c95f3d0aa8ef99fd4"
    },
    {
        "hash": "84af2ff8d3b90d820e75b7e91574fdd6b8092540",
        "author": "Igor Canadi",
        "date": "2014-11-14T16:20:24-08:00",
        "message": "Clean job context in DeleteFile",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/84af2ff8d3b90d820e75b7e91574fdd6b8092540"
    },
    {
        "hash": "26dc5da96c05c37156a02ae905f4887a10993be2",
        "author": "Igor Canadi",
        "date": "2014-11-14T13:42:13-08:00",
        "message": "Fix compaction_job_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/26dc5da96c05c37156a02ae905f4887a10993be2"
    },
    {
        "hash": "c9fd03ec51f16a108038e4fc78fafb74ed5b7702",
        "author": "Lukáš Lalinský",
        "date": "2014-11-14T11:34:32-08:00",
        "message": "Update docs for NewAdaptiveTableFactory",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/table.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c9fd03ec51f16a108038e4fc78fafb74ed5b7702"
    },
    {
        "hash": "e6c3cc65748d90208e66b06229e7bbdf2e5d6d03",
        "author": "Lukáš Lalinský",
        "date": "2014-11-14T11:31:52-08:00",
        "message": "Add very basic tests to make sure the C cuckoo table options compile and run",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e6c3cc65748d90208e66b06229e7bbdf2e5d6d03"
    },
    {
        "hash": "136b8583bf24f41a3cdcdf25bab8d535dc25ddec",
        "author": "Siying Dong",
        "date": "2014-11-14T10:56:41-08:00",
        "message": "Merge pull request #395 from lalinsky/fix-env-test\n\nRelax the block count check on deallocation in env_test",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/136b8583bf24f41a3cdcdf25bab8d535dc25ddec"
    },
    {
        "hash": "746cfaac5847a087b05446ca56a489e401553b97",
        "author": "Lukáš Lalinský",
        "date": "2014-11-13T16:58:05-08:00",
        "message": "Relax the block count check on deallocation in env_test\n\nIt seems that on some FS we get more blocks than we ask for. This is\nalready handled when checking the allocated number of blocks, but\nafter the file is closed it checks for an exact number of blocks,\nwhich fails on my machine.\n\nI changed the test to add one full page to the size, then calculate\nthe expected number of blocks and check if the actual number of blocks\nis less or equal to that.",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/746cfaac5847a087b05446ca56a489e401553b97"
    },
    {
        "hash": "f822129b32a7a990f218f3b0efecef55fd991024",
        "author": "sdong",
        "date": "2014-11-13T15:21:12-08:00",
        "message": "Add a unit test for behavior when merge operator and compaction filter co-exist.\n\nSummary: Add a unit test in db_test to verify the behavior when both of merge operator and compaction filter apply to a key when merging.\n\nTest Plan: Run the new test\n\nReviewers: ljin, yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D28455",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f822129b32a7a990f218f3b0efecef55fd991024"
    },
    {
        "hash": "373c665edf5dead0778c3ee5b2d304778183a317",
        "author": "Hasnain Lakhani",
        "date": "2014-11-13T14:46:30-08:00",
        "message": "Fix broken test in 31b02d.\n\nSummary:\nCorruptionTest for backupable_db_test did not call\nGarbageCollect() after deleting a corrupt backup,\nwhich sometimes lead to test failures as the newly created backup\nwould reuse the same backup ID and files and fail the consistency\ncheck.\n\nMoved around some of the test logic to ensure that GarbageCollect()\nis called at the right time.\n\nTest Plan:\nRun backupable_db_test eight times and make sure\nit passes repeatedly. Also run make check to make sure other\ntests don't fail.\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D28863",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/373c665edf5dead0778c3ee5b2d304778183a317"
    },
    {
        "hash": "3c92e52338abc024e073dbf209f53172ef38ec67",
        "author": "Igor Canadi",
        "date": "2014-11-13T14:47:54-05:00",
        "message": "Fix include",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3c92e52338abc024e073dbf209f53172ef38ec67"
    },
    {
        "hash": "9759495229aa6ffe300370c5b52790854d88fbad",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-11T15:22:06-08:00",
        "message": "Fixed clang compile error in version_builder_test\n\nSummary: Fixed clang compile error in version_builder_test\n\nTest Plan: ./version_builder_test\n\nReviewers: igor, sdong\n\nReviewed By: sdong\n\nSubscribers: sdong, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D28731",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9759495229aa6ffe300370c5b52790854d88fbad"
    },
    {
        "hash": "1f621e6abc982d2b316ee692b35ec4a1e192789c",
        "author": "Igor Canadi",
        "date": "2014-11-11T14:09:14-08:00",
        "message": "Fix additional -Wshorten-64-to-32 errros",
        "modified_files_count": 1,
        "modified_files": [
            "util/posix_logger.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1f621e6abc982d2b316ee692b35ec4a1e192789c"
    },
    {
        "hash": "746252197bff1e9db6a3779e88f04fc4bb787423",
        "author": "Igor Canadi",
        "date": "2014-11-10T16:12:15-05:00",
        "message": "Merge pull request #384 from msb-at-yahoo/compaction-filter-2-empty-changed-values\n\nCompactionFilterV2: eliminate an often unnecessary allocation.",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/746252197bff1e9db6a3779e88f04fc4bb787423"
    },
    {
        "hash": "dd726a59efc51b4bd4566fb6c578634a34306747",
        "author": "sdong",
        "date": "2014-11-10T12:10:56-08:00",
        "message": "Bump Version Number to 3.8\n\nSummary: As tittle.\n\nTest Plan: Not needed.\n\nReviewers: ljin, igor, yhchiang, rven, fpi\n\nReviewed By: fpi\n\nSubscribers: leveldb, fpi, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D28629",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dd726a59efc51b4bd4566fb6c578634a34306747"
    },
    {
        "hash": "bcdb9671c06e99f89319baa078a6163bd3969be2",
        "author": "Igor Canadi",
        "date": "2014-11-09T13:01:50-05:00",
        "message": "Fix build",
        "modified_files_count": 1,
        "modified_files": [
            "util/sst_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bcdb9671c06e99f89319baa078a6163bd3969be2"
    },
    {
        "hash": "00211f9c5b938cc0acf93062e15586a88004ee3c",
        "author": "Igor Canadi",
        "date": "2014-11-08T13:01:31-08:00",
        "message": "Fix SIGSEGV in db_stresS",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/00211f9c5b938cc0acf93062e15586a88004ee3c"
    },
    {
        "hash": "856059094e56f230d4f53089910e4c5c3cb866f2",
        "author": "Igor Canadi",
        "date": "2014-11-08T15:52:18-05:00",
        "message": "Merge pull request #389 from Liuchang0812/master\n\nfix \"make static_lib\" error",
        "modified_files_count": 1,
        "modified_files": [
            "util/sst_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/856059094e56f230d4f53089910e4c5c3cb866f2"
    },
    {
        "hash": "dc34104637bf8a72bf4542469f64f0f29a10b7f1",
        "author": "liuchang",
        "date": "2014-11-08T11:35:36-08:00",
        "message": "Merge branch 'fix-example'",
        "modified_files_count": 1,
        "modified_files": [
            "util/sst_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dc34104637bf8a72bf4542469f64f0f29a10b7f1"
    },
    {
        "hash": "e7620536cf67683a257efee6892e255a6f15fe80",
        "author": "liuchang",
        "date": "2014-11-08T11:35:10-08:00",
        "message": "fix make static_lib error",
        "modified_files_count": 1,
        "modified_files": [
            "util/sst_dump_tool.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e7620536cf67683a257efee6892e255a6f15fe80"
    },
    {
        "hash": "b8b39034292c3cec82d9af61982b4b12614b1758",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-07T15:13:01-08:00",
        "message": "Fixed compile error in db/db_impl.cc\n\nSummary:\nFixed compile error in db/db_impl.cc\n\nTest Plan:\nmake",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b8b39034292c3cec82d9af61982b4b12614b1758"
    },
    {
        "hash": "b622ba5d6b28c37118002bb82615ed5613c98063",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-07T15:11:36-08:00",
        "message": "Fixed compile error in db/flush_job.cc\n\nSummary:\nFixed compile error in db/flush_job.cc\n\nTest Plan:\nmake",
        "modified_files_count": 1,
        "modified_files": [
            "db/flush_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b622ba5d6b28c37118002bb82615ed5613c98063"
    },
    {
        "hash": "31342c400530698954b78348d573206b90924d67",
        "author": "Igor Canadi",
        "date": "2014-11-07T12:41:05-08:00",
        "message": "Fix implicit compare",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/slice.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/31342c400530698954b78348d573206b90924d67"
    },
    {
        "hash": "a0f887c9e463a1cd992403c421eeb9d9011ced83",
        "author": "Igor Canadi",
        "date": "2014-11-07T12:07:43-08:00",
        "message": "Fix compile",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a0f887c9e463a1cd992403c421eeb9d9011ced83"
    },
    {
        "hash": "ec101cd49a8ba328dc0ae8e28d9bf088019300b4",
        "author": "Jonah Cohen",
        "date": "2014-11-06T17:28:49-08:00",
        "message": "Correctly test both compaction styles in CompactionDeletionTriggerReopen\n\nSummary:\nCompactionDeletionTriggerReopen wasn't actually testing universal\ncompaction.\n\nTest Plan: db_test\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D28443",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ec101cd49a8ba328dc0ae8e28d9bf088019300b4"
    },
    {
        "hash": "8d87467bb0c76012f70daba69d69299ff574a827",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-06T17:07:52-08:00",
        "message": "Make PartialCompactionFailure Test more robust again.\n\nSummary:\nMake PartialCompactionFailure Test more robust again by\nblocking background compaction until we simulate the\nfile creation error.\n\nTest Plan:\nexport ROCKSDB_TESTS=PartialCompactionFailure\n./db_test\n\nReviewers: sdong, igor, ljin\n\nReviewed By: ljin\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D28431",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8d87467bb0c76012f70daba69d69299ff574a827"
    },
    {
        "hash": "64d302d304a87bd76e9bca4b1c08a368e58f0e26",
        "author": "Lei Jin",
        "date": "2014-11-06T16:07:07-08:00",
        "message": "make DropWritesFlush deterministic\n\nSummary:\nTEST_WaitForFlush should wait until it sees error when parameter is set\nto true so we don't need to loop and timeout\n\nTest Plan: ROCKSDB_TESTS=DropWritesFlush ./db_test\n\nReviewers: sdong, igor\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D28419",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/64d302d304a87bd76e9bca4b1c08a368e58f0e26"
    },
    {
        "hash": "e526b7140212da43d2b5c059cb73366d1f6f1232",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-06T13:53:02-08:00",
        "message": "Make PartialCompactionFailure Test more robust.\n\nSummary: Make PartialCompactionFailure Test more robust.\n\nTest Plan:\nexport ROCKSDB_TESTS=PartialCompactionFailure\n./db_test\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D28425",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e526b7140212da43d2b5c059cb73366d1f6f1232"
    },
    {
        "hash": "367a3f9cb4ff1b7d5c23f2fc4b37e8ef55b4971d",
        "author": "sdong",
        "date": "2014-11-06T10:48:06-08:00",
        "message": "Improve DBTest.GroupCommitTest: artificially slowdown log writing to trigger group commit\n\nSummary: In order to avoid random failure of DBTest.GroupCommitTest, artificially sleep 100 microseconds in each log writing.\n\nTest Plan: Run the test in a machine where valgrind version of the test always fails multiple times and see it always succeed.\n\nReviewers: igor, yhchiang, rven, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D28401",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/367a3f9cb4ff1b7d5c23f2fc4b37e8ef55b4971d"
    },
    {
        "hash": "ea18b944a7d9e94ec3151656e47efdd5ff170ac1",
        "author": "Shi Feng",
        "date": "2014-11-05T18:40:18-08:00",
        "message": "Add db_bench option --report_file_operations\n\nSummary: Add db_bench option --report_file_operations\n\nTest Plan:\n./db_bench --report_file_operations\nObserve outputs on # of file operations\n\nReviewers: ljin, MarkCallaghan, sdong\n\nReviewed By: sdong\n\nSubscribers: yhchiang, rven, igor, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D27945",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ea18b944a7d9e94ec3151656e47efdd5ff170ac1"
    },
    {
        "hash": "e4211d10c1699331b9ddae28ef6ec74633669558",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-05T00:12:20-08:00",
        "message": "Apply InfoLogLevel to the logs in util/env_hdfs.cc\n\nSummary: Apply InfoLogLevel to the logs in util/env_hdfs.cc\n\nTest Plan: make\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D28011",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_hdfs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e4211d10c1699331b9ddae28ef6ec74633669558"
    },
    {
        "hash": "76f6c7c7c402d0f9f814718ed3b516b12c74453f",
        "author": "maurice barnum",
        "date": "2014-11-05T05:31:11+00:00",
        "message": "CompactionFilterV2: eliminate an often unnecessary allocation.\n\nIf a compaction filter implementation is simply filtering values, then\nallocating the \"changed values\" bitmap is an extra memory allocation\nthat adds no value. Additionally, the compaction implementation has to\ndo marginally more work to calculate the offset into the bitmap\n(vector<bool> specialization) for each record the filter did not mark\nfor deletion.\n\nExplicitly handle the case where compact_->value_changed_buf_ is empty.",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/76f6c7c7c402d0f9f814718ed3b516b12c74453f"
    },
    {
        "hash": "b1267750fba1398bc09ba2d23d7814e8e422e5fc",
        "author": "Lei Jin",
        "date": "2014-11-04T15:58:14-08:00",
        "message": "fix the asan check\n\nSummary: as title\n\nTest Plan: ran it\n\nReviewers: yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D28311",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b1267750fba1398bc09ba2d23d7814e8e422e5fc"
    },
    {
        "hash": "83bf09144bc9c80915dd67ab17182d4f0804cc08",
        "author": "sdong",
        "date": "2014-11-04T14:52:02-08:00",
        "message": "Bump verison number to 3.7\n\nSummary: As tittle\n\nTest Plan: N/A\n\nReviewers: ljin, yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D28299",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/83bf09144bc9c80915dd67ab17182d4f0804cc08"
    },
    {
        "hash": "da5daa061cc3fd6aca15ce3b2350b1b55a4655a0",
        "author": "sdong",
        "date": "2014-11-04T11:45:03-08:00",
        "message": "Replace some ASSERT_TRUE() asserts in DBTest.DynamicMemtableOptions and DynamicCompactionOptions with more specific ones\n\nSummary: Replace some ASSERT_TRUE() to ASSERT_GT() and ASSERT_LT() so that in case the assert is triggered, the value is printed out.\n\nTest Plan: Run the two tests\n\nReviewers: ljin, rven, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D28293",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/da5daa061cc3fd6aca15ce3b2350b1b55a4655a0"
    },
    {
        "hash": "b0cda4a116a333a10dbf42518f66e6d66e202fc7",
        "author": "sdong",
        "date": "2014-11-04T11:14:12-08:00",
        "message": "DBTest.DynamicMemtableOptions to use single background compaction\n\nSummary:\nNow DBTest.DynamicMemtableOptions sets background compaction to be 4, without actually increasing thread pool size (even before the feature of automatic increasing it). To make sure the behavior stays the same after the automatic thread pool increasing, set it back to 1.\n\nHopefully it can fix the occasional failure of the test.\n\nTest Plan: Run the test\n\nReviewers: igor, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D28281",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b0cda4a116a333a10dbf42518f66e6d66e202fc7"
    },
    {
        "hash": "8810850dd40fedff9e975f6188f1c9b4fceae234",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-04T11:07:11-08:00",
        "message": "Apply InfoLogLevel to the logs in db/compaction_job.cc\n\nSummary: Apply InfoLogLevel to the logs in db/compaction_job.cc\n\nTest Plan: db_test\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, MarkCallaghan, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D28275",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8810850dd40fedff9e975f6188f1c9b4fceae234"
    },
    {
        "hash": "d8e119663539491b10f75e0f0c39abfc296e185e",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-04T10:34:33-08:00",
        "message": "Apply InfoLogLevel to the logs in db/version_set.cc\n\nSummary: Apply InfoLogLevel to the logs in db/version_set.cc\n\nTest Plan: make\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27879",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d8e119663539491b10f75e0f0c39abfc296e185e"
    },
    {
        "hash": "2a019f1d03ed5eaf1f90d21c560c1b7b3ed8b4b3",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-04T10:34:18-08:00",
        "message": "Apply InfoLogLevel to the logs in db/wal_manager.cc\n\nSummary: Apply InfoLogLevel to the logs in db/wal_manager.cc\n\nTest Plan: db_test\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D28239",
        "modified_files_count": 1,
        "modified_files": [
            "db/wal_manager.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2a019f1d03ed5eaf1f90d21c560c1b7b3ed8b4b3"
    },
    {
        "hash": "469d474ba0424d18da77135bdf60ee789193890c",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-11-04T10:28:08-08:00",
        "message": "Apply InfoLogLevel to the logs in db/db_impl.cc\n\nSummary: Apply InfoLogLevel to the logs in db/db_impl.cc\n\nTest Plan:\ndb_test\ndb_bench\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, MarkCallaghan, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D28233",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/469d474ba0424d18da77135bdf60ee789193890c"
    },
    {
        "hash": "45a612f990718634ae8f89500b53cb2c2c9ddc27",
        "author": "Igor Canadi",
        "date": "2014-10-31T19:22:42-07:00",
        "message": "Revert \"Fix incorrect fixing of lint errors in ldb_cmd.cc\"\n\nThis reverts commit 8ddddd62d0bf7ac74cf64a024452587a007b6096.",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/45a612f990718634ae8f89500b53cb2c2c9ddc27"
    },
    {
        "hash": "8ddddd62d0bf7ac74cf64a024452587a007b6096",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-31T16:15:15-07:00",
        "message": "Fix incorrect fixing of lint errors in ldb_cmd.cc\n\nSummary: Fix incorrect fixing of lint errors in ldb_cmd.cc\n\nTest Plan: reduce_levels_test\n\nReviewers: igor, sdong, ljin\n\nReviewed By: ljin\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D28137",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8ddddd62d0bf7ac74cf64a024452587a007b6096"
    },
    {
        "hash": "46c14c6661475d688a5857adf0c29534b0d8abce",
        "author": "Igor Canadi",
        "date": "2014-10-31T15:41:56-07:00",
        "message": "Fix #258. benchmarkharness -- make bm_min_usec uint",
        "modified_files_count": 1,
        "modified_files": [
            "util/benchharness.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/46c14c6661475d688a5857adf0c29534b0d8abce"
    },
    {
        "hash": "c645250ee09e44995557f9d9b50b7a9e4d0f73f6",
        "author": "sdong",
        "date": "2014-10-31T13:51:48-07:00",
        "message": "CompactionStats to support larger value of RecordIn and RecordDrop\n\nSummary: now we use %8d for RecordIn and %10d for RecordDrop, which is far too small for some use cases. Extend both of them to %12d.\n\nTest Plan: run one test in db_test and see the LOG file.\n\nReviewers: igor, MarkCallaghan, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D28041",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c645250ee09e44995557f9d9b50b7a9e4d0f73f6"
    },
    {
        "hash": "f7e6c856ab3fa3c37c5cd3f8ba2a7cf59f037385",
        "author": "sdong",
        "date": "2014-10-31T13:42:18-07:00",
        "message": "Fix BaseReferencedVersionBuilder's destructor order\n\nSummary: BaseReferencedVersionBuilder now unreference version before destructing VersionBuilder, which is wrong. Fix it.\n\nTest Plan:\nmake all check\nvalgrind test to tests that used to fail\n\nReviewers: igor, yhchiang, rven, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D28101",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f7e6c856ab3fa3c37c5cd3f8ba2a7cf59f037385"
    },
    {
        "hash": "c76dcb44d4cca2ad756214837af0b3016aa8d936",
        "author": "Lei Jin",
        "date": "2014-10-31T13:30:08-07:00",
        "message": "fix\n\nSummary:\n\nTest Plan:\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c76dcb44d4cca2ad756214837af0b3016aa8d936"
    },
    {
        "hash": "b452dede5cab2930a88a1633f80a023dc5362501",
        "author": "Lei Jin",
        "date": "2014-10-31T12:23:00-07:00",
        "message": "fix\n\nSummary:\n\nTest Plan:\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b452dede5cab2930a88a1633f80a023dc5362501"
    },
    {
        "hash": "7e01d120267da015fbed5073d9805be06cd74a51",
        "author": "Venkatesh Radhakrishnan",
        "date": "2014-10-31T12:02:14-07:00",
        "message": "Add support for in place update for db_stress\n\nSummary:\nAdded two flags which operate as follows:\nin_place_update: enable in_place_update for default column family\nset_in_place_one_in: toggles the value of the option inplace_update_support with a probability of 1/N\n\nTest Plan:\nRun db_stress with the two flags above set.\nSpecifically tried in_place_update set to true and set_in_place_one_in set to 10,000.\n\nReviewers: ljin, igor, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D28029",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7e01d120267da015fbed5073d9805be06cd74a51"
    },
    {
        "hash": "98849a35fa2701f44acef70e1a4cd6c508306591",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-31T11:41:15-07:00",
        "message": "Apply InfoLogLevel to the logs in table/block_based_table_reader.cc\n\nSummary:\nApply InfoLogLevel to the logs in table/block_based_table_reader.cc\n\nAlso, add missing checks for the returned status in BlockBasedTable::Open\n\nTest Plan: make\n\nReviewers: sdong, ljin, igor\n\nReviewed By: igor\n\nSubscribers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D28005",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/98849a35fa2701f44acef70e1a4cd6c508306591"
    },
    {
        "hash": "2b1f23dcae79216c1ff259afe176743ae25dce84",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-30T16:54:34-07:00",
        "message": "Apply InfoLogLevel to the logs in db/db_iter.cc\n\nSummary: Apply InfoLogLevel to the logs in db/db_iter.cc\n\nTest Plan: make\n\nReviewers: igor, ljin, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27861",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2b1f23dcae79216c1ff259afe176743ae25dce84"
    },
    {
        "hash": "df7abb4e8de0cac06107fbb5f9a909c0bbc9f08b",
        "author": "fyrz",
        "date": "2014-10-31T00:06:52+01:00",
        "message": "[RocksJava] Integrated code review comments\n\n- Added TODO comments for disabled methods",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/df7abb4e8de0cac06107fbb5f9a909c0bbc9f08b"
    },
    {
        "hash": "0f7f3b860574a14fd06a6803fd44c40f33ba77b2",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-30T13:36:18-07:00",
        "message": "Check InfoLogLevel earlier in Log functions.\n\nSummary: Check InfoLogLevel earlier in Log functions.\n\nTest Plan: auto_roll_logger_test\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27993",
        "modified_files_count": 1,
        "modified_files": [
            "util/env.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0f7f3b860574a14fd06a6803fd44c40f33ba77b2"
    },
    {
        "hash": "e770d61751a9d92b44d285815789dad6a4f70994",
        "author": "Igor Canadi",
        "date": "2014-10-30T11:01:41-07:00",
        "message": "Merge pull request #371 from dlezama/master\n\nFix build break because of unsigned/signed mismatch",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e770d61751a9d92b44d285815789dad6a4f70994"
    },
    {
        "hash": "41af0f56b039fbb068707e1731ee199a1e450fee",
        "author": "Damian Lezama",
        "date": "2014-10-30T10:36:13-07:00",
        "message": "Fix build break because of unsigned/signed mismatch",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/41af0f56b039fbb068707e1731ee199a1e450fee"
    },
    {
        "hash": "c5db7f26059e8429f77e4307b7d3540a6aa3e29e",
        "author": "sdong",
        "date": "2014-10-30T10:00:09-07:00",
        "message": "Fix CompactionPickerTest.Level1Trigger2\n\nSummary: CompactionPickerTest.Level1Trigger2 now depends on the STL implementation to be correct. Fix it.\n\nTest Plan: Run the test\n\nReviewers: ljin, yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D27963",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c5db7f26059e8429f77e4307b7d3540a6aa3e29e"
    },
    {
        "hash": "37e9b637018ee39739080c5123f073f85e98723d",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-29T17:57:00-07:00",
        "message": "Apply InfoLogLevel to the logs in utilities/ttl/db_ttl_impl.h\n\nSummary: Apply InfoLogLevel to the logs in utilities/ttl/db_ttl_impl.h\n\nTest Plan: make\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27885",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/ttl/db_ttl_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/37e9b637018ee39739080c5123f073f85e98723d"
    },
    {
        "hash": "217cc217d7235f8229a3942e5a879d5f8420cc5b",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-29T17:55:19-07:00",
        "message": "Apply InfoLogLevel to the logs in table/meta_blocks.cc\n\nSummary: Apply InfoLogLevel to the logs in table/meta_blocks.cc\n\nTest Plan: make\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27903",
        "modified_files_count": 1,
        "modified_files": [
            "table/meta_blocks.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/217cc217d7235f8229a3942e5a879d5f8420cc5b"
    },
    {
        "hash": "fd95745a59f5fc6e0e76b1395314097162486f7b",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-29T17:42:38-07:00",
        "message": "Fix compile error in table/plain_table_index.cc\n\nSummary:\nFix compile error in table/plain_table_index.cc\n\nTest Plan:\nmake",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_index.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fd95745a59f5fc6e0e76b1395314097162486f7b"
    },
    {
        "hash": "c3dd0f75da05b3dfdea7e7d9b6add457f5af0923",
        "author": "sdong",
        "date": "2014-10-29T17:34:24-07:00",
        "message": "comparator_db_test to cover more irregular comparators\n\nSummary:\ncomparator_db_test now adds verification for three more comparators:\n(1) one that store double as string\n(2) one that cast uint64 to string\n(3) one that concatenate two strings, prefixing their sizes.\n(4) one that order by hash of the string\n\nTest Plan:\nRun ./comparator_db_test\n\nReviewers: ljin, yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D27927",
        "modified_files_count": 1,
        "modified_files": [
            "db/comparator_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c3dd0f75da05b3dfdea7e7d9b6add457f5af0923"
    },
    {
        "hash": "6afafa36949e0ea72f1be1ed80f28507bcc05835",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-29T17:10:21-07:00",
        "message": "Apply InfoLogLevel to the logs in utilities/merge_operators/uint64add.cc\n\nSummary:\nApply InfoLogLevel to the logs and add missing copy-right information\nto  utilities/merge_operators/uint64add.cc.\n\nTest Plan: make\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27897",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/merge_operators/uint64add.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6afafa36949e0ea72f1be1ed80f28507bcc05835"
    },
    {
        "hash": "e7ad69b9fe4ac6ca2b24a4cb5237d2e7832a4a7f",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-29T17:08:40-07:00",
        "message": "Apply InfoLogLevel to the logs in table/plain_table_index.cc\n\nSummary: Apply InfoLogLevel to the logs in table/plain_table_index.cc\n\nTest Plan: make\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27909",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_index.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e7ad69b9fe4ac6ca2b24a4cb5237d2e7832a4a7f"
    },
    {
        "hash": "bbd9c53457141e96db841af3cf284595f66346de",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-29T17:08:20-07:00",
        "message": "Apply InfoLogLevel to the logs in table/block_based_table_builder.cc\n\nSummary: Apply InfoLogLevel to the logs in table/block_based_table_builder.cc\n\nTest Plan: make\n\nReviewers: igor, ljin, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27921",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bbd9c53457141e96db841af3cf284595f66346de"
    },
    {
        "hash": "065766b8d21ffee012cf7dd2c25404057449a54e",
        "author": "Lei Jin",
        "date": "2014-10-29T17:02:21-07:00",
        "message": "DynamicCompactionOptions: relax the check bound a little\n\nSummary:\nIncrease the level size so that impact of a single file is smaller.\nAlso relax the bound\n\nTest Plan: ran locally\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27939",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/065766b8d21ffee012cf7dd2c25404057449a54e"
    },
    {
        "hash": "5c82a8837e226e6f6fe40405908c3a0a424930b4",
        "author": "sdong",
        "date": "2014-10-29T16:58:18-07:00",
        "message": "Add a test in compaction_picker_test to test the max score\n\nSummary: Add a new unit test in compaction_picker_test to make sure level-based compaction to pick up the level with the largest score.\n\nTest Plan: Run the new test\n\nReviewers: ljin, yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D27933",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5c82a8837e226e6f6fe40405908c3a0a424930b4"
    },
    {
        "hash": "17be187ff9f57dede2ee152f07a17a1d100fd4cb",
        "author": "Lei Jin",
        "date": "2014-10-29T15:38:34-07:00",
        "message": "dummy var to suppress compiler warning/error\n\nSummary: Revmoed this in D25641, causing compiler complain. put it back\n\nTest Plan: make release\n\nReviewers: igor, yhchiang, rven, sdong\n\nReviewed By: sdong\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27891",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/17be187ff9f57dede2ee152f07a17a1d100fd4cb"
    },
    {
        "hash": "01e6f850986f5d4a88586a84f761d8af36ecea62",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-29T15:13:31-07:00",
        "message": "Apply InfoLogLevel to the logs in db/transaction_log_impl.h\n\nSummary: Apply InfoLogLevel to the logs in db/transaction_log_impl.h\n\nTest Plan: make\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27867",
        "modified_files_count": 1,
        "modified_files": [
            "db/transaction_log_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/01e6f850986f5d4a88586a84f761d8af36ecea62"
    },
    {
        "hash": "082e49ba82e5c84775a508225bf6f0a46a187f81",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-29T15:12:50-07:00",
        "message": "Apply InfoLogLevel to the logs in db/repair.cc\n\nSummary: Apply InfoLogLevel to the logs in db/repair.cc\n\nTest Plan: make\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27855",
        "modified_files_count": 1,
        "modified_files": [
            "db/repair.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/082e49ba82e5c84775a508225bf6f0a46a187f81"
    },
    {
        "hash": "c4b468000b14fc0285f778408c92395aa883be4b",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-29T15:12:10-07:00",
        "message": "Apply InfoLogLevel to the logs in db/flush_job.cc\n\nSummary: Apply InfoLogLevel to the logs in db/flush_job.cc\n\nTest Plan: make\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27849",
        "modified_files_count": 1,
        "modified_files": [
            "db/flush_job.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c4b468000b14fc0285f778408c92395aa883be4b"
    },
    {
        "hash": "34d436b7dbac714c69a2ff2b9b3884544ebd6977",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-29T15:11:32-07:00",
        "message": "Apply InfoLogLevel to the logs in db/column_family.cc\n\nSummary: Apply InfoLogLevel to the logs in db/column_family.cc\n\nTest Plan: make\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27843",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/34d436b7dbac714c69a2ff2b9b3884544ebd6977"
    },
    {
        "hash": "cda9943f9ff5e3d07c28cbc2576fffcc68078d03",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-29T15:11:12-07:00",
        "message": "Apply InfoLogLevel to the logs in db/compaction_picker.cc\n\nSummary: Apply InfoLogLevel to the logs in db/compaction_picker.cc\n\nTest Plan: make\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27837",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cda9943f9ff5e3d07c28cbc2576fffcc68078d03"
    },
    {
        "hash": "7b3a618f94b55c6ddf03c7d21a888fb1743f6b39",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-29T14:06:14-07:00",
        "message": "Apply InfoLogLevel to the logs in db/db_filesnapshot.cc\n\nSummary: Apply InfoLogLevel to the logs in db/db_filesnapshot.cc\n\nTest Plan: make\n\nReviewers: ljin, sdong, rven, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27813",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_filesnapshot.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7b3a618f94b55c6ddf03c7d21a888fb1743f6b39"
    },
    {
        "hash": "2d4fe048f4b917ed47410698272ff51e6ff7f5f6",
        "author": "Lei Jin",
        "date": "2014-10-29T13:38:06-07:00",
        "message": "remove dead code\n\nSummary:\nas title\n\nTest Plan:\nmake db_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2d4fe048f4b917ed47410698272ff51e6ff7f5f6"
    },
    {
        "hash": "76d54530d3d2ab1764ea725358d1d50fb90021da",
        "author": "Lei Jin",
        "date": "2014-10-29T13:36:18-07:00",
        "message": "minor - remove default value for ChangeFilterOptions() and ChangeCompactionOptions()\n\nSummary:\nSo now all open() in db_test should get options from callsite. And\ndestroy() always uses the last used options saved on open()\nI will start to integrate env_mem in the next diff\n\nTest Plan: make all check -j32\n\nReviewers: sdong, yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27819",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/76d54530d3d2ab1764ea725358d1d50fb90021da"
    },
    {
        "hash": "e130e88bc63bcf9aa90257d0945ab7ba65b606c3",
        "author": "Lei Jin",
        "date": "2014-10-29T12:00:42-07:00",
        "message": "DBTest: options clean up - part 4\n\nSummary: as title\n\nTest Plan: as part 1\n\nReviewers: sdong, yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27789",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e130e88bc63bcf9aa90257d0945ab7ba65b606c3"
    },
    {
        "hash": "34f3c5a20f5a0f325b91dbb515eddea02725fcc4",
        "author": "Lei Jin",
        "date": "2014-10-29T12:00:01-07:00",
        "message": "DBTest: options clean up - part 3\n\nSummary: as title\n\nTest Plan: same as part 1\n\nReviewers: sdong, yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27705",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/34f3c5a20f5a0f325b91dbb515eddea02725fcc4"
    },
    {
        "hash": "cdc7230e4ccf2d820e3bf0304c31402591d247d1",
        "author": "Lei Jin",
        "date": "2014-10-29T11:59:18-07:00",
        "message": "DBTest: options clean up - part 2\n\nSummary: as title\n\nTest Plan: same as part 1\n\nReviewers: sdong, yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27693",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cdc7230e4ccf2d820e3bf0304c31402591d247d1"
    },
    {
        "hash": "5a921b895054529670ff5aa874548c6e7b9c4b71",
        "author": "Lei Jin",
        "date": "2014-10-29T11:58:09-07:00",
        "message": "DBTest: options clean up - part 1\n\nSummary:\nDBTest has several functions (Reopen(), TryReopen(), ChangeOptins(), etc\nthat takes a pointer to options), depending on if it is nullptr, it uses\ndifferent options underneath. This makes it really hard to track what\noptions is used in different test case. We should just kill the default\nvalue and make it being passed into explicitly. It is going to be very\nhairy. I will start with simple ones.\n\nTest Plan:\nmake db_test\nstacked diffs, will run test with full stack\n\nReviewers: sdong, yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D27687",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5a921b895054529670ff5aa874548c6e7b9c4b71"
    },
    {
        "hash": "c9c935923e7de16ac3c7341d385c743083ee4001",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-29T11:21:51-07:00",
        "message": "Move the check to the beginning of the loop in VersionEdit::EncodeTo()",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_edit.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c9c935923e7de16ac3c7341d385c743083ee4001"
    },
    {
        "hash": "2110e43a5ab0f7ea440570bb6bb8f43bbe04e15c",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-29T11:19:44-07:00",
        "message": "Remove an unnecessary include file in version_edit.cc\n\nSummary:\nRemove an unnecessary include file in version_edit.cc",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_edit.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2110e43a5ab0f7ea440570bb6bb8f43bbe04e15c"
    },
    {
        "hash": "412b7f85bbbfd19ac55f09963fd47a3421dd0b7f",
        "author": "Igor Canadi",
        "date": "2014-10-28T18:10:55-07:00",
        "message": "Include atomic in mock_table.h",
        "modified_files_count": 1,
        "modified_files": [
            "table/mock_table.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/412b7f85bbbfd19ac55f09963fd47a3421dd0b7f"
    },
    {
        "hash": "fb3f8ffe5e7c0bdecc40f89cf95cb1b86746b729",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-28T15:35:10-07:00",
        "message": "Improve the robustness of PartialCompactionFailure test again.\n\nSummary:\nImprove the robustness of PartialCompactionFailure test again.\n\nTest Plan:\n./db_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fb3f8ffe5e7c0bdecc40f89cf95cb1b86746b729"
    },
    {
        "hash": "60fa7d1365323f32b29b3441b3678dd3c319dafc",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-28T15:17:50-07:00",
        "message": "Improve the robustnesss of PartialCompactionFailure test.\n\nSummary:\nImprove the robustness of PartialCompactionFailure test.\n\nTest Plan:\n./db_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/60fa7d1365323f32b29b3441b3678dd3c319dafc"
    },
    {
        "hash": "7c303f0e78ab11dd40ae9a016d774a779851ecff",
        "author": "Igor Canadi",
        "date": "2014-10-27T15:03:45-07:00",
        "message": "Include atomic",
        "modified_files_count": 1,
        "modified_files": [
            "db/skiplist.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7c303f0e78ab11dd40ae9a016d774a779851ecff"
    },
    {
        "hash": "f37048ad1d7626ec53612f5051d50e919556c5e2",
        "author": "Igor Canadi",
        "date": "2014-10-27T14:08:02-07:00",
        "message": "Merge pull request #367 from fyrz/FixBrokenJavaBuild\n\nRocksJava Fix after MutableCFOptions change. (relates to f184198)",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f37048ad1d7626ec53612f5051d50e919556c5e2"
    },
    {
        "hash": "679a9671febc301e953627744177c0df4a851104",
        "author": "fyrz",
        "date": "2014-10-27T21:56:25+01:00",
        "message": "RocksJava Fix after MutableCFOptions change.",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/679a9671febc301e953627744177c0df4a851104"
    },
    {
        "hash": "965d9d50b8cbb413de5e834b5b83ddbb682d0f1d",
        "author": "Igor Canadi",
        "date": "2014-10-24T11:58:15-07:00",
        "message": "Fix timing",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/965d9d50b8cbb413de5e834b5b83ddbb682d0f1d"
    },
    {
        "hash": "001ce64dc7659c65569ffb1c440e26cd23db3c94",
        "author": "Igor Canadi",
        "date": "2014-10-24T10:11:57-07:00",
        "message": "Use chrono for timing\n\nSummary: Since we depend on C++11, we might as well use it for timing, instead of this platform-depended code.\n\nTest Plan: Ran autovector_test, which reports time and confirmed that output is similar to master\n\nReviewers: ljin, sdong, yhchiang, rven, dhruba\n\nReviewed By: dhruba\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D25587",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/001ce64dc7659c65569ffb1c440e26cd23db3c94"
    },
    {
        "hash": "240ed0cd7b68f3dbaf48fb07e9e861b9fd653fe2",
        "author": "sdong",
        "date": "2014-10-23T15:57:36-07:00",
        "message": "Fix uninitialized parameter caused by D24513\n\nSummary: D24513 introduced a bug that a variable is not initialized. It also causes valgrind issue.\n\nTest Plan: Run tests used to fail valgrind and make sure it passes\n\nReviewers: yhchiang, ljin, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D25569",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/240ed0cd7b68f3dbaf48fb07e9e861b9fd653fe2"
    },
    {
        "hash": "724fba2b397396978bbe9533c5be81564ffe090e",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-23T15:43:51-07:00",
        "message": "Improve the log in Universal Compaction to include more debug information.\n\nSummary:\nPreviously, the log for Universal Compaction does not include the current\nnumber of files in case the compaction is triggered by the number of files.\nThis diff includes the number of files in the log.\n\nTest Plan:\nmake",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/724fba2b397396978bbe9533c5be81564ffe090e"
    },
    {
        "hash": "720c1c056d0b1afde0bb22347fe7965627b3eb11",
        "author": "Lei Jin",
        "date": "2014-10-23T15:41:37-07:00",
        "message": "fix erro during merge\n\nSummary:\nas title\n\nTest Plan:\nmake release",
        "modified_files_count": 1,
        "modified_files": [
            "util/mutable_cf_options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/720c1c056d0b1afde0bb22347fe7965627b3eb11"
    },
    {
        "hash": "1fee591e74222784e6cb91783ab0d69f2804d413",
        "author": "Lei Jin",
        "date": "2014-10-23T15:35:10-07:00",
        "message": "comments for DynamicCompactionOptions test\n\nSummary: as title\n\nTest Plan: n/a\n\nReviewers: yhchiang, sdong, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D24963",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1fee591e74222784e6cb91783ab0d69f2804d413"
    },
    {
        "hash": "4b1786e9599c5770376e8809bfbce7d74426640e",
        "author": "Igor Canadi",
        "date": "2014-10-23T12:03:19-07:00",
        "message": "Fix SIGSEGV when declaring Arena after ScopedArenaIterator",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4b1786e9599c5770376e8809bfbce7d74426640e"
    },
    {
        "hash": "90f156402c4b74f05fb86834401ab96cc018cf03",
        "author": "Igor Canadi",
        "date": "2014-10-23T11:18:33-07:00",
        "message": "Fix CompactBetweenSnapshots",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/90f156402c4b74f05fb86834401ab96cc018cf03"
    },
    {
        "hash": "3b5fe3a1f36cdd438a2e818e94a4174951c68ba1",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-23T10:44:53-07:00",
        "message": "Correct the log message in VersionEdit\n\nSummary:\nWhen VersionEdit fails in kNewFile3, previously it logs \"new-file2 entry\".\nHowever, it should be \"new-file3 entry.\"\n\nTest Plan:\nmake",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_edit.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3b5fe3a1f36cdd438a2e818e94a4174951c68ba1"
    },
    {
        "hash": "2a8e5203d8f955e94b074f52a50410dbdbee0a0d",
        "author": "sdong",
        "date": "2014-10-22T18:54:12-07:00",
        "message": "db_bench: --batch_size used for write benchmarks too\n\nSummary: Now --bench_size is only used in multireadrandom tests, although the codes allow it to run in all write tests. I don't see a reason why we can't enable it.\n\nTest Plan:\nRun\n   ./db_bench -benchmarks multirandomwrite --threads=5 -batch_size=16\nand see the stats printed out in LOG to make sure batching really happened.\n\nReviewers: ljin, yhchiang, rven, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D25509",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2a8e5203d8f955e94b074f52a50410dbdbee0a0d"
    },
    {
        "hash": "839c376bd1ab866957081d9a6aa9edf9fa1cdb78",
        "author": "Lei Jin",
        "date": "2014-10-22T13:53:35-07:00",
        "message": "fix table_test\n\nSummary:\nSaveValue expects an internal key but I previously added to table a\nuser key\n\nTest Plan:\nran the test",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/839c376bd1ab866957081d9a6aa9edf9fa1cdb78"
    },
    {
        "hash": "e11a5e776fa44611f34ca8676480fd6a9c21f4be",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-21T17:28:31-07:00",
        "message": "Improve the comment of util/thread_local.h\n\nSummary: Improve the comment of util/thread_local.h\n\nTest Plan: n/a\n\nReviewers: ljin\n\nReviewed By: ljin\n\nDifferential Revision: https://reviews.facebook.net/D25449",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e11a5e776fa44611f34ca8676480fd6a9c21f4be"
    },
    {
        "hash": "5bfb7f5d0b2a09ccc3b6c8eb94fbf7cf1672a83a",
        "author": "sdong",
        "date": "2014-10-20T11:55:33-07:00",
        "message": "db_bench: seekrandom can specify --seek_nexts to read specific keys after seek.\n\nSummary:\nAdd a function as tittle.\nAlso use the same parameter to fillseekseq too.\n\nTest Plan: Run seekrandom using the new parameter\n\nReviewers: ljin, MarkCallaghan\n\nReviewed By: MarkCallaghan\n\nSubscribers: rven, igor, yhchiang, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D25035",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5bfb7f5d0b2a09ccc3b6c8eb94fbf7cf1672a83a"
    },
    {
        "hash": "ff8f74c204eba8cafc2779eac55475beff559941",
        "author": "Lei Jin",
        "date": "2014-10-17T21:18:51-07:00",
        "message": "remove checking lower bound of level size\n\nSummary:\nas title\n\nTest Plan:\nmake db_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ff8f74c204eba8cafc2779eac55475beff559941"
    },
    {
        "hash": "5db9e76644eed9b7c9b25be398cefb1248f7cc3a",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-17T14:47:26-07:00",
        "message": "Fix Mac compile error: C++11 forbids default arguments for lambda expressions\n\nSummary:\nFix the following Mac compile error.\ndb/db_test.cc:8686:52: error: C++11 forbids default arguments for lambda expressions [-Werror,-Wlambda-extensions]\n  auto gen_l0_kb = [this](int start, int size, int stride = 1) {\n                                                   ^        ~\nTest Plan:\ndb_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5db9e76644eed9b7c9b25be398cefb1248f7cc3a"
    },
    {
        "hash": "f4363fb81cae9c5d2b694a0d095a0fbaf8f52511",
        "author": "Lei Jin",
        "date": "2014-10-17T10:09:45-07:00",
        "message": "Fix DynamicMemtableOptions test\n\nSummary: as title\n\nTest Plan: make release\n\nReviewers: igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D25029",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f4363fb81cae9c5d2b694a0d095a0fbaf8f52511"
    },
    {
        "hash": "c12f571d31e8f721983a8fd95978b385a6be5e51",
        "author": "Igor Canadi",
        "date": "2014-10-17T12:09:45-04:00",
        "message": "Fix mac compile, second try",
        "modified_files_count": 1,
        "modified_files": [
            "util/mutable_cf_options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c12f571d31e8f721983a8fd95978b385a6be5e51"
    },
    {
        "hash": "d2e60f5ceeb2ddb33d9c3e63bd5dd030d9c025e6",
        "author": "Igor Canadi",
        "date": "2014-10-17T12:05:32-04:00",
        "message": "Fix mac compile",
        "modified_files_count": 1,
        "modified_files": [
            "util/mutable_cf_options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d2e60f5ceeb2ddb33d9c3e63bd5dd030d9c025e6"
    },
    {
        "hash": "274dc81c928e151ae1fa4c5c80c9ebf4e7401197",
        "author": "Lei Jin",
        "date": "2014-10-16T17:33:09-07:00",
        "message": "fix build failure\n\nSummary: missed default value during merge\n\nTest Plan: ./db_test\n\nReviewers: igor, sdong, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D24975",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/274dc81c928e151ae1fa4c5c80c9ebf4e7401197"
    },
    {
        "hash": "ca250d71a1bffd5efdd21601e20fceea2aaaccff",
        "author": "Igor Canadi",
        "date": "2014-10-15T10:56:50-07:00",
        "message": "Move logging out of mutex\n\nSummary: As title\n\nTest Plan: compiles\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D24897",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ca250d71a1bffd5efdd21601e20fceea2aaaccff"
    },
    {
        "hash": "3ead857a0d54ef4674eb7a19fd85fe18300b4ce3",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-10T14:20:59-07:00",
        "message": "Fixed Mac compile error in util/options_test.cc\n\nSummary:\nFixed the following error in Mac:\n\n./util/testharness.h:93:19: error: comparison of integers of different signs: 'const unsigned long' and 'const int' [-Werror,-Wsign-compare]\n  BINARY_OP(IsEq, ==)\n  ~~~~~~~~~~~~~~~~^~~\n./util/testharness.h:86:14: note: expanded from macro 'BINARY_OP'\n    if (! (x op y)) {                                   \\\n             ^\nutil/options_test.cc:269:3: note: in instantiation of function template specialization 'rocksdb::test::Tester::IsEq<unsigned long, int>' requested here\n  ASSERT_EQ(new_cf_opt.write_buffer_size, 5);\n  ^\n\nTest Plan:\noptions_test",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3ead857a0d54ef4674eb7a19fd85fe18300b4ce3"
    },
    {
        "hash": "5a7618634042d9766e75d030986ab2f5584b44b9",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-10T14:10:16-07:00",
        "message": "Fixed compile error on Mac: default arguments for lambda expressions\n\nSummary:\nFixed the following compile error on Mac.\n\ndb/db_test.cc:8618:52: error: C++11 forbids default arguments for lambda expressions [-Werror,-Wlambda-extensions]\n  auto gen_l0_kb = [this](int start, int size, int stride = 1) {\n                                                   ^        ~\n1 error generated.\n\nTest Plan:\ndb_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5a7618634042d9766e75d030986ab2f5584b44b9"
    },
    {
        "hash": "b7d3d6ebc58d3fd2576e09c47b72d8d1ca763bb0",
        "author": "sdong",
        "date": "2014-10-09T20:38:15-07:00",
        "message": "db_bench: set thread pool size according to max_background_flushes\n\nSummary: option max_background_flushes doesn't make sense if thread pool size is not set accordingly. Set the thread pool size as what we do for max_background_compactions.\n\nTest Plan: Run db_bench with max_background_flushes > 1\n\nReviewers: yhchiang, igor, rven, ljin\n\nReviewed By: ljin\n\nSubscribers: MarkCallaghan, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D24717",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b7d3d6ebc58d3fd2576e09c47b72d8d1ca763bb0"
    },
    {
        "hash": "f78b832e5d9df08a9809983dee5942d1a5f8ad0d",
        "author": "Igor Canadi",
        "date": "2014-10-07T10:40:57-07:00",
        "message": "Log RocksDB version\n\nSummary: This will be much easier than reviewing git sha's we currently have in our LOGs\n\nTest Plan: none\n\nReviewers: sdong, yhchiang, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D24591",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f78b832e5d9df08a9809983dee5942d1a5f8ad0d"
    },
    {
        "hash": "25f6a852e41a6dfa80b37b738bbb029a69b77c76",
        "author": "Lei Jin",
        "date": "2014-10-07T10:40:45-07:00",
        "message": "add db_test for changing memtable size\n\nSummary:\nThe test only covers changing write_buffer_size. Other changable\nparameters such bloom bits/probes are not obvious how to test.\nSuggestions are welcome\n\nTest Plan: db_test\n\nReviewers: sdong, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D24429",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/25f6a852e41a6dfa80b37b738bbb029a69b77c76"
    },
    {
        "hash": "63eade401a880e531d86f325c9553cdecd01853c",
        "author": "Igor Canadi",
        "date": "2014-10-07T09:50:29-07:00",
        "message": "Fix error introduced by merge",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/write_batch_with_index/write_batch_with_index.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/63eade401a880e531d86f325c9553cdecd01853c"
    },
    {
        "hash": "ba882972fd3a8ad67a19887191d3708ed0b0740d",
        "author": "Igor Canadi",
        "date": "2014-10-07T09:48:21-07:00",
        "message": "Merge pull request #340 from nbougalis/nullderef\n\nAvoid dereferencing a null field",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/document/document_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ba882972fd3a8ad67a19887191d3708ed0b0740d"
    },
    {
        "hash": "b87db071523a20af9ccee157ebe520e76089e24f",
        "author": "Nik Bougalis",
        "date": "2014-10-07T01:40:29-07:00",
        "message": "Avoid dereferencing a null field",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/document/document_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b87db071523a20af9ccee157ebe520e76089e24f"
    },
    {
        "hash": "70e401a2ea10d24a419da9bae33d6e03c7b3d8af",
        "author": "Igor Canadi",
        "date": "2014-10-06T09:09:37-07:00",
        "message": "Merge pull request #338 from fyrz/rm_obs_code_write_batch_with_index_test\n\nReplaced obsolete comparator with builtin variant.",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/write_batch_with_index/write_batch_with_index_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/70e401a2ea10d24a419da9bae33d6e03c7b3d8af"
    },
    {
        "hash": "1c7c764761899845d8755e8a8ba88aefcef4c3a9",
        "author": "fyrz",
        "date": "2014-10-05T21:51:09+02:00",
        "message": "Replaced obsolete comparator with builtin variant.",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/write_batch_with_index/write_batch_with_index_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1c7c764761899845d8755e8a8ba88aefcef4c3a9"
    },
    {
        "hash": "56dfd363fd51aa10c7f1d9d965c8bbbefffa6c30",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-03T00:25:27-07:00",
        "message": "Fix a check in database shutdown or Column family drop during flush.\n\nSummary:\nFix a check in database shutdown or Column family drop during flush.\n\nSpecial thanks to Maurice Barnum who spots the problem :)\n\nTest Plan: db_test\n\nReviewers: ljin, igor, sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D24273",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/56dfd363fd51aa10c7f1d9d965c8bbbefffa6c30"
    },
    {
        "hash": "0e516a75da6b59e1c5894955478d44089785328e",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-03T00:10:58-07:00",
        "message": "Fix lint errors in java/rocksjni/options.cc\n\nSummary:\nFix lint errors in java/rocksjni/options.cc\n\nTest Plan:\nmake rocksdbjava",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0e516a75da6b59e1c5894955478d44089785328e"
    },
    {
        "hash": "c1273533bd95c08caf64507c1c113b1718e73e34",
        "author": "Igor Canadi",
        "date": "2014-10-02T15:14:40-07:00",
        "message": "Merge pull request #333 from nbougalis/cleanups\n\nDon't return (or dereference) dangling pointer",
        "modified_files_count": 1,
        "modified_files": [
            "db/flush_scheduler.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c1273533bd95c08caf64507c1c113b1718e73e34"
    },
    {
        "hash": "a213971d8a59d2b0533eed898df1d867bbd8a868",
        "author": "Nik Bougalis",
        "date": "2014-10-02T14:33:16-07:00",
        "message": "Don't return (or dereference) dangling pointer",
        "modified_files_count": 1,
        "modified_files": [
            "db/flush_scheduler.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a213971d8a59d2b0533eed898df1d867bbd8a868"
    },
    {
        "hash": "25888ae0068c9b8e3d9421ea8c78a7be339298d8",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-02T01:10:01-07:00",
        "message": "Merge pull request #329 from fyrz/master\n\nresolution for java build problem introduced by 5ec53f3edf62bec1b690ce12...",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/25888ae0068c9b8e3d9421ea8c78a7be339298d8"
    },
    {
        "hash": "89833e5a859149795bf72dc01eb06f6ba9ef33a8",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-02T01:05:59-07:00",
        "message": "Fixed signed-unsigned comparison warning in db_test.cc\n\nSummary:\nFixed signed-unsigned comparison warning in db_test.cc\n\ndb/db_test.cc:8606:3: note: in instantiation of function template specialization 'rocksdb::test::Tester::IsEq<int, unsigned long>' requested here\n  ASSERT_EQ(2, metadata.size());\n    ^\n\nTest Plan:\nmake db_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/89833e5a859149795bf72dc01eb06f6ba9ef33a8"
    },
    {
        "hash": "fcac705f95cccd5fed074591bc472564ea193c43",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-10-02T01:03:08-07:00",
        "message": "Fixed compile warning on Mac caused by unused variables.\n\nSummary:\nFixed compile warning caused by unused variables.\n\n./db/compaction_picker.h:118:7: error: private field 'max_grandparent_overlap_factor_' is not used [-Werror,-Wunused-private-field]\n  int max_grandparent_overlap_factor_;\n      ^\n./db/compaction_picker.h:119:7: error: private field 'expanded_compaction_factor_' is not used [-Werror,-Wunused-private-field]\n  int expanded_compaction_factor_;\n      ^\n2 errors generated.\n\nTest Plan:\nmake db_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fcac705f95cccd5fed074591bc472564ea193c43"
    },
    {
        "hash": "b3343fdeac6738162763206b7677d285ab7263c0",
        "author": "fyrz",
        "date": "2014-10-02T09:25:07+02:00",
        "message": "resolution for java build problem introduced by 5ec53f3edf62bec1b690ce12fb21a6c52203f3c8",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b3343fdeac6738162763206b7677d285ab7263c0"
    },
    {
        "hash": "9d6f380866349b90f3834cafc6e79af43a78d346",
        "author": "Danny Al-Gaaf",
        "date": "2014-10-01T11:57:01+02:00",
        "message": "backupable_db_test.cc: pass const string param by reference\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9d6f380866349b90f3834cafc6e79af43a78d346"
    },
    {
        "hash": "8ff0b409553076f9eea34ad57ca821c787184992",
        "author": "Danny Al-Gaaf",
        "date": "2014-10-01T11:55:43+02:00",
        "message": "document_db_test.cc: pass const string param by reference\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/document/document_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8ff0b409553076f9eea34ad57ca821c787184992"
    },
    {
        "hash": "177caca4283fcffdfd74d6c02de2fcd98049adc5",
        "author": "Danny Al-Gaaf",
        "date": "2014-10-01T11:53:00+02:00",
        "message": "ttl/ttl_test.cc: pass const string param by reference\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/ttl/ttl_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/177caca4283fcffdfd74d6c02de2fcd98049adc5"
    },
    {
        "hash": "4a171882d6f9e31e44a751738211e47ac0759336",
        "author": "Danny Al-Gaaf",
        "date": "2014-10-01T11:09:22+02:00",
        "message": "db/version_set.cc: remove unnecessary checks\n\nFix for:\n\n[db/version_set.cc:1219]: (style) Unsigned variable 'last_file'\n can't be negative so it is unnecessary to test it.\n[db/version_set.cc:1234]: (style) Unsigned variable 'first_file'\n can't be negative so it is unnecessary to test it.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4a171882d6f9e31e44a751738211e47ac0759336"
    },
    {
        "hash": "bf3bfd04486945b0bf92d6ab8bce4f991be8e81d",
        "author": "Danny Al-Gaaf",
        "date": "2014-10-01T10:53:37+02:00",
        "message": "util/cache_test.cc: use static_cast over C-Style cast\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bf3bfd04486945b0bf92d6ab8bce4f991be8e81d"
    },
    {
        "hash": "86e29f0334b80fbdb96e0b3f3b35608d7813c537",
        "author": "Danny Al-Gaaf",
        "date": "2014-10-01T10:49:09+02:00",
        "message": "document_db.cc: remove unused variable\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/document/document_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/86e29f0334b80fbdb96e0b3f3b35608d7813c537"
    },
    {
        "hash": "28a6e31583de187eed56d7f5dca13caecd64b640",
        "author": "Danny Al-Gaaf",
        "date": "2014-10-01T10:49:09+02:00",
        "message": "table/block_based_table_builder.cc: remove unused variable\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/28a6e31583de187eed56d7f5dca13caecd64b640"
    },
    {
        "hash": "091153493cf71f3004bf921759a2f49435e8e4c6",
        "author": "Danny Al-Gaaf",
        "date": "2014-10-01T10:49:09+02:00",
        "message": "db/db_test.cc: remove unused variable\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/091153493cf71f3004bf921759a2f49435e8e4c6"
    },
    {
        "hash": "6b6cedbb1ba49c819f9fe00a44e82a5d6564aee7",
        "author": "Danny Al-Gaaf",
        "date": "2014-10-01T10:49:08+02:00",
        "message": "table/format.cc: reduce scope of some variables\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6b6cedbb1ba49c819f9fe00a44e82a5d6564aee7"
    },
    {
        "hash": "55652043c83c463ce57b7748e01c6d12bb5bf9fe",
        "author": "Danny Al-Gaaf",
        "date": "2014-10-01T10:49:08+02:00",
        "message": "table/cuckoo_table_reader.cc: pass func parameter by reference\n\nFix for:\n\n[table/cuckoo_table_reader.cc:196]: (performance) Function\n parameter 'target' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/55652043c83c463ce57b7748e01c6d12bb5bf9fe"
    },
    {
        "hash": "5abd8add7d7217199c022ac575ee28e5d9ba94b2",
        "author": "Danny Al-Gaaf",
        "date": "2014-10-01T10:49:08+02:00",
        "message": "db/deletefile_test.cc: remove unused variable\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/deletefile_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5abd8add7d7217199c022ac575ee28e5d9ba94b2"
    },
    {
        "hash": "d6483af870685875ca1452d1a329dfeab529c86d",
        "author": "Danny Al-Gaaf",
        "date": "2014-10-01T10:49:08+02:00",
        "message": "db/db_test.cc: reduce scope of some variables\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d6483af870685875ca1452d1a329dfeab529c86d"
    },
    {
        "hash": "44cca0cd8fb0903c5946ec1c79c31fad992691c6",
        "author": "Danny Al-Gaaf",
        "date": "2014-10-01T10:49:08+02:00",
        "message": "db/db_iter.cc: remove unused variable\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/44cca0cd8fb0903c5946ec1c79c31fad992691c6"
    },
    {
        "hash": "8ee75dca2e9ef385e0358aa785cb43becc4f09d2",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:33+02:00",
        "message": "db/memtable.cc: remove unused variable merge_result\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8ee75dca2e9ef385e0358aa785cb43becc4f09d2"
    },
    {
        "hash": "0fd8bbca53fafb3a729b0f6f470c2d024d3e6473",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:33+02:00",
        "message": "db/db_impl.cc: reduce scope of prefix_initialized\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0fd8bbca53fafb3a729b0f6f470c2d024d3e6473"
    },
    {
        "hash": "676ff7b1fbd9c7aaa1b3c9100a14f91d63823d3c",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:33+02:00",
        "message": "compaction_picker.cc: remove check for >=0 for unsigned\n\nFix for:\n\n[db/compaction_picker.cc:923]: (style) Unsigned variable\n 'start_index' can't be negative so it is unnecessary to test it.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/676ff7b1fbd9c7aaa1b3c9100a14f91d63823d3c"
    },
    {
        "hash": "e55aea5512dfc2c7bc9595b5d307269f3d002a03",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "document_db.cc: fix assert\n\nCheck for lhs and not twice for rhs.\n\nFix for:\n\n[utilities/document/document_db.cc:36] ->\n [utilities/document/document_db.cc:36]: (style) Same expression on both\n sides of '&&'.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/document/document_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e55aea5512dfc2c7bc9595b5d307269f3d002a03"
    },
    {
        "hash": "d517c836483b2017ec7d64997fb7a331fdb5f150",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "in_table_factory.cc: use correct format specifier\n\nUse %zu instead of %zd since size_t and uint32_t are unsigned.\n\nFix for:\n\n[table/plain_table_factory.cc:55]: (warning) %zd in format string (no. 1)\n requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n[table/plain_table_factory.cc:58]: (warning) %zd in format string (no. 1)\n requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_factory.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d517c836483b2017ec7d64997fb7a331fdb5f150"
    },
    {
        "hash": "b140375565878fb59235bfd2673913b96ae021fe",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "ttl/ttl_test.cc: prefer prefix ++operator for non-primitive types\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/ttl/ttl_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b140375565878fb59235bfd2673913b96ae021fe"
    },
    {
        "hash": "43c789c8f246a2a35864e3fca9585b55c40c2095",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "spatialdb/spatial_db.cc: use !empty() instead of 'size() > 0'\n\nUse empty() since it should be prefered as it has, following\nthe standard, a constant time complexity regardless of the\ncontainter type. The same is not guaranteed for size().\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/43c789c8f246a2a35864e3fca9585b55c40c2095"
    },
    {
        "hash": "0de452ee9f8afa9cae2a72b8fb3c3dd59b28a9d9",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "document_db.cc: pass const parameter by reference\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/document/document_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0de452ee9f8afa9cae2a72b8fb3c3dd59b28a9d9"
    },
    {
        "hash": "4cc8643baf5b4e4a25fb20a77b3257100747d483",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "util/ldb_cmd.cc: prefer prefix ++operator for non-primitive types\n\nPrefer prefix ++operator for non-primitive types like iterators for\nperformance reasons. Prefix ++/-- operators avoid creating a temporary\ncopy.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4cc8643baf5b4e4a25fb20a77b3257100747d483"
    },
    {
        "hash": "af8c2b2d97d8473d97107bcf326a450e7700def6",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "util/signal_test.cc: suppress intentional null pointer deref\n\nAdd comment to enabele cppcheck suppression of intentional null\npointer deref via --inline-suppr option.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "util/signal_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/af8c2b2d97d8473d97107bcf326a450e7700def6"
    },
    {
        "hash": "33580fa39a0aef3d1115e47fb4f13154be5e5993",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "db/db_impl.cc: fix object handling, remove double lines\n\nFix for:\n\n[db/db_impl.cc:4039]: (error) Instance of 'StopWatch' object is\n destroyed immediately.\n[db/db_impl.cc:4042]: (error) Instance of 'StopWatch' object is\n destroyed immediately.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/33580fa39a0aef3d1115e47fb4f13154be5e5993"
    },
    {
        "hash": "873f1356a1781e8d638973ea320b722d3240fc5a",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "db_ttl_impl.h: pass func parameter by reference\n\nFix for:\n\n[utilities/ttl/db_ttl_impl.h:209]: (performance) Function parameter\n 'merge_op' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/ttl/db_ttl_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/873f1356a1781e8d638973ea320b722d3240fc5a"
    },
    {
        "hash": "8558457143bfa76d61e0d2f715e40ec2ddb6ffc2",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "ldb_cmd_execute_result.h: perform init in initialization list\n\nFix for:\n\n[util/ldb_cmd_execute_result.h:18]: (performance) Variable 'message_'\n is assigned in constructor body. Consider performing initialization\n in initialization list.\n[util/ldb_cmd_execute_result.h:23]: (performance) Variable 'message_'\n is assigned in constructor body. Consider performing initialization\n in initialization list.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd_execute_result.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8558457143bfa76d61e0d2f715e40ec2ddb6ffc2"
    },
    {
        "hash": "063471bf7613544496a4d4b5a1e1ba4a7aa605cf",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "table/table_test.cc: pass func parameter by reference\n\nFix for:\n\n[table/table_test.cc:1218]: (performance) Function parameter\n 'prefix' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/063471bf7613544496a4d4b5a1e1ba4a7aa605cf"
    },
    {
        "hash": "93548ce8f451a701ad0967ba705f04fef80aa11a",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "table/cuckoo_table_reader.cc: pass func parameter by ref\n\nFix for:\n\n[table/cuckoo_table_reader.cc:198]: (performance) Function\n parameter 'file_data' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/93548ce8f451a701ad0967ba705f04fef80aa11a"
    },
    {
        "hash": "b8b7117e97e649fc65d0a4dd397caf9a39fb71b1",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:31+02:00",
        "message": "db/version_set.cc: use !empty() instead of 'size() > 0'\n\nUse empty() since it should be prefered as it has, following\nthe standard, a constant time complexity regardless of the\ncontainter type. The same is not guaranteed for size().\n\nFix for:\n[db/version_set.cc:2250]: (performance) Possible inefficient\n checking for 'column_families_not_found' emptiness.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b8b7117e97e649fc65d0a4dd397caf9a39fb71b1"
    },
    {
        "hash": "53910ddb152fbcba95a3e04b058a997c40f654ae",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:31+02:00",
        "message": "db_test.cc: pass parameter by reference\n\nFix for:\n\n[db/db_test.cc:6141]: (performance) Function parameter\n 'key' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/53910ddb152fbcba95a3e04b058a997c40f654ae"
    },
    {
        "hash": "68ca534169a4f9e1930f6511109e973b43cf5998",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:31+02:00",
        "message": "corruption_test.cc: pass parameter by reference\n\nFix for:\n\n[db/corruption_test.cc:134]: (performance) Function parameter\n 'fname' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/corruption_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/68ca534169a4f9e1930f6511109e973b43cf5998"
    },
    {
        "hash": "7506198da25273d0323be2a8db89390d85dc138c",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T17:53:49+02:00",
        "message": "cuckoo_table_db_test.cc: add flush after delete\n\nIt seems that a FlushMemTable() call is needed in the\nUint64Comparator test after call Delete(). Otherwise the later\nvia Put() added keys get lost with the next FlushMemTable()\ncall before the check.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/cuckoo_table_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7506198da25273d0323be2a8db89390d85dc138c"
    },
    {
        "hash": "1f963305a8f3384da3215c37ed7a264c5c99417c",
        "author": "Mark Callaghan",
        "date": "2014-09-29T17:51:40-07:00",
        "message": "Print MB per second compaction throughput separately for reads and writes\n\nSummary:\nFrom this line there used to be one column (MB/sec) that includes reads and writes. This change splits it and for real workloads the rd and wr rates might not match when keys are dropped.\n2014/09/29-17:31:01.213162 7f929fbff700 (Original Log Time 2014/09/29-17:31:01.180025) [default] compacted to: files[2 5 0 0 0 0 0], MB/sec: 14.0 rd, 14.0 wr, level 1, files in(4, 0) out(5) MB in(8.5, 0.0) out(8.5), read-write-amplify(2.0) write-amplify(1.0) OK\n\nTest Plan:\nmake check, grepped LOG\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: igor\n\nDifferential Revision: https://reviews.facebook.net/D24237",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1f963305a8f3384da3215c37ed7a264c5c99417c"
    },
    {
        "hash": "f0f795549745c54ebc8cef85fdb3809f481a1ab1",
        "author": "mike@arpaia.co",
        "date": "2014-09-29T16:05:25-07:00",
        "message": "Fixing comile errors on OS X\n\nSummary: Building master on OS X has some compile errors due to implicit type conversions which generate warnings which RocksDB's build settings raise as errors.\n\nTest Plan: It compiles!\n\nReviewers: ljin, igor\n\nReviewed By: ljin\n\nDifferential Revision: https://reviews.facebook.net/D24135",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f0f795549745c54ebc8cef85fdb3809f481a1ab1"
    },
    {
        "hash": "747523d241c472de64f4689e85a7e01f19534b15",
        "author": "Mark Callaghan",
        "date": "2014-09-29T15:47:05-07:00",
        "message": "Print per column family metrics in db_bench\n\nSummary: see above\n\nTest Plan:\nmake check, ran db_bench and looked at output\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: igor\n\nDifferential Revision: https://reviews.facebook.net/D24189",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/747523d241c472de64f4689e85a7e01f19534b15"
    },
    {
        "hash": "637f89179f833762a48f7fbed3f72a7ff492eb61",
        "author": "Igor Canadi",
        "date": "2014-09-29T15:10:21-07:00",
        "message": "Merge pull request #321 from eonnen/master\n\nMake test use a compatible type in the size checks.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/637f89179f833762a48f7fbed3f72a7ff492eb61"
    },
    {
        "hash": "827e31c746b64668f9ea67e07d9df706fd69668b",
        "author": "erik",
        "date": "2014-09-29T14:52:16-07:00",
        "message": "Make test use a compatible type in the size checks.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/827e31c746b64668f9ea67e07d9df706fd69668b"
    },
    {
        "hash": "8b8011a68ca80fc2523447302e27ceb912af9771",
        "author": "fyrz",
        "date": "2014-09-27T10:06:13+02:00",
        "message": "Changed name of ReverseBytewiseComparator based on review comment",
        "modified_files_count": 1,
        "modified_files": [
            "util/comparator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8b8011a68ca80fc2523447302e27ceb912af9771"
    },
    {
        "hash": "389edb6b1bd8ead82090feff7a723e26ba8d001e",
        "author": "sdong",
        "date": "2014-09-26T16:17:05-07:00",
        "message": "universal compaction picker: use double for potential overflow\n\nSummary: There is a possible overflow case in universal compaction picker. Use double to make the logic straight-forward\n\nTest Plan: make all check\n\nReviewers: yhchiang, igor, MarkCallaghan, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23817",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/389edb6b1bd8ead82090feff7a723e26ba8d001e"
    },
    {
        "hash": "d439451fab490ce0cabc90f2880443c93d9eab12",
        "author": "Lei Jin",
        "date": "2014-09-25T16:45:37-07:00",
        "message": "delay initialization of cuckoo table iterator\n\nSummary:\ncuckoo table iterator creation is quite expensive since it needs to load\nall data and sort them. After compaction, RocksDB creates a new iterator\nof the new file to make sure it is in good state. That makes the DB\ncreation quite slow. Delay the iterator db sort to the seek time to\nspeed it up.\n\nTest Plan: db_bench\n\nReviewers: igor, yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23775",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d439451fab490ce0cabc90f2880443c93d9eab12"
    },
    {
        "hash": "f7375f39fd5db29ecdc3d6821a15efedadaa4a66",
        "author": "Igor Canadi",
        "date": "2014-09-25T11:08:16-07:00",
        "message": "Fix double deletes\n\nSummary: While debugging clients compaction issues, I noticed bunch of delete bugs: P16329995. MakeTableName returns sst file with \"/\" prefix. We also need \"/\" prefix when we get the files though GetChildren(), so that we can properly dedup the files.\n\nTest Plan: none\n\nReviewers: sdong, yhchiang, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23457",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f7375f39fd5db29ecdc3d6821a15efedadaa4a66"
    },
    {
        "hash": "55af370756af6f11edd79e431a4f9cc0a04e784b",
        "author": "Igor Canadi",
        "date": "2014-09-23T13:02:23-07:00",
        "message": "Remove TODO for checking index checksums",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/55af370756af6f11edd79e431a4f9cc0a04e784b"
    },
    {
        "hash": "3d74f09979a2eadc1711a13ca4e221b53a6c44b3",
        "author": "Igor Canadi",
        "date": "2014-09-22T15:19:20-07:00",
        "message": "Fix compile",
        "modified_files_count": 1,
        "modified_files": [
            "table/full_filter_block_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3d74f09979a2eadc1711a13ca4e221b53a6c44b3"
    },
    {
        "hash": "53b00399548eb8eb1cab396e17890aca6c5f497e",
        "author": "Igor Canadi",
        "date": "2014-09-22T15:00:03-07:00",
        "message": "Fix release compile",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/53b00399548eb8eb1cab396e17890aca6c5f497e"
    },
    {
        "hash": "5e6aee4325ae9dabe38905828f5b63944a40c06a",
        "author": "Lei Jin",
        "date": "2014-09-22T10:36:53-07:00",
        "message": "dont create backup_input if compaction filter v2 is not used\n\nSummary:\nCompaction creates backup_input iterator even though it only needed\nwhen compaction filter v2 is enabled\n\nTest Plan: make all check\n\nReviewers: sdong, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23769",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5e6aee4325ae9dabe38905828f5b63944a40c06a"
    },
    {
        "hash": "49b5f94c54389703e4353deda3f0ff2b78010a9b",
        "author": "Igor Canadi",
        "date": "2014-09-22T10:17:03-07:00",
        "message": "Merge pull request #306 from Liuchang0812/fix_cast\n\nUpdate logging.cc",
        "modified_files_count": 1,
        "modified_files": [
            "util/logging.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/49b5f94c54389703e4353deda3f0ff2b78010a9b"
    },
    {
        "hash": "787cb4db29b995297935819cf7f2f07f6ffd9977",
        "author": "liuchang0812",
        "date": "2014-09-23T01:10:46+08:00",
        "message": "remove cast, replace %llu with % PRIu64",
        "modified_files_count": 1,
        "modified_files": [
            "util/logging.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/787cb4db29b995297935819cf7f2f07f6ffd9977"
    },
    {
        "hash": "a7574d4fa17c6110b878bd91c674fb012982b7ec",
        "author": "whu_liuchang",
        "date": "2014-09-22T23:37:00+08:00",
        "message": "Update logging.cc",
        "modified_files_count": 1,
        "modified_files": [
            "util/logging.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a7574d4fa17c6110b878bd91c674fb012982b7ec"
    },
    {
        "hash": "7e0dcb953f44e1567762a0a77c26cdde0d4b9e9c",
        "author": "whu_liuchang",
        "date": "2014-09-22T23:24:53+08:00",
        "message": "Update logging.cc\n\nfix cast style to cpp static_cast",
        "modified_files_count": 1,
        "modified_files": [
            "util/logging.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7e0dcb953f44e1567762a0a77c26cdde0d4b9e9c"
    },
    {
        "hash": "57fa3cc5b3843902033f0a97b818e98ddbf073f7",
        "author": "Igor Canadi",
        "date": "2014-09-21T11:55:45-07:00",
        "message": "Merge pull request #304 from Liuchang0812/fix-check\n\nfixed #303: replace %ld with % PRId64",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_reader_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/57fa3cc5b3843902033f0a97b818e98ddbf073f7"
    },
    {
        "hash": "cd44522a94be2e5116e8e30556cb97f6ad4917e8",
        "author": "Igor Canadi",
        "date": "2014-09-21T11:54:55-07:00",
        "message": "Merge pull request #305 from Liuchang0812/fix-logging\n\nremove unused variable",
        "modified_files_count": 1,
        "modified_files": [
            "util/logging.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cd44522a94be2e5116e8e30556cb97f6ad4917e8"
    },
    {
        "hash": "6a031b6a81d9b3592d5cba41d18069999f499938",
        "author": "liuchang0812",
        "date": "2014-09-21T22:20:00+08:00",
        "message": "remove unused variable",
        "modified_files_count": 1,
        "modified_files": [
            "util/logging.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6a031b6a81d9b3592d5cba41d18069999f499938"
    },
    {
        "hash": "4436f17bd80fd3e953787821a0e46b7d8369e4f3",
        "author": "liuchang0812",
        "date": "2014-09-21T22:09:48+08:00",
        "message": "fixed #303: replace %ld with % PRId64",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_reader_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4436f17bd80fd3e953787821a0e46b7d8369e4f3"
    },
    {
        "hash": "ed9a2df8cc44e10bbee8ff7861aba8fcbc9ec500",
        "author": "Torrie Fischer",
        "date": "2014-09-19T16:10:33-07:00",
        "message": "fix unity build",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/write_batch_with_index/write_batch_with_index.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ed9a2df8cc44e10bbee8ff7861aba8fcbc9ec500"
    },
    {
        "hash": "32f2532a0b18d7ef2bf6e9c1638519a1ab75dd75",
        "author": "Mark Callaghan",
        "date": "2014-09-19T13:09:25-07:00",
        "message": "Print compression_size_percent as a signed int\n\nSummary:\ncompression_size_percent is an int but was printed as\nan unsigned int. So the default of -1 is displayed as a big number.\n\nTest Plan: make check\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23679",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/32f2532a0b18d7ef2bf6e9c1638519a1ab75dd75"
    },
    {
        "hash": "976caca09bb0ce6cac15fbf2a3ddd4fba98d1bad",
        "author": "sdong",
        "date": "2014-09-19T10:55:59-07:00",
        "message": "Skip AllocateTest if fallocate() is not supported in the file system\n\nSummary: To avoid false positive test failures when the file system doesn't support fallocate. In EnvTest.AllocateTest, we first make a simple fallocate call and check the error codes to rule out the possibility that it is not supported. Skip the test if the error code indicates it is not supported.\n\nTest Plan: Run the test and make sure it passes on file systems supporting and not supporting fallocate\n\nReviewers: yhchiang, ljin, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23667",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/976caca09bb0ce6cac15fbf2a3ddd4fba98d1bad"
    },
    {
        "hash": "f44594743f92a33121d45061a0be13bca09acbbd",
        "author": "Venkatesh Radhakrishnan",
        "date": "2014-09-18T22:19:41-07:00",
        "message": "RocksDB: Format uint64 using PRIu64 in db_impl.cc\n\nSummary: Use PRIu64 to format uint64 in a portable manner\n\nTest Plan: Run \"make all check\"\n\nReviewers: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23595",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f44594743f92a33121d45061a0be13bca09acbbd"
    },
    {
        "hash": "e17bc65c75efb34277c683efdfad3a1b63f5deb6",
        "author": "ankgup87",
        "date": "2014-09-18T22:15:31-07:00",
        "message": "Merge pull request #299 from ankgup87/master\n\n[Java] Fix build",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e17bc65c75efb34277c683efdfad3a1b63f5deb6"
    },
    {
        "hash": "b93797abc43c68652691e2de19d797c4264650e1",
        "author": "Ankit Gupta",
        "date": "2014-09-18T22:13:52-07:00",
        "message": "Fix build",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b93797abc43c68652691e2de19d797c4264650e1"
    },
    {
        "hash": "035043559d300d8fd001c48676964a6b91254328",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-09-18T10:57:20-07:00",
        "message": "Fixed a signed-unsigned comparison in spatial_db.cc -- issue #293\n\nSummary:\nFixed a signed-unsigned comparison in spatial_db.cc\n\nutilities/spatialdb/spatial_db.cc:542:38: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]\ncc1plus: all warnings being treated as errors\nmake: *** [utilities/spatialdb/spatial_db.o] Error 1\n\nTest Plan:\nmake spatial_db_test\n./spatial_db_test\n\nReviewers: ljin, sdong, reddragon, igor\n\nReviewed By: reddragon\n\nSubscribers: reddragon, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23565",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/035043559d300d8fd001c48676964a6b91254328"
    },
    {
        "hash": "2fb1fea30fd027bbd824a26b682d04d91a8661dc",
        "author": "Igor Canadi",
        "date": "2014-09-18T10:42:54-07:00",
        "message": "Fix syncronization issues",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2fb1fea30fd027bbd824a26b682d04d91a8661dc"
    },
    {
        "hash": "feadb9df533963ffbbb52bf3267dbd43e9b502ee",
        "author": "Lei Jin",
        "date": "2014-09-17T15:48:33-07:00",
        "message": "fix cuckoo table builder test\n\nSummary:\nas title\n\nTest Plan:\n./cuckoo_table_builder_test\n\nReviewers:igor\n\nCC:leveldb\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_builder_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/feadb9df533963ffbbb52bf3267dbd43e9b502ee"
    },
    {
        "hash": "3c232e16470aa60a5e0c5ec5fe30e9073aa1f093",
        "author": "Igor Canadi",
        "date": "2014-09-17T15:45:43-07:00",
        "message": "Fix mac compile",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3c232e16470aa60a5e0c5ec5fe30e9073aa1f093"
    },
    {
        "hash": "5600c8f6e55e677053b87b67b92e6b80aa1cabb4",
        "author": "Lei Jin",
        "date": "2014-09-17T13:25:29-07:00",
        "message": "cuckoo table: return estimated size - 1\n\nSummary:\nThis is to avoid cutting file prematurely and resulting file size to be\nhalf of specified.\n\nTest Plan: db_bench\n\nReviewers: sdong, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23541",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5600c8f6e55e677053b87b67b92e6b80aa1cabb4"
    },
    {
        "hash": "a7c20945268fb7d3fc1d08f2a5cd6a491c607e3b",
        "author": "Igor Canadi",
        "date": "2014-09-17T12:43:39-07:00",
        "message": "Merge pull request #292 from saghmrossi/master\n\nutil/cache_bench.cc needs to include inttypes.h",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a7c20945268fb7d3fc1d08f2a5cd6a491c607e3b"
    },
    {
        "hash": "60a4aa175e5ce4fc3fa9ba47c52e12ac9483b152",
        "author": "Igor Canadi",
        "date": "2014-09-17T12:31:53-07:00",
        "message": "Test use_mmap_reads\n\nSummary: We currently don't test mmap reads as part of db_test. Piggyback it on kWalDir test config.\n\nTest Plan: make check\n\nReviewers: ljin, sdong, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23337",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/60a4aa175e5ce4fc3fa9ba47c52e12ac9483b152"
    },
    {
        "hash": "f9eaaa66e6e087d542f4fb2c325df02ab5cab916",
        "author": "Saghm Rossi",
        "date": "2014-09-17T15:15:53-04:00",
        "message": "added include for inttypes.h to fix nonworking printf statements",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f9eaaa66e6e087d542f4fb2c325df02ab5cab916"
    },
    {
        "hash": "9b8480d93b1f6d3837295265fad0cb8a842364f4",
        "author": "Igor Canadi",
        "date": "2014-09-15T10:00:07-07:00",
        "message": "Merge pull request #287 from yinqiwen/rate-limiter-crash-fix\n\nfix rate limiter crash #286",
        "modified_files_count": 1,
        "modified_files": [
            "util/rate_limiter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9b8480d93b1f6d3837295265fad0cb8a842364f4"
    },
    {
        "hash": "28be16b1dc60db6cb29503ce726a582d7f52a915",
        "author": "yinqiwen",
        "date": "2014-09-15T20:43:38+08:00",
        "message": "fix rate limiter crash #286",
        "modified_files_count": 1,
        "modified_files": [
            "util/rate_limiter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/28be16b1dc60db6cb29503ce726a582d7f52a915"
    },
    {
        "hash": "04ce1b25f3d7623c62cd5771cd8391d02da7e31a",
        "author": "Igor Canadi",
        "date": "2014-09-13T14:14:10-07:00",
        "message": "Fix #284",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_controller.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/04ce1b25f3d7623c62cd5771cd8391d02da7e31a"
    },
    {
        "hash": "540a257f2c593ff3875a8d9e74006ac7139fcf77",
        "author": "Igor Canadi",
        "date": "2014-09-12T16:15:29-07:00",
        "message": "Fix WAL synced\n\nSummary: Uhm...\n\nTest Plan: nope\n\nReviewers: sdong, yhchiang, tnovak, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23343",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/540a257f2c593ff3875a8d9e74006ac7139fcf77"
    },
    {
        "hash": "24f034bf498d747dcbd2836c9c5c1b916a73f1b3",
        "author": "Igor Canadi",
        "date": "2014-09-12T14:37:45-07:00",
        "message": "Merge pull request #282 from Chilledheart/develop\n\nFix build issue under macosx",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/24f034bf498d747dcbd2836c9c5c1b916a73f1b3"
    },
    {
        "hash": "49fe329e5e9b20118fb20cd5c6bb2523819c697c",
        "author": "Chilledheart",
        "date": "2014-09-13T05:05:22+08:00",
        "message": "Fix build issue under macosx",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/49fe329e5e9b20118fb20cd5c6bb2523819c697c"
    },
    {
        "hash": "0352a9fa913120e0dbdc923f5fd614780585a7b0",
        "author": "Feng Zhu",
        "date": "2014-09-11T16:33:46-07:00",
        "message": "add_wrapped_bloom_test\n\nSummary:\n1. wrap a filter policy like what fbcode/multifeed/rocksdb/MultifeedRocksDbKey.h\n   to ensure that rocksdb works fine after filterpolicy interface change\n\nTest Plan: 1. valgrind ./bloom_test\n\nReviewers: ljin, igor, yhchiang, dhruba, sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23229",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0352a9fa913120e0dbdc923f5fd614780585a7b0"
    },
    {
        "hash": "9c0e66ce9811bf16e56254d85231a5b980ef4571",
        "author": "Igor Canadi",
        "date": "2014-09-11T16:24:16-07:00",
        "message": "Don't run background jobs (flush, compactions) when bg_error_ is set\n\nSummary:\nIf bg_error_ is set, that means that we mark DB read only. However, current behavior still continues the flushes and compactions, even though bg_error_ is set.\n\nOn the other hand, if bg_error_ is set, we will return Status::OK() from CompactRange(), although the compaction didn't actually succeed.\n\nThis is clearly not desired behavior. I found this when I was debugging t5132159, although I'm pretty sure these aren't related.\n\nAlso, when we're shutting down, it's dangerous to exit RunManualCompaction(), since that will destruct ManualCompaction object. Background compaction job might still hold a reference to manual_compaction_ and this will lead to undefined behavior. I changed the behavior so that we only exit RunManualCompaction when manual compaction job is marked done.\n\nTest Plan: make check\n\nReviewers: sdong, ljin, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23223",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9c0e66ce9811bf16e56254d85231a5b980ef4571"
    },
    {
        "hash": "a9639bda8471ff57ed5bcefefa25ba67207dd96f",
        "author": "Igor Canadi",
        "date": "2014-09-11T15:36:30-07:00",
        "message": "Fix valgrind test\n\nSummary: Get valgrind to stop complaining about uninitialized value\n\nTest Plan: valgrind not complaining anymore\n\nReviewers: sdong, yhchiang, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23289",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a9639bda8471ff57ed5bcefefa25ba67207dd96f"
    },
    {
        "hash": "d1f24dc7eef7c55984f66ebd32ce4ada08293b90",
        "author": "Igor Canadi",
        "date": "2014-09-11T11:00:45-07:00",
        "message": "Relax FlushSchedule test\n\nSummary: The test makes sure that we don't call flush too often. For that, it's ok to check if we have less than 10 table files. Otherwise, the test is flaky because it's hard to estimate number of entries in the memtable before it gets flushed (any ideas?)\n\nTest Plan: Still works, but hopefully less flaky.\n\nReviewers: ljin, sdong, yhchiang\n\nReviewed by: yhchiang\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23241",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d1f24dc7eef7c55984f66ebd32ce4ada08293b90"
    },
    {
        "hash": "dd641b2117f4f8d820e572dce379f5663453473f",
        "author": "Lei Jin",
        "date": "2014-09-10T12:00:32-07:00",
        "message": "fix RocksDB java build\n\nSummary: as title\n\nTest Plan: make rocksdbjava\n\nReviewers: sdong, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23193",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dd641b2117f4f8d820e572dce379f5663453473f"
    },
    {
        "hash": "53404d9fb7907fafed43096050dbbda76d9b4174",
        "author": "Feng Zhu",
        "date": "2014-09-10T09:46:56-07:00",
        "message": "add_qps_info_in cache bench\n\nSummary: print qps in summary\n\nTest Plan: ./cache_bench\n\nReviewers: yhchiang, ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23079",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/53404d9fb7907fafed43096050dbbda76d9b4174"
    },
    {
        "hash": "0a42295a248742fe5058492095d4ea59e543aa34",
        "author": "Igor Canadi",
        "date": "2014-09-09T11:50:05-07:00",
        "message": "Fix SimpleWriteTimeoutTest\n\nSummary:\nIn column family's SanitizeOptions() [1], we make sure that min_write_buffer_number_to_merge is normal value. However, this test depended on the fact that setting min_write_buffer_number_to_merge to be bigger than max_write_buffer_number will cause a deadlock. I'm not sure how it worked before.\n\nThis diff fixes it by scheduling sleeping background task, which will actually block any attempts of flushing.\n\n[1] https://github.com/facebook/rocksdb/blob/master/db/column_family.cc#L104\n\nTest Plan: the test works now\n\nReviewers: yhchiang, sdong, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D23103",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0a42295a248742fe5058492095d4ea59e543aa34"
    },
    {
        "hash": "55114e7f40470bb12bbdadca4b8100e612a41da2",
        "author": "Igor Canadi",
        "date": "2014-09-08T17:00:43-07:00",
        "message": "Some updates for SpatialDB\n\nSummary:\n1. add db statistics\n2. write out batch every millionth write\n\nTest Plan: unit tests\n\nReviewers: ljin, sdong, yinwang\n\nReviewed By: yinwang\n\nDifferential Revision: https://reviews.facebook.net/D22755",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/55114e7f40470bb12bbdadca4b8100e612a41da2"
    },
    {
        "hash": "171d4ff4a29fec153d9e53d44bb39657044927a7",
        "author": "Lei Jin",
        "date": "2014-09-08T15:39:53-07:00",
        "message": "remove TailingIterator reference in db_impl.h\n\nSummary: as title\n\nTest Plan: make release\n\nReviewers: igor\n\nDifferential Revision: https://reviews.facebook.net/D23073",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/171d4ff4a29fec153d9e53d44bb39657044927a7"
    },
    {
        "hash": "9360cc690e735fbd8a13ebbc448b4da8463fbe46",
        "author": "Igor Canadi",
        "date": "2014-09-08T08:01:25-07:00",
        "message": "Fix valgrind issue",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_debug.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9360cc690e735fbd8a13ebbc448b4da8463fbe46"
    },
    {
        "hash": "02d5bff393cd12242f324c1bc2826fa0a9ff99d2",
        "author": "Igor Canadi",
        "date": "2014-09-08T07:48:58-07:00",
        "message": "Merge pull request #277 from wankai/master\n\nfix comments",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_factory.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/02d5bff393cd12242f324c1bc2826fa0a9ff99d2"
    },
    {
        "hash": "88a2f44f99192a156ad70724339ab7e962b1851f",
        "author": "wankai",
        "date": "2014-09-08T16:34:04+08:00",
        "message": "fix comments",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_factory.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/88a2f44f99192a156ad70724339ab7e962b1851f"
    },
    {
        "hash": "7c16e39228f20736b43547631b87edbb56a39067",
        "author": "Igor Canadi",
        "date": "2014-09-07T22:41:21-07:00",
        "message": "Merge pull request #276 from wankai/master\n\nreplace hard-coded number with named variable",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_key_coding.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7c16e39228f20736b43547631b87edbb56a39067"
    },
    {
        "hash": "823773837ba275d23af107a3e1499915e625e823",
        "author": "wankai",
        "date": "2014-09-08T11:10:17+08:00",
        "message": "replace hard-coded number with named variable",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_key_coding.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/823773837ba275d23af107a3e1499915e625e823"
    },
    {
        "hash": "9f8aa0939529f1c6f7ba752968e638429074425c",
        "author": "Nik Bougalis",
        "date": "2014-09-05T20:50:29-07:00",
        "message": "Don't leak data returned by opendir",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9f8aa0939529f1c6f7ba752968e638429074425c"
    },
    {
        "hash": "d1cfb71ec7f91ef317b56a2423305b90003bcb66",
        "author": "Nik Bougalis",
        "date": "2014-09-05T20:50:29-07:00",
        "message": "Remove unused member(s)",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/cache.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d1cfb71ec7f91ef317b56a2423305b90003bcb66"
    },
    {
        "hash": "bfee319fb08ab057ec07b250336afa703b63bc7f",
        "author": "Nik Bougalis",
        "date": "2014-09-05T20:50:29-07:00",
        "message": "sizeof(int*) where sizeof(int) was intended",
        "modified_files_count": 1,
        "modified_files": [
            "util/hash_cuckoo_rep.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bfee319fb08ab057ec07b250336afa703b63bc7f"
    },
    {
        "hash": "d40c1f742ff9cbbb7c6dc1a582c2937b142862d2",
        "author": "Nik Bougalis",
        "date": "2014-09-05T20:50:29-07:00",
        "message": "Add missing break statement",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d40c1f742ff9cbbb7c6dc1a582c2937b142862d2"
    },
    {
        "hash": "2e97c38980a445bd824f5dd67b1850966405539c",
        "author": "Nik Bougalis",
        "date": "2014-09-05T20:50:29-07:00",
        "message": "Avoid off-by-one error when using readlink",
        "modified_files_count": 1,
        "modified_files": [
            "port/stack_trace.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2e97c38980a445bd824f5dd67b1850966405539c"
    },
    {
        "hash": "0fbb3facc020a38520710b409d628384f8f29f0d",
        "author": "Raghav Pisolkar",
        "date": "2014-09-05T10:35:28-07:00",
        "message": "fixed memory leak in unit test DBIteratorBoundTest\n\nSummary: fixed memory leak in unit test DBIteratorBoundTest\n\nTest Plan: ran valgrind test on my unit test\n\nReviewers: sdong\n\nDifferential Revision: https://reviews.facebook.net/D22911",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0fbb3facc020a38520710b409d628384f8f29f0d"
    },
    {
        "hash": "adcd2532ca18d642db5d5b8ea6df219aad1113b5",
        "author": "Lei Jin",
        "date": "2014-09-05T09:53:04-07:00",
        "message": "fix asan check\n\nSummary:\nPlainTable takes reference instead of a copy. Keep a copy in the test\ncode\n\nTest Plan: make asan_check\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D22899",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_properties_collector_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/adcd2532ca18d642db5d5b8ea6df219aad1113b5"
    },
    {
        "hash": "0cd0ec4fe0d3bca14431766674a3382b83993bd9",
        "author": "Nik Bougalis",
        "date": "2014-09-04T20:52:00-07:00",
        "message": "Plug memory leak during index creation",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/document/document_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0cd0ec4fe0d3bca14431766674a3382b83993bd9"
    },
    {
        "hash": "4329d74e0581fa6ade91733643803f9ea3716743",
        "author": "Nik Bougalis",
        "date": "2014-09-04T20:09:45-07:00",
        "message": "Fix swapped variable names to accurately reflect usage",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_edit.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4329d74e0581fa6ade91733643803f9ea3716743"
    },
    {
        "hash": "a4816269f1b194282cd8a3cbc203c549fc66bceb",
        "author": "Igor Canadi",
        "date": "2014-09-04T10:22:58-07:00",
        "message": "Relax backupable rate limiting test",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a4816269f1b194282cd8a3cbc203c549fc66bceb"
    },
    {
        "hash": "2fd3806c88a7a738ae5e851fc4714a88c49d8508",
        "author": "Igor Canadi",
        "date": "2014-09-03T18:17:37-07:00",
        "message": "Merge pull request #263 from wankai/master\n\ndelete unused Comparator",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_builder.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2fd3806c88a7a738ae5e851fc4714a88c49d8508"
    },
    {
        "hash": "1785114a6fc1d5f80ea849671a8ad8038f2a010c",
        "author": "wankai",
        "date": "2014-09-04T09:10:13+08:00",
        "message": "delete unused Comparator",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_builder.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1785114a6fc1d5f80ea849671a8ad8038f2a010c"
    },
    {
        "hash": "703c3eacd93802060af8a1a825d2061aa4a0c7b3",
        "author": "Lei Jin",
        "date": "2014-09-03T17:01:34-07:00",
        "message": "comments about the BlockBasedTableOptions migration in Options\n\nSummary: as title\n\nTest Plan: none\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D22737",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/703c3eacd93802060af8a1a825d2061aa4a0c7b3"
    },
    {
        "hash": "4b5ad8865813d8b8c80e174d36405cbfbc4485d3",
        "author": "Igor Canadi",
        "date": "2014-09-03T10:13:16-07:00",
        "message": "Merge pull request #260 from wankai/master\n\nreplace filter_block with std::unique_ptr to support RAII",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4b5ad8865813d8b8c80e174d36405cbfbc4485d3"
    },
    {
        "hash": "19cc588b778826415db15f6336a5619897a69a73",
        "author": "wankai",
        "date": "2014-09-04T00:44:49+08:00",
        "message": "change to filter_block std::unique_ptr support RAII",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/19cc588b778826415db15f6336a5619897a69a73"
    },
    {
        "hash": "9b976e34f54bc3f58224231e716acc63906293ca",
        "author": "Igor Canadi",
        "date": "2014-09-03T08:42:25-07:00",
        "message": "Merge pull request #259 from wankai/master\n\ntypo improvement",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9b976e34f54bc3f58224231e716acc63906293ca"
    },
    {
        "hash": "8ed70fc20918c645962c660ad7d4a7381f63e6dc",
        "author": "Feng Zhu",
        "date": "2014-09-02T13:21:59-07:00",
        "message": "add assert to db Put in db_stress test\n\nSummary:\n1. assert db->Put to be true in db_stress\n2. begin column family with name \"1\".\n\nTest Plan: 1. ./db_stress\n\nReviewers: ljin, yhchiang, dhruba, sdong, igor\n\nReviewed By: sdong, igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D22659",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8ed70fc20918c645962c660ad7d4a7381f63e6dc"
    },
    {
        "hash": "7dcadb1d37c91a2418d3df3f308ebd256ca4238b",
        "author": "Igor Canadi",
        "date": "2014-09-02T08:34:54-07:00",
        "message": "Don't let flush preempt compaction in certain cases\n\nSummary:\nI have an application configured with 16 background threads. Write rates are high. L0->L1 compactions is very slow and it limits the concurrency of the system. While it's happening, other 15 threads are idle. However, when there is a need of a flush, that one thread busy with L0->L1 is doing flush, instead of any other 15 threads that are just sitting there.\n\nThis diff prevents that. If there are threads that are idle, we don't let flush preempt compaction.\n\nTest Plan: Will run stress test\n\nReviewers: ljin, sdong, yhchiang\n\nReviewed By: sdong, yhchiang\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D22299",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7dcadb1d37c91a2418d3df3f308ebd256ca4238b"
    },
    {
        "hash": "dff2b1a8f89211b97eea45cf6ce776b06388bc9d",
        "author": "Wankai Zhang",
        "date": "2014-09-02T22:57:03+08:00",
        "message": "typo improvement",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dff2b1a8f89211b97eea45cf6ce776b06388bc9d"
    },
    {
        "hash": "985a31cf0edf7f479e2d472f8d472c13d17a7edd",
        "author": "Igor Canadi",
        "date": "2014-08-31T16:05:06-04:00",
        "message": "Merge pull request #251 from nbougalis/master\n\nFix candidate file comparison when using path ids",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/985a31cf0edf7f479e2d472f8d472c13d17a7edd"
    },
    {
        "hash": "f09329cb017a4d401b341880304a48aacc5d0841",
        "author": "Nik Bougalis",
        "date": "2014-08-31T00:54:15-07:00",
        "message": "Fix candidate file comparison when using path ids",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f09329cb017a4d401b341880304a48aacc5d0841"
    },
    {
        "hash": "7e9f28cb232248b58f22545733169137a907a97f",
        "author": "Lei Jin",
        "date": "2014-08-29T21:21:49-07:00",
        "message": "limit max bytes that can be read/written per pread/write syscall\n\nSummary:\nBlockBasedTable sst file size can grow to a large size when universal\ncompaction is used. When index block exceeds 2G, pread seems to fail and\nreturn truncated data and causes \"trucated block\" error. I tried to use\n```\n  #define _FILE_OFFSET_BITS 64\n```\nBut the problem still persists. Splitting a big write/read into smaller\nbatches seems to solve the problem.\n\nTest Plan:\nsuccessfully compacted a case with resulting sst file at ~90G (2.1G\nindex block size)\n\nReviewers: yhchiang, igor, sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D22569",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7e9f28cb232248b58f22545733169137a907a97f"
    },
    {
        "hash": "722d80c3741103abf989b94e6cf8a2e145029705",
        "author": "Lei Jin",
        "date": "2014-08-29T09:51:09-07:00",
        "message": "reduce recordTick overhead in compaction loop\n\nSummary: It is too expensive to bump ticker to every key/vaue pair\n\nTest Plan: make release\n\nReviewers: sdong, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D22527",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/722d80c3741103abf989b94e6cf8a2e145029705"
    },
    {
        "hash": "22a0a60dc4a53506fd3a5f594d724f260aea7427",
        "author": "Igor Canadi",
        "date": "2014-08-29T09:53:18-04:00",
        "message": "Merge pull request #250 from wankai/master\n\ndelete unused struct Options",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_builder.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/22a0a60dc4a53506fd3a5f594d724f260aea7427"
    },
    {
        "hash": "be25ee44fe496bf7fa47bea710b99f81c14dc660",
        "author": "Wankai Zhang",
        "date": "2014-08-29T17:31:04+08:00",
        "message": "delete unused struct Options",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_builder.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/be25ee44fe496bf7fa47bea710b99f81c14dc660"
    },
    {
        "hash": "0c26e76b28323a6ab10b0aae8832e6d76339cf24",
        "author": "Igor Canadi",
        "date": "2014-08-28T20:40:10-04:00",
        "message": "Merge pull request #237 from tdfischer/tdfischer/faster-timeout-test\n\ntest: db: fix test to have a smaller timeout for when it runs on faster ...",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0c26e76b28323a6ab10b0aae8832e6d76339cf24"
    },
    {
        "hash": "2a8faf797cf4f5e6899cdbf2b0fc7652e096ffed",
        "author": "Igor Canadi",
        "date": "2014-08-28T11:32:49-07:00",
        "message": "Compact SpatialDB as we go, not at the end",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2a8faf797cf4f5e6899cdbf2b0fc7652e096ffed"
    },
    {
        "hash": "d977e55596e71491e1d3bc803c37f479570f50e9",
        "author": "Igor Canadi",
        "date": "2014-08-28T13:06:28-04:00",
        "message": "Don't let other compactions run when manual compaction runs\n\nSummary:\nBased on discussions from t4982833. This is just a short-term fix, I plan to revamp manual compaction process as part of t4982812.\n\nAlso, I think we should schedule automatic compactions at the very end of manual compactions, not when we're done with one level. I made that change as part of this diff. Let me know if you disagree.\n\nTest Plan: make check for now\n\nReviewers: sdong, tnovak, yhchiang, ljin\n\nReviewed By: yhchiang\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D22401",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d977e55596e71491e1d3bc803c37f479570f50e9"
    },
    {
        "hash": "6b46f784346070b5ed9df2e2464b73b0bb8236d8",
        "author": "Igor Canadi",
        "date": "2014-08-28T09:42:31-04:00",
        "message": "Merge pull request #248 from wankai/master\n\nBlockBuilder typo improvement",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_builder.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6b46f784346070b5ed9df2e2464b73b0bb8236d8"
    },
    {
        "hash": "528a11c635c949ba45c6c404a839b07c04079b2e",
        "author": "Wankai Zhang",
        "date": "2014-08-28T13:37:10+08:00",
        "message": "Update block_builder.h\n\nmore c++11 way noncopyable and keep parameter's name of constructor consistent",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_builder.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/528a11c635c949ba45c6c404a839b07c04079b2e"
    },
    {
        "hash": "536e9973e30d70fd510e5ab6e423ef75248ed582",
        "author": "Igor Canadi",
        "date": "2014-08-27T11:05:41-07:00",
        "message": "Remove assert in vector rep\n\nSummary: This assert makes Insert O(n^2) instead of O(n) in debug mode. Memtable insert is in the critical path. No need to assert uniqunnes of the key here, since we're adding a sequence number to it anyway.\n\nTest Plan: none\n\nReviewers: sdong, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D22443",
        "modified_files_count": 1,
        "modified_files": [
            "util/vectorrep.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/536e9973e30d70fd510e5ab6e423ef75248ed582"
    },
    {
        "hash": "1913ce27b96b1c2052bfbafd218f592c03830f67",
        "author": "Igor Canadi",
        "date": "2014-08-27T08:48:31-07:00",
        "message": "more concurrent flushes in SpatialDB",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1913ce27b96b1c2052bfbafd218f592c03830f67"
    },
    {
        "hash": "808e80936663042100eb7c333f31523d2ca4a026",
        "author": "Igor Canadi",
        "date": "2014-08-27T07:56:10-07:00",
        "message": "Adjust SpatialDB column family options",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/808e80936663042100eb7c333f31523d2ca4a026"
    },
    {
        "hash": "0c39f54dfb62f00dbef512d7def946b55c3cf025",
        "author": "Igor Canadi",
        "date": "2014-08-26T19:23:09-07:00",
        "message": "Use Vector memtable when bulk loading SpatialDB",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0c39f54dfb62f00dbef512d7def946b55c3cf025"
    },
    {
        "hash": "d9c0785812ee5302938fce13d44a40173806b988",
        "author": "Igor Canadi",
        "date": "2014-08-26T15:28:36-04:00",
        "message": "Fix assertion in PosixRandomAccessFile\n\nSummary:\nSee https://github.com/facebook/rocksdb/issues/244#issuecomment-53372297\nAlso see this: https://github.com/facebook/rocksdb/blob/master/util/env_posix.cc#L1075\n\nTest Plan: compiles\n\nReviewers: yhchiang, ljin, sdong\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D22419",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d9c0785812ee5302938fce13d44a40173806b988"
    },
    {
        "hash": "bda6f3363dfd6cb7122182c6da6ccabd92a52b15",
        "author": "Lei Jin",
        "date": "2014-08-26T09:57:25-07:00",
        "message": "fix valgrind error in c_test caused by BlockBasedTableOptions\n\nSummary:\nIt was creating BlockBasedTableOptions object in a loop without calling\ndestroy()\n\nTest Plan: valgrind ./c_test --leak-check=full --show-reachable=yes\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D22431",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bda6f3363dfd6cb7122182c6da6ccabd92a52b15"
    },
    {
        "hash": "0db6b028e7af37868f042a11d346b08790636d80",
        "author": "Torrie Fischer",
        "date": "2014-08-26T09:38:45-07:00",
        "message": "Update timeout to 50ms instead of 3.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0db6b028e7af37868f042a11d346b08790636d80"
    },
    {
        "hash": "17b54aea530cdc49897ecd96d5086b71b5775b32",
        "author": "Igor Canadi",
        "date": "2014-08-24T10:54:04-04:00",
        "message": "Merge pull request #243 from andybons/patch-1\n\nAdd missing include to use std::unique_ptr",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/compaction_filter.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/17b54aea530cdc49897ecd96d5086b71b5775b32"
    },
    {
        "hash": "050869177e4c610e24be3a09766e7300526d8528",
        "author": "Andrew Bonventre",
        "date": "2014-08-23T13:02:21-04:00",
        "message": "Add missing include to use std::unique_ptr\n\nThis was causing issues when including this header from another file.",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/compaction_filter.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/050869177e4c610e24be3a09766e7300526d8528"
    },
    {
        "hash": "42ea79520937afd641a948cb16978b2488ab5a31",
        "author": "Igor Canadi",
        "date": "2014-08-22T11:32:40-07:00",
        "message": "Fix concurrency issue in CompactionPicker\n\nSummary:\nI am currently working on a project that uses RocksDB. While debugging some perf issues, I came up across interesting compaction concurrency issue. Namely, I had 15 idle threads and a good comapction to do, but CompactionPicker returned \"Compaction nothing to do\". Here's how Internal stats looked:\n\n    2014/08/22-08:08:04.551982 7fc7fc3f5700 ------- DUMPING STATS -------\n    2014/08/22-08:08:04.552000 7fc7fc3f5700\n    ** Compaction Stats [default] **\n    Level   Files   Size(MB) Score Read(GB)  Rn(GB) Rnp1(GB) Write(GB) Wnew(GB) RW-Amp W-Amp Rd(MB/s) Wr(MB/s)  Rn(cnt) Rnp1(cnt) Wnp1(cnt) Wnew(cnt)  Comp(sec) Comp(cnt) Avg(sec) Stall(sec) Stall(cnt) Avg(ms)\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n      L0     7/5        353   1.0      0.0     0.0      0.0       2.3      2.3    0.0   0.0      0.0      9.4        0         0         0         0        247        46    5.359       8.53          1 8526.25\n      L1     2/2         86   1.3      2.6     1.9      0.7       2.6      1.9    2.7   1.3     24.3     24.0       39        19        71        52        109        11    9.938       0.00          0    0.00\n      L2    26/0        833   1.3      5.7     1.7      4.0       5.2      1.2    6.3   3.0     15.6     14.2       47       112       147        35        373        44    8.468       0.00          0    0.00\n      L3    12/0        505   0.1      0.0     0.0      0.0       0.0      0.0    0.0   0.0      0.0      0.0        0         0         0         0          0         0    0.000       0.00          0    0.00\n     Sum    47/7       1778   0.0      8.3     3.6      4.6      10.0      5.4    8.1   4.4     11.6     14.1       86       131       218        87        728       101    7.212       8.53          1 8526.25\n     Int     0/0          0   0.0      2.4     0.8      1.6       2.7      1.2   11.5   6.1     12.0     13.6       20        43        63        20        203        23    8.845       0.00          0    0.00\n    Flush(GB): accumulative 2.266, interval 0.444\n    Stalls(secs): 0.000 level0_slowdown, 0.000 level0_numfiles, 8.526 memtable_compaction, 0.000 leveln_slowdown_soft, 0.000 leveln_slowdown_hard\n    Stalls(count): 0 level0_slowdown, 0 level0_numfiles, 1 memtable_compaction, 0 leveln_slowdown_soft, 0 leveln_slowdown_hard\n\n    ** DB Stats **\n    Uptime(secs): 336.8 total, 60.4 interval\n    Cumulative writes: 61584000 writes, 6480589 batches, 9.5 writes per batch, 1.39 GB user ingest\n    Cumulative WAL: 0 writes, 0 syncs, 0.00 writes per sync, 0.00 GB written\n    Interval writes: 11235257 writes, 1175050 batches, 9.6 writes per batch, 259.9 MB user ingest\n    Interval WAL: 0 writes, 0 syncs, 0.00 writes per sync, 0.00 MB written\n\nTo see what happened, go here: https://github.com/facebook/rocksdb/blob/47b452cfcf9b1487d41f886a98bc0d6f95587e90/db/compaction_picker.cc#L430\n* The for loop started with level 1, because it has the worst score.\n* PickCompactionBySize on L429 returned nullptr because all files were being compacted\n* ExpandWhileOverlapping(c) returned true (because that's what it does when it gets nullptr!?)\n* for loop break-ed, never trying compactions for level 2 :( :(\n\nThis bug was present at least since January. I have no idea how we didn't find this sooner.\n\nTest Plan:\nUnit testing compaction picker is hard. I tested this by running my service and observing L0->L1 and L2->L3 compactions in parallel. However, for long-term, I opened the task #4968469. @yhchiang is currently refactoring CompactionPicker, hopefully the new version will be unit-testable ;)\n\nHere's how my compactions look like after the patch:\n\n    2014/08/22-08:50:02.166699 7f3400ffb700 ------- DUMPING STATS -------\n    2014/08/22-08:50:02.166722 7f3400ffb700\n    ** Compaction Stats [default] **\n    Level   Files   Size(MB) Score Read(GB)  Rn(GB) Rnp1(GB) Write(GB) Wnew(GB) RW-Amp W-Amp Rd(MB/s) Wr(MB/s)  Rn(cnt) Rnp1(cnt) Wnp1(cnt) Wnew(cnt)  Comp(sec) Comp(cnt) Avg(sec) Stall(sec) Stall(cnt) Avg(ms)\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n      L0     8/5        404   1.5      0.0     0.0      0.0       4.3      4.3    0.0   0.0      0.0      9.6        0         0         0         0        463        88    5.260       0.00          0    0.00\n      L1     2/2         60   0.9      4.8     3.9      0.8       4.7      3.9    2.4   1.2     23.9     23.6       80        23       131       108        204        19   10.747       0.00          0    0.00\n      L2    23/3        697   1.0     11.6     3.5      8.1      10.9      2.8    6.4   3.1     17.7     16.6       95       242       317        75        669        92    7.268       0.00          0    0.00\n      L3    58/14      2207   0.3      6.2     1.6      4.6       5.9      1.3    7.4   3.6     14.6     13.9       43       121       159        38        436        36   12.106       0.00          0    0.00\n     Sum    91/24      3368   0.0     22.5     9.1     13.5      25.8     12.4   11.2   6.0     13.0     14.9      218       386       607       221       1772       235    7.538       0.00          0    0.00\n     Int     0/0          0   0.0      3.2     0.9      2.3       3.6      1.3   15.3   8.0     12.4     13.7       24        66        89        23        266        27    9.838       0.00          0    0.00\n    Flush(GB): accumulative 4.336, interval 0.444\n    Stalls(secs): 0.000 level0_slowdown, 0.000 level0_numfiles, 0.000 memtable_compaction, 0.000 leveln_slowdown_soft, 0.000 leveln_slowdown_hard\n    Stalls(count): 0 level0_slowdown, 0 level0_numfiles, 0 memtable_compaction, 0 leveln_slowdown_soft, 0 leveln_slowdown_hard\n\n    ** DB Stats **\n    Uptime(secs): 577.7 total, 60.1 interval\n    Cumulative writes: 116960736 writes, 11966220 batches, 9.8 writes per batch, 2.64 GB user ingest\n    Cumulative WAL: 0 writes, 0 syncs, 0.00 writes per sync, 0.00 GB written\n    Interval writes: 11643735 writes, 1206136 batches, 9.7 writes per batch, 269.2 MB user ingest\n    Interval WAL: 0 writes, 0 syncs, 0.00 writes per sync, 0.00 MB written\n\nYay for concurrent L0->L1 and L2->L3 compactions!\n\nReviewers: sdong, yhchiang, ljin\n\nReviewed By: yhchiang\n\nSubscribers: yhchiang, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D22305",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/42ea79520937afd641a948cb16978b2488ab5a31"
    },
    {
        "hash": "bb530c0f47e5ab38742d3128f8dbb7e7fc821c1d",
        "author": "Siying Dong",
        "date": "2014-08-21T18:16:15-07:00",
        "message": "Merge pull request #240 from ShaoYuZhang/master\n\nFix compilation issue on OSX",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_reader_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bb530c0f47e5ab38742d3128f8dbb7e7fc821c1d"
    },
    {
        "hash": "f76eda74d6f6e0f527eb93abacbc4ca5c0aba2ea",
        "author": "Shao Yu Zhang",
        "date": "2014-08-21T18:11:33-07:00",
        "message": "Fix compilation issue on OSX",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_reader_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f76eda74d6f6e0f527eb93abacbc4ca5c0aba2ea"
    },
    {
        "hash": "47b452cfcf9b1487d41f886a98bc0d6f95587e90",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-08-20T17:05:29-07:00",
        "message": "Fix the error of c_test.c\n\nSummary:\nFix the error of c_test.c\n\nTest Plan:\nmake c_test\n./c_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/47b452cfcf9b1487d41f886a98bc0d6f95587e90"
    },
    {
        "hash": "562b7a1f28d3f4c4326b55771629a565cbf0e95e",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-08-20T16:33:25-07:00",
        "message": "Add missing implementaiton of SanitizeDBOptions in simple_table_db_test.cc\n\nSummary:\nAdd missing implementaiton of SanitizeDBOptions in simple_table_db_test.cc\n\nTest Plan:\nmake simple_table_db_test.cc",
        "modified_files_count": 1,
        "modified_files": [
            "db/simple_table_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/562b7a1f28d3f4c4326b55771629a565cbf0e95e"
    },
    {
        "hash": "e173bf9c19a6db054c231faf39f1faa74fc2bcb0",
        "author": "Jonah Cohen",
        "date": "2014-08-20T13:52:03-07:00",
        "message": "Eliminate VersionSet memory leak\n\nSummary:\nManifestDumpCommand::DoCommand was allocating a VersionSet and never\nfreeing it.\n\nTest Plan: make\n\nReviewers: igor\n\nReviewed By: igor\n\nDifferential Revision: https://reviews.facebook.net/D22221",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e173bf9c19a6db054c231faf39f1faa74fc2bcb0"
    },
    {
        "hash": "01cbdd2aae8f998e3e532dec06f0f373a6cff719",
        "author": "Igor Canadi",
        "date": "2014-08-20T11:14:01-07:00",
        "message": "Optimize storage parameters for spatialDB\n\nSummary: We need to start compression at level 1, while OptimizeForLevelComapaction() only sets up rocksdb to start compressing at level 2. I also adjusted some other things.\n\nTest Plan: compiles\n\nReviewers: yinwang\n\nReviewed By: yinwang\n\nDifferential Revision: https://reviews.facebook.net/D22203",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/01cbdd2aae8f998e3e532dec06f0f373a6cff719"
    },
    {
        "hash": "045575ad0cf7a957ee6b8fe4e77b588b18a11935",
        "author": "sdong",
        "date": "2014-08-19T14:58:15-07:00",
        "message": "Add CuckooHash table format to table_reader_bench\n\nSummary: Make table_reader_bench cover all the three table formats.\n\nTest Plan: Run it using three options\n\nReviewers: radheshyamb, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D22137",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_reader_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/045575ad0cf7a957ee6b8fe4e77b588b18a11935"
    },
    {
        "hash": "7c5173d27f4432fe7799f5fc7a85f857b61a3d6b",
        "author": "Torrie Fischer",
        "date": "2014-08-19T13:45:12-07:00",
        "message": "test: db: fix test to have a smaller timeout for when it runs on faster hardware",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7c5173d27f4432fe7799f5fc7a85f857b61a3d6b"
    },
    {
        "hash": "6929b08616613fb87638c2ffa2682ef5d8fd54dd",
        "author": "Igor Canadi",
        "date": "2014-08-19T09:52:54-04:00",
        "message": "Remove BitStream* tests",
        "modified_files_count": 1,
        "modified_files": [
            "util/coding_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6929b08616613fb87638c2ffa2682ef5d8fd54dd"
    },
    {
        "hash": "162b8151f1b7d08578429643d202a7b28f535ba4",
        "author": "Radheshyam Balasundaram",
        "date": "2014-08-18T18:15:01-07:00",
        "message": "Adding Column Family support in db_bench.\n\nSummary:\nAdding num_column_families flag. Adding support for column families in DoWrite and ReadRandom methods.\n[Igor, please let me know if this approach sounds good. I shall add it to other methods too.]\n\nTest Plan: Ran fillseq on 1M keys and 10 Column families and ran readrandom.\n\nReviewers: sdong, yhchiang, igor, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D21387",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/162b8151f1b7d08578429643d202a7b28f535ba4"
    },
    {
        "hash": "68eed8c9f0701e7a3ce0444310b1d381e086df2d",
        "author": "sdong",
        "date": "2014-08-18T12:02:02-07:00",
        "message": "Bump up version\n\nSummary: Bump up version after we've cut 3.4\n\nTest Plan: N/A\n\nReviewers: yhchiang, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb, dhruba, igor\n\nDifferential Revision: https://reviews.facebook.net/D22047",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/68eed8c9f0701e7a3ce0444310b1d381e086df2d"
    },
    {
        "hash": "36e759d19969e89912f35135018723229acc6755",
        "author": "Radheshyam Balasundaram",
        "date": "2014-08-18T11:59:38-07:00",
        "message": "Adding Cuckoo Table SST option to db_bench\n\nSummary: Adding flags to use cuckoo table SST in db_bench.cc\n\nTest Plan: Ran benchmark with fillseq and readrandom\n\nReviewers: sdong, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D21729",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/36e759d19969e89912f35135018723229acc6755"
    },
    {
        "hash": "a6fd14c881fa72a7bfeb1e02ecd454a1e164597b",
        "author": "Igor Canadi",
        "date": "2014-08-18T11:08:51-07:00",
        "message": "Fix valgrind error in c_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a6fd14c881fa72a7bfeb1e02ecd454a1e164597b"
    },
    {
        "hash": "c7037153c3dcceaf50ba9ba05fee4aaee43f36ce",
        "author": "Lei Jin",
        "date": "2014-08-18T10:23:18-07:00",
        "message": "attempt to fix auto_roll_logger_test\n\nSummary:\nauto_roll_logger_test fails from time to time. I wasn't able to repro\nthe issue but by looking at the code, it seems like the initial ctime_\nvalue can be set to the boundary of the second so it may still have a\nchance to get rolled when interval is set to 1 second.\n\n```\nutil/auto_roll_logger_test.cc:120: failed: 118 > 708\n==19470== Syscall param msync(start) points to unaddressable byte(s)\n==19470==    at 0x4E46CE0: __msync_nocancel (in\n/usr/local/fbcode/gcc-4.8.1-glibc-2.17/lib/libpthread-2.17.so)\n==19470==    by 0x584EFB: access_mem (Ginit.c:137)\n==19470==    by 0x5834E3: _ULx86_64_access_reg (libunwind_i.h:162)\n==19470==    by 0x585601: apply_reg_state (Gparser.c:742)\n==19470==    by 0x5866BE: _ULx86_64_dwarf_find_save_locs (Gparser.c:883)\n==19470==    by 0x584550: _ULx86_64_dwarf_step (Gstep.c:34)\n==19470==    by 0x583653: _ULx86_64_step (Gstep.c:71)\n==19470==    by 0x583FD2: _ULx86_64_tdep_trace (Gtrace.c:217)\n==19470==    by 0x5831C3: backtrace (backtrace.c:69)\n\nTest Plan: ./auto_roll_logger_test\n\nReviewers: sdong, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D21951",
        "modified_files_count": 1,
        "modified_files": [
            "util/auto_roll_logger_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c7037153c3dcceaf50ba9ba05fee4aaee43f36ce"
    },
    {
        "hash": "59a2763d5c4de0971028b3547887cbf88b8d91d7",
        "author": "Jonah Cohen",
        "date": "2014-08-14T17:01:20-07:00",
        "message": "Fix typo huage => huge\n\nTest Plan: Inspection\n\nReviewers: sdong\n\nReviewed By: sdong\n\nDifferential Revision: https://reviews.facebook.net/D21891",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/59a2763d5c4de0971028b3547887cbf88b8d91d7"
    },
    {
        "hash": "f611935e9a4ba0e0cfa23169563a477e87741cca",
        "author": "Jonah Cohen",
        "date": "2014-08-14T14:56:11-07:00",
        "message": "Fix autovector iterator increment/decrement comments\n\nSummary: The prefix and postfix operators were mixed up in the autovector class.\n\nTest Plan: Inspection\n\nReviewers: sdong, kailiu\n\nReviewed By: kailiu\n\nDifferential Revision: https://reviews.facebook.net/D21873",
        "modified_files_count": 1,
        "modified_files": [
            "util/autovector.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f611935e9a4ba0e0cfa23169563a477e87741cca"
    },
    {
        "hash": "6c4c159b2c65fdbbe9ba4284e0fc4e29cc1c93fe",
        "author": "Feng Zhu",
        "date": "2014-08-14T09:59:41-07:00",
        "message": "fix_sst_dump_for_old_sst_format\n\nSummary:\n1. fix segment error when dumping old sst format (no properties nor stats)\n2. Enable dumpping old sst format\n\nTest Plan:\nGenerate block based sst file with \"properties\", and one with \"stats\" and one without neither.\nRead it using sst_dump\n\nReviewers: ljin, igor, yhchiang, dhruba, sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D21837",
        "modified_files_count": 1,
        "modified_files": [
            "tools/sst_dump.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6c4c159b2c65fdbbe9ba4284e0fc4e29cc1c93fe"
    },
    {
        "hash": "6a2be31f14ab99eb3429a31dee920a60ea0cd19f",
        "author": "Feng Zhu",
        "date": "2014-08-13T17:53:43-07:00",
        "message": "fix_valgrind_error_caused_in_db_info_dummper\n\nSummary: 1. add default value to FileType type, thus avoid valgrind error\n\nTest Plan: valgrind ./db_test\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D21807",
        "modified_files_count": 1,
        "modified_files": [
            "util/db_info_dummper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6a2be31f14ab99eb3429a31dee920a60ea0cd19f"
    },
    {
        "hash": "e91ebf1399841b06c9c37a6371c11d064cc2a2dc",
        "author": "Lei Jin",
        "date": "2014-08-13T15:58:31-07:00",
        "message": "print compaction_filter name in Options.Dump\n\nSummary:\nWas looking at an issue. All options are the same except\ncompaction_filter was missed from a newer package. Our option dump does\nnot capture that\n\nTest Plan: make release\n\nReviewers: sdong, igor, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D21765",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e91ebf1399841b06c9c37a6371c11d064cc2a2dc"
    },
    {
        "hash": "48081777f3ced2f315c9ba4807f6dfc9dd7c81e7",
        "author": "sdong",
        "date": "2014-08-12T18:14:27-07:00",
        "message": "Revert \"Include candidate files under options.db_log_dir in FindObsoleteFiles()\"\n\nThis reverts commit 54153ab07abcd9265a8f4d77d3e984d2932404d0.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/48081777f3ced2f315c9ba4807f6dfc9dd7c81e7"
    },
    {
        "hash": "0138b8eba8778b1a0ff28084f69def99a53d5583",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-08-12T17:35:09-07:00",
        "message": "Fixed compile errors (signed / unsigned comparison) in cuckoo_table_db_test on Mac\n\nSummary:\nFixed compile errors (signed / unsigned comparison) in cuckoo_table_db_test on Mac\n\nTest Plan:\nmake cuckoo_table_db_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/cuckoo_table_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0138b8eba8778b1a0ff28084f69def99a53d5583"
    },
    {
        "hash": "1562653ba09385789e9ba755e62c80fa6cde7451",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-08-12T17:26:47-07:00",
        "message": "Fixed a signed-unsigned comparison error in db_test\n\nSummary:\nFixed a signed-unsigned comparison error in db_test\n\nTest Plan:\nmake db_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1562653ba09385789e9ba755e62c80fa6cde7451"
    },
    {
        "hash": "2fa643466d3ce52050a8b71afd373d6fcc2f5670",
        "author": "Stanislau Hlebik",
        "date": "2014-08-12T12:13:13-07:00",
        "message": "Add scope guard\n\nSummary: Small change: replace mutex_.Lock/mutex_.Unlock() with scope guard\n\nTest Plan: make all check\n\nReviewers: igor, sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D21609",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2fa643466d3ce52050a8b71afd373d6fcc2f5670"
    },
    {
        "hash": "37c6740c383bb9a6ee2747b04f08bc77fcfa10c5",
        "author": "Lei Jin",
        "date": "2014-08-11T15:04:41-07:00",
        "message": "make statistics ToString function empty instead of pure virtual\n\nSummary: as title\n\nTest Plan: make release\n\nReviewers: yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D21549",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/statistics.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/37c6740c383bb9a6ee2747b04f08bc77fcfa10c5"
    },
    {
        "hash": "d3f2ec694f4fb6c7385a6eea943f6844244dd5c2",
        "author": "Feng Zhu",
        "date": "2014-08-11T10:47:52-07:00",
        "message": "check prefix_size when using hash search in db_bench\n\nSummary:\n1. Check prefix_size when enable use_hash_search in db_bench\n2. Remove include/statistics.h in db_bench\n\nTest Plan: ./db_bench --use_hash_search=1\n\nReviewers: ljin, yhchiang, igor, sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D21375",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d3f2ec694f4fb6c7385a6eea943f6844244dd5c2"
    },
    {
        "hash": "54153ab07abcd9265a8f4d77d3e984d2932404d0",
        "author": "sdong",
        "date": "2014-08-08T17:37:03-07:00",
        "message": "Include candidate files under options.db_log_dir in FindObsoleteFiles()\n\nSummary: In FindObsoleteFiles(), we don't scan db_log_dir. Add it.\n\nTest Plan: make all check\n\nReviewers: ljin, igor, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb, yhchiang\n\nDifferential Revision: https://reviews.facebook.net/D21429",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/54153ab07abcd9265a8f4d77d3e984d2932404d0"
    },
    {
        "hash": "4632239d1342566a22961fc7e63a1b12f0a80c1c",
        "author": "sdong",
        "date": "2014-08-08T12:28:36-07:00",
        "message": "Need to schedule compactions when manual compaction finishes\n\nSummary: If there is an outstanding compaction scheduled but at the time a manual compaction is triggered, the manual compaction will preempt. In the end of the manual compaction, we should try to schedule compactions to make sure those preempted ones are not skipped.\n\nTest Plan: make all check\n\nReviewers: yhchiang, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb, dhruba, igor\n\nDifferential Revision: https://reviews.facebook.net/D21321",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4632239d1342566a22961fc7e63a1b12f0a80c1c"
    },
    {
        "hash": "5e0868147d2d60428a3b9339a15e393149be5fa3",
        "author": "Igor Canadi",
        "date": "2014-08-08T10:24:00-07:00",
        "message": "Fix SIGSEGV in travis\n\nSummary:\nTravis build was failing a lot. For example see https://travis-ci.org/facebook/rocksdb/builds/31425845\n\nThis fixes it.\n\nAlso, please don't put any code after SignalAll :)\n\nTest Plan: no more SIGSEGV\n\nReviewers: yhchiang, sdong, ljin\n\nReviewed By: ljin\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D21417",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5e0868147d2d60428a3b9339a15e393149be5fa3"
    },
    {
        "hash": "894a77abdfd60bc610d72a6b7451cfefbf6e1b2e",
        "author": "Igor Canadi",
        "date": "2014-08-07T15:06:52-07:00",
        "message": "Fix leak in c_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/894a77abdfd60bc610d72a6b7451cfefbf6e1b2e"
    },
    {
        "hash": "323d6e3542f67cf63eb307fa59dae33595929185",
        "author": "Igor Canadi",
        "date": "2014-08-07T14:29:38-04:00",
        "message": "Fix c_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/323d6e3542f67cf63eb307fa59dae33595929185"
    },
    {
        "hash": "76dcf7eefd9645f9ece87587d2a016331ae4da73",
        "author": "sdong",
        "date": "2014-08-06T18:11:33-07:00",
        "message": "Minor: fix a format\n\nSummary: A format fixing\n\nTest Plan: N/A\n\nReviewers: ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D21255",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/76dcf7eefd9645f9ece87587d2a016331ae4da73"
    },
    {
        "hash": "02c402366613c106b79a84bb28a1ce56b9b43ed5",
        "author": "sdong",
        "date": "2014-08-05T11:33:56-07:00",
        "message": "Remove port::MemoryBarrier() from table_reader_bench\n\nSummary: port::MemoryBarrier() is not recommended to use outside of port. Remove it.\n\nTest Plan: run table_reader_bench\n\nReviewers: ljin, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D21075",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_reader_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/02c402366613c106b79a84bb28a1ce56b9b43ed5"
    },
    {
        "hash": "5e3d5c5f6efe52cf0bc1d60be75237f9c3a81dad",
        "author": "Igor Canadi",
        "date": "2014-08-01T16:50:40-04:00",
        "message": "Simplify SpatialIndexCursor\n\nSummary:\nSince we have enough memory to hold all primary keys loaded from spatial index, it is better if we first load all of them (store them in unordered_set for deduplication) and then query on primary key column family one by one.\n\nWe need to dedup all IDs, so we'll end up storing all of them in memory even with the current approach.\n\nTest Plan: ./spatial_db_test is happy\n\nReviewers: yinwang\n\nReviewed By: yinwang\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D20949",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5e3d5c5f6efe52cf0bc1d60be75237f9c3a81dad"
    },
    {
        "hash": "1903aa5cc730b3766abbde5a3b0d5147ec5b3ada",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-07-31T14:48:00-07:00",
        "message": "Fixed a warning / error in signed and unsigned comparison\n\nSummary:\nFixed the following compilation error detected in mac:\ndb/db_test.cc:2524:3: note: in instantiation of function template\n  specialization 'rocksdb::test::Tester::IsEq<unsigned long long, int>' requested here\n    ASSERT_EQ(int_num, 0);\n      ^\n\nTest Plan:\nmake",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1903aa5cc730b3766abbde5a3b0d5147ec5b3ada"
    },
    {
        "hash": "67dae255a97fbf2f1509203d77c4ec838b42aac9",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-07-31T14:22:21-07:00",
        "message": "Remove a check for merge operator in builder.cc\n\nSummary:\nPreviously, builder.cc has a check for merge operator which prevents\nRocksDB from crash when reopening a DB w/o properly specifying the merge\noperator.  However, currently we observed a memory leak on failing in\nRocksDB recovery.  This diff removes such check and let it crash instead of\ncausing memory leak for now before we have identified the real cause of\nthe memory leak.\n\nTest Plan: make all check\n\nReviewers: sdong\n\nSubscribers: ljin, igor\n\nDifferential Revision: https://reviews.facebook.net/D20913",
        "modified_files_count": 1,
        "modified_files": [
            "db/builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/67dae255a97fbf2f1509203d77c4ec838b42aac9"
    },
    {
        "hash": "2105ecac4d8f74fdf2e0b7514ed04269c9f4c176",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-07-31T11:20:49-07:00",
        "message": "Temporary remove the last test in merge_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2105ecac4d8f74fdf2e0b7514ed04269c9f4c176"
    },
    {
        "hash": "b0999011e2dddf1ff6d54dc4a76a03c3485f5c11",
        "author": "Feng Zhu",
        "date": "2014-07-30T23:11:59-07:00",
        "message": "use stack instead of heap memory in ReadBlockContents in some case\n\nSummary:\n  When compression is enabled, and blocksize is not too big, use the\n  space in stack to hold bytes read from block.\n\nBencmark:\nbase version: commit 8f09d53fd11a7debe1e48b73a192de3a458d37bf\n  malloc: 1.30% -> 0.98%\n  free: 1.49% -> 1.07%\n\nTest Plan:\n  make all check\n\nReviewers: ljin, yhchiang, dhruba, igor, sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D20679",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b0999011e2dddf1ff6d54dc4a76a03c3485f5c11"
    },
    {
        "hash": "2ea5e78af773e5523cd8b7ae884295ad641c700a",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-07-30T21:04:27-07:00",
        "message": "Merge pull request #217 from zxcvdavid/patch-1\n\nfix project name in the comments",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2ea5e78af773e5523cd8b7ae884295ad641c700a"
    },
    {
        "hash": "7ef7df005f5db71358f3f56c58134c8c97515928",
        "author": "Demon",
        "date": "2014-07-31T11:42:36+08:00",
        "message": "fix project name in the comments\n\nfix project name in the comments",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/c.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7ef7df005f5db71358f3f56c58134c8c97515928"
    },
    {
        "hash": "3215967205165c50d86b90327890a8f88b43802b",
        "author": "Stanislau Hlebik",
        "date": "2014-07-30T18:21:55-07:00",
        "message": "Fix readonly db\n\nSummary:\nDBImplReadOnly::CompactRange wasn't override DBImpl::CompactRange;\nthis can cause problem when using StackableDB inheritors like\nDbWithTtl.\nP. S. Thanks C++11 for override :)\n\nTest Plan: make all check\n\nReviewers: igor, sdong\n\nReviewed By: sdong\n\nSubscribers: yhchiang, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D20829",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl_readonly.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3215967205165c50d86b90327890a8f88b43802b"
    },
    {
        "hash": "e9269e6eceb927e5112eff12229ba3955f4b7684",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-07-30T17:25:11-07:00",
        "message": "Fixed a typo in the comment for merge operator.\n\nSummary:\nFixed a typo in the comment for merge operator.\n\nTest Plan:\nn/a",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e9269e6eceb927e5112eff12229ba3955f4b7684"
    },
    {
        "hash": "99e03bcbf1acc47b6b13fd3b8859a8bbc5fdd462",
        "author": "Igor Canadi",
        "date": "2014-07-30T09:32:47-07:00",
        "message": "Better comment for inplace_update_support\n\nSummary: See https://github.com/facebook/rocksdb/issues/215\n\nTest Plan: none\n\nReviewers: dhruba, sdong, ljin, yhchiang, nkg-\n\nReviewed By: nkg-\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D20769",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/99e03bcbf1acc47b6b13fd3b8859a8bbc5fdd462"
    },
    {
        "hash": "4a8f0c957ce8e0c3a7928256d1149c0fc3e67262",
        "author": "sdong",
        "date": "2014-07-25T17:27:57-07:00",
        "message": "Block::Iter::PrefixSeek() to have an extra check to filter out some false matches\n\nSummary:\nIn block based table's hash index checking, when looking for a key that doesn't exist, there is a high chance that a false block is returned because of hash bucket conflicts. In this revision, another check is done to filter out some of those cases: comparing previous key of the block boundary to see whether the target block is what we are looking for.\n\nIn a favored test setting (bloom filter disabled, 8 L0 files), I saw about 80% improvements. In a non-favored test setting (bloom filter enabled, files are all in L1, files are all cached), I see the performance penalty is less than 3%.\n\nTest Plan: make all check\n\nReviewers: haobo, ljin\n\nReviewed By: ljin\n\nSubscribers: wuj, leveldb, zagfox, yhchiang\n\nDifferential Revision: https://reviews.facebook.net/D20595",
        "modified_files_count": 1,
        "modified_files": [
            "table/block.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4a8f0c957ce8e0c3a7928256d1149c0fc3e67262"
    },
    {
        "hash": "28b367db15f444c172260b2247b4a782ba387049",
        "author": "Igor Canadi",
        "date": "2014-07-25T10:29:50-07:00",
        "message": "Initialize next_id",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/28b367db15f444c172260b2247b4a782ba387049"
    },
    {
        "hash": "c8e70e6bf862f589d2b38a95bac3f03206d44ba8",
        "author": "Igor Canadi",
        "date": "2014-07-24T17:31:23-07:00",
        "message": "Fix valgrind test",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c8e70e6bf862f589d2b38a95bac3f03206d44ba8"
    },
    {
        "hash": "f780f35b06189b34a60810107324df0cb99e4824",
        "author": "Igor Canadi",
        "date": "2014-07-24T16:45:26-04:00",
        "message": "Fix compile warning",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f780f35b06189b34a60810107324df0cb99e4824"
    },
    {
        "hash": "e5f6980d99da5d94889de97be7ed425a39a2d060",
        "author": "Igor Canadi",
        "date": "2014-07-23T16:50:31-04:00",
        "message": "Fix release compile error",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e5f6980d99da5d94889de97be7ed425a39a2d060"
    },
    {
        "hash": "00f56dfa28d703b251b6bcf4d8f39ee06612be68",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-07-23T10:31:32-07:00",
        "message": "Fixed a compile error in util/options_builder.cc\n\nSummary:\nFixed the following compile error by replacing pow by shift, as it computes\npower of 2.\n\nutil/options_builder.cc:133:14: error: no member named 'pow' in namespace 'std'\n        std::pow(2, std::max(0, std::min(3, level0_stop_writes_trigger -\n        ~~~~~^\n1 error generated.\nmake: *** [util/options_builder.o] Error 1\n\nTest Plan: make success in mac and linux\n\nReviewers: ljin, igor, sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D20475",
        "modified_files_count": 1,
        "modified_files": [
            "util/options_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/00f56dfa28d703b251b6bcf4d8f39ee06612be68"
    },
    {
        "hash": "0e1b4787ed76e99e0f39da227ccd80efc781d773",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-07-23T10:22:21-07:00",
        "message": "Fixed a bug in Compaction.cc where input_levels_ was not properly resized.\n\nSummary:\nFixed a bug in Compaction.cc where input_levels_ was not properly resized.\nWithout this fix, there would be invalid access in input_levels_ when more\nthan two levels are involved in one compaction run.\n\nThis fix will go to master instead of compaction branch.\n\nTest Plan: tested in compaction branch.\n\nReviewers: ljin, sdong, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D20481",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0e1b4787ed76e99e0f39da227ccd80efc781d773"
    },
    {
        "hash": "1053358a84e0a7efc4edc0767f3595023b3aedd9",
        "author": "Igor Canadi",
        "date": "2014-07-23T10:21:54-04:00",
        "message": "Bump the version",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1053358a84e0a7efc4edc0767f3595023b3aedd9"
    },
    {
        "hash": "2d3d63597a6913e7b8a491661eb2a0555c2ee2a2",
        "author": "Igor Canadi",
        "date": "2014-07-22T15:35:07-04:00",
        "message": "Fix signed-unsigned compare error",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_builder_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2d3d63597a6913e7b8a491661eb2a0555c2ee2a2"
    },
    {
        "hash": "f6272e3055b11417a94b811ac07387b183e73f34",
        "author": "Radheshyam Balasundaram",
        "date": "2014-07-22T09:49:04-07:00",
        "message": "Fixing memory leaks in cuckoo_table_builder_test\n\nSummary: Fixes some memory leaks in cuckoo_builder_test.cc. This also fixed broken valgrind_check tests\n\nTest Plan:\nmake valgrind_check\n./cuckoo_builder_test\nCurrently running make check all. I shall update once it is done.\n\nReviewers: ljin, sdong, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D20385",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_builder_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f6272e3055b11417a94b811ac07387b183e73f34"
    },
    {
        "hash": "50c2dcb78ff8701c57bb62303d6a38c1e2b96622",
        "author": "Feng Zhu",
        "date": "2014-07-21T12:01:40-07:00",
        "message": "add options.block_restart_interval in db_bench\n\nSummary:\n  Add block_restart_interval in db_bench, default value 16\n\nTest Plan:\n  make\n\nReviewers: sdong\n\nReviewed By: sdong\n\nDifferential Revision: https://reviews.facebook.net/D20331",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/50c2dcb78ff8701c57bb62303d6a38c1e2b96622"
    },
    {
        "hash": "9c0d84d240ceab1cfc27a72a32e5fa632d93b0b9",
        "author": "Lei Jin",
        "date": "2014-07-21T11:03:16-07:00",
        "message": "improve comments for CrateRateLimiter()\n\nSummary:\nSuggested by @dhruba from the other diff, here is the improved\ncomments for parameters of the function\n\nTest Plan: none\n\nReviewers: dhruba, sdong, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19623",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9c0d84d240ceab1cfc27a72a32e5fa632d93b0b9"
    },
    {
        "hash": "80a94d05174ed2ae6a387825cf33466d9cce7c8b",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-07-21T09:19:28-07:00",
        "message": "[Java] Fixed the Java compilation error caused by PlainTableFactory API change.\n\nSummary: Fixed the Java compilation error caused by PlainTableFactory API change.\n\nTest Plan:\nmake rocksdbjava\nmake jdb_bench\ncd java;./jdb_bench.sh\n\nReviewers: sdong, ljin, ankgup87, swapnilghike, zzbennett, rsumbaly, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D20295",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/table.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/80a94d05174ed2ae6a387825cf33466d9cce7c8b"
    },
    {
        "hash": "aac941b3f0fe5a6feed81d0c8101c96e941bc557",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-07-17T16:37:25-07:00",
        "message": "Fixed a signed and unsigned comparison in Compaction\n\nSummary:\nFixed a signed and unsigned comparison in Compaction\n\nTest Plan:\nmake db_test\nexport ROCKSDB_TESTS=Compaction\n./db_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aac941b3f0fe5a6feed81d0c8101c96e941bc557"
    },
    {
        "hash": "0d57e3ad7d0f17b06db20f70562d127f7d44d377",
        "author": "Radheshyam Balasundaram",
        "date": "2014-07-17T15:07:05-07:00",
        "message": "Guarding files_ attribute with #ifndef NDEBUG guard in FilePicker class.\n\nSummary: Adding guards to files_ attribute of FilePicker class. This attribute is used only in DEBUG mode. This fixes build of static_lib in mac.\n\nTest Plan:\nmake static_lib in mac\nmake check all in devserver\n\nReviewers: ljin, igor, sdong\n\nReviewed By: sdong\n\nDifferential Revision: https://reviews.facebook.net/D20163",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0d57e3ad7d0f17b06db20f70562d127f7d44d377"
    },
    {
        "hash": "bc6b2ab401252277a07bc0e3c962b5eda40a8266",
        "author": "Feng Zhu",
        "date": "2014-07-16T17:32:30-07:00",
        "message": "enable kHashSearch for blocktable in db_bench\n\nSummary:\n  add a flag called use_hash_search in db_bench\n\nTest Plan:\n  make all check\n  ./db_bench --use_hash_search=1\n\nReviewers: ljin, haobo, yhchiang, sdong\n\nReviewed By: sdong\n\nSubscribers: igor, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D20067",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bc6b2ab401252277a07bc0e3c962b5eda40a8266"
    },
    {
        "hash": "87895c62db1b50794e60dea7a146c8819442a29d",
        "author": "Feng Zhu",
        "date": "2014-07-16T16:56:49-07:00",
        "message": "fix bug in LOG for flush memtable\n\nSummary:\n  One line change to fix a bug in the LOG when flush memtable\n\nTest Plan:\n  NONE\n\nReviewers: sdong\n\nReviewed By: sdong\n\nDifferential Revision: https://reviews.facebook.net/D20049",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/87895c62db1b50794e60dea7a146c8819442a29d"
    },
    {
        "hash": "0418e66e2a7cb96924455b12032cdb954576f4ec",
        "author": "Radheshyam Balasundaram",
        "date": "2014-07-16T13:33:02-07:00",
        "message": "Refactoring Version::Get()\n\nSummary: Refactoring Version::Get() method to move file picker logic to a separate class.\n\nTest Plan: make check all\n\nReviewers: igor, sdong, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19713",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0418e66e2a7cb96924455b12032cdb954576f4ec"
    },
    {
        "hash": "1614284eff49f28c5320dba6905e8d66f760f096",
        "author": "Igor Canadi",
        "date": "2014-07-16T06:45:49-07:00",
        "message": "Fix compressed cache",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1614284eff49f28c5320dba6905e8d66f760f096"
    },
    {
        "hash": "dd6c444822f34239d3e80887b659112aa5b15307",
        "author": "sdong",
        "date": "2014-07-14T14:43:59-07:00",
        "message": "Improve Put()'s comment to indicate that the key is overwritten if existing\n\nSummary: As title\n\nTest Plan: Not needed for comment only.\n\nReviewers: yhchiang, ljin, MarkCallaghan\n\nReviewed By: MarkCallaghan\n\nSubscribers: xjin, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19887",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dd6c444822f34239d3e80887b659112aa5b15307"
    },
    {
        "hash": "d2a727c182338514af955bbcb1d92db4af83b41c",
        "author": "Igor Canadi",
        "date": "2014-07-14T09:06:38-07:00",
        "message": "BG -> GB",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d2a727c182338514af955bbcb1d92db4af83b41c"
    },
    {
        "hash": "591c2a3b4b14dc984500792c7ed90ac7ba832f3d",
        "author": "Igor Canadi",
        "date": "2014-07-14T07:56:07-07:00",
        "message": "[db stress] Don't drop column families if there's only 1",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/591c2a3b4b14dc984500792c7ed90ac7ba832f3d"
    },
    {
        "hash": "ee6b35e55a9236166418c5758d2186c718289210",
        "author": "Igor Canadi",
        "date": "2014-07-14T09:56:52-04:00",
        "message": "Fix mac compile\n\nSummary: We should use PRIu64 instead of \"%lu\" for portability\n\nTest Plan: compiles now\n\nReviewers: ljin, dhruba\n\nReviewed By: dhruba\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19809",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ee6b35e55a9236166418c5758d2186c718289210"
    },
    {
        "hash": "5ff6633588be1f7b0d0857941a0f9fe4ed5366b3",
        "author": "Igor Canadi",
        "date": "2014-07-10T13:19:47-07:00",
        "message": "Fix mac compile",
        "modified_files_count": 1,
        "modified_files": [
            "util/rate_limiter_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5ff6633588be1f7b0d0857941a0f9fe4ed5366b3"
    },
    {
        "hash": "536f4b31a624b2230f070b74b7049161e7fe54b3",
        "author": "Igor Canadi",
        "date": "2014-07-10T09:52:46-07:00",
        "message": "Add missing DB functions to DocumentDB",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/document/document_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/536f4b31a624b2230f070b74b7049161e7fe54b3"
    },
    {
        "hash": "8a7d1fe61652f608cb0b13d815962519b1a49cee",
        "author": "Lei Jin",
        "date": "2014-07-09T22:46:15-07:00",
        "message": "disable rate limiter test\n\nSummary:\nThe test is not stable because it relies on disk and only runs for a\nshort period of time. So misisng a compaction/flush would greatly affect\nthe rate. I am disabling it for now. What do you guys think?\n\nTest Plan: make\n\nReviewers: yhchiang, igor, sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19599",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8a7d1fe61652f608cb0b13d815962519b1a49cee"
    },
    {
        "hash": "0a4d930264d0ea9252438480c629d94731312339",
        "author": "Ankit Gupta",
        "date": "2014-07-09T09:09:08-07:00",
        "message": "Caching methodId and fieldId is fine: v2",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/portal.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0a4d930264d0ea9252438480c629d94731312339"
    },
    {
        "hash": "b6caaea9d3228cb5f2efffb184069e38179b6ba4",
        "author": "Ankit Gupta",
        "date": "2014-07-09T09:06:40-07:00",
        "message": "Caching methodId and fieldId is fine",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/portal.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b6caaea9d3228cb5f2efffb184069e38179b6ba4"
    },
    {
        "hash": "ef1aad97f9845335617ed0f4224c05a240687ee6",
        "author": "Lei Jin",
        "date": "2014-07-08T15:29:13-07:00",
        "message": "fix one more internal_stats issue\n\nSummary: stall count is wrong\n\nTest Plan: make release\n\nReviewers: sdong, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19539",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ef1aad97f9845335617ed0f4224c05a240687ee6"
    },
    {
        "hash": "73d71470966b2681e802a9edcc81094b0a196d3c",
        "author": "Lei Jin",
        "date": "2014-07-08T15:15:00-07:00",
        "message": "make rate limiter test more reliable\n\nSummary:\nRandomize keys so that compaction actually happens.\nChange the config so that compaction happens more aggressively.\nThe test takes longer time, but the results are more stable shown by\niostat\n\nTest Plan: ran it\n\nReviewers: igor, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19533",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/73d71470966b2681e802a9edcc81094b0a196d3c"
    },
    {
        "hash": "8a9cc7885c62b549ef74f7886e928012c05abe86",
        "author": "Lei Jin",
        "date": "2014-07-08T12:48:10-07:00",
        "message": "report correct interval amplification\n\nSummary: as title\n\nTest Plan: make release\n\nReviewers: sdong, yhchiang, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19515",
        "modified_files_count": 1,
        "modified_files": [
            "db/internal_stats.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8a9cc7885c62b549ef74f7886e928012c05abe86"
    },
    {
        "hash": "b278ae8e50466e8073a1754a506145df5bb27c72",
        "author": "Lei Jin",
        "date": "2014-07-08T11:40:42-07:00",
        "message": "Apply fractional cascading in ForwardIterator::Seek()\n\nSummary:\nUse search hint to reduce FindFile range thus avoid comparison\nFor a small DB with 50M keys, perf_context counter shows it reduces\ncomparison from 2B to 1.3B for a 15-minute run. No perf change was\nobserved for 1 seek thread, but quite good improvement was seen for 32\nseek threads, when CPU was busy.\nwill post detail results when ready\n\nTest Plan: db_bench and db_test\n\nReviewers: haobo, sdong, dhruba, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18879",
        "modified_files_count": 1,
        "modified_files": [
            "db/forward_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b278ae8e50466e8073a1754a506145df5bb27c72"
    },
    {
        "hash": "db1a10e9b85506c7399e7801cb43c19e1e60c48d",
        "author": "Igor Canadi",
        "date": "2014-07-08T08:51:41-07:00",
        "message": "Merge pull request #198 from rdallman/cf-compact-range\n\nC API: bugfix column_family_compact_range",
        "modified_files_count": 1,
        "modified_files": [
            "db/c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/db1a10e9b85506c7399e7801cb43c19e1e60c48d"
    },
    {
        "hash": "e9b18b6b89a46fa9657e8bee3bea2b2ad074f7ed",
        "author": "Reed Allman",
        "date": "2014-07-07T21:48:49-07:00",
        "message": "C API: bugfix column_family_comact_range",
        "modified_files_count": 1,
        "modified_files": [
            "db/c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e9b18b6b89a46fa9657e8bee3bea2b2ad074f7ed"
    },
    {
        "hash": "4216ca36aeb358f5558e5c90faa0470a8ae8968d",
        "author": "Ankit Gupta",
        "date": "2014-07-07T21:45:02-07:00",
        "message": "Class IDs and method IDs should not be cached",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/portal.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4216ca36aeb358f5558e5c90faa0470a8ae8968d"
    },
    {
        "hash": "01159aa80277ff9712f51658382b2dfcf3e8855e",
        "author": "sdong",
        "date": "2014-07-07T17:02:57-07:00",
        "message": "stackable_db: add default function for GetLiveFilesMetaData()\n\nSummary: stackable_db doesn't have GetLiveFilesMetaData() implemented. Add it\n\nTest Plan: make all check\n\nReviewers: yhchiang, ljin, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19491",
        "modified_files_count": 1,
        "modified_files": [
            "include/utilities/stackable_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/01159aa80277ff9712f51658382b2dfcf3e8855e"
    },
    {
        "hash": "4adf64e068367c661acdb19b103e91496ad91cb6",
        "author": "Igor Canadi",
        "date": "2014-07-07T14:54:11-07:00",
        "message": "Fix compile issue",
        "modified_files_count": 1,
        "modified_files": [
            "db/c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4adf64e068367c661acdb19b103e91496ad91cb6"
    },
    {
        "hash": "13a130cc00b8e7cb1f235aa4d954d4c5cfce3d92",
        "author": "Evan Shaw",
        "date": "2014-07-08T08:12:36+12:00",
        "message": "C API: Add test for compaction filter factories\n\nAlso refactored the compaction filter tests to share some code and ensure that\noptions were getting reset so future test results aren't confused.",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/13a130cc00b8e7cb1f235aa4d954d4c5cfce3d92"
    },
    {
        "hash": "0bf5589c746342cde6a1016436775ebe569f2c1b",
        "author": "Evan Shaw",
        "date": "2014-07-08T08:11:01+12:00",
        "message": "Fix compaction_filter.h typos",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/compaction_filter.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0bf5589c746342cde6a1016436775ebe569f2c1b"
    },
    {
        "hash": "97bfcd6a16b0684e8eeec1d3db32a72a14dca858",
        "author": "Ankit Gupta",
        "date": "2014-07-07T12:26:06-07:00",
        "message": "Update doc of options.cc",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/97bfcd6a16b0684e8eeec1d3db32a72a14dca858"
    },
    {
        "hash": "7b85c1e900a1e0f47c78ff1ddfa8ddd924715eaf",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-07-04T00:02:12-07:00",
        "message": "Improve SimpleWriteTimeoutTest to avoid false alarm.\n\nSummary:\nSimpleWriteTimeoutTest has two parts: 1) insert two large key/values\nto make memtable full and expect both of them are successful; 2) insert\nanother key / value and expect it to be timed-out.  Previously we also\nset a timeout in the first step, but this might sometimes cause\nfalse alarm.\n\nThis diff makes the first two writes run without timeout setting.\n\nTest Plan:\nexport ROCKSDB_TESTS=Time\nmake db_test\n\nReviewers: sdong, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19461",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7b85c1e900a1e0f47c78ff1ddfa8ddd924715eaf"
    },
    {
        "hash": "8d9a46fcd12850c9756a722bed52bdf9d9ab5916",
        "author": "Lei Jin",
        "date": "2014-07-03T23:13:08-07:00",
        "message": "initialize decoded_internal_key_valid\n\nSummary:\nReadInternalKey() will assign correct value anyway. Initialize it to\ntrue to suppress compiler error reported\nhttps://github.com/facebook/rocksdb/issues/186\n\nTest Plan: I cannot reproduce it but this is obvious\n\nReviewers: sdong, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19467",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_key_coding.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8d9a46fcd12850c9756a722bed52bdf9d9ab5916"
    },
    {
        "hash": "d33657a4a5ebba9d3aa2a896a67eaad8131773f0",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-07-03T17:19:17-07:00",
        "message": "Fixed a warning in release mode.\n\nSummary: Removed a variable that is only used in assertion check.\n\nTest Plan: make release\n\nReviewers: ljin, sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19455",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d33657a4a5ebba9d3aa2a896a67eaad8131773f0"
    },
    {
        "hash": "4203431e71ff9752f66bde116901592f8602d977",
        "author": "Igor Canadi",
        "date": "2014-07-03T23:03:24+02:00",
        "message": "Fix mac os compile error",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4203431e71ff9752f66bde116901592f8602d977"
    },
    {
        "hash": "d3f63f03adb664ae076253852015feca8e1f689b",
        "author": "Igor Canadi",
        "date": "2014-07-02T11:40:16+02:00",
        "message": "Fix 32-bit errors\n\nSummary: https://www.facebook.com/groups/rocksdb.dev/permalink/590438347721350/\n\nTest Plan: compiles\n\nReviewers: sdong, ljin, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19197",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d3f63f03adb664ae076253852015feca8e1f689b"
    },
    {
        "hash": "1d05006740bf8307fddf85a4b5f2a159bf85b35e",
        "author": "sdong",
        "date": "2014-07-01T18:54:50-07:00",
        "message": "Re-commit the correct part (WalDir) of the revision:\n\nCommit 6634844dba962b9a150646382f4d6531d1f2440b by sdong\nTwo small fixes in db_test\n\nSummary:\nTwo fixes:\n(1) WalDir to pick a directory under TmpDir to allow two tests running in parallel without impacting each other\n(2) kBlockBasedTableWithWholeKeyHashIndex is disabled by mistake (I assume). Enable it.\n\nTest Plan: ./db_test\n\nReviewers: yhchiang, ljin\n\nReviewed By: ljin\n\nSubscribers: nkg-, igor, dhruba, haobo, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19389",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1d05006740bf8307fddf85a4b5f2a159bf85b35e"
    },
    {
        "hash": "30b20604db38e1610cd0453f541406026a54b9f6",
        "author": "sdong",
        "date": "2014-07-01T17:41:38-07:00",
        "message": "Revert \"Two small fixes in db_test\"\n\nThis reverts commit 6634844dba962b9a150646382f4d6531d1f2440b.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/30b20604db38e1610cd0453f541406026a54b9f6"
    },
    {
        "hash": "6634844dba962b9a150646382f4d6531d1f2440b",
        "author": "sdong",
        "date": "2014-07-01T16:58:03-07:00",
        "message": "Two small fixes in db_test\n\nSummary:\nTwo fixes:\n(1) WalDir to pick a directory under TmpDir to allow two tests running in parallel without impacting each other\n(2) kBlockBasedTableWithWholeKeyHashIndex is disabled by mistake (I assume). Enable it.\n\nTest Plan: ./db_test\n\nReviewers: yhchiang, ljin\n\nReviewed By: ljin\n\nSubscribers: nkg-, igor, dhruba, haobo, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19389",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6634844dba962b9a150646382f4d6531d1f2440b"
    },
    {
        "hash": "c4018e771c7fd31fab6fa934a05cff4005bae9dc",
        "author": "Feng Zhu",
        "date": "2014-07-01T11:02:42-07:00",
        "message": "In tools/db_stress.cc, set proper value in NewHashSkipListRepFactory's bucket_size\n\nSummary:\n    Now that the arena is used to allocate space for hashskiplist's bucket. The bucket size\n    need to be set small enough to avoid \"should_flush_\" failure in memtable's assertion.\n\nTest Plan:\n    make all check\n\nReviewers: sdong\n\nReviewed By: sdong\n\nSubscribers: igor\n\nDifferential Revision: https://reviews.facebook.net/D19371",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c4018e771c7fd31fab6fa934a05cff4005bae9dc"
    },
    {
        "hash": "f5d4df1c02b8fdf004dbefe775dffaecbfef2a1b",
        "author": "Igor Canadi",
        "date": "2014-07-01T10:55:03+02:00",
        "message": "Fix compile error",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f5d4df1c02b8fdf004dbefe775dffaecbfef2a1b"
    },
    {
        "hash": "81c5d9890020f8207fc65c4509c35064280ad3e9",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-06-25T15:31:30-06:00",
        "message": "Fixed a comparison between signed and unsigned integers in options.cc\n\nSummary:\nFixed the following warning:\n\nutil/options.cc: In constructor ‘rocksdb::ColumnFamilyOptions::ColumnFamilyOptions(const rocksdb::Options&)’:\nutil/options.cc:157:58: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]\n   if (max_bytes_for_level_multiplier_additional.size() < num_levels) {\n                                                             ^\n\nTest Plan: make all check\n\nReviewers: haobo, sdong, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19293",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/81c5d9890020f8207fc65c4509c35064280ad3e9"
    },
    {
        "hash": "55531fd089cff39fcfedd54046f1d1a125857ee7",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-06-25T14:11:12-06:00",
        "message": "Fixed heap-buffer-overflow issue when Options.num_levels > 7.\n\nSummary:\nCurrently, when num_levels has been changed to > 7, internally\nit will not resize max_bytes_for_level_multiplier_additional.\nAs a result, max_bytes_for_level_multiplier_additional.size() will\nbe smaller than num_levels, which causes heap-buffer-overflow.\n\nTest Plan: make all check\n\nReviewers: haobo, sdong, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19275",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/55531fd089cff39fcfedd54046f1d1a125857ee7"
    },
    {
        "hash": "8898a0a0d123132fdcad196c06d352a5edf3b47f",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-06-24T19:22:11-06:00",
        "message": "Reorder the member variables of FileMetaData to improve cache locality.\n\nSummary:\nMove stats related member variables of FileMetaData to the bottom to\nimprove cache locality of normal DB operations.\n\nTest Plan: make\n\nReviewers: haobo, ljin, sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19287",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_edit.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8898a0a0d123132fdcad196c06d352a5edf3b47f"
    },
    {
        "hash": "faa8d21922b09988c86c75887cd7a49895120e25",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-06-24T15:29:28-06:00",
        "message": "Improve an assertion in RandomGenerator::Generate() in db_bench.\n\nSummary:\nRandomGenerator::Generate() currently has an assertion len < data_.size().\nHowever, it is actually fine to have len == data_.size().\nThis diff change the assertion to len <= data_.size().\n\nTest Plan:\nmake db_bench\n./db_bench\n\nReviewers: haobo, sdong, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19269",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/faa8d21922b09988c86c75887cd7a49895120e25"
    },
    {
        "hash": "82c31792d094ffcbaca6cbdf2c6d2f61a2a4af4d",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-06-23T18:51:00-06:00",
        "message": "Revert the default setting of InitFromCmdLineArgs().\n\nSummary:\nRevert the default setting of InitFromCmdLineArgs() as all the callers\ncurrently provide full set of arguments.\n\nTest Plan:\nmake reduce_levels_test\n./reduce_levels_test\n\nReviewers: haobo, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19257",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/82c31792d094ffcbaca6cbdf2c6d2f61a2a4af4d"
    },
    {
        "hash": "bf4b1528d8fdc8945175d72259d4c0ee45fdfe53",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-06-23T17:48:20-06:00",
        "message": "Fix compile error in reduce_levels_test.\n\nSummary:\nFixed the following compile error.\n    tools/reduce_levels_test.cc:89:31: error: no matching function for call to 'InitFromCmdLineArgs'\n      LDBCommand* level_reducer = LDBCommand::InitFromCmdLineArgs(args);\n                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    ./util/ldb_cmd.h:56:22: note: candidate function not viable: requires 3 arguments, but 1 was provided\n      static LDBCommand* InitFromCmdLineArgs(\n                         ^\n    ./util/ldb_cmd.h:62:22: note: candidate function not viable: requires 4 arguments, but 1 was provided\n      static LDBCommand* InitFromCmdLineArgs(\n                         ^\n    1 error generated.\n\nTest Plan:\nmake reduce_levels_test\n./reduce_levels_test\n\nReviewers: haobo, sdong, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19251",
        "modified_files_count": 1,
        "modified_files": [
            "tools/reduce_levels_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bf4b1528d8fdc8945175d72259d4c0ee45fdfe53"
    },
    {
        "hash": "e5e6f55bd1b691a48148b50e823f2150b8121051",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-06-23T17:19:53-06:00",
        "message": "Fix compile error caused in LDB tool\n\nSummary:\nFixed the following compile error.\n    tools/reduce_levels_test.cc:89:31: error: no matching function for call to 'InitFromCmdLineArgs'\n      LDBCommand* level_reducer = LDBCommand::InitFromCmdLineArgs(args);\n                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    ./util/ldb_cmd.h:56:22: note: candidate function not viable: requires 3 arguments, but 1 was provided\n      static LDBCommand* InitFromCmdLineArgs(\n                         ^\n    ./util/ldb_cmd.h:62:22: note: candidate function not viable: requires 4 arguments, but 1 was provided\n      static LDBCommand* InitFromCmdLineArgs(\n                         ^\n    1 error generated.\n\nTest Plan:\nmake reduce_levels_test\n./reduce_levels_test\n\nReviewers: haobo, ljin, sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19251",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e5e6f55bd1b691a48148b50e823f2150b8121051"
    },
    {
        "hash": "96663410b073bdea26e61d8549427e37a0512e11",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-06-23T17:09:24-06:00",
        "message": "Fix a rapidjson compile error in mac.\n\nSummary:\nThis diff fixes the following compilation error in mac.\n  ./third-party/rapidjson/reader.h:422:31: error: comparison of constant 256 with expression of type 'Ch' (aka 'char') is always true\n        [-Werror,-Wtautological-constant-out-of-range-compare]\n                                  if ((sizeof(Ch) == 1 || e < 256) && escape[(unsigned char)e])\n                                                          ~ ^ ~~~\n  1 error generated.\n\nTest Plan: make db_test\n\nReviewers: haobo, sdong, igor, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19245",
        "modified_files_count": 1,
        "modified_files": [
            "third-party/rapidjson/reader.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/96663410b073bdea26e61d8549427e37a0512e11"
    },
    {
        "hash": "3b0dc76699c895a4698602547fb474eeffff512e",
        "author": "Lei Jin",
        "date": "2014-06-23T13:23:02-07:00",
        "message": "db_bench: measure the real latency of write/delete\n\nSummary: as title\n\nTest Plan: make release\n\nReviewers: haobo, sdong, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19227",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3b0dc76699c895a4698602547fb474eeffff512e"
    },
    {
        "hash": "a1b5650a75230d4d615ef17c21ff757bdf78d3f9",
        "author": "Lei Jin",
        "date": "2014-06-23T10:46:16-07:00",
        "message": "db_bench: sanity check on compression ratio\n\nSummary: as requested by mark\n\nTest Plan: make release\n\nReviewers: sdong, haobo\n\nReviewed By: haobo\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19221",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a1b5650a75230d4d615ef17c21ff757bdf78d3f9"
    },
    {
        "hash": "583feae8dd9b1f700df7395bd1e168ccfcaf4cac",
        "author": "Igor Canadi",
        "date": "2014-06-20T15:22:11+02:00",
        "message": "fix valgrind test",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/document/json_document_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/583feae8dd9b1f700df7395bd1e168ccfcaf4cac"
    },
    {
        "hash": "558050939f4caf2106fabba26d46a8d4e78ee8f6",
        "author": "Igor Canadi",
        "date": "2014-06-20T12:02:37+02:00",
        "message": "Fix release compile",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/document/json_document.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/558050939f4caf2106fabba26d46a8d4e78ee8f6"
    },
    {
        "hash": "9fe87b17aacbe38242cc711991fee444a67b1d08",
        "author": "Igor Canadi",
        "date": "2014-06-20T10:36:48+02:00",
        "message": "Fix compile",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_reader_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9fe87b17aacbe38242cc711991fee444a67b1d08"
    },
    {
        "hash": "107e08baa7417697f595d3dd1dd364c89ed43351",
        "author": "Igor Canadi",
        "date": "2014-06-20T09:12:14+02:00",
        "message": "Use same sorting for all level 0 files\n\nSummary:\nWe decided that one of the long term goals is to unify level and universal compaction.\n\nAs a small first step, I'm unifying level 0 sorting methods.\n\nPreviously, we used to sort level 0 files in level compaction by file number and in universal compaction by sequence number.\n\nBut it turns out that in level compaction, sorting by file number is exactly the same as sorting by sequence number.\n\nTest Plan:\nRan make check with bunch of asserts to verify the sorting order is exactly the same.\nAlso, make check with this patch\n\nReviewers: haobo, yhchiang, ljin, dhruba, sdong\n\nReviewed By: sdong\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19131",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/107e08baa7417697f595d3dd1dd364c89ed43351"
    },
    {
        "hash": "4f5ccfd1796d34f80121b2a6772a230fc6e6ba1d",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-06-19T14:53:03-07:00",
        "message": "Fixed a potential write hang\n\nSummary:\nCurrently, when something badly happen in the DB::Write() while the write-queue\ncontains more than one element, the current design seems to forget to clean up\nthe queue as well as wake-up all the writers, this potentially makes rocksdb\nhang on writes.\n\nTest Plan: make all check\n\nReviewers: sdong, ljin, igor, haobo\n\nReviewed By: haobo\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19167",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4f5ccfd1796d34f80121b2a6772a230fc6e6ba1d"
    },
    {
        "hash": "1ec2d1c69d9efd14c7740d2b00c65254525e1f82",
        "author": "Lei Jin",
        "date": "2014-06-19T10:12:26-07:00",
        "message": "fix make shared_lib compilation error\n\nSummary: s/class ParsedInternalKey/struct ParsedInternalKey\n\nTest Plan: make shared_lib\n\nReviewers: igor, yhchiang, sdong, haobo\n\nReviewed By: haobo\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19173",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_key_coding.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1ec2d1c69d9efd14c7740d2b00c65254525e1f82"
    },
    {
        "hash": "5363eb8ad49dfec67203b1389ecaf17d398b4430",
        "author": "Evan Shaw",
        "date": "2014-06-19T21:46:58+12:00",
        "message": "Add a test for using compaction filters via the C API",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5363eb8ad49dfec67203b1389ecaf17d398b4430"
    },
    {
        "hash": "167738256f5345804a7d3f922ce6258dd47d1178",
        "author": "Haobo Xu",
        "date": "2014-06-19T01:37:21-07:00",
        "message": "[RocksDB] Fix unit test\n\nSummary: fix a bug in D19047, which caused  DBTest.RecoverDuringMemtableCompaction to fail.\n\nTest Plan: unit test\n\nReviewers: sdong, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19155",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_prefix_index.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/167738256f5345804a7d3f922ce6258dd47d1178"
    },
    {
        "hash": "9202d9b6257de423155a35003b1f46f7958b34ce",
        "author": "sdong",
        "date": "2014-06-12T11:03:03-07:00",
        "message": "Fix sst_dump for PlainTable\n\nSummary: sst_dump now doesn't work well for PlainTable. Not sure when it started, but this should fix it.\n\nTest Plan: Run sst_dump against a file that used to fail.\n\nReviewers: yhchiang, haobo, igor\n\nReviewed By: igor\n\nSubscribers: dhruba, ljin, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D19023",
        "modified_files_count": 1,
        "modified_files": [
            "tools/sst_dump.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9202d9b6257de423155a35003b1f46f7958b34ce"
    },
    {
        "hash": "88a1691a1e76e09c0e2eca8751281a4f90373753",
        "author": "sdong",
        "date": "2014-06-10T11:14:22-07:00",
        "message": "BlockBasedTable::PrefixMayMatch() to bloom setting to the beginning of the function\n\nSummary: In BlockBasedTable::PrefixMayMatch() we calculate prefix even if bloom is not config. Move the check before\n\nTest Plan: make all check\n\nReviewers: igor, ljin\n\nReviewed By: ljin\n\nSubscribers: wuj, leveldb, haobo, yhchiang, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D18993",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/88a1691a1e76e09c0e2eca8751281a4f90373753"
    },
    {
        "hash": "ee5a51e6cee1256b50ffe2271a257eb53eae4adf",
        "author": "sdong",
        "date": "2014-06-09T11:21:44-07:00",
        "message": "sst_dump: still try to print out table properties even if failing to read the file\n\nSummary: Even if the file is corrupted, table properties are usually available to print out. Now sst_dump would just fail without printing table properties. With this patch, table properties are still try to be printed out.\n\nTest Plan: run sst_dump against multiple scenarios\n\nReviewers: igor, yhchiang, ljin, haobo\n\nReviewed By: haobo\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18981",
        "modified_files_count": 1,
        "modified_files": [
            "tools/sst_dump.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ee5a51e6cee1256b50ffe2271a257eb53eae4adf"
    },
    {
        "hash": "0365eaf12e9e896ea5902fb3bf3db5e6da275d2e",
        "author": "Igor Canadi",
        "date": "2014-06-06T18:27:44-07:00",
        "message": "remove unnecessary printf",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0365eaf12e9e896ea5902fb3bf3db5e6da275d2e"
    },
    {
        "hash": "593bb2c40bf82a4d4bdba21a3fa965d8e3f6022b",
        "author": "sdong",
        "date": "2014-06-02T10:32:09-07:00",
        "message": "db_stress to add an option to periodically change background thread pool size.\n\nSummary: Add an option to indicates the variation of background threads. If the flag is not 0, for every 100 milliseconds, adjust thread pool size to a value within the range.\n\nTest Plan: run db_stress\n\nReviewers: haobo, dhruba, igor, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb, nkg-\n\nDifferential Revision: https://reviews.facebook.net/D18759",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/593bb2c40bf82a4d4bdba21a3fa965d8e3f6022b"
    },
    {
        "hash": "f29c62fc6f71a19becfa8f0a53910391dca91a99",
        "author": "Lei Jin",
        "date": "2014-05-30T14:09:22-07:00",
        "message": "add an iterator refresh option for SeekRandom\n\nSummary: One more option to allow iterator refreshing when using normal iterator\n\nTest Plan: ran db_bench\n\nReviewers: haobo, sdong, igor\n\nReviewed By: igor\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18849",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f29c62fc6f71a19becfa8f0a53910391dca91a99"
    },
    {
        "hash": "9899b12780f779dad707fdac0b042eff4bf70f1a",
        "author": "sdong",
        "date": "2014-05-29T11:11:08-07:00",
        "message": "ThreadID printed when Thread terminating in the same format as posix_logger\n\nSummary: https://github.com/facebook/rocksdb/commit/220132b65ec17abb037d3e79d5abf6ca8d797b96 correctly fixed the issue of thread ID printing when terminating a thread. Nothing wrong with it. This diff prints the ID in the same way as in PosixLogger::logv() so that users can be more easily to correlates them.\n\nTest Plan: run env_test and make sure it prints correctly.\n\nReviewers: igor, haobo, ljin, yhchiang\n\nReviewed By: yhchiang\n\nSubscribers: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18819",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9899b12780f779dad707fdac0b042eff4bf70f1a"
    },
    {
        "hash": "220132b65ec17abb037d3e79d5abf6ca8d797b96",
        "author": "Igor Canadi",
        "date": "2014-05-21T10:26:09-07:00",
        "message": "Merge pull request #156 from Chilledheart/print_pthread_info\n\nPrint pthread_t in a more safe way",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/220132b65ec17abb037d3e79d5abf6ca8d797b96"
    },
    {
        "hash": "81b498bc159d675014aaf89b56a341c1b2dffd46",
        "author": "Chilledheart",
        "date": "2014-05-22T01:24:42+08:00",
        "message": "Print pthread_t in a more safe way",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/81b498bc159d675014aaf89b56a341c1b2dffd46"
    },
    {
        "hash": "591f71285c1349fc6b6d2a113b360d0d2da46cf6",
        "author": "Mike Orr",
        "date": "2014-05-21T07:54:22-04:00",
        "message": "cleanup exception text",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_hdfs.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/591f71285c1349fc6b6d2a113b360d0d2da46cf6"
    },
    {
        "hash": "f725e4fe1f84abd4ecb0ddf8e4eeddad2e1378ba",
        "author": "Igor Canadi",
        "date": "2014-05-20T17:09:38-07:00",
        "message": "Make RateLimiting unit test less flakey",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f725e4fe1f84abd4ecb0ddf8e4eeddad2e1378ba"
    },
    {
        "hash": "bd1105aa5a550224b1655ad38fcac60546df8a92",
        "author": "sdong",
        "date": "2014-05-19T15:18:02-07:00",
        "message": "Print out thread ID while thread terminates for decreased pool size.\n\nSummary: Per request from @nkg-, temporarily print thread ID when a thread terminates. It is a temp solution as we try to minimized stderr messages.\n\nTest Plan: env_test\n\nReviewers: haobo, igor, dhruba\n\nReviewed By: igor\n\nCC: nkg-, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18753",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bd1105aa5a550224b1655ad38fcac60546df8a92"
    },
    {
        "hash": "4e0602f941c8c30f2ce3c01f74228547cd5a5b3e",
        "author": "sdong",
        "date": "2014-05-15T11:06:37-07:00",
        "message": "Remove maximum key_size check in db_bench\n\nSummary: Key size limit doesn't seem to be applicable anymore. Remove it.\n\nTest Plan: run a couple of tests in db_bench\n\nReviewers: haobo, igor, yhchiang, dhruba\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18723",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4e0602f941c8c30f2ce3c01f74228547cd5a5b3e"
    },
    {
        "hash": "c07c9606edcc79907a24dbe3febff8ee0aa8512f",
        "author": "Igor Canadi",
        "date": "2014-05-14T16:23:40-07:00",
        "message": "Expose Status::code()",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/status.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c07c9606edcc79907a24dbe3febff8ee0aa8512f"
    },
    {
        "hash": "52783c793c2d2ef3323d4bfb4b77df41e0453794",
        "author": "Igor Canadi",
        "date": "2014-05-14T12:40:49-07:00",
        "message": "declare kInline size in arena.cc",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/52783c793c2d2ef3323d4bfb4b77df41e0453794"
    },
    {
        "hash": "8c2c4602ee7b2a6a62d22a2a625009b1aea8e5e5",
        "author": "sdong",
        "date": "2014-05-13T16:08:21-07:00",
        "message": "FixedPrefixTransform to include prefix length in its name\n\nSummary: As title\n\nTest Plan: make all check.\n\nReviewers: haobo, igor, yhchiang\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18705",
        "modified_files_count": 1,
        "modified_files": [
            "util/slice.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8c2c4602ee7b2a6a62d22a2a625009b1aea8e5e5"
    },
    {
        "hash": "2082a7d745e562e8342baba9a038408b5454231e",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-05-13T12:28:47-07:00",
        "message": "[Java] Temporary set the number of BG threads based on the number of BG compactions.\n\nSummary:\nBefore the Java binding for Env is ready, Java developers have no way to\ncontrol the number of background threads.  This diff provides a temporary\nsolution where RocksDB.setMaxBackgroundCompactions() will affect the\nnumber of background threads.\n\nNote that once Env is ready.  Changes made in this diff should be reverted.\n\nTest Plan:\nmake rocksdbjava\nmake jtest\nmake jdb_bench\njava/jdb_bench.sh\n\nReviewers: haobo, sdong\n\nReviewed By: sdong\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18681",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/rocksjni.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2082a7d745e562e8342baba9a038408b5454231e"
    },
    {
        "hash": "d08073aafc50ae12025030541e2986496c88fd5b",
        "author": "Igor Canadi",
        "date": "2014-05-11T15:44:32-07:00",
        "message": "Merge pull request #141 from dallasmarlow/master\n\nonly use MAP_HUGETLB when the kernel supports it",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d08073aafc50ae12025030541e2986496c88fd5b"
    },
    {
        "hash": "557fbc9b3b5cee9bd53b4dcb481187cd71fbeefa",
        "author": "Dallas Marlow",
        "date": "2014-05-11T10:22:28-04:00",
        "message": "arena spacing",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/557fbc9b3b5cee9bd53b4dcb481187cd71fbeefa"
    },
    {
        "hash": "3edc056f6ddbb89fd6f290d29b7bf3038214148d",
        "author": "Igor Canadi",
        "date": "2014-05-10T11:25:56-07:00",
        "message": "comment",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3edc056f6ddbb89fd6f290d29b7bf3038214148d"
    },
    {
        "hash": "030db3d17e0f906c4a6bc04473b2247290d98c14",
        "author": "Dallas Marlow",
        "date": "2014-05-09T18:58:39-04:00",
        "message": "testing",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/030db3d17e0f906c4a6bc04473b2247290d98c14"
    },
    {
        "hash": "acd17fd002c26f4184353c3faea11d5424c41470",
        "author": "sdong",
        "date": "2014-05-09T13:20:35-07:00",
        "message": "Remove unused variable in DBIter\n\nSummary: as title\n\nTest Plan: Still compile\n\nReviewers: haobo, igor, yhchiang\n\nReviewed By: igor\n\nCC: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18603",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/acd17fd002c26f4184353c3faea11d5424c41470"
    },
    {
        "hash": "deb89401fd0c3e59167c01182ba1fcfa23adc3f6",
        "author": "Tyler Neely",
        "date": "2014-05-09T14:49:25-04:00",
        "message": "have proprocessor choose correct mmap args",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/deb89401fd0c3e59167c01182ba1fcfa23adc3f6"
    },
    {
        "hash": "8e37a29bfbc58928dc1a24f38c7e8b2714017c85",
        "author": "Igor Canadi",
        "date": "2014-05-08T13:48:39-07:00",
        "message": "Compaction with zero outputs\n\nSummary: We had a hypothesis in https://reviews.facebook.net/D18507 that empty-string internal keys might have been caused by compaction filter deleting all the entries. I added a unit test for that case. Unforutnately, everything works as expected.\n\nTest Plan: this is a test\n\nReviewers: dhruba, haobo, sdong\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18519",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8e37a29bfbc58928dc1a24f38c7e8b2714017c85"
    },
    {
        "hash": "1c6a027d23f596e61815b765ff0ecf4c91b88da9",
        "author": "sdong",
        "date": "2014-05-08T13:28:52-07:00",
        "message": "HashLinkedList::Iterator: remove an ununsed class variable\n\nSummary: This variable is not used. Remove it.\n\nTest Plan: build.\n\nReviewers: haobo, igor, yhchiang\n\nReviewed By: haobo\n\nCC: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18525",
        "modified_files_count": 1,
        "modified_files": [
            "util/hash_linklist_rep.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1c6a027d23f596e61815b765ff0ecf4c91b88da9"
    },
    {
        "hash": "f41cde310570214b0427c6867e27300d98eaebec",
        "author": "dallas marlow",
        "date": "2014-05-08T11:45:44-04:00",
        "message": "remove anon mmap allocation flag `MAP_HUGETLB`",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f41cde310570214b0427c6867e27300d98eaebec"
    },
    {
        "hash": "b5616dafd18418ac976b70a93f7398b737ec2fb5",
        "author": "Igor Canadi",
        "date": "2014-05-07T17:48:31-07:00",
        "message": "Fix iOS compile",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b5616dafd18418ac976b70a93f7398b737ec2fb5"
    },
    {
        "hash": "7984b9bbb0d5ae9938c1c0bf596ebb98e5e2827a",
        "author": "Igor Canadi",
        "date": "2014-05-05T14:30:24-07:00",
        "message": "BackupableDBTest thread-safe\n\nSummary: We need to lock accesses to some TestEnv variables. Otherwise we get failures like http://ci-builds.fb.com/job/rocksdb_asan_check/657/console\n\nTest Plan: make check\n\nReviewers: dhruba, haobo, sdong\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18489",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7984b9bbb0d5ae9938c1c0bf596ebb98e5e2827a"
    },
    {
        "hash": "15c3991933391023cb4a0545c86998a002a59fc5",
        "author": "Igor Canadi",
        "date": "2014-05-05T12:57:47-07:00",
        "message": "Add comment about ValueType",
        "modified_files_count": 1,
        "modified_files": [
            "db/dbformat.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/15c3991933391023cb4a0545c86998a002a59fc5"
    },
    {
        "hash": "9b17558311a1415a813fe463df8c6853cba244b3",
        "author": "sdong",
        "date": "2014-05-05T11:05:54-07:00",
        "message": "PlainTableFactory::PlainTableFactory() to have huge TLB turned off by default\n\nSummary: PlainTableFactory::PlainTableFactory() now has Huge TLB page feature turned on by default. Although it is not a public API (which we always turn the feature off now), our unit tests, like db_test sometimes uses it directly, which causes wrong coverage of codes. This patch fix it to allow unit tests to run with the correct setting\n\nTest Plan: Run db_test and make sure this feature is not on any more.\n\nReviewers: igor, haobo\n\nReviewed By: igor\n\nCC: yhchiang, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18483",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_factory.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9b17558311a1415a813fe463df8c6853cba244b3"
    },
    {
        "hash": "6785a52b1b1330ee2e3eed73750006abaee63524",
        "author": "Igor Canadi",
        "date": "2014-05-05T07:13:48-07:00",
        "message": "Temporary remove perror() calls before we can log from inside of arena",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6785a52b1b1330ee2e3eed73750006abaee63524"
    },
    {
        "hash": "db1854d78c87594cef301a31f4177b950e672a92",
        "author": "Igor Canadi",
        "date": "2014-05-04T11:39:49-07:00",
        "message": "Declare all DB methods virtual so that StackableDB can override them",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/db1854d78c87594cef301a31f4177b950e672a92"
    },
    {
        "hash": "82042f451cfb1de08fb95470dacf164b0a63a99b",
        "author": "Igor Canadi",
        "date": "2014-05-01T19:28:23-04:00",
        "message": "Include version in options",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/82042f451cfb1de08fb95470dacf164b0a63a99b"
    },
    {
        "hash": "d28ed6931f1a6eba9056cbd4eac4fbe2a98de33d",
        "author": "Igor Canadi",
        "date": "2014-05-01T12:42:06-07:00",
        "message": "fix release build",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d28ed6931f1a6eba9056cbd4eac4fbe2a98de33d"
    },
    {
        "hash": "d29e48bb2e407701eaf3e733d76ff4a54e574e00",
        "author": "Igor Canadi",
        "date": "2014-05-01T14:12:35-04:00",
        "message": "fix compile warning",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d29e48bb2e407701eaf3e733d76ff4a54e574e00"
    },
    {
        "hash": "16f1aa7b2d0b5f44397810faeed9fae278d89bc6",
        "author": "Igor Canadi",
        "date": "2014-04-30T14:38:01-04:00",
        "message": "Fix signed/unsigned compare",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/16f1aa7b2d0b5f44397810faeed9fae278d89bc6"
    },
    {
        "hash": "d0b006ab13e10ff5bb7b115cff9362b077e596dd",
        "author": "Igor Canadi",
        "date": "2014-04-29T12:29:22-07:00",
        "message": "Fix unsigned and signed integer compare",
        "modified_files_count": 1,
        "modified_files": [
            "util/benchharness_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d0b006ab13e10ff5bb7b115cff9362b077e596dd"
    },
    {
        "hash": "76c3dbf5b51557431a0a344bfa7242752db644e6",
        "author": "Igor Canadi",
        "date": "2014-04-29T12:19:54-07:00",
        "message": "Make ttl_test a bit more robust",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/ttl/ttl_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/76c3dbf5b51557431a0a344bfa7242752db644e6"
    },
    {
        "hash": "fe331c88866b5876db72629db73511053c7c6884",
        "author": "Igor Canadi",
        "date": "2014-04-26T14:23:15-07:00",
        "message": "fix valgrind",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fe331c88866b5876db72629db73511053c7c6884"
    },
    {
        "hash": "4cd9f58c044b999ca0ec82b157b58c4ccfaf9563",
        "author": "Igor Canadi",
        "date": "2014-04-24T14:56:41-04:00",
        "message": "Fix corruption test",
        "modified_files_count": 1,
        "modified_files": [
            "db/corruption_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4cd9f58c044b999ca0ec82b157b58c4ccfaf9563"
    },
    {
        "hash": "478990c81be2634ba313f577296687c6f9f4822c",
        "author": "Igor Canadi",
        "date": "2014-04-24T11:13:28-07:00",
        "message": "Make CompactionInputErrorParanoid less flakey\n\nSummary:\nI'm getting lots of e-mails with CompactionInputErrorParanoid failing. Most recent example early morning today was: http://ci-builds.fb.com/job/rocksdb_valgrind/562/consoleFull\n\nI'm putting a stop to these e-mails. I investigated why the test is flakey and it turns out it's because of non-determinsim of compaction scheduling. If there is a compaction after the last flush, CorruptFile will corrupt the compacted file instead of file at level 0 (as it assumes). That makes `Check(9, 9)` fail big time.\n\nI also saw some errors with table file getting outputed to >= 1 levels instead of 0. Also fixed that.\n\nTest Plan: Ran corruption_test 100 times without a failure. Previously it usually failed at 10th occurrence.\n\nReviewers: dhruba, haobo, ljin\n\nReviewed By: ljin\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18285",
        "modified_files_count": 1,
        "modified_files": [
            "db/corruption_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/478990c81be2634ba313f577296687c6f9f4822c"
    },
    {
        "hash": "472a80a3ae3bad61232d3d80ff7ab06667ce5ffe",
        "author": "Igor Canadi",
        "date": "2014-04-24T06:53:11-07:00",
        "message": "Initialize verification_failed in db_stress",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/472a80a3ae3bad61232d3d80ff7ab06667ce5ffe"
    },
    {
        "hash": "2413a06c7bf2a1f3e86680ceb041e75c729f44f1",
        "author": "Igor Canadi",
        "date": "2014-04-24T09:22:58-04:00",
        "message": "Improve stability of db_stress\n\nSummary:\nCurrently, whenever DB Verification fails we bail out by calling `exit(1)`. This is kind of bad since it causes unclean shutdown and spew of error log messages like:\n\n    05:03:27 pthread lock: Invalid argument\n    05:03:27 pthread lock: Invalid argument\n    05:03:27 pthread lock: Invalid argument\n    05:03:27 pthread lock: Invalid argument\n    05:03:27 pthread lock: Invalid argument\n    05:03:27 pthread lock: Invalid argument\n    05:03:27 pthread lock: Invalid argument\n    05:03:27 pthread lock: Invalid argument\n    05:03:27 pthread lock: Invalid argument\n\nThis diff adds a new parameter that is set to true when verification fails. It can then use the parameter to bail out safely.\n\nTest Plan: Casued artificail failure. Verified that exit was clean.\n\nReviewers: dhruba, haobo, ljin\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18243",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2413a06c7bf2a1f3e86680ceb041e75c729f44f1"
    },
    {
        "hash": "4de5b84ee01f4a749dc0a4b1f410d340d7157ace",
        "author": "sdong",
        "date": "2014-04-23T19:45:22-07:00",
        "message": "Fix a bug in IterKey\n\nSummary: IterKey set buffer_size_ to a wrong initial value, causing it to always allocate values from heap instead of stack if the key size is smaller. Fix it.\n\nTest Plan: make all check\n\nReviewers: haobo, ljin\n\nReviewed By: haobo\n\nCC: igor, dhruba, yhchiang, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18279",
        "modified_files_count": 1,
        "modified_files": [
            "db/dbformat.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4de5b84ee01f4a749dc0a4b1f410d340d7157ace"
    },
    {
        "hash": "5f1daf7ae39e41ae4aa69cca4add602aa1b0b909",
        "author": "Lei Jin",
        "date": "2014-04-22T21:14:25-07:00",
        "message": "get rid of shared_ptr in memtable.cc\n\nSummary: Get rid of the devil. Probably won't impact anything on the perf side.\n\nTest Plan: make all check\n\nReviewers: igor, haobo, sdong, yhchiang\n\nReviewed By: haobo\n\nCC: leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D18153",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5f1daf7ae39e41ae4aa69cca4add602aa1b0b909"
    },
    {
        "hash": "c2da9e59971a061438d661ff0f4b6e9dba895a2d",
        "author": "Igor Canadi",
        "date": "2014-04-21T17:45:04-07:00",
        "message": "Flush before Fsync()/Sync()\n\nSummary: Calling Fsync()/Sync() on a file should give the guarantee that whatever you written to the file is now persisted. This is currently not the case, since we might have some data left in application cache as we do Fsync()/Sync(). For example, BuildTable() calls Fsync() without the flush, assuming all sst data is now persisted, but it's actually not. This may result in big inconsistencies.\n\nTest Plan: no test\n\nReviewers: sdong, dhruba, haobo, ljin, yhchiang\n\nReviewed By: sdong\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18159",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c2da9e59971a061438d661ff0f4b6e9dba895a2d"
    },
    {
        "hash": "05c168658e60d9748fe873f316a2c0e076d6dd7b",
        "author": "Igor Canadi",
        "date": "2014-04-21T12:56:32-07:00",
        "message": "Relax env_test::AllocateTest",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/05c168658e60d9748fe873f316a2c0e076d6dd7b"
    },
    {
        "hash": "c7076a7a0510eb69ced78ac7cdb03442c810e63c",
        "author": "Igor Canadi",
        "date": "2014-04-21T12:12:02-07:00",
        "message": "Fix Allocate test\n\nSummary: For some reason, on a subset of our continuous build machines, preallocation is allocating 8 block more than it should be. Let's relax the test a little bit -- now we require the test to allocate *at least* the number of blocks as we told them to.\n\nTest Plan: no\n\nReviewers: ljin, haobo, sdong\n\nReviewed By: ljin\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D18141",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c7076a7a0510eb69ced78ac7cdb03442c810e63c"
    },
    {
        "hash": "86ae8203e6f62f60eeeeb2e75b4aa4d68abe2b8d",
        "author": "Igor Canadi",
        "date": "2014-04-17T14:29:28-07:00",
        "message": "Fix ifdef NDEBUG",
        "modified_files_count": 1,
        "modified_files": [
            "util/sync_point.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/86ae8203e6f62f60eeeeb2e75b4aa4d68abe2b8d"
    },
    {
        "hash": "e37dd216f9384bfdabc6760fa296e8ee28c79d30",
        "author": "Kai Liu",
        "date": "2014-04-17T11:08:12-07:00",
        "message": "Index type doesn't have to be persisted\n\nSummary:\n\nWith the recent changes, there is no need to check the property block about the index block type.\nIf user want to use it, they don't really need any disk format change; everything happens in the fly.\n\nAlso another team encountered an error while reading the index type from properties.\n\nTest Plan:\n\nran all the tests\n\nReviewers: sdong\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e37dd216f9384bfdabc6760fa296e8ee28c79d30"
    },
    {
        "hash": "161d9e586bc1f42448d3bad3a4b1a5574dd5e536",
        "author": "Igor Canadi",
        "date": "2014-04-16T15:15:22-07:00",
        "message": "Don't overflow size_t in mac",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/161d9e586bc1f42448d3bad3a4b1a5574dd5e536"
    },
    {
        "hash": "5c12f2779142842828814114cbe4e4ad5ba2f4f9",
        "author": "Igor Canadi",
        "date": "2014-04-16T09:09:28-07:00",
        "message": "Remove tautological assert",
        "modified_files_count": 1,
        "modified_files": [
            "db/filename.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5c12f2779142842828814114cbe4e4ad5ba2f4f9"
    },
    {
        "hash": "faf7691358da11348a69e65a48df07953ff35b38",
        "author": "Igor Canadi",
        "date": "2014-04-15T17:20:56-07:00",
        "message": "Close DB at the end of DontRollEmptyLogs test",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/faf7691358da11348a69e65a48df07953ff35b38"
    },
    {
        "hash": "1803ed2ccb61c60a003e1d03edb1e17d55acd16a",
        "author": "Igor Canadi",
        "date": "2014-04-15T16:31:49-07:00",
        "message": "Fix Mac OS compile",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1803ed2ccb61c60a003e1d03edb1e17d55acd16a"
    },
    {
        "hash": "98421774b6c71cc6ee092240374c2453d2d03e43",
        "author": "Ankit Gupta",
        "date": "2014-04-14T21:14:29-07:00",
        "message": "remove unused header",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/portal.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/98421774b6c71cc6ee092240374c2453d2d03e43"
    },
    {
        "hash": "8756a3210f1482d2638a329f18ca65eaf73988b2",
        "author": "Ankit Gupta",
        "date": "2014-04-14T21:11:03-07:00",
        "message": "Remove unused headers",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/statistics.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8756a3210f1482d2638a329f18ca65eaf73988b2"
    },
    {
        "hash": "c87ed0942c87a05282935491341c30c1177bb6e9",
        "author": "sdong",
        "date": "2014-04-14T15:43:34-07:00",
        "message": "Fix db_bench's multireadrandom\n\nSummary: multireadrandom is broken. Fix it\n\nTest Plan: run it and see segfault has gone.\n\nReviewers: ljin\n\nReviewed By: ljin\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17781",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c87ed0942c87a05282935491341c30c1177bb6e9"
    },
    {
        "hash": "118f88d25d94edafdd5575c3a36879aa14b967ca",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-04-14T14:05:15-07:00",
        "message": "Fix compile error in tailing_iter.h\n\nSummary:\nFix the following compile error\n\n  ./db/tailing_iter.h:17:1: error: class 'SuperVersion' was previously declared as a struct [-Werror,-Wmismatched-tags]\n  class SuperVersion;\n  ^\n  ./db/column_family.h:77:8: note: previous use is here\n  struct SuperVersion {\n         ^\n         ./db/tailing_iter.h:17:1: note: did you mean struct here?\n         class SuperVersion;\n         ^~~~~\n         struct\n         1 error generated.\n\nTest Plan: make\n\nReviewers: ljin, igor, haobo, sdong\n\nReviewed By: ljin\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17799",
        "modified_files_count": 1,
        "modified_files": [
            "db/tailing_iter.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/118f88d25d94edafdd5575c3a36879aa14b967ca"
    },
    {
        "hash": "327102efa5f2b321b6fb9bf1480f1f7c9fe2438b",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-04-14T12:06:49-07:00",
        "message": "Fix merge_test failure due to incorrect assert behavior in the release mode.",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/327102efa5f2b321b6fb9bf1480f1f7c9fe2438b"
    },
    {
        "hash": "d5e087b6df8ba564eb67c370980dbf17dd417e54",
        "author": "sdong",
        "date": "2014-04-11T16:59:08-07:00",
        "message": "db_bench: add a mode to operate multiple DBs\n\nSummary: This patch introduces a new parameter num_multi_db in db_bench. When this parameter is larger than 1, multiple DBs will be created. In all benchmarks, any operation applies to a random DB among them. This is to benchmark the performance of similar applications.\n\nTest Plan: run db_bench on both of num_multi_db=0 and more.\n\nReviewers: haobo, ljin, igor\n\nReviewed By: igor\n\nCC: igor, yhchiang, dhruba, nkg-, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17769",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d5e087b6df8ba564eb67c370980dbf17dd417e54"
    },
    {
        "hash": "30aff72f7768df84091e797b5413eabf369a098d",
        "author": "Igor Canadi",
        "date": "2014-04-11T14:48:20-07:00",
        "message": "Don't shadow in ColumnFamilyDescriptor",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/30aff72f7768df84091e797b5413eabf369a098d"
    },
    {
        "hash": "9433e359d13b8b44d2f8ec2fc13dfbae0fed39ec",
        "author": "Igor Canadi",
        "date": "2014-04-11T10:54:47-07:00",
        "message": "Dont build version if compiling for IOS",
        "modified_files_count": 1,
        "modified_files": [
            "util/build_version.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9433e359d13b8b44d2f8ec2fc13dfbae0fed39ec"
    },
    {
        "hash": "de41357a18bb3357ce756f57264055ad94610932",
        "author": "Igor Canadi",
        "date": "2014-04-11T10:19:58-07:00",
        "message": "Don't dump rocksdb version on IOS",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/de41357a18bb3357ce756f57264055ad94610932"
    },
    {
        "hash": "0af36d6aa6258a1383fc40b6ffb946646eabdbbd",
        "author": "Lei Jin",
        "date": "2014-04-11T09:47:20-07:00",
        "message": "SeekRandomWhileWriting\n\nSummary: as title\n\nTest Plan: ran it\n\nReviewers: igor, haobo, yhchiang\n\nReviewed By: yhchiang\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17751",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0af36d6aa6258a1383fc40b6ffb946646eabdbbd"
    },
    {
        "hash": "e23e73e67c85af70274f0d799050f37cc92a1cad",
        "author": "Kai Liu",
        "date": "2014-04-10T22:45:25-07:00",
        "message": "Use shorten index key for hash-index\n\nSummary:\nI was wrong about the \"index builder\", right now since we create index\nby scanning both whole table and index, there is not need to preserve\nthe whole key as the index key.\n\nI switch back to original way index which is both space efficient and\nable to supprot in-fly construction of hash index.\n\nIN this patch, I made minimal change since I'm not sure if we still need\nthe \"pluggable index builder\", under current circumstance it is of no use\nand kind of over-engineered. But I'm not sure if we can still exploit its\nusefulness in the future; otherwise I think I can just burn them with great\nvengeance.\n\nTest Plan: unit tests\n\nReviewers: sdong, haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17745",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e23e73e67c85af70274f0d799050f37cc92a1cad"
    },
    {
        "hash": "1405232b6dbf303baf407efe75a33c44d1dd441d",
        "author": "Kai Liu",
        "date": "2014-04-10T17:17:39-07:00",
        "message": "Temporarily disable a test case in db_test\n\nSummary:\n\nRoot cause is still under investigation. Just Disable the troubling use case for now.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1405232b6dbf303baf407efe75a33c44d1dd441d"
    },
    {
        "hash": "6c0fc5d3ba8eb47ed7bd3e5822bd84a0abcdb7bf",
        "author": "Igor Canadi",
        "date": "2014-04-10T16:49:49-07:00",
        "message": "Fix some InfoLogLevels",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6c0fc5d3ba8eb47ed7bd3e5822bd84a0abcdb7bf"
    },
    {
        "hash": "7a92537fc4fb5627b35f9118cca7fface3b733df",
        "author": "Lei Jin",
        "date": "2014-04-10T10:15:59-07:00",
        "message": "db_bench: add IteratorCreationWhileWriting mode and allow prefix_seek\n\nSummary: as title\n\nTest Plan: ran it\n\nReviewers: igor, haobo, yhchiang\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17655",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7a92537fc4fb5627b35f9118cca7fface3b733df"
    },
    {
        "hash": "dc55903293790492bef4a26cb58bacfca2a6ebe8",
        "author": "Igor Canadi",
        "date": "2014-04-09T11:43:14-07:00",
        "message": "Improved CompressedCache\n\nSummary:\nThis is testing behavior that was reported in https://github.com/facebook/rocksdb/issues/111\n\nNo issue was found, but it still good to commit this and make CompressedCache more robust.\n\nTest Plan: this is a plan\n\nReviewers: ljin, dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17625",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dc55903293790492bef4a26cb58bacfca2a6ebe8"
    },
    {
        "hash": "2014915d32305b13939de5b7888257c17163192a",
        "author": "Igor Canadi",
        "date": "2014-04-09T10:38:05-07:00",
        "message": "Fix ASAN issue",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2014915d32305b13939de5b7888257c17163192a"
    },
    {
        "hash": "731e55c01cae9d9b7f97dfabaac65c9605b30699",
        "author": "Igor Canadi",
        "date": "2014-04-08T14:57:00-07:00",
        "message": "Fix GetProperty() test\n\nSummary:\nGetProperty test is flakey.\nBefore this diff: P8635927\nAfter: P8635945\n\nWe need to make sure the thread is done before we destruct sleeping tasks. Otherwise, bad things happen.\n\nTest Plan: See summary\n\nReviewers: ljin, sdong, haobo, dhruba\n\nReviewed By: ljin\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17595",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/731e55c01cae9d9b7f97dfabaac65c9605b30699"
    },
    {
        "hash": "beeee9dccc338ae7129016f2f2e17d2a40ecc5df",
        "author": "Igor Canadi",
        "date": "2014-04-08T11:06:39-07:00",
        "message": "Small speedup of CompactionFilterV2\n\nSummary: ToString() is expensive. Profiling shows that most compaction threads are stuck in jemalloc, allocating a new string. This will help out a litte.\n\nTest Plan: make check\n\nReviewers: haobo, danguo\n\nReviewed By: danguo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17583",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/beeee9dccc338ae7129016f2f2e17d2a40ecc5df"
    },
    {
        "hash": "5abae2c8edb962af994bc49e714ad8c374d75dd7",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-04-08T09:54:59-07:00",
        "message": "[JNI] Fixed a column family related compile error.\n\nSummary:\nFixed the following column family related compile error.\n\n./java/rocksjni/write_batch.cc:211:66: error: cannot initialize a parameter of type 'rocksdb::ColumnFamilyMemTables *' with an lvalue of type 'rocksdb::MemTable *'\n  rocksdb::Status s = rocksdb::WriteBatchInternal::InsertInto(b, mem, &options);\n                                                                   ^~~\n\nTest Plan:\nmake jni\nmake jtest\n\nReviewers: igor, haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17577",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5abae2c8edb962af994bc49e714ad8c374d75dd7"
    },
    {
        "hash": "a4d73ddee0e82ca327ec6aaddc1d439b00ea993e",
        "author": "Igor Canadi",
        "date": "2014-04-07T16:33:03-07:00",
        "message": "Initialize Options::bloom_locality\n\nSummary: I think this issue was caused by bad merge. We have to initialize bloom_locality, otherwise valgrind complains: \"Use of uninitialised value of size 8\"\n\nTest Plan: Run valgrind ./prefix_test\n\nReviewers: ljin\n\nReviewed By: ljin\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17553",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a4d73ddee0e82ca327ec6aaddc1d439b00ea993e"
    },
    {
        "hash": "e48348d1961d76f12f0eee7cf4a82dc26667f963",
        "author": "Igor Canadi",
        "date": "2014-04-07T13:53:08-07:00",
        "message": "Make flush part of compaction process\n\nThis will enable user to use only 1 background thread.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e48348d1961d76f12f0eee7cf4a82dc26667f963"
    },
    {
        "hash": "f6ed420e4d71471430c4f135f8084eddd72bac0a",
        "author": "Igor Canadi",
        "date": "2014-04-07T13:04:16-07:00",
        "message": "Fix default path in geodb_test",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/geodb/geodb_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f6ed420e4d71471430c4f135f8084eddd72bac0a"
    },
    {
        "hash": "751e4b1a352140e59db5e60a0d33581175ad25b6",
        "author": "Igor Canadi",
        "date": "2014-04-07T11:36:03-07:00",
        "message": "Fix wal_dir sanitizing",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/751e4b1a352140e59db5e60a0d33581175ad25b6"
    },
    {
        "hash": "7efdd9ef4db90728b85085e05aa367a6ea727b0f",
        "author": "Igor Canadi",
        "date": "2014-04-07T10:25:38-07:00",
        "message": "Options::wal_dir shouldn't end in '/'\n\nSummary: If a client specifies wal_dir with trailing '/', we will fail in deleting obsolete log files. See task #4083746\n\nTest Plan: make check\n\nReviewers: haobo, sdong\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17535",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7efdd9ef4db90728b85085e05aa367a6ea727b0f"
    },
    {
        "hash": "acdc6a1a0dfb89235b2212b53ceb3683313a3a78",
        "author": "Igor Canadi",
        "date": "2014-04-04T16:27:47-07:00",
        "message": "relax backupable db rate limit tests",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/acdc6a1a0dfb89235b2212b53ceb3683313a3a78"
    },
    {
        "hash": "318eace49df9ff9686dddd904473884d329fc402",
        "author": "Igor Canadi",
        "date": "2014-04-04T14:03:19-07:00",
        "message": "Dynamically choose SSE 4.2\n\nSummary: Otherwise, if we compile on machine with SSE4.2 support and run it on machine without the support, we will fail.\n\nTest Plan: compiles, verified that isSse42() gets called.\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17505",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/318eace49df9ff9686dddd904473884d329fc402"
    },
    {
        "hash": "99c756f0fed119a1980d8d90765b3209dc925a0d",
        "author": "sdong",
        "date": "2014-04-04T10:58:30-07:00",
        "message": "Flush Buffered Info Logs Before Doing Compaction (one line change)\n\nSummary: Flushing log buffer earlier to avoid confusion of time holding the locks.\n\nTest Plan: Should be safe as long as several related db test passes\n\nReviewers: haobo, igor, ljin\n\nReviewed By: igor\n\nCC: nkg-, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17493",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/99c756f0fed119a1980d8d90765b3209dc925a0d"
    },
    {
        "hash": "f76e4027ca36c93ad8f49c24333dfe9f53eb0178",
        "author": "Igor Canadi",
        "date": "2014-04-03T11:45:44-07:00",
        "message": "initialize candidate count",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f76e4027ca36c93ad8f49c24333dfe9f53eb0178"
    },
    {
        "hash": "e3511841faa0b1ef30940fe61a89bfdcdde0d485",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-04-03T00:02:01-07:00",
        "message": "[JNI] Avoid a potential byte-array-copy btw c++ and java in RocksDB.get(byte[], byte[]).\n\nSummary: Avoid a JNI call to GetByteArrayElements, which may introduce a byte-array-copy.\n\nTest Plan: make jtest\n\nReviewers: haobo, sdong, dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17451",
        "modified_files_count": 1,
        "modified_files": [
            "java/rocksjni/rocksjni.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e3511841faa0b1ef30940fe61a89bfdcdde0d485"
    },
    {
        "hash": "d1d19f5db3ccece60f76fe19fa06f72eb47aff6a",
        "author": "Igor Canadi",
        "date": "2014-04-02T17:24:30-07:00",
        "message": "Fix valgrind error in c_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d1d19f5db3ccece60f76fe19fa06f72eb47aff6a"
    },
    {
        "hash": "158845ba9af59228ea08051848426deb532380b6",
        "author": "sdong",
        "date": "2014-04-02T16:48:32-07:00",
        "message": "Move a info logging out of DB Mutex\n\nSummary: As we know, logging can be slow, or even hang for some file systems. Move one more logging out of DB mutex.\n\nTest Plan: make all check\n\nReviewers: haobo, igor, ljin\n\nReviewed By: igor\n\nCC: yhchiang, nkg-, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17427",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/158845ba9af59228ea08051848426deb532380b6"
    },
    {
        "hash": "c9622aab776c3deff8cbeea41f26b132318a5045",
        "author": "Igor Canadi",
        "date": "2014-04-02T16:00:22-07:00",
        "message": "Merge pull request #107 from alberts/fastah\n\ncrc32: build a whole special Extend function for SSE 4.2.",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c9622aab776c3deff8cbeea41f26b132318a5045"
    },
    {
        "hash": "56ca75e89ee3e89510fcf92cc58177cbd05566e8",
        "author": "Albert Strasheim",
        "date": "2014-04-02T15:15:57-07:00",
        "message": "crc32: build a whole special Extend function for SSE 4.2.\n\nDisassembling the Extend function shows something that looks\nmuch more healthy now. The SSE 4.2 instructions are right\nthere in the body of the function.\n\nIntel(R) Core(TM) i7-3540M CPU @ 3.00GHz\n\nBefore:\n\ncrc32c: 1.305 micros/op 766260 ops/sec; 2993.2 MB/s (4K per op)\n\nAfter:\n\ncrc32c: 0.442 micros/op 2263843 ops/sec; 8843.1 MB/s (4K per op)",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/56ca75e89ee3e89510fcf92cc58177cbd05566e8"
    },
    {
        "hash": "807b2c2e02373827920f27757ea3b527eacc79a4",
        "author": "Lei Jin",
        "date": "2014-04-01T16:26:07-07:00",
        "message": "reduce thread count in ThreadLocalTest.ConcurrentReadWriteTest\n\nSummary: to make it less CPU intensive\n\nTest Plan: ran it\n\nReviewers: igor\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17403",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/807b2c2e02373827920f27757ea3b527eacc79a4"
    },
    {
        "hash": "fa84eb1f7b0a17adf0110eed686b2b03efd3818b",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-04-01T11:09:06-07:00",
        "message": "Fixed a compile error which tries to check whether a size_t < 0 in env_posix.cc\n\nSummary:\nFixed a compile error which tries to check whether a size_t < 0 in env_posix.cc\n\nutil/env_posix.cc:180:16: error: comparison of unsigned expression < 0 is always false [-Werror,-Wtautological-compare]\n    } while (r < 0 && errno == EINTR);\n             ~ ^ ~\n1 error generated.\n\nTest Plan: make check all\n\nReviewers: igor, haobo\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17379",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fa84eb1f7b0a17adf0110eed686b2b03efd3818b"
    },
    {
        "hash": "8e81caf01aef11d6bc6ec2c3c49135fdb2b59b8b",
        "author": "Igor Canadi",
        "date": "2014-03-31T17:18:06-07:00",
        "message": "Fix Autoroll logger\n\nSummary:\nIf auto roll logger can't create a new LOG file on roll (if, for example, somebody deletes rocksdb directory while rocksdb is running, khm), we'll try to call Logv on invalid address and get a SIGSEGV. This diff will fix the issue\n\nHere's the paste of the stack trace: https://phabricator.fb.com/P8276386 (fb-only)\n\nTest Plan: make check is fine, although not really testing error condition\n\nReviewers: haobo, ljin, yhchiang\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17367",
        "modified_files_count": 1,
        "modified_files": [
            "util/auto_roll_logger.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8e81caf01aef11d6bc6ec2c3c49135fdb2b59b8b"
    },
    {
        "hash": "726c8084cdf994793375d18fd3aee053dc798e51",
        "author": "Igor Canadi",
        "date": "2014-03-31T14:45:26-07:00",
        "message": "Retry FS system calls on EINTR\n\nSummary: EINTR means 'please retry'. We don't do that currenty. We should.\n\nTest Plan: make check, although it doesn't really test the new code. we'll just have to believe in the code!\n\nReviewers: haobo, ljin\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17349",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/726c8084cdf994793375d18fd3aee053dc798e51"
    },
    {
        "hash": "8a139a054c4c194368fb010245a407e9e12b6be3",
        "author": "Igor Canadi",
        "date": "2014-03-29T10:34:47-07:00",
        "message": "More valgrind issues!\n\nSummary: Fix some more CompactionFilterV2 valgrind issues. Maybe it would make sense for CompactionFilterV2 to delete its prefix_extractor?\n\nTest Plan: ran CompactionFilterV2* tests with valgrind. issues before patch -> no issues after\n\nReviewers: haobo, sdong, ljin, dhruba\n\nReviewed By: dhruba\n\nCC: leveldb, danguo\n\nDifferential Revision: https://reviews.facebook.net/D17337",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8a139a054c4c194368fb010245a407e9e12b6be3"
    },
    {
        "hash": "550cca719274540ffde1a63cc8046189af5ad54b",
        "author": "Lei Jin",
        "date": "2014-03-28T17:30:20-07:00",
        "message": "dynamicbloom fix: don't offset address when it is already aligned\n\nSummary: this causes overflow and asan failure\n\nTest Plan: make asan_check\n\nReviewers: igor\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17301",
        "modified_files_count": 1,
        "modified_files": [
            "util/dynamic_bloom.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/550cca719274540ffde1a63cc8046189af5ad54b"
    },
    {
        "hash": "2d3468c2939b86eaa8b68c9c5c163504dccc0de0",
        "author": "sdong",
        "date": "2014-03-28T16:46:25-07:00",
        "message": "MemTableIterator not to reference Memtable\n\nSummary: In one of the perf, I shows 10%-25% CPU costs of MemTableIterator.Seek(), when doing dynamic prefix seek, are spent on checking whether we need to do bloom filter check or finding out the prefix extractor. Seems that  more level of pointer checking makes CPU cache miss more likely. This patch makes things slightly simpler by copying pointer of bloom of prefix extractor into the iterator.\n\nTest Plan: make all check\n\nReviewers: haobo, ljin\n\nReviewed By: ljin\n\nCC: igor, dhruba, yhchiang, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17247",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2d3468c2939b86eaa8b68c9c5c163504dccc0de0"
    },
    {
        "hash": "c8bb79978e287d991897e98a539a92e6b744f14e",
        "author": "Lei Jin",
        "date": "2014-03-28T16:21:42-07:00",
        "message": "fix the buffer overflow in dynamic_bloom_test\n\nSummary: int -> uint64_t\n\nTest Plan:\nit think it is pretty obvious\nwill run asan_check before committing\n\nReviewers: igor, haobo\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17241",
        "modified_files_count": 1,
        "modified_files": [
            "util/dynamic_bloom_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c8bb79978e287d991897e98a539a92e6b744f14e"
    },
    {
        "hash": "64ae6e9eb94228c11498edd8756b5f439338ff8b",
        "author": "Igor Canadi",
        "date": "2014-03-28T15:04:43-07:00",
        "message": "Don't preallocate log files",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/64ae6e9eb94228c11498edd8756b5f439338ff8b"
    },
    {
        "hash": "10cebec79efa43a6f3e02183049ee091ae335cd1",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-03-27T16:15:25-07:00",
        "message": "Fix the bug in MergeUtil which causes mixing values of different keys.\n\nSummary: Fix the bug in MergeUtil which causes mixing values of different keys.\n\nTest Plan:\nstringappend_test\nmake all check\n\nReviewers: haobo, igor\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17235",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/10cebec79efa43a6f3e02183049ee091ae335cd1"
    },
    {
        "hash": "b14c1f995b496a464deb89ef779e287e15de76a8",
        "author": "Igor Canadi",
        "date": "2014-03-27T12:00:38-07:00",
        "message": "allow mmap writes",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b14c1f995b496a464deb89ef779e287e15de76a8"
    },
    {
        "hash": "6a08bc042a99112204e1675ee98d1e289599aa42",
        "author": "Igor Canadi",
        "date": "2014-03-26T14:46:07-07:00",
        "message": "Fix no return warning in FileComparator",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6a08bc042a99112204e1675ee98d1e289599aa42"
    },
    {
        "hash": "1e9621d4e50a0301fa17fc6471bfa60e30768ef9",
        "author": "Igor Canadi",
        "date": "2014-03-26T13:30:14-07:00",
        "message": "Sort files correctly in Builder::SaveTo\n\nSummary:\nPreviously, we used to sort all files by BySmallestFirst comparator and then re-sort level0 files in the Finalize() (recently moved to end of SaveTo).\n\nIn this diff, I chose the correct comparator at the beginning and sort the files correctly in Builder::SaveTo.\n\nI also added a verification that all files are sorted correctly in CheckConsistency()\n\nNOTE: This diff depends on D17037\n\nTest Plan: make check. Will also run db_stress\n\nReviewers: dhruba, haobo, sdong, ljin\n\nReviewed By: ljin\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17049",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1e9621d4e50a0301fa17fc6471bfa60e30768ef9"
    },
    {
        "hash": "ad9a39c9b49b6df97c165130a843899535548826",
        "author": "Igor Canadi",
        "date": "2014-03-26T09:37:53-07:00",
        "message": "[RocksDB] Preallocate new MANIFEST files\n\nSummary: We don't preallocate MANIFEST file, even though we have an option for that. This diff preallocates manifest file every time we create it\n\nTest Plan: make check\n\nReviewers: dhruba, haobo\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17163",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ad9a39c9b49b6df97c165130a843899535548826"
    },
    {
        "hash": "b9ce156e381ad1f4d7baad0f285c3f429812ea4f",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-03-25T13:39:17-07:00",
        "message": "Add assert to MergeOperator::PartialMergeMulti to check # of operands.\n\nSummary:\nAdd assert(operands_list.size() >= 2) in MergeOperator::PartialMergeMulti\nto ensure it's only be called when we have at least two merge operands.\n\nTest Plan: run merge_test and stringappend_test.\n\nReviewers: haobo, igor\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17169",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_operator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b9ce156e381ad1f4d7baad0f285c3f429812ea4f"
    },
    {
        "hash": "5c44a8db61d529dab0323aaba63097a582017cc7",
        "author": "Igor Canadi",
        "date": "2014-03-25T12:53:23-07:00",
        "message": "fallocate_with_keep_size is false for LogWrites",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5c44a8db61d529dab0323aaba63097a582017cc7"
    },
    {
        "hash": "34f9da1ceff202921509ff055711cdc6e34ec577",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-03-25T11:50:09-07:00",
        "message": "Fix the failure of stringappend_test caused by PartialMergeMulti.\n\nSummary:\nFix a bug that PartialMergeMulti will try to merge the first operand\nwith an empty slice.\n\nTest Plan: run stringappend_test and merge_test.\n\nReviewers: haobo, igor\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17157",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_operator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/34f9da1ceff202921509ff055711cdc6e34ec577"
    },
    {
        "hash": "e6d4b006b69a7eef770f8d60fa261693944dd403",
        "author": "Igor Canadi",
        "date": "2014-03-24T11:59:42-07:00",
        "message": "Relax backupable RateLimiter unit test for slow environments",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e6d4b006b69a7eef770f8d60fa261693944dd403"
    },
    {
        "hash": "76642b81f4b9d7326c0b4f13a1680c12f88b88c6",
        "author": "Igor Canadi",
        "date": "2014-03-20T16:52:59-07:00",
        "message": "Increase done even if progress_reports is false",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/76642b81f4b9d7326c0b4f13a1680c12f88b88c6"
    },
    {
        "hash": "c21ce14fa5461c48b57f47c57f0d25014e1c775c",
        "author": "Igor Canadi",
        "date": "2014-03-20T14:37:30-07:00",
        "message": "Fix double-free in corruption_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/corruption_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c21ce14fa5461c48b57f47c57f0d25014e1c775c"
    },
    {
        "hash": "8ea3cb621efa4ec06e5362a7c147a6a1cc9b5958",
        "author": "Igor Canadi",
        "date": "2014-03-20T13:10:02-07:00",
        "message": "If paranoid_checks -- Mark DB read-only on any IOError\n\nSummary:\nWhenever we get an IOError from GetImpl() or NewIterator(), we should immediatelly mark the DB read-only. The same check already exists in Write() and Compaction().\n\nThis should help with clients that are somehow missing a file.\n\nTest Plan: make check\n\nReviewers: dhruba, haobo, sdong, ljin\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17061",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8ea3cb621efa4ec06e5362a7c147a6a1cc9b5958"
    },
    {
        "hash": "f681030c80b201f87eb3127637cfe2783c0c6c22",
        "author": "sdong",
        "date": "2014-03-20T11:10:11-07:00",
        "message": "Fix DBTest.UniversalCompactionTrigger failure caused by D17067\n\nSummary: D17067 breaks DBTest.UniversalCompactionTrigger because of wrong location of the checking. Fix it.\n\nTest Plan: Run the test and make sure it passes.\n\nReviewers: igor, haobo\n\nReviewed By: igor\n\nCC: dhruba, ljin, yhchiang, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17079",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f681030c80b201f87eb3127637cfe2783c0c6c22"
    },
    {
        "hash": "752ec46cd5ee2f71477f04e5659b98493018f13f",
        "author": "sdong",
        "date": "2014-03-19T18:10:48-07:00",
        "message": "Add a unit test to verify compaction filter context\n\nSummary: Add unit tests to make sure CompactionFilterContext::is_manual_compaction_ and CompactionFilterContext::is_full_compaction_ are set correctly.\n\nTest Plan: run the new tests.\n\nReviewers: haobo, igor, dhruba, yhchiang, ljin\n\nReviewed By: haobo\n\nCC: nkg-, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17067",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/752ec46cd5ee2f71477f04e5659b98493018f13f"
    },
    {
        "hash": "69f6cf431da185a10a10128d01c27a4ab19d6a17",
        "author": "Kai Liu",
        "date": "2014-03-19T16:18:33-07:00",
        "message": "Fix two bugs in talbe format\n\nSummary:\nPrevious code had two bugs:\n\n* didn't initialize the table_magic_number_ explicitly -- as a\n  result a random junk number is stored for table_magic_number_, making\n  HasInitializedMagicNumber() always return true.\n* if condition is inconrrect in set_table_magic_number(), and the return value is not checked.\n  I replace if-else by a stronger requirement enforced by assert().\n\nTest Plan:\nPrevious sst_dump failed to work.\nAfter the fix, things back to normal.\n\nReviewers: yhchiang\n\nCC: haobo, sdong, igor, dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17055",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/69f6cf431da185a10a10128d01c27a4ab19d6a17"
    },
    {
        "hash": "6dc940d4c9951487281677b77d4d3e18f7032bc8",
        "author": "Lei Jin",
        "date": "2014-03-19T10:54:32-07:00",
        "message": "avoid shared_ptr assignment in Version::Get()\n\nSummary:\nThis is a 500ns operation while the whole Get() call takes only a few\nmicro!\n\nTest Plan: ran db_bench, for a DB with 50M keys, QPS jumps from 5.2M/s to 7.2M/s\n\nReviewers: haobo, igor, dhruba\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17007",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6dc940d4c9951487281677b77d4d3e18f7032bc8"
    },
    {
        "hash": "69aa6ecb269f1fc7dfa3d97e3cf5e9fb4f8556de",
        "author": "Igor Canadi",
        "date": "2014-03-18T14:23:47-07:00",
        "message": "Finalize fist version in column family",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/69aa6ecb269f1fc7dfa3d97e3cf5e9fb4f8556de"
    },
    {
        "hash": "bcea9c129645d90a97c6454bcddd4523bf9d8751",
        "author": "Igor Canadi",
        "date": "2014-03-18T09:45:52-07:00",
        "message": "Finalize version in dumpmanifest",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bcea9c129645d90a97c6454bcddd4523bf9d8751"
    },
    {
        "hash": "d63ae5cb5958f7dacd7647b1c74762659f59af9b",
        "author": "Igor Canadi",
        "date": "2014-03-17T18:37:34-07:00",
        "message": "Adjust memtable sizes in unit test",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d63ae5cb5958f7dacd7647b1c74762659f59af9b"
    },
    {
        "hash": "5601bc4619402676900539c4ef828cedfa998a32",
        "author": "Igor Canadi",
        "date": "2014-03-17T17:02:34-07:00",
        "message": "Check starts_with(prefix) in MultiPrefixIterate\n\nSummary: We switched to prefix_seek method of seeking. This means that anytime we check Valid(), we also need to check starts_with(prefix)\n\nTest Plan: ran db_stress\n\nReviewers: ljin\n\nReviewed By: ljin\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16953",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5601bc4619402676900539c4ef828cedfa998a32"
    },
    {
        "hash": "a5fafd4f46248e8b89d5ec7c63d3f25aaa347fd1",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-03-17T12:20:11-07:00",
        "message": "Correct the logic of MemTable::ShouldFlushNow().\n\nSummary:\nMemtable will now be forced to flush if the one of the following\nconditions is met:\n1. Already allocated more than write_buffer_size + 60% arena block size.\n   (the overflowing condition)\n2. Unable to safely allocate one more arena block without hitting the\n   overflowing condition AND the unused allocated memory < 25% arena\n   block size.\n\nTest Plan: make all check\n\nReviewers: sdong, haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16893",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a5fafd4f46248e8b89d5ec7c63d3f25aaa347fd1"
    },
    {
        "hash": "9b8a2b52d451dd1a162ef34c59df907f4b476b59",
        "author": "Igor Canadi",
        "date": "2014-03-17T10:02:46-07:00",
        "message": "No prefix iterator in db_stress\n\nSummary: We're trying to deprecate prefix iterators, so no need to test them in db_stress\n\nTest Plan: ran it\n\nReviewers: ljin\n\nReviewed By: ljin\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16917",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9b8a2b52d451dd1a162ef34c59df907f4b476b59"
    },
    {
        "hash": "0cf6c8f7cec664e3be16a25e01198f5160632273",
        "author": "Lei Jin",
        "date": "2014-03-15T23:30:43-07:00",
        "message": "fix: use the correct edit when comparing log_number\n\nSummary:\nIn the last fix, I forgot to point to the writer when comparing edit,\nwhich is apparently not correct.\n\nTest Plan: still running make whitebox_crash_test\n\nReviewers: igor, haobo, igor2\n\nReviewed By: igor2\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16911",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0cf6c8f7cec664e3be16a25e01198f5160632273"
    },
    {
        "hash": "453ec52ca1c39c1af9bf2db01510dc9a54c210ff",
        "author": "Lei Jin",
        "date": "2014-03-14T18:36:47-07:00",
        "message": "journal log_number correctly in MANIFEST\n\nSummary:\nHere is what it can cause probelm:\nThere is one memtable flush and one compaction. Both call LogAndApply(). If both edits are applied in the same batch with flush edit first and the compaction edit followed. LogAndApplyHelper() will assign compaction edit current VersionSet's log number(which should be smaller than the log number from flush edit). It cause log_numbers in MANIFEST to be not monotonic increasing, which violates the assume Recover() makes. What is more is after comitting to MANIFEST file, log_number_ in VersionSet is updated to the log_number from the last edit, which is the compaction one. It ends up not updating the log_number.\n\nTest Plan:\nmake whitebox_crash_test\ngot another assertion about iter->valid(), not sure if that is related\nto this.\n\nReviewers: igor, haobo\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16875",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/453ec52ca1c39c1af9bf2db01510dc9a54c210ff"
    },
    {
        "hash": "f234dfd8fbebe483298ee015214dcf8fbcd28342",
        "author": "Caio SBA",
        "date": "2014-03-14T23:56:58+00:00",
        "message": "Breaking line",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f234dfd8fbebe483298ee015214dcf8fbcd28342"
    },
    {
        "hash": "a782bb989ef89743127e0e93d822266076fa997e",
        "author": "Igor Canadi",
        "date": "2014-03-14T13:45:30-07:00",
        "message": "Fix log_number in LogAndApply",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a782bb989ef89743127e0e93d822266076fa997e"
    },
    {
        "hash": "2bad3cb0db7f510ccba4ef3b29437cec1d12220a",
        "author": "Igor Canadi",
        "date": "2014-03-14T13:02:20-07:00",
        "message": "Missing includes",
        "modified_files_count": 1,
        "modified_files": [
            "db/perf_context_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2bad3cb0db7f510ccba4ef3b29437cec1d12220a"
    },
    {
        "hash": "56dce9bf8eade79bda167c2722bc77c879feb9a7",
        "author": "Igor Canadi",
        "date": "2014-03-14T10:22:37-07:00",
        "message": "unterminated conditional directive",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/56dce9bf8eade79bda167c2722bc77c879feb9a7"
    },
    {
        "hash": "f74659ac9f4a934a35e6eb54f14d586747c722a1",
        "author": "Igor Canadi",
        "date": "2014-03-14T10:13:39-07:00",
        "message": "Fix another Mac OS warning",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f74659ac9f4a934a35e6eb54f14d586747c722a1"
    },
    {
        "hash": "6c72079d77ffee55ecd15856e90808bfb892980c",
        "author": "Igor Canadi",
        "date": "2014-03-14T09:54:23-07:00",
        "message": "Fix warning on Mac OS",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6c72079d77ffee55ecd15856e90808bfb892980c"
    },
    {
        "hash": "f071a20f6e0647ea5de9e315c8e7bf9572c5026e",
        "author": "Igor Canadi",
        "date": "2014-03-13T13:52:20-07:00",
        "message": "Need more data in memtable to flush due to 11da8b",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f071a20f6e0647ea5de9e315c8e7bf9572c5026e"
    },
    {
        "hash": "5aa81f04faf94361852117b7155f94473cf42a8e",
        "author": "sdong",
        "date": "2014-03-13T13:06:08-07:00",
        "message": "Fix extra compaction tasks scheduled after D16767 in some cases\n\nSummary:\nWith D16767, there is a case compaction tasks are scheduled infinitely:\n(1) no flush thread is configured and more than 1 compaction threads\n(2) a flush is going on by one compaction hread\n(3) the state of SST files is in the state that versions_->current()->NeedsCompaction() will generate a false positive (return true actually there is no work to be done)\nIn that case, a infinite loop will be formed.\n\nThis patch would fix it.\n\nTest Plan: make all check\n\nReviewers: haobo, igor, ljin\n\nReviewed By: igor\n\nCC: dhruba, yhchiang, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16863",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5aa81f04faf94361852117b7155f94473cf42a8e"
    },
    {
        "hash": "02a2cb139bca84bb6b1bb6143c34ab17cda2fd40",
        "author": "Lei Jin",
        "date": "2014-03-12T22:20:22-07:00",
        "message": "fix VerifyDb in StressTest\n\nSummary:\nthis should fix the hash_skip_list issue, but I still see seqno\nassertion failure in the last run. Will continue investigating and\naddress that in a different diff\n\nTest Plan: make whitebox_crash_test\n\nReviewers: igor\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16851",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/02a2cb139bca84bb6b1bb6143c34ab17cda2fd40"
    },
    {
        "hash": "ee4b9966bcf95741c4c822e6924352f7f2e77ffc",
        "author": "Igor Canadi",
        "date": "2014-03-12T13:47:07-07:00",
        "message": "DeleteLogFiles in FailOverwritingBackups",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ee4b9966bcf95741c4c822e6924352f7f2e77ffc"
    },
    {
        "hash": "45ad75db80f31a44900ed5705a2e7527e2f6c02f",
        "author": "Igor Canadi",
        "date": "2014-03-12T09:38:59-07:00",
        "message": "Correct version of D16821",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/45ad75db80f31a44900ed5705a2e7527e2f6c02f"
    },
    {
        "hash": "86ba3e24e3d324bd0db5b8b24dc07ff30ed8cf02",
        "author": "Lei Jin",
        "date": "2014-03-11T16:33:42-07:00",
        "message": "make assert based on FLAGS_prefix_size\n\nSummary: as title\n\nTest Plan: running python tools/db_crashtest.py\n\nReviewers: igor\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16803",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/86ba3e24e3d324bd0db5b8b24dc07ff30ed8cf02"
    },
    {
        "hash": "56ca8338e5a86e92eb604ac5171528dd3aa78da3",
        "author": "Igor Canadi",
        "date": "2014-03-11T13:08:48-07:00",
        "message": "initialize static const outside of class",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/56ca8338e5a86e92eb604ac5171528dd3aa78da3"
    },
    {
        "hash": "d833f157382487ca3e0127ee0d87bdd0ae542e98",
        "author": "Igor Canadi",
        "date": "2014-03-11T12:14:09-07:00",
        "message": "Fix bug in VersionEdit::DebugString()",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_edit.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d833f157382487ca3e0127ee0d87bdd0ae542e98"
    },
    {
        "hash": "37472bb2790ff09a86a959e87600e29d955e761d",
        "author": "Igor Canadi",
        "date": "2014-03-11T12:08:42-07:00",
        "message": "Add MaxColumnFamily to VersionEdit::DebugString()",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_edit.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/37472bb2790ff09a86a959e87600e29d955e761d"
    },
    {
        "hash": "6c66bc08d9fdee1b0a3d1d3e6df557b02fcd0e7c",
        "author": "sdong",
        "date": "2014-03-11T11:37:40-07:00",
        "message": "Temp Fix of LogBuffer flushing\n\nSummary: To temp fix the log buffer flushing. Flush the buffer inside the lock. Clean the trunk before we find an eventual fix.\n\nTest Plan: make all check\n\nReviewers: haobo, igor\n\nReviewed By: igor\n\nCC: ljin, leveldb, yhchiang\n\nDifferential Revision: https://reviews.facebook.net/D16791",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6c66bc08d9fdee1b0a3d1d3e6df557b02fcd0e7c"
    },
    {
        "hash": "cb9802168f2c84a24af87b0dc08e0a4f9710c55d",
        "author": "Igor Canadi",
        "date": "2014-03-11T11:27:19-07:00",
        "message": "Add a comment after SignalAll()\n\nSummary: Having code after SignalAll has already caused 2 bugs. Let's make sure this doesn't happen again.\n\nTest Plan: no test\n\nReviewers: sdong, dhruba, haobo\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16785",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cb9802168f2c84a24af87b0dc08e0a4f9710c55d"
    },
    {
        "hash": "dad8603fc49d865d7ce3491581e1d5c6cbe92e7b",
        "author": "Igor Canadi",
        "date": "2014-03-11T09:47:29-07:00",
        "message": "[CF] Fix column family dropping\n\nSummary: Column family should be dropped after the change has been commited\n\nTest Plan: db stress\n\nReviewers: dhruba, haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16779",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dad8603fc49d865d7ce3491581e1d5c6cbe92e7b"
    },
    {
        "hash": "d5de22dc099311b59a9e3d735702b6b9f18c7855",
        "author": "Igor Canadi",
        "date": "2014-03-10T15:42:14-07:00",
        "message": "Call PurgeObsoleteFiles() only when HaveSomethingToDelete()\n\nSummary: as title\n\nTest Plan: fixed the build failure http://ci-builds.fb.com/job/rocksdb_build/987/console\n\nReviewers: haobo\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16743",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d5de22dc099311b59a9e3d735702b6b9f18c7855"
    },
    {
        "hash": "fac58c05046b6fb253bbdb31a218a5b55350b85e",
        "author": "sdong",
        "date": "2014-03-10T14:24:56-07:00",
        "message": "DBTest: remove perf_context's time > 0 check\n\nSummary: DBTest checks  perf_context.seek_internal_seek_time > 0 and perf_context.find_next_user_entry_time > 0, which is not reliable. Remove them.\n\nTest Plan: ./db_test\n\nReviewers: igor, haobo, ljin\n\nReviewed By: igor\n\nCC: dhruba, yhchiang, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16737",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fac58c05046b6fb253bbdb31a218a5b55350b85e"
    },
    {
        "hash": "a91aed615a793f1a62b38b0f08c0720cd5b2e11a",
        "author": "Haobo Xu",
        "date": "2014-03-10T14:13:38-07:00",
        "message": "[RocksDB] Minor cleanup of PurgeObsoleteFiles\n\nSummary: as title. also made info log output of file deletion a bit more descriptive.\n\nTest Plan: make check; db_bench and look at LOG output\n\nReviewers: igor\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16731",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a91aed615a793f1a62b38b0f08c0720cd5b2e11a"
    },
    {
        "hash": "d4f2c610d3088b9819ed1af76f628b28abe165a1",
        "author": "Igor Canadi",
        "date": "2014-03-07T18:43:21-08:00",
        "message": "Ignore dropped column families -- don't flush or compact them",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d4f2c610d3088b9819ed1af76f628b28abe165a1"
    },
    {
        "hash": "ebe2527f9a034de5eda4558e0cf6cfdab08016fb",
        "author": "Igor Canadi",
        "date": "2014-03-07T10:39:58-08:00",
        "message": "Merge pull request #94 from yumiOS/modify_ftruncate_warning\n\nModify the compile error about ftruncate()",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ebe2527f9a034de5eda4558e0cf6cfdab08016fb"
    },
    {
        "hash": "056a0286d279239c279d1e430e7a4b8619f4a337",
        "author": "Yumikiyo Osanai",
        "date": "2014-03-08T02:14:34+09:00",
        "message": "Modify the compile error about ftruncate()\n\nSummary:\nChange to store the return value from ftruncate().\nThe reason is that ftruncate() has \"warn_unused_result\" attribute in some environment.\n\nSigned-off-by: Yumikiyo Osanai <yumios.art@gmail.com>",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/056a0286d279239c279d1e430e7a4b8619f4a337"
    },
    {
        "hash": "eec86952062cf1e298647823707111a23e9ca4b5",
        "author": "Igor Canadi",
        "date": "2014-03-06T18:15:26-08:00",
        "message": "Delete local sv when destroying DB from stress test\n\nSummary: Not deleting local SV caused some an crash test issue: http://ci-builds.fb.com/job/rocksdb_asan_crash_test/83/console\n\nTest Plan: ran unit tests\n\nReviewers: ljin\n\nReviewed By: ljin\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16635",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eec86952062cf1e298647823707111a23e9ca4b5"
    },
    {
        "hash": "abeee9f2cb6948ab95cc3645d613cc498ac3ff70",
        "author": "Kai Liu",
        "date": "2014-03-05T16:21:36-08:00",
        "message": "Make sure GetUniqueID releated tests run on \"regular\" storage\n\nSummary:\nWith the use of tmpfs or ramfs, unit tests related to GetUniqueID()\nfailed because of the failure from ioctl, which doesn't work with these\nfancy file systems at all.\n\nI fixed this issue and make sure all related tests run on the \"regular\"\nstorage (disk or flash).\n\nTest Plan: TEST_TMPDIR=/dev/shm make check -j32\n\nReviewers: igor, dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16593",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/abeee9f2cb6948ab95cc3645d613cc498ac3ff70"
    },
    {
        "hash": "e2dd148a8bf0a2ded8ab9aba14b154bcf8b508b2",
        "author": "Igor Canadi",
        "date": "2014-03-05T12:47:44-08:00",
        "message": "Fix compile fail introduced by merge",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e2dd148a8bf0a2ded8ab9aba14b154bcf8b508b2"
    },
    {
        "hash": "a329dd1b25a43264691ac281667de792f7987a95",
        "author": "Igor Canadi",
        "date": "2014-03-05T12:27:39-08:00",
        "message": "Fix TEST_Destroy_DBImpl() to work with column families",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a329dd1b25a43264691ac281667de792f7987a95"
    },
    {
        "hash": "64138b5d9cae2990aa46157da97cdf1656c1a046",
        "author": "Lei Jin",
        "date": "2014-03-05T10:28:53-08:00",
        "message": "fix db_bench to use HashSkipList for real\n\nSummary:\nFor HashSkipList case, DBImpl has sanity check to see if prefix_extractor in\noptions is the same as the one in memtable factory. If not, it falls\nback to SkipList. As result, I was experimenting with SkipList\nperformance. No wonder it is much worse than LinkedList\n\nTest Plan: ran benchmark\n\nReviewers: haobo, sdong, igor\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16569",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/64138b5d9cae2990aa46157da97cdf1656c1a046"
    },
    {
        "hash": "51560ba7556073ffa14ac97143fefc8297b359e7",
        "author": "Lei Jin",
        "date": "2014-03-05T10:27:17-08:00",
        "message": "config max_background_flushes in db_bench\n\nSummary: as title\n\nTest Plan: make release\n\nReviewers: haobo, sdong, igor\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16437",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/51560ba7556073ffa14ac97143fefc8297b359e7"
    },
    {
        "hash": "c0ccf436488819b3101ea0305c7388757f2c237e",
        "author": "Igor Canadi",
        "date": "2014-03-05T09:13:07-08:00",
        "message": "MergingIterator assertion\n\nSummary: I wrote a test that triggers assertion in MergingIterator. I have not touched that code ever, so I'm looking for somebody with good understanding of the MergingIterator code to fix this. The solution is probably a one-liner. Let me know if you're willing to take a look.\n\nTest Plan: This test fails with an assertion `use_heap_ == false`\n\nReviewers: dhruba, haobo, sdong, kailiu\n\nReviewed By: sdong\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16521",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c0ccf436488819b3101ea0305c7388757f2c237e"
    },
    {
        "hash": "2b5155fb29d47389a67d6e8c9f15a98a821b750b",
        "author": "Igor Canadi",
        "date": "2014-03-05T09:00:53-08:00",
        "message": "CloseDB in BackupableDBTest to make valgrind happy",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2b5155fb29d47389a67d6e8c9f15a98a821b750b"
    },
    {
        "hash": "e8ecca9e8657cba9b8bc1777e61c5396f4a94cf2",
        "author": "sdong",
        "date": "2014-03-04T20:58:20-08:00",
        "message": "CleanupIteratorState() only to initialize DeletionState when super version cleanup needed\n\nSummary:\nTwo changes:\n1. DeletionState is only constructed when cleaning up is needed\n2. Fix the bug of deletion state construction bug. A change was made in a previous patch: https://reviews.facebook.net/rROCKSDB774ed89c2405ee058086b099cbc8b29e243739cc#71a34e2e However, it somehow got lost when merging\n\nTest Plan: make all check\n\nReviewers: kailiu, haobo, igor\n\nReviewed By: igor\n\nCC: igor, dhruba, i.am.jin.lei, yhchiang, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16233",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e8ecca9e8657cba9b8bc1777e61c5396f4a94cf2"
    },
    {
        "hash": "a01bda09977ae72798e53fb00efc18ef29f38faf",
        "author": "kailiu",
        "date": "2014-03-04T18:08:23-08:00",
        "message": "Fix a buggy assert\n\nSummary: The assert was pointless since if if prefix is the same as the whole key, assertion will surely fail. Reason behind is when performing the internal key comparison, if user keys are the same, *key with smaller transaction id* wins.\n\nTest Plan: make -j32 && make check\n\nReviewers: sdong, dhruba, haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16551",
        "modified_files_count": 1,
        "modified_files": [
            "table/filter_block.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a01bda09977ae72798e53fb00efc18ef29f38faf"
    },
    {
        "hash": "e21d5b8bbc9c5ef05caf740bd69366602953e591",
        "author": "Igor Canadi",
        "date": "2014-03-04T17:21:30-08:00",
        "message": "[CF] Flush all memtables on column family drop\n\nSummary: When column family is dropped, we want to delete all WALs that refer to it. To do that, we need to make them obsolete by flushing all the memtables\n\nTest Plan: column_family_test\n\nReviewers: dhruba, haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16557",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e21d5b8bbc9c5ef05caf740bd69366602953e591"
    },
    {
        "hash": "a5b1d2f146e89600a76384c6546d40838978d0ff",
        "author": "Lei Jin",
        "date": "2014-03-04T17:08:05-08:00",
        "message": "make key evenly distributed between 0 and FLAGS_num\n\nSummary:\nThe issue is that when FLAGS_num is small, the leading bytes of the key\nare padded with 0s. This makes all keys have the same prefix 00000000\n\nMost of the changes are just to make lint happy\n\nTest Plan: ran db_bench\n\nReviewers: sdong, haobo, igor\n\nReviewed By: sdong\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16317",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a5b1d2f146e89600a76384c6546d40838978d0ff"
    },
    {
        "hash": "a1d56e73ec48c48b67baa7e9592faa723aa9e825",
        "author": "kailiu",
        "date": "2014-03-03T22:19:49-08:00",
        "message": "Uncomment the unit tests in table test",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a1d56e73ec48c48b67baa7e9592faa723aa9e825"
    },
    {
        "hash": "f0ee2356af356978a378be710e28a308ff34d9c5",
        "author": "sdong",
        "date": "2014-03-03T17:50:27-08:00",
        "message": "Fix issue with iterator operations in this order: Prev(), Seek(), Prev()\n\nSummary:\nDue to a bad merge of D14163 and D14001 before checking in D14001, \"direction_ = kForward;\" in MergeIterator::Seek() was deleted my mistake (in commit b135d01e7bcdf4186ea852a5b4e6d14a3a815d77 ). It will generate wrong results or assert failure after the sequence of Prev() (or SeekToLast()), Seek() and Prev().\n\nFix it\n\nTest Plan: make all check\n\nReviewers: igor, haobo, dhruba\n\nReviewed By: igor\n\nCC: yhchiang, i.am.jin.lei, ljin, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16527",
        "modified_files_count": 1,
        "modified_files": [
            "table/merger.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f0ee2356af356978a378be710e28a308ff34d9c5"
    },
    {
        "hash": "5142b37000ab748433bdb5060a856663987067fb",
        "author": "Igor Canadi",
        "date": "2014-03-03T17:10:43-08:00",
        "message": "Fix a group commit bug in LogAndApply\n\nSummary:\nEncodeTo(&record) does not overwrite, it appends to it.\n\nThis means that group commit log and apply will look something like:\nrecord1\nrecord1record2\nrecord1record2record3\n\nI'm surprised this didn't show up in production, but I think the reason is that MANIFEST group commit almost never happens.\n\nThis bug turned up in column family work, where opening a database failed with \"adding a same column family twice\".\n\nTest Plan: Tested the change in column family branch and observed that the problem is gone (with db_stress)\n\nReviewers: dhruba, haobo\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16461",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5142b37000ab748433bdb5060a856663987067fb"
    },
    {
        "hash": "16d4e45c1295bd2f024e9cf65b4b6c18314694cf",
        "author": "Kai Liu",
        "date": "2014-03-01T11:50:35-08:00",
        "message": "Fix the memory leak in table index\n\nSummary:\n\nBinarySearchIndex didn't use unique_ptr to guard the block object nor\ndelete it in destructor, leading to valgrind failure for \"definite\nmemory leak\".\n\nTest Plan:\nre-ran the failed valgrind test cases",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/16d4e45c1295bd2f024e9cf65b4b6c18314694cf"
    },
    {
        "hash": "ff151132b39b7f3db67ba786c47bb1841adb4a2a",
        "author": "Kai Liu",
        "date": "2014-02-28T20:40:05-08:00",
        "message": "Fix the unit test failure in devbox\n\nSummary:\nMy last diff was developed in MacOS but in devserver environment error occurs.\n\nI dug into the problem and found the way we calcuate approximate data size is pretty out-of-date. We can use table properties to get more accurate results.\n\nTest Plan: ran ./table_test and passed\n\nReviewers: igor, dhruba, haobo, sdong\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16509",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ff151132b39b7f3db67ba786c47bb1841adb4a2a"
    },
    {
        "hash": "12966ec1bb22fecf9f43099b13626953d5d3e661",
        "author": "Igor Canadi",
        "date": "2014-02-28T12:22:45-08:00",
        "message": "Fix LogAndApply() group commit",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/12966ec1bb22fecf9f43099b13626953d5d3e661"
    },
    {
        "hash": "670f3ba21215e8ae02d0167d2dfb9d27acc77358",
        "author": "Igor Canadi",
        "date": "2014-02-28T11:25:38-08:00",
        "message": "[CF] Small refactor of Recover() and DumpManifest()",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/670f3ba21215e8ae02d0167d2dfb9d27acc77358"
    },
    {
        "hash": "099ad94306a31a7cac25a5b71b613361e4fe6088",
        "author": "Igor Canadi",
        "date": "2014-02-28T11:08:24-08:00",
        "message": "Set log number for column family",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/099ad94306a31a7cac25a5b71b613361e4fe6088"
    },
    {
        "hash": "99e4b40a55d0c501c02e2b28abdbc55d8ba58369",
        "author": "Kai Liu",
        "date": "2014-02-27T22:18:33-08:00",
        "message": "Fix the [-Werror=sign-compare] issues\n\nSummary:\n\nTest Plan:\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "util/thread_local_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/99e4b40a55d0c501c02e2b28abdbc55d8ba58369"
    },
    {
        "hash": "206b38f31c37b5aa42efba31b3f23e947792f925",
        "author": "Igor Canadi",
        "date": "2014-02-27T16:53:45-08:00",
        "message": "SetLogNumber in CreateColumnFamily",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/206b38f31c37b5aa42efba31b3f23e947792f925"
    },
    {
        "hash": "b41a3bc4da80df1caa76b3478512f78da3f66cfe",
        "author": "Igor Canadi",
        "date": "2014-02-27T16:49:49-08:00",
        "message": "[CF] Change flow of CreateColumnFamily\n\nSummary:\nPreviously, we first wrote to the manifest and then created internal data structure.\nNow, we first create internal data structure. That way, we can write out internal comparator to the manifest\n\nTest Plan: column_family_test\n\nReviewers: dhruba, haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16425",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b41a3bc4da80df1caa76b3478512f78da3f66cfe"
    },
    {
        "hash": "9a7b74954f9ffb7246d515e44239bf3054a70dfc",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-02-27T14:00:10-08:00",
        "message": "Refine the checks in InfoLogLevel test.\n\nSummary:\nInfoLogLevel test now checks the number of lines of the output log file\ninstead of the number of bytes in the log file.\n\nThis diff fixes the issue that the previous InfoLogLevel test in\nauto_roll_logger_test passed in make check but fails when valgrind\nis used.\n\nTest Plan: run with make check and valgrind.\n\nReviewers: kailiu\n\nReviewed By: kailiu\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16407",
        "modified_files_count": 1,
        "modified_files": [
            "util/auto_roll_logger_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9a7b74954f9ffb7246d515e44239bf3054a70dfc"
    },
    {
        "hash": "85b1b5e1b90cf1eb13224b89832e41758d1e0c46",
        "author": "Igor Canadi",
        "date": "2014-02-27T10:31:05-08:00",
        "message": "[CF] WaitForFlush() instead of sleeping\n\nSummary: If we sleep for 300ms the test fails in valgrind because it takes more than 300ms to flush. This way we WaitForFlush() when we're expecting flush, but still sleep and check if the flush happens even though it's not supposed to.\n\nTest Plan: notest\n\nReviewers: dhruba, haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16401",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/85b1b5e1b90cf1eb13224b89832e41758d1e0c46"
    },
    {
        "hash": "e41c060a060f34b33634d931e48fe2cf1d85dcc0",
        "author": "kailiu",
        "date": "2014-02-26T19:07:57-08:00",
        "message": "Make sure logger is safely released in `InfoLogLevel`\n\nSummary: fix the memory leak that was captured by jenkin build.\n\nTest Plan: ran the valgrind test locally\n\nReviewers: yhchiang\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16389",
        "modified_files_count": 1,
        "modified_files": [
            "util/auto_roll_logger_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e41c060a060f34b33634d931e48fe2cf1d85dcc0"
    },
    {
        "hash": "a04dbf6e49d7fe25ab99cbf2d4d7357d618b4545",
        "author": "sdong",
        "date": "2014-02-26T15:12:44-08:00",
        "message": "PlainTable::Next() should pass the error message from ReadKey()\n\nSummary:\nPlainTable::Next() should pass the error message from ReadKey(). Now it would return a wrong error message.\nAlso improve the messages of status when failing to read\n\nTest Plan: make all check\n\nReviewers: ljin, kailiu, haobo\n\nReviewed By: kailiu\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16365",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a04dbf6e49d7fe25ab99cbf2d4d7357d618b4545"
    },
    {
        "hash": "3c815464224f00f3f2f426382ea9ebbc9c957329",
        "author": "Igor Canadi",
        "date": "2014-02-26T14:41:18-08:00",
        "message": "[CF] Make LogDeletionTest less flakey\n\nSummary: Retry GetSortedWalFiles() and also wait 20ms before counting number of log files. WaitForFlush() doesn't necessarily wait for logs to be deleted, since logs are deleted outside of the mutex.\n\nTest Plan: column_family_test\n\nReviewers: dhruba, haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16371",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3c815464224f00f3f2f426382ea9ebbc9c957329"
    },
    {
        "hash": "5a917462771417846cd1ec114d0e1bcbb710661c",
        "author": "Igor Canadi",
        "date": "2014-02-25T12:57:43-08:00",
        "message": "log file is uint64_t",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5a917462771417846cd1ec114d0e1bcbb710661c"
    },
    {
        "hash": "4209516359860ed4da676f217a648c5ce932d743",
        "author": "Igor Canadi",
        "date": "2014-02-25T12:04:14-08:00",
        "message": "Schedule flush when waiting on flush\n\nSummary:\nThis will also help with avoiding the deadlock. If a flush failed and we're waiting for a memtable to be flushed, we should schedule a new flush and hope a new one succeedes.\n\nIf paranoid_checks = false, Wait() will still hang on ENOSPC, but at least it will automatically continue when the space frees up. Current behavior both hangs and deadlocks.\n\nAlso, I renamed some 'compaction' to 'flush'. 'compaction' was leveldb way of saying things.\n\nTest Plan: make check\n\nReviewers: dhruba, haobo, ljin\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16281",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4209516359860ed4da676f217a648c5ce932d743"
    },
    {
        "hash": "dea894ef8de6f5dabd616c14a05af2d261239ae5",
        "author": "Lei Jin",
        "date": "2014-02-25T10:43:46-08:00",
        "message": "expose wal_dir in db_bench\n\nSummary: as title\n\nTest Plan: ran db_bench\n\nReviewers: dhruba, haobo\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16269",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dea894ef8de6f5dabd616c14a05af2d261239ae5"
    },
    {
        "hash": "6ed450a58cd0bf9f299b0e279ce762125b79deea",
        "author": "Igor Canadi",
        "date": "2014-02-24T16:00:13-08:00",
        "message": "DeleteFile should schedule Flush or Compaction\n\nSummary:\nMore info here: https://github.com/facebook/rocksdb/issues/89\nIf flush fails because of ENOSPC, we have a deadlock problem. This is a quick fix that will continue the normal operation when user deletes the file and frees up the space on the device.\n\nWe need to address the issue more broadly with bg_error_ cleanup.\n\nTest Plan: make check\n\nReviewers: dhruba, haobo, ljin\n\nReviewed By: ljin\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16275",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6ed450a58cd0bf9f299b0e279ce762125b79deea"
    },
    {
        "hash": "ce2b1f7b445e49e5a6a9fbeb18db2ec55ac031c5",
        "author": "Thomas Adam",
        "date": "2014-02-23T17:58:38+01:00",
        "message": "added a test case for custom merge operator",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ce2b1f7b445e49e5a6a9fbeb18db2ec55ac031c5"
    },
    {
        "hash": "e90d3f7752f9e927d6288cc7099c179fa37e87f1",
        "author": "sdong",
        "date": "2014-02-19T10:58:39-08:00",
        "message": "First Transaction Logs Should Not Skip Storage Options Given\n\nSummary: Currently, the first transaction log file ignore bytes_per_sync and other storage-related options. It is not consistent. Fix it.\n\nTest Plan: make all check. See the options set in GDB.\n\nReviewers: haobo, kailiu\n\nReviewed By: haobo\n\nCC: igor, ljin, yhchiang, leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D16215",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e90d3f7752f9e927d6288cc7099c179fa37e87f1"
    },
    {
        "hash": "44a9cbda17e1ec37e6937c55b1b28e7e464447d0",
        "author": "Igor Canadi",
        "date": "2014-02-18T11:22:16-08:00",
        "message": "Make GetPropertiesOfAllTables not virtual",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/44a9cbda17e1ec37e6937c55b1b28e7e464447d0"
    },
    {
        "hash": "6aef661230fbf7c28ccc77d6e19782911fba41fc",
        "author": "Igor Canadi",
        "date": "2014-02-14T17:47:53-08:00",
        "message": "some improvements to CompressedCache test",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6aef661230fbf7c28ccc77d6e19782911fba41fc"
    },
    {
        "hash": "be7e273d83b746ecb32f9b51536768f4fc2f19db",
        "author": "Igor Canadi",
        "date": "2014-02-14T16:18:55-08:00",
        "message": "fix u/s comparison #83",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/be7e273d83b746ecb32f9b51536768f4fc2f19db"
    },
    {
        "hash": "59cffe02c404b3e5773166e4e00c2def09de8335",
        "author": "Kai Liu",
        "date": "2014-02-13T13:57:36-08:00",
        "message": "Benchmark table reader wiht nanoseconds\n\nSummary: nanosecnods gave us better view of the performance, especially when some operations are fast so that micro seconds may only reveal less informative results.\n\nTest Plan:\nsample output:\n\n    ./table_reader_bench --plain_table --time_unit=nanosecond\n    =======================================================================================================\n    InMemoryTableSimpleBenchmark:           PlainTable   num_key1:   4096   num_key2:   512   non_empty\n    =======================================================================================================\n    Histogram (unit: nanosecond):\n    Count: 6291456  Average: 475.3867  StdDev: 556.05\n    Min: 135.0000  Median: 400.1817  Max: 33370.0000\n    Percentiles: P50: 400.18 P75: 530.02 P99: 887.73 P99.9: 8843.26 P99.99: 9941.21\n    ------------------------------------------------------\n    [     120,     140 )        2   0.000%   0.000%\n    [     140,     160 )      452   0.007%   0.007%\n    [     160,     180 )    13683   0.217%   0.225%\n    [     180,     200 )    54353   0.864%   1.089%\n    [     200,     250 )   101004   1.605%   2.694%\n    [     250,     300 )   729791  11.600%  14.294% ##\n    [     300,     350 )   616070   9.792%  24.086% ##\n    [     350,     400 )  1628021  25.877%  49.963% #####\n    [     400,     450 )   647220  10.287%  60.250% ##\n    [     450,     500 )   577206   9.174%  69.424% ##\n    [     500,     600 )  1168585  18.574%  87.999% ####\n    [     600,     700 )   506875   8.057%  96.055% ##\n    [     700,     800 )   147878   2.350%  98.406%\n    [     800,     900 )    42633   0.678%  99.083%\n    [     900,    1000 )    16304   0.259%  99.342%\n    [    1000,    1200 )     7811   0.124%  99.466%\n    [    1200,    1400 )     1453   0.023%  99.490%\n    [    1400,    1600 )      307   0.005%  99.494%\n    [    1600,    1800 )       81   0.001%  99.496%\n    [    1800,    2000 )       18   0.000%  99.496%\n    [    2000,    2500 )        8   0.000%  99.496%\n    [    2500,    3000 )        6   0.000%  99.496%\n    [    3500,    4000 )        3   0.000%  99.496%\n    [    4000,    4500 )      116   0.002%  99.498%\n    [    4500,    5000 )     1144   0.018%  99.516%\n    [    5000,    6000 )     1087   0.017%  99.534%\n    [    6000,    7000 )     2403   0.038%  99.572%\n    [    7000,    8000 )     9840   0.156%  99.728%\n    [    8000,    9000 )    12820   0.204%  99.932%\n    [    9000,   10000 )     3881   0.062%  99.994%\n    [   10000,   12000 )      135   0.002%  99.996%\n    [   12000,   14000 )      159   0.003%  99.998%\n    [   14000,   16000 )       58   0.001%  99.999%\n    [   16000,   18000 )       30   0.000% 100.000%\n    [   18000,   20000 )       14   0.000% 100.000%\n    [   20000,   25000 )        2   0.000% 100.000%\n    [   25000,   30000 )        2   0.000% 100.000%\n    [   30000,   35000 )        1   0.000% 100.000%\n\nReviewers: haobo, dhruba, sdong\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16113",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_reader_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/59cffe02c404b3e5773166e4e00c2def09de8335"
    },
    {
        "hash": "39ae9f7988247ffff81159744b7609b2f4fcc735",
        "author": "Igor Canadi",
        "date": "2014-02-12T14:33:19-08:00",
        "message": "Remove constructors for ColumnFamilyHandle",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/39ae9f7988247ffff81159744b7609b2f4fcc735"
    },
    {
        "hash": "28b7f7faa8e3be6e93c8c446ccd8f2416c84cb3f",
        "author": "Lei Jin",
        "date": "2014-02-12T10:41:55-08:00",
        "message": "enable plain table in db_bench\n\nSummary: as title\n\nTest Plan: ran db_bench to gather stats\n\nReviewers: haobo, sdong\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16059",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/28b7f7faa8e3be6e93c8c446ccd8f2416c84cb3f"
    },
    {
        "hash": "265150cb490fb10e2e22b0e411d3a63180ce12d5",
        "author": "kailiu",
        "date": "2014-02-11T17:52:18-08:00",
        "message": "Fix problem 3 for issue #80",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_properties_collector_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/265150cb490fb10e2e22b0e411d3a63180ce12d5"
    },
    {
        "hash": "aa734ce9abcab3ff6a7e54c3bab28f337e03078f",
        "author": "kailiu",
        "date": "2014-02-11T14:16:46-08:00",
        "message": "Fix a member variables initialization order issue\n\nSummary:\nIn MacOS, I got issue with `Footer`'s default constructor, which initialized the magic number with some random number instead of 0.\nWith investigation, I found we forgot to make the kInvalidTableMagicNumber to be static. As a result, kInvalidTableMagicNumber was assgined to `table_magic_number_` before it is initialized (which will be populated with random number).\n\nTest Plan: passed current unit tests; also passed the unit tests for the incoming diff which used the default footer.\n\nReviewers: yhchiang\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16077",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aa734ce9abcab3ff6a7e54c3bab28f337e03078f"
    },
    {
        "hash": "745c181e20bd785e7415c08ea56c1d5e3f06cd12",
        "author": "kailiu",
        "date": "2014-02-10T17:05:14-08:00",
        "message": "Quick fix for table_test failure\n\nSummary:\n* Fixed the compression state array size bug.\n* Temporarily disable running `DoCompressionTest()` against bzip, which will fail the test.\n\nTest Plan: make && ./table_test\n\nReviewers: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D16065",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/745c181e20bd785e7415c08ea56c1d5e3f06cd12"
    },
    {
        "hash": "bc2ff597b8ef10148827c4ca9c72a7343b33e81b",
        "author": "Igor Canadi",
        "date": "2014-02-10T10:55:10-08:00",
        "message": "Fixed wrong comment GetTableMetaData -> GetLiveFilesMetaData",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bc2ff597b8ef10148827c4ca9c72a7343b33e81b"
    },
    {
        "hash": "9a270f3f6d3767bfe7e505593e58eed4b180578c",
        "author": "Kai Liu",
        "date": "2014-02-07T22:43:58-08:00",
        "message": "Fix the valgrind error in table test.",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9a270f3f6d3767bfe7e505593e58eed4b180578c"
    },
    {
        "hash": "0982c38020ccc4eb56234e0a2cd6c9c75cdbac3a",
        "author": "Dhruba Borthakur",
        "date": "2014-02-07T13:52:54-08:00",
        "message": "Fix compilation error with gcc 4.7\n\nSummary:\nFix compilation error with gcc 4.7\n\nTest Plan:\nmake clean\nmake\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/memtablerep.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0982c38020ccc4eb56234e0a2cd6c9c75cdbac3a"
    },
    {
        "hash": "4564b2e8f9a2da07fa84fb5f3bba007469052dfb",
        "author": "Igor Canadi",
        "date": "2014-02-06T13:05:03-08:00",
        "message": "Merge pull request #76 from lisyarus/fix_zlib_macro_bug\n\nFix build in case zlib not found",
        "modified_files_count": 1,
        "modified_files": [
            "port/port_posix.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4564b2e8f9a2da07fa84fb5f3bba007469052dfb"
    },
    {
        "hash": "b4f441f48a370d6abd8c06473dd905a4e6f8df70",
        "author": "Igor Canadi",
        "date": "2014-02-05T14:58:24-08:00",
        "message": "Fixed a bug introduced by previous commit",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b4f441f48a370d6abd8c06473dd905a4e6f8df70"
    },
    {
        "hash": "aa6fbbfae78bd6a08ef8e64ce0b69f2a365249fe",
        "author": "lisyarus",
        "date": "2014-02-06T01:34:18+04:00",
        "message": "Fix build in case zlib not found",
        "modified_files_count": 1,
        "modified_files": [
            "port/port_posix.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aa6fbbfae78bd6a08ef8e64ce0b69f2a365249fe"
    },
    {
        "hash": "183ba01a0e41018fd7721833b17cee882eb1a95a",
        "author": "Igor Canadi",
        "date": "2014-02-05T08:23:56-08:00",
        "message": "Merge pull request #71 from alberts/crc32\n\ncrc32c: choose function in static initialization",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/183ba01a0e41018fd7721833b17cee882eb1a95a"
    },
    {
        "hash": "d411dc58841c92d1100d9c0beb81a10818d6ae95",
        "author": "Albert Strasheim",
        "date": "2014-02-04T19:13:57-08:00",
        "message": "crc32c: choose function in static initialization\n\nBefore: 4.430 micros/op 225732 ops/sec; 881.8 MB/s (4K per op)\nAfter: 4.125 micros/op 242425 ops/sec; 947.0 MB/s (4K per op)",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d411dc58841c92d1100d9c0beb81a10818d6ae95"
    },
    {
        "hash": "87bda51d771d9873e0ec804f8b943b2e4e66219f",
        "author": "Kai Liu",
        "date": "2014-02-03T00:38:11-08:00",
        "message": "Merge pull request #58 from mlin/no-stdout\n\nEliminate stdout message when launching a posix thread.",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/87bda51d771d9873e0ec804f8b943b2e4e66219f"
    },
    {
        "hash": "dbbffbd77278f6c52b74a2251d3584d500b6d018",
        "author": "Igor Canadi",
        "date": "2014-01-31T14:43:16-08:00",
        "message": "Mark the log_number file number used\n\nSummary:\nVersionSet::next_file_number_ is always assumed to be strictly greater than VersionSet::log_number_. In our new recovery code, we artificially set log_number_  to be (log_number + 1), so that once we flush, we don't recover from the same log file again (this is important because of merge operator non-idempotence)\n\nWhen we set VersionSet::log_number_ to (log_number + 1), we also have to mark that file number used, such that next_file_number_ is increased to a legal level. Otherwise, VersionSet might assert.\n\nThis has not be a problem so far because here's what happens:\n1. assume next_file_number is 5, we're recovering log_number 10\n2. in DBImpl::Recover() we call MarkFileNumberUsed with 10. This will set VersionSet::next_file_number_ to 11.\n3. If there are some updates, we will call WriteTable0ForRecovery(), which will use file number 11 as a new table file and advance VersionSet::next_file_number_ to 12.\n4. When we LogAndApply() with log_number 11, assertion is true: assert(11 <= 12);\n\nHowever, this was a lucky occurrence. Even though this diff doesn't cause a bug, I think the issue is important to fix.\n\nTest Plan: In column families I have different recovery logic and this code path asserted. When adding MarkFileNumberUsed(log_number + 1) assert is gone.\n\nReviewers: dhruba, kailiu\n\nReviewed By: kailiu\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D15783",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dbbffbd77278f6c52b74a2251d3584d500b6d018"
    },
    {
        "hash": "56bea9f80d8feb5328e928609859f5bd88888980",
        "author": "Siying Dong",
        "date": "2014-01-31T09:59:52-08:00",
        "message": "When using Universal Compaction, Zero out seqID in the last file too\n\nSummary: I didn't figure out the reason why the feature of zeroing out earlier sequence ID is disabled in universal compaction. I do see bottommost_level is set correctly. It should simply work if we remove the constraint of universal compaction.\n\nTest Plan: make all check\n\nReviewers: haobo, dhruba, kailiu, igor\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D15423",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/56bea9f80d8feb5328e928609859f5bd88888980"
    },
    {
        "hash": "a46ac92138eb074620edad637a279a25d2dcbb6a",
        "author": "Yueh-Hsuan Chiang",
        "date": "2014-01-30T01:50:34-08:00",
        "message": "Allow command line tool sst-dump to display table properties.\n\nSummary:\nAdd option '--show_properties' to sst_dump tool to allow displaying\nproperty block of the specified files.\n\nTest Plan:\nRun sst_dump with the following arguments, which covers cases affected by\nthis diff:\n\n  1. with only --file\n  2. with both --file and --show_properties\n  3. with --file, --show_properties, and --from\n\nReviewers: kailiu, xjin\n\nDifferential Revision: https://reviews.facebook.net/D15453",
        "modified_files_count": 1,
        "modified_files": [
            "tools/sst_dump.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a46ac92138eb074620edad637a279a25d2dcbb6a"
    },
    {
        "hash": "3170abd297fd63fce3cddc44dfb926f4ffb32844",
        "author": "kailiu",
        "date": "2014-01-29T16:40:36-08:00",
        "message": "Remove unused classes\n\nSummary: This is a followup diff for https://reviews.facebook.net/D15447, which picks the most simple task: delete some unused memtable reps.\n\nTest Plan: make\n\nReviewers: haobo, dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D15585",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/memtablerep.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3170abd297fd63fce3cddc44dfb926f4ffb32844"
    },
    {
        "hash": "d118707f8d6fc92aa20321e480f3d7de9fcbda89",
        "author": "Lei Jin",
        "date": "2014-01-29T15:55:58-08:00",
        "message": "set bg_error_ when background flush goes wrong\n\nSummary: as title\n\nTest Plan: unit test\n\nReviewers: haobo, igor, sdong, kailiu, dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D15435",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d118707f8d6fc92aa20321e480f3d7de9fcbda89"
    },
    {
        "hash": "15999e728ec5d5ab8037be0f85b41ec1033aaf05",
        "author": "Igor Canadi",
        "date": "2014-01-29T14:06:59-08:00",
        "message": "Fix column family test (create directory)",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/15999e728ec5d5ab8037be0f85b41ec1033aaf05"
    },
    {
        "hash": "4662969bf5d4397db831a89c2d179884bf04fd71",
        "author": "Igor Canadi",
        "date": "2014-01-29T11:58:33-08:00",
        "message": "PurgeObsoleteFiles in DropColumnFamily\n\nSummary: When we drop the column family, we want to delete all the files from that column family.\n\nTest Plan: make check\n\nReviewers: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D15561",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4662969bf5d4397db831a89c2d179884bf04fd71"
    },
    {
        "hash": "e57f0cc1a1c19537f221c74b0171880edb3d48e3",
        "author": "Igor Canadi",
        "date": "2014-01-29T08:17:43-08:00",
        "message": "add include <atomic> to version_set.h",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e57f0cc1a1c19537f221c74b0171880edb3d48e3"
    },
    {
        "hash": "9a126ba3b3cb696e05d5b842ae8fe457d3b19f14",
        "author": "Lei Jin",
        "date": "2014-01-28T16:03:55-08:00",
        "message": "only corrupt private file checksum in backupable_db_test\n\nSummary:\nif it happens (randomly) to corrupt shared file in the test, then the\n    checksum will be inconsistent between meta files from different backup.\n    BackupEngine will then detect this issue and fail. But in reality, this\n    does not happen since the checksum is checked on every backup. So here,\n    only corrupt checksum of private file to let BackupEngine to construct\n    properly (but fail during restore).\n\nTest Plan: run test with valgrind\n\nReviewers: igor\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D15531",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9a126ba3b3cb696e05d5b842ae8fe457d3b19f14"
    },
    {
        "hash": "5d2c62822e0feb4620b4c68194a2a1d43bf7ca6f",
        "author": "Igor Canadi",
        "date": "2014-01-28T16:02:51-08:00",
        "message": "Only get the manifest file size if there is no error\n\nSummary:\nI came across this while working on column families. CorruptionTest::RecoverWriteError threw a SIGSEG because the descriptor_log_->file() was nullptr. I'm not sure why it doesn't happen in master, but better safe than sorry.\n\n@kailiu, can we get this in release, too?\n\nTest Plan: make check\n\nReviewers: kailiu, dhruba, haobo\n\nReviewed By: haobo\n\nCC: leveldb, kailiu\n\nDifferential Revision: https://reviews.facebook.net/D15513",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5d2c62822e0feb4620b4c68194a2a1d43bf7ca6f"
    },
    {
        "hash": "90f29ccbef4c49b7ecf80e97f50572d996d17fa8",
        "author": "Mark Callaghan",
        "date": "2014-01-27T15:06:04-08:00",
        "message": "Update monitoring to include average time per compaction and stall\n\nSummary:\nThe new columns are msComp and msStall that provide average time per compaction and stall for that level in milliseconds.\nLevel  Files Size(MB) Score Time(sec)  Read(MB) Write(MB)    Rn(MB)  Rnp1(MB)  Wnew(MB) RW-Amplify Read(MB/s) Write(MB/s)      Rn     Rnp1     Wnp1     NewW    Count   msComp   msStall  Ln-stall Stall-cnt\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  0        8       15   1.5         2         0        30         0         0        30        0.0       0.0        15.5        0        0        0        0       16      112       0.2       1.3      7568\n  1        8       16   1.6         1        26        26        15        11        16        3.5      17.6        18.1        8        6       13        7        3      362       0.0       0.0         0\n  2        1        2   0.0         0         0         2         0         0         2        0.0       0.0        18.4        0        0        0        0        1       50       0.0       0.0         0\n\nTask ID: #\n\nBlame Rev:\n\nTest Plan:\nrun db_bench\n\nRevert Plan:\n\nDatabase Impact:\n\nMemcache Impact:\n\nOther Notes:\n\nEImportant:\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: haobo\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D15345",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/90f29ccbef4c49b7ecf80e97f50572d996d17fa8"
    },
    {
        "hash": "68a91a2e6a7d05a5d1dcfc6513f5e559ce5eb583",
        "author": "Igor Canadi",
        "date": "2014-01-24T18:40:05-08:00",
        "message": "missing include",
        "modified_files_count": 1,
        "modified_files": [
            "db/column_family.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/68a91a2e6a7d05a5d1dcfc6513f5e559ce5eb583"
    },
    {
        "hash": "04afa32134e88fdb17e9521d3b0e015c777ea4c5",
        "author": "Igor Canadi",
        "date": "2014-01-24T18:32:38-08:00",
        "message": "Fix reduce levels\n\nReduceNumberOfLevels had segmentation fault in WriteSnapshot() since we\ndidn't change the number of levels in VersionSet (we consider them\nimmutable from now on). This fixes the problem.",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/04afa32134e88fdb17e9521d3b0e015c777ea4c5"
    },
    {
        "hash": "6a404de4ba9582885a9cd18f15e8f480f4e105fb",
        "author": "Igor Canadi",
        "date": "2014-01-24T15:54:18-08:00",
        "message": "Merge branch 'master' into columnfamilies",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6a404de4ba9582885a9cd18f15e8f480f4e105fb"
    },
    {
        "hash": "f653fdcf5a0ec7565e8eb3c0fe817ef794c7fb30",
        "author": "Igor Canadi",
        "date": "2014-01-24T15:51:06-08:00",
        "message": "Fixing iterator cleanup for Tailing iterator\n\nImmutable tailing iterator doesn't set CleanupState::mem, so we don't\nhave to unref it.",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f653fdcf5a0ec7565e8eb3c0fe817ef794c7fb30"
    },
    {
        "hash": "0ab766132bf20d5dc0d17373160d1d72d5f8dfe2",
        "author": "Kai Liu",
        "date": "2014-01-24T12:46:17-08:00",
        "message": "Re-org the table tests\n\nSummary:\nWe'll divide the table tests into 3 buckets, plain table test, block-based table test and general table feature test.\nThis diff does no real change and only does the rename and reorg.\n\nTest Plan: run table_test\n\nReviewers: sdong, haobo, igor, dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D15417",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ab766132bf20d5dc0d17373160d1d72d5f8dfe2"
    },
    {
        "hash": "7d991be400a89dcf28edbe529740c9db7eb7e026",
        "author": "Kai Liu",
        "date": "2014-01-24T11:10:32-08:00",
        "message": "Some small refactorings on table_test\n\nSummary:\n\nJust revise some hard-to-read or unnecessarily verbose code.\n\nTest Plan:\n\nmake check",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7d991be400a89dcf28edbe529740c9db7eb7e026"
    },
    {
        "hash": "4605e20c58b160e515daa8ba1751901f1283c208",
        "author": "Siying Dong",
        "date": "2014-01-24T10:14:23-08:00",
        "message": "If User setting of compaction multipliers overflow, use default value 1 instead\n\nSummary: Currently, compaction multipliers can overflow and cause unexpected behaviors. In this patch, we detect those overflows and use multiplier 1 for them.\n\nTest Plan: make all check\n\nReviewers: dhruba, haobo, igor, kailiu\n\nReviewed By: kailiu\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D15321",
        "modified_files_count": 1,
        "modified_files": [
            "db/compaction_picker.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4605e20c58b160e515daa8ba1751901f1283c208"
    },
    {
        "hash": "09489d395f1a1a8697594b3b56ceb9eb2262d671",
        "author": "Igor Canadi",
        "date": "2014-01-24T09:12:00-08:00",
        "message": "Fix a bug in DBImpl::CreateColumnFamily",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/09489d395f1a1a8697594b3b56ceb9eb2262d671"
    },
    {
        "hash": "eda924a03a54a082c5e95b727cf6d1da27cf751b",
        "author": "kailiu",
        "date": "2014-01-23T23:06:52-08:00",
        "message": "Remove an unused `GetLengthPrefixedSlice`\n\nSummary: We have 3 versions of GetLengthPrefixedSlice() and one of them is no longer in use.\n\nTest Plan: make\n\nReviewers: sdong, igor, haobo, dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D15399",
        "modified_files_count": 1,
        "modified_files": [
            "util/coding.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/eda924a03a54a082c5e95b727cf6d1da27cf751b"
    },
    {
        "hash": "f9a25dda9f8f58556b8779e267f5d65ecfbb8fee",
        "author": "Igor Canadi",
        "date": "2014-01-22T11:30:19-08:00",
        "message": "Fix wrong merge",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f9a25dda9f8f58556b8779e267f5d65ecfbb8fee"
    },
    {
        "hash": "4036d58dc904a7a552280e6151f73679c9d7bc15",
        "author": "kailiu",
        "date": "2014-01-21T18:02:55-08:00",
        "message": "Fix a Statistics-related unit test faulure\n\nSummary:\nIn my MacOS, the member variables are populated with random numbers after initialization.\nThis diff fixes it by fill these arrays with 0.\n\nTest Plan: make && ./table_test\n\nReviewers: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D15315",
        "modified_files_count": 1,
        "modified_files": [
            "util/statistics.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4036d58dc904a7a552280e6151f73679c9d7bc15"
    },
    {
        "hash": "7dea558e6d202c9dbf34e15077d5c9c8db594bf9",
        "author": "Siying Dong",
        "date": "2014-01-21T12:44:43-08:00",
        "message": "[Performance Branch] Fix a bug when merging from master\n\nSummary: Commit \"1304d8c8cefe66be1a3caa5e93413211ba2486f2\" (Merge branch 'master' into performance) removes a line in performance branch by mistake. This patch fixes it.\n\nTest Plan: make all check\n\nReviewers: haobo, kailiu, igor\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D15297",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7dea558e6d202c9dbf34e15077d5c9c8db594bf9"
    },
    {
        "hash": "4e8321bfeae8541fb5d827dfcb089e39078841bc",
        "author": "Mark Callaghan",
        "date": "2014-01-17T21:32:23-08:00",
        "message": "Boost access before mutex is unlocked\n\nSummary:\nThis moves the use of versions_ to before the mutex is unlocked\nto avoid a possible race.\n\nTask ID: #\n\nBlame Rev:\n\nTest Plan:\nmake check\n\nRevert Plan:\n\nDatabase Impact:\n\nMemcache Impact:\n\nOther Notes:\n\nEImportant:\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: haobo, dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D15279",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4e8321bfeae8541fb5d827dfcb089e39078841bc"
    },
    {
        "hash": "c8f16221ed9e0f23b8f11f046e7dddaf6472d2ea",
        "author": "kailiu",
        "date": "2014-01-14T20:24:48-08:00",
        "message": "Fix the return type of WriteBatch::Data().\n\nSummary: Quick fix for https://reviews.facebook.net/D15123\n\nTest Plan: Make check\n\nReviewers: sdong, vkrest\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D15165",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/write_batch.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c8f16221ed9e0f23b8f11f046e7dddaf6472d2ea"
    },
    {
        "hash": "9b51af5a17f3cfd754575894e090dd867fb47740",
        "author": "Siying Dong",
        "date": "2014-01-14T17:41:44-08:00",
        "message": "[RocksDB Performance Branch] DBImpl.NewInternalIterator() to reduce works inside mutex\n\nSummary: To reduce mutex contention caused by DBImpl.NewInternalIterator(), in this function, move all the iteration creation works out of mutex, only leaving object ref and get.\n\nTest Plan:\nmake all check\nwill run db_stress for a while too to make sure no problem.\n\nReviewers: haobo, dhruba, kailiu\n\nReviewed By: haobo\n\nCC: igor, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14589\n\nConflicts:\n\tdb/db_impl.cc",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9b51af5a17f3cfd754575894e090dd867fb47740"
    },
    {
        "hash": "1ed2404f27b351def723ecd59dd646007e500b3f",
        "author": "Igor Canadi",
        "date": "2014-01-14T15:54:11-08:00",
        "message": "Wrong number of levels is Invalid argument now, not corruption",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1ed2404f27b351def723ecd59dd646007e500b3f"
    },
    {
        "hash": "62910202844a6abe5fb5eb23fa0195a3d34d3cf9",
        "author": "Igor Canadi",
        "date": "2014-01-14T15:41:30-08:00",
        "message": "Fix test",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/62910202844a6abe5fb5eb23fa0195a3d34d3cf9"
    },
    {
        "hash": "1d9bac4d7f2e66f056f0ac21753f5c0e7379e1bf",
        "author": "Naman Gupta",
        "date": "2014-01-14T11:46:24-08:00",
        "message": "Use sanitized options while opening db\n\nSummary: We use SanitizeOptions() to set appropriate values for some options, based on other options. So we should use the sanitized options by default. Luckily it hasn't caused a bug yet, but can result in a bug in the fugture.\n\nTest Plan: make check\n\nReviewers: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14103",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1d9bac4d7f2e66f056f0ac21753f5c0e7379e1bf"
    },
    {
        "hash": "c4548d5f1f46645d996c7640d591397769ccbaf4",
        "author": "Siying Dong",
        "date": "2014-01-13T16:52:14-08:00",
        "message": "WriteBatch to provide a way for user to query data size directly and only return constant reference of data in Data()\n\nSummary:\nWriteBatch::Data() now is easily to be misuse by users. Also, there is no cheap way for user of WriteBatch to know the data size accumulated. This patch fix the problem by:\n(1) return a constant reference to Data() so it's obvious to caller what it means.\n(2) add a function to return data size directly\n\nTest Plan: make all check\n\nReviewers: haobo, igor, kailiu\n\nReviewed By: kailiu\n\nCC: zshao, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D15123",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/write_batch.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c4548d5f1f46645d996c7640d591397769ccbaf4"
    },
    {
        "hash": "00065d0d5d5f3e98f9463accb957a319c2602bf5",
        "author": "Igor Canadi",
        "date": "2014-01-13T13:27:47-08:00",
        "message": "Fix merge test\n\nCopy max_successive_merges from options to column family options",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/00065d0d5d5f3e98f9463accb957a319c2602bf5"
    },
    {
        "hash": "dd6ecdf3425209bc2971ae901bafa1ce26bc3037",
        "author": "Igor Canadi",
        "date": "2014-01-11T09:25:47-08:00",
        "message": "Use ASSERT_EQ() instead of assert() in merge_test",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dd6ecdf3425209bc2971ae901bafa1ce26bc3037"
    },
    {
        "hash": "62197d28b6b45ced3ca8756be5480ebce12ec490",
        "author": "Igor Canadi",
        "date": "2014-01-10T13:40:46-08:00",
        "message": "Merge pull request #62 from matope/fix-BackupableDBTest-NoDoubleCopy-test-fail\n\nFix share_table_files condition in BackupEngine constructor.",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/62197d28b6b45ced3ca8756be5480ebce12ec490"
    },
    {
        "hash": "f8642dacdebde6ca5d779059daeaffa204ea454f",
        "author": "ono_matope",
        "date": "2014-01-11T05:12:07+09:00",
        "message": "Fix share_table_files condition in BackupEngine constructor.\n\nThat makes BackupableDBTest.NoDoubleCopy test error.",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f8642dacdebde6ca5d779059daeaffa204ea454f"
    },
    {
        "hash": "9996e2d21c46b25534bf1d77484bcd0394e4a362",
        "author": "Kai Liu",
        "date": "2014-01-10T10:28:50-08:00",
        "message": "Merge pull request #61 from Yancey1989/master\n\nfix compile warning",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9996e2d21c46b25534bf1d77484bcd0394e4a362"
    },
    {
        "hash": "afdd2d1a46bc128d69dc839e680d6a5e29e995e0",
        "author": "Yancey",
        "date": "2014-01-10T17:56:35+08:00",
        "message": "fix compile warning",
        "modified_files_count": 1,
        "modified_files": [
            "util/arena_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/afdd2d1a46bc128d69dc839e680d6a5e29e995e0"
    },
    {
        "hash": "4c75e21c205b3cc1d38a0add110aecc1d43fa7ae",
        "author": "Mike Lin",
        "date": "2014-01-07T10:44:02-08:00",
        "message": "Eliminate stdout message when launching a posix thread.\n\nThis seems out of place as it's the only time RocksDB prints to stdout in the\nnormal course of operations. Thread IDs can still be retrieved from the LOG\nfile: cut -d ' ' -f2 LOG | sort | uniq | egrep -x '[0-9a-f]+'",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4c75e21c205b3cc1d38a0add110aecc1d43fa7ae"
    },
    {
        "hash": "7e70ff63d670480269af6b15361c1a70fc988154",
        "author": "kailiu",
        "date": "2014-01-06T11:11:19-08:00",
        "message": "Fix issue #57",
        "modified_files_count": 1,
        "modified_files": [
            "util/autovector_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7e70ff63d670480269af6b15361c1a70fc988154"
    },
    {
        "hash": "8c4eb71b5d173a22523aec741d33369684414ce8",
        "author": "Kai Liu",
        "date": "2014-01-03T18:27:33-08:00",
        "message": "Fix one more valgrind error in table_test",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8c4eb71b5d173a22523aec741d33369684414ce8"
    },
    {
        "hash": "9281a826f1f80b0e6d423f296ef5639aa48a331a",
        "author": "kailiu",
        "date": "2014-01-02T10:30:42-08:00",
        "message": "Hotfix the bug in table cache's GetSliceForFileNumber\n\nForgot to fix this problem in master branch. Already fixed it in performance branch.",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9281a826f1f80b0e6d423f296ef5639aa48a331a"
    },
    {
        "hash": "a094f3b3b5568f4af37c081c7cea4b77e747b2e3",
        "author": "Siying Dong",
        "date": "2013-12-26T16:57:07-08:00",
        "message": "TableCache.FindTable() to avoid the mem copy of file number\n\nSummary: I'm not sure what's the purpose of encoding file number to a new buffer for looking up the table cache. It seems to be unnecessary to me. With this patch, we point the lookup key to the address of the int64 of the file number.\n\nTest Plan: make all check\n\nReviewers: dhruba, haobo, igor, kailiu\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14811",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a094f3b3b5568f4af37c081c7cea4b77e747b2e3"
    },
    {
        "hash": "113a08c9291a8a723458f4426312e9c5add61139",
        "author": "kailiu",
        "date": "2013-12-26T15:47:07-08:00",
        "message": "Fix [-Werror=sign-compare] in autovector_test",
        "modified_files_count": 1,
        "modified_files": [
            "util/autovector_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/113a08c9291a8a723458f4426312e9c5add61139"
    },
    {
        "hash": "079a21ba99cd83c7e94f631c0ba6e250e690bbf4",
        "author": "kailiu",
        "date": "2013-12-26T15:12:30-08:00",
        "message": "Fix the unused variable warning message in mac os",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/079a21ba99cd83c7e94f631c0ba6e250e690bbf4"
    },
    {
        "hash": "bf4a48ccb356cf5ed205a30201e751218da7cfb0",
        "author": "Haobo Xu",
        "date": "2013-12-20T18:20:06-08:00",
        "message": "[RocksDB] [Performance Branch] Revert previous patch.\n\nSummary: The previous patch is wrong. rep_.resize(kHeader) just resets the header portion to zero, and should not cause a re-allocation if g++ does it right. I will go ahead and revert it.\n\nTest Plan: make check\n\nReviewers: dhruba, sdong\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14793",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bf4a48ccb356cf5ed205a30201e751218da7cfb0"
    },
    {
        "hash": "e94eea4527f2d7de82a6bf3303177977011e5dd9",
        "author": "Haobo Xu",
        "date": "2013-12-20T16:29:05-08:00",
        "message": "[RocksDB] [Performance Branch] Minor fix, Remove string resize from WriteBatch::Clear\n\nSummary: tmp_batch_ will get re-allocated for every merged write batch because of the existing resize in WriteBatch::Clear. Note that in DBImpl::BuildBatchGroup, we have a hard coded upper limit of batch size 1<<20 = 1MB already.\n\nTest Plan: make check\n\nReviewers: dhruba, sdong\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14787",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e94eea4527f2d7de82a6bf3303177977011e5dd9"
    },
    {
        "hash": "b26dc9562801d935ceb1f4410fbb709851840c99",
        "author": "Igor Canadi",
        "date": "2013-12-20T10:01:12-08:00",
        "message": "Initialize sequence number in BatchResult - issue #39",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/transaction_log.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b26dc9562801d935ceb1f4410fbb709851840c99"
    },
    {
        "hash": "ca92068b12c7d2c4ba9cfc6022dc7dfaf6ba0708",
        "author": "Mark Callaghan",
        "date": "2013-12-18T16:54:53-08:00",
        "message": "Add 'readtocache' test\n\nSummary:\nFor some tests I want to cache the database prior to running other tests on the same invocation\nof db_bench. The readtocache test ignores --threads and --reads so those can be used by other tests\nand it will still do a full read of --num rows with one thread. It might be invoked like:\n  db_bench --benchmarks=readtocache,readrandom --reads 100 --num 10000 --threads 8\n\nTask ID: #\n\nBlame Rev:\n\nTest Plan:\nrun db_bench\n\nRevert Plan:\n\nDatabase Impact:\n\nMemcache Impact:\n\nOther Notes:\n\nEImportant:\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14739",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ca92068b12c7d2c4ba9cfc6022dc7dfaf6ba0708"
    },
    {
        "hash": "14995a8ff3110bbcd19c34cd92a449ca3e435f5d",
        "author": "Siying Dong",
        "date": "2013-12-17T18:06:58-08:00",
        "message": "Move level0 sorting logic from Version::SaveTo() to Version::Finalize()\n\nSummary: I realized that \"D14409 Avoid sorting in Version::Get() by presorting them in VersionSet::Builder::SaveTo()\" is not done in an optimized place. SaveTo() is usually inside mutex. Move it to Finalize(), which is called out of mutex.\n\nTest Plan: make all check\n\nReviewers: dhruba, haobo, kailiu\n\nReviewed By: dhruba\n\nCC: igor, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14607",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/14995a8ff3110bbcd19c34cd92a449ca3e435f5d"
    },
    {
        "hash": "a8b8b11dc4f452fab29cb26989997eb740bfaea6",
        "author": "Siying Dong",
        "date": "2013-12-17T17:16:16-08:00",
        "message": "Get() Does Not Reserve space for to_delete memtables\n\nSummary: It seems to be a decision tradeoff in current codes: we make a malloc for every Get() to reduce one malloc for a flush inside mutex. It takes about 5% of CPU time in readrandom tests. We might consider the tradeoff to be the other way around.\n\nTest Plan: make all check\n\nReviewers: dhruba, haobo, igor\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14697",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a8b8b11dc4f452fab29cb26989997eb740bfaea6"
    },
    {
        "hash": "28c24de8be0cdb9917fd7832f19d2e6137e789b6",
        "author": "Siying Dong",
        "date": "2013-12-13T21:51:16-08:00",
        "message": "[RocksDB Peformance Branch] A bug in PlainTable format\n\nSummary: A bug to fix. IT's already fixed in D14457, but want to check it in sooner to unblock tests\n\nTest Plan: plain_table_db_test\n\nReviewers: nkg-, haobo\n\nReviewed By: nkg-\n\nCC: kailiu, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14673",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/28c24de8be0cdb9917fd7832f19d2e6137e789b6"
    },
    {
        "hash": "5f5e5fc2e95fdb048883928c05b127c4617ef290",
        "author": "kailiu",
        "date": "2013-12-13T17:03:19-08:00",
        "message": "Revert `atomic_size_t usage`\n\nSummary:\nBy disassemble the function, we found that the atomic variables do invoke the `lock` that locks the memory bus.\nAs a tradeoff, we protect the GetUsage by mutex and leave usage_ as plain size_t.\n\nTest Plan: passed `cache_test`\n\nReviewers: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14667",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5f5e5fc2e95fdb048883928c05b127c4617ef290"
    },
    {
        "hash": "5090316f0ded4bf9af04d78cbacb031824d31c3f",
        "author": "Haobo Xu",
        "date": "2013-12-13T14:21:59-08:00",
        "message": "[RocksDB] [Performance Branch] Trivia build fix\n\nSummary: make release complains signed unsigned comparison.\n\nTest Plan: make release\n\nReviewers: kailiu\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14661",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5090316f0ded4bf9af04d78cbacb031824d31c3f"
    },
    {
        "hash": "9718c790ec286fe2dad70dea491b54c34e5547a7",
        "author": "Siying Dong",
        "date": "2013-12-12T22:22:35-08:00",
        "message": "[Performance Branch] Fix a bug of PlainTable when building indexes\n\nSummary:\nPlainTable now has a bug of the ordering of indexes for the prefixes in the same bucket. I thought std::map guaranteed key order but it didn't, probably because I didn't use it properly. But seems to me that we don't need to make extra sorting as input prefixes are already sorted. Found by problem by running leaf4 against plain table. Replace the map with a vector. It should performs better too.\n\nAfter the fix, leaf4 unit tests are passing.\n\nTest Plan:\nrun plain_table_db_test\nAlso going to run db_test with plain table in the uncommitted branch.\n\nReviewers: haobo, kailiu\n\nReviewed By: haobo\n\nCC: nkg-, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14649",
        "modified_files_count": 1,
        "modified_files": [
            "table/plain_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9718c790ec286fe2dad70dea491b54c34e5547a7"
    },
    {
        "hash": "0cd1521af5b79257820a1c7c1d131ba3393c9e12",
        "author": "kailiu",
        "date": "2013-12-12T16:36:38-08:00",
        "message": "Completely remove argv_ since no one use it\n\nThere are still warning in some other environment, just move that useless variable `argv_`",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0cd1521af5b79257820a1c7c1d131ba3393c9e12"
    },
    {
        "hash": "0e24f97b9f75cd20622e5269a4b95e2347188119",
        "author": "kailiu",
        "date": "2013-12-12T15:40:44-08:00",
        "message": "Revert last commit and add \"unused\" attribute to suppress warning",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0e24f97b9f75cd20622e5269a4b95e2347188119"
    },
    {
        "hash": "bc9b488e922647bb4d7056ccf846a2b61df5dbb6",
        "author": "kailiu",
        "date": "2013-12-12T15:35:02-08:00",
        "message": "fix a warning in db_test when running `make release`",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bc9b488e922647bb4d7056ccf846a2b61df5dbb6"
    },
    {
        "hash": "417b453fa66d73afceb4af0444f62bcfb627c056",
        "author": "Igor Canadi",
        "date": "2013-12-12T14:57:18-08:00",
        "message": "[backupable db] Delete db_dir children when restoring backup\n\nSummary:\nI realized that manifest will get deleted by PurgeObsoleteFiles in DBImpl, but it is sill cleaner to delete\nfiles before we restore the backup\n\nTest Plan: backupable_db_test\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14619",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/417b453fa66d73afceb4af0444f62bcfb627c056"
    },
    {
        "hash": "e8ab1934d9cb3ffebd61097d67bb23439554b265",
        "author": "Siying Dong",
        "date": "2013-12-12T11:30:00-08:00",
        "message": "[RocksDB Performance Branch] DBImpl.NewInternalIterator() to reduce works inside mutex\n\nSummary: To reduce mutex contention caused by DBImpl.NewInternalIterator(), in this function, move all the iteration creation works out of mutex, only leaving object ref and get.\n\nTest Plan:\nmake all check\nwill run db_stress for a while too to make sure no problem.\n\nReviewers: haobo, dhruba, kailiu\n\nReviewed By: haobo\n\nCC: igor, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14589",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e8ab1934d9cb3ffebd61097d67bb23439554b265"
    },
    {
        "hash": "249e736bc5f978a58dae669154fd1eb3438f964b",
        "author": "Igor Canadi",
        "date": "2013-12-12T08:13:47-08:00",
        "message": "portable %lu printing",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/249e736bc5f978a58dae669154fd1eb3438f964b"
    },
    {
        "hash": "c28dd2a891cd1fe032c943798f5809bc087070f6",
        "author": "James Golick",
        "date": "2013-12-11T11:18:00-08:00",
        "message": "oops - missed a spot",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c28dd2a891cd1fe032c943798f5809bc087070f6"
    },
    {
        "hash": "bc5dd19b141b1faaba28ac8b122dc5d3d6fa1f56",
        "author": "Siying Dong",
        "date": "2013-12-11T10:50:09-08:00",
        "message": "[RocksDB Performance Branch] Avoid sorting in Version::Get() by presorting them in VersionSet::Builder::SaveTo()\n\nSummary: Pre-sort files in VersionSet::Builder::SaveTo() so that when getting the value, no need to sort them. It can avoid the costs of vector operations and sorting in Version::Get().\n\nTest Plan: make all check\n\nReviewers: haobo, kailiu, dhruba\n\nReviewed By: dhruba\n\nCC: nkg-, igor, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14409",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bc5dd19b141b1faaba28ac8b122dc5d3d6fa1f56"
    },
    {
        "hash": "41349d9ef1fb1cdeb9c7b942678199c90db2ce22",
        "author": "Siying Dong",
        "date": "2013-12-11T10:49:49-08:00",
        "message": "[RocksDB Performance Branch] Avoid sorting in Version::Get() by presorting them in VersionSet::Builder::SaveTo()\n\nSummary: Pre-sort files in VersionSet::Builder::SaveTo() so that when getting the value, no need to sort them. It can avoid the costs of vector operations and sorting in Version::Get().\n\nTest Plan: make all check\n\nReviewers: haobo, kailiu, dhruba\n\nReviewed By: dhruba\n\nCC: nkg-, igor, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14409",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/41349d9ef1fb1cdeb9c7b942678199c90db2ce22"
    },
    {
        "hash": "0304e3d2ff78ba0f173289d3762a880677d84301",
        "author": "Siying Dong",
        "date": "2013-12-11T10:02:17-08:00",
        "message": "When flushing mem tables, create iterators out of mutex\n\nSummary:\ncreating new iterators of mem tables can be expensive. Move them out of mutex.\nDBImpl::WriteLevel0Table()'s mems seems to be a local vector and is only used by flushing. memtables to flush are also immutable, so it should be safe to do so.\n\nTest Plan: make all check\n\nReviewers: haobo, dhruba, kailiu\n\nReviewed By: dhruba\n\nCC: igor, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14577\n\nConflicts:\n\tdb/db_impl.cc",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0304e3d2ff78ba0f173289d3762a880677d84301"
    },
    {
        "hash": "95a411d8530c5de173238ff34400f57df6bb8b1f",
        "author": "Siying Dong",
        "date": "2013-12-11T09:57:19-08:00",
        "message": "When flushing mem tables, create iterators out of mutex\n\nSummary:\ncreating new iterators of mem tables can be expensive. Move them out of mutex.\nDBImpl::WriteLevel0Table()'s mems seems to be a local vector and is only used by flushing. memtables to flush are also immutable, so it should be safe to do so.\n\nTest Plan: make all check\n\nReviewers: haobo, dhruba, kailiu\n\nReviewed By: dhruba\n\nCC: igor, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14577",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/95a411d8530c5de173238ff34400f57df6bb8b1f"
    },
    {
        "hash": "e8d40c31b3cca0c3e1ae9abe9b9003b1288026a9",
        "author": "Igor Canadi",
        "date": "2013-12-11T08:33:29-08:00",
        "message": "[RocksDB perf] Cache speedup\n\nSummary:\nI have ran a get benchmark where all the data is in the cache and observed that most of the time is spent on waiting for lock in LRUCache.\n\nThis is an effort to optimize LRUCache.\n\nTest Plan:\nThe data was loaded with fillseq. Then, I ran a benchmark:\n\n    /db_bench --db=/tmp/rocksdb_stat_bench --num=1000000 --benchmarks=readrandom --statistics=1 --use_existing_db=1 --threads=16 --disable_seek_compaction=1 --cache_size=20000000000 --cache_numshardbits=8 --table_cache_numshardbits=8\n\nI ran the benchmark three times. Here are the results:\nAFTER THE PATCH: 798072, 803998, 811807\nBEFORE THE PATCH: 782008, 815593, 763017\n\nReviewers: dhruba, haobo, kailiu\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14571",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e8d40c31b3cca0c3e1ae9abe9b9003b1288026a9"
    },
    {
        "hash": "204bb9cffd7ea5dd067b9e72650a4ca991da3867",
        "author": "Igor Canadi",
        "date": "2013-12-10T10:59:00-08:00",
        "message": "Get rid of LogFlush() in InternalIterator",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/204bb9cffd7ea5dd067b9e72650a4ca991da3867"
    },
    {
        "hash": "4815468be40121750521e94cf1c657cdab90137d",
        "author": "Siying Dong",
        "date": "2013-12-10T10:52:47-08:00",
        "message": "Fix another sign and unsign comparison in test",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4815468be40121750521e94cf1c657cdab90137d"
    },
    {
        "hash": "cbe7ffef9a2f63c44eb4f8d27cae2e5313b91069",
        "author": "Igor Canadi",
        "date": "2013-12-10T10:48:49-08:00",
        "message": "fix comparison between signed and unsigned",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/cbe7ffef9a2f63c44eb4f8d27cae2e5313b91069"
    },
    {
        "hash": "784e62f98dcf0b1dbcf3dedc3ad4c26bac5fae7e",
        "author": "Igor Canadi",
        "date": "2013-12-09T16:44:47-08:00",
        "message": "Fix unused variable warning",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/backupable/backupable_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/784e62f98dcf0b1dbcf3dedc3ad4c26bac5fae7e"
    },
    {
        "hash": "fa88cbc71e52d2c7c4d09c42a5bce24774482d9e",
        "author": "Vamsi Ponnekanti",
        "date": "2013-12-04T16:22:54-08:00",
        "message": "[Log dumper broken when merge operator is in log]\n\nSummary: $title\n\nTest Plan:\non my dev box\n\nRevert Plan: OK\n\nTask ID: #\n\nReviewers: emayanke, dhruba, haobo\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14451",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fa88cbc71e52d2c7c4d09c42a5bce24774482d9e"
    },
    {
        "hash": "45a2f2d8d30103f74b20ae19cd61be1f775c5ddb",
        "author": "lovro",
        "date": "2013-12-01T11:32:54-08:00",
        "message": "Fix build without glibc\n\nSummary: The preprocessor does not follow normal rules of && evaluation, tries to evaluate __GLIBC_PREREQ(2, 12) even though the defined() check fails.  This breaks the build if __GLIBC_PREREQ is absent.\n\nTest Plan: Try adding #undef __GLIBC_PREREQ above the offending line, build no longer breaks\n\nReviewed By: igor\n\nBlame Rev: 4c81383628db46d35b674000a3668b5a9a2498a6",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/45a2f2d8d30103f74b20ae19cd61be1f775c5ddb"
    },
    {
        "hash": "38feca4f35ca123d71d869b8f7bb814bf442ea12",
        "author": "Dhruba Borthakur",
        "date": "2013-11-29T18:03:02-08:00",
        "message": "Removed redundant slice_transform.h and memtablerep.h\n\nSummary:\nRemoved redundant slice_transform.h and memtablerep.h\n\nTest Plan:\nmake check\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/38feca4f35ca123d71d869b8f7bb814bf442ea12"
    },
    {
        "hash": "35ddf18367f386261517109052d12de01cfe47ba",
        "author": "Igor Canadi",
        "date": "2013-11-27T13:32:56-08:00",
        "message": "Don't do compression tests if we don't have compression libs\n\nSummary: These tests fail if compression libraries are not installed.\n\nTest Plan: Manually disabled snappy, observed tests not ran.\n\nReviewers: dhruba, kailiu\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14379",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/35ddf18367f386261517109052d12de01cfe47ba"
    },
    {
        "hash": "4c81383628db46d35b674000a3668b5a9a2498a6",
        "author": "lovro",
        "date": "2013-11-27T11:28:06-08:00",
        "message": "Set background thread name with pthread_setname_np()\n\nSummary: Makes it easier to monitor performance with top\n\nTest Plan: ./manual_compaction_test with `top -H` running.  Previously was two `manual_compacti`, now one shows `rocksdb:bg0`.\n\nReviewers: igor, dhruba\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14367",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4c81383628db46d35b674000a3668b5a9a2498a6"
    },
    {
        "hash": "8aac46d6864d56b1ff2baa4a7b01d2f2e72f28f9",
        "author": "Siying Dong",
        "date": "2013-11-26T14:05:37-08:00",
        "message": "[RocksDB Performance Branch] Fix a regression bug of munmap\n\nSummary:\nFix a stupid bug I just introduced in b59d4d5a5051263b4bfcef00913219ffe4654e42, which I didn't even mean to include.\nGCC might remove the munmap.\n\nTest Plan: Run it and make sure munmap succeeds\n\nReviewers: haobo, kailiu\n\nReviewed By: kailiu\n\nCC: dhruba, reconnect.grayhat, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14361",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8aac46d6864d56b1ff2baa4a7b01d2f2e72f28f9"
    },
    {
        "hash": "8478f380a0fd70081d8943867ea4f627dcd190f0",
        "author": "Dhruba Borthakur",
        "date": "2013-11-26T07:47:08-08:00",
        "message": "During benchmarking, I see excessive use of vector.reserve().\n\nSummary:\nThis code path can potentially accumulate multiple important_files for level 0.\nBut for other levels, it should have only one file in the\nimportant_files, so it is ok not to reserve excessive space, is it not?\n\nTest Plan: make check\n\nReviewers: haobo\n\nReviewed By: haobo\n\nCC: reconnect.grayhat, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14349",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8478f380a0fd70081d8943867ea4f627dcd190f0"
    },
    {
        "hash": "299f5c76bb3e9c85e9c9b2a81822823795adbe0e",
        "author": "Dhruba Borthakur",
        "date": "2013-11-25T11:23:42-08:00",
        "message": "Create new log file outside the dbmutex.\n\nSummary:\nAll filesystem Io should be done outside the dbmutex. There was one place\nwhen we have to roll the transaction log that we were creating the new log file\nwhile holding the dbmutex.\n\nI rearranged this code so that the act of creating the new transaction log\nfile is done without holding the dbmutex.  I also allocate the new memtable\noutside the dbmutex, this is important because creating the memtable\ncould be heavyweight.\n\nTest Plan: make check and dbstress\n\nReviewers: haobo, igor\n\nReviewed By: haobo\n\nCC: leveldb, reconnect.grayhat\n\nDifferential Revision: https://reviews.facebook.net/D14283",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/299f5c76bb3e9c85e9c9b2a81822823795adbe0e"
    },
    {
        "hash": "7b10fe9fac7a716e80216b7602e67be577a66c77",
        "author": "kailiu",
        "date": "2013-11-20T20:49:23-08:00",
        "message": "Fix a memory leak happened in table_test",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7b10fe9fac7a716e80216b7602e67be577a66c77"
    },
    {
        "hash": "071fb0d77b59c4f8cb05e363a8bfd4973db5a9bc",
        "author": "Siying Dong",
        "date": "2013-11-20T17:32:57-08:00",
        "message": "Inline a couple of functions and put one save lazily clearing\n\nSummary:\nMachine several functions inline.\nAlso, in DBIter.Seek() make value cleaning up lazily done.\nThese are for the use case that Seek() are called lots of times but few return values.\n\nTest Plan: make all check\n\nDifferential Revision: https://reviews.facebook.net/D14217",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_iter.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/071fb0d77b59c4f8cb05e363a8bfd4973db5a9bc"
    },
    {
        "hash": "15b31b57dff86f4374bc611ccf6be2c14e15a13b",
        "author": "Siying Dong",
        "date": "2013-11-20T17:29:35-08:00",
        "message": "MergingIterator.Seek() to lazily initialize MinHeap\n\nSummary:\nFor the use cases that prefix filtering is enabled, initializing heaps when doing MergingIterator.Seek() might introduce non-negligible costs. This patch makes it lazily done.\n\nTest Plan: make all check\n\nReviewers: haobo,dhruba,kailiu\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "table/merger.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/15b31b57dff86f4374bc611ccf6be2c14e15a13b"
    },
    {
        "hash": "37b459f0aaaaae238d599d1e84f9003570683beb",
        "author": "Haobo Xu",
        "date": "2013-11-20T14:34:52-08:00",
        "message": "[RocksDB] Test diff on performance branch\n\nSummary: trivia comment change\n\nTest Plan: Go through the step ofs developing under the performance branch\n\nReviewers: dhruba, kailiu, sdong\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14259",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_cache.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/37b459f0aaaaae238d599d1e84f9003570683beb"
    },
    {
        "hash": "1c8b819be2e6f70bc3232bcba8ca522bcecad667",
        "author": "kailiu",
        "date": "2013-11-20T13:45:32-08:00",
        "message": "Fix a memory leak happened in table_test",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1c8b819be2e6f70bc3232bcba8ca522bcecad667"
    },
    {
        "hash": "a617227a368368596b0f6bcdb9acbcd29b95ad00",
        "author": "Haobo Xu",
        "date": "2013-11-20T09:16:23-08:00",
        "message": "[RocksDB] fix prefix_test\n\nSummary: user comparator needs to work if either input is prefix only.\n\nTest Plan: ./prefix_test --write_buffer_size=100000 --total_prefixes=10000 --items_per_prefix=10\n\nReviewers: dhruba, igor\n\nReviewed By: igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14241",
        "modified_files_count": 1,
        "modified_files": [
            "db/prefix_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a617227a368368596b0f6bcdb9acbcd29b95ad00"
    },
    {
        "hash": "07e8078b17474c9fc9cf10affbb10e88d5f7b7a4",
        "author": "Igor Canadi",
        "date": "2013-11-18T20:33:34-08:00",
        "message": "Fix BZip constants\n\nSummary: We were using ZLIB constants in BZIP code path. This caused some errors, like: https://github.com/facebook/rocksdb/issues/8\n\nTest Plan: make clean; make check\n\nReviewers: dhruba, kailiu\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14175",
        "modified_files_count": 1,
        "modified_files": [
            "port/port_posix.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/07e8078b17474c9fc9cf10affbb10e88d5f7b7a4"
    },
    {
        "hash": "fc6142828829a34df88817b15c7836b71c482fbf",
        "author": "Igor Canadi",
        "date": "2013-11-17T21:58:16-08:00",
        "message": "Include <unistd.h> in db_test\n\nSummary: This is the only compile issue in Ubuntu. It might be better to include <unistd.h> only in env_posix and add Truncate function to Env, but since we use truncate only in db_test, I don't think it makes much sense.\n\nTest Plan: Rocksdb now compiles on Ubuntu!\n\nReviewers: dhruba, kailiu\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14127",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fc6142828829a34df88817b15c7836b71c482fbf"
    },
    {
        "hash": "75df72f2a5e829299ee5881641cfa403bd0a0bee",
        "author": "Kai Liu",
        "date": "2013-11-17T01:00:34-08:00",
        "message": "Change the logic in KeyMayExist()\n\nSummary:\nPreviously in KeyMayExist(), if DB::Get() returns non-Status::OK(), we assumes key may not exist.\nHowever, as if index block is not in block cache, Status::Incomplete() will return. Worse still, if\noptions::filter_delete is enabled, we may falsely ignore the \"delete\" operation:\n\n  https://github.com/facebook/rocksdb/blob/master/db/write_batch.cc#L217-L220\n\nThis diff fixes this bug and will let crash-test pass.\n\nTest Plan:\nRan:\n\n  ./db_stress --test_batches_snapshots=1 --ops_per_thread=1000000 --threads=32 --write_buffer_size=4194304 --destroy_db_initially=1 --reopen=0 --readpercent=5 --prefixpercent=45 --writepercent=35 --delpercent=5 --iterpercent=10 --db=/home/kailiu/local/newer --max_key=100000000 --disable_seek_compaction=0 --mmap_read=0 --block_size=16384 --cache_size=1048576 --open_files=500000 --verify_checksum=1 --sync=0 --disable_wal=0 --disable_data_sync=0 --target_file_size_base=2097152\n--target_file_size_multiplier=2 --max_write_buffer_number=3 --max_background_compactions=20 --max_bytes_for_level_base=10485760 --filter_deletes=1\n\nPreviously we'll see crash happens very soon.\n\nReviewers: igor, dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14115",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/75df72f2a5e829299ee5881641cfa403bd0a0bee"
    },
    {
        "hash": "55baa3d955e86f155b141e17ea920150999db8fb",
        "author": "Siying Dong",
        "date": "2013-11-15T22:23:12-08:00",
        "message": "Add an option to table_reader_bench to access the table from DB And Iterating non-existing prefix case.\n\nSummary: This patch adds an option to table_reader_bench that queries run against DB level (which has one table). It is useful if user wants to see the extra costs DB level introduces.\n\nTest Plan: Run the benchmark with and without the new parameter\n\nReviewers: haobo, dhruba, kailiu\n\nReviewed By: kailiu\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13863",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_reader_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/55baa3d955e86f155b141e17ea920150999db8fb"
    },
    {
        "hash": "21905dd4a8438b3ee78fa1d806e2b363a50afb35",
        "author": "Igor Canadi",
        "date": "2013-11-15T16:30:23-08:00",
        "message": "Start DeleteFileTest with clean plate\n\nSummary:\nRemove all the files from the test dir before the test. The test failed when there were some old files still in the directory, since it checks the file counts.\nThis is what caused jenkins' test failures. It was running fine on my machine so it was hard to repro.\n\nTest Plan:\n1. create an extra 000001.log file in the test directory\n2. run a ./deletefile_test - test failes\n3. patch ./deletefile_test with this\n4. test succeeds\n\nReviewers: haobo, dhruba\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14097",
        "modified_files_count": 1,
        "modified_files": [
            "db/deletefile_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/21905dd4a8438b3ee78fa1d806e2b363a50afb35"
    },
    {
        "hash": "29c931f70b8ddf8ca84208685bb9ba07cd4cb7d9",
        "author": "Igor Canadi",
        "date": "2013-11-14T22:42:02-08:00",
        "message": "Avoid populating live set if we don't need to\n\nSummary: Also changed some comments\n\nTest Plan: ./deletefile_test\n\nReviewers: haobo\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14091",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/29c931f70b8ddf8ca84208685bb9ba07cd4cb7d9"
    },
    {
        "hash": "94dde686bbed16b13bbfe28e284fd9dc0184bd07",
        "author": "Vamsi Ponnekanti",
        "date": "2013-11-14T17:13:24-08:00",
        "message": "[Merge operand meant for key K is being applied on wrong key]\n\nSummary:\nWe iterate until we find a different key than original key.\nikey is pointing to next key when we break out of loop.\nAfter the loop we apply all merge operands meant for original key\non the next key!\n\nTest Plan:\nNeed to give a build to Marcin to test out.\n\nRevert Plan: OK\n\nTask ID: #3181932\n\nReviewers: haobo, emayanke, dhruba\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14073",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/94dde686bbed16b13bbfe28e284fd9dc0184bd07"
    },
    {
        "hash": "e0ad0f26b8cd54b7dce2d883f7d15068532f62e6",
        "author": "Igor Canadi",
        "date": "2013-11-14T14:05:15-08:00",
        "message": "Fix bloom filters\n\nSummary: https://reviews.facebook.net/D13167 broke bloom filters. If filter is not in cache, we want to return true (safe thing). Am I right?\n\nTest Plan: when benchmarking https://reviews.facebook.net/D14031 I got different results when using bloom filters vs. when not using them. This fixed the issue. I will also be putting this change to the other diff, but that one will probably be in review for longer time.\n\nReviewers: kailiu, dhruba, haobo\n\nReviewed By: kailiu\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14085",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_based_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e0ad0f26b8cd54b7dce2d883f7d15068532f62e6"
    },
    {
        "hash": "fda8142f29c479034b5471a363104ca18030a21e",
        "author": "Igor Canadi",
        "date": "2013-11-13T14:54:54-08:00",
        "message": "Delete log files in the correct dir\n\nSummary: Log files are stored in wal_dir, not dbname_\n\nTest Plan: deletfile_test\n\nReviewers: nkg-\n\nReviewed By: nkg-\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14067",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fda8142f29c479034b5471a363104ca18030a21e"
    },
    {
        "hash": "d88d8ecf807accd403ac0a01db4d6a20e7e80de7",
        "author": "Igor Canadi",
        "date": "2013-11-12T20:32:07-08:00",
        "message": "Fix deleting files\n\nSummary: One more fix! In some cases, our filenames start with \"/\". Apparently, env_ can't handle filenames with double //\n\nTest Plan:\ndeletefile_test does not include this line in the LOG anymore:\n2013/11/12-18:11:43.150149 7fe4a6fff700 RenameFile logfile #3 FAILED -- IO error: /tmp/rocksdbtest-3574/deletefile_test//000003.log: No such file or directory\n\nReviewers: dhruba, haobo\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14055",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d88d8ecf807accd403ac0a01db4d6a20e7e80de7"
    },
    {
        "hash": "dad425562f168d7f9b47d859cf94b5dafc05e29a",
        "author": "Igor Canadi",
        "date": "2013-11-12T10:07:55-08:00",
        "message": "Move the comment\n\nSummary: Moving the comment per @haobo suggestion.\n\nTest Plan: No\n\nReviewers: haobo\n\nReviewed By: haobo\n\nCC: leveldb, haobo\n\nDifferential Revision: https://reviews.facebook.net/D14019",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dad425562f168d7f9b47d859cf94b5dafc05e29a"
    },
    {
        "hash": "4abd219cfcb2f4050bf3221fb8fad258d5b147da",
        "author": "Igor Canadi",
        "date": "2013-11-11T21:41:32-08:00",
        "message": "Combine two FindObsoleteFiles()\n\nSummary: We don't need to call FindObsoleteFiles() twice\n\nTest Plan: deletefile_test\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14007",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4abd219cfcb2f4050bf3221fb8fad258d5b147da"
    },
    {
        "hash": "0ef628537c52a655eba1c2bf3e2f4cb34f923062",
        "author": "Kai Liu",
        "date": "2013-11-11T21:05:16-08:00",
        "message": "Don't not suggest flushing data when data block is still empty\n\nSummary:\n\nThis diff fix the bug when the Options::block_size is too small.",
        "modified_files_count": 1,
        "modified_files": [
            "table/flush_block_policy.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0ef628537c52a655eba1c2bf3e2f4cb34f923062"
    },
    {
        "hash": "94e139f94d97628cfd633d32bbad8185d2f8add4",
        "author": "Igor Canadi",
        "date": "2013-11-11T21:03:41-08:00",
        "message": "Fixing failed delete file test\n\nSummary: FindObsoleteFiles() has to be called before PurgeObsoleteFiles() because FindObsoleteFiles() sets manifest_file_number, log_number and prev_log_number to valid values.\n\nTest Plan: deletefile_test now works\n\nReviewers: dhruba, emayanke, kailiu\n\nReviewed By: kailiu\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13995",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/94e139f94d97628cfd633d32bbad8185d2f8add4"
    },
    {
        "hash": "318a4919d209a7c42332baea7e9ab5703f759167",
        "author": "Dhruba Borthakur",
        "date": "2013-11-11T16:01:13-08:00",
        "message": "Fix valgrind check by initialising DeletionState.\n\nSummary:\nThe valgrind error was introduced by commit\n1510339e5257073af82f8c07e6fa1f2a9144e6aa. Initialize DeletionState\nin constructor.\n\nTest Plan: valgrind --leak-check=yes ./deletefile_test\n\nReviewers: igor, kailiu\n\nReviewed By: kailiu\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13983",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/318a4919d209a7c42332baea7e9ab5703f759167"
    },
    {
        "hash": "551ecfa41694e66d0354bbeeaa88d237c2ff1dfb",
        "author": "Kai Liu",
        "date": "2013-11-10T01:17:32-08:00",
        "message": "Move down the time consuming tests in table_test\n\nSummary:\n\nit helps us to better check the tests we really care.\n\nTest Plan:\n\nmake",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/551ecfa41694e66d0354bbeeaa88d237c2ff1dfb"
    },
    {
        "hash": "dd218bbc88e6ce9f2365b8cf35cd2714352381f3",
        "author": "Igor Canadi",
        "date": "2013-11-08T12:23:12-08:00",
        "message": "Forgot to change interface everywhere\n\nSummary: Changed the name and interface for creating HashSkipListRep. Forgot to change it in db_test.\n\nTest Plan: make db_test\n\nReviewers: haobo\n\nReviewed By: haobo\n\nDifferential Revision: https://reviews.facebook.net/D13965",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dd218bbc88e6ce9f2365b8cf35cd2714352381f3"
    },
    {
        "hash": "bba6595b1f3f42cf79bb21c2d5b981ede1cc0063",
        "author": "Kai Liu",
        "date": "2013-11-07T15:46:48-08:00",
        "message": "Fix the valgrind error\n\nSummary: I this bug from valgrind report and found a place that may potentially leak memory.\n\nTest Plan: re-ran the valgrind and no error any more\n\nReviewers: emayanke\n\nReviewed By: emayanke\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13959",
        "modified_files_count": 1,
        "modified_files": [
            "db/transaction_log_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bba6595b1f3f42cf79bb21c2d5b981ede1cc0063"
    },
    {
        "hash": "292c2b33570b5438a9d8226c8d870ad67df4f43a",
        "author": "Dhruba Borthakur",
        "date": "2013-11-06T15:40:26-08:00",
        "message": "Fix stress test failure when using mmap-reads.\n\nSummary:\nThe mmap-read file->Read() does not use the scratch buffer to\nread in file-contents.\n\nTest Plan: ./db_stress --test_batches_snapshots=1 --ops_per_thread=100000000 --threads=32 --write_buffer_size=4194304 --destroy_db_initially=0 --reopen=0 --readpercent=45 --prefixpercent=5 --writepercent=35 --delpercent=5 --iterpercent=10 --db=/tmp/dhruba --max_key=100000000 --disable_seek_compaction=0 --mmap_read=1 --block_size=16384 --cache_size=1048576 --open_files=500000 --verify_checksum=1 --sync=1 --disable_wal=0 --disable_data_sync=0 --target_file_size_base=2097152 --target_file_size_multiplier=2 --max_write_buffer_number=3 --max_background_compactions=20 --max_bytes_for_level_base=10485760 --filter_deletes=0\n\nReviewers: haobo, kailiu\n\nReviewed By: kailiu\n\nCC: leveldb, kailiu, emayanke\n\nDifferential Revision: https://reviews.facebook.net/D13923",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/292c2b33570b5438a9d8226c8d870ad67df4f43a"
    },
    {
        "hash": "95a8213f75a6d15966ccb1a3bb6586a2a5845ce2",
        "author": "Igor Canadi",
        "date": "2013-11-06T14:19:46-08:00",
        "message": "Log flush every 0 seconds\n\nSummary: We have to be able to catch last few log outputs before a crash\n\nTest Plan: no\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13917",
        "modified_files_count": 1,
        "modified_files": [
            "util/posix_logger.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/95a8213f75a6d15966ccb1a3bb6586a2a5845ce2"
    },
    {
        "hash": "36409e00162731b94ab3104e70a8d8f091a6ca2a",
        "author": "Igor Canadi",
        "date": "2013-11-06T14:11:52-08:00",
        "message": "Fix slow no-io iterator\n\nSummary:\nThis fixes #3130525. Dhruba's suggestion and Tnovak's implementation :)\n\nThe issue was with SkipEmptyDataBlocksForward(), but I also changed SkipEmptyDataBlocksBackward(). Is that OK?\n\nTest Plan: Run the logdevice test\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13911",
        "modified_files_count": 1,
        "modified_files": [
            "table/two_level_iterator.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/36409e00162731b94ab3104e70a8d8f091a6ca2a"
    },
    {
        "hash": "39190588e17e6d45ab3295d9837700de2b5fd98e",
        "author": "Dhruba Borthakur",
        "date": "2013-11-05T16:11:34-08:00",
        "message": "Fix failure in rocksdb unit test CompressedCache\n\nSummary:\nThe problem was that there was only a single key-value in a block\nand its compressibility was less than 88%. Rocksdb refuses to\ncompress a block unless its compresses to lesser than 88% of its\noriginal size. If a block is not compressed, it does nto get inserted\ninto the compressed block cache.\n\nCreate the test data so that multiple records fit into the same\ndata block. This increases the compressibility of these data block.\n\nTest Plan: ./db_test\n\nReviewers: kailiu, haobo\n\nReviewed By: kailiu\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13905",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/39190588e17e6d45ab3295d9837700de2b5fd98e"
    },
    {
        "hash": "7845fd9db903f8075a7c78e59f8a1f11e4c33e42",
        "author": "Dhruba Borthakur",
        "date": "2013-11-05T11:12:39-08:00",
        "message": "Fixed valgrind error in DBTest.CompressedCache\n\nSummary:\nFixed valgrind error in DBTest.CompressedCache.\nThis fixes the valgrind error (thanks to Haobo). I am still trying to reproduce the test-failure case deterministically.\n\nTest Plan: db_test\n\nReviewers: haobo\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13899",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7845fd9db903f8075a7c78e59f8a1f11e4c33e42"
    },
    {
        "hash": "beeb74be6f8b19f99e6878b3b14c8ba4e2e862c5",
        "author": "Igor Canadi",
        "date": "2013-11-01T12:32:27-07:00",
        "message": "Move I/O outside of lock\n\nSummary:\nI'm figuring out how Version[Set, Edit, ] classes work and I stumbled on this.\n\nIt doesn't seem that the comment is accurate anymore. What I read is when the manifest grows too big, create a new file (and not only when we call LogAndApply for the first time).\n\nTest Plan: make check (currently running)\n\nReviewers: dhruba, haobo, kailiu, emayanke\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13839",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/beeb74be6f8b19f99e6878b3b14c8ba4e2e862c5"
    },
    {
        "hash": "82b7e37f6eeb554332b2f0bc30bd218c65281f48",
        "author": "Siying Dong",
        "date": "2013-10-31T15:26:06-07:00",
        "message": "Fix a bug of table_reader_bench\n\nSummary: Iterator benchmark case is timed incorrectly. Fix it\n\nTest Plan: Run the benchmark\n\nReviewers: haobo, dhruba\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13845",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_reader_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/82b7e37f6eeb554332b2f0bc30bd218c65281f48"
    },
    {
        "hash": "138a8eee8e50c888886f798c0e680ec2c67f0263",
        "author": "Igor Canadi",
        "date": "2013-10-31T11:47:22-07:00",
        "message": "Fix make release\n\nSummary: Don't define if already defined.\n\nTest Plan: Running make release in parallel, will not commit if it fails.\n\nReviewers: emayanke\n\nReviewed By: emayanke\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13833",
        "modified_files_count": 1,
        "modified_files": [
            "tools/blob_store_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/138a8eee8e50c888886f798c0e680ec2c67f0263"
    },
    {
        "hash": "068a819ac991342e3ae05e401b7ba6dbd7c98f71",
        "author": "Siying Dong",
        "date": "2013-10-29T14:29:03-07:00",
        "message": "Fix valgrind_check problem of simple_table_db_test.cc\n\nSummary: Two memory issues caused valgrind_check to fail on simple_table_db_test. Fix it\n\nTest Plan: make -j32 valgrind_check\n\nReviewers: kailiu, haobo, dhruba\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13773",
        "modified_files_count": 1,
        "modified_files": [
            "db/simple_table_db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/068a819ac991342e3ae05e401b7ba6dbd7c98f71"
    },
    {
        "hash": "79d8dad3316e3ef66fa72f8081ba56ea0655a3d3",
        "author": "Kai Liu",
        "date": "2013-10-28T21:23:17-07:00",
        "message": "Change a typo in method signature",
        "modified_files_count": 1,
        "modified_files": [
            "table/block_builder.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/79d8dad3316e3ef66fa72f8081ba56ea0655a3d3"
    },
    {
        "hash": "8ace6b0f9146bf60981efe95e8b4d426cb1aa9e0",
        "author": "Igor Canadi",
        "date": "2013-10-28T17:42:33-07:00",
        "message": "Run benchmark with no debug\n\nSummary: assert(Overlap) significantly slows down the benchmark. Ignore assertions when executing blob_store_bench.\n\nTest Plan: Ran the benchmark\n\nReviewers: dhruba, haobo, kailiu\n\nReviewed By: kailiu\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13737",
        "modified_files_count": 1,
        "modified_files": [
            "tools/blob_store_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8ace6b0f9146bf60981efe95e8b4d426cb1aa9e0"
    },
    {
        "hash": "17991cd5a04950555e985d3aef67c18ddd12a096",
        "author": "Igor Canadi",
        "date": "2013-10-28T16:31:44-07:00",
        "message": "Fix data race in BlobStore benchmark\n\nSummary: Apparently C++ doesn't like it if you copy around its atomic<> variables. When running a benchmark for a longer time, benchmark used to stall. Changed WorkerThread in config to WorkerThread*. It works now.\n\nTest Plan: Ran benchmark\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13731",
        "modified_files_count": 1,
        "modified_files": [
            "tools/blob_store_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/17991cd5a04950555e985d3aef67c18ddd12a096"
    },
    {
        "hash": "7e91b86f4d0e9de9b4e83612f530e46abbd374ed",
        "author": "Kai Liu",
        "date": "2013-10-28T14:34:27-07:00",
        "message": "Fix a valgrind warning\n\nSummary:\nA latest valgrind test found a recently added unit test has memory leak,\nwhich is because DB is not closed at the end of the test.\n\nTest Plan: re-run the valgrind locally and make sure there's no memory leakage any more.\n\nReviewers: emayanke\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13725",
        "modified_files_count": 1,
        "modified_files": [
            "db/deletefile_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7e91b86f4d0e9de9b4e83612f530e46abbd374ed"
    },
    {
        "hash": "1ca86f0391bd4e2d262afef0314a241940d445a8",
        "author": "Kai Liu",
        "date": "2013-10-28T10:51:34-07:00",
        "message": "Fix a bug that index block's restart_block_interval is not 1\n\nSummary:\n\nThis bug may affect the seek performance.\n\nTest Plan:\n\nmake\nmake check\n\nAlso gdb into some index block builder to make sure the restart_block_interval is `1`.",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1ca86f0391bd4e2d262afef0314a241940d445a8"
    },
    {
        "hash": "a1d38a41fdc5bbab4c2d897c1bc076c8694db810",
        "author": "Kai Liu",
        "date": "2013-10-27T23:11:13-07:00",
        "message": "fix the error message in debug mode\n\nSummary:\n\nmy fix patch introduced a new error in debug mode.\n\nTest Plan:\n\n`make` and `make release`",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtablelist.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a1d38a41fdc5bbab4c2d897c1bc076c8694db810"
    },
    {
        "hash": "39c14891b695fc02fda5b45d77ddfd0f80c41816",
        "author": "Kai Liu",
        "date": "2013-10-27T22:57:45-07:00",
        "message": "Fix the gcc warning for unused variable\n\nSummary: Fix the unused variable warning for `first` when running `make release`\n\nTest Plan:\nmake\nmake check\n\nReviewers: dhruba, igor\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13695",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtablelist.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/39c14891b695fc02fda5b45d77ddfd0f80c41816"
    },
    {
        "hash": "e56ce0369170e5d977e4cb6ecd37e27190b6541b",
        "author": "Mayank Agarwal",
        "date": "2013-10-23T11:34:22-07:00",
        "message": "Hardcoding temp file name for Identity file to 000000.dbtmp just like it's done for CURRENT file\n\nSummary: as per Dhruba's suggestion\n\nTest Plan: make all check; Seen the Id getting generated properly in db_repl_stress\n\nReviewers: dhruba, kailiu\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13635",
        "modified_files_count": 1,
        "modified_files": [
            "db/filename.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e56ce0369170e5d977e4cb6ecd37e27190b6541b"
    },
    {
        "hash": "c674b42d522408d870b1c3325886b5de9fb84aa7",
        "author": "Igor Canadi",
        "date": "2013-10-21T10:23:56-07:00",
        "message": "Rephrasing the comment\n\nSummary: Per @haobo's request, rephrasing the comment for allocate\n\nTest Plan: It's a comment!\n\nReviewers: haobo, kailiu\n\nReviewed By: kailiu\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13575",
        "modified_files_count": 1,
        "modified_files": [
            "util/blob_store.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c674b42d522408d870b1c3325886b5de9fb84aa7"
    },
    {
        "hash": "43ee5e2b3a26ec1958312fe38524b49da353ad81",
        "author": "Kai Liu",
        "date": "2013-10-20T22:02:05-07:00",
        "message": "Fix the valgrind error in newly added unittests for table stats\n\nSummary:\n\nPrevious the newly added test called NewBloomFilter without releasing it at the end of the test, which resulted in memory leak and was detected by valgrind.\n\nTest Plan:\n\nRan valgrind test.",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/43ee5e2b3a26ec1958312fe38524b49da353ad81"
    },
    {
        "hash": "bcc85579019644172b77dfafc2d87bbbaf88a9c3",
        "author": "Igor Canadi",
        "date": "2013-10-17T22:15:57-07:00",
        "message": "tmpfs does not support fallocate\n\nSummary: This caused Siying's unit test to fail.\n\nTest Plan: Unittest\n\nReviewers: dhruba, kailiu, haobo\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13539",
        "modified_files_count": 1,
        "modified_files": [
            "util/blob_store.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/bcc85579019644172b77dfafc2d87bbbaf88a9c3"
    },
    {
        "hash": "6731997f64e027fa771172e9d881c6983816ac34",
        "author": "Vamsi Ponnekanti",
        "date": "2013-10-16T18:06:54-07:00",
        "message": "[ldb compact is not allowing ttl flag]\n\nSummary: Allow ttl flag\n\nTest Plan:\ntested on my database that has merge operations and ttl\n\nRevert Plan: OK\n\nTask ID: #3038186\n\nReviewers: emayanke, dhruba, haobo\n\nReviewed By: emayanke\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13503",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6731997f64e027fa771172e9d881c6983816ac34"
    },
    {
        "hash": "b825df81e2a9c1a961c86787e51c72b1adf43289",
        "author": "Dhruba Borthakur",
        "date": "2013-10-15T13:57:29-07:00",
        "message": "Fix error in previous commit of 'ftruncate' to 'fallocate'.\n\nSummary:\nFix error in previous commit of 'ftruncate' to 'fallocate'.\n\nTest Plan:\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b825df81e2a9c1a961c86787e51c72b1adf43289"
    },
    {
        "hash": "8457b74c2605d524a2bc7e9db264b50820b54685",
        "author": "Dhruba Borthakur",
        "date": "2013-10-15T12:03:09-07:00",
        "message": "Fix Unit test when run on tmpfs\n\nSummary:\ntmpfs might not support fallocate(). Fix unit test so that this\ndoes not cause a unit test to fail.\n\nTest Plan: ./env_test\n\nReviewers: emayanke, igor, kailiu\n\nReviewed By: kailiu\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13455",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8457b74c2605d524a2bc7e9db264b50820b54685"
    },
    {
        "hash": "40a1e31fa5b5c6a1b6c99291c8acf9b19fc0113a",
        "author": "Siying Dong",
        "date": "2013-10-10T13:47:25-07:00",
        "message": "Minor: Fix a lint error in cache_test.cc\n\nSummary:\nAs title. Fix an lint error:\n\nLint: CppLint Error\nSingle-argument constructor 'Value(int v)' may inadvertently be used as a type conversion constructor. Prefix the function with the 'explicit' keyword to avoid this, or add an /* implicit */ comment to suppress this warning.\n\nTest Plan: N/A\n\nReviewers: emayanke, haobo, dhruba\n\nReviewed By: emayanke\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13401",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/40a1e31fa5b5c6a1b6c99291c8acf9b19fc0113a"
    },
    {
        "hash": "116071411b2068baeddd4fabf3697af7b3add77c",
        "author": "Naman Gupta",
        "date": "2013-10-08T13:19:31-07:00",
        "message": "Make db_test more robust\n\nSummary: While working on D13239, I noticed that the same options are not used for opening and destroying at db. So adding that. Also added asserts for successful DestroyDB calls.\n\nTest Plan: Ran unit tests. Atleast 1 unit test is failing. They failures are a result of some past logic change. I'm not really planning to fix those. But I would like to check this in. And hopefully the respective unit test owners can fix the broken tests\n\nReviewers: leveldb, haobo\n\nCC: xinyaohu, sumeet, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D13329",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/116071411b2068baeddd4fabf3697af7b3add77c"
    },
    {
        "hash": "fa46ddb41f96f5200425978a9b9b7834df30b6bb",
        "author": "Igor Canadi",
        "date": "2013-10-07T15:37:40-07:00",
        "message": "Move delete and free outside of crtical section\n\nSummary: Split Unref into two parts -> cheap and expensive. Try to call expensive Unref outside of critical section to decrease lock contention.\n\nTest Plan: unittests\n\nReviewers: dhruba, haobo\n\nReviewed By: dhruba\n\nCC: leveldb, kailiu\n\nDifferential Revision: https://reviews.facebook.net/D13299",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fa46ddb41f96f5200425978a9b9b7834df30b6bb"
    },
    {
        "hash": "1a8c1b0817926abfab9fbfc69dea8d760a6210d5",
        "author": "Dhruba Borthakur",
        "date": "2013-10-06T01:12:02-07:00",
        "message": "Unit test failure in DBTest.NumImmutableMemTable.\n\nSummary:\nPrevious patch introduced a unit test failure in\nDBTest.NumImmutableMemTable because of change in property names.\n\nTest Plan:\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1a8c1b0817926abfab9fbfc69dea8d760a6210d5"
    },
    {
        "hash": "200c05a23f2127495c44ad563612259ae4bd1678",
        "author": "Haobo Xu",
        "date": "2013-10-03T16:12:43-07:00",
        "message": "[RocksDB] Still honor DisableFileDeletions when purge_log_after_memtable_flush is on\n\nSummary: as title\n\nTest Plan: make check\n\nReviewers: emayanke\n\nReviewed By: emayanke\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13263",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/200c05a23f2127495c44ad563612259ae4bd1678"
    },
    {
        "hash": "6b34021fc2218d00d4ccfaf4d53914231c15f995",
        "author": "Mayank Agarwal",
        "date": "2013-10-02T11:22:17-07:00",
        "message": "Triggering verify for gets also\n\nSummary: Will use iterators to verify keys in the db for half of its keys and Gets for the other half.\n\nTest Plan: ./db_stress --max_key=1000 --ops_per_thread=100\n\nReviewers: dhruba, haobo\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13227",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6b34021fc2218d00d4ccfaf4d53914231c15f995"
    },
    {
        "hash": "861f6e48e46d71a57f4465fc4b6f76f963d0577f",
        "author": "Kai Liu",
        "date": "2013-10-01T14:14:06-07:00",
        "message": "Remove the hard-coded enum value in statistics.h\n\nSummary:\nI am planning to add more to statistics classes but found current way of using enum is very verbose and unnecessarily increase the\ndifficulity of adding new statistics.\n\nIn this diff I removed the code that explicitly specifies the value of each enum entry. This will help us easily add new statistic\nitems more conveniently without manually adding the value of other enum entries by one.\n\nTest Plan: make; make check;\n\nReviewers: haobo, dhruba, xjin, emayanke, vamsi\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13197",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/statistics.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/861f6e48e46d71a57f4465fc4b6f76f963d0577f"
    },
    {
        "hash": "7edb92b843c6879d3f29ee41afdc7c4691afa42d",
        "author": "Natalie Hildebrandt",
        "date": "2013-09-30T16:48:00-07:00",
        "message": "Phase 2 of iterator stress test\n\nSummary: Using an iterator instead of the Get method, each thread goes through a portion of the database and verifies values by comparing to the shared state.\n\nTest Plan:\n./db_stress --db=/tmp/tmppp --max_key=10000 --ops_per_thread=10000\n\nTo test some basic cases, the following lines can be added (each set in turn) to the verifyDb method with the following expected results:\n\n    // Should abort with \"Unexpected value found\"\n    shared.Delete(start);\n\n    // Should abort with \"Value not found\"\n    WriteOptions write_opts;\n    db_->Delete(write_opts, Key(start));\n\n    // Should succeed\n    WriteOptions write_opts;\n    shared.Delete(start);\n     db_->Delete(write_opts, Key(start));\n\n    // Should abort with \"Value not found\"\n    WriteOptions write_opts;\n    db_->Delete(write_opts, Key(start + (end-start)/2));\n\n    // Should abort with \"Value not found\"\n    db_->Delete(write_opts, Key(end-1));\n\n    // Should abort with \"Unexpected value\"\n    shared.Delete(end-1);\n\n    // Should abort with \"Unexpected value\"\n    shared.Delete(start + (end-start)/2);\n\n    // Should abort with \"Value not found\"\n    db_->Delete(write_opts, Key(start));\n    shared.Delete(start);\n    db_->Delete(write_opts, Key(end-1));\n    db_->Delete(write_opts, Key(end-2));\n\nTo test the out of range abort, change the key in the for loop to Key(i+1), so that the key defined by the index i is now outside of the supposed range of the database.\n\nReviewers: emayanke\n\nReviewed By: emayanke\n\nCC: dhruba, xjin\n\nDifferential Revision: https://reviews.facebook.net/D13071",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7edb92b843c6879d3f29ee41afdc7c4691afa42d"
    },
    {
        "hash": "0c4040681aeca9ed1d61b819c7502dbf28347ca9",
        "author": "Haobo Xu",
        "date": "2013-09-26T20:43:11-07:00",
        "message": "[RocksDB] Move last_sequence and last_flushed_sequence_ update back into lock protected area\n\nSummary: A previous diff moved these outside of lock protected area. Moved back in now. Also moved tmp_batch_ update outside of lock protected area, as only the single write thread can access it.\n\nTest Plan: make check\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13137",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0c4040681aeca9ed1d61b819c7502dbf28347ca9"
    },
    {
        "hash": "08740b15a4bd22d1433ce644e1ab324fc2ae1531",
        "author": "Haobo Xu",
        "date": "2013-09-26T15:17:03-07:00",
        "message": "[RocksDB] Fix skiplist sequential insertion optimization\n\nSummary: The original optimization missed updating links other than the lowest level.\n\nTest Plan: make check; perf_context_test\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb, adsharma\n\nDifferential Revision: https://reviews.facebook.net/D13119",
        "modified_files_count": 1,
        "modified_files": [
            "db/skiplist.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/08740b15a4bd22d1433ce644e1ab324fc2ae1531"
    },
    {
        "hash": "e0aa19a94e0d2091013668b67961d885c6d5b7bd",
        "author": "Haobo Xu",
        "date": "2013-09-25T22:49:18-07:00",
        "message": "[RocbsDB] Add an option to enable set based memtable for perf_context_test\n\nSummary:\nas title.\nSome result:\n\n-- Sequential insertion of 1M key/value with stock skip list (all in on memtable)\ntime ./perf_context_test  --total_keys=1000000  --use_set_based_memetable=0\nInserting 1000000 key/value pairs\n...\nPut uesr key comparison:\nCount: 1000000  Average: 8.0179  StdDev: 176.34\nMin: 0.0000  Median: 2.5555  Max: 88933.0000\nPercentiles: P50: 2.56 P75: 2.83 P99: 58.21 P99.9: 133.62 P99.99: 987.50\nGet uesr key comparison:\nCount: 1000000  Average: 43.4465  StdDev: 379.03\nMin: 2.0000  Median: 36.0195  Max: 88939.0000\nPercentiles: P50: 36.02 P75: 43.66 P99: 112.98 P99.9: 824.84 P99.99: 7615.38\nreal\t0m21.345s\nuser\t0m14.723s\nsys\t0m5.677s\n\n-- Sequential insertion of 1M key/value with set based memtable (all in on memtable)\ntime ./perf_context_test  --total_keys=1000000  --use_set_based_memetable=1\nInserting 1000000 key/value pairs\n...\nPut uesr key comparison:\nCount: 1000000  Average: 61.5022  StdDev: 6.49\nMin: 0.0000  Median: 62.4295  Max: 71.0000\nPercentiles: P50: 62.43 P75: 66.61 P99: 71.00 P99.9: 71.00 P99.99: 71.00\nGet uesr key comparison:\nCount: 1000000  Average: 29.3810  StdDev: 3.20\nMin: 1.0000  Median: 29.1801  Max: 34.0000\nPercentiles: P50: 29.18 P75: 32.06 P99: 34.00 P99.9: 34.00 P99.99: 34.00\nreal\t0m28.875s\nuser\t0m21.699s\nsys\t0m5.749s\n\nWorst case comparison for a Put is 88933 (skiplist) vs 71 (set based memetable)\n\nOf course, there's other in-efficiency in set based memtable implementation, which lead to the overall worst performance. However, P99 behavior advantage is very very obvious.\n\nTest Plan: ./perf_context_test and viewstate shadow testing\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13095",
        "modified_files_count": 1,
        "modified_files": [
            "db/perf_context_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e0aa19a94e0d2091013668b67961d885c6d5b7bd"
    },
    {
        "hash": "433541823cc1b85ec5c9e8f2729e6a039af21c5e",
        "author": "Natalie Hildebrandt",
        "date": "2013-09-19T16:47:24-07:00",
        "message": "Phase 1 of an iterator stress test\n\nSummary:\nAdded MultiIterate() which does a seek and some Next/Prev\ncalls.  Iterator status is checked only, no data integrity check\n\nTest Plan:\nmake db_stress\n./db_stress --iterpercent=<nonzero value> --readpercent=, etc.\n\nReviewers: emayanke, dhruba, xjin\n\nReviewed By: emayanke\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D12915",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/433541823cc1b85ec5c9e8f2729e6a039af21c5e"
    },
    {
        "hash": "4734dbb742a7c1d4fdfea7142bf77ded235955c6",
        "author": "Haobo Xu",
        "date": "2013-09-18T21:43:41-07:00",
        "message": "[RocksDB] Unit test to show Seek key comparison number\n\nSummary: Added SeekKeyComparison to show the uer key comparison incurred by Seek.\n\nTest Plan:\nmake perf_context_test\nexport LEVELDB_TESTS=DBTest.SeekKeyComparison\n./perf_context_test --write_buffer_size=500000 --total_keys=10000\n./perf_context_test --write_buffer_size=250000 --total_keys=10000\n\nReviewers: dhruba, xjin\n\nReviewed By: xjin\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D12843",
        "modified_files_count": 1,
        "modified_files": [
            "db/perf_context_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4734dbb742a7c1d4fdfea7142bf77ded235955c6"
    },
    {
        "hash": "72fcbf055d72d9db79a93fd2c5dd7c19db9d5c34",
        "author": "Haobo Xu",
        "date": "2013-09-17T21:29:33-07:00",
        "message": "[RocksDB] Fix DBTest.UniversalCompactionSizeAmplification too\n\nSummary: as title\n\nTest Plan: make db_test; ./db_test\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D13005",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/72fcbf055d72d9db79a93fd2c5dd7c19db9d5c34"
    },
    {
        "hash": "5b76338c01aac7dc8b3be40b436cb5be507a8a4c",
        "author": "Haobo Xu",
        "date": "2013-09-17T14:17:48-07:00",
        "message": "[RocksDB] Fix DBTest.UniversalCompactionTrigger to reflect the correct compaction trigger condition.\n\nSummary: as title\n\nTest Plan: make db_test; ./db_test\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D12981",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5b76338c01aac7dc8b3be40b436cb5be507a8a4c"
    },
    {
        "hash": "1d8c57db232bf3bede6f773d159c6158241f6fdf",
        "author": "Haobo Xu",
        "date": "2013-09-15T22:35:59-07:00",
        "message": "[RocksDB] Universal compaction trigger condition minor fix\n\nSummary: Currently, when total number of files reaches level0_file_num_compaction_trigger, universal compaction will schedule a compaction job, but the job will not honor the compaction until the total number of files is level0_file_num_compaction_trigger+1. Fixed the condition for consistent behavior (start compaction on reaching level0_file_num_compaction_trigger).\n\nTest Plan: make check; db_stress\n\nReviewers: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D12945",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1d8c57db232bf3bede6f773d159c6158241f6fdf"
    },
    {
        "hash": "8866448001d16c5148d620b68b79eb54ffed5e92",
        "author": "Haobo Xu",
        "date": "2013-09-13T21:13:20-07:00",
        "message": "[RocksDB] fix build env_test\n\nSummary: move the TwoPools test to the end of thread related tests. Otherwise, the SetBackgroundThreads call would increase the Low pool size and affect the result of other tests.\n\nTest Plan: make env_test; ./env_test\n\nReviewers: dhruba, emayanke, xjin\n\nReviewed By: xjin\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D12939",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8866448001d16c5148d620b68b79eb54ffed5e92"
    },
    {
        "hash": "e2a093a6c372f4ee28cd604503daf59bb76ab8c6",
        "author": "Mayank Agarwal",
        "date": "2013-09-13T11:16:27-07:00",
        "message": "Fix delete in db_ttl.cc\n\nSummary: should delete the proper variable\n\nTest Plan: make all check\n\nReviewers: haobo, dhruba\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D12921",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/ttl/db_ttl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e2a093a6c372f4ee28cd604503daf59bb76ab8c6"
    },
    {
        "hash": "4b785aab05912fdd9191a852840a877de023d874",
        "author": "Mayank Agarwal",
        "date": "2013-09-05T13:52:47-07:00",
        "message": "Add logdata to ttl\n\nSummary: Ttl-write makes a new writebatch and calls Write on the base db. It should recognize LogData also\n\nTest Plan: make\n\nReviewers: dhruba, haobo\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D12747",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/ttl/db_ttl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4b785aab05912fdd9191a852840a877de023d874"
    },
    {
        "hash": "352f0636ef555cc8d8761500461da8d155cafad4",
        "author": "Mayank Agarwal",
        "date": "2013-09-02T22:13:29-07:00",
        "message": "Fix memory leak in table.cc\n\nSummary:\nIn InternalGet, BlockReader returns an Iterator which is legitimately freed at the end of the 'else' scope. BUT there is a break statement in between and must be freed there too!\nThe best solution would be to move to unique_ptr and let it handle. Changed it to a unique_ptr.\n\nTest Plan: valgrind ./db_test;make all check\n\nReviewers: dhruba, haobo\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D12681",
        "modified_files_count": 1,
        "modified_files": [
            "table/table.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/352f0636ef555cc8d8761500461da8d155cafad4"
    },
    {
        "hash": "b1d09f1a5146cc922a1c87747de90578762cb600",
        "author": "Mayank Agarwal",
        "date": "2013-09-01T21:06:04-07:00",
        "message": "Fix build failing becasue of ttl-keymayexist\n\nSummary: PutValues calls Flush in ttl_test which clears memtables. KeyMayExist called after that will not be able to read those key-values\n\nTest Plan: make all check OPT=-g\n\nReviewers:leveldb",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/ttl/ttl_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b1d09f1a5146cc922a1c87747de90578762cb600"
    },
    {
        "hash": "7afdf5e9f856eb0e82c9f21707524dbda476811c",
        "author": "Mayank Agarwal",
        "date": "2013-08-31T08:50:04-07:00",
        "message": "Correct status in options.h from WouldBlock to Incomplete\n\nSummary: WouldBlock was an internediate statue but was changed to Incomplete\n\nTest Plan: visual\n\nReviewers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D12651",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7afdf5e9f856eb0e82c9f21707524dbda476811c"
    },
    {
        "hash": "46dcf51ca5bc04d1b83eb8e9ae654c0e5f234dcb",
        "author": "Mayank Agarwal",
        "date": "2013-08-30T14:25:22-07:00",
        "message": "Return a '/' before names of all files through MakeFileName\n\nSummary: // won't hurt but a missing / hurts sometimes\n\nTest Plan: make all check; ./db_repl_stress\n\nReviewers: vamsi\n\nReviewed By: vamsi\n\nCC: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D12621",
        "modified_files_count": 1,
        "modified_files": [
            "db/filename.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/46dcf51ca5bc04d1b83eb8e9ae654c0e5f234dcb"
    },
    {
        "hash": "43eef52001cde469025a89b47c62af6bbe06c27a",
        "author": "Haobo Xu",
        "date": "2013-08-27T13:36:10-07:00",
        "message": "[RocksDB] move stats counting outside of mutex protected region for DB::Get()\n\nSummary:\nAs title. This is possible as tickers are atomic now.\ndb_bench on high qps in-memory muti-thread random get workload, showed ~5% throughput improvement.\n\nTest Plan: make check; db_bench; db_stress\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D12555",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/43eef52001cde469025a89b47c62af6bbe06c27a"
    },
    {
        "hash": "b1074ac24f28afd0b5704ed520515b9ce00aae4c",
        "author": "Mayank Agarwal",
        "date": "2013-08-24T18:16:01-07:00",
        "message": "Use initializer list for VersionSet\n\nSummary: initialiszer list is fasteri/preferable because it can straightaway call the constructor for this object, otherwise it will be created first and then again initialized. Although gain may not be much in this case because files_ is just a pointer and not a complex object, this is recommended practice.\n\nTest Plan: make all check\n\nReviewers: dhruba, haobo\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D12519",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b1074ac24f28afd0b5704ed520515b9ce00aae4c"
    },
    {
        "hash": "573844807c902db937e4fc0d90876e1815c4f039",
        "author": "Deon Nicholas",
        "date": "2013-08-23T16:36:01-07:00",
        "message": "Fix for no_io\n\nSummary: Oops. My bad.\n\nTest Plan: Make all check\n\nReviewers: emayanke\n\nReviewed By: emayanke\n\nCC: haobo, leveldb, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D12525",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/573844807c902db937e4fc0d90876e1815c4f039"
    },
    {
        "hash": "404d63ac3e9d5b2212a1f2c819b419886ed7c9c9",
        "author": "Mayank Agarwal",
        "date": "2013-08-20T21:33:53-07:00",
        "message": "Add TODO for DBToStackableDB function which doesn't work yet\n\nSummary:\n\nTest Plan:\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "include/utilities/stackable_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/404d63ac3e9d5b2212a1f2c819b419886ed7c9c9"
    },
    {
        "hash": "3ab2792f932778c3fb26adf8cb1ceb7e236b4331",
        "author": "Mayank Agarwal",
        "date": "2013-08-19T14:29:40-07:00",
        "message": "Add default info to comment in leveldb/options.h for no_block_cache\n\nSummary: to ley clients know\n\nTest Plan: visual",
        "modified_files_count": 1,
        "modified_files": [
            "include/leveldb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3ab2792f932778c3fb26adf8cb1ceb7e236b4331"
    },
    {
        "hash": "28e6fe5e9f999bffc6b2ace2d84809782c76e592",
        "author": "Mayank Agarwal",
        "date": "2013-08-19T14:27:19-07:00",
        "message": "Correct documentation for no_block_cache in leveldb/options.h\n\nSummary: false shoudl have been true in comment\n\nTest Plan: visual",
        "modified_files_count": 1,
        "modified_files": [
            "include/leveldb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/28e6fe5e9f999bffc6b2ace2d84809782c76e592"
    },
    {
        "hash": "d1d3d15eb78d31a2fc967fc4da2ca2246ff62028",
        "author": "Deon Nicholas",
        "date": "2013-08-15T17:50:12-07:00",
        "message": "Tiny fix to db_bench for make release.\n\nSummary:\nIn release, \"found variable assigned but not used anywhere\". Changed it to work with\nassert. Someone accept this :).\n\nTest Plan: make release -j 32\n\nReviewers: haobo, dhruba, emayanke\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D12309",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d1d3d15eb78d31a2fc967fc4da2ca2246ff62028"
    },
    {
        "hash": "a8f47a40069b3c8bf10e5e5518dc0657612188d4",
        "author": "Tyler Harter",
        "date": "2013-08-14T09:06:10-07:00",
        "message": "Add options to dump.\n\nSummary: added options to Dump() I missed in D12027.  I also ran a script to look for other missing options and found a couple which I added.  Should we also print anything for \"PrepareForBulkLoad\", \"memtable_factory\", and \"statistics\"?  Or should we leave those alone since it's not easy to print useful info for those?\n\nTest Plan: run anything and look at LOG file to make sure these are printed now.\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D12219",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a8f47a40069b3c8bf10e5e5518dc0657612188d4"
    },
    {
        "hash": "58a0ae06dca85529fcc8c0b04b96ef019b27a8d3",
        "author": "Haobo Xu",
        "date": "2013-08-08T15:31:12-07:00",
        "message": "[RocksDB] Improve sst_dump to take user key range\n\nSummary: The ability to dump internal keys associated with certain user keys, directly from sst files, is very useful for diagnosis. Will incorporate it directly into ldb later.\n\nTest Plan: run it\n\nReviewers: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D12075",
        "modified_files_count": 1,
        "modified_files": [
            "tools/sst_dump.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/58a0ae06dca85529fcc8c0b04b96ef019b27a8d3"
    },
    {
        "hash": "68a4cdf3f747a259ac71e38a6a98ba6579e56891",
        "author": "Deon Nicholas",
        "date": "2013-08-06T11:42:21-07:00",
        "message": "Build fix with merge_test and ttl",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/68a4cdf3f747a259ac71e38a6a98ba6579e56891"
    },
    {
        "hash": "e37eb21e921f5f29391b9c8af99c753b6bebce8c",
        "author": "Deon Nicholas",
        "date": "2013-08-06T11:02:19-07:00",
        "message": "minor change to fix build",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/ttl/db_ttl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e37eb21e921f5f29391b9c8af99c753b6bebce8c"
    },
    {
        "hash": "73f9518b21ffc78d33737025b474c7c9e0182ce2",
        "author": "Mayank Agarwal",
        "date": "2013-08-05T19:22:12-07:00",
        "message": "Fix build\n\nSummary: remove reference\n\nTest Plan: make OPT=-g\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/ttl/db_ttl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/73f9518b21ffc78d33737025b474c7c9e0182ce2"
    },
    {
        "hash": "6db52b525ab57983d2791dfc8a73df24d3995770",
        "author": "Jim Paton",
        "date": "2013-07-29T15:46:36-07:00",
        "message": "Don't use redundant Env::NowMicros() calls\n\nSummary: After my patch for stall histograms, there are redundant calls to NowMicros() by both the stop watches and DBImpl::MakeRoomForWrites. So I removed the redundant calls such that the information is gotten from the stopwatch.\n\nTest Plan:\nmake clean\nmake -j32 check\n\nReviewers: dhruba, haobo, MarkCallaghan\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11883",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6db52b525ab57983d2791dfc8a73df24d3995770"
    },
    {
        "hash": "a91fdf1b998d9a2e5afb636b5b84712de47659d7",
        "author": "Dhruba Borthakur",
        "date": "2013-07-24T14:28:00-07:00",
        "message": "The target file size for L0 files was incorrectly set to LLONG_MAX.\n\nSummary:\nThe target file size should be valid value. Only if UniversalCompactionStyle\nis enabled then set max file size to be LLONG_MAX.\n\nTest Plan:\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a91fdf1b998d9a2e5afb636b5b84712de47659d7"
    },
    {
        "hash": "d7ba5bce37063d2a0d2b6715157d9d0fc5fbe801",
        "author": "Dhruba Borthakur",
        "date": "2013-07-24T10:01:13-07:00",
        "message": "Revert 6fbe4e981a3d74270a0160445bd993c464c23d76: If disable wal is set, then batch commits are avoided\n\nSummary:\nRevert \"If disable wal is set, then batch commits are avoided\" because\nkeeping the mutex while inserting into the skiplist means that readers\nand writes are all serialized on the mutex.\n\nTest Plan:\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d7ba5bce37063d2a0d2b6715157d9d0fc5fbe801"
    },
    {
        "hash": "6fbe4e981a3d74270a0160445bd993c464c23d76",
        "author": "Dhruba Borthakur",
        "date": "2013-07-23T14:22:57-07:00",
        "message": "If disable wal is set, then batch commits are avoided.\n\nSummary:\nrocksdb uses batch commit to write to transaction log. But if\ndisable wal is set, then writes to transaction log are anyways\navoided. In this case, there is not much value-add to batch things,\nbatching can cause unnecessary delays to Puts().\nThis patch avoids batching when disableWal is set.\n\nTest Plan:\nmake check.\n\nI am running db_stress now.\n\nReviewers: haobo\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11763",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6fbe4e981a3d74270a0160445bd993c464c23d76"
    },
    {
        "hash": "d364eea1fc615917133c49b5fed2acf1e884fbec",
        "author": "Haobo Xu",
        "date": "2013-07-22T12:31:43-07:00",
        "message": "[RocksDB] Fix FindMinimumEmptyLevelFitting\n\nSummary: as title\n\nTest Plan: make check;\n\nReviewers: xjin\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11751",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d364eea1fc615917133c49b5fed2acf1e884fbec"
    },
    {
        "hash": "9357a53a7daf9071fc7e46bb6b511c318f02fdbe",
        "author": "Dhruba Borthakur",
        "date": "2013-07-17T15:08:56-07:00",
        "message": "Fix merge problems with options.\n\nSummary:\nFix merge problems with options.\n\nTest Plan:\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9357a53a7daf9071fc7e46bb6b511c318f02fdbe"
    },
    {
        "hash": "e9b675bd94370ac15cf0ab65ba9beef7a02d904b",
        "author": "Mayank Agarwal",
        "date": "2013-07-12T16:58:57-07:00",
        "message": "Fix memory leak in KeyMayExist test part of db_test\n\nSummary: NewBloomFilterPolicy call requires Delete to be called later on\n\nTest Plan: make; valgrind ./db_test\n\nReviewers: haobo, dhruba, vamsi\n\nDifferential Revision: https://reviews.facebook.net/D11667",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e9b675bd94370ac15cf0ab65ba9beef7a02d904b"
    },
    {
        "hash": "8a5341ec7dd9249cadd196b50e82fa3d23f414ad",
        "author": "Xing Jin",
        "date": "2013-07-11T09:03:40-07:00",
        "message": "Newbie code question\n\nSummary:\nThis diff is more about my question when reading compaction codes,\ninstead of a normal diff. I don't quite understand the logic here.\n\nTest Plan: I didn't do any test. If this is a bug, I will continue doing some test.\n\nReviewers: haobo, dhruba, emayanke\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11661",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8a5341ec7dd9249cadd196b50e82fa3d23f414ad"
    },
    {
        "hash": "821889e20764e88276e83df37e485a64191f1d75",
        "author": "Mayank Agarwal",
        "date": "2013-07-10T18:07:13-07:00",
        "message": "Print complete statistics in db_stress\n\nSummary: db_stress should alos print complete statistics like db_bench. Needed this when I wanted to measure number of delete-IOs dropped due to CheckKeyMayExist to be introduced to rocksdb codebase later- to make deltes in rocksdb faster\n\nTest Plan: make db_stress;./db_stress --max_key=100 --ops_per_thread=1000 --statistics=1\n\nReviewers: sheki, dhruba, vamsi, haobo\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D11655",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/821889e20764e88276e83df37e485a64191f1d75"
    },
    {
        "hash": "289efe992257f6e6bda379181a78506658661e0a",
        "author": "Dhruba Borthakur",
        "date": "2013-07-09T16:17:00-07:00",
        "message": "Update statistics only if needed.\n\nSummary:\nUpdate statistics only if needed.\n\nTest Plan:\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/289efe992257f6e6bda379181a78506658661e0a"
    },
    {
        "hash": "9ba82786ce56d515cc07498bf46d06e2c62a6887",
        "author": "Haobo Xu",
        "date": "2013-07-08T15:31:09-07:00",
        "message": "[RocksDB] Provide contiguous sequence number even in case of write failure\n\nSummary: Replication logic would be simplifeid if we can guarantee that write sequence number is always contiguous, even if write failure occurs. Dhruba and I looked at the sequence number generation part of the code. It seems fixable. Note that if WAL was successful and insert into memtable was not, we would be in an unfortunate state. The approach in this diff is : IO error is expected and error status will be returned to client, sequence number will not be advanced; In-mem error is not expected and we panic.\n\nTest Plan: make check; db_stress\n\nReviewers: dhruba, sheki\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11439",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9ba82786ce56d515cc07498bf46d06e2c62a6887"
    },
    {
        "hash": "4deaa0d48bfcbff04645ecd45945298195ad34e3",
        "author": "Haobo Xu",
        "date": "2013-06-19T12:44:42-07:00",
        "message": "[RocksDB] Minor change to statistics.h\n\nSummary: as title, use initialize list so that lines fit in 80 chars.\n\nTest Plan: make check;\n\nReviewers: sheki, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D11385",
        "modified_files_count": 1,
        "modified_files": [
            "include/leveldb/statistics.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4deaa0d48bfcbff04645ecd45945298195ad34e3"
    },
    {
        "hash": "09de7a3b6a7a0f5ccfc3acf92b57c1af0509b179",
        "author": "Jim Paton",
        "date": "2013-06-18T16:57:42-07:00",
        "message": "Fix Zlib_Compress and Zlib_Uncompress\n\nSummary:\nZlib_{Compress,Uncompress} did not handle very small input buffers properly. In addition, they did not call inflate/deflate until Z_STREAM_END was returned; it was possible for them to exit when only Z_OK had returned.\n\nThis diff also fixes a bunch of lint errors.\n\nTest Plan: Run make check\n\nReviewers: dhruba, sheki, haobo\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11301",
        "modified_files_count": 1,
        "modified_files": [
            "port/port_posix.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/09de7a3b6a7a0f5ccfc3acf92b57c1af0509b179"
    },
    {
        "hash": "79f4fd2b62e346482db45f43417e4bc9b9aa1200",
        "author": "Abhishek Kona",
        "date": "2013-06-18T14:58:00-07:00",
        "message": "[Rocksdb] Simplify Printing code in db_bench\n\nSummary:\nsimplify the printing code in db_bench\n         use TickersMap and HistogramsNameMap introduced in previous diffs.\n\nTest Plan: ./db_bench --statistics=1 and see if all the statistics are printed\n\nReviewers: haobo, dhruba\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11355",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/79f4fd2b62e346482db45f43417e4bc9b9aa1200"
    },
    {
        "hash": "f561b3a324f98e23d623cb2432e89c39cfb760e1",
        "author": "Abhishek Kona",
        "date": "2013-06-17T14:33:05-07:00",
        "message": "[Rocksdb] Rename one stat key from leveldb to rocksdb",
        "modified_files_count": 1,
        "modified_files": [
            "include/leveldb/statistics.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f561b3a324f98e23d623cb2432e89c39cfb760e1"
    },
    {
        "hash": "836534debdacd99fa0fc428802ee1cbff9ceb44f",
        "author": "Dhruba Borthakur",
        "date": "2013-06-17T14:15:09-07:00",
        "message": "Enhance dbstress to allow specifying compaction trigger for L0.\n\nSummary:\nRocksdb allos specifying the number of files in L0 that triggers\ncompactions. Expose this api as a command line parameter for\nrunning db_stress.\n\nTest Plan: Run test\n\nReviewers: sheki, emayanke\n\nReviewed By: emayanke\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11343",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/836534debdacd99fa0fc428802ee1cbff9ceb44f"
    },
    {
        "hash": "2a52e1dcb66f4aee4569dc016c7efe638becb8ac",
        "author": "Deon Nicholas",
        "date": "2013-06-14T16:00:47-07:00",
        "message": "Fix db_bench for release build.\n\nTest Plan: make release\n\nReviewers: haobo, dhruba, jpaton\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11307",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2a52e1dcb66f4aee4569dc016c7efe638becb8ac"
    },
    {
        "hash": "1afdf28701964f738315dadb5f7acdf111428a08",
        "author": "Haobo Xu",
        "date": "2013-06-14T14:23:08-07:00",
        "message": "[RocksDB] Compaction Filter Cleanup\n\nSummary: This hopefully gives the right semantics to compaction filter. Will write a small wiki to explain the ideas.\n\nTest Plan: make check; db_stress\n\nReviewers: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11121",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1afdf28701964f738315dadb5f7acdf111428a08"
    },
    {
        "hash": "e673d5d26d55a6ae3aed779455368a610a366642",
        "author": "Dhruba Borthakur",
        "date": "2013-06-10T15:49:19-07:00",
        "message": "Do not submit multiple simultaneous seek-compaction requests.\n\nSummary:\nThe code was such that if multi-threaded-compactions as well\nas seek compaction are enabled then it submits multiple\ncompaction request for the same range of keys. This causes\nextraneous sst-files to accumulate at various levels.\n\nTest Plan:\nI am not able to write a very good unit test for this one\nbut can easily reproduce this bug with 'dbstress' with the\nfollowing options.\n\nbatch=1;maxk=100000000;ops=100000000;ro=0;fm=2;bpl=10485760;of=500000; wbn=3; mbc=20; mb=2097152; wbs=4194304; dds=1; sync=0;  t=32; bs=16384; cs=1048576; of=500000; ./db_stress --disable_seek_compaction=0 --mmap_read=0 --threads=$t --block_size=$bs --cache_size=$cs --open_files=$of --verify_checksum=1 --db=/data/mysql/leveldb/dbstress.dir --sync=$sync --disable_wal=1 --disable_data_sync=$dds --write_buffer_size=$wbs --target_file_size_base=$mb --target_file_size_multiplier=$fm --max_write_buffer_number=$wbn --max_background_compactions=$mbc --max_bytes_for_level_base=$bpl --reopen=$ro --ops_per_thread=$ops --max_key=$maxk --test_batches_snapshots=$batch\n\nReviewers: leveldb, emayanke\n\nReviewed By: emayanke\n\nDifferential Revision: https://reviews.facebook.net/D11055",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e673d5d26d55a6ae3aed779455368a610a366642"
    },
    {
        "hash": "4a8554d5bb3b98df4b948f7b734c6c1c25e75cd1",
        "author": "Abhishek Kona",
        "date": "2013-06-10T13:14:14-07:00",
        "message": "[Rocksdb] fix wrong assert\n\nSummary: the assert was wrong in D11145. Broke build\n\nTest Plan: make db_bench run it\n\nReviewers: dhruba, haobo, emayanke\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11187",
        "modified_files_count": 1,
        "modified_files": [
            "include/leveldb/statistics.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4a8554d5bb3b98df4b948f7b734c6c1c25e75cd1"
    },
    {
        "hash": "c5de1b9391d163c26720704f7f20064b6f684f1b",
        "author": "Dhruba Borthakur",
        "date": "2013-06-10T12:11:55-07:00",
        "message": "Print name of user comparator in LOG.\n\nSummary:\nThe current code prints the name of the InternalKeyComparator\nin the log file. We would also like to print the name of the\nuser-specified comparator for easier debugging.\n\nTest Plan: make check\n\nReviewers: sheki\n\nReviewed By: sheki\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11181",
        "modified_files_count": 1,
        "modified_files": [
            "db/dbformat.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c5de1b9391d163c26720704f7f20064b6f684f1b"
    },
    {
        "hash": "a4913c5170e7dace86947d43d5d4587988f822fb",
        "author": "Abhishek Kona",
        "date": "2013-06-10T11:57:55-07:00",
        "message": "[rocksdb] names for all metrics provided in statistics.h\n\nSummary: Provide a  map of histograms and ticker vs strings. Fb303 libraries can use this to provide the mapping. We will not have to duplicate the code during release.\n\nTest Plan: db_bench with statistics=1\n\nReviewers: dhruba, haobo\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11145",
        "modified_files_count": 1,
        "modified_files": [
            "include/leveldb/statistics.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a4913c5170e7dace86947d43d5d4587988f822fb"
    },
    {
        "hash": "184343a061a41f104d4b0bdb53883feaa2147140",
        "author": "Mayank Agarwal",
        "date": "2013-06-09T10:38:55-07:00",
        "message": "Max_mem_compaction_level can have maximum value of num_levels-1\n\nSummary:\nWithout this files could be written out to a level greater than the maximum level possible and is the source of the segfaults that wormhole awas getting. The sequence of steps that was followed:\n1. WriteLevel0Table was called when memtable was to be flushed for a file.\n2. PickLevelForMemTableOutput was called to determine the level to which this file should be pushed.\n3. PickLevelForMemTableOutput returned a wrong result because max_mem_compaction_level was equal to 2 even when num_levels was equal to 0.\nThe fix to re-initialize max_mem_compaction_level based on num_levels passed seems correct.\n\nTest Plan: make all check; Also made a dummy file to mimic the wormhole-file behaviour which was causing the segfaults and found that the same segfault occurs without this change and not with this.\n\nReviewers: dhruba, haobo\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11157",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/184343a061a41f104d4b0bdb53883feaa2147140"
    },
    {
        "hash": "ee522d0032eb5470e2b76841eb2a0cead5aa5bd8",
        "author": "Abhishek Kona",
        "date": "2013-06-05T10:48:24-07:00",
        "message": "[Rocksdb] Log on disable/enable file deletions\n\nSummary: as title\n\nTest Plan: compile\n\nReviewers: dhruba, haobo\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11085",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_filesnapshot.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ee522d0032eb5470e2b76841eb2a0cead5aa5bd8"
    },
    {
        "hash": "043573b24fff014f9b5e8396006519240753754f",
        "author": "Haobo Xu",
        "date": "2013-06-04T13:52:27-07:00",
        "message": "[RocksDB] Include 64bit random number generator\n\nSummary: As title.\n\nTest Plan: make check;\n\nReviewers: chip, MarkCallaghan\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D11061",
        "modified_files_count": 1,
        "modified_files": [
            "util/random.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/043573b24fff014f9b5e8396006519240753754f"
    },
    {
        "hash": "fb684da0825c823e4d59127de3aee810831db812",
        "author": "Haobo Xu",
        "date": "2013-05-28T12:36:42-07:00",
        "message": "[RocksDB] Fix CorruptionTest\n\nSummary: Overriding block_size_deviation to zero, so that CorruptionTest can pass.\n\nTest Plan: make check\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D10977",
        "modified_files_count": 1,
        "modified_files": [
            "db/corruption_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fb684da0825c823e4d59127de3aee810831db812"
    },
    {
        "hash": "4c47d8f345015997e40ce81c54a997957b2810ae",
        "author": "heyongqiang",
        "date": "2013-05-24T16:21:52-07:00",
        "message": "add block deviation option to terminate a block before it exceeds block_size\n\nSummary: a new option block_size_deviation is added.\n\nTest Plan: run db_test and db_bench\n\nReviewers: dhruba, haobo\n\nReviewed By: haobo\n\nDifferential Revision: https://reviews.facebook.net/D10821",
        "modified_files_count": 1,
        "modified_files": [
            "util/options.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4c47d8f345015997e40ce81c54a997957b2810ae"
    },
    {
        "hash": "26541860d322d0b1c2027330c810fc6311284ed0",
        "author": "Dhruba Borthakur",
        "date": "2013-05-23T15:00:27-07:00",
        "message": "The max size of the write buffer size can be 64 GB.\n\nSummary: There was an artifical limit on the size of the write buffer size.\n\nTest Plan: make check\n\nReviewers: haobo\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D10911",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/26541860d322d0b1c2027330c810fc6311284ed0"
    },
    {
        "hash": "c3c13db346749c3dfe45e167db2129c645377e9e",
        "author": "Haobo Xu",
        "date": "2013-05-21T13:40:38-07:00",
        "message": "[RocksDB] [Performance Bug] MemTable::Get Slow\n\nSummary:\nThe merge operator diff introduced a performance problem in MemTable::Get.\nAn exit condition is missed when the current key does not match the user key.\nThis could lead to full memtable scan if the user key is not found.\n\nTest Plan: make check; db_bench\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D10851",
        "modified_files_count": 1,
        "modified_files": [
            "db/memtable.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c3c13db346749c3dfe45e167db2129c645377e9e"
    },
    {
        "hash": "3827403c5179b0146fc97cf3efb395cb050a58c2",
        "author": "Mayank Agarwal",
        "date": "2013-05-21T11:49:29-07:00",
        "message": "Check to db_stress to not allow disable_wal and reopens set together\n\nSummary: db can't reopen safely with disable_wal set!\n\nTest Plan: make db_stress; run db_stress with disable_wal and reopens set and see error\n\nReviewers: dhruba, vamsi\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D10857",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3827403c5179b0146fc97cf3efb395cb050a58c2"
    },
    {
        "hash": "15ccd10c7f2bfcb9c3b5f97484a12e5c178c8b3f",
        "author": "Mayank Agarwal",
        "date": "2013-05-20T18:13:32-07:00",
        "message": "A nit to db_stress to terminate generated value at proper length\n\nSummary: Will help while debugging if the generated value is truncated at proper length.\n\nTest Plan: make db_stress;/db_stress --max_key=10000 --db=/tmp/mcr --threads=1 --ops_per_thread=10000\n\nReviewers: dhruba, vamsi\n\nReviewed By: vamsi\n\nDifferential Revision: https://reviews.facebook.net/D10845",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/15ccd10c7f2bfcb9c3b5f97484a12e5c178c8b3f"
    },
    {
        "hash": "8a59ed9bc7e3253b22755e67f25d307d2dfe6dc3",
        "author": "Haobo Xu",
        "date": "2013-05-17T16:15:44-07:00",
        "message": "[RockdDB] fix build\n\nSummary: assert => ASSERT_TRUE\n\nTest Plan: make release; make check\n\nReviewers: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D10839",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/merge_operators/string_append/stringappend_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8a59ed9bc7e3253b22755e67f25d307d2dfe6dc3"
    },
    {
        "hash": "d98e56315d308c2b427b62b5dc8b55d91ad36428",
        "author": "Abhishek Kona",
        "date": "2013-05-10T13:19:39-07:00",
        "message": "[RocksDB] Make Ticker Atomic\n\nSummary:\nOur ticker was not atomic. This was based on the assumption that we will increment counts at places only protected by Mutex. This is hard to program for and easy to make mistakes (mutex may be held a few layers above etc).\nAlso this increases the instructions executed when the mutex is held.\n\nTest Plan: make check\n\nReviewers: haobo, dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D10569",
        "modified_files_count": 1,
        "modified_files": [
            "include/leveldb/statistics.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d98e56315d308c2b427b62b5dc8b55d91ad36428"
    },
    {
        "hash": "ff1a0801fc0b8ae990e783f9f749fe93b7369720",
        "author": "Mayank Agarwal",
        "date": "2013-05-09T17:32:39-07:00",
        "message": "Correct path of db.h in utility_db.h\n\nSummary: Will not be caught properly from file in fbcode with old path. New path fixes it.\n\nTest Plan: make\n\nReviewers: sheki, dhruba, haobo, vamsi\n\nReviewed By: sheki\n\nDifferential Revision: https://reviews.facebook.net/D10707",
        "modified_files_count": 1,
        "modified_files": [
            "include/utilities/utility_db.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ff1a0801fc0b8ae990e783f9f749fe93b7369720"
    },
    {
        "hash": "a8d3aa2c26eecdab268d2634a49eb325587a7efb",
        "author": "Dhruba Borthakur",
        "date": "2013-05-08T17:10:11-07:00",
        "message": "Assertion failure for L0-L1 compactions.\n\nSummary:\nFor level-0 compactions, we try to find if can include more L0 files\nin the same compaction run. This causes the 'smallest' and 'largest'\nkey to get extended to a larger range. But the suceeding call to\nParentRangeInCompaction() was still using the earlier\nvalues of 'smallest' and 'largest',\n\nBecause of this bug, a file in L1 can be part of two concurrent\ncompactions: one L0-L1 compaction and the other L1-L2 compaction.\n\nThis should not cause any data loss, but will cause an assertion\nfailure with debug builds.\n\nTest Plan: make check\n\nDifferential Revision: https://reviews.facebook.net/D10677",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a8d3aa2c26eecdab268d2634a49eb325587a7efb"
    },
    {
        "hash": "37e97b129795fdd02418ce67c3b2b63445450423",
        "author": "Mayank Agarwal",
        "date": "2013-05-03T15:09:16-07:00",
        "message": "Fix invalid-read to freed memory in ttl-iterator\n\nSummary: value function in ttl-iterator was returning string which would have been freed before its usage as a slice. Thanks valgrind!\n\nTest Plan: valgrind ./ttl_test\n\nReviewers: dhruba, haobo, sheki, vamsi\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D10635",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/ttl/db_ttl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/37e97b129795fdd02418ce67c3b2b63445450423"
    },
    {
        "hash": "fb96ec1686bf6c49bf65c8177a48b4ee551598fb",
        "author": "Abhishek Kona",
        "date": "2013-04-25T13:36:47-07:00",
        "message": "[RocksDB] Print all internally collected histograms in db_bench. Also print p95\n\nSummary: $title\n\nTest Plan: make db_bench . run db_bench and check for expected output\n\nReviewers: haobo, dhruba\n\nReviewed By: haobo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D10521",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fb96ec1686bf6c49bf65c8177a48b4ee551598fb"
    },
    {
        "hash": "06d3487b3fba1a3ed4f5041c7e6be38cc6dff4a3",
        "author": "Haobo Xu",
        "date": "2013-04-22T20:38:02-07:00",
        "message": "[RocksDB] Print stack trace to stderr instead of stdio.\n\nSummary: Some scripts (like regression_build_test.sh) redirect stdio to a tmp file and delete it on exit. This would miss the stack trace output on segfault. Output to stderr would hopefully show us the stack trace in the continuous build output.\n\nTest Plan: ./signal_test, make check\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D10485",
        "modified_files_count": 1,
        "modified_files": [
            "port/stack_trace.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/06d3487b3fba1a3ed4f5041c7e6be38cc6dff4a3"
    },
    {
        "hash": "958b9c80e1d54624228bad5fd3382a84bbce6553",
        "author": "Kai Liu",
        "date": "2013-04-22T18:10:28-07:00",
        "message": "Avoid global static initialization in Env::Default()\n\nSummary:\nMark's task description from #2316777\n\nEnv::Default() comes from util/env_posix.cc\n\nThis is a static global.\n\nstatic PosixEnv default_env;\n\nEnv* Env::Default() {\n  return &default_env;\n}\n\n-----\n\nThese globals assume default_env was initialized first. I don't think that is safe or correct to do (http://stackoverflow.com/questions/1005685/c-static-initialization-order)\n\nconst string AutoRollLoggerTest::kTestDir(\ntest::TmpDir() + \"/db_log_test\");\nconst string AutoRollLoggerTest::kLogFile(\ntest::TmpDir() + \"/db_log_test/LOG\");\nEnv* AutoRollLoggerTest::env = Env::Default();\n\nTest Plan:\nrun make clean && make && make check\nBut how can I know if it works in Ubuntu?\n\nReviewers: MarkCallaghan, chip\n\nReviewed By: chip\n\nCC: leveldb, dhruba, haobo\n\nDifferential Revision: https://reviews.facebook.net/D10491",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/958b9c80e1d54624228bad5fd3382a84bbce6553"
    },
    {
        "hash": "344e832f55645011188bb17ea33b90431af1a823",
        "author": "Abhishek Kona",
        "date": "2013-04-22T15:44:19-07:00",
        "message": "[RocksDB] Fix ReadMissing in db_bench\n\nSummary: D8943 Broke read_missing. Fix it by adding a \".\" at the end of the generated key\n\nTest Plan: generate, print and check the key has a \".\"\n\nReviewers: dhruba, haobo\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D10455",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/344e832f55645011188bb17ea33b90431af1a823"
    },
    {
        "hash": "3cb7bf8170fb68dc6a0c967e7dbc8e7dba685e4a",
        "author": "Dhruba Borthakur",
        "date": "2013-04-22T14:41:45-07:00",
        "message": "Initialize parameters in the constructor.\n\nSummary:\nRocksDB doesn't build on Ubuntu VM .. shoudl be fixed with this patch.\n\ng++ --version\ng++ (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3\n\nutil/env_posix.cc:68:24: sorry, unimplemented: non-static data member initializers\nutil/env_posix.cc:68:24: error: ISO C++ forbids in-class initialization of non-const static member ‘use_os_buffer’\nutil/env_posix.cc:113:24: sorry, unimplemented: non-static data member initializers\nutil/env_posix.cc:113:24: error: ISO C++ forbids in-class initialization of non-const static member ‘use_os_buffer\n\nTest Plan: make check\n\nReviewers: sheki, leveldb\n\nReviewed By: sheki\n\nDifferential Revision: https://reviews.facebook.net/D10461",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3cb7bf8170fb68dc6a0c967e7dbc8e7dba685e4a"
    },
    {
        "hash": "e0b60923ee8b9db68cb11cfda7b070f302e4c320",
        "author": "Haobo Xu",
        "date": "2013-04-20T10:26:51-07:00",
        "message": "[RocksDB] fix build\n\nSummary: forgot to include signal_test.cc\n\nTest Plan: make check\n\nReviewers: sheki\n\nReviewed By: sheki\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D10281",
        "modified_files_count": 1,
        "modified_files": [
            "util/signal_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e0b60923ee8b9db68cb11cfda7b070f302e4c320"
    },
    {
        "hash": "a29fc171a6aee45ab7f70e478f8d70e8045e9491",
        "author": "Haobo Xu",
        "date": "2013-04-15T19:18:51-07:00",
        "message": "[RocksDB] posix_logger does not compile on non-linux platform\n\nSummary: As title. Found out this when testing stack_trace.cc portability.\n\nTest Plan: make check; manual test 'non-linux' build by forcing OS_LINUX2\n\nReviewers: dhruba, heyongqiang\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D10263",
        "modified_files_count": 1,
        "modified_files": [
            "util/posix_logger.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a29fc171a6aee45ab7f70e478f8d70e8045e9491"
    },
    {
        "hash": "7c6c3c0ff47eb852dccb9c22cf5618aea071cb87",
        "author": "Abhishek Kona",
        "date": "2013-04-15T15:27:15-07:00",
        "message": "[Rockdsdb] Better Error messages. Closing db instead of deleting db\n\nSummary: A better error message. A local change. Did not look at other places where this could be done.\n\nTest Plan: compile\n\nReviewers: dhruba, MarkCallaghan\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D10251",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7c6c3c0ff47eb852dccb9c22cf5618aea071cb87"
    },
    {
        "hash": "6594fef7ef6448af199f24de3e711c0453d87089",
        "author": "Mayank Agarwal",
        "date": "2013-04-10T14:50:25-07:00",
        "message": "Exit and Join the background compaction threads while running rocksdb tests\n\nSummary:\nThe background compaction threads are never exitted and therefore caused\nmemory-leaks while running rpcksdb tests. Have changed the PosixEnv destructor to exit and join them and changed the tests likewise\nThe memory leaked has reduced from 320 bytes to 64 bytes in all the tests. The 64\nbytes is relating to\npthread_exit, but still have to figure out why. The stack-trace right now with\ntable_test.cc = 64 bytes in 1 blocks are possibly lost in loss record 4 of 5\n   at 0x475D8C: malloc (jemalloc.c:914)\n   by 0x400D69E: _dl_map_object_deps (dl-deps.c:505)\n   by 0x4013393: dl_open_worker (dl-open.c:263)\n   by 0x400F015: _dl_catch_error (dl-error.c:178)\n   by 0x4013B2B: _dl_open (dl-open.c:569)\n   by 0x5D3E913: do_dlopen (dl-libc.c:86)\n   by 0x400F015: _dl_catch_error (dl-error.c:178)\n   by 0x5D3E9D6: __libc_dlopen_mode (dl-libc.c:47)\n   by 0x5048BF3: pthread_cancel_init (unwind-forcedunwind.c:53)\n   by 0x5048DC9: _Unwind_ForcedUnwind (unwind-forcedunwind.c:126)\n   by 0x5046D9F: __pthread_unwind (unwind.c:130)\n   by 0x50413A4: pthread_exit (pthreadP.h:289)\n\nTest Plan: make all check\n\nReviewers: dhruba, sheki, haobo\n\nReviewed By: dhruba\n\nCC: leveldb, chip\n\nDifferential Revision: https://reviews.facebook.net/D9573",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6594fef7ef6448af199f24de3e711c0453d87089"
    },
    {
        "hash": "7730587120eb7f4b5cc5e0dc1630e63cca24319c",
        "author": "Dhruba Borthakur",
        "date": "2013-04-10T09:59:48-07:00",
        "message": "Prevent segfault in OpenCompactionOutputFile\n\nSummary:\nThe segfault was happening because the program was unable to open a new\nsst file (as part of the compaction) because the process ran out of\nfile descriptors.\n\nThe fix is to check the return status of the file creation before taking\nany other action.\n\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7fabf03f9700 (LWP 29904)]\nleveldb::DBImpl::OpenCompactionOutputFile (this=this@entry=0x7fabf9011400, compact=compact@entry=0x7fabf741a2b0) at db/db_impl.cc:1399\n1399    db/db_impl.cc: No such file or directory.\n(gdb) where\n\nTest Plan: make check\n\nReviewers: MarkCallaghan, sheki\n\nReviewed By: MarkCallaghan\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D10101",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7730587120eb7f4b5cc5e0dc1630e63cca24319c"
    },
    {
        "hash": "adb4e4509b208576ed6f934547dc94d7a2a83702",
        "author": "Mayank Agarwal",
        "date": "2013-04-09T11:49:35-07:00",
        "message": "Fixing delete in env_posix.cc\n\nSummary: Was deleting incorrectly. Should delete the whole array.\n\nTest Plan: make;valgrind stops complaining about Mismatched free/delete\n\nReviewers: dhruba, sheki\n\nReviewed By: sheki\n\nCC: leveldb, haobo\n\nDifferential Revision: https://reviews.facebook.net/D10059",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/adb4e4509b208576ed6f934547dc94d7a2a83702"
    },
    {
        "hash": "9b3134f5ca5cfb77d0f2add8c1fad3894b950fe3",
        "author": "Mayank Agarwal",
        "date": "2013-04-08T13:12:27-07:00",
        "message": "Make provision for db_stress to work with a pre-existing dir\n\nSummary: The crash_test depends on db_stress to work with pre-existing dir\n\nTest Plan: make db_stress; Run db_stress with 'destroy_db_initially=0'\n\nReviewers: vamsi, dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D10041",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9b3134f5ca5cfb77d0f2add8c1fad3894b950fe3"
    },
    {
        "hash": "26f68d3939e398004c7e66f17a069c0bd4d85d96",
        "author": "Mayank Agarwal",
        "date": "2013-04-08T12:09:17-07:00",
        "message": "db_stress #reopens should be less than ops_per_thread\n\nSummary: For sanity w.r.t. the way we split up the reopens equally among the ops/thread\n\nTest Plan: make db_stress; db_stress --ops_per_thread=10 --reopens=10 => error\n\nReviewers: vamsi, dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D10023",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/26f68d3939e398004c7e66f17a069c0bd4d85d96"
    },
    {
        "hash": "0e40185a7d378bdfd0cbe11a7eb6d02c6239371f",
        "author": "Abhishek Kona",
        "date": "2013-04-05T11:26:46-07:00",
        "message": "[Rocksdb] Remove useless struct TableAndFile\n\nSummary:\nTableAndFile was a struct used earlier to delete the file as we did not have std::unique_ptr in the codebase.\nWith Chip introducing C++11 hotness like std::unique_ptr we can do away with the struct.\n\nTest Plan: make all check\n\nReviewers: haobo, heyongqiang\n\nReviewed By: heyongqiang\n\nCC: dhruba, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D9975",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0e40185a7d378bdfd0cbe11a7eb6d02c6239371f"
    },
    {
        "hash": "676311086753ec5ce2eb7140f8a5cff770a94b33",
        "author": "Haobo Xu",
        "date": "2013-04-02T11:46:45-07:00",
        "message": "[RocksDB] Replace iterator based loop with range based loop for stl containers\n\nSummary:\nAs title.\nCode is shorter and cleaner\nSee https://our.dev.facebook.com/intern/tasks/?t=2233981\n\nTest Plan: make check\n\nReviewers: dhruba, heyongqiang\n\nReviewed By: dhruba\n\nCC: leveldb, zshao\n\nDifferential Revision: https://reviews.facebook.net/D9789",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/676311086753ec5ce2eb7140f8a5cff770a94b33"
    },
    {
        "hash": "d8150821599a0211746707aaa589f79372233168",
        "author": "Haobo Xu",
        "date": "2013-04-02T11:36:51-07:00",
        "message": "[RocksDB] env_posix cleanup\n\nSummary:\n1. SetBackgroundThreads was not thread safe\n2. queue_size_ does not seem necessary\n3. moved condition signal after shared state change. Even though the original\n   order is in practice ok (because the mutex is still held), it looks fishy\n   and non-intuitive.\n\nTest Plan: make check\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb, zshao\n\nDifferential Revision: https://reviews.facebook.net/D9825",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d8150821599a0211746707aaa589f79372233168"
    },
    {
        "hash": "3b51605b8dd5d0a288663b296f2b3f1182bc38c3",
        "author": "Abhishek Kona",
        "date": "2013-03-28T13:37:15-07:00",
        "message": "[RocksDB] Fix binary search while finding probable wal files\n\nSummary:\nRocksDB does a binary search to look at the files which might contain the requested sequence number at the call GetUpdatesSince.\nThere was a bug in the binary search => when the file pointed by the middle index of bsearch was empty/corrupt it needst to resize the vector and update indexes.\nThis now fixes that.\n\nTest Plan: existing unit tests pass.\n\nReviewers: heyongqiang, dhruba\n\nReviewed By: heyongqiang\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D9777",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3b51605b8dd5d0a288663b296f2b3f1182bc38c3"
    },
    {
        "hash": "ecd8db02004d73c4b65ebb772a6c882b5cb98223",
        "author": "Haobo Xu",
        "date": "2013-03-26T22:42:26-07:00",
        "message": "[RocksDB] Minimize Mutex protected code section in the critical path\n\nSummary: rocksdb uses a single global lock to protect in memory metadata. We should minimize the mutex protected code section to increase the effective parallelism of the program. See https://our.intern.facebook.com/intern/tasks/?t=2218928\n\nTest Plan:\nmake check\ndb_bench\n\nReviewers: dhruba, heyongqiang\n\nCC: zshao, leveldb\n\nDifferential Revision: https://reviews.facebook.net/D9705",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ecd8db02004d73c4b65ebb772a6c882b5cb98223"
    },
    {
        "hash": "38d54832f70c3228ad975acec5688fb410678c1a",
        "author": "Mayank Agarwal",
        "date": "2013-03-21T11:26:50-07:00",
        "message": "Initialize variable in constructor for PosixEnv::checkedDiskForMmap_\n\nSummary: This caused compilation problems on some gcc platforms during the third-partyrelease\n\nTest Plan: make\n\nReviewers: sheki\n\nReviewed By: sheki\n\nDifferential Revision: https://reviews.facebook.net/D9627",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/38d54832f70c3228ad975acec5688fb410678c1a"
    },
    {
        "hash": "d0798f67f4033f0617eacc7a73f22cfe3e828eb1",
        "author": "Dhruba Borthakur",
        "date": "2013-03-20T23:43:29-07:00",
        "message": "Run compactions even if workload is readonly or read-mostly.\n\nSummary:\nThe events that trigger compaction:\n* opening the database\n* Get -> only if seek compaction is not disabled and other checks are true\n* MakeRoomForWrite -> when memtable is full\n* BackgroundCall ->\n  If the background thread is about to do a compaction run, it schedules\n  a new background task to trigger a possible compaction. This will cause\n  additional background threads to find and process other compactions that\n  can run concurrently.\n\nTest Plan: ran db_bench with overwrite and readonly alternatively.\n\nReviewers: sheki, MarkCallaghan\n\nReviewed By: sheki\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D9579",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d0798f67f4033f0617eacc7a73f22cfe3e828eb1"
    },
    {
        "hash": "a6f4275403e8b0be3404eff5ca0ee6917f368a1c",
        "author": "Mayank Agarwal",
        "date": "2013-03-20T11:19:12-07:00",
        "message": "Removing boost from ldb_cmd.cc\n\nSummary: Getting rid of boost in our github codebase which caused problems on third-party\n\nTest Plan: make ldb; python tools/ldb_test.py\n\nReviewers: sheki, dhruba\n\nReviewed By: sheki\n\nDifferential Revision: https://reviews.facebook.net/D9543",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a6f4275403e8b0be3404eff5ca0ee6917f368a1c"
    },
    {
        "hash": "48abc06049e94aff594cd22adb6899313e67e38a",
        "author": "Mayank Agarwal",
        "date": "2013-03-19T21:33:01-07:00",
        "message": "Using return value of fwrite in posix_logger.h\n\nSummary: Was causing error(warning) in third-party saying unused result\n\nTest Plan: make\n\nReviewers: sheki, dhruba\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D9447",
        "modified_files_count": 1,
        "modified_files": [
            "util/posix_logger.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/48abc06049e94aff594cd22adb6899313e67e38a"
    },
    {
        "hash": "7b9db9c98e9a4f7eb923dbf283a6fd571148de7d",
        "author": "Abhishek Kona",
        "date": "2013-03-18T12:04:38-07:00",
        "message": "DO not report level size as zero when there are no files in L0\n\nSummary:\nInstead of checking for number of files in L0. Check for number of files in the requested level.\n\nBug introduced in D4929 (diff trying to do too many things).\n\nTest Plan: db_test.\n\nReviewers: dhruba, MarkCallaghan\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D9483",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7b9db9c98e9a4f7eb923dbf283a6fd571148de7d"
    },
    {
        "hash": "f04cc368f78cab7f1fd81191c112a21a051da5cc",
        "author": "Mayank Agarwal",
        "date": "2013-03-15T13:59:11-07:00",
        "message": "Fixing a careless mistake in ldb\n\nSummary: negation of the condition checked currently had to be checkd actually\n\nTest Plan: make ldb; python ldb_test.py\n\nReviewers: sheki, dhruba\n\nReviewed By: sheki\n\nDifferential Revision: https://reviews.facebook.net/D9459",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f04cc368f78cab7f1fd81191c112a21a051da5cc"
    },
    {
        "hash": "a78fb5e8bc7ef4485a512c9c1a57fa01dbe3cd50",
        "author": "Mayank Agarwal",
        "date": "2013-03-14T18:16:46-07:00",
        "message": "Doing away with boost in ldb_cmd.h\n\nSummary: boost functions cause complications while deploying to third-party\n\nTest Plan: make\n\nReviewers: sheki, dhruba\n\nReviewed By: sheki\n\nDifferential Revision: https://reviews.facebook.net/D9441",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a78fb5e8bc7ef4485a512c9c1a57fa01dbe3cd50"
    },
    {
        "hash": "8ade935971b05c4530806c1070e03327670d6733",
        "author": "Vamsi Ponnekanti",
        "date": "2013-03-10T21:57:00-07:00",
        "message": "[Report the #gets and #founds in db_stress]\n\nSummary:\nAlso added some comments and fixed some bugs in\nstats reporting. Now the stats seem to match what is expected.\n\nTest Plan:\n[nponnekanti@dev902 /data/users/nponnekanti/rocksdb] ./db_stress --test_batches_snapshots=1 --ops_per_thread=1000 --threads=1 --max_key=320\nLevelDB version     : 1.5\nNumber of threads   : 1\nOps per thread      : 1000\nRead percentage     : 10\nDelete percentage   : 30\nMax key             : 320\nRatio #ops/#keys    : 3\nNum times DB reopens: 10\nBatches/snapshots   : 1\nNum keys per lock   : 4\nCompression         : snappy\n------------------------------------------------\nNo lock creation because test_batches_snapshots set\n2013/03/04-15:58:56  Starting database operations\n2013/03/04-15:58:56  Reopening database for the 1th time\n2013/03/04-15:58:56  Reopening database for the 2th time\n2013/03/04-15:58:56  Reopening database for the 3th time\n2013/03/04-15:58:56  Reopening database for the 4th time\nCreated bg thread 0x7f4542bff700\n2013/03/04-15:58:56  Reopening database for the 5th time\n2013/03/04-15:58:56  Reopening database for the 6th time\n2013/03/04-15:58:56  Reopening database for the 7th time\n2013/03/04-15:58:57  Reopening database for the 8th time\n2013/03/04-15:58:57  Reopening database for the 9th time\n2013/03/04-15:58:57  Reopening database for the 10th time\n2013/03/04-15:58:57  Reopening database for the 11th time\n2013/03/04-15:58:57  Limited verification already done during gets\nStress Test : 1811.551 micros/op 552 ops/sec\n            : Wrote 0.10 MB (0.05 MB/sec) (598% of 1011 ops)\n            : Wrote 6050 times\n            : Deleted 3050 times\n            : 500/900 gets found the key\n            : Got errors 0 times\n\n[nponnekanti@dev902 /data/users/nponnekanti/rocksdb] ./db_stress --ops_per_thread=1000 --threads=1 --max_key=320\nLevelDB version     : 1.5\nNumber of threads   : 1\nOps per thread      : 1000\nRead percentage     : 10\nDelete percentage   : 30\nMax key             : 320\nRatio #ops/#keys    : 3\nNum times DB reopens: 10\nBatches/snapshots   : 0\nNum keys per lock   : 4\nCompression         : snappy\n------------------------------------------------\nCreating 80 locks\n2013/03/04-15:58:17  Starting database operations\n2013/03/04-15:58:17  Reopening database for the 1th time\n2013/03/04-15:58:17  Reopening database for the 2th time\n2013/03/04-15:58:17  Reopening database for the 3th time\n2013/03/04-15:58:17  Reopening database for the 4th time\nCreated bg thread 0x7fc0f5bff700\n2013/03/04-15:58:17  Reopening database for the 5th time\n2013/03/04-15:58:17  Reopening database for the 6th time\n2013/03/04-15:58:18  Reopening database for the 7th time\n2013/03/04-15:58:18  Reopening database for the 8th time\n2013/03/04-15:58:18  Reopening database for the 9th time\n2013/03/04-15:58:18  Reopening database for the 10th time\n2013/03/04-15:58:18  Reopening database for the 11th time\n2013/03/04-15:58:18  Starting verification\nStress Test : 1836.258 micros/op 544 ops/sec\n            : Wrote 0.01 MB (0.01 MB/sec) (59% of 1011 ops)\n            : Wrote 605 times\n            : Deleted 305 times\n            : 50/90 gets found the key\n            : Got errors 0 times\n2013/03/04-15:58:18  Verification successful\n\nRevert Plan: OK\n\nTask ID: #\n\nReviewers: emayanke, dhruba\n\nReviewed By: emayanke\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D9081",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8ade935971b05c4530806c1070e03327670d6733"
    },
    {
        "hash": "3b6653b1f8ca82771e41d61be2d472399676b455",
        "author": "amayank",
        "date": "2013-03-08T04:55:07-08:00",
        "message": "Make db_stress Not purge redundant keys on some opens\n\nSummary: In light of the new option introduced by commit 806e26435037f5e2eb3b8c2d1e5f278a86fdb2ba where the database has an option to compact before flushing to disk, we want the stress test to test both sides of the option. Have made it to 'deterministically' and configurably change that option for reopens.\n\nTest Plan: make db_stress; ./db_stress with some differnet options\n\nReviewers: dhruba, vamsi\n\nReviewed By: dhruba\n\nCC: leveldb, sheki\n\nDifferential Revision: https://reviews.facebook.net/D9165",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3b6653b1f8ca82771e41d61be2d472399676b455"
    },
    {
        "hash": "f5896681b4890f311c047057a3477a1bc681a4d2",
        "author": "Dhruba Borthakur",
        "date": "2013-03-04T13:56:23-08:00",
        "message": "Removed unnecesary file object in table_cache.\n\nSummary:\nTableCache->file is not used. remove it.\nI kept the TableAndFile structure and will clean it up in a future patch.\n\nTest Plan: make clean check\n\nReviewers: sheki, chip\n\nReviewed By: chip\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D9075",
        "modified_files_count": 1,
        "modified_files": [
            "db/table_cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f5896681b4890f311c047057a3477a1bc681a4d2"
    },
    {
        "hash": "4992633751d33f619c455155a7bc3dec3fa5bc19",
        "author": "bil",
        "date": "2013-03-01T14:10:09-08:00",
        "message": "enable the ability to set key size in db_bench in rocksdb\n\nSummary:\n1. the default value for key size is still 16\n2. enable the ability to set the key size via command line --key_size=\n\nTest Plan:\nbuild & run db_banch and pass some value via command line.\nverify it works correctly.\n\nReviewers: sheki\n\nReviewed By: sheki\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D8943",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4992633751d33f619c455155a7bc3dec3fa5bc19"
    },
    {
        "hash": "e45c7a84448c389822c1a9585976343ca9dbf10b",
        "author": "Dhruba Borthakur",
        "date": "2013-02-26T16:27:51-08:00",
        "message": "Abilty to support upto a million .sst files in the database\n\nSummary:\nThere was an artifical limit of 50K files per database. This is\ninsifficient if the database is 1 TB in size and each file is 2 MB.\n\nTest Plan: make check\n\nReviewers: sheki, emayanke\n\nReviewed By: emayanke\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D8919",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e45c7a84448c389822c1a9585976343ca9dbf10b"
    },
    {
        "hash": "465b9103f83329a1edfe477aa87fb06300ec0ab2",
        "author": "Vamsi Ponnekanti",
        "date": "2013-02-22T12:20:11-08:00",
        "message": "[Add a second kind of verification to db_stress\n\nSummary:\nCurrently the test tracks all writes in memory and\nuses it for verification at the end. This has 4 problems:\n(a) It needs mutex for each write to ensure in-memory update\nand leveldb update are done atomically. This slows down the\nbenchmark.\n(b) Verification phase at the end is time consuming as well\n(c) Does not test batch writes or snapshots\n(d) We cannot kill the test and restart multiple times in a\nloop because in-memory state will be lost.\n\nI am adding a FLAGS_multi that does MultiGet/MultiPut/MultiDelete\ninstead of get/put/delete to get/put/delete a group of related\nkeys with same values atomically. Every get retrieves the group\nof keys and checks that their values are same. This does not have\nthe above problems but the downside is that it does less amount\nof validation than the other approach.\n\nTest Plan:\nThis whole this is a test! Here is a small run. I am doing larger run now.\n\n[nponnekanti@dev902 /data/users/nponnekanti/rocksdb] ./db_stress --ops_per_thread=10000 --multi=1 --ops_per_key=25\nLevelDB version     : 1.5\nNumber of threads   : 32\nOps per thread      : 10000\nRead percentage     : 10\nDelete percentage   : 30\nMax key             : 2147483648\nNum times DB reopens: 10\nNum keys per lock   : 4\nCompression         : snappy\n------------------------------------------------\nCreating 536870912 locks\n2013/02/20-16:59:32  Starting database operations\nCreated bg thread 0x7f9ebcfff700\n2013/02/20-16:59:37  Reopening database for the 1th time\n2013/02/20-16:59:46  Reopening database for the 2th time\n2013/02/20-16:59:57  Reopening database for the 3th time\n2013/02/20-17:00:11  Reopening database for the 4th time\n2013/02/20-17:00:25  Reopening database for the 5th time\n2013/02/20-17:00:36  Reopening database for the 6th time\n2013/02/20-17:00:47  Reopening database for the 7th time\n2013/02/20-17:00:59  Reopening database for the 8th time\n2013/02/20-17:01:10  Reopening database for the 9th time\n2013/02/20-17:01:20  Reopening database for the 10th time\n2013/02/20-17:01:31  Reopening database for the 11th time\n2013/02/20-17:01:31  Starting verification\nStress Test : 109.125 micros/op 22191 ops/sec\n            : Wrote 0.00 MB (0.23 MB/sec) (59% of 32 ops)\n            : Deleted 10 times\n2013/02/20-17:01:31  Verification successful\n\nRevert Plan: OK\n\nTask ID: #\n\nReviewers: dhruba, emayanke\n\nReviewed By: emayanke\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D8733",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/465b9103f83329a1edfe477aa87fb06300ec0ab2"
    },
    {
        "hash": "6abb30d4d04eb1002ec67313cb709839c5e17ea3",
        "author": "Vamsi Ponnekanti",
        "date": "2013-02-21T12:26:32-08:00",
        "message": "[Missed adding cmdline parsing for new flags added in D8685]\n\nSummary:\nI had added FLAGS_numdistinct and FLAGS_deletepercent for randomwithverify\nbut forgot to add cmdline parsing for those flags.\n\nTest Plan:\n[nponnekanti@dev902 /data/users/nponnekanti/rocksdb] ./db_bench --benchmarks=randomwithverify --numdistinct=500\nLevelDB:    version 1.5\nDate:       Thu Feb 21 10:34:40 2013\nCPU:        24 * Intel(R) Xeon(R) CPU           X5650  @ 2.67GHz\nCPUCache:   12288 KB\nKeys:       16 bytes each\nValues:     100 bytes each (50 bytes after compression)\nEntries:    1000000\nRawSize:    110.6 MB (estimated)\nFileSize:   62.9 MB (estimated)\nCompression: snappy\nWARNING: Assertions are enabled; benchmarks unnecessarily slow\n------------------------------------------------\nCreated bg thread 0x7fbf90bff700\nrandomwithverify :       4.693 micros/op 213098 ops/sec; ( get:900000 put:80000 del:20000 total:1000000 found:714556)\n\n[nponnekanti@dev902 /data/users/nponnekanti/rocksdb] ./db_bench --benchmarks=randomwithverify --deletepercent=5\nLevelDB:    version 1.5\nDate:       Thu Feb 21 10:35:03 2013\nCPU:        24 * Intel(R) Xeon(R) CPU           X5650  @ 2.67GHz\nCPUCache:   12288 KB\nKeys:       16 bytes each\nValues:     100 bytes each (50 bytes after compression)\nEntries:    1000000\nRawSize:    110.6 MB (estimated)\nFileSize:   62.9 MB (estimated)\nCompression: snappy\nWARNING: Assertions are enabled; benchmarks unnecessarily slow\n------------------------------------------------\nCreated bg thread 0x7fe14dfff700\nrandomwithverify :       4.883 micros/op 204798 ops/sec; ( get:900000 put:50000 del:50000 total:1000000 found:443847)\n[nponnekanti@dev902 /data/users/nponnekanti/rocksdb]\n[nponnekanti@dev902 /data/users/nponnekanti/rocksdb] ./db_bench --benchmarks=randomwithverify --deletepercent=5 --numdistinct=500\nLevelDB:    version 1.5\nDate:       Thu Feb 21 10:36:18 2013\nCPU:        24 * Intel(R) Xeon(R) CPU           X5650  @ 2.67GHz\nCPUCache:   12288 KB\nKeys:       16 bytes each\nValues:     100 bytes each (50 bytes after compression)\nEntries:    1000000\nRawSize:    110.6 MB (estimated)\nFileSize:   62.9 MB (estimated)\nCompression: snappy\nWARNING: Assertions are enabled; benchmarks unnecessarily slow\n------------------------------------------------\nCreated bg thread 0x7fc31c7ff700\nrandomwithverify :       4.920 micros/op 203233 ops/sec; ( get:900000 put:50000 del:50000 total:1000000 found:445522)\n\nRevert Plan: OK\n\nTask ID: #\n\nReviewers: dhruba, emayanke\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D8769",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6abb30d4d04eb1002ec67313cb709839c5e17ea3"
    },
    {
        "hash": "1052ea236fa07360f1af4fcd29363b51a5a4b03e",
        "author": "amayank",
        "date": "2013-02-21T11:27:28-08:00",
        "message": "Exploring the rocksdb stress test\n\nSummary:\nFixed a bug in the stress-test where the correct size was not being\npassed to GenerateValue. This bug was there since the beginning but assertions\nwere switched on in our code-base only recently.\nAdded comments on the top detailing how the stress test works and how to\nquicken/slow it down after investigation.\n\nTest Plan: make all check. ./db_stress\n\nReviewers: dhruba, asad\n\nReviewed By: dhruba\n\nCC: vamsi, sheki, heyongqiang, zshao\n\nDifferential Revision: https://reviews.facebook.net/D8727",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/1052ea236fa07360f1af4fcd29363b51a5a4b03e"
    },
    {
        "hash": "945d2b59b97385b902f881599e5cea49152c7031",
        "author": "Vamsi Ponnekanti",
        "date": "2013-02-21T10:27:02-08:00",
        "message": "[Add randomwithverify benchmark option]\n\nSummary: Added RandomWithVerify benchmark option.\n\nTest Plan:\nThis whole diff is to test.\n[nponnekanti@dev902 /data/users/nponnekanti/rocksdb] ./db_bench --benchmarks=randomwithverify\nLevelDB:    version 1.5\nDate:       Tue Feb 19 17:50:28 2013\nCPU:        24 * Intel(R) Xeon(R) CPU           X5650  @ 2.67GHz\nCPUCache:   12288 KB\nKeys:       16 bytes each\nValues:     100 bytes each (50 bytes after compression)\nEntries:    1000000\nRawSize:    110.6 MB (estimated)\nFileSize:   62.9 MB (estimated)\nCompression: snappy\nWARNING: Assertions are enabled; benchmarks unnecessarily slow\n------------------------------------------------\nCreated bg thread 0x7fa9c3fff700\nrandomwithverify :       5.004 micros/op 199836 ops/sec; ( get:900000 put:80000 del:20000 total:1000000 found:711992)\n\nRevert Plan: OK\n\nTask ID: #\n\nReviewers: dhruba, emayanke\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D8685",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/945d2b59b97385b902f881599e5cea49152c7031"
    },
    {
        "hash": "fd367e677e4af0f01f18b93aed7e4cf8e527768f",
        "author": "Dhruba Borthakur",
        "date": "2013-02-18T21:53:56-08:00",
        "message": "Fix unit test failure in db_filename.cc\n\nSummary:\n    c_test: db/filename.cc:74: std::string leveldb::DescriptorFileName(const string&,....\n\nTest Plan:\n  this is a failure in a unit test\n\nDifferential Revision: https://reviews.facebook.net/D8667",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fd367e677e4af0f01f18b93aed7e4cf8e527768f"
    },
    {
        "hash": "aaa0cbb97a645d16a649279726f314f2f1cf636b",
        "author": "Kai Liu",
        "date": "2013-02-13T15:29:35-08:00",
        "message": "Fix the warning introduced by auto_roll_logger_test\n\nSummary: Fix the warning [-Werror=format-security] and [-Werror=unused-result].\n\nTest Plan:\nenforced the Werror and run make\n\nTask ID: 2101673\n\nBlame Rev:\n\nReviewers: heyongqiang\n\nDifferential Revision: https://reviews.facebook.net/D8553",
        "modified_files_count": 1,
        "modified_files": [
            "util/auto_roll_logger_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/aaa0cbb97a645d16a649279726f314f2f1cf636b"
    },
    {
        "hash": "4dc02f7b7a468b3d7d9eb5b150403a8f0cd634b1",
        "author": "Abhishek Kona",
        "date": "2013-01-31T17:31:43-08:00",
        "message": "Initialize all doubles to 0 in histogram.cc\n\nSummary:\nThe existing code did not initialize a few doubles in histogram.cc.\nCropped up when I wrote a unit-test.\n\nTest Plan: make all check\n\nReviewers: chip\n\nReviewed By: chip\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D8319",
        "modified_files_count": 1,
        "modified_files": [
            "util/histogram.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4dc02f7b7a468b3d7d9eb5b150403a8f0cd634b1"
    },
    {
        "hash": "88b79b24f30092664b321bc85bd6f4f55c8d256f",
        "author": "Kosie van der Merwe",
        "date": "2013-01-23T12:49:10-08:00",
        "message": "Fixed didIO not being set with no block_cache\n\nSummary:\nIn `Table::BlockReader()` when there was no block cache `didIO` was not set.\n\nThis didn't seem to matter as `didIO` is only used to trigger seek compactions. However, I would like it if someone else could check that is the case.\n\nTest Plan: `make check OPT=\"-g -O3\"`\n\nReviewers: dhruba, vamsi\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D8133",
        "modified_files_count": 1,
        "modified_files": [
            "table/table.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/88b79b24f30092664b321bc85bd6f4f55c8d256f"
    },
    {
        "hash": "4b1e9f0a359fef1f21faf368ab3dd743e1567a22",
        "author": "amayank",
        "date": "2013-01-16T14:30:45-08:00",
        "message": "Added an API in rocksdb for checking for \"invalid argument\" and \"not supported\" for leveldb::Status\n\nSummary: a function added to status.h to check whether Status::code is InvalidArgument and similarly for NotSupported state\n\nTest Plan: visual inspection\n\nReviewers: heyongqiang, dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7989",
        "modified_files_count": 1,
        "modified_files": [
            "include/leveldb/status.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4b1e9f0a359fef1f21faf368ab3dd743e1567a22"
    },
    {
        "hash": "9bbcab57a93b5be8f947cb4b727f08b6b8430985",
        "author": "Chip Turner",
        "date": "2013-01-15T14:05:49-08:00",
        "message": "Fix broken build\n\nSummary: Mis-merged from HEAD, had a duplicate declaration.\n\nTest Plan: make -j32 OPT=-g\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D7911",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9bbcab57a93b5be8f947cb4b727f08b6b8430985"
    },
    {
        "hash": "2ba125faf6a56b04ae5a3a46b2e911aa98676b42",
        "author": "Mark Callaghan",
        "date": "2013-01-11T15:00:47-08:00",
        "message": "fix warning for unused variable\n\nTest Plan: compile\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7857",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2ba125faf6a56b04ae5a3a46b2e911aa98676b42"
    },
    {
        "hash": "2e1ad2c48b60aafe9a030f206456321ee04bb030",
        "author": "Abhishek Kona",
        "date": "2013-01-09T09:52:45-08:00",
        "message": "Remove unnecessary asserts in table/merger.cc\n\nSummary:\nThe asserts introduced in https://reviews.facebook.net/D7629 are\nwrong.\n\nThe direction of iteration is changed after the function call so they\nassert's fail.\n\nTest Plan: make clean check\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7827",
        "modified_files_count": 1,
        "modified_files": [
            "table/merger.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2e1ad2c48b60aafe9a030f206456321ee04bb030"
    },
    {
        "hash": "d8371ef1f6119a136882faa81c09783681314346",
        "author": "Kosie van der Merwe",
        "date": "2013-01-08T12:16:40-08:00",
        "message": "Fixing some issues Valgrind found\n\nSummary: Found some issues running Valgrind on `db_test` (there are still some outstanding ones) and fixed them.\n\nTest Plan:\nmake check\n\nran `valgrind ./db_test` and saw that errors no longer occur\n\nReviewers: dhruba, vamsi, emayanke, sheki\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7803",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d8371ef1f6119a136882faa81c09783681314346"
    },
    {
        "hash": "4d339d7462d40c3e01b947445289c3ce2a132046",
        "author": "Kosie van der Merwe",
        "date": "2013-01-08T11:24:15-08:00",
        "message": "Fixed memory leak in ShardedLRUCache\n\nSummary: `~ShardedLRUCache()` was empty despite `init()` allocating memory on the heap. Fixed the leak by freeing memory allocated by `init()`.\n\nTest Plan:\nmake check\n\nRan valgrind on db_test before and after patch and saw leaked memory went down\n\nReviewers: vamsi, dhruba, emayanke, sheki\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7791",
        "modified_files_count": 1,
        "modified_files": [
            "util/cache.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4d339d7462d40c3e01b947445289c3ce2a132046"
    },
    {
        "hash": "628dc2aad909c86dbec7b96e8334eeac78a92e8f",
        "author": "Dhruba Borthakur",
        "date": "2013-01-08T11:21:11-08:00",
        "message": "db_bench should use the default value for max_grandparent_overlap_factor.\n\nSummary:\nThis was a peformance regression caused by https://reviews.facebook.net/D6729.\nThe default value of max_grandparent_overlap_factor was erroneously\nset to 0 in db_bench.\n\nThis was causing compactions to create really really small files because the max_grandparent_overlap_factor was erroneously set to zero in the benchmark.\n\nTest Plan: Run --benchmarks=overwrite\n\nReviewers: heyongqiang, emayanke, sheki, MarkCallaghan\n\nReviewed By: sheki\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7797",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/628dc2aad909c86dbec7b96e8334eeac78a92e8f"
    },
    {
        "hash": "4069f66cc791c09213ef6c2e0a2a744c298ddc45",
        "author": "Mark Callaghan",
        "date": "2013-01-07T09:56:10-08:00",
        "message": "Add --seed, --read_range to db_bench\n\nSummary:\nAdds the option --seed to db_bench to specify the base for the per-thread RNG.\nWhen not set each thread uses the same value across runs of db_bench which defeats\nIO stress testing.\n\nAdds the option --read_range. When set to a value > 1 an iterator is created and\neach query done for the randomread benchmark will do a range scan for that many\nrows. When not set or set to 1 the existing behavior (a point lookup) is done.\n\nFixes a bug where a printf format string was missing.\n\nTest Plan: run db_bench\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7749",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4069f66cc791c09213ef6c2e0a2a744c298ddc45"
    },
    {
        "hash": "d7d43ae21a4c4a07e7c08b01d07ace03b302d45d",
        "author": "Dhruba Borthakur",
        "date": "2013-01-02T13:19:06-08:00",
        "message": "ExtendOverlappingInputs too slow for large databases.\n\nSummary:\nThere was a bug in the ExtendOverlappingInputs method so that\nthe terminating condition for the backward search was incorrect.\n\nTest Plan: make clean check\n\nReviewers: sheki, emayanke, MarkCallaghan\n\nReviewed By: MarkCallaghan\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7725",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d7d43ae21a4c4a07e7c08b01d07ace03b302d45d"
    },
    {
        "hash": "5b05417df30ceea6594797aaa925791ae5464043",
        "author": "Dhruba Borthakur",
        "date": "2012-12-27T12:38:20-08:00",
        "message": "Complication error when using gcc 4.7.1.\n\nSummary:\nThere is a compilation error while using gcc 4.7.1.\nutil/ldb_cmd.cc:381:3: error: ‘leveldb::ReadOptions::ReadOptions’ names the constructor, not the type\nutil/ldb_cmd.cc:381:37: error: expected ‘;’ before ‘read_options’\nutil/ldb_cmd.cc:381:49: error: statement cannot resolve address of overloaded function\n\nTest Plan: make clean check\n\nReviewers: sheki, emayanke, zshao\n\nReviewed By: emayanke\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7659",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5b05417df30ceea6594797aaa925791ae5464043"
    },
    {
        "hash": "dcece4707e3adaff1853b4005b7b0f2d3e407a70",
        "author": "Zheng Shao",
        "date": "2012-12-26T20:09:10-08:00",
        "message": "ldb: Fix incorrect arg parsing\n\nSummary: We were ignoring additional chars at the end of an arg.  This can create confusion, e.g. --disable_wal=0 will act the same as --disable_wal without any warnings.\n\nTest Plan:\nTried this:\n[zshao@dev485 ~/git/rocksdb] ./ldb dump --statsAAA\nFailed: Unknown argument:--statsAAA\n\nReviewers: dhruba, sheki, emayanke\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7635",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dcece4707e3adaff1853b4005b7b0f2d3e407a70"
    },
    {
        "hash": "04832dbc02b0796237be4ad3b18472dc436eb4ff",
        "author": "Zheng Shao",
        "date": "2012-12-26T10:57:04-08:00",
        "message": "sst_dump: Fix incorrect cmd args parsing\n\nSummary: The current parsing logic ignores any additional chars after the arg.\n\nTest Plan: \"./sst_dump --verify_checksumAAA\" now outputs error.\n\nReviewers: dhruba, sheki, emayanke\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7611",
        "modified_files_count": 1,
        "modified_files": [
            "tools/sst_dump.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/04832dbc02b0796237be4ad3b18472dc436eb4ff"
    },
    {
        "hash": "127ee2e677c06282d850b7fb9771b9a698f70dbc",
        "author": "Zheng Shao",
        "date": "2012-12-21T10:45:24-08:00",
        "message": "manifest_dump: Fix the help message and make it consistent\n\nSummary: ldb uses --output_hex so make manifest_dump do the same thing.\n\nTest Plan:\n[zshao@dev485 ~/git/rocksdb] ./manifest_dump --output_hex --file=/data/users/zshao/test_leveldb/MANIFEST-000034\nmanifest_file_number 42 next_file_number 43 last_sequence 2311567 log_number 36  prev_log_number 0\n--- level 0 --- version# 0 ---\n--- level 1 --- version# 0 ---\n--- level 2 --- version# 0 ---\n--- level 3 --- version# 0 ---\n 5:27788699['0000027F4FBE0000' @ 1 : 1 .. '11CE749602C90000' @ 160642 : 1]\n 7:27785313['11CE773DA7E00000' @ 160643 : 1 .. '23A4C63EC55D0000' @ 321094 : 1]\n 9:27784288['23A4D581FCD30000' @ 321095 : 1 .. '3576291D12D00000' @ 481428 : 1]\n 38:64378271['35762BF0E0CE0000' @ 481429 : 1 .. '5E987E0604700000' @ 852910 : 1]\n 39:64379046['5E987EB0BDD50000' @ 852911 : 1 .. '87C954330E840000' @ 1224603 : 1]\n 40:10169201['87C95507E49C0000' @ 1224604 : 1 .. '8E48DC0933B70000' @ 1283317 : 1]\n 21:27798825['8E48DFB0D7CE0000' @ 1283318 : 1 .. 'A00675F8AD7E0000' @ 1443826 : 1]\n 23:27793751['A006777536E30000' @ 1443827 : 1 .. 'B1D1787FE8670000' @ 1604553 : 1]\n 25:27801659['B1D179289BB30000' @ 1604554 : 1 .. 'C396D3A69DCE0000' @ 1765012 : 1]\n 27:27792661['C396DA1E03B10000' @ 1765013 : 1 .. 'D55C9974FCC10000' @ 1925513 : 1]\n 29:27789095['D55C9B47CBC00000' @ 1925514 : 1 .. 'E71F67D11CCC0000' @ 2085789 : 1]\n 31:27793145['E71F7A667E740000' @ 2085790 : 1 .. 'F8D4712EF3D90000' @ 2246454 : 1]\n 41:11246031['F8D4715916A70000' @ 2246455 : 1 .. 'FFFFFCAE97DF0000' @ 2311567 : 1]\n--- level 4 --- version# 0 ---\n--- level 5 --- version# 0 ---\n--- level 6 --- version# 0 ---\n\nReviewers: dhruba, sheki, emayanke\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7575",
        "modified_files_count": 1,
        "modified_files": [
            "tools/manifest_dump.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/127ee2e677c06282d850b7fb9771b9a698f70dbc"
    },
    {
        "hash": "01d57a33fe7d2097e08bb1cc72f915214efea05f",
        "author": "Zheng Shao",
        "date": "2012-12-21T10:44:19-08:00",
        "message": "sst_dump: Add --output_hex option and output the same format as ldb dump\n\nSummary: Now sst_dump has the same option --output_hex as \"ldb dump\" and also share the same output format.  So we can do \"sst_dump ... | ldb load ...\" for an experiment.\n\nTest Plan:\n[zshao@dev485 ~/git/rocksdb] ./sst_dump --file=/data/users/zshao/test_leveldb/000005.sst  --output_hex | head -n 2\n0000027F4FBE00000101000000000000 ==> D901000000000000000057596F7520726563656976656420746F6461792773207370656369616C20676966742120436C69636B2041636365707420746F207669657720796F75722047696674206265666F72652069742064697361707065617273210000000000000000\n000007F9C2D400000102000000000000 ==> D1010000000000000000544974277320676F6F6420746F206265204B696E67E280A6206F7220517565656E212048657265277320796F75722054756573646179204D79737465727920476966742066726F6D20436173746C6556696C6C65219B7B227A636F6465223A22633566306531633039663764222C227470223A22613275222C227A6B223A22663638663061343262666264303966383435666239626235366365396536643024246234506C345139382E734C4D33522169482D4F31315A64794C4B7A4F4653766D7863746534625F2A3968684E3433786521776C427636504A414355795F70222C227473223A313334343936313737357D0000000000000000\n\nReviewers: dhruba, sheki, emayanke\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7587",
        "modified_files_count": 1,
        "modified_files": [
            "tools/sst_dump.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/01d57a33fe7d2097e08bb1cc72f915214efea05f"
    },
    {
        "hash": "7521a225d1c16f591015b323c0a76cbb8d0cf8ae",
        "author": "Zheng Shao",
        "date": "2012-12-20T15:29:51-08:00",
        "message": "sst_dump: Error message should include the case that compression algorithms are not supported.\n\nSummary: It took me almost a day to debug this. :(  Although I got to learn the file format as a by-product, this time could be saved if we have better error messages.\n\nTest Plan: gmake clean all; sst_dump --hex --file=000005.sst\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7551",
        "modified_files_count": 1,
        "modified_files": [
            "table/format.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7521a225d1c16f591015b323c0a76cbb8d0cf8ae"
    },
    {
        "hash": "2f0585fb970e75947200292475dd236def5363bd",
        "author": "Abhishek Kona",
        "date": "2012-12-17T10:25:26-08:00",
        "message": "Fix a bug. Where DestroyDB deletes a non-existant archive directory.\n\nSummary:\nC tests would fail sometimes as DestroyDB would return a Failure Status\nmessage when deleting an archival directory which was not created\n(WAL_ttl_seconds = 0).\n\nFix: Ignore the Status returned on Deleting Archival Directory.\n\nTest Plan: * make check\n\nReviewers: dhruba, emayanke\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7395",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/2f0585fb970e75947200292475dd236def5363bd"
    },
    {
        "hash": "3d9ff0e9218838099a1291fe95bc1e3ddf19325b",
        "author": "Zheng Shao",
        "date": "2012-12-16T16:55:38-08:00",
        "message": "ldb: fix dump command to pad HEX output chars with 0.\n\nSummary: The old code was omitting the 0 if the char is less than 16.\n\nTest Plan:\nTried the following program:\nint main() {\n  unsigned char c = 1;\n  printf(\"%X\\n\", c);\n  printf(\"%02X\\n\", c);\n  return 0;\n}\nThe output is:\n1\n01\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7437",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3d9ff0e9218838099a1291fe95bc1e3ddf19325b"
    },
    {
        "hash": "d0a30935c612d5420d9e4925bdfee8c3e55d2b60",
        "author": "Dhruba Borthakur",
        "date": "2012-12-12T16:25:52-08:00",
        "message": "Expose the serialized string that represents a WriteBatch.\n\nSummary:\nExpose the serialized string that represents a WriteBatch. This\nis helpful to replicate a writebatch operation from one machine\nto another.\n\nTest Plan: make clean check\n\nReviewers: sheki\n\nReviewed By: sheki\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7317",
        "modified_files_count": 1,
        "modified_files": [
            "include/leveldb/write_batch.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d0a30935c612d5420d9e4925bdfee8c3e55d2b60"
    },
    {
        "hash": "38671c4d54f1508af4368c6617517143e1617b66",
        "author": "Dhruba Borthakur",
        "date": "2012-12-09T17:15:27-08:00",
        "message": "Fix a race condition while processing tasks by background threads.\n\nSummary:\nSuppose you submit 100 background tasks one after another. The first\nenqueu task finds that the queue is empty and wakes up one worker thread.\nNow suppose that all remaining 99 work items are enqueued, they do not\nwake up any worker threads because the queue is already non-empty.\nThis causes a situation when there are 99 tasks in the task queue but\nonly one worker thread is processing a task while the remaining\nworker threads are waiting.\nThe fix is to always wakeup one worker thread while enqueuing a task.\n\nI also added a check to count the number of elements in the queue\nto help in debugging.\n\nTest Plan: make clean check.\n\nReviewers: chip\n\nReviewed By: chip\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D7203",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/38671c4d54f1508af4368c6617517143e1617b66"
    },
    {
        "hash": "f69e9f3e0485c4fb76cbbdb6161d4045bc5ed11f",
        "author": "Kosie van der Merwe",
        "date": "2012-12-07T10:48:46-08:00",
        "message": "Fixed off by 1 in tests.\n\nSummary: Added 1 to indices where I shouldn't have so overrun array.\n\nTest Plan: make check\n\nReviewers: sheki, emayanke, vamsi, dhruba\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D7227",
        "modified_files_count": 1,
        "modified_files": [
            "util/coding_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f69e9f3e0485c4fb76cbbdb6161d4045bc5ed11f"
    },
    {
        "hash": "3366eda83905af6c75999b1bcfa9f74f090b010f",
        "author": "Dhruba Borthakur",
        "date": "2012-11-27T22:17:38-08:00",
        "message": "Print out status at the end of a compaction run.\n\nSummary:\nPrint out status at the end of a compaction run. This helps in\ndebugging.\n\nTest Plan: make clean check\n\nReviewers: sheki\n\nReviewed By: sheki\n\nDifferential Revision: https://reviews.facebook.net/D7035",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3366eda83905af6c75999b1bcfa9f74f090b010f"
    },
    {
        "hash": "43f5a079892607cbda31331ac2b0269fb85cd5fb",
        "author": "sheki",
        "date": "2012-11-26T20:55:24-08:00",
        "message": "Remove unused varibles. Cause compiler warnings.\n\nTest Plan: make check\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: emayanke\n\nDifferential Revision: https://reviews.facebook.net/D6993",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/43f5a079892607cbda31331ac2b0269fb85cd5fb"
    },
    {
        "hash": "7c6f5278a27d297cd3b08ad6eb97e11c5af02329",
        "author": "Dhruba Borthakur",
        "date": "2012-11-26T12:01:55-08:00",
        "message": "Merge branch 'performance'",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7c6f5278a27d297cd3b08ad6eb97e11c5af02329"
    },
    {
        "hash": "e0cd6bf0e91e9b3892ded3b4e4a10a1e0c47ecf6",
        "author": "Dhruba Borthakur",
        "date": "2012-11-26T11:59:51-08:00",
        "message": "The c_test was sometimes failing with an assertion.\n\nSummary:\nOn fast filesystems (e.g. /dev/shm and ext4), the flushing\nof memstore to disk was fast and quick, and the background compaction\nthread was not getting scheduled fast enough to delete obsolete\nfiles before the db was closed. This caused the repair method\nto pick up those files that were not part of the db and the unit\ntest was failing.\n\nThe fix is to enhance the unti test to run a compaction before\nclosing the database so that all files that are not part of the\ndatabase are truly deleted from the filesystem.\n\nTest Plan: make c_test; ./c_test\n\nReviewers: chip, emayanke, sheki\n\nReviewed By: chip\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D6915",
        "modified_files_count": 1,
        "modified_files": [
            "db/c_test.c"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e0cd6bf0e91e9b3892ded3b4e4a10a1e0c47ecf6"
    },
    {
        "hash": "3754f2f4ff23ddec70f26e5002a3f80151924caf",
        "author": "Dhruba Borthakur",
        "date": "2012-11-20T15:44:21-08:00",
        "message": "A major bug that was not considering the compaction score of the n-1 level.\n\nSummary:\nThe method Finalize() recomputes the compaction score of each\nlevel and then sorts these score from largest to smallest. The\nidea is that the level with the largest compaction score will\nbe a better candidate for compaction.  There are usually very\nfew levels, and a bubble sort code was used to sort these\ncompaction scores. There existed a bug in the sorting code that\nskipped looking at the score for the n-1 level. This meant that\neven if the compaction score of the n-1 level is large, it will\nnot be picked for compaction.\n\nThis patch fixes the bug and also introduces \"asserts\" in the\ncode to detect any possible inconsistencies caused by future bugs.\n\nThis bug existed in the very first code change that introduced\nmulti-threaded compaction to the leveldb code. That version of\ncode was committed on Oct 19th via\nhttps://github.com/facebook/leveldb/commit/1ca0584345af85d2dccc434f451218119626d36e\n\nTest Plan: make clean check OPT=-g\n\nReviewers: emayanke, sheki, MarkCallaghan\n\nReviewed By: sheki\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D6837",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3754f2f4ff23ddec70f26e5002a3f80151924caf"
    },
    {
        "hash": "dde70898a1eddf774192ad84b42f2dae71cd0bdd",
        "author": "Dhruba Borthakur",
        "date": "2012-11-19T14:51:22-08:00",
        "message": "Fix asserts\n\nSummary:\nmake check OPT=-g fails with the following assert.\n==== Test DBTest.ApproximateSizes\ndb_test: db/version_set.cc:765: void leveldb::VersionSet::Builder::CheckConsistencyForDeletes(leveldb::VersionEdit*, int, int): Assertion `found' failed.\n\nThe assertion was that file #7 that was being deleted did not\npreexists, but actualy it did pre-exist as shown in the manifest\ndump shows below. The bug was that we did not check for file\nexistance at the same level.\n\n*************************Edit[0] = VersionEdit {\n  Comparator: leveldb.BytewiseComparator\n}\n\n*************************Edit[1] = VersionEdit {\n  LogNumber: 8\n  PrevLogNumber: 0\n  NextFile: 9\n  LastSeq: 80\n  AddFile: 0 7 8005319 'key000000' @ 1 : 1 .. 'key000079' @ 80 : 1\n}\n\n*************************Edit[2] = VersionEdit {\n  LogNumber: 8\n  PrevLogNumber: 0\n  NextFile: 13\n  LastSeq: 80\n  CompactPointer: 0 'key000079' @ 80 : 1\n  DeleteFile: 0 7\n  AddFile: 1 9 2101425 'key000000' @ 1 : 1 .. 'key000020' @ 21 : 1\n  AddFile: 1 10 2101425 'key000021' @ 22 : 1 .. 'key000041' @ 42 : 1\n  AddFile: 1 11 2101425 'key000042' @ 43 : 1 .. 'key000062' @ 63 : 1\n  AddFile: 1 12 1701165 'key000063' @ 64 : 1 .. 'key000079' @ 80 : 1\n}\n\nTest Plan:\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/dde70898a1eddf774192ad84b42f2dae71cd0bdd"
    },
    {
        "hash": "a4b79b6e28489e1508e9e8ec4d201b6fd1b6a238",
        "author": "Dhruba Borthakur",
        "date": "2012-11-19T13:20:25-08:00",
        "message": "Merge branch 'master' into performance",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a4b79b6e28489e1508e9e8ec4d201b6fd1b6a238"
    },
    {
        "hash": "74054fa99369ee284fa8c8a9399504eb9c06a915",
        "author": "Dhruba Borthakur",
        "date": "2012-11-19T13:16:46-08:00",
        "message": "Fix compilation error while compiling unit tests with OPT=-g\n\nSummary:\nFix compilation error while compiling with OPT=-g\n\nTest Plan:\nmake clean check OPT=-g\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/74054fa99369ee284fa8c8a9399504eb9c06a915"
    },
    {
        "hash": "48dafb2c5925476260125ae426d400132135ff15",
        "author": "Dhruba Borthakur",
        "date": "2012-11-19T12:16:45-08:00",
        "message": "Fix compilation error introduced by previous commit\n7889e094554dc5bba678a0bfa7fb5eca422c34de\n\nSummary:\nFix compilation error introduced by previous commit\n7889e094554dc5bba678a0bfa7fb5eca422c34de\n\nTest Plan:\nmake clean check",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/48dafb2c5925476260125ae426d400132135ff15"
    },
    {
        "hash": "661dc1572185518b51cb83d021be8e7282a9489e",
        "author": "Abhishek Kona",
        "date": "2012-11-19T12:04:35-08:00",
        "message": "Fix LDB dumpwal to print the messages as in the file.\n\nSummary:\nStringStream.clear() does not clear the stream. It sets some flags.\nWho knew? Fixing that is not printing the stuff again and again.\n\nTest Plan: ran it on a local db\n\nReviewers: dhruba, emayanke\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D6795",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/661dc1572185518b51cb83d021be8e7282a9489e"
    },
    {
        "hash": "65b035a47f8ee29b7ecd7c268cebefe627d6a1bc",
        "author": "amayank",
        "date": "2012-11-19T12:04:35-08:00",
        "message": "Fix a coding error in db_test.cc\n\nSummary: The new function MinLevelToCompress in db_test.cc was incomplete. It needs to tell the calling function-TEST whether the test has to be skipped or not\n\nTest Plan: make all;./db_test\n\nReviewers: dhruba, heyongqiang\n\nReviewed By: dhruba\n\nCC: sheki\n\nDifferential Revision: https://reviews.facebook.net/D6771",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/65b035a47f8ee29b7ecd7c268cebefe627d6a1bc"
    },
    {
        "hash": "b648401adbb50f7c56f274f5b18500168be8a088",
        "author": "Abhishek Kona",
        "date": "2012-11-19T11:14:07-08:00",
        "message": "Fix LDB dumpwal to print the messages as in the file.\n\nSummary:\nStringStream.clear() does not clear the stream. It sets some flags.\nWho knew? Fixing that is not printing the stuff again and again.\n\nTest Plan: ran it on a local db\n\nReviewers: dhruba, emayanke\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D6795",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b648401adbb50f7c56f274f5b18500168be8a088"
    },
    {
        "hash": "de278a6de9dfbe8b126da7ef5401b3a41ee225b4",
        "author": "amayank",
        "date": "2012-11-16T14:56:50-08:00",
        "message": "Fix a coding error in db_test.cc\n\nSummary: The new function MinLevelToCompress in db_test.cc was incomplete. It needs to tell the calling function-TEST whether the test has to be skipped or not\n\nTest Plan: make all;./db_test\n\nReviewers: dhruba, heyongqiang\n\nReviewed By: dhruba\n\nCC: sheki\n\nDifferential Revision: https://reviews.facebook.net/D6771",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/de278a6de9dfbe8b126da7ef5401b3a41ee225b4"
    },
    {
        "hash": "c3392c9fe0f8e188a33878e9b6007769af5c57a5",
        "author": "Dhruba Borthakur",
        "date": "2012-11-14T22:01:39-08:00",
        "message": "The db_stress test should also test multi-threaded compaction.\n\nSummary:\nCreate more than one background compaction thread if specified.\nThis code peice is similar to what exists in db_bench.\n\nTest Plan: make check\n\nDifferential Revision: https://reviews.facebook.net/D6753",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/c3392c9fe0f8e188a33878e9b6007769af5c57a5"
    },
    {
        "hash": "e988c11f5884120a6b8bbbd27a0eaea7f2f2504c",
        "author": "Dhruba Borthakur",
        "date": "2012-11-14T16:20:13-08:00",
        "message": "Enhance db_bench to be able to specify a grandparent_overlap_factor.\n\nSummary:\nThe value specified in max_grandparent_overlap_factor is used to\nlimit the file size in a compaction run. This patch makes it\nconfigurable when using db_bench.\n\nTest Plan: make clean db_bench\n\nReviewers: MarkCallaghan, heyongqiang\n\nReviewed By: heyongqiang\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D6729",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e988c11f5884120a6b8bbbd27a0eaea7f2f2504c"
    },
    {
        "hash": "43d9a8225a998276aa338812e939209ca0a1693c",
        "author": "Dhruba Borthakur",
        "date": "2012-11-13T10:40:52-08:00",
        "message": "Fix asserts so that \"make check OPT=-g\" works on performance branch\n\nSummary:\nCompilation used to fail with the error:\ndb/version_set.cc:1773: error: ‘number_of_files_to_sort_’ is not a member of ‘leveldb::VersionSet’\n\nI created a new method called CheckConsistencyForDeletes() so that\nall the high cost checking is done only when OPT=-g is specified.\n\nI also fixed a bug in PickCompactionBySize that was triggered when\nOPT=-g was switched on. The base_index in the compaction record\nwas not set correctly.\n\nTest Plan: make check OPT=-g\n\nDifferential Revision: https://reviews.facebook.net/D6687",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/43d9a8225a998276aa338812e939209ca0a1693c"
    },
    {
        "hash": "a785e029f7cf1f7e00e597e989957c52af91d6e0",
        "author": "Dhruba Borthakur",
        "date": "2012-11-12T13:59:35-08:00",
        "message": "The db_bench utility was broken in 1.5.4.fb because of a signed-unsigned comparision.\n\nSummary:\nThe db_bench utility was broken in 1.5.4.fb because of a\nsigned-unsigned comparision.\n\nThe static variable FLAGS_min_level_to_compress was recently\nchanged from int to 'unsigned in' but it is initilized to a\nnagative value -1.\n\nThe segfault is of this type:\nProgram received signal SIGSEGV, Segmentation fault.\nOpen (this=0x7fffffffdee0) at db/db_bench.cc:939\n939\tdb/db_bench.cc: No such file or directory.\n(gdb) where\n\nTest Plan: run db_bench with no options.\n\nReviewers: heyongqiang\n\nReviewed By: heyongqiang\n\nCC: MarkCallaghan, emayanke, sheki\n\nDifferential Revision: https://reviews.facebook.net/D6663",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a785e029f7cf1f7e00e597e989957c52af91d6e0"
    },
    {
        "hash": "e626261742e30cf972db21f1b4c495341ffb116c",
        "author": "amayank",
        "date": "2012-11-12T12:26:32-08:00",
        "message": "Introducing \"database reopens\" into the stress test. Database will reopen after a specified number of iterations (configurable) of each thread when they will wait for the databse to reopen.\n\nSummary: FLAGS_reopen (configurable) specifies the number of times the databse is to be reopened. FLAGS_ops_per_thread is divided into points based on that reopen field. At these points all threads come together to wait for the databse to reopen. Each thread \"votes\" for the database to reopen and when all have voted, the database reopens.\n\nTest Plan: make all;./db_stress\n\nReviewers: dhruba, MarkCallaghan, sheki, asad, heyongqiang\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D6627",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e626261742e30cf972db21f1b4c495341ffb116c"
    },
    {
        "hash": "9e97bfdcde9138041361d04effdd9987e492e713",
        "author": "amayank",
        "date": "2012-11-08T16:55:18-08:00",
        "message": "Introducing deletes for stress test\n\nSummary: Stress test modified to do deletes and later verify them\n\nTest Plan: running the test: db_stress\n\nReviewers: dhruba, heyongqiang, asad, sheki, MarkCallaghan\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D6567",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9e97bfdcde9138041361d04effdd9987e492e713"
    },
    {
        "hash": "18cb6004d281eb636537c72eadee66479d78243e",
        "author": "Dhruba Borthakur",
        "date": "2012-11-07T15:24:47-08:00",
        "message": "Fixed compilation error in previous merge.\n\nSummary:\nFixed compilation error in previous merge.\n\nTest Plan:\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/18cb6004d281eb636537c72eadee66479d78243e"
    },
    {
        "hash": "f1a7c735b5c7c0add9a86fd214c71c66732de533",
        "author": "heyongqiang",
        "date": "2012-11-05T10:30:19-08:00",
        "message": "fix complie error\n\nSummary:\n\nas subject\n\nTest Plan:n/a",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f1a7c735b5c7c0add9a86fd214c71c66732de533"
    },
    {
        "hash": "a1bd5b7752c91b17453742d0323b647d1c585f60",
        "author": "Dhruba Borthakur",
        "date": "2012-11-04T22:04:14-08:00",
        "message": "Compilation problem introduced by previous\ncommit 854c66b089bef5d27f79750884f70f6e2c8c69da.\n\nSummary:\nCompilation problem introduced by previous\ncommit 854c66b089bef5d27f79750884f70f6e2c8c69da.\n\nTest Plan:  make check",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a1bd5b7752c91b17453742d0323b647d1c585f60"
    },
    {
        "hash": "3e7e269292e60c51331839ac00cea409a0439d1d",
        "author": "Mark Callaghan",
        "date": "2012-10-30T07:21:37-07:00",
        "message": "Use timer to measure sleep rather than assume it is 1000 usecs\n\nSummary:\nThis makes the stall timers in MakeRoomForWrite more accurate by timing\nthe sleeps. From looking at the logs the real sleep times are usually\nabout 2000 usecs each when SleepForMicros(1000) is called. The modified LOG messages are:\n2012/10/29-12:06:33.271984 2b3cc872f700 delaying write 13 usecs for level0_slowdown_writes_trigger\n2012/10/29-12:06:34.688939 2b3cc872f700 delaying write 1728 usecs for rate limits with max score 3.83\n\nTask ID: #\n\nBlame Rev:\n\nTest Plan:\nrun db_bench, look at DB/LOG\n\nRevert Plan:\n\nDatabase Impact:\n\nMemcache Impact:\n\nOther Notes:\n\nEImportant:\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D6297",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3e7e269292e60c51331839ac00cea409a0439d1d"
    },
    {
        "hash": "fb8d4373257ae4c62b0e9ead80ccd04afccf9322",
        "author": "heyongqiang",
        "date": "2012-10-29T18:55:52-07:00",
        "message": "fix test failure\n\nSummary: as subject\n\nTest Plan: db_test\n\nReviewers: dhruba, MarkCallaghan\n\nReviewed By: MarkCallaghan\n\nDifferential Revision: https://reviews.facebook.net/D6309",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fb8d4373257ae4c62b0e9ead80ccd04afccf9322"
    },
    {
        "hash": "925f60d39dbd065429e0383204220ac51b5c3884",
        "author": "heyongqiang",
        "date": "2012-10-29T15:27:07-07:00",
        "message": "add a test case to make sure chaning num_levels will fail Summary:\n\nSummary: as subject\n\nTest Plan: db_test\n\nReviewers: dhruba, MarkCallaghan\n\nReviewed By: MarkCallaghan\n\nDifferential Revision: https://reviews.facebook.net/D6303",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/925f60d39dbd065429e0383204220ac51b5c3884"
    },
    {
        "hash": "de7689b1d742741faa991c21da26527f6bc607ee",
        "author": "Dhruba Borthakur",
        "date": "2012-10-29T11:12:24-07:00",
        "message": "Fix unit test failure caused by delaying deleting obsolete files.\n\nSummary:\nA previous commit 4c107587ed47af84633f8c61f65516a504d6cd98 introduced\nthe idea that some version updates might not delete obsolete files.\nThis means that if a unit test blindly counts the number of files\nin the db directory it might not represent the true state of the database.\n\nUse GetLiveFiles() insteads to count the number of live files in the database.\n\nTest Plan:\nmake check",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/de7689b1d742741faa991c21da26527f6bc607ee"
    },
    {
        "hash": "8965c8d0b9fadce5250502af2e57125d2a418e8c",
        "author": "Kai Liu",
        "date": "2012-10-26T15:23:50-07:00",
        "message": "Add the missing util/auto_split_logger.h\n\nSummary:\n\nTest Plan:\n\nReviewers:\n\nCC:\n\nTask ID: 1803577\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "util/auto_split_logger.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8965c8d0b9fadce5250502af2e57125d2a418e8c"
    },
    {
        "hash": "65855dd8d4d8756eec6c43b6faa3abbfb6ea8a86",
        "author": "Mark Callaghan",
        "date": "2012-10-26T14:19:13-07:00",
        "message": "Normalize compaction stats by time in compaction\n\nSummary:\nI used server uptime to compute per-level IO throughput rates. I\nintended to use time spent doing compaction at that level. This fixes that.\n\nTask ID: #\n\nBlame Rev:\n\nTest Plan:\nrun db_bench, look at results\n\nRevert Plan:\n\nDatabase Impact:\n\nMemcache Impact:\n\nOther Notes:\n\nEImportant:\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D6237",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/65855dd8d4d8756eec6c43b6faa3abbfb6ea8a86"
    },
    {
        "hash": "8eedf13a82a5e209bd5860f654bf0132b49c0be1",
        "author": "Dhruba Borthakur",
        "date": "2012-10-26T08:42:05-07:00",
        "message": "Fix unit test failure caused by delaying deleting obsolete files.\n\nSummary:\nA previous commit 4c107587ed47af84633f8c61f65516a504d6cd98 introduced\nthe idea that some version updates might not delete obsolete files.\nThis means that if a unit test blindly counts the number of files\nin the db directory it might not represent the true state of the database.\n\nUse GetLiveFiles() insteads to count the number of live files in the database.\n\nTest Plan: make check\n\nReviewers: heyongqiang, MarkCallaghan\n\nReviewed By: MarkCallaghan\n\nDifferential Revision: https://reviews.facebook.net/D6207",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8eedf13a82a5e209bd5860f654bf0132b49c0be1"
    },
    {
        "hash": "8fb5f404688ad32b37de38e6efa65ae38d800627",
        "author": "Dhruba Borthakur",
        "date": "2012-10-25T08:44:47-07:00",
        "message": "firstIndex fix for multi-threaded compaction code.\n\nSummary:\nPrior to multi-threaded compaction, wrap-around would be done by using\ncurrent_->files_[level[0]. With this change we should be\nusing the first file for which f->being_compacted is not true.\n\nhttps://github.com/facebook/leveldb/commit/1ca0584345af85d2dccc434f451218119626d36e#commitcomment-2041516\n\nTest Plan: make check\n\nDifferential Revision: https://reviews.facebook.net/D6165",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8fb5f404688ad32b37de38e6efa65ae38d800627"
    },
    {
        "hash": "47bce26acadf031563d79eb9c16753081b4cd778",
        "author": "Dhruba Borthakur",
        "date": "2012-10-23T22:32:54-07:00",
        "message": "Merge branch 'master' into performance",
        "modified_files_count": 1,
        "modified_files": [
            "include/leveldb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/47bce26acadf031563d79eb9c16753081b4cd778"
    },
    {
        "hash": "51d2adfbeb2e7f9465ed635cb75c6ebac521f744",
        "author": "Mark Callaghan",
        "date": "2012-10-23T14:58:53-07:00",
        "message": "Fix broken build. Add stdint.h to get uint64_t\n\nSummary:\nI still get failures from this. Not sure whether there was a fix in progress.\n\nTask ID: #\n\nBlame Rev:\n\nTest Plan:\ncompile\n\nRevert Plan:\n\nDatabase Impact:\n\nMemcache Impact:\n\nOther Notes:\n\nEImportant:\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D6147",
        "modified_files_count": 1,
        "modified_files": [
            "include/leveldb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/51d2adfbeb2e7f9465ed635cb75c6ebac521f744"
    },
    {
        "hash": "3489cd615c1e8d71b19cd0edd0b1fcc6200f3ef7",
        "author": "Dhruba Borthakur",
        "date": "2012-10-21T02:15:19-07:00",
        "message": "Merge branch 'master' into performance\n\nConflicts:\n\tdb/db_impl.cc\n\tdb/db_impl.h",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3489cd615c1e8d71b19cd0edd0b1fcc6200f3ef7"
    },
    {
        "hash": "50166999efd6c6f0404df9490b5c10a59b92e738",
        "author": "Dhruba Borthakur",
        "date": "2012-10-19T16:08:04-07:00",
        "message": "Merge branch 'master' into performance",
        "modified_files_count": 1,
        "modified_files": [
            "port/port_posix.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/50166999efd6c6f0404df9490b5c10a59b92e738"
    },
    {
        "hash": "507f5aac73c2d84e61035b71e812728906b1827b",
        "author": "Dhruba Borthakur",
        "date": "2012-10-19T16:06:33-07:00",
        "message": "Do not enable checksums for zlib compression.\n\nSummary:\nLeveldb code already calculates checksums for each block. There\nis no need to generate checksums inside zlib. This patch switches-off checksum generation/checking in zlib library.\n\n(The Inno support for zlib uses windowsBits=14 as well.)\n\npfabricator marks this file as binary. But here is the diff\n\ndiff --git a/port/port_posix.h b/port/port_posix.h\nindex 86a0927..db4e0b8 100644\n--- a/port/port_posix.h\n+++ b/port/port_posix.h\n@@ -163,7 +163,7 @@ inline bool Snappy_Uncompress(const char* input, size_t length,\n }\n\n inline bool Zlib_Compress(const char* input, size_t length,\n-    ::std::string* output, int windowBits = 15, int level = -1,\n+    ::std::string* output, int windowBits = -14, int level = -1,\n      int strategy = 0) {\n #ifdef ZLIB\n   // The memLevel parameter specifies how much memory should be allocated for\n@@ -223,7 +223,7 @@ inline bool Zlib_Compress(const char* input, size_t length,\n }\n\n inline char* Zlib_Uncompress(const char* input_data, size_t input_length,\n-    int* decompress_size, int windowBits = 15) {\n+    int* decompress_size, int windowBits = -14) {\n #ifdef ZLIB\n   z_stream _stream;\n   memset(&_stream, 0, sizeof(z_stream));\n\nTest Plan: run db_bench with zlib compression.\n\nReviewers: heyongqiang, MarkCallaghan\n\nReviewed By: heyongqiang\n\nDifferential Revision: https://reviews.facebook.net/D6105",
        "modified_files_count": 1,
        "modified_files": [
            "port/port_posix.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/507f5aac73c2d84e61035b71e812728906b1827b"
    },
    {
        "hash": "0230866791dff3de4da936b51026279922c309d3",
        "author": "Dhruba Borthakur",
        "date": "2012-10-15T10:18:49-07:00",
        "message": "Enhance db_bench to allow setting the number of levels in a database.\n\nSummary: Enhance db_bench to allow setting the number of levels in a database.\n\nTest Plan: run db_bench and look at LOG\n\nReviewers: heyongqiang, MarkCallaghan\n\nReviewed By: MarkCallaghan\n\nCC: MarkCallaghan\n\nDifferential Revision: https://reviews.facebook.net/D6027",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/0230866791dff3de4da936b51026279922c309d3"
    },
    {
        "hash": "5dc784c23378d9d8d53e01a3c5e96b8d50d2548b",
        "author": "Dhruba Borthakur",
        "date": "2012-10-12T17:00:25-07:00",
        "message": "Fix compilation problem with db_stress when using C11 compiler.\n\nSummary:\n\nTest Plan:\n\nReviewers:\n\nCC:\n\nTask ID: #\n\nBlame Rev:",
        "modified_files_count": 1,
        "modified_files": [
            "tools/db_stress.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/5dc784c23378d9d8d53e01a3c5e96b8d50d2548b"
    },
    {
        "hash": "e678a5947a5fda4c9133812b0f4ab0c0a76b47a9",
        "author": "Mark Callaghan",
        "date": "2012-10-03T09:54:33-07:00",
        "message": "Add --stats_interval option to db_bench\n\nSummary:\nThe option is zero by default and in that case reporting is unchanged.\nBy unchanged, the interval at which stats are reported is scaled after each\nreport and newline is not issued after each report so one line is rewritten.\nWhen non-zero it specifies the constant interval (in operations) at which\nstatistics are reported and the stats include the rate per interval. This\nmakes it easier to determine whether QPS changes over the duration of the test.\n\nTask ID: #\n\nBlame Rev:\n\nTest Plan:\nrun db_bench\n\nRevert Plan:\n\nDatabase Impact:\n\nMemcache Impact:\n\nOther Notes:\n\nEImportant:\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: heyongqiang\n\nDifferential Revision: https://reviews.facebook.net/D5817",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e678a5947a5fda4c9133812b0f4ab0c0a76b47a9"
    },
    {
        "hash": "d8763abecd5ed12913f3a9126763f8c0d23df247",
        "author": "Mark Callaghan",
        "date": "2012-10-03T09:52:26-07:00",
        "message": "Fix the bounds check for the --readwritepercent option\n\nSummary:\nsee above\n\nTask ID: #\n\nBlame Rev:\n\nTest Plan:\nrun db_bench with invalid value for option\n\nRevert Plan:\n\nDatabase Impact:\n\nMemcache Impact:\n\nOther Notes:\n\nEImportant:\n\n- begin *PUBLIC* platform impact section -\nBugzilla: #\n- end platform impact -\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nCC: heyongqiang\n\nDifferential Revision: https://reviews.facebook.net/D5823",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d8763abecd5ed12913f3a9126763f8c0d23df247"
    },
    {
        "hash": "fb4b381a0ca1414e99ac1ff93b4727d357f5da21",
        "author": "Dhruba Borthakur",
        "date": "2012-09-18T13:24:32-07:00",
        "message": "Print out the compile version in the LOG.\n\nSummary: Print out the compile version in the LOG.\n\nTest Plan: run dbbench and verify LOG\n\nReviewers: heyongqiang\n\nReviewed By: heyongqiang\n\nDifferential Revision: https://reviews.facebook.net/D5529",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fb4b381a0ca1414e99ac1ff93b4727d357f5da21"
    },
    {
        "hash": "3662c2976a74d140c589066480ee53171882f624",
        "author": "heyongqiang",
        "date": "2012-09-17T15:56:11-07:00",
        "message": "improve comments about target_file_size_base, target_file_size_multiplier, max_bytes_for_level_base, max_bytes_for_level_multiplier Summary:\n\nSummary: as subject\n\nTest Plan: compile\n\nReviewers: MarkCallaghan, dhruba\n\nDifferential Revision: https://reviews.facebook.net/D5499",
        "modified_files_count": 1,
        "modified_files": [
            "include/leveldb/options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/3662c2976a74d140c589066480ee53171882f624"
    },
    {
        "hash": "33323f21117e5bb8cf72569302f109aabb387bb9",
        "author": "Mark Callaghan",
        "date": "2012-09-14T16:43:50-07:00",
        "message": "Remove use of mmap for random reads\n\nSummary:\nReads via mmap on concurrent workloads are much slower than pread.\nFor example on a 24-core server with storage that can do 100k IOPS or more\nI can get no more than 10k IOPS with mmap reads and 32+ threads.\n\nTest Plan: db_bench benchmarks\n\nReviewers: dhruba, heyongqiang\n\nReviewed By: heyongqiang\n\nDifferential Revision: https://reviews.facebook.net/D5433",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/33323f21117e5bb8cf72569302f109aabb387bb9"
    },
    {
        "hash": "fa29f82548758e89236b45c44ba7aebe2ec907df",
        "author": "Mark Callaghan",
        "date": "2012-09-14T12:45:42-07:00",
        "message": "scan a long for FLAGS_cache_size to fix a compiler warning\n\nSummary:\nFLAGS_cache_size is a long, no need to scan %lld into a size_t\nfor it (which generates a compiler warning)\n\nTest Plan: run db_bench\n\nReviewers: dhruba, heyongqiang\n\nReviewed By: heyongqiang\n\nCC: heyongqiang\n\nDifferential Revision: https://reviews.facebook.net/D5427",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fa29f82548758e89236b45c44ba7aebe2ec907df"
    },
    {
        "hash": "837113908c2d152074cb72895da564f1f187eba2",
        "author": "Mark Callaghan",
        "date": "2012-09-14T12:28:21-07:00",
        "message": "Add --compression_type=X option with valid values: snappy (default) none bzip2 zlib\n\nSummary:\nThis adds an option to db_bench to specify the compression algorithm to\nuse for LevelDB\n\nTest Plan: ran db_bench\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D5421",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/837113908c2d152074cb72895da564f1f187eba2"
    },
    {
        "hash": "4028ae7d319ce3cc6b42418a00e8b52529257d26",
        "author": "Dhruba Borthakur",
        "date": "2012-09-13T10:56:02-07:00",
        "message": "Do not cache readahead-pages in the OS cache.\n\nSummary:\nWhen posix_fadvise(offset, offset) is usedm it frees up only those\npages in that specified range. But the filesystem could have done some\nread-aheads and those get cached in the OS cache.\n\nDo not cache readahead-pages in the OS cache.\n\nTest Plan: run db_bench benchmark.\n\nReviewers: vamsi, heyongqiang\n\nReviewed By: heyongqiang\n\nDifferential Revision: https://reviews.facebook.net/D5379",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_posix.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4028ae7d319ce3cc6b42418a00e8b52529257d26"
    },
    {
        "hash": "7ecc5d4ad5bd027e89725d78293b62772dad1eec",
        "author": "Dhruba Borthakur",
        "date": "2012-09-13T10:22:43-07:00",
        "message": "Enable db_bench to specify block size.\n\nSummary: Enable db_bench to specify block size.\n\nTest Plan: compile and run\n\nReviewers: heyongqiang\n\nReviewed By: heyongqiang\n\nDifferential Revision: https://reviews.facebook.net/D5373",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7ecc5d4ad5bd027e89725d78293b62772dad1eec"
    },
    {
        "hash": "536ca698ba43238617894a4b89b8657df944c5e6",
        "author": "Dhruba Borthakur",
        "date": "2012-09-06T09:13:24-07:00",
        "message": "The ReadnRandomWriteRandom was always looping FLAGS_num of times.\n\nSummary: If none of reads or writes are specified by user, then pick the FLAGS_NUM as the number of iterations in the ReadRandomWriteRandom test. If either reads or writes are defined, then use their maximum.\n\nTest Plan: run benchmark\n\nReviewers: heyongqiang\n\nReviewed By: heyongqiang\n\nDifferential Revision: https://reviews.facebook.net/D5217",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/536ca698ba43238617894a4b89b8657df944c5e6"
    },
    {
        "hash": "94208a7881452c96c3e7e2e9d713c5adf5d95dbd",
        "author": "Dhruba Borthakur",
        "date": "2012-09-04T12:06:26-07:00",
        "message": "Benchmark with both reads and writes at the same time.\n\nSummary:\nThis patch enables the db_bench benchmark to issue both random reads and random writes at the same time. This options can be trigged via\n./db_bench --benchmarks=readrandomwriterandom\n\nThe default percetage of reads is 90.\n\nOne can change the percentage of reads by specifying the --readwritepercent.\n./db_bench --benchmarks=readrandomwriterandom=50\n\nThis is a feature request from Jeffro asking for leveldb performance with a 90:10 read:write ratio.\n\nTest Plan: run on test machine.\n\nReviewers: heyongqiang\n\nReviewed By: heyongqiang\n\nDifferential Revision: https://reviews.facebook.net/D5067",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/94208a7881452c96c3e7e2e9d713c5adf5d95dbd"
    },
    {
        "hash": "935fdd030b2ab6f4a4924d42551e05152bf0d4a7",
        "author": "heyongqiang",
        "date": "2012-08-28T11:42:42-07:00",
        "message": "fix filename_test\n\nSummary: as subject\n\nTest Plan: run filename_test\n\nReviewers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D4965",
        "modified_files_count": 1,
        "modified_files": [
            "db/filename.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/935fdd030b2ab6f4a4924d42551e05152bf0d4a7"
    },
    {
        "hash": "690bf8868246889ef927b097c49a7aabc9c55e4d",
        "author": "heyongqiang",
        "date": "2012-08-28T11:29:30-07:00",
        "message": "in db_stats_logger.cc, hold mutex_ while accessing versions_\n\nSummary:\n\nas subject\n\nTest Plan:db_test\n\nReviewers: dhruba",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_stats_logger.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/690bf8868246889ef927b097c49a7aabc9c55e4d"
    },
    {
        "hash": "e675351ad7facccb934522b79e9889b7a50bf4f1",
        "author": "heyongqiang",
        "date": "2012-08-24T18:29:40-07:00",
        "message": "number to read is not resepected\n\nSummary: as subject\n\nTest Plan: sst_dump --command=scan --file=\n\nReviewers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D4887",
        "modified_files_count": 1,
        "modified_files": [
            "tools/sst_dump.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e675351ad7facccb934522b79e9889b7a50bf4f1"
    },
    {
        "hash": "407f020929e0ef6758e280cb551ab7f47ce49114",
        "author": "Dhruba Borthakur",
        "date": "2012-08-21T15:46:16-07:00",
        "message": "Unit test corruption_test do not compile.\n\nSummary: Unit test corruption_test do not compile.\n\nTest Plan: run unit tests\n\nReviewers: heyongqiang\n\nReviewed By: heyongqiang\n\nDifferential Revision: https://reviews.facebook.net/D4797",
        "modified_files_count": 1,
        "modified_files": [
            "include/leveldb/env.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/407f020929e0ef6758e280cb551ab7f47ce49114"
    },
    {
        "hash": "deb1a1fa9b93dbcc3d2fbde84b2391b3d1f7c024",
        "author": "heyongqiang",
        "date": "2012-08-19T22:37:51-07:00",
        "message": "add disable wal to db_bench\n\nSummary:\nas subject.\n\n./db_bench --benchmarks=fillrandom --num=1000000 --disable_data_sync=1 --write_buffer_size=50000000 --target_file_size_base=100000000 --disable_wal=1\n\nLevelDB:    version 1.4\nDate:       Sun Aug 19 16:01:59 2012\nCPU:        8 * Intel(R) Xeon(R) CPU           L5630  @ 2.13GHz\nCPUCache:   12288 KB\nKeys:       16 bytes each\nValues:     100 bytes each (50 bytes after compression)\nEntries:    1000000\nRawSize:    110.6 MB (estimated)\nFileSize:   62.9 MB (estimated)\n------------------------------------------------\nfillrandom   :       4.591 micros/op 217797 ops/sec;   24.1 MB/s\n\n./db_bench --benchmarks=fillrandom --num=1000000 --disable_data_sync=1 --write_buffer_size=50000000 --target_file_size_base=100000000\n\nLevelDB:    version 1.4\nDate:       Sun Aug 19 16:02:54 2012\nCPU:        8 * Intel(R) Xeon(R) CPU           L5630  @ 2.13GHz\nCPUCache:   12288 KB\nKeys:       16 bytes each\nValues:     100 bytes each (50 bytes after compression)\nEntries:    1000000\nRawSize:    110.6 MB (estimated)\nFileSize:   62.9 MB (estimated)\n------------------------------------------------\nfillrandom   :       3.696 micros/op 270530 ops/sec;   29.9 MB/s\n\nTest Plan: db_bench\n\nReviewers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D4767",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/deb1a1fa9b93dbcc3d2fbde84b2391b3d1f7c024"
    },
    {
        "hash": "7c0b5ec54a5458a7e699eb06e118f59e2137f588",
        "author": "Dhruba Borthakur",
        "date": "2012-08-16T11:10:08-07:00",
        "message": "leveldb thrift server uses an incorrect root directory\n\nSummary: The offsets used to speficy hostname and dbdir from the command line were not handled correctly.\n\nTest Plan: none.\n\nReviewers: heyongqiang\n\nReviewed By: heyongqiang\n\nDifferential Revision: https://reviews.facebook.net/D4683",
        "modified_files_count": 1,
        "modified_files": [
            "thrift/server_options.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/7c0b5ec54a5458a7e699eb06e118f59e2137f588"
    },
    {
        "hash": "fcb2ea47155e3e1326e40f53e188c0b6f1734f4a",
        "author": "heyongqiang",
        "date": "2012-08-15T16:39:02-07:00",
        "message": "disable data sync options needs to be checked when doing level-0 dump Summary:\n\nSummary: as subject\n\nTest Plan: use db_bench\n\nReviewers: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D4671",
        "modified_files_count": 1,
        "modified_files": [
            "db/builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/fcb2ea47155e3e1326e40f53e188c0b6f1734f4a"
    },
    {
        "hash": "d11b637f34415b6ef0853fbbc2f4f481ad7de4ad",
        "author": "Dhruba Borthakur",
        "date": "2012-07-09T23:06:07-07:00",
        "message": "bits_per_key is already configurable. It defines how many bloom bits will be used for every key in the database.\n\nMy change in this patch is to make the Hash code that is used for blooms to be confgurable. In fact,\none can specify a modified HashCode that inspects only parts of the Key to generate the Hash (used\nby booms).\n\nTest Plan: none\n\nDifferential Revision: https://reviews.facebook.net/D4059",
        "modified_files_count": 1,
        "modified_files": [
            "util/bloom.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/d11b637f34415b6ef0853fbbc2f4f481ad7de4ad"
    },
    {
        "hash": "33a3c6ff6c71a2afb7c038715fa921e6ec83dcf3",
        "author": "Dhruba Borthakur",
        "date": "2012-05-22T12:20:09-07:00",
        "message": "Ability to make the benchmark issue a large number of IOs. This is helpful to populate many gigabytes of data for benchmarking at scale.\n\nSummary:\nTask ID: #\n\nBlame Rev:\n\nTest Plan: Revert Plan:\n\nDifferential Revision: https://reviews.facebook.net/D3333",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/33a3c6ff6c71a2afb7c038715fa921e6ec83dcf3"
    },
    {
        "hash": "921a48428ed88d04a263c5269f87222112081523",
        "author": "Arun Sharma",
        "date": "2012-05-14T15:40:11-07:00",
        "message": "Optimize for lp64\n\nSummary:\nSome code reorganization in-preparation for replacing with a hardware\ninstruction.\n\n* Use u64 for some of the key types\n* Use an ALIGN macro so code is easier to read\n\nTest Plan: crc32c_test\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D3135",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/921a48428ed88d04a263c5269f87222112081523"
    },
    {
        "hash": "37d0dcb9b10d2ad1d3bd081b83f51bfd3400ee9e",
        "author": "Dhruba Borthakur",
        "date": "2012-05-11T12:43:31-07:00",
        "message": "Use the elapsed time (instead of the per-thread time) to compute ops/sec.\n\nSummary:\nTask ID: #\n\nBlame Rev:\n\nTest Plan: Revert Plan:\n\nDifferential Revision: https://reviews.facebook.net/D3147",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_bench.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/37d0dcb9b10d2ad1d3bd081b83f51bfd3400ee9e"
    },
    {
        "hash": "90b2924fb25943adeea972f10a824d6e0d660935",
        "author": "Arun Sharma",
        "date": "2012-05-11T09:57:40-07:00",
        "message": "skiplist: optimize for sequential insert pattern\n\nSummary:\nskiplist doesn't cache the location of the last insert and becomes\nCPU bound when the input data has sequential keys.\n\nNotes on thread safety: ::Insert() already requires external\nsynchronization. So this change is not making it any worse.\n\nTest Plan: skiplist_test\n\nReviewers: dhruba\n\nReviewed By: dhruba\n\nDifferential Revision: https://reviews.facebook.net/D3129",
        "modified_files_count": 1,
        "modified_files": [
            "db/skiplist.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/90b2924fb25943adeea972f10a824d6e0d660935"
    },
    {
        "hash": "583f1499c00ff40f332149021f583cf6ee78dd7e",
        "author": "Sanjay Ghemawat",
        "date": "2012-03-09T07:51:04-08:00",
        "message": "fix LOCK file deletion to prevent crash on windows",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/583f1499c00ff40f332149021f583cf6ee78dd7e"
    },
    {
        "hash": "e0cbd242cb3fe6b1b0ed5756fd0a2e3f5efdabd0",
        "author": "gabor@google.com",
        "date": "2011-06-22T18:45:39+00:00",
        "message": "Fixing issue 11: version_set_test.cc was missing\n\ngit-svn-id: https://leveldb.googlecode.com/svn/trunk@33 62dab493-f737-651d-591e-8d6aee1b9529",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e0cbd242cb3fe6b1b0ed5756fd0a2e3f5efdabd0"
    },
    {
        "hash": "be9f061d2fd5e2d66ba17a70c135a153c584c8c1",
        "author": "dgrogan@chromium.org",
        "date": "2011-04-21T01:54:51+00:00",
        "message": "pull in hans' mac build fix\n\ngit-svn-id: https://leveldb.googlecode.com/svn/trunk@26 62dab493-f737-651d-591e-8d6aee1b9529",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_chromium.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/be9f061d2fd5e2d66ba17a70c135a153c584c8c1"
    },
    {
        "hash": "ccb2cbef3aa60e19da135bba01ac4aba7697661d",
        "author": "dgrogan@chromium.org",
        "date": "2011-04-20T22:50:04+00:00",
        "message": "fix build on at least linux\n\ngit-svn-id: https://leveldb.googlecode.com/svn/trunk@25 62dab493-f737-651d-591e-8d6aee1b9529",
        "modified_files_count": 1,
        "modified_files": [
            "table/block.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/ccb2cbef3aa60e19da135bba01ac4aba7697661d"
    },
    {
        "hash": "4d66fd5af3c9f7680be4b03599415c53f32065bc",
        "author": "jorlow@chromium.org",
        "date": "2011-03-29T22:41:11+00:00",
        "message": "Upstream change.\n\ngit-svn-id: https://leveldb.googlecode.com/svn/trunk@17 62dab493-f737-651d-591e-8d6aee1b9529",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_chromium.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4d66fd5af3c9f7680be4b03599415c53f32065bc"
    },
    {
        "hash": "6d243ebf79640525a94fab280efeb5a46c994af6",
        "author": "jorlow@chromium.org",
        "date": "2011-03-22T19:07:54+00:00",
        "message": "Make GetTestDirectory threadsafe within Chromium and make it work on Windows.\n\ngit-svn-id: https://leveldb.googlecode.com/svn/trunk@13 62dab493-f737-651d-591e-8d6aee1b9529",
        "modified_files_count": 1,
        "modified_files": [
            "util/env_chromium.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/6d243ebf79640525a94fab280efeb5a46c994af6"
    },
    {
        "hash": "795dd1d5505cbd3103de4774903bc0382d2a942f",
        "author": "jorlow@chromium.org",
        "date": "2011-03-21T18:13:39+00:00",
        "message": "Oops, another file that didn't upload correctly.\n\n\n\ngit-svn-id: https://leveldb.googlecode.com/svn/trunk@7 62dab493-f737-651d-591e-8d6aee1b9529",
        "modified_files_count": 1,
        "modified_files": [
            "port/win/stdint.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/795dd1d5505cbd3103de4774903bc0382d2a942f"
    }
]