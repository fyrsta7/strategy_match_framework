size_t WriteThread::EnterAsBatchGroupLeader(Writer* leader,
                                            WriteGroup* write_group) {
  assert(leader->link_older == nullptr);
  assert(leader->batch != nullptr);
  assert(write_group != nullptr);

  // Calculate the size of the leader's batch
  size_t size = WriteBatchInternal::ByteSize(leader->batch);

  // Determine the maximum size for the batch group
  const uint64_t min_batch_size_bytes = max_write_batch_group_size_bytes / 8;
  size_t max_size = (size <= min_batch_size_bytes)
                        ? size + min_batch_size_bytes
                        : max_write_batch_group_size_bytes;

  // Initialize the write group with the leader
  leader->write_group = write_group;
  write_group->leader = leader;
  write_group->last_writer = leader;
  write_group->size = 1;

  // Load the newest writer atomically
  Writer* newest_writer = newest_writer_.load(std::memory_order_acquire);

  // Ensure links are properly set up
  CreateMissingNewerLinks(newest_writer);

  // Iterate through writers from leader to newest_writer
  Writer* w = leader;
  while (w != newest_writer) {
    assert(w->link_newer);
    w = w->link_newer;

    // Check for conditions that prevent batching
    if (w->sync && !leader->sync) break;
    if (w->no_slowdown != leader->no_slowdown) break;
    if (w->disable_wal != leader->disable_wal) break;
    if (w->protection_bytes_per_key != leader->protection_bytes_per_key) break;
    if (w->rate_limiter_priority != leader->rate_limiter_priority) break;
    if (w->batch == nullptr) break;  // Skip non-write operations
    if (w->callback != nullptr && !w->callback->AllowWriteBatching()) break;

    // Calculate the batch size and check if adding it exceeds max_size
    size_t batch_size = WriteBatchInternal::ByteSize(w->batch);
    if (size + batch_size > max_size) break;

    // Add the writer to the group
    w->write_group = write_group;
    size += batch_size;
    write_group->last_writer = w;
    write_group->size++;
  }

  // Sync point for testing
  TEST_SYNC_POINT_CALLBACK("WriteThread::EnterAsBatchGroupLeader:End", w);

  return size;
}