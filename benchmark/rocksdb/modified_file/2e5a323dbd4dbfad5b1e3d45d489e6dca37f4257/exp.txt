这次提交主要针对 ARM64 平台在自旋等待（spin-wait）场景下使用的暂停指令做了修改，从而提高了性能表现。详细来说：

1. 修改思路与原因  
   原来的代码在 ARM64 平台上使用了 "yield" 指令来实现暂停。虽然“yield”在概念上能够让出当前线程的执行机会，但在实际的自旋等待循环中，它只是一个简单的 NOP（无操作），并不能提供足够的延迟，效果与 x86 平台上的 "pause" 指令存在显著区别。x86 下的 "pause" 指令可以减慢自旋速度，降低能耗以及避免资源竞争。而在 ARM64 平台上，使用 "yield" 得到的效果远不及 "pause" 指令所需的延迟。

2. 修改目的  
   修改的核心目的就是让 ARM64 平台上的暂停指令能够更接近于 x86 平台 "pause" 指令的行为。为了实现这一点，在 ARM64 分支下将原先使用的 "yield" 指令替换成了 "isb"（指令同步屏障）指令。其他平台（如 x86 和 PowerPC64）的实现保持不变。这样做可以使得在自旋等待循环中，ARM64 上的行为和调度更加合理。

3. 预期优化效果  
   根据提交信息中的性能测试数据，在 Graviton3 系统上，经过这一改动后，包含自旋等待循环的操作平均性能提高了大约 2 倍。这说明 "isb" 指令在自旋等待时提供了更适合的延时，能够降低 CPU 的资源竞争和功耗，进而改进整体系统的并发性能。

4. 代码对比总结  
   修改前的 ARM64 部分代码如下：  
     如果编译宏为 __aarch64__，则执行 asm volatile("yield");
   
   修改后的 ARM64 部分代码如下：  
     如果编译宏为 __aarch64__，则执行 asm volatile("isb");

   这种改动直接将 ARM64 的暂停指令由 "yield" 修改为 "isb"，使得与 x86 中的 "pause" 指令在行为上更为相似，从而在自旋等待循环中能更好地控制执行速率与资源争用。

综上，本次代码提交的主要修改思路是通过替换 ARM64 平台上自旋等待用的暂停指令，从而改善自旋等待循环的行为。其目的在于使 ARM64 平台上的暂停操作具有类似于 x86 平台 "pause" 的效果，从而提升多线程并发时的性能表现，实际测试显示在 Graviton3 系统上性能得到了显著改善。