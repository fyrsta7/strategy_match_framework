Status CompactionJob::FinishCompactionOutputFile(
    const Status& input_status, SubcompactionState* sub_compact,
    RangeDelAggregator* range_del_agg,
    CompactionIterationStats* range_del_out_stats,
    const Slice* next_table_min_key /* = nullptr */) {
  AutoThreadOperationStageUpdater stage_updater(
      ThreadStatus::STAGE_COMPACTION_SYNC_FILE);
  assert(sub_compact != nullptr);
  assert(sub_compact->outfile);
  assert(sub_compact->builder != nullptr);
  assert(sub_compact->current_output() != nullptr);

  uint64_t output_number = sub_compact->current_output()->meta.fd.GetNumber();
  assert(output_number != 0);

  Status s = input_status;
  auto meta = &sub_compact->current_output()->meta;

  if (s.ok()) {
    const Slice* lower_bound = nullptr;
    const Slice* upper_bound = nullptr;
    Slice lower_bound_guard, upper_bound_guard;

    if (sub_compact->outputs.size() == 1) {
      lower_bound = sub_compact->start;
    } else if (!meta->smallest.empty()) {
      lower_bound_guard = meta->smallest.user_key();
      lower_bound = &lower_bound_guard;
    }

    if (next_table_min_key != nullptr) {
      upper_bound_guard = ExtractUserKey(*next_table_min_key);
      upper_bound = &upper_bound_guard;
    } else {
      upper_bound = sub_compact->end;
    }

    range_del_agg->AddToBuilder(sub_compact->builder.get(), lower_bound,
                                upper_bound, meta, range_del_out_stats,
                                bottommost_level_);
    meta->marked_for_compaction = sub_compact->builder->NeedCompact();
  }

  const uint64_t current_entries = sub_compact->builder->NumEntries();
  if (s.ok()) {
    s = sub_compact->builder->Finish();
  } else {
    sub_compact->builder->Abandon();
  }

  const uint64_t current_bytes = sub_compact->builder->FileSize();
  if (s.ok()) {
    meta->fd.file_size = current_bytes;
  }
  sub_compact->current_output()->finished = true;
  sub_compact->total_bytes += current_bytes;

  if (s.ok()) {
    StopWatch sw(env_, stats_, COMPACTION_OUTFILE_SYNC_MICROS);
    s = sub_compact->outfile->Sync(db_options_.use_fsync);
  }
  if (s.ok()) {
    s = sub_compact->outfile->Close();
  }
  sub_compact->outfile.reset();

  if (s.ok() && current_entries == 0) {
    std::string fname = TableFileName(
        db_options_.db_paths, meta->fd.GetNumber(), meta->fd.GetPathId());
    env_->DeleteFile(fname);

    assert(!sub_compact->outputs.empty());
    sub_compact->outputs.pop_back();
    sub_compact->builder.reset();
    sub_compact->current_output_file_size = 0;
    return s;
  }

  ColumnFamilyData* cfd = sub_compact->compaction->column_family_data();
  TableProperties tp;

  if (s.ok() && current_entries > 0) {
    InternalIterator* iter = cfd->table_cache()->NewIterator(
        ReadOptions(), env_options_, cfd->internal_comparator(), meta->fd,
        nullptr, nullptr,
        cfd->internal_stats()->GetFileReadHist(
            compact_->compaction->output_level()),
        false);
    s = iter->status();

    if (s.ok() && paranoid_file_checks_) {
      for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {}
      s = iter->status();
    }

    delete iter;

    if (s.ok()) {
      tp = sub_compact->builder->GetTableProperties();
      sub_compact->current_output()->table_properties =
          std::make_shared<TableProperties>(tp);
      ROCKS_LOG_INFO(db_options_.info_log,
                     "[%s] [JOB %d] Generated table #%" PRIu64 ": %" PRIu64
                     " keys, %" PRIu64 " bytes%s",
                     cfd->GetName().c_str(), job_id_, output_number,
                     current_entries, current_bytes,
                     meta->marked_for_compaction ? " (need compaction)" : "");
    }
  }

  if (meta != nullptr) {
    std::string fname = TableFileName(db_options_.db_paths, meta->fd.GetNumber(),
                                      meta->fd.GetPathId());
    EventHelpers::LogAndNotifyTableFileCreationFinished(
        event_logger_, cfd->ioptions()->listeners, dbname_, cfd->GetName(),
        fname, job_id_, meta->fd, tp, TableFileCreationReason::kCompaction, s);

#ifndef ROCKSDB_LITE
    auto sfm =
        static_cast<SstFileManagerImpl*>(db_options_.sst_file_manager.get());
    if (sfm && meta->fd.GetPathId() == 0) {
      sfm->OnAddFile(fname);
      if (sfm->IsMaxAllowedSpaceReached()) {
        s = Status::IOError("Max allowed space was reached");
        TEST_SYNC_POINT(
            "CompactionJob::FinishCompactionOutputFile:"
            "MaxAllowedSpaceReached");
        InstrumentedMutexLock l(db_mutex_);
        if (db_bg_error_->ok()) {
          Status new_bg_error = s;
          EventHelpers::NotifyOnBackgroundError(
              cfd->ioptions()->listeners, BackgroundErrorReason::kCompaction,
              &new_bg_error, db_mutex_);
          if (!new_bg_error.ok()) {
            *db_bg_error_ = new_bg_error;
          }
        }
      }
    }
#endif
  }

  sub_compact->builder.reset();
  sub_compact->current_output_file_size = 0;
  return s;
}