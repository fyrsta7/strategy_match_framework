bool VersionEdit::EncodeTo(std::string* dst,
                           std::optional<size_t> ts_sz) const {
  std::string temp_buffer;
  if (has_db_id_) {
    PutVarint32(dst, kDbId);
    PutLengthPrefixedSlice(dst, db_id_);
  }
  if (has_comparator_) {
    assert(has_persist_user_defined_timestamps_);
    PutVarint32(dst, kComparator);
    PutLengthPrefixedSlice(dst, comparator_);
  }
  if (has_log_number_) {
    PutVarint32Varint64(dst, kLogNumber, log_number_);
  }
  if (has_prev_log_number_) {
    PutVarint32Varint64(dst, kPrevLogNumber, prev_log_number_);
  }
  if (has_next_file_number_) {
    PutVarint32Varint64(dst, kNextFileNumber, next_file_number_);
  }
  if (has_max_column_family_) {
    PutVarint32Varint32(dst, kMaxColumnFamily, max_column_family_);
  }
  if (has_min_log_number_to_keep_) {
    PutVarint32Varint64(dst, kMinLogNumberToKeep, min_log_number_to_keep_);
  }
  if (has_last_sequence_) {
    PutVarint32Varint64(dst, kLastSequence, last_sequence_);
  }
  for (const auto& cursor : compact_cursors_) {
    if (cursor.second.Valid()) {
      PutVarint32(dst, kCompactCursor);
      PutVarint32(dst, cursor.first);  // level
      PutLengthPrefixedSlice(dst, cursor.second.Encode());
    }
  }
  for (const auto& deleted : deleted_files_) {
    PutVarint32Varint32Varint64(dst, kDeletedFile, deleted.first /* level */,
                                deleted.second /* file number */);
  }

  bool min_log_num_written = false;

  assert(new_files_.empty() || ts_sz.has_value());
  for (const auto& new_file : new_files_) {
    const FileMetaData& f = new_file.second;
    if (!f.smallest.Valid() || !f.largest.Valid() ||
        f.epoch_number == kUnknownEpochNumber) {
      return false;
    }
    PutVarint32(dst, kNewFile4);
    PutVarint32Varint64(dst, new_file.first /* level */, f.fd.GetNumber());
    PutVarint64(dst, f.fd.GetFileSize());
    EncodeFileBoundaries(dst, f, ts_sz.value());
    PutVarint64Varint64(dst, f.fd.smallest_seqno, f.fd.largest_seqno);

    temp_buffer.clear();
    PutVarint64(&temp_buffer, f.oldest_ancester_time);
    TEST_SYNC_POINT_CALLBACK("VersionEdit::EncodeTo:VarintOldestAncesterTime",
                             &temp_buffer);
    PutVarint32(dst, NewFileCustomTag::kOldestAncesterTime);
    PutLengthPrefixedSlice(dst, Slice(temp_buffer));

    temp_buffer.clear();
    PutVarint64(&temp_buffer, f.file_creation_time);
    TEST_SYNC_POINT_CALLBACK("VersionEdit::EncodeTo:VarintFileCreationTime",
                             &temp_buffer);
    PutVarint32(dst, NewFileCustomTag::kFileCreationTime);
    PutLengthPrefixedSlice(dst, Slice(temp_buffer));

    temp_buffer.clear();
    PutVarint64(&temp_buffer, f.epoch_number);
    PutVarint32(dst, NewFileCustomTag::kEpochNumber);
    PutLengthPrefixedSlice(dst, Slice(temp_buffer));

    PutVarint32(dst, NewFileCustomTag::kFileChecksum);
    PutLengthPrefixedSlice(dst, Slice(f.file_checksum));

    PutVarint32(dst, NewFileCustomTag::kFileChecksumFuncName);
    PutLengthPrefixedSlice(dst, Slice(f.file_checksum_func_name));

    if (f.fd.GetPathId() != 0) {
      char p = static_cast<char>(f.fd.GetPathId());
      PutVarint32(dst, NewFileCustomTag::kPathId);
      PutLengthPrefixedSlice(dst, Slice(&p, 1));
    }
    if (f.temperature != Temperature::kUnknown) {
      char p = static_cast<char>(f.temperature);
      PutVarint32(dst, NewFileCustomTag::kTemperature);
      PutLengthPrefixedSlice(dst, Slice(&p, 1));
    }
    if (f.marked_for_compaction) {
      char p = static_cast<char>(1);
      PutVarint32(dst, NewFileCustomTag::kNeedCompaction);
      PutLengthPrefixedSlice(dst, Slice(&p, 1));
    }
    if (has_min_log_number_to_keep_ && !min_log_num_written) {
      temp_buffer.clear();
      PutFixed64(&temp_buffer, min_log_number_to_keep_);
      PutVarint32(dst, NewFileCustomTag::kMinLogNumberToKeepHack);
      PutLengthPrefixedSlice(dst, Slice(temp_buffer));
      min_log_num_written = true;
    }
    if (f.oldest_blob_file_number != kInvalidBlobFileNumber) {
      temp_buffer.clear();
      PutVarint64(&temp_buffer, f.oldest_blob_file_number);
      PutVarint32(dst, NewFileCustomTag::kOldestBlobFileNumber);
      PutLengthPrefixedSlice(dst, Slice(temp_buffer));
    }
    UniqueId64x2 unique_id = f.unique_id;
    TEST_SYNC_POINT_CALLBACK("VersionEdit::EncodeTo:UniqueId", &unique_id);
    if (unique_id != kNullUniqueId64x2) {
      std::string unique_id_str = EncodeUniqueIdBytes(&unique_id);
      PutVarint32(dst, NewFileCustomTag::kUniqueId);
      PutLengthPrefixedSlice(dst, Slice(unique_id_str));
    }
    if (f.compensated_range_deletion_size) {
      temp_buffer.clear();
      PutVarint64(&temp_buffer, f.compensated_range_deletion_size);
      PutVarint32(dst, kCompensatedRangeDeletionSize);
      PutLengthPrefixedSlice(dst, Slice(temp_buffer));
    }
    if (f.tail_size) {
      temp_buffer.clear();
      PutVarint64(&temp_buffer, f.tail_size);
      PutVarint32(dst, NewFileCustomTag::kTailSize);
      PutLengthPrefixedSlice(dst, Slice(temp_buffer));
    }
    if (!f.user_defined_timestamps_persisted) {
      char p = static_cast<char>(0);
      PutVarint32(dst, NewFileCustomTag::kUserDefinedTimestampsPersisted);
      PutLengthPrefixedSlice(dst, Slice(&p, 1));
    }
    TEST_SYNC_POINT_CALLBACK("VersionEdit::EncodeTo:NewFile4:CustomizeFields",
                             dst);

    PutVarint32(dst, NewFileCustomTag::kTerminate);
  }

  for (const auto& blob_file_addition : blob_file_additions_) {
    PutVarint32(dst, kBlobFileAddition);
    blob_file_addition.EncodeTo(dst);
  }

  for (const auto& blob_file_garbage : blob_file_garbages_) {
    PutVarint32(dst, kBlobFileGarbage);
    blob_file_garbage.EncodeTo(dst);
  }

  for (const auto& wal_addition : wal_additions_) {
    PutVarint32(dst, kWalAddition2);
    std::string encoded;
    wal_addition.EncodeTo(&encoded);
    PutLengthPrefixedSlice(dst, encoded);
  }

  if (!wal_deletion_.IsEmpty()) {
    PutVarint32(dst, kWalDeletion2);
    std::string encoded;
    wal_deletion_.EncodeTo(&encoded);
    PutLengthPrefixedSlice(dst, encoded);
  }

  if (column_family_ != 0) {
    PutVarint32Varint32(dst, kColumnFamily, column_family_);
  }

  if (is_column_family_add_) {
    PutVarint32(dst, kColumnFamilyAdd);
    PutLengthPrefixedSlice(dst, Slice(column_family_name_));
  }

  if (is_column_family_drop_) {
    PutVarint32(dst, kColumnFamilyDrop);
  }

  if (is_in_atomic_group_) {
    PutVarint32(dst, kInAtomicGroup);
    PutVarint32(dst, remaining_entries_);
  }

  if (HasFullHistoryTsLow()) {
    PutVarint32(dst, kFullHistoryTsLow);
    PutLengthPrefixedSlice(dst, full_history_ts_low_);
  }

  if (HasPersistUserDefinedTimestamps()) {
    assert(has_comparator_);
    char p = static_cast<char>(persist_user_defined_timestamps_);
    PutVarint32(dst, kPersistUserDefinedTimestamps);
    PutLengthPrefixedSlice(dst, Slice(&p, 1));
  }
  return true;
}