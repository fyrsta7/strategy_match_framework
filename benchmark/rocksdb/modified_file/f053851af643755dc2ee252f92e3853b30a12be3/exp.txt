这次提交主要是针对 RocksDB 中选取压实（compaction）过程中的“祖父文件”（grandparent files）的逻辑进行了改进，具体修改内容和思路如下：

1. 修改前的逻辑：
   ▸ 在确定一次压实操作需要忽略哪些文件时，原来的实现逻辑是固定从“输出层次”（output_level）下一层（即 level = output_level + 1）的文件作为祖父文件。
   ▸ 这种做法隐含的假设是：下一层总是存在与压实区间重叠的文件。然而在实际情况中，可能下一个层级根本没有与当前范围重叠的文件，从而导致使用这个层级的数据并不能准确反映实际的存储情况。

2. 修改后的思路：
   ▸ 修改后的逻辑不再只检查 output_level+1 这一层，而是从 output_level+1 开始逐层遍历，直到在某个层级找到至少一个与当前压实文件范围重叠的文件为止。
   ▸ 在遍历过程中，如果某一层调用 GetOverlappingInputs 后发现返回的祖父文件集合非空，则立即停止继续向更低层寻找。也就是说，系统会选择第一个出现重叠文件的层级作为祖父文件参与后续的判断。

3. 修改目的与优化效果：
   ▸ 优化目标：提高压实过程中对重叠文件的判断逻辑，从而更准确地选择真正需要注意的祖父文件，这样可以避免一些无意义的文件操作。
   ▸ 通过跳过那些没有与压实区间重叠的层级，可以减少不必要的数据移动或处理，这有助于防止在后续压实操作中可能超出 max_compaction_bytes 的限制。
   ▸ 另外，在TTL（Time-To-Live）压实这样的场景中，更容易出现层级内没有重叠文件的情况，新逻辑能更好地适应这种情况，从而改善整个系统的 compaction 性能和效率。
   ▸ 预期效果是：在压实过程中能够更合理地选取祖父文件，从而减少不必要的文件合并操作，加快 compaction 处理速度，同时降低系统在大数据量环境下的资源消耗和延迟风险。

总的来说，此次修改通过动态地查找能与当前压实范围重叠的第一个层级来替代引入固定层级的方案，更贴合实际数据的分布情况，提高了压实过程中资源利用的合理性和整体性能。