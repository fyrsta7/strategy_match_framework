TBlockIter* BlockBasedTable::NewDataBlockIterator(
    const ReadOptions& ro, const BlockHandle& handle, TBlockIter* input_iter,
    BlockType block_type, GetContext* get_context,
    BlockCacheLookupContext* lookup_context,
    FilePrefetchBuffer* prefetch_buffer, bool for_compaction, bool async_read,
    Status& s) const {
  PERF_TIMER_GUARD(new_table_block_iter_nanos);

  TBlockIter* iter = input_iter != nullptr ? input_iter : new TBlockIter;
  if (!s.ok()) {
    iter->Invalidate(s);
    return iter;
  }

  const UncompressionDict* dict = &UncompressionDict::GetEmptyDict();
  if (rep_->uncompression_dict_reader) {
    const bool no_io = (ro.read_tier == kBlockCacheTier);
    CachableEntry<UncompressionDict> uncompression_dict;
    s = rep_->uncompression_dict_reader->GetOrReadUncompressionDictionary(
        prefetch_buffer, no_io, ro.verify_checksums, get_context,
        lookup_context, &uncompression_dict);
    if (!s.ok()) {
      iter->Invalidate(s);
      return iter;
    }
    if (uncompression_dict.GetValue()) {
      dict = uncompression_dict.GetValue();
    }
  }

  CachableEntry<Block> block;
  s = RetrieveBlock(prefetch_buffer, ro, handle, *dict, &block, block_type,
                    get_context, lookup_context, for_compaction,
                    /* use_cache */ true, /* wait_for_cache */ true,
                    async_read);

  if (s.IsTryAgain() && async_read) {
    return iter;
  }

  if (!s.ok()) {
    iter->Invalidate(s);
    return iter;
  }

  Block* block_value = block.GetValue();
  assert(block_value != nullptr);

  const bool block_contents_pinned =
      block.IsCached() ||
      (!block_value->own_bytes() && rep_->immortal_table);
  iter = InitBlockIterator<TBlockIter>(rep_, block_value, block_type, iter,
                                       block_contents_pinned);

  if (!block.IsCached() && !ro.fill_cache) {
    Cache* const block_cache = rep_->table_options.block_cache.get();
    if (block_cache) {
      Cache::Handle* cache_handle = nullptr;
      CacheKey key = CacheKey::CreateUniqueForCacheLifetime(block_cache);
      s = block_cache->Insert(key.AsSlice(), nullptr,
                              block_value->ApproximateMemoryUsage(),
                              nullptr, &cache_handle);

      if (s.ok() && cache_handle != nullptr) {
        iter->RegisterCleanup(&ForceReleaseCachedEntry, block_cache,
                              cache_handle);
      }
    }
  } else if (block.IsCached()) {
    iter->SetCacheHandle(block.GetCacheHandle());
  }

  block.TransferTo(iter);

  return iter;
}