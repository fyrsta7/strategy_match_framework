[
    {
        "hash": "53910ddb152fbcba95a3e04b058a997c40f654ae",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:31+02:00",
        "message": "db_test.cc: pass parameter by reference\n\nFix for:\n\n[db/db_test.cc:6141]: (performance) Function parameter\n 'key' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/53910ddb152fbcba95a3e04b058a997c40f654ae",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "convertKey"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy used was passing a function parameter by reference instead of by value to avoid unnecessary copying.",
        "is_generic_optimization": true
    },
    {
        "hash": "b8cea7cc279fe609de85b7ce4f50d4ff4f90047f",
        "author": "Changli Gao",
        "date": "2017-10-17T10:12:37-07:00",
        "message": "VersionBuilder: Erase with iterators for better performance\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3007\n\nDifferential Revision: D6077701\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: a6fd5b8a23f4feb1660b9ce027f651a7e90352b3",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b8cea7cc279fe609de85b7ce4f50d4ff4f90047f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Apply"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy involves using iterators to erase elements, which improves performance by reducing overhead.",
        "is_generic_optimization": true
    },
    {
        "hash": "4704833357a8609e7c42df4f337f938a8e870c08",
        "author": "jsteemann",
        "date": "2015-09-18T20:20:32+02:00",
        "message": "pass input string to WriteBatch() by const reference\n\nthis may lead to copying less data (in case compilers don't\noptimize away copying the string by themselves)",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/write_batch.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4704833357a8609e7c42df4f337f938a8e870c08",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "WriteBatch"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy involved passing the input string to WriteBatch() by const reference to reduce data copying.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "cheerp-compiler",
        "hash": "a3732ee4d3b54b47c3319bb8ecfbed5c83975340",
        "author": "Hyxogen",
        "date": "2024-02-02T11:48:31+01:00",
        "message": "globalopt: propagate section to optimized global",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/Transforms/IPO/GlobalOpt.cpp"
        ],
        "github_commit_url": "https://github.com/leaningtech/cheerp-compiler/commit/a3732ee4d3b54b47c3319bb8ecfbed5c83975340",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "OptimizeGlobalAddressOfAllocation"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves propagating section attributes to optimized global variables to improve memory layout and access efficiency.",
        "is_generic_optimization": true
    },
    {
        "hash": "f82e693a31d07ab8b391888ff60eb7ff5b95bd13",
        "author": "Siying Dong",
        "date": "2019-05-16T15:24:28-07:00",
        "message": "RangeDelAggregator::StripeRep::Invalidate() to be skipped if empty (#5312)\n\nSummary:\nRangeDelAggregator::StripeRep::Invalidate() clears up several vectors. If we know there isn't anything to there, we can safe these small CPUs. Profiling shows that it sometimes take non-negligible amount of CPU. Worth a small optimization.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/5312\n\nDifferential Revision: D15380511\n\nPulled By: siying\n\nfbshipit-source-id: 53c5f34c33b4cb1e743643c6086ac56d0b84ec2e",
        "modified_files_count": 1,
        "modified_files": [
            "db/range_del_aggregator.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/f82e693a31d07ab8b391888ff60eb7ff5b95bd13",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Invalidate"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy involves skipping the `Invalidate()` function call if the vectors are already empty, saving CPU cycles.",
        "is_generic_optimization": true
    },
    {
        "hash": "063471bf7613544496a4d4b5a1e1ba4a7aa605cf",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "table/table_test.cc: pass func parameter by reference\n\nFix for:\n\n[table/table_test.cc:1218]: (performance) Function parameter\n 'prefix' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/063471bf7613544496a4d4b5a1e1ba4a7aa605cf",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "AddInternalKey"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.",
        "is_generic_optimization": true
    },
    {
        "hash": "9f246298e2f0af3973918a0dac0c5f46bc0993c0",
        "author": "Changli Gao",
        "date": "2017-01-11T10:54:37-08:00",
        "message": "Performance: Iterate vector by reference\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/1763\n\nDifferential Revision: D4398796\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: b82636d",
        "modified_files_count": 1,
        "modified_files": [
            "db/event_helpers.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9f246298e2f0af3973918a0dac0c5f46bc0993c0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "EventHelpers::LogAndNotifyTableFileDeletion"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy involves iterating over a vector by reference instead of by value to reduce copy overhead.",
        "is_generic_optimization": true
    },
    {
        "hash": "873f1356a1781e8d638973ea320b722d3240fc5a",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "db_ttl_impl.h: pass func parameter by reference\n\nFix for:\n\n[utilities/ttl/db_ttl_impl.h:209]: (performance) Function parameter\n 'merge_op' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/ttl/db_ttl_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/873f1356a1781e8d638973ea320b722d3240fc5a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "TtlMergeOperator"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy involves passing a function parameter by reference to avoid unnecessary copying.",
        "is_generic_optimization": true
    },
    {
        "hash": "92ad4a88f3199b013532b37d6598c442319355a5",
        "author": "Changyu Bi",
        "date": "2024-08-27T13:57:40-07:00",
        "message": "Small CPU optimization in InlineSkipList::Insert() (#12975)\n\nSummary:\nreuse decode key in more places to avoid decoding length prefixed key x->Key().\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12975\n\nTest Plan:\nran benchmarks simultaneously for \"before\" and \"after\"\n* fillseq:\n```\n(for I in $(seq 1 50); do ./db_bench --benchmarks=fillseq --disable_auto_compactions=1 --min_write_buffer_number_to_merge=100 --max_write_buffer_number=1000  --write_buffer_size=268435456 --num=5000000 --seed=1723056275 --disable_wal=1 2>&1 | grep \"fillseq\"\ndone;) | awk '{ t += $5; c++; print } END { printf (\"%9.3f\\n\", 1.0 * t / c) }';\n\nbefore: 1483191\nafter: 1490555 (+0.5%)\n```\n\n* fillrandom:\n```\n(for I in $(seq 1 2); do ./db_bench_imain --benchmarks=fillrandom --disable_auto_compactions=1 --min_write_buffer_number_to_merge=100 --max_write_buffer_number=1000  --write_buffer_size=268435456 --num=2500000 --seed=1723056275 --disable_wal=1 2>&1 | grep \"fillrandom\"\n\nbefore: 255463\nafter: 256128 (+0.26%)\n```\n\nReviewed By: anand1976\n\nDifferential Revision: D61835340\n\nPulled By: cbi42\n\nfbshipit-source-id: 70345510720e348bacd51269acb5d2dd5a62bf0a",
        "modified_files_count": 1,
        "modified_files": [
            "memtable/inlineskiplist.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/92ad4a88f3199b013532b37d6598c442319355a5",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "compare_"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy reuses the decoded key in more places to avoid redundant decoding of length-prefixed keys.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "mppic",
        "hash": "7c70876bd2ca55809ed3f3d1f638ba9225f14e46",
        "author": "Steve Macenski",
        "date": "2022-03-16T17:05:28-07:00",
        "message": "inlining array",
        "modified_files_count": 1,
        "modified_files": [
            "src/optimizer.cpp"
        ],
        "github_commit_url": "https://github.com/artofnothingness/mppic/commit/7c70876bd2ca55809ed3f3d1f638ba9225f14e46",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Optimizer::getVelocityConstraints"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved inlining the array to reduce function call overhead and improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "gcc-darwin-arm64",
        "hash": "e4411622690654cdc530c6262c7115a9e15dc359",
        "author": "Aldy Hernandez",
        "date": "2021-11-04T15:37:35+01:00",
        "message": "Avoid repeating calculations in threader.\n\nWe already attempt to resolve the current path on entry to\nfind_paths_to_name(), so there's no need to do so again for each\nexported range since nothing has changed.\n\nRemoving this redundant calculation avoids 22% of calls into the path\nsolver.\n\nTested on x86-64 and ppc64le Linux with the usual regstrap.  I also\nverified that the before and after number of threads was the same\nin a suite of .ii files from a bootstrap.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/102943\n\t* tree-ssa-threadbackward.c (back_threader::find_paths_to_names):\n\tAvoid duplicate calculation of paths.",
        "modified_files_count": 1,
        "modified_files": [
            "gcc/tree-ssa-threadbackward.c"
        ],
        "github_commit_url": "https://github.com/iains/gcc-darwin-arm64/commit/e4411622690654cdc530c6262c7115a9e15dc359",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "back_threader::find_paths_to_names"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves avoiding redundant calculations of paths by reusing precomputed results within the `find_paths_to_names` function.",
        "is_generic_optimization": true
    },
    {
        "hash": "68ca534169a4f9e1930f6511109e973b43cf5998",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:31+02:00",
        "message": "corruption_test.cc: pass parameter by reference\n\nFix for:\n\n[db/corruption_test.cc:134]: (performance) Function parameter\n 'fname' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/corruption_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/68ca534169a4f9e1930f6511109e973b43cf5998",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CorruptFile"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy used was passing a function parameter by reference instead of by value to avoid unnecessary copying.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "hypre",
        "hash": "86c56d513280e0a079b7b9c2c8cdc783b56950a5",
        "author": "Jongsoo Park",
        "date": "2015-10-09T12:23:17-07:00",
        "message": "take out assert to avoid performance issue",
        "modified_files_count": 1,
        "modified_files": [
            "seq_mv/csr_matop.c"
        ],
        "github_commit_url": "https://github.com/hypre-space/hypre/commit/86c56d513280e0a079b7b9c2c8cdc783b56950a5",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "hypre_CSRMatrixTranspose"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing an assert statement to avoid performance overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "pugixml",
        "hash": "f1bfe4cc64218d015a8415b37b30127327df8b39",
        "author": "arseny.kapoulkine",
        "date": "2010-05-31T07:56:13+00:00",
        "message": "Simplified fp specials handling in XPath (using common faster implementation for both MSVC and BCC)\n\ngit-svn-id: http://pugixml.googlecode.com/svn/trunk@480 99668b35-9821-0410-8761-19e4c4f06640",
        "modified_files_count": 1,
        "modified_files": [
            "src/pugixpath.cpp"
        ],
        "github_commit_url": "https://github.com/zeux/pugixml/commit/f1bfe4cc64218d015a8415b37b30127327df8b39",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "convert_number_to_string_special"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved simplifying the handling of floating-point special cases in XPath by using a common, faster implementation for both MSVC and BCC.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "glsl-optimizer",
        "hash": "1c86c7ad9c38b5ef1baa19677b78076889b60e7f",
        "author": "Felix Kuehling",
        "date": "2004-12-23T20:26:59+00:00",
        "message": "Simplified and optimized _savage_texnorm_stage.",
        "modified_files_count": 1,
        "modified_files": [
            "src/mesa/drivers/dri/savage/savagetris.c"
        ],
        "github_commit_url": "https://github.com/aras-p/glsl-optimizer/commit/1c86c7ad9c38b5ef1baa19677b78076889b60e7f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "run_texnorm_stage"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved simplifying and reducing redundant calculations in the texture normalization stage to improve performance.",
        "is_generic_optimization": true
    },
    {
        "hash": "25403c2265cb700462d59fa3cb9dbec85d25d48f",
        "author": "Andrew Kryczka",
        "date": "2018-06-28T13:20:29-07:00",
        "message": "Prefetch cache lines for filter lookup (#4068)\n\nSummary:\nSince the filter data is unaligned, even though we ensure all probes are within a span of `cache_line_size` bytes, those bytes can span two cache lines. In that case I doubt hardware prefetching does a great job considering we don't necessarily access those two cache lines in order. This guess seems correct since adding explicit prefetch instructions reduced filter lookup overhead by 19.4%.\nCloses https://github.com/facebook/rocksdb/pull/4068\n\nDifferential Revision: D8674189\n\nPulled By: ajkr\n\nfbshipit-source-id: 747427d9a17900151c17820488e3f7efe06b1871",
        "modified_files_count": 1,
        "modified_files": [
            "util/bloom.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/25403c2265cb700462d59fa3cb9dbec85d25d48f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "FullFilterBitsReader::HashMayMatch"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy involved adding explicit prefetch instructions to reduce filter lookup overhead by ensuring cache lines are prefetched for unaligned filter data.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "splatapult",
        "hash": "7d95b5a74b307e3e61df87c6e46951f9bd46c936",
        "author": "Anthony J. Thibault",
        "date": "2024-03-05T10:17:47-08:00",
        "message": "Use 24-bit radix sort for more performance\n\nAlso, removed unnecessary barrier",
        "modified_files_count": 1,
        "modified_files": [
            "src/splatrenderer.cpp"
        ],
        "github_commit_url": "https://github.com/hyperlogic/splatapult/commit/7d95b5a74b307e3e61df87c6e46951f9bd46c936",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SplatRenderer::Sort"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved switching to a 24-bit radix sort for improved performance and removing an unnecessary barrier.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ceph",
        "hash": "735ab91f3c6260733b71f0dfab29a99c5805a5c6",
        "author": "Haomai Wang",
        "date": "2015-05-01T00:34:54+08:00",
        "message": "Client: Fast return if len is 0\n\nIf len == 0,\nosdc/Striper.cc: 50: FAILED assert(len > 0)\n 2: (Striper::file_to_extents(CephContext*, char const*, ceph_file_layout const*, unsigned long, unsigned long, unsigned long, std::map<object_t, std::vector<ObjectExtent, std::allocator<ObjectExtent> >, std::less<object_t>, std::allocator<std::pair<object_t const, std::vector<ObjectExtent, std::allocator<ObjectExtent> > > > >&, unsigned long)+0x1c6) [0x7fd1a0f4f522]\n 3: (Striper::file_to_extents(CephContext*, char const*, ceph_file_layout const*, unsigned long, unsigned long, unsigned long, std::vector<ObjectExtent, std::allocator<ObjectExtent> >&, unsigned long)+0x69) [0x7fd1a0f4f315]\n 4: (Striper::file_to_extents(CephContext*, inodeno_t, ceph_file_layout const*, unsigned long, unsigned long, unsigned long, std::vector<ObjectExtent, std::allocator<ObjectExtent> >&)+0x8a) [0x7fd1a0ef9c3c]\n 5: (ObjectCacher::file_read(ObjectCacher::ObjectSet*, ceph_file_layout*, snapid_t, long, unsigned long, ceph::buffer::list*, int, Context*)+0x7e) [0x7fd1a0efb186]\n 6: (Client::_read_async(Fh*, unsigned long, unsigned long, ceph::buffer::list*)+0x4ca) [0x7fd1a0ec90d4]\n 7: (Client::_read(Fh*, long, unsigned long, ceph::buffer::list*)+0x3dc) [0x7fd1a0ec8744]\n 8: (Client::read(int, char*, long, long)+0x208) [0x7fd1a0ec8100]\n 9: (ceph_read()+0x5e) [0x7fd1a0e80603]\n\nSigned-off-by: Haomai Wang <haomaiwang@gmail.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/client/Client.cc"
        ],
        "github_commit_url": "https://github.com/ceph/ceph/commit/735ab91f3c6260733b71f0dfab29a99c5805a5c6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Client::_read_async"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves adding a fast return condition to avoid unnecessary processing when the input length is zero.",
        "is_generic_optimization": true
    },
    {
        "hash": "8558457143bfa76d61e0d2f715e40ec2ddb6ffc2",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "ldb_cmd_execute_result.h: perform init in initialization list\n\nFix for:\n\n[util/ldb_cmd_execute_result.h:18]: (performance) Variable 'message_'\n is assigned in constructor body. Consider performing initialization\n in initialization list.\n[util/ldb_cmd_execute_result.h:23]: (performance) Variable 'message_'\n is assigned in constructor body. Consider performing initialization\n in initialization list.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd_execute_result.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8558457143bfa76d61e0d2f715e40ec2ddb6ffc2",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "LDBCommandExecuteResult"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy involves initializing class member variables in the constructor's initialization list instead of the constructor body to improve performance.",
        "is_generic_optimization": true
    },
    {
        "hash": "90d835507581324d0449f1ded4f56a8b16f20bf7",
        "author": "xiusir",
        "date": "2017-02-28T10:39:11-08:00",
        "message": "Fix the wrong address for PREFETCH in DynamicBloom::Prefetch\n\nSummary:\n- Change data_[b] to data_[b / 8] in DynamicBloom::Prefetch, as b means the b-th bit in data_ and data_[b / 8] is the proper byte in data_.\nCloses https://github.com/facebook/rocksdb/pull/1935\n\nDifferential Revision: D4628696\n\nPulled By: siying\n\nfbshipit-source-id: bc5a0c6",
        "modified_files_count": 1,
        "modified_files": [
            "util/dynamic_bloom.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/90d835507581324d0449f1ded4f56a8b16f20bf7",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "DynamicBloom::Prefetch"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy corrected the address calculation for prefetching by ensuring the proper byte in the data array is accessed, aligning with the bit-level indexing logic.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "3DWorld",
        "hash": "04a17cce49dea5f8898ceaae812604d6f2ab0357",
        "author": "Frank Gennari",
        "date": "2020-12-10T00:28:24-08:00",
        "message": "Minor optimization to terrain_hmap_manager_t::get_norm()",
        "modified_files_count": 1,
        "modified_files": [
            "src/heightmap.cpp"
        ],
        "github_commit_url": "https://github.com/fegennari/3DWorld/commit/04a17cce49dea5f8898ceaae812604d6f2ab0357",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "terrain_hmap_manager_t::get_norm"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the terrain_hmap_manager_t::get_norm function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "qtdeclarative",
        "hash": "e338bbed44d09c08b7ca047ff0914ed01d3917fd",
        "author": "Sami Shalayel",
        "date": "2025-02-18T20:02:03+01:00",
        "message": "qqmljsutils: improve didYouMean performance\n\ndidYouMean eats up a lot of time in the profiler when imports can't be\nfound, so its not really a \"performance fix\". But it makes qmllint\nfaster on files that have a typo in its imports for example.\n\nSwapping QList with QVarLengthArray makes the runtime of\ntst_qmllint_benchmark:onlyQdsLintPlugin on\nqtdesign-studio/examples/DesignEffectsDemo/content/Gallery.ui.qml go\nfrom 150ms to 125ms when the QtDesign studio modules import paths are\nmissing. It seems that QVarLengthArray does less allocations than QList,\nprobably because of the std::swap.\n\nIt seemed that std::vector had similar performance to QVarLengthArray,\nup to some ms.\n\nTask-number: QTBUG-133349\nChange-Id: I3facc8f194da6eaf1aebbce91292bf9b164b740e\nReviewed-by: Ulf Hermann <ulf.hermann@qt.io>",
        "modified_files_count": 1,
        "modified_files": [
            "src/qmlcompiler/qqmljsutils.cpp"
        ],
        "github_commit_url": "https://github.com/qt/qtdeclarative/commit/e338bbed44d09c08b7ca047ff0914ed01d3917fd",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "QQmlJSUtils::didYouMean"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing QList with QVarLengthArray to reduce allocation overhead and improve runtime performance.",
        "is_generic_optimization": true
    },
    {
        "hash": "a2de8e52bb6c13baf5f2323eba0ca356f1294f88",
        "author": "Simon Liu",
        "date": "2018-11-13T14:39:03-08:00",
        "message": "optimized the performance of autovector::emplace_back. (#4606)\n\nSummary:\nIt called the autovector::push_back simply in autovector::emplace_back.\nThis was not efficient, and then optimazed this function through the\nperfect forwarding.\n\nThis was the src and result of the benchmark(using the google'benchmark library, the type of elem in\nautovector was std::string, and call emplace_back with the \"char *\" type):\n\nhttps://gist.github.com/monadbobo/93448b89a42737b08cbada81de75c5cd\n\nPS: The benchmark's result of  previous PR was not accurate, and so I update the test case and result.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4606\n\nDifferential Revision: D13046813\n\nPulled By: sagar0\n\nfbshipit-source-id: 19cde1bcadafe899aa454b703acb35737a1cc02d",
        "modified_files_count": 1,
        "modified_files": [
            "util/autovector.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a2de8e52bb6c13baf5f2323eba0ca356f1294f88",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "emplace_back"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy involved replacing the inefficient `push_back` call in `autovector::emplace_back` with perfect forwarding to improve performance.",
        "is_generic_optimization": true
    },
    {
        "hash": "30a017fecae60aa7b87c4a1e283b6ac027724a92",
        "author": "Yi Wu",
        "date": "2018-01-05T16:41:58-08:00",
        "message": "Blob DB: avoid having a separate read of checksum\n\nSummary:\nPreviously on a blob db read, we are making a read of the blob value, and then make another read to get CRC checksum. I'm combining the two read into one.\n\nreadrandom db_bench with 1G database with base db size of 13M, value size 1k:\n`./db_bench --db=/home/yiwu/tmp/db_bench --use_blob_db --value_size=1024 --num=1000000 --benchmarks=readrandom --use_existing_db --cache_size=32000000`\nmaster: throughput 234MB/s, get micros p50 5.984 p95 9.998 p99 20.817 p100 787\nthis PR: throughput 261MB/s, get micros p50 5.157 p95 9.928 p99 20.724 p100 190\nCloses https://github.com/facebook/rocksdb/pull/3301\n\nDifferential Revision: D6615950\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: 052410c6d8539ec0cc305d53793bbc8f3616baa3",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/blob_db/blob_db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/30a017fecae60aa7b87c4a1e283b6ac027724a92",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "BlobDBImpl::GetBlobValue"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy combines two separate reads (blob value and CRC checksum) into a single read to reduce I/O overhead.",
        "is_generic_optimization": true
    },
    {
        "hash": "55652043c83c463ce57b7748e01c6d12bb5bf9fe",
        "author": "Danny Al-Gaaf",
        "date": "2014-10-01T10:49:08+02:00",
        "message": "table/cuckoo_table_reader.cc: pass func parameter by reference\n\nFix for:\n\n[table/cuckoo_table_reader.cc:196]: (performance) Function\n parameter 'target' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/55652043c83c463ce57b7748e01c6d12bb5bf9fe",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "BucketComparator"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy involves passing a function parameter by reference instead of by value to avoid unnecessary copying.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "OpenRCT2",
        "hash": "eda01dc6089a430bb3dddf5360f0b8441b0933be",
        "author": "ζeh Matt",
        "date": "2021-01-01T02:43:13+02:00",
        "message": "Merge pull request #13668 from ZehMatt/performance/opengl-setdpi\n\nAvoid unnecessary calculations when the passed DPI is the active DPI",
        "modified_files_count": 1,
        "modified_files": [
            "src/openrct2-ui/drawing/engines/opengl/OpenGLDrawingEngine.cpp"
        ],
        "github_commit_url": "https://github.com/OpenRCT2/OpenRCT2/commit/eda01dc6089a430bb3dddf5360f0b8441b0933be",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "OpenGLDrawingContext::SetDPI"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids redundant calculations by skipping DPI-related computations when the passed DPI matches the active DPI.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "SCP-firmware",
        "hash": "abf6ff5787c376884b1638a69cf45472b3d32c56",
        "author": "Tarek El-Sherbiny",
        "date": "2019-12-02T12:19:02+00:00",
        "message": "sgm775/modules: Remove calls to fwk_module_check_call\n\nThis change is to reduce memory footprint.\n\nChange-Id: I6990cb2b55e4b6463780453f7659e550b328948b\nSigned-off-by: Tarek El-Sherbiny <tarek.el-sherbiny@arm.com>",
        "modified_files_count": 1,
        "modified_files": [
            "product/sgm775/module/sgm775_ddr_phy500/src/mod_sgm775_ddr_phy500.c"
        ],
        "github_commit_url": "https://github.com/ARM-software/SCP-firmware/commit/abf6ff5787c376884b1638a69cf45472b3d32c56",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "sgm775_ddr_phy500_config"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing calls to `fwk_module_check_call` to reduce memory footprint.",
        "is_generic_optimization": true
    },
    {
        "hash": "b8b7117e97e649fc65d0a4dd397caf9a39fb71b1",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:31+02:00",
        "message": "db/version_set.cc: use !empty() instead of 'size() > 0'\n\nUse empty() since it should be prefered as it has, following\nthe standard, a constant time complexity regardless of the\ncontainter type. The same is not guaranteed for size().\n\nFix for:\n[db/version_set.cc:2250]: (performance) Possible inefficient\n checking for 'column_families_not_found' emptiness.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b8b7117e97e649fc65d0a4dd397caf9a39fb71b1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "VersionSet::Recover"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy involves replacing `size() > 0` with `empty()` to ensure constant time complexity when checking container emptiness.",
        "is_generic_optimization": true
    },
    {
        "hash": "43c789c8f246a2a35864e3fca9585b55c40c2095",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "spatialdb/spatial_db.cc: use !empty() instead of 'size() > 0'\n\nUse empty() since it should be prefered as it has, following\nthe standard, a constant time complexity regardless of the\ncontainter type. The same is not guaranteed for size().\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/43c789c8f246a2a35864e3fca9585b55c40c2095",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SpatialIndexCursor"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy replaces `size() > 0` with `!empty()` to leverage the constant time complexity guarantee of `empty()` across container types.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "gperftools",
        "hash": "464688ab6ddb82db22ea9b934ddea192478e4535",
        "author": "Aliaksey Kandratsenka",
        "date": "2015-11-21T17:43:42-08:00",
        "message": "speedup free code path by dropping \"fast path allowed check\"",
        "modified_files_count": 1,
        "modified_files": [
            "src/tcmalloc.cc"
        ],
        "github_commit_url": "https://github.com/gperftools/gperftools/commit/464688ab6ddb82db22ea9b934ddea192478e4535",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "do_free_with_callback"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy removed a \"fast path allowed check\" to speed up the free code path.",
        "is_generic_optimization": true
    },
    {
        "hash": "735a8fd38e86d94f62e732de94e1a137619b9e49",
        "author": "bellard",
        "date": "2005-01-12T22:36:43+00:00",
        "message": "fixed performance regression\n\n\ngit-svn-id: svn://svn.savannah.nongnu.org/qemu/trunk@1218 c046a42c-6fe2-441c-8c8c-71466251a162",
        "modified_files_count": 1,
        "modified_files": [
            "target-i386/cpu.h"
        ],
        "github_commit_url": "https://github.com/eurecom-s3/symqemu/commit/735a8fd38e86d94f62e732de94e1a137619b9e49",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "cpu_x86_load_seg_cache"
        ],
        "is_opt_ds": "true",
        "is_opt_ds_simple": "true",
        "repository_name": "symqemu",
        "optimization_summary": "The optimization strategy involved reducing unnecessary memory accesses by directly accessing struct fields instead of using intermediate pointers.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "MathGeoLib",
        "hash": "bd4a94847324f939187edc214fb3adfeb06b84b6",
        "author": "Jukka Jylänki",
        "date": "2014-02-10T22:53:33+02:00",
        "message": "Optimize away an extra copy in float4x4::Inverted() when using SSE.",
        "modified_files_count": 1,
        "modified_files": [
            "src/Math/float4x4.cpp"
        ],
        "github_commit_url": "https://github.com/juj/MathGeoLib/commit/bd4a94847324f939187edc214fb3adfeb06b84b6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "float4x4::Inverted"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing an extra copy operation in the `float4x4::Inverted()` function when using SSE instructions.",
        "is_generic_optimization": true
    },
    {
        "hash": "93548ce8f451a701ad0967ba705f04fef80aa11a",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "table/cuckoo_table_reader.cc: pass func parameter by ref\n\nFix for:\n\n[table/cuckoo_table_reader.cc:198]: (performance) Function\n parameter 'file_data' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/93548ce8f451a701ad0967ba705f04fef80aa11a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "BucketComparator"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy involves passing a function parameter by reference instead of by value to avoid unnecessary copying.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "genometools",
        "hash": "f64e95dfe0c4257ee7a238ac25febedd2235025e",
        "author": "Stefan Kurtz",
        "date": "2012-03-15T12:04:07+01:00",
        "message": "Optimized gt_firstcodes_countocc_increment.",
        "modified_files_count": 1,
        "modified_files": [
            "src/match/firstcodes-tab.h"
        ],
        "github_commit_url": "https://github.com/genometools/genometools/commit/f64e95dfe0c4257ee7a238ac25febedd2235025e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "DECLARE_HASHMAP"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the efficiency of the `gt_firstcodes_countocc_increment` function by modifying the `DECLARE_HASHMAP` implementation to reduce overhead in hashmap operations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "qtdeclarative",
        "hash": "348f24532f2b6b34eebd15207da0c510d6f499d0",
        "author": "Lars Knoll",
        "date": "2017-08-02T14:11:07+00:00",
        "message": "Optimize UPlus, Increment and Decrement operations\n\nChange-Id: I279b055196850051493dc7b10f0cf159ff834e7d\nReviewed-by: Erik Verbruggen <erik.verbruggen@qt.io>",
        "modified_files_count": 1,
        "modified_files": [
            "src/qml/jsruntime/qv4vme_moth.cpp"
        ],
        "github_commit_url": "https://github.com/qt/qtdeclarative/commit/348f24532f2b6b34eebd15207da0c510d6f499d0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "VME::exec"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the efficiency of UPlus, Increment, and Decrement operations in the VME::exec function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "NX-FPS",
        "hash": "64ac0e1cddff681409ecf95293824f95039f099c",
        "author": "masagrator",
        "date": "2020-03-04T20:55:22+01:00",
        "message": "Make file output faster",
        "modified_files_count": 1,
        "modified_files": [
            "source/main.cpp"
        ],
        "github_commit_url": "https://github.com/masagrator/NX-FPS/commit/64ac0e1cddff681409ecf95293824f95039f099c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "main"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving file output performance by reducing the number of write operations through batching data.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ClickHouse",
        "hash": "0820dc0c8434432d7b1f7740f5561db7c62db9e6",
        "author": "Alexey Milovidov",
        "date": "2019-12-21T02:59:08+03:00",
        "message": "Optimization of sorting heap",
        "modified_files_count": 1,
        "modified_files": [
            "dbms/src/Core/SortCursor.h"
        ],
        "github_commit_url": "https://github.com/ClickHouse/ClickHouse/commit/0820dc0c8434432d7b1f7740f5561db7c62db9e6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SortingHeap"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves improving the efficiency of the sorting heap by reducing unnecessary comparisons and memory allocations during the sorting process.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "30d19d57d513821c58de4556e7445982ed22b923",
        "author": "Magnus Karlsson",
        "date": "2022-03-28T19:56:28-07:00",
        "message": "ice: xsk: Eliminate unnecessary loop iteration\n\nThe NIC Tx ring completion routine cleans entries from the ring in\nbatches. However, it processes one more batch than it is supposed\nto. Note that this does not matter from a functionality point of view\nsince it will not find a set DD bit for the next batch and just exit\nthe loop. But from a performance perspective, it is faster to\nterminate the loop before and not issue an expensive read over PCIe to\nget the DD bit.\n\nFixes: 126cdfe1007a (\"ice: xsk: Improve AF_XDP ZC Tx and use batching API\")\nSigned-off-by: Magnus Karlsson <magnus.karlsson@intel.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nLink: https://lore.kernel.org/bpf/20220328142123.170157-3-maciej.fijalkowski@intel.com",
        "modified_files_count": 1,
        "modified_files": [
            "drivers/net/ethernet/intel/ice/ice_xsk.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/30d19d57d513821c58de4556e7445982ed22b923",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ice_clean_xdp_irq_zc"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves terminating a loop earlier to avoid an unnecessary and expensive PCIe read operation.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "anura",
        "hash": "c458019a3b810f48c4e526debc9ef6dacf2beb6c",
        "author": "Chris Beck",
        "date": "2015-05-02T23:36:08-04:00",
        "message": "lua: cause lists to map to 1-based lua tables (lua arrays)\n\nThis is more efficient than 0-based lua tables, which get\nimplemented with a hash component.\n\nWe might undo this commit later, who knows.",
        "modified_files_count": 1,
        "modified_files": [
            "src/lua_iface.cpp"
        ],
        "github_commit_url": "https://github.com/anura-engine/anura/commit/c458019a3b810f48c4e526debc9ef6dacf2beb6c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "variant_to_lua_value"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved changing lists to map to 1-based Lua tables instead of 0-based ones to improve efficiency by avoiding hash components.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "glsl-optimizer",
        "hash": "487dd96c2706aa352ed44637507dd7f38ac80306",
        "author": "Eric Anholt",
        "date": "2011-06-29T15:09:54-07:00",
        "message": "glsl: Avoid making a temporary for lower_mat_op_to_vec if not needed.\n\nOur copy propagation tends to be bad at handling the later array\naccesses of the matrix argument we moved to a temporary.  Generally we\ndon't need to move it to a temporary, though, so this avoids needing\nmore copy propagation complexity.\n\nReduces instruction count of some Unigine Tropics and Sanctuary\nfragment shaders that do operations on uniform matrix arrays by 5.9%\non gen6.\n\nReviewed-by: Kenneth Graunke <kenneth@whitecape.org>",
        "modified_files_count": 1,
        "modified_files": [
            "src/glsl/lower_mat_op_to_vec.cpp"
        ],
        "github_commit_url": "https://github.com/aras-p/glsl-optimizer/commit/487dd96c2706aa352ed44637507dd7f38ac80306",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ir_mat_op_to_vec_visitor::visit_leave"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization avoids creating unnecessary temporary variables for matrix operations when they are not needed, reducing instruction count.",
        "is_generic_optimization": true
    },
    {
        "hash": "beeee9dccc338ae7129016f2f2e17d2a40ecc5df",
        "author": "Igor Canadi",
        "date": "2014-04-08T11:06:39-07:00",
        "message": "Small speedup of CompactionFilterV2\n\nSummary: ToString() is expensive. Profiling shows that most compaction threads are stuck in jemalloc, allocating a new string. This will help out a litte.\n\nTest Plan: make check\n\nReviewers: haobo, danguo\n\nReviewed By: danguo\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D17583",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_impl.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/beeee9dccc338ae7129016f2f2e17d2a40ecc5df",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "DBImpl::DoCompactionWork"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy reduces the frequency of expensive `ToString()` calls by avoiding unnecessary string allocations during compaction.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "lime3ds-archive",
        "hash": "a234e4c2009b08039d0698cbbcc8595a1f04a615",
        "author": "Huw Pascoe",
        "date": "2017-09-17T15:56:36+01:00",
        "message": "Improved performance of FromAttributeBuffer\n\nTernary operator is optimized by the compiler\nwhereas std::min() is meant to return a value.\n\nI've noticed a 5%-10% emulation speed increase.",
        "modified_files_count": 1,
        "modified_files": [
            "src/video_core/shader/shader.cpp"
        ],
        "github_commit_url": "https://github.com/Lime3DS/lime3ds-archive/commit/a234e4c2009b08039d0698cbbcc8595a1f04a615",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "OutputVertex::FromAttributeBuffer"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing the ternary operator with `std::min()` to improve performance, leveraging the compiler's optimization capabilities.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "partclone",
        "hash": "165dfbdaafd188b1250d288289983b5f54795f10",
        "author": "Patryck Rouleau",
        "date": "2013-06-06T19:37:41-04:00",
        "message": "Optimize crc32 computation\n\nMove the crc table initialization outside of the loop to avoid to check the\ninit flag for every byte.\n\nMy benchmark show a gain of 26% to clone a partition of 17G with 10G used:\n\ninit crc32 table inside the loop:\nreal   4m23.649s\nuser   2m20.301s\nsys    1m34.782s\n\ninit crc32 table outside the loop:\nreal   3m13.169s\nuser   1m15.269s\nsys    1m30.966s\n\nSigned-off-by: Patryck Rouleau <pfrouleau@gmail.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/partclone.c"
        ],
        "github_commit_url": "https://github.com/Thomas-Tsai/partclone/commit/165dfbdaafd188b1250d288289983b5f54795f10",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "crc32"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved moving the crc32 table initialization outside of the loop to avoid checking the initialization flag for every byte.",
        "is_generic_optimization": true
    },
    {
        "hash": "536e9973e30d70fd510e5ab6e423ef75248ed582",
        "author": "Igor Canadi",
        "date": "2014-08-27T11:05:41-07:00",
        "message": "Remove assert in vector rep\n\nSummary: This assert makes Insert O(n^2) instead of O(n) in debug mode. Memtable insert is in the critical path. No need to assert uniqunnes of the key here, since we're adding a sequence number to it anyway.\n\nTest Plan: none\n\nReviewers: sdong, ljin\n\nReviewed By: ljin\n\nSubscribers: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D22443",
        "modified_files_count": 1,
        "modified_files": [
            "util/vectorrep.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/536e9973e30d70fd510e5ab6e423ef75248ed582",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "VectorRep::Insert"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy involves removing an assert statement that caused O(n^2) complexity in debug mode, improving the performance of the Insert operation in the critical path.",
        "is_generic_optimization": true
    },
    {
        "hash": "20dc5e74f276bdcb26c44c13bced506a2d920d3f",
        "author": "Sagar Vemuri",
        "date": "2017-08-05T00:15:35-07:00",
        "message": "Optimize range-delete aggregator call in merge helper.\n\nSummary:\nIn the condition:\n```\nif (range_del_agg != nullptr &&\n    range_del_agg->ShouldDelete(\n        iter->key(),\n        RangeDelAggregator::RangePositioningMode::kForwardTraversal) &&\n    filter != CompactionFilter::Decision::kRemoveAndSkipUntil) {\n...\n}\n```\nit could be possible that all the work done in `range_del_agg->ShouldDelete` is wasted due to not having the right `filter` value later on.\nInstead, check `filter` value before even calling `range_del_agg->ShouldDelete`, which is a much more involved function.\nCloses https://github.com/facebook/rocksdb/pull/2690\n\nDifferential Revision: D5568931\n\nPulled By: sagar0\n\nfbshipit-source-id: 17512d52360425c7ae9de7675383f5d7bc3dad58",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/20dc5e74f276bdcb26c44c13bced506a2d920d3f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "MergeHelper::MergeUntil"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy involves reordering conditions in an if-statement to check a simpler condition (`filter != CompactionFilter::Decision::kRemoveAndSkipUntil`) before calling a more computationally expensive function (`range_del_agg->ShouldDelete`).",
        "is_generic_optimization": true
    },
    {
        "repository_name": "3DWorld",
        "hash": "e967a7602f838eeae2a9f1bc7c2d0a8d86d4e4e9",
        "author": "Frank E. Gennari",
        "date": "2013-07-10T07:46:51+00:00",
        "message": "More efficient glDrawArrays() version of sd_sphere_d::draw_ndiv_pow2(). -FG",
        "modified_files_count": 1,
        "modified_files": [
            "src/draw_primitives.cpp"
        ],
        "github_commit_url": "https://github.com/fegennari/3DWorld/commit/e967a7602f838eeae2a9f1bc7c2d0a8d86d4e4e9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "sd_sphere_d::draw_ndiv_pow2"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing a less efficient drawing method with a more efficient `glDrawArrays()` function in the `sd_sphere_d::draw_ndiv_pow2()` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "libevent",
        "hash": "557990cad33f1b06a1e2a416231d79590237dd2e",
        "author": "Cœur",
        "date": "2023-03-02T07:51:14+01:00",
        "message": "Optimize arc4random_uniform() (by syncing with OpenBSD implementation)\n\n1. In d4de062, in Feb 2010, libevent adopted OpenBSD implementation of\n   arc4random_uniform.\n2. In\n   https://github.com/openbsd/src/commit/728918cba93e0418bea2a73c9784f6b80c2a9dbd,\n   in Jun 2012, OpenBSD improved their implementation to be faster, by\n   changing arc4random_uniform() to calculate ``2**32 % upper_bound'' as\n   ``-upper_bound % upper_bound''.\n\nAlternatively we can simply remove arc4random_uniform() since it is not\nused by libevent anyway, but let's just sync the header for now.",
        "modified_files_count": 1,
        "modified_files": [
            "arc4random.c"
        ],
        "github_commit_url": "https://github.com/libevent/libevent/commit/557990cad33f1b06a1e2a416231d79590237dd2e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "arc4random_uniform"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing the calculation of `2**32 % upper_bound` with `-upper_bound % upper_bound` to improve performance in the `arc4random_uniform` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "slurm",
        "hash": "0d706a22479dd972f47a680a6a4bc78d49e3cea2",
        "author": "Moe Jette",
        "date": "2002-12-06T01:15:03+00:00",
        "message": "Slight optimization in copying node addresses (do all in one memcpy).",
        "modified_files_count": 1,
        "modified_files": [
            "src/srun/job.c"
        ],
        "github_commit_url": "https://github.com/SchedMD/slurm/commit/0d706a22479dd972f47a680a6a4bc78d49e3cea2",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "job_create"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves using a single `memcpy` call to copy node addresses instead of multiple smaller copies, reducing function call overhead and improving efficiency.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "4192bce91b2c4baf36d3cec47eeb33b2ef93648b",
        "author": "Chris Lattner",
        "date": "2009-03-04T04:46:18+00:00",
        "message": "add a special case for codegen that improves the case where we have\nmultiple sequential cases to a) not create tons of fall-through basic blocks\nand b) not recurse deeply.  This fixes codegen on 100K deep cases, and improves\ncodegen on moderate cases from this:\n\n        switch i32 %tmp, label %sw.epilog [\n                i32 1000, label %sw.bb\n                i32 1001, label %sw.bb1\n                i32 1002, label %sw.bb2\n                i32 1003, label %sw.bb3\n                i32 1004, label %sw.bb4\n...\nsw.bb:          ; preds = %entry\n        br label %sw.bb1\n\nsw.bb1:         ; preds = %entry, %sw.bb\n        br label %sw.bb2\n\nsw.bb2:         ; preds = %entry, %sw.bb1\n        br label %sw.bb3\n\nsw.bb3:         ; preds = %entry, %sw.bb2\n        br label %sw.bb4\n\nto:\n\n        switch i32 %tmp, label %sw.epilog [\n                i32 1000, label %sw.bb\n                i32 1001, label %sw.bb\n                i32 1002, label %sw.bb\n                i32 1003, label %sw.bb\n                i32 1004, label %sw.bb\nsw.bb:  ;; many preds\n\nllvm-svn: 66015",
        "modified_files_count": 1,
        "modified_files": [
            "clang/lib/CodeGen/CGStmt.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/4192bce91b2c4baf36d3cec47eeb33b2ef93648b",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy reduces code generation overhead by consolidating multiple sequential switch cases into a single basic block to avoid excessive fall-through blocks and deep recursion.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "b5b4a2f76b5de723606c0e8f30eb0f930d4a3c21",
        "author": "Chris Lattner",
        "date": "2004-09-30T16:35:08+00:00",
        "message": "Use more efficient map operations.  Fix a bug that would affect hypothetical\ntargets that supported multiple memory operands.\n\nllvm-svn: 16614",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/CodeGen/VirtRegMap.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/b5b4a2f76b5de723606c0e8f30eb0f930d4a3c21",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved using more efficient map operations to improve performance and fixing a bug related to handling multiple memory operands.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "clang",
        "hash": "b2011f870be4a78aac8561319c7c3944cd92cedf",
        "author": "David Majnemer",
        "date": "2016-07-07T04:43:11+00:00",
        "message": "[AST] Tighten up the bitfield in TemplateSpecializationType\n\nOptimize the bitfield types to conserve space for the MSVC ABI.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@274733 91177308-0d34-0410-b5e6-96231b3b80d8",
        "modified_files_count": 1,
        "modified_files": [
            "include/clang/AST/Type.h"
        ],
        "github_commit_url": "https://github.com/llvm-mirror/clang/commit/b2011f870be4a78aac8561319c7c3944cd92cedf",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "LLVM_ALIGNAS"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves tightening the bitfield in `TemplateSpecializationType` to conserve space for the MSVC ABI.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sc3-plugins",
        "hash": "890b380b039cc8615d52dc91a85571af178e8bd8",
        "author": "Tim Blechmann",
        "date": "2013-01-15T18:42:36+01:00",
        "message": "Nova UGens: GendyI - ensure inlining of Gendyn_distribution\n\nSigned-off-by: Tim Blechmann <tim@klingt.org>",
        "modified_files_count": 1,
        "modified_files": [
            "source/NovaUGens/NovaGendy.cpp"
        ],
        "github_commit_url": "https://github.com/supercollider/sc3-plugins/commit/890b380b039cc8615d52dc91a85571af178e8bd8",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy ensures inlining of the `Gendyn_distribution` function to reduce function call overhead and improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "OpenTESArena",
        "hash": "d451fb9a6257e1cc93baf1b2b9bcd52dc4a762e1",
        "author": "Aaron",
        "date": "2020-05-14T23:17:37-07:00",
        "message": "Cache voxel grid dimensions.\n\nThe getter calls don't seem to get inlined even in a release build except with link time optimization. The generated assembly in the DDA step lambda no longer has call instructions, so that's a plus.",
        "modified_files_count": 1,
        "modified_files": [
            "OpenTESArena/src/Rendering/SoftwareRenderer.cpp"
        ],
        "github_commit_url": "https://github.com/afritz1/OpenTESArena/commit/d451fb9a6257e1cc93baf1b2b9bcd52dc4a762e1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SoftwareRenderer::rayCast2DInternal"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved caching voxel grid dimensions to avoid repeated getter calls, improving performance by eliminating call instructions in the generated assembly.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "john",
        "hash": "645a378764d19a78f027e2c3b2e31a11696a944c",
        "author": "Solar Designer",
        "date": "2020-11-01T20:31:33+01:00",
        "message": "Use OpenMP in DES_bs_cmp_all()\n\nWe should actually have this with SIMD inside the 3 crypt_all() functions,\nbut even doing it here provides good speedup on massively parallel devices\nsuch as Xeon Phi and high-end server CPUs, at the expense of occasional\nslight slowdown when running only 1 or 2 threads.",
        "modified_files_count": 1,
        "modified_files": [
            "src/DES_bs.c"
        ],
        "github_commit_url": "https://github.com/openwall/john/commit/645a378764d19a78f027e2c3b2e31a11696a944c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "DES_bs_cmp_all"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used is parallelizing the DES_bs_cmp_all() function with OpenMP to leverage massively parallel devices like Xeon Phi and high-end server CPUs.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "0a5ce0831d04382aa9e2420e33dff958ddade542",
        "author": "Yury Norov",
        "date": "2017-09-08T18:26:49-07:00",
        "message": "lib/bitmap.c: make bitmap_parselist() thread-safe and much faster\n\nCurrent implementation of bitmap_parselist() uses a static variable to\nsave local state while setting bits in the bitmap.  It is obviously wrong\nif we assume execution in multiprocessor environment.  Fortunately, it's\npossible to rewrite this portion of code to avoid using the static\nvariable.\n\nIt is also possible to set bits in the mask per-range with bitmap_set(),\nnot per-bit, as it is implemented now, with set_bit(); which is way\nfaster.\n\nThe important side effect of this change is that setting bits in this\nfunction from now is not per-bit atomic and less memory-ordered.  This is\nbecause set_bit() guarantees the order of memory accesses, while\nbitmap_set() does not.  I think that it is the advantage of the new\napproach, because the bitmap_parselist() is intended to initialise bit\narrays, and user should protect the whole bitmap during initialisation if\nneeded.  So protecting individual bits looks expensive and useless.  Also,\nother range-oriented functions in lib/bitmap.c don't worry much about\natomicity.\n\nWith all that, setting 2k bits in map with the pattern like 0-2047:128/256\nbecomes ~50 times faster after applying the patch in my testing\nenvironment (arm64 hosted on qemu).\n\nThe second patch of the series adds the test for bitmap_parselist().  It's\nnot intended to cover all tricky cases, just to make sure that I didn't\nscrew up during rework.\n\nLink: http://lkml.kernel.org/r/20170807225438.16161-1-ynorov@caviumnetworks.com\nSigned-off-by: Yury Norov <ynorov@caviumnetworks.com>\nCc: Noam Camus <noamca@mellanox.com>\nCc: Rasmus Villemoes <linux@rasmusvillemoes.dk>\nCc: Matthew Wilcox <mawilcox@microsoft.com>\nCc: Mauro Carvalho Chehab <mchehab@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "modified_files_count": 1,
        "modified_files": [
            "lib/bitmap.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/0a5ce0831d04382aa9e2420e33dff958ddade542",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "__bitmap_parselist"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing per-bit atomic operations with per-range non-atomic operations to improve performance and thread safety in bitmap initialization.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "v8",
        "hash": "699badd56b4c1472dbab552917842d9587effc5f",
        "author": "Toon Verwaest",
        "date": "2019-06-06T15:48:18+00:00",
        "message": "[scanner] Add fast path for converting utf8 that's ascii to utf16\n\nChange-Id: I386261bc012d0d4556b0f9417b2880cc7f44bf2c\nReviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/1647697\nCommit-Queue: Toon Verwaest <verwaest@chromium.org>\nReviewed-by: Leszek Swirski <leszeks@chromium.org>\nCr-Commit-Position: refs/heads/master@{#62029}",
        "modified_files_count": 1,
        "modified_files": [
            "src/parsing/scanner-character-streams.cc"
        ],
        "github_commit_url": "https://github.com/v8/v8/commit/699badd56b4c1472dbab552917842d9587effc5f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Utf8ExternalStreamingStream::FillBufferFromCurrentChunk"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves adding a fast path for converting UTF-8 encoded text that is already ASCII to UTF-16, avoiding unnecessary processing.",
        "is_generic_optimization": true
    },
    {
        "hash": "e94eea4527f2d7de82a6bf3303177977011e5dd9",
        "author": "Haobo Xu",
        "date": "2013-12-20T16:29:05-08:00",
        "message": "[RocksDB] [Performance Branch] Minor fix, Remove string resize from WriteBatch::Clear\n\nSummary: tmp_batch_ will get re-allocated for every merged write batch because of the existing resize in WriteBatch::Clear. Note that in DBImpl::BuildBatchGroup, we have a hard coded upper limit of batch size 1<<20 = 1MB already.\n\nTest Plan: make check\n\nReviewers: dhruba, sdong\n\nCC: leveldb\n\nDifferential Revision: https://reviews.facebook.net/D14787",
        "modified_files_count": 1,
        "modified_files": [
            "db/write_batch.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/e94eea4527f2d7de82a6bf3303177977011e5dd9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "WriteBatch::Clear"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy removes unnecessary string resizing in WriteBatch::Clear to avoid re-allocation overhead during merged write batches.",
        "is_generic_optimization": true
    },
    {
        "hash": "1535e9dbb6d66647f3f64d307b07abd41c8973c5",
        "author": "Thanos Makatos",
        "date": "2022-05-09T20:45:04+00:00",
        "message": "nvmf/vfio-user: reduce libvfio-user socket poll frequency\n\nConstantly polling the socket degrades performance significantly.\nPolling the socket at a much lower frequency, every 1ms, is good enough\nfor now.\n\nfixes #2494\n\nSigned-off-by: Thanos Makatos <thanos.makatos@nutanix.com>\nCo-authored-by: John Levon <john.levon@nutanix.com>\nChange-Id: I4a7d35c45ece863b9df756324c23f41736df49f8\nReviewed-on: https://review.spdk.io/gerrit/c/spdk/spdk/+/12494\nCommunity-CI: Broadcom CI <spdk-ci.pdl@broadcom.com>\nTested-by: SPDK CI Jenkins <sys_sgci@intel.com>\nReviewed-by: Changpeng Liu <changpeng.liu@intel.com>\nReviewed-by: Jim Harris <james.r.harris@intel.com>",
        "modified_files_count": 1,
        "modified_files": [
            "lib/nvmf/vfio_user.c"
        ],
        "github_commit_url": "https://github.com/spdk/spdk/commit/1535e9dbb6d66647f3f64d307b07abd41c8973c5",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "handle_queue_connect_rsp"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "spdk",
        "optimization_summary": "The optimization strategy involves reducing the polling frequency of the libvfio-user socket from constant polling to every 1ms to improve performance.",
        "is_generic_optimization": true
    },
    {
        "hash": "82e8e9e26bb16d1af07a26741bcf63d8342e4336",
        "author": "JiYou",
        "date": "2018-09-14T19:43:04-07:00",
        "message": "VersionBuilder: optmize SaveTo() to linear time. (#4366)\n\nSummary:\nBecause `base_files` and `added_files` both are sorted, using a merge\noperation to these two sorted arrays is more effective. The complexity\nis reduced to linear time.\n\n    - optmize the merge complexity.\n    - move the `NDEBUG` of sorted `added_files` out of merge process.\n\nSigned-off-by: JiYou <jiyou09@gmail.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4366\n\nDifferential Revision: D9833592\n\nPulled By: ajkr\n\nfbshipit-source-id: dd32b67ebdca4c20e5e9546ab8082cecefe99fd0",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/82e8e9e26bb16d1af07a26741bcf63d8342e4336",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SaveTo"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": "The optimization strategy used a merge operation on two sorted arrays (`base_files` and `added_files`) to reduce the complexity of the `SaveTo` function from quadratic to linear time.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "redis",
        "hash": "f0fab99d6fd7b4310f03a2c84b465fae98d31bc0",
        "author": "Huang Zhw",
        "date": "2021-09-23T17:12:11+03:00",
        "message": "Minor optimize getMaxmemoryState, when server.maxmemory is not set (#9533)\n\nMinor optimize getMaxmemoryState, when server.maxmemory is not set,\r\ndon't count AOF and replicas buffers.\r\n\r\nCo-authored-by: Viktor Söderqvist <viktor@zuiderkwast.se>",
        "modified_files_count": 1,
        "modified_files": [
            "src/evict.c"
        ],
        "github_commit_url": "https://github.com/redis/redis/commit/f0fab99d6fd7b4310f03a2c84b465fae98d31bc0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "getMaxmemoryState"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves skipping unnecessary buffer counting in `getMaxmemoryState` when `server.maxmemory` is not set, reducing redundant computations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kdeconnect-kde",
        "hash": "f8674db931c9b743874ae9d09d5cf48029dcec4b",
        "author": "Nicolas Fella",
        "date": "2020-04-08T10:25:34+02:00",
        "message": "Don't recreate QRegularExpression for leading zeroes each time\n\nCreating a QRegularExpression is quite expensive and we use the same expression for each run. Sharing it between the runs leads to a significant performance improvement.",
        "modified_files_count": 1,
        "modified_files": [
            "smsapp/smshelper.cpp"
        ],
        "github_commit_url": "https://github.com/KDE/kdeconnect-kde/commit/f8674db931c9b743874ae9d09d5cf48029dcec4b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SmsHelper::canonicalizePhoneNumber"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reusing a precompiled QRegularExpression object instead of recreating it each time to reduce overhead and improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "meshoptimizer",
        "hash": "8688bbfb8f7f2cb847f711ceed73c89f9aaece6c",
        "author": "Arseny Kapoulkine",
        "date": "2021-01-13T21:18:52-08:00",
        "message": "clusterizer: Replace Hoare partition with branchless Lomuto partition\n\nThe branchless variant is shorter and faster for our workloads, and also\neasy to reason about. Note that this isn't exactly equivalent to a\nLomuto partition because we always swap the element but sometimes swap\nit into the >= half, which means that the resulting partitioning isn't\nstable.",
        "modified_files_count": 1,
        "modified_files": [
            "src/clusterizer.cpp"
        ],
        "github_commit_url": "https://github.com/zeux/meshoptimizer/commit/8688bbfb8f7f2cb847f711ceed73c89f9aaece6c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "kdtreePartition"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing a Hoare partition with a branchless Lomuto partition to improve performance and simplify reasoning.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "athena",
        "hash": "2d3c819f95c5b1d53eaecfae2d85a51047fbf6cb",
        "author": "tomo-ono",
        "date": "2020-11-21T00:09:06+09:00",
        "message": "remove inefficient pragma",
        "modified_files_count": 1,
        "modified_files": [
            "src/orbital_advection/calculate_orbital_advection.cpp"
        ],
        "github_commit_url": "https://github.com/PrincetonUniversity/athena/commit/2d3c819f95c5b1d53eaecfae2d85a51047fbf6cb",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "OrbitalAdvection::CalculateOrbitalAdvectionCC"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing an inefficient pragma directive to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "60588bfa223ff675b95f866249f90616613fbe31",
        "author": "Cheng Jian",
        "date": "2019-12-17T13:32:51+01:00",
        "message": "sched/fair: Optimize select_idle_cpu\n\nselect_idle_cpu() will scan the LLC domain for idle CPUs,\nit's always expensive. so the next commit :\n\n\t1ad3aaf3fcd2 (\"sched/core: Implement new approach to scale select_idle_cpu()\")\n\nintroduces a way to limit how many CPUs we scan.\n\nBut it consume some CPUs out of 'nr' that are not allowed\nfor the task and thus waste our attempts. The function\nalways return nr_cpumask_bits, and we can't find a CPU\nwhich our task is allowed to run.\n\nCpumask may be too big, similar to select_idle_core(), use\nper_cpu_ptr 'select_idle_mask' to prevent stack overflow.\n\nFixes: 1ad3aaf3fcd2 (\"sched/core: Implement new approach to scale select_idle_cpu()\")\nSigned-off-by: Cheng Jian <cj.chengjian@huawei.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nReviewed-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>\nReviewed-by: Vincent Guittot <vincent.guittot@linaro.org>\nReviewed-by: Valentin Schneider <valentin.schneider@arm.com>\nLink: https://lkml.kernel.org/r/20191213024530.28052-1-cj.chengjian@huawei.com",
        "modified_files_count": 1,
        "modified_files": [
            "kernel/sched/fair.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/60588bfa223ff675b95f866249f90616613fbe31",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "cost"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves using a per-CPU pointer 'select_idle_mask' to prevent stack overflow and reduce unnecessary CPU scans in the select_idle_cpu() function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "qt-creator",
        "hash": "c074b18f8d4510713f6d66149213510428eae6f1",
        "author": "Christian Kamm",
        "date": "2011-09-07T09:32:24+02:00",
        "message": "C++: Improve Literal::hashCode.\n\nThis can have a dramatic impact on performance when a file contains lots\nof unique literals.\n\nChange-Id: I5309b28f704d7f53e164dc8084ae08354c09354b\nReviewed-on: http://codereview.qt.nokia.com/4312\nReviewed-by: Roberto Raggi <roberto.raggi@nokia.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/libs/3rdparty/cplusplus/Literals.cpp"
        ],
        "github_commit_url": "https://github.com/qt-creator/qt-creator/commit/c074b18f8d4510713f6d66149213510428eae6f1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Literal::hashCode"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the `Literal::hashCode` function to enhance performance when handling files with numerous unique literals.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "magnum",
        "hash": "bc5d127bd6b1fef4cf9888b92b2f09acea57bff3",
        "author": "Vladimír Vondruš",
        "date": "2023-05-19T16:23:25+02:00",
        "message": "sceneconverter: don't query Arguments value unnecessarily often.\n\nIt's an --info output which doesn't have to be the fastest ever, but it\nalso doesn't have to waste time for no reason.",
        "modified_files_count": 1,
        "modified_files": [
            "src/Magnum/SceneTools/Implementation/sceneConverterUtilities.h"
        ],
        "github_commit_url": "https://github.com/mosra/magnum/commit/bc5d127bd6b1fef4cf9888b92b2f09acea57bff3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "printInfo"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing unnecessary queries of the Arguments value to avoid wasted computation in the --info output function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "mangos-wotlk",
        "hash": "f833421b70019f8a3c05854693f6db9775015fb3",
        "author": "killerwife",
        "date": "2018-06-28T15:16:54+02:00",
        "message": "Optimize RemoveSpellsCausingAura\n\nNow we won't senselessly iterate over and over and skip one step.",
        "modified_files_count": 1,
        "modified_files": [
            "src/game/Entities/Unit.cpp"
        ],
        "github_commit_url": "https://github.com/cmangos/mangos-wotlk/commit/f833421b70019f8a3c05854693f6db9775015fb3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Unit::RemoveSpellsCausingAura"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reducing redundant iterations in the `RemoveSpellsCausingAura` function by skipping unnecessary steps during the loop.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "selinux-kernel",
        "hash": "5b881c1f83792f5db421124171b06f1b8f1fe075",
        "author": "David Wang",
        "date": "2024-11-10T22:33:52+11:00",
        "message": "powerpc/irq: use seq_put_decimal_ull_width() for decimal values\n\nOn a system with n CPUs and m interrupts, there will be n*m decimal\nvalues yielded via seq_printf(..\"%10u \"..) which is less efficient\nthan seq_put_decimal_ull_width(), stress reading /proc/interrupts\nindicates ~30% performance improvement with this patch.\n\nSigned-off-by: David Wang <00107082@163.com>\n[mpe: Flesh out change log based on original submission]\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/all/20241103080552.4787-1-00107082@163.com\nLink: https://patch.msgid.link/20241108162327.9887-1-00107082@163.com",
        "modified_files_count": 1,
        "modified_files": [
            "arch/powerpc/kernel/irq.c"
        ],
        "github_commit_url": "https://github.com/SELinuxProject/selinux-kernel/commit/5b881c1f83792f5db421124171b06f1b8f1fe075",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "arch_show_interrupts"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing `seq_printf(..\"%10u \"..)` with `seq_put_decimal_ull_width()` for decimal values to improve performance in reading `/proc/interrupts`.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "intel-graphics-compiler",
        "hash": "72334282a29ed09c28a5205339ec333bac869906",
        "author": "Dmitrichenko, Aleksei",
        "date": "2024-05-10T13:11:54+02:00",
        "message": "Improve CodeLoopSinking compilation time\n\nAdd a heuristic to check the candidates size on every iteration before\nrerunning the liveness analysis. Skip the rerun if the candidates size\nis too small to achieve the needed register pressure",
        "modified_files_count": 1,
        "modified_files": [
            "IGC/Compiler/CISACodeGen/CodeSinking.cpp"
        ],
        "github_commit_url": "https://github.com/intel/intel-graphics-compiler/commit/72334282a29ed09c28a5205339ec333bac869906",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy adds a heuristic to skip redundant liveness analysis iterations when the candidate size is too small to impact register pressure.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "android_kernel_brcm_rpi",
        "hash": "30909f865bd6ad07653089736540115e3cda11ae",
        "author": "Pavel Begunkov",
        "date": "2023-03-01T11:38:25+00:00",
        "message": "UPSTREAM: io_uring: cmpxchg for poll arm refs release\n\n[ upstream commit 2f3893437a4ebf2e892ca172e9e122841319d675 ]\n\nReplace atomically substracting the ownership reference at the end of\narming a poll with a cmpxchg. We try to release ownership by setting 0\nassuming that poll_refs didn't change while we were arming. If it did\nchange, we keep the ownership and use it to queue a tw, which is fully\ncapable to process all events and (even tolerates spurious wake ups).\n\nIt's a bit more elegant as we reduce races b/w setting the cancellation\nflag and getting refs with this release, and with that we don't have to\nworry about any kinds of underflows. It's not the fastest path for\npolling. The performance difference b/w cmpxchg and atomic dec is\nusually negligible and it's not the fastest path.\n\nCc: stable@vger.kernel.org\nFixes: aa43477b04025 (\"io_uring: poll rework\")\nChange-Id: I31a129be59fb1a30e806b5c839e6b7c10224502e\nSigned-off-by: Pavel Begunkov <asml.silence@gmail.com>\nLink: https://lore.kernel.org/r/0c95251624397ea6def568ff040cad2d7926fd51.1668963050.git.asml.silence@gmail.com\nSigned-off-by: Jens Axboe <axboe@kernel.dk>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\n(cherry picked from commit 1d58849ac26f8bafd4aeb71d2b38a761c89186ae)\nBug: 268174392\nSigned-off-by: Greg Kroah-Hartman <gregkh@google.com>",
        "modified_files_count": 1,
        "modified_files": [
            "fs/io_uring.c"
        ],
        "github_commit_url": "https://github.com/lineage-rpi/android_kernel_brcm_rpi/commit/30909f865bd6ad07653089736540115e3cda11ae",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "__io_arm_poll_handler"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaces atomic subtraction with a compare-and-swap (cmpxchg) operation to reduce race conditions and avoid underflows in poll reference handling.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "llvm-leg",
        "hash": "df4663be6a9dd427ee0b73a1ea47d6791e5dfc53",
        "author": "Matt Arsenault",
        "date": "2014-07-17T06:13:41+00:00",
        "message": "R600: Short circuit alloca check if address space isn't private.\n\nSkip calling GetUnderlyingObject in cases where it obviously\nisn't from an alloca. This should only be a compile time improvement.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@213229 91177308-0d34-0410-b5e6-96231b3b80d8",
        "modified_files_count": 1,
        "modified_files": [
            "lib/Target/R600/AMDGPUTargetTransformInfo.cpp"
        ],
        "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/df4663be6a9dd427ee0b73a1ea47d6791e5dfc53",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "AMDGPUTTI::getUnrollingPreferences"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves skipping a costly function call (`GetUnderlyingObject`) when the address space is not private, thereby reducing unnecessary computation during compilation.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "b6dad11d9cb105681abbfc3d57aae4b21bd0c8c4",
        "author": "Yury Norov",
        "date": "2022-06-03T06:52:57-07:00",
        "message": "arch/ia64: replace cpumask_weight with cpumask_empty where appropriate\n\nsetup_arch() calls cpumask_weight() to check if any bit of a given cpumask\nis set. We can do it more efficiently with cpumask_empty() because\ncpumask_empty() stops traversing the cpumask as soon as it finds first set\nbit, while cpumask_weight() counts all bits unconditionally.\n\nSigned-off-by: Yury Norov <yury.norov@gmail.com>",
        "modified_files_count": 1,
        "modified_files": [
            "arch/ia64/kernel/setup.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/b6dad11d9cb105681abbfc3d57aae4b21bd0c8c4",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "setup_arch"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "Replaced `cpumask_weight()` with `cpumask_empty()` to stop traversing the cpumask as soon as the first set bit is found, improving efficiency.",
        "is_generic_optimization": true
    },
    {
        "hash": "151c99b1de34c0308c444dd3fd9c78b037bb7620",
        "author": "Sean Risser",
        "date": "2021-08-02T18:09:00+00:00",
        "message": "Optimize Lod and Grad texture sampling\n\nIf the Lod doesn't vary across any sample, then we can get away with\nperforming a single texture sample call. The added cost of a reactor If\nis balanced by potentially removing 3 calls altogether.\n\nBug: b/133868964\nBug: b/163791974\nTests: dEQP-VK.texture.subgroup_lod.texelfetch\nTests: dEQP-VK.glsl.texture_functions.texelfetch.*\nTests: dEQP-VK.glsl.texture_functions.texturelod.*\nTests: dEQP-VK.glsl.texture_functions.texturegrad.*\n\nChange-Id: Ib637653f78d3d5aa149352648c710d5f48526ede\nReviewed-on: https://swiftshader-review.googlesource.com/c/SwiftShader/+/55908\nTested-by: Sean Risser <srisser@google.com>\nCommit-Queue: Sean Risser <srisser@google.com>\nReviewed-by: Nicolas Capens <nicolascapens@google.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/Pipeline/SpirvShaderSampling.cpp"
        ],
        "github_commit_url": "https://github.com/google/swiftshader/commit/151c99b1de34c0308c444dd3fd9c78b037bb7620",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SpirvShader::emitSamplerRoutine"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "swiftshader",
        "optimization_summary": "The optimization strategy involves reducing redundant texture sample calls by performing a single sample when the Lod value is constant across all samples.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "XRT",
        "hash": "6890d40225538860002a12f30a42d68b3de5c8bd",
        "author": "Saifuddin Kaijar",
        "date": "2024-10-24T14:25:03+05:30",
        "message": "Removed a debug msg which is a overhead of the performance for async operation. (#8565)\n\n* Removed some debug msg which is a overhead of the performance.\r\n\r\nSigned-off-by: Saifuddin <saifuddi@xilinx.com>\r\n\r\n* Commenting out debug msg which is a overhead of the performance.\r\n\r\nSigned-off-by: Saifuddin <saifuddi@xilinx.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Saifuddin <saifuddi@xilinx.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/runtime_src/core/edge/user/aie/common_layer/adf_runtime_api.cpp"
        ],
        "github_commit_url": "https://github.com/Xilinx/XRT/commit/6890d40225538860002a12f30a42d68b3de5c8bd",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "gmio_api::enqueueBD"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing or commenting out debug messages to reduce performance overhead in asynchronous operations.",
        "is_generic_optimization": true
    },
    {
        "hash": "5082af8f2563848eb84e905cefb744f473de602b",
        "author": "Jonas Hahnfeld",
        "date": "2020-03-23T11:40:02+01:00",
        "message": "Implement xoutput_buffer::xsputn()\n\nThis outputs a string of characters which can be appendded more\nefficiently.",
        "modified_files_count": 1,
        "modified_files": [
            "include/xeus-cling/xbuffer.hpp"
        ],
        "github_commit_url": "https://github.com/jupyter-xeus/xeus-cling/commit/5082af8f2563848eb84e905cefb744f473de602b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "overflow"
        ],
        "is_opt_ds": "false",
        "is_opt_ds_simple": "true",
        "repository_name": "xeus-cling",
        "optimization_summary": "The optimization strategy involves implementing a more efficient character appending method in the `xsputn` function to reduce overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "SPIRV-Tools",
        "hash": "51ecc7318f7aea8472cf49be768eac7f3236eeaa",
        "author": "Steven Perron",
        "date": "2018-02-21T09:50:47-05:00",
        "message": "Reduce instruction create and deletion during inlining.\n\nWhen inlining a function call the instructions in the same basic block\nas the call get cloned.  The clone is added to the set of new blocks\ncontaining the inlined code, and the original instructions are deleted.\n\nThis PR will change this so that we simply move the instructions to the\nnew blocks.  This saves on the creation and deletion of the\ninstructions.\n\nContributes to #1328.",
        "modified_files_count": 1,
        "modified_files": [
            "source/opt/inline_pass.cpp"
        ],
        "github_commit_url": "https://github.com/KhronosGroup/SPIRV-Tools/commit/51ecc7318f7aea8472cf49be768eac7f3236eeaa",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "InlinePass::GenInlineCode"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves moving instructions to new blocks during function inlining instead of cloning and deleting them, reducing the overhead of instruction creation and deletion.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "magnum",
        "hash": "00dbbd5ce2f2b7c65e13589424263ba32cd068f1",
        "author": "Vladimír Vondruš",
        "date": "2010-12-29T21:34:09+01:00",
        "message": "Optimization: using dot product for computing vector length.",
        "modified_files_count": 1,
        "modified_files": [
            "src/Math/Vector.h"
        ],
        "github_commit_url": "https://github.com/mosra/magnum/commit/00dbbd5ce2f2b7c65e13589424263ba32cd068f1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "length"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing a manual calculation of vector length with a dot product operation to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "cheribsd",
        "hash": "69b475fb98d11a550e8751ebe27b9e40ff741eb7",
        "author": "Justin Hibbits",
        "date": "2021-10-18T22:32:01+01:00",
        "message": "powerpc: Optimize copyinstr() to avoid repeatedly mapping user strings\n\nCurrently copyinstr() uses fubyte() to read each byte from userspace.\nHowever, this means that for each byte, it calls pmap_map_user_ptr() to\nmap the string into memory.  This is needlessly wasteful, since the\nstring will rarely ever cross a segment boundary.  Instead, map a\nsegment at a time, and copy as much from that segment as possible at a\ntime.\n\nMeasured with the HPT pmap on powerpc64, this saves roughly 8% time on\nbuildkernel, and 5% on buildworld, in wallclock time.",
        "modified_files_count": 1,
        "modified_files": [
            "sys/powerpc/powerpc/copyinout.c"
        ],
        "github_commit_url": "https://github.com/CTSRD-CHERI/cheribsd/commit/69b475fb98d11a550e8751ebe27b9e40ff741eb7",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "REMAP"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves mapping user strings in segments rather than byte-by-byte to reduce the overhead of repeatedly calling pmap_map_user_ptr() in copyinstr().",
        "is_generic_optimization": true
    },
    {
        "repository_name": "geeqie",
        "hash": "a871f2934cd24dd852a1810a82d7029cf8cfb3e9",
        "author": "Vladimir Nadvornik",
        "date": "2008-06-08T20:24:46+00:00",
        "message": "vficon_sync speed-up",
        "modified_files_count": 1,
        "modified_files": [
            "src/view_file_icon.c"
        ],
        "github_commit_url": "https://github.com/BestImageViewer/geeqie/commit/a871f2934cd24dd852a1810a82d7029cf8cfb3e9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "vficon_sync"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reducing redundant function calls and minimizing unnecessary operations within the `vficon_sync` function to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "qt",
        "hash": "628fd7d141013dcda06d13fa644f44029f317a8c",
        "author": "Ritt Konstantin",
        "date": "2011-06-09T17:34:14+02:00",
        "message": "get rid of extra copying (another one)\n\nin the static toCFStringRef(const QString &string) method, the string's lifecycle\nis unkown and thus, to ensure the data consistency, it copies the string's data\nto the newly created CFStringRef object.\n\nbut operator CFStringRef() is an other case - here we know that the source string's\nlifetime is limited by the same QCFString object as the resulting CFStringRef;\nso, we could use the string's internal buffer as a CFStringRef's one w/o any\nvisible changes (well, except of some speed-up :) )\n\nMerge-request: 2615\nReviewed-by: Denis Dzyubenko <denis.dzyubenko@nokia.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/corelib/kernel/qcore_mac.cpp"
        ],
        "github_commit_url": "https://github.com/qt/qt/commit/628fd7d141013dcda06d13fa644f44029f317a8c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CFStringRef"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy removes unnecessary copying of string data by leveraging the known lifecycle of the source string to directly use its internal buffer for the CFStringRef object.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "qtbase",
        "hash": "36aaf851ff2814e9e5c024e21b866c403137ff26",
        "author": "John Lindgren",
        "date": "2016-05-24T10:39:00+00:00",
        "message": "Optimize QIconLoader::findIconHelper()\n\nProfiling QIconLoader::findIconHelper() shows that a significant portion of CPU time is being spent in\nQDir::exists(), which creates a new QFileInfo object for the sole purpose of determining whether the passed-in\nfile path is relative or absolute, and then calls QFile::exists(). In this context, we can just as easily\ngenerate the absolute path and call QFile::exists() directly, avoiding the creation of extra QDir and QFileInfo\nobjects.\n\nChange-Id: Ib0b4568b6c16d423eb6c1b15158e44ff141e6175\nTask-number: QTBUG-46767\nReviewed-by: Gunnar Sletta <gunnar@sletta.org>",
        "modified_files_count": 1,
        "modified_files": [
            "src/gui/image/qiconloader.cpp"
        ],
        "github_commit_url": "https://github.com/qt/qtbase/commit/36aaf851ff2814e9e5c024e21b866c403137ff26",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "QIconLoader::findIconHelper"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved bypassing the creation of unnecessary QDir and QFileInfo objects by directly generating the absolute path and calling QFile::exists().",
        "is_generic_optimization": true
    },
    {
        "repository_name": "darktable",
        "hash": "85868b2c4cf39e468b960b0f7a09cd5c03f7df2b",
        "author": "Aurélien PIERRE",
        "date": "2020-10-05T12:53:34+02:00",
        "message": "fast_guided_filter.h : improve vectorization with early buffer copying\n\nReduce I/O and improve data-locality\nAdd more comments",
        "modified_files_count": 1,
        "modified_files": [
            "src/common/fast_guided_filter.h"
        ],
        "github_commit_url": "https://github.com/darktable-org/darktable/commit/85868b2c4cf39e468b960b0f7a09cd5c03f7df2b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "variance_analyse"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves improving vectorization by copying data to a buffer early to reduce I/O and enhance data locality.",
        "is_generic_optimization": true
    },
    {
        "hash": "6abe341558abec40c9c44d76e7fb4fb3978e894b",
        "author": "Jonathan Wakely",
        "date": "2022-06-14T21:07:48+01:00",
        "message": "libstdc++: Check lengths first in operator== for basic_string [PR62187]\n\nAs confirmed by LWG 2852, the calls to traits_type::compare do not need\nto be obsvervable, so we can make operator== compare string lengths\nfirst and return immediately for non-equal lengths. This avoids doing a\nslow string comparison for \"abc...xyz\" == \"abc...xy\". Previously we only\ndid this optimization for std::char_traits<char>, but we can enable it\nunconditionally thanks to LWG 2852.\n\nFor comparisons with a const char* we can call traits_type::length right\naway to do the same optimization. That strlen call can be folded away\nfor constant arguments, making it very efficient.\n\nFor the pre-C++20 operator== and operator!= overloads we can swap the\norder of the arguments to take advantage of the operator== improvements.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/62187\n\t* include/bits/basic_string.h (operator==): Always compare\n\tlengths before checking string contents.\n\t[!__cpp_lib_three_way_comparison] (operator==, operator!=):\n\tReorder arguments.",
        "modified_files_count": 1,
        "modified_files": [
            "libstdc++-v3/include/bits/basic_string.h"
        ],
        "github_commit_url": "https://github.com/Rust-GCC/gccrs/commit/6abe341558abec40c9c44d76e7fb4fb3978e894b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "_GLIBCXX_VISIBILITY"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "gccrs",
        "optimization_summary": "The optimization strategy involves comparing string lengths first in the `operator==` function for `basic_string` to avoid unnecessary slow string comparisons when lengths are unequal.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "AdaptiveCpp",
        "hash": "fc29646db1886c4300c0eaa77ca3f9bdbdeeb243",
        "author": "Joachim Meyer",
        "date": "2021-04-09T15:24:20+02:00",
        "message": "[LoopSplit] Add vectorization MD to latch terminator.\n\nThis should tell the vectorizer to vectorize the work-item loops.",
        "modified_files_count": 1,
        "modified_files": [
            "src/compiler/LoopSplitter.cpp"
        ],
        "github_commit_url": "https://github.com/AdaptiveCpp/AdaptiveCpp/commit/fc29646db1886c4300c0eaa77ca3f9bdbdeeb243",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "inlineSplitterCallTree"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves adding vectorization metadata to the latch terminator to enable vectorization of work-item loops.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "wget-lua",
        "hash": "8610b0b355b56c87b9326a71beb21934b15dd17d",
        "author": "Tim Rühsen",
        "date": "2020-02-14T11:14:02+01:00",
        "message": "* src/main.c (main): Code clean, reduce allocations",
        "modified_files_count": 1,
        "modified_files": [
            "src/main.c"
        ],
        "github_commit_url": "https://github.com/ArchiveTeam/wget-lua/commit/8610b0b355b56c87b9326a71beb21934b15dd17d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "main"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved code cleanup and reducing unnecessary memory allocations in the main function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "barebox",
        "hash": "e48141941199a1a8a05880e95fc8d2455484f135",
        "author": "Sascha Hauer",
        "date": "2025-02-24T10:09:29+01:00",
        "message": "fip: Store image data in single buffer\n\nRight now in fip_parse() we read the whole FIP image into an allocated\nbuffer, then allocate buffers for the different blobs contained in the\nFIP image and memcpy the blobs there from the full buffer. Let's\noptimize this a bit by keeping the full buffer. Instead of allocating\nseparate buffers for the blobs, just put pointers to the full buffers\ninto struct fip_image and set the buf_no_free flag indicating that they\nshould not be freed.\n\nLink: https://lore.kernel.org/r/20250217122538.3216703-1-s.hauer@pengutronix.de\nSigned-off-by: Sascha Hauer <s.hauer@pengutronix.de>",
        "modified_files_count": 1,
        "modified_files": [
            "lib/fip.c"
        ],
        "github_commit_url": "https://github.com/barebox/barebox/commit/e48141941199a1a8a05880e95fc8d2455484f135",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "fip_parse"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved avoiding redundant memory allocations and copies by reusing a single buffer and setting pointers to it instead of creating separate buffers for each blob.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "QGIS",
        "hash": "b759fc924af554dcaad7f2c2613e6123bbf7bbbb",
        "author": "Nyall Dawson",
        "date": "2018-02-19T16:56:44+11:00",
        "message": "Prepare expression for faster field calculation in attribute table dialog",
        "modified_files_count": 1,
        "modified_files": [
            "src/app/qgsattributetabledialog.cpp"
        ],
        "github_commit_url": "https://github.com/qgis/QGIS/commit/b759fc924af554dcaad7f2c2613e6123bbf7bbbb",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "QgsAttributeTableDialog::runFieldCalculation"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves preparing expressions in advance to expedite field calculations in the attribute table dialog.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "dealii",
        "hash": "723f41aa2dd617dad4529463225c400cd2075bce",
        "author": "Daniel Arndt",
        "date": "2019-01-29T11:01:49+01:00",
        "message": "performance-unnecessary-value-param",
        "modified_files_count": 1,
        "modified_files": [
            "source/base/hdf5.cc"
        ],
        "github_commit_url": "https://github.com/dealii/dealii/commit/723f41aa2dd617dad4529463225c400cd2075bce",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "HDF5Object::set_attribute"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved changing a function parameter from pass-by-value to pass-by-reference to avoid unnecessary copying of large objects.",
        "is_generic_optimization": true
    },
    {
        "hash": "1d7912955b3abc434d9d0e6aa73b2c142df9f0b8",
        "author": "Nils Wallménius",
        "date": "2007-10-05T21:03:56+00:00",
        "message": "Get rid of unnecessary memory acesses in a loop, gives slight speedup\n\ngit-svn-id: svn://svn.rockbox.org/rockbox/trunk@14996 a1c6a512-1295-4272-9138-f99709370657",
        "modified_files_count": 1,
        "modified_files": [
            "apps/plugins/midi/midiplay.c"
        ],
        "github_commit_url": "https://github.com/Rockbox/rockbox/commit/1d7912955b3abc434d9d0e6aa73b2c142df9f0b8",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "synthbuf"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rockbox",
        "optimization_summary": "The optimization strategy involves reducing unnecessary memory accesses within a loop to achieve a slight speedup.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "SkyEmu",
        "hash": "3e23c26d5a82fccf4b40bb07055566f8b54553f4",
        "author": "kylon",
        "date": "2023-09-30T23:01:35-07:00",
        "message": "tinydir: tinydir_readfile: minor optimization\n\ndon't strlen the same string multiple times",
        "modified_files_count": 1,
        "modified_files": [
            "src/tinydir.h"
        ],
        "github_commit_url": "https://github.com/skylersaleh/SkyEmu/commit/3e23c26d5a82fccf4b40bb07055566f8b54553f4",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "tinydir_open"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves avoiding redundant `strlen` calls on the same string to reduce unnecessary computation.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "gcc",
        "hash": "43b8153c26655a7a00f1584fcb4f511dc5e45fab",
        "author": "Jonathan Wakely",
        "date": "2024-08-23T13:39:35+01:00",
        "message": "libstdc++: Only use std::time_put in std::format for non-C locales\n\nWhen testing on Solaris I noticed that std/time/year/io.cc was FAILing\nbecause the year 1642 was being formatted as \"+(\" by %Ey. This turns out\nto be because we defer to std::time_put for modified conversion specs,\nand std::time_put uses std::strftime, and that's undefined for years\nbefore 1970. In particular, years before 1900 mean that the tm_year\nfield is negative, which then causes incorrect results from strftime on\nat least Solaris and AIX.\n\nI've raised the general problem with LWG, but we can fix the FAILing\ntest case (and probably improve performance slightly) by ignoring the E\nand O modifiers when the formatting locale is the \"C\" locale. The\nmodifiers have no effect for the C locale, so we can just treat %Ey as\n%y and format it directly. This doesn't fix anything when the formatting\nlocale isn't the C locale, but that case is not adequately tested, so\ndoesn't cause any FAIL right now!\n\nThe naïve fix would be simply:\n\n  if (__mod)\n    if (auto __loc = _M_locale(__ctx); __loc != locale::classic())\n      // ...\n\nHowever when the format string doesn't use the 'L' option, _M_locale\nalways returns locale::classic(). In that case, we make a copy of the\nclassic locale (which calls the non-inline copy constructor in\nthe library), then make another copy of the classic locale, then compare\nthe two. We can avoid all that by checking for the 'L' option first,\ninstead of letting _M_locale do that:\n\n  if (__mod && _M_spec._M_localized)\n    if (auto __loc = __ctx.locale(); __loc != locale::classic())\n      // ...\n\nWe could optimize this further if we had a __is_classic(__loc) function\nthat would do the __loc == locale::classic() check without making any\ncopies or non-inline calls. That would require examining the locale's\n_M_impl member, and probably require checking its name, because the\nlocale::_S_classic singleton is not exported from the library.\n\nFor _M_S the change is slightly different from the other functions,\nbecause if we skip using std::time_put for %OS then we fall through to\nthe code that potentially prints fractional seconds, but the %OS format\nonly prints whole seconds. So we need to format whole seconds directly\nwhen not using std::time_put, instead of falling through to the code\nbelow.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/chrono_io.h (__formatter_chrono::_M_C_y_Y):\n\tIgnore modifiers unless the formatting locale is not the C\n\tlocale.\n\t(__formatter_chrono::_M_d_e): Likewise.\n\t(__formatter_chrono::_M_H_I): Likewise.\n\t(__formatter_chrono::_M_m): Likewise.\n\t(__formatter_chrono::_M_M): Likewise.\n\t(__formatter_chrono::_M_S): Likewise.\n\t(__formatter_chrono::_M_u_w): Likewise.\n\t(__formatter_chrono::_M_U_V_W): Likewise.",
        "modified_files_count": 1,
        "modified_files": [
            "libstdc++-v3/include/bits/chrono_io.h"
        ],
        "github_commit_url": "https://github.com/gcc-mirror/gcc/commit/43b8153c26655a7a00f1584fcb4f511dc5e45fab",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "_GLIBCXX_VISIBILITY"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves avoiding unnecessary locale copying and comparisons by first checking if the 'L' option is used before deferring to `std::time_put` for non-C locales.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "llpc",
        "hash": "763e6a5d4837d350fcb6d74fc6289deb2e7fa389",
        "author": "rtayl",
        "date": "2019-08-01T15:41:24+08:00",
        "message": "Add !invariant.load to load descriptor sets\n\nThis adds the !invariant.load metadata to load descriptor sets\nin order for opts like cse to better optimize these loads\n\nAdd !invariant.load to load descriptor sets\n\nThis adds the !invariant.load metadata to load descriptor sets\nin order for opts like cse to better optimize these loads",
        "modified_files_count": 1,
        "modified_files": [
            "patch/llpcPatchDescriptorLoad.cpp"
        ],
        "github_commit_url": "https://github.com/GPUOpen-Drivers/llpc/commit/763e6a5d4837d350fcb6d74fc6289deb2e7fa389",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "PatchDescriptorLoad::LoadDescriptor"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves adding `!invariant.load` metadata to load descriptor sets to enable better optimization by common subexpression elimination (CSE).",
        "is_generic_optimization": true
    },
    {
        "repository_name": "restbed",
        "hash": "8e15cbcb2ad397a8f3c2e54e32dcf9311f3e61be",
        "author": "developer",
        "date": "2016-10-28T11:48:36+11:00",
        "message": "Improved speed of ServiceImpl::parse_request.",
        "modified_files_count": 1,
        "modified_files": [
            "source/corvusoft/restbed/uri.cpp"
        ],
        "github_commit_url": "https://github.com/Corvusoft/restbed/commit/8e15cbcb2ad397a8f3c2e54e32dcf9311f3e61be",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Uri::is_valid"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the speed of the `Uri::is_valid` function by reducing unnecessary computations or checks within its implementation.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "cheribsd",
        "hash": "5da6b5db2fa57e638f58570c4ca3931213815d06",
        "author": "nwhitehorn",
        "date": "2014-05-11T01:58:56+00:00",
        "message": "Make ofwfb not be painfully slow. This reduces the time for a verbose boot\non my G4 iBook by more than half. Still 10% slower than syscons, but that's\nmuch better than a factor of 2.\n\nThe slowness had to do with pathological write performance on 8-bit\nframebuffers, which are almost universally used on Open Firmware systems.\nWriting 1 byte at a time, potentially nonconsecutively, resulted in many\nextra PCI write cycles. This patch, in the common case where it's writing\none or several characters in an 8x8 font, gangs the writes together into\na set of 32-bit writes. This is a port of r143830 to vt(4).\n\nThe EFI framebuffer is also extremely slow, probably for the same reason,\nand the same patch will likely help there.",
        "modified_files_count": 1,
        "modified_files": [
            "sys/dev/vt/hw/ofwfb/ofwfb.c"
        ],
        "github_commit_url": "https://github.com/CTSRD-CHERI/cheribsd/commit/5da6b5db2fa57e638f58570c4ca3931213815d06",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ofwfb_bitbltchr"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved grouping individual byte writes into 32-bit writes to reduce the number of PCI write cycles in the framebuffer.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sssd",
        "hash": "5d9e2328ce1706acf87e09b588e134e0f2b761c8",
        "author": "ikerexxe",
        "date": "2020-07-21T13:09:45+02:00",
        "message": "responder/common/responder_packet: get packet length only once\n\nPacket length variable was read and then read again without using the\npreviously read value. So, I have refactored the code a little bit to\nread the value once and use it everywhere else. Moreover, I have\nimplemented some improvements in sss_packet_recv() function pointed by\nAlexey.\n\nCoverity errors:\n```\nError: CLANG_WARNING:\nsssd-2.3.0/src/responder/common/responder_packet.c:217:21: warning:\nAlthough the value stored to 'new_len' is used in the enclosing\nexpression, the value is never actually read from 'new_len'\n #                && (new_len = sss_packet_get_len(packet))\n #                    ^         ~~~~~~~~~~~~~~~~~~~~~~~~~~\nsssd-2.3.0/src/responder/common/responder_packet.c:217:21: note:\nAlthough the value stored to 'new_len' is used in the enclosing\nexpression, the value is never actually read from 'new_len'\n #                && (new_len = sss_packet_get_len(packet))\n #                    ^         ~~~~~~~~~~~~~~~~~~~~~~~~~~\n #  215|                       || sss_packet_get_cmd(packet) == SSS_NSS_GETLISTBYCERT)\n #  216|                   && packet->memsize < SSS_CERT_PACKET_MAX_RECV_SIZE\n #  217|->                 && (new_len = sss_packet_get_len(packet))\n #  218|                                      < SSS_CERT_PACKET_MAX_RECV_SIZE) {\n #  219|               new_len = sss_packet_get_len(packet);\n```\n\nReviewed-by: Alexey Tikhonov <atikhono@redhat.com>\nReviewed-by: Pavel Březina <pbrezina@redhat.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/responder/common/responder_packet.c"
        ],
        "github_commit_url": "https://github.com/SSSD/sssd/commit/5d9e2328ce1706acf87e09b588e134e0f2b761c8",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "sss_packet_recv"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reading the packet length once and reusing the value instead of repeatedly calling the function to retrieve it.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sycl",
        "hash": "67d1a71aa4d55c2f82cc9b70f5afc2016e3daf69",
        "author": "Jakob Stoklund Olesen",
        "date": "2010-11-28T06:14:33+00:00",
        "message": "Speed up simple insertions into an unbranched tree by not creating an iterator.\n\nllvm-svn: 120232",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/include/llvm/ADT/IntervalMap.h"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/67d1a71aa4d55c2f82cc9b70f5afc2016e3daf69",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "insert"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization speeds up simple insertions into an unbranched tree by avoiding the creation of an iterator, reducing overhead.",
        "is_generic_optimization": true
    },
    {
        "hash": "71212e0c81cedda0b918c095bd79b9eb98affcbf",
        "author": "Robin Gareus",
        "date": "2020-09-29T16:46:29+02:00",
        "message": "Remove debug/profile message in optimized builds",
        "modified_files_count": 1,
        "modified_files": [
            "libs/ardour/session_transport.cc"
        ],
        "github_commit_url": "https://github.com/Ardour/ardour/commit/71212e0c81cedda0b918c095bd79b9eb98affcbf",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Session::non_realtime_locate"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "ardour",
        "optimization_summary": "The optimization strategy involved removing debug/profile messages in optimized builds to reduce overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "93c27871936c797380aef9d47a969c088edb0bff",
        "author": "Craig Topper",
        "date": "2019-08-19T18:02:24+00:00",
        "message": "[CGP] Remove ModifiedDT from the makeBitReverse loop\n\nI don't think anything in this loop modifies the control flow and we don't restart any iteration after setting the flag.\n\nThis code was added in http://reviews.llvm.org/D16893 but looking at the test case added there the code that caused the dominator tree to change was merging blocks with their predecessor not the bitreverse optimization.\n\nDifferential Revision: https://reviews.llvm.org/D66366\n\nllvm-svn: 369283",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/CodeGen/CodeGenPrepare.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/93c27871936c797380aef9d47a969c088edb0bff",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing a redundant flag check (`ModifiedDT`) from a loop to eliminate unnecessary overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "3DWorld",
        "hash": "1a0ad33b16946d4f86f07fb0c64b88050e7dbdd1",
        "author": "Frank E. Gennari",
        "date": "2011-09-30T07:46:36+00:00",
        "message": "Set the global locale to C in the object file reader to improve load times slightly. -FG",
        "modified_files_count": 1,
        "modified_files": [
            "src/object_file_reader.cpp"
        ],
        "github_commit_url": "https://github.com/fegennari/3DWorld/commit/1a0ad33b16946d4f86f07fb0c64b88050e7dbdd1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "read_object_file"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved setting the global locale to C in the object file reader to improve load times by reducing locale-related overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "mongo",
        "hash": "6b67db1f230512d757d5ffa0e09d3d8283354580",
        "author": "Eliot Horowitz",
        "date": "2010-02-16T10:18:26-05:00",
        "message": "optimize findOne memory usage",
        "modified_files_count": 1,
        "modified_files": [
            "db/query.cpp"
        ],
        "github_commit_url": "https://github.com/mongodb/mongo/commit/6b67db1f230512d757d5ffa0e09d3d8283354580",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "runQuery"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization reduces memory usage in the `findOne` query by minimizing unnecessary allocations and improving data handling efficiency.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "IBAMR",
        "hash": "0798becabfaf56761e7a5fbd888a90247d29363b",
        "author": "David Wells",
        "date": "2019-03-22T17:07:39-04:00",
        "message": "Add some other small optimizations.\n\nThis avoids two virtual function calls.",
        "modified_files_count": 1,
        "modified_files": [
            "ibtk/src/lagrangian/FEDataManager.cpp"
        ],
        "github_commit_url": "https://github.com/IBAMR/IBAMR/commit/0798becabfaf56761e7a5fbd888a90247d29363b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "getQuadratureKey"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids two virtual function calls to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ppsspp",
        "hash": "fc3688d273b2d9ea62070f6e21d80b20c0014f72",
        "author": "Unknown W. Brackets",
        "date": "2021-12-31T08:10:04-08:00",
        "message": "samplerjit: Small AVX optimization to modulate.\n\nOnly gives about 0.5% but it's still something.",
        "modified_files_count": 1,
        "modified_files": [
            "GPU/Software/SamplerX86.cpp"
        ],
        "github_commit_url": "https://github.com/hrydgard/ppsspp/commit/fc3688d273b2d9ea62070f6e21d80b20c0014f72",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SamplerJitCache::Jit_ApplyTextureFunc"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved small AVX (Advanced Vector Extensions) improvements to the texture modulation function to achieve a minor performance gain.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ClickHouse",
        "hash": "2ae9e2224800777de8f893e733ab7df6e3986674",
        "author": "jinjunzh",
        "date": "2022-05-16T16:22:13-04:00",
        "message": "Improve CompressedWriteBuffer to avoid unnecessary memcpy",
        "modified_files_count": 1,
        "modified_files": [
            "src/Compression/CompressedWriteBuffer.cpp"
        ],
        "github_commit_url": "https://github.com/ClickHouse/ClickHouse/commit/2ae9e2224800777de8f893e733ab7df6e3986674",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CompressedWriteBuffer::nextImpl"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids unnecessary memory copying in the CompressedWriteBuffer by directly writing data to the destination buffer instead of using an intermediate buffer.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "asterisk",
        "hash": "3da361ee77ac5b3daf90f7c91765e85eccd6a18a",
        "author": "Kevin P. Fleming",
        "date": "2005-04-01T21:31:12+00:00",
        "message": "optimize file reading in pbx_spool (bug #3927)\n\n\ngit-svn-id: https://origsvn.digium.com/svn/asterisk/trunk@5351 65c4cc65-6c06-0410-ace0-fbb531ad65f3",
        "modified_files_count": 1,
        "modified_files": [
            "pbx/pbx_spool.c"
        ],
        "github_commit_url": "https://github.com/asterisk/asterisk/commit/3da361ee77ac5b3daf90f7c91765e85eccd6a18a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "apply_outgoing"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing redundant file reading operations in the `apply_outgoing` function to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "OpenMS",
        "hash": "2ee639f7e30934c577c14b6b3535d4300ce39ac7",
        "author": "Chris Bielow",
        "date": "2018-09-04T16:06:16+02:00",
        "message": "optimize loop end condition",
        "modified_files_count": 1,
        "modified_files": [
            "src/openms/include/OpenMS/FORMAT/DATAACCESS/SwathFileConsumer.h"
        ],
        "github_commit_url": "https://github.com/OpenMS/OpenMS/commit/2ee639f7e30934c577c14b6b3535d4300ce39ac7",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved modifying the loop end condition to improve performance by reducing unnecessary iterations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "firebird",
        "hash": "afc3d38954d1f8b43a42b11a6c4b74b567b288ee",
        "author": "arnobrinkman",
        "date": "2003-02-15T01:35:19+00:00",
        "message": "More optimizer enhancements.\nWhen an equal-node and other nodes (geq, leq, between...) are available for an index retrieval, then use the equal node always instead of the others.",
        "modified_files_count": 1,
        "modified_files": [
            "src/jrd/opt.cpp"
        ],
        "github_commit_url": "https://github.com/FirebirdSQL/firebird/commit/afc3d38954d1f8b43a42b11a6c4b74b567b288ee",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "match_index"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy prioritizes using equal-node over other nodes (geq, leq, between) for index retrieval to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Server",
        "hash": "1bf24273d286c7a9d6e158d639d2d624e059d15e",
        "author": "Alex King",
        "date": "2023-02-12T22:16:39-06:00",
        "message": "[Quest API] (Performance) Check event exists before export and execute EVENT_TICK (#2919)\n\n# Notes\r\n- Optionally parse this event instead of always doing so.",
        "modified_files_count": 1,
        "modified_files": [
            "zone/npc.cpp"
        ],
        "github_commit_url": "https://github.com/EQEmu/Server/commit/1bf24273d286c7a9d6e158d639d2d624e059d15e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "NPC::Process"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves checking if an event exists before exporting and executing it, reducing unnecessary processing.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "gstreamer-vaapi",
        "hash": "7f61ad79389fcd28c82f068701c3fff18bc3e4b6",
        "author": "Víctor Manuel Jáquez Leal",
        "date": "2020-02-02T18:04:35+01:00",
        "message": "vaapivideobufferpool: dmabuf implies allocator\n\nSome code can be optimized since only if the dmabuf allocator is set,\nthe internal flag of dmabuf is TRUE, thus there's no need to evaluate\nthe allocator address.",
        "modified_files_count": 1,
        "modified_files": [
            "gst/vaapi/gstvaapivideobufferpool.c"
        ],
        "github_commit_url": "https://github.com/GStreamer/gstreamer-vaapi/commit/7f61ad79389fcd28c82f068701c3fff18bc3e4b6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "gst_vaapi_video_buffer_pool_set_config"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy removes redundant checks by leveraging the implication that setting the dmabuf allocator ensures the internal dmabuf flag is TRUE, thus eliminating the need to evaluate the allocator address.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "lix",
        "hash": "3efea3d28ad522f947bacd30b74bc388c0dffa5e",
        "author": "Sidharth Kshatriya",
        "date": "2022-06-09T16:25:26+05:30",
        "message": "nix-store: small std::move() optimization",
        "modified_files_count": 1,
        "modified_files": [
            "src/nix-store/nix-store.cc"
        ],
        "github_commit_url": "https://github.com/lix-project/lix/commit/3efea3d28ad522f947bacd30b74bc388c0dffa5e",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved using std::move() to avoid unnecessary copying of objects, improving performance by enabling move semantics.",
        "is_generic_optimization": true
    },
    {
        "hash": "0366e02b3e6b3304b4ea95d06c9ed7683ae5c7ec",
        "author": "Ruslan Ermilov",
        "date": "2013-05-21T12:54:27+04:00",
        "message": "Upstream: slightly optimized ngx_http_upstream_process_header().\n\n--HG--\nbranch : nginx",
        "modified_files_count": 1,
        "modified_files": [
            "src/http/ngx_http_upstream.c"
        ],
        "github_commit_url": "https://github.com/webserver-llc/angie/commit/0366e02b3e6b3304b4ea95d06c9ed7683ae5c7ec",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ngx_http_upstream_process_header"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "angie",
        "optimization_summary": "The optimization strategy involved slightly refining the header processing logic in the `ngx_http_upstream_process_header` function to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "welle.io",
        "hash": "610149af42eecbe95413a80e3be5627914e4830b",
        "author": "Adrien Michel",
        "date": "2024-12-01T03:15:06+01:00",
        "message": "phase_sync : find peak and average at the same time (lower complexity)",
        "modified_files_count": 1,
        "modified_files": [
            "src/backend/phasereference.cpp"
        ],
        "github_commit_url": "https://github.com/AlbrechtL/welle.io/commit/610149af42eecbe95413a80e3be5627914e4830b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "PhaseReference::findIndex"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves combining the calculations for finding the peak and average values in a single pass to reduce computational complexity.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "swipl-devel",
        "hash": "ca50fedd06d93e3942609d947700d559561e07da",
        "author": "Jan Wielemaker",
        "date": "2011-03-12T15:36:20+01:00",
        "message": "ENHANCED: Move atom-hash computation outside locked area.",
        "modified_files_count": 1,
        "modified_files": [
            "src/pl-atom.c"
        ],
        "github_commit_url": "https://github.com/SWI-Prolog/swipl-devel/commit/ca50fedd06d93e3942609d947700d559561e07da",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "PL_handle_signals"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves moving the computation of atom-hash outside a locked area to reduce contention and improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "MoarVM",
        "hash": "29f571264da1e88ec3eb0612643b63accb966be1",
        "author": "Jonathan Worthington",
        "date": "2017-07-21T18:06:17+02:00",
        "message": "Kick out osrpoint instructions in optimize.",
        "modified_files_count": 1,
        "modified_files": [
            "src/spesh/optimize.c"
        ],
        "github_commit_url": "https://github.com/MoarVM/MoarVM/commit/29f571264da1e88ec3eb0612643b63accb966be1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "optimize_bb"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves removing osrpoint instructions during the optimization process to streamline execution.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "gnome-builder",
        "hash": "db3a7dc72b56c2fb1dc18d1954c5861333e18dd9",
        "author": "Christian Hergert",
        "date": "2016-12-30T19:29:10-08:00",
        "message": "build-tools: avoid va_args for property sets\n\nTo avoid copying the string into a new GValue, we just create the gvalue\nup front and allow it to own the generated string. This allows us to\nalso avoid the va_list g_object_set() calls for a very slight performance\nimprovement.",
        "modified_files_count": 1,
        "modified_files": [
            "plugins/build-tools/gbp-build-panel.c"
        ],
        "github_commit_url": "https://github.com/GNOME/gnome-builder/commit/db3a7dc72b56c2fb1dc18d1954c5861333e18dd9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "gbp_build_panel_text_func"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids copying strings by creating a GValue upfront and letting it own the generated string, eliminating the need for va_list g_object_set() calls.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "overwitch",
        "hash": "ee05b0a83df7464448f52aa2b2b3f3ae90c3eb47",
        "author": "Jan Lentfer",
        "date": "2021-11-12T22:43:19+01:00",
        "message": "Optimize two loops in jclient_process_cb\n\n    With grpof I found that jclient_process_cb\n    was taking most time by far (which maybe expected).\n    Here I am merging two seperate loops into one, which\n    according to gprof reduced cpu time quite a bit.",
        "modified_files_count": 1,
        "modified_files": [
            "src/jclient.c"
        ],
        "github_commit_url": "https://github.com/dagargo/overwitch/commit/ee05b0a83df7464448f52aa2b2b3f3ae90c3eb47",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "jclient_process_cb"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved merging two separate loops into one to reduce CPU time.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "musique",
        "hash": "830a37bec5622aec9fd954e537c45594e1b66770",
        "author": "Flavio Tordini",
        "date": "2018-11-22T18:23:09+01:00",
        "message": "Minor string optimization",
        "modified_files_count": 1,
        "modified_files": [
            "src/mainwindow.cpp"
        ],
        "github_commit_url": "https://github.com/flaviotordini/musique/commit/830a37bec5622aec9fd954e537c45594e1b66770",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "MainWindow::createActions"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved minor string handling improvements to reduce overhead in the MainWindow::createActions function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "QGIS",
        "hash": "5765cabb951bc1f82da2b883635cc9b1c74e6d44",
        "author": "i-s-o",
        "date": "2020-01-10T12:49:58+13:00",
        "message": "Speed up reading the field list from clipboard",
        "modified_files_count": 1,
        "modified_files": [
            "src/app/qgsclipboard.cpp"
        ],
        "github_commit_url": "https://github.com/qgis/QGIS/commit/5765cabb951bc1f82da2b883635cc9b1c74e6d44",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "QgsClipboard::retrieveFields"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy likely involved improving the efficiency of reading the field list from the clipboard by reducing unnecessary operations or streamlining data access.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "FastDoom",
        "hash": "ddc8a443125b3006d75b3bc424f9793952d3d7eb",
        "author": "viti95",
        "date": "2022-06-14T11:16:26+02:00",
        "message": "Small optimization for P_CrossSubsector",
        "modified_files_count": 1,
        "modified_files": [
            "FASTDOOM/p_sight.c"
        ],
        "github_commit_url": "https://github.com/viti95/FastDoom/commit/ddc8a443125b3006d75b3bc424f9793952d3d7eb",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "P_CrossSubsector"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing the number of function calls by inlining a frequently called function within `P_CrossSubsector`.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "plasma-desktop",
        "hash": "7e758c5ab5ac88863299e8a4643fba68115f5fd7",
        "author": "Eike Hein",
        "date": "2014-05-02T14:01:29+02:00",
        "message": "More efficient runner matches model updates.",
        "modified_files_count": 1,
        "modified_files": [
            "applets/kicker/plugin/runnermatchesmodel.cpp"
        ],
        "github_commit_url": "https://github.com/KDE/plasma-desktop/commit/7e758c5ab5ac88863299e8a4643fba68115f5fd7",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "RunnerMatchesModel::setMatches"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the efficiency of model updates by reducing unnecessary operations in the `RunnerMatchesModel::setMatches` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "urho3d",
        "hash": "ecdfec3e8049325a9da1966cbb8ab9cbd39243c6",
        "author": "Lasse Öörni",
        "date": "2012-04-28T17:50:30+00:00",
        "message": "Small optimization to drawable collecting.",
        "modified_files_count": 1,
        "modified_files": [
            "Engine/Graphics/View.cpp"
        ],
        "github_commit_url": "https://github.com/urho3d/urho3d/commit/ecdfec3e8049325a9da1966cbb8ab9cbd39243c6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "View::GetDrawables"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the efficiency of drawable collection by reducing redundant checks and streamlining the iteration process.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "bibletime",
        "hash": "69d648c556b65d1e4600837274997162f7245a2c",
        "author": "Jaak Ristioja",
        "date": "2022-10-30T23:45:51+02:00",
        "message": "frontend, BtModelViewReadDisplay: Minor QString-related optimizations",
        "modified_files_count": 1,
        "modified_files": [
            "src/frontend/display/btmodelviewreaddisplay.cpp"
        ],
        "github_commit_url": "https://github.com/bibletime/bibletime/commit/69d648c556b65d1e4600837274997162f7245a2c",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The commit optimizes QString-related operations to improve performance by reducing unnecessary string manipulations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "tensorflow-directml",
        "hash": "707b0c9cc4d5335d04fce4addb8ed2f158cbd1c0",
        "author": "A. Unique TensorFlower",
        "date": "2018-05-01T15:06:01-07:00",
        "message": "Minor JNI performance improvement.\n\nPiperOrigin-RevId: 195002949",
        "modified_files_count": 1,
        "modified_files": [
            "tensorflow/contrib/lite/java/src/main/native/tensor_jni.cc"
        ],
        "github_commit_url": "https://github.com/microsoft/tensorflow-directml/commit/707b0c9cc4d5335d04fce4addb8ed2f158cbd1c0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Java_org_tensorflow_lite_Tensor_shape"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the performance of JNI (Java Native Interface) calls by reducing overhead in the `Java_org_tensorflow_lite_Tensor_shape` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "SLiM",
        "hash": "b8747538a529a5e51638181eedb9f3df9cbdfdca",
        "author": "Ben Haller",
        "date": "2019-02-16T21:48:33-05:00",
        "message": "speed up single-codon case",
        "modified_files_count": 1,
        "modified_files": [
            "core/slim_global.cpp"
        ],
        "github_commit_url": "https://github.com/MesserLab/SLiM/commit/b8747538a529a5e51638181eedb9f3df9cbdfdca",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "NucleotideArray::NucleotidesAsCodonVector"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reducing redundant calculations and improving loop efficiency in the single-codon case by simplifying the logic and avoiding unnecessary operations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "cheribsd",
        "hash": "012f478c8162413e5e8320ff346dfd57a40ca9d1",
        "author": "jkim",
        "date": "2010-08-07T03:45:45+00:00",
        "message": "Optimize interrupt vector lookup.  There is no need to check the page table.",
        "modified_files_count": 1,
        "modified_files": [
            "sys/compat/x86bios/x86bios.c"
        ],
        "github_commit_url": "https://github.com/CTSRD-CHERI/cheribsd/commit/012f478c8162413e5e8320ff346dfd57a40ca9d1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "x86bios_get_intr"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy removed unnecessary page table checks during interrupt vector lookup to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "mame2003-plus-libretro",
        "hash": "bdf262379fb8b01ae42594b08466a7fe738031b1",
        "author": "mahoneyt944",
        "date": "2024-07-04T17:03:09-04:00",
        "message": "Test multi32 speedup",
        "modified_files_count": 1,
        "modified_files": [
            "src/drivers/segas32.c"
        ],
        "github_commit_url": "https://github.com/libretro/mame2003-plus-libretro/commit/bdf262379fb8b01ae42594b08466a7fe738031b1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "WRITE16_HANDLER"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing redundant memory writes by modifying the WRITE16_HANDLER function to handle multiple 32-bit operations more efficiently.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "cycles",
        "hash": "b5f81608ccf5c47793949a97f5d460a9e61116b2",
        "author": "Stephen Luce",
        "date": "2023-07-05T18:18:39+02:00",
        "message": "Remove redundant bounds checks in cpu image sampling\n\nFor repeat / extend / mirror mode, both wrap and read_clip functions did\nthe bounds check. Removing it improves performance between 0.5% and 1.5%\nin the classroom scene in one test. Clip mode is unchanged.\n\nPull Request: https://projects.blender.org/blender/blender/pulls/109304",
        "modified_files_count": 1,
        "modified_files": [
            "src/kernel/device/cpu/image.h"
        ],
        "github_commit_url": "https://github.com/blender/cycles/commit/b5f81608ccf5c47793949a97f5d460a9e61116b2",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "interp_linear"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing redundant bounds checks in CPU image sampling for repeat/extend/mirror modes to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "wesnoth",
        "hash": "9aa67226223b0c5239c910bc5fa3aa061c12784d",
        "author": "gfgtdf",
        "date": "2015-12-07T15:43:56+01:00",
        "message": "improve performance of wesnoth.delay(0)\n\nIn this case we don't need to call SDL_GetTicks() or\ngame_display_->delay(10)",
        "modified_files_count": 1,
        "modified_files": [
            "src/scripting/game_lua_kernel.cpp"
        ],
        "github_commit_url": "https://github.com/wesnoth/wesnoth/commit/9aa67226223b0c5239c910bc5fa3aa061c12784d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "game_lua_kernel::intf_delay"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves skipping unnecessary calls to `SDL_GetTicks()` and `game_display_->delay(10)` when `wesnoth.delay(0)` is invoked, as these calls are redundant for a delay of 0.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "openbor",
        "hash": "dea1551e4d117c6d5f7b8c9529de66e557b1950e",
        "author": "utunnels",
        "date": "2011-09-05T01:12:04+00:00",
        "message": "Optimize rgb gif copying speed a bit.",
        "modified_files_count": 1,
        "modified_files": [
            "engine/openbor.c"
        ],
        "github_commit_url": "https://github.com/DCurrent/openbor/commit/dea1551e4d117c6d5f7b8c9529de66e557b1950e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "update_backbuffer"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the speed of copying RGB GIF data by reducing unnecessary operations or leveraging more efficient memory handling techniques.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "tensorflow-directml",
        "hash": "903e7d93bc0815e4c96ec6d51127bac26e49329b",
        "author": "A. Unique TensorFlower",
        "date": "2018-06-28T21:37:43-07:00",
        "message": "Improve the performance of ParseShapeStringInternal\n\nThe previous implementation recompiled the shape regex at every call\nwhat is an expensive opertaion. The new implementation improves the hlo\ntext parsing time for very large models for up to 9x by eliminating this\noverhead.\n\nPiperOrigin-RevId: 202454354",
        "modified_files_count": 1,
        "modified_files": [
            "tensorflow/compiler/xla/shape_util.cc"
        ],
        "github_commit_url": "https://github.com/microsoft/tensorflow-directml/commit/903e7d93bc0815e4c96ec6d51127bac26e49329b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ParseShapeStringInternal"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved eliminating the repeated recompilation of a regex pattern by reusing a precompiled version, significantly reducing parsing time.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "llvm-leg",
        "hash": "7cb4fa20b5534decf527a6bfcc74bd79ea11cbb1",
        "author": "Cameron Zwarich",
        "date": "2011-01-03T06:33:01+00:00",
        "message": "Switch a worklist in CodeGenPrepare to SmallVector and increase the inline\ncapacity on the Visited SmallPtrSet. On 403.gcc, this is about a 4.5% speedup of\nCodeGenPrepare time (which itself is 10% of time spent in the backend).\n\nThis is progress towards PR8889.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@122741 91177308-0d34-0410-b5e6-96231b3b80d8",
        "modified_files_count": 1,
        "modified_files": [
            "lib/Transforms/Scalar/CodeGenPrepare.cpp"
        ],
        "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/7cb4fa20b5534decf527a6bfcc74bd79ea11cbb1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CodeGenPrepare::OptimizeMemoryInst"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved switching a worklist to SmallVector and increasing the inline capacity of the Visited SmallPtrSet to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "xenia",
        "hash": "bb15d2f62ff6d5a9468f1a85d9640d9758263e94",
        "author": "Ben Vanik",
        "date": "2015-01-02T17:44:15-08:00",
        "message": "Faster profiler drawing.",
        "modified_files_count": 1,
        "modified_files": [
            "src/xenia/gpu/gl4/gl4_profiler_display.cc"
        ],
        "github_commit_url": "https://github.com/xenia-project/xenia/commit/bb15d2f62ff6d5a9468f1a85d9640d9758263e94",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "GL4ProfilerDisplay::SetupFont"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing the overhead in font setup by caching and reusing previously loaded font data instead of reloading it each time.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "scummvm",
        "hash": "f1bc2b187c72d7fa165e48b0120a41f7caf4272f",
        "author": "elasota",
        "date": "2022-12-06T23:43:27+01:00",
        "message": "COMMON: Optimize some array ops by hoisting storage pointer to a local so the compiler doesn't have to reload it every iteration.",
        "modified_files_count": 1,
        "modified_files": [
            "common/array.h"
        ],
        "github_commit_url": "https://github.com/scummvm/scummvm/commit/f1bc2b187c72d7fa165e48b0120a41f7caf4272f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "time"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved hoisting the storage pointer of an array to a local variable to prevent the compiler from reloading it in every iteration of a loop.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "intel-graphics-compiler",
        "hash": "6bc624b78369d4e8841f7b6d9effbc7e7831acb4",
        "author": "Mariusz Merecki",
        "date": "2022-06-02T14:39:42+02:00",
        "message": "Enable reassociate `mul` `add` optimization based on driver info\n\nThe `reassociateMulAdd()` optimization helps produce more `mad` instructions and\nmust be enbled when `mad` pattern match is enabled.",
        "modified_files_count": 1,
        "modified_files": [
            "IGC/Compiler/CustomUnsafeOptPass.cpp"
        ],
        "github_commit_url": "https://github.com/intel/intel-graphics-compiler/commit/6bc624b78369d4e8841f7b6d9effbc7e7831acb4",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reassociating multiplication and addition operations to produce more fused multiply-add (mad) instructions when enabled by driver information.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "mpv",
        "hash": "66c47599923f2919756423d47f32f2186d15cef9",
        "author": "reimar",
        "date": "2007-11-18T17:44:11+00:00",
        "message": "Use \"long\" instead of \"int\" for innermost loop variable.\nAbout 12% faster on x86_64\n\n\ngit-svn-id: svn://svn.mplayerhq.hu/mplayer/trunk@25101 b3059339-0415-0410-9bf9-f77b7e298cf2",
        "modified_files_count": 1,
        "modified_files": [
            "libaf/af_scaletempo.c"
        ],
        "github_commit_url": "https://github.com/mpv-player/mpv/commit/66c47599923f2919756423d47f32f2186d15cef9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "best_overlap_offset_s16"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves changing the data type of the innermost loop variable from \"int\" to \"long\" to improve performance on x86_64 architecture.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "musl",
        "hash": "1bdd5c8b9868ebc092074e078604acb80546e43f",
        "author": "Rich Felker",
        "date": "2012-04-11T14:11:47-04:00",
        "message": "optimize floatscan: avoid excessive upscaling\n\nupscaling by even one step too much creates 3-29 extra iterations for\nthe next loop. this is still suboptimal since it always goes by 2^29\nrather than using a smaller upscale factor when nearing the target,\nbut performance on common, small-magnitude, few-digit values has\nalready more than doubled with this change.\n\nmore optimizations on the way...",
        "modified_files_count": 1,
        "modified_files": [
            "src/internal/floatscan.c"
        ],
        "github_commit_url": "https://github.com/kraj/musl/commit/1bdd5c8b9868ebc092074e078604acb80546e43f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "decfloat"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used involves reducing excessive upscaling in the floatscan function to minimize extra iterations in subsequent loops.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "hhvm",
        "hash": "ac158f6d7a4a212201f5eb88c335e6ee9ad0ddfa",
        "author": "Katy Voor",
        "date": "2024-08-01T00:40:13-07:00",
        "message": "Optimize NewObjD\n\nSummary: Speculate Class* in NewObjD\n\nReviewed By: ricklavoie\n\nDifferential Revision: D59701921\n\nfbshipit-source-id: 3b3d8d9a09ef9c0fcc368a3a29f98adfa68d1025",
        "modified_files_count": 1,
        "modified_files": [
            "hphp/runtime/vm/jit/irgen-call.cpp"
        ],
        "github_commit_url": "https://github.com/facebook/hhvm/commit/ac158f6d7a4a212201f5eb88c335e6ee9ad0ddfa",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "emitNewObjD"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves speculating the `Class*` in the `NewObjD` function to improve performance by reducing runtime checks.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sycl",
        "hash": "2aed25cfc977df4cb795635ee4bfa574485bbf3b",
        "author": "Chris Lattner",
        "date": "2007-02-10T07:11:51+00:00",
        "message": "make the datastructure used in BytecodeWriter::outputValueSymbolTable\n*slightly* less abusive of memory.  This speeds up the bcwriter from\n1.83s to 1.32s (39% faster) on 447.dealII.\n\nllvm-svn: 34140",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/Bytecode/Writer/Writer.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/2aed25cfc977df4cb795635ee4bfa574485bbf3b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "BytecodeWriter::outputValueSymbolTable"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing memory usage in the datastructure used in BytecodeWriter::outputValueSymbolTable, resulting in a 39% speedup.",
        "is_generic_optimization": true
    },
    {
        "hash": "0ed7107373b48b67d05a6647248902a200236734",
        "author": "Nithin Dabilpuram",
        "date": "2022-10-18T12:59:55+02:00",
        "message": "net/cnxk: remove duplicate mempool debug checks\n\nRemove duplicate mempool debug checks for mbufs received.\n\nFixes: 592642c494b1 (\"net/cnxk: align prefetches to CN10K cache model\")\nCc: stable@dpdk.org\n\nSigned-off-by: Nithin Dabilpuram <ndabilpuram@marvell.com>",
        "modified_files_count": 1,
        "modified_files": [
            "drivers/net/cnxk/cn10k_rx.h"
        ],
        "github_commit_url": "https://github.com/DPDK/dpdk/commit/0ed7107373b48b67d05a6647248902a200236734",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "RTE_MEMPOOL_CHECK_COOKIES"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "dpdk",
        "optimization_summary": "The optimization strategy involved removing duplicate mempool debug checks for mbufs received to reduce redundant operations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ImageMagick6",
        "hash": "1315776a6bc3999df21212cd314eb8c175aec4cf",
        "author": "dirk",
        "date": "2014-12-22T23:49:42+00:00",
        "message": "Improved performance of ReadProfile.",
        "modified_files_count": 1,
        "modified_files": [
            "coders/tiff.c"
        ],
        "github_commit_url": "https://github.com/ImageMagick/ImageMagick6/commit/1315776a6bc3999df21212cd314eb8c175aec4cf",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ReadProfile"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing the overhead of reading a TIFF profile by minimizing unnecessary memory allocations and data copying.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "freeorion",
        "hash": "2c8a0dbaf5d33c1d5b89b54839910a43cbae2180",
        "author": "geoffthemedio",
        "date": "2022-12-02T23:57:35+01:00",
        "message": "avoid copy",
        "modified_files_count": 1,
        "modified_files": [
            "client/human/GGHumanClientApp.cpp"
        ],
        "github_commit_url": "https://github.com/freeorion/freeorion/commit/2c8a0dbaf5d33c1d5b89b54839910a43cbae2180",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used was to avoid unnecessary copying of data by modifying the code to use references or direct access instead of creating copies.",
        "is_generic_optimization": true
    },
    {
        "hash": "914ebccd2d8fa439e01fe93b5229534b9e179a69",
        "author": "Takuya Yoshikawa",
        "date": "2010-08-01T10:35:27+03:00",
        "message": "KVM: x86: avoid unnecessary bitmap allocation when memslot is clean\n\nAlthough we always allocate a new dirty bitmap in x86's get_dirty_log(),\nit is only used as a zero-source of copy_to_user() and freed right after\nthat when memslot is clean. This patch uses clear_user() instead of doing\nthis unnecessary zero-source allocation.\n\nPerformance improvement: as we can expect easily, the time needed to\nallocate a bitmap is completely reduced. In my test, the improved ioctl\nwas about 4 to 10 times faster than the original one for clean slots.\nFurthermore, reducing memory allocations and copies will produce good\neffects to caches too.\n\nSigned-off-by: Takuya Yoshikawa <yoshikawa.takuya@oss.ntt.co.jp>\nSigned-off-by: Avi Kivity <avi@redhat.com>",
        "modified_files_count": 1,
        "modified_files": [
            "arch/x86/kvm/x86.c"
        ],
        "github_commit_url": "https://github.com/OnePlusOSS/android_kernel_oneplus_msm8998/commit/914ebccd2d8fa439e01fe93b5229534b9e179a69",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Get"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "android_kernel_oneplus_msm8998",
        "optimization_summary": "The optimization strategy replaces an unnecessary bitmap allocation and copy operation with a direct clear_user() call when the memslot is clean.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "libarchive",
        "hash": "6302a9fba0778e63379a13946ccdfe0d257ed2d1",
        "author": "Tim Kientzle",
        "date": "2009-02-06T02:09:45-05:00",
        "message": "Very minor optimization:  If we already have enough data, we don't\nneed to keep calling down into archive_read_filter_ahead() to\nextend the read-ahead.\n\nSVN-Revision: 561",
        "modified_files_count": 1,
        "modified_files": [
            "libarchive/archive_read_support_compression_gzip.c"
        ],
        "github_commit_url": "https://github.com/libarchive/libarchive/commit/6302a9fba0778e63379a13946ccdfe0d257ed2d1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "peek_at_header"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves avoiding unnecessary calls to `archive_read_filter_ahead()` when sufficient data is already available.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "hhvm",
        "hash": "7f985575b0900e4efdcb06bd8e504c5ac10dfc2e",
        "author": "Fred Emmott",
        "date": "2015-05-18T15:34:50-07:00",
        "message": "Optimize str_replace(string, string, string)\n\nSummary: Benchmark is /very/ noisy, but this looks like 1-5% on Mediawiki. Based on tbgs should be a win for www too.\n\nReviewed By: @jwatzman\n\nDifferential Revision: D2077728",
        "modified_files_count": 1,
        "modified_files": [
            "hphp/runtime/ext/string/ext_string.cpp"
        ],
        "github_commit_url": "https://github.com/facebook/hhvm/commit/7f985575b0900e4efdcb06bd8e504c5ac10dfc2e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "HHVM_FUNCTION"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the performance of the `str_replace(string, string, string)` function, likely by reducing overhead or streamlining string manipulation operations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "pinba2",
        "hash": "77d4eb75f9adf6f49fa413eb9b097ec0f407fc06",
        "author": "Anton Povarov",
        "date": "2017-05-26T16:37:06+03:00",
        "message": "minor stats optimization",
        "modified_files_count": 1,
        "modified_files": [
            "src/report_by_timer.cpp"
        ],
        "github_commit_url": "https://github.com/badoo/pinba2/commit/77d4eb75f9adf6f49fa413eb9b097ec0f407fc06",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "merge_ticks_into_data"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing the overhead of copying data by using reference-based iteration instead of value-based iteration in the `merge_ticks_into_data` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "aseprite",
        "hash": "0d169fed751b1f69e0fd86accd0dd0461d6be9de",
        "author": "David Capello",
        "date": "2016-11-22T13:33:01-03:00",
        "message": "Improve ui::drawTextBox() performance",
        "modified_files_count": 1,
        "modified_files": [
            "src/ui/theme.cpp"
        ],
        "github_commit_url": "https://github.com/aseprite/aseprite/commit/0d169fed751b1f69e0fd86accd0dd0461d6be9de",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "drawTextBox"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing redundant calculations and minimizing unnecessary function calls within the `drawTextBox` function to improve rendering performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "bind9",
        "hash": "3fe45d9897459da9c78263ae709e5c611e622243",
        "author": "Andreas Gustafsson",
        "date": "2000-06-09T22:01:55+00:00",
        "message": "do the length checks of 1.90 in a more efficient way; take\nadvantage of the new buffer API macros",
        "modified_files_count": 1,
        "modified_files": [
            "lib/dns/name.c"
        ],
        "github_commit_url": "https://github.com/isc-projects/bind9/commit/3fe45d9897459da9c78263ae709e5c611e622243",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "dns_name_fromwire"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves using buffer API macros to perform length checks more efficiently in the `dns_name_fromwire` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "HiGHS",
        "hash": "10101ad997117b63a4c854c409f9d645324cfc0b",
        "author": "Stefan Vigerske",
        "date": "2022-07-20T18:49:07+02:00",
        "message": "speed up getvarbyname() a bit\n\n- no need to copy argument\n- lookup in variables array only once",
        "modified_files_count": 1,
        "modified_files": [
            "extern/filereaderlp/builder.hpp"
        ],
        "github_commit_url": "https://github.com/ERGO-Code/HiGHS/commit/10101ad997117b63a4c854c409f9d645324cfc0b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "getvarbyname"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves avoiding unnecessary copying of arguments and reducing redundant lookups in the variables array.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "phc",
        "hash": "2538ddf6fdd3ac56101de8395189686f5ee9f215",
        "author": "Paul Biggar",
        "date": "2007-09-27T16:16:12+00:00",
        "message": "Avoid copying in the cases where its not necessary. Instead of overwrite_lhs, use overwrite_lhs_no_copy. This avoids the zval_copy_ctor, and can only be used in cases where there is only 1 reference to the data in zvp->val.\n\nsafe_free_zval_ptr clears the memory for the zval*, but not its value.",
        "modified_files_count": 1,
        "modified_files": [
            "src/codegen/Generate_C.cpp"
        ],
        "github_commit_url": "https://github.com/pbiggar/phc/commit/2538ddf6fdd3ac56101de8395189686f5ee9f215",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "generate_rhs"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids unnecessary copying by using `overwrite_lhs_no_copy` instead of `overwrite_lhs` to skip the `zval_copy_ctor` in cases where there is only one reference to the data.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "nap",
        "hash": "64cedae3cfeff626ad453db696e7e57b75d591f5",
        "author": "cklosters",
        "date": "2024-03-22T12:14:26+01:00",
        "message": "use emplace instead of insert to avoid copy and fix build",
        "modified_files_count": 1,
        "modified_files": [
            "system_modules/naprenderadvanced/src/renderadvancedservice.cpp"
        ],
        "github_commit_url": "https://github.com/napframework/nap/commit/64cedae3cfeff626ad453db696e7e57b75d591f5",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "RTTI_PROPERTY"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used `emplace` instead of `insert` to avoid unnecessary object copying.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ladybird",
        "hash": "e8c0cea5f9affac2e6192842bb81a5f16fe69c8e",
        "author": "Andreas Kling",
        "date": "2023-11-13T13:49:21+01:00",
        "message": "LibJS/JIT: Use right shift to extract type tags in equality codegen\n\n7% speed-up on Kraken/ai-astar.js, covers up most of the regression\nfrom adding more fast paths. :^)",
        "modified_files_count": 1,
        "modified_files": [
            "Userland/Libraries/LibJS/JIT/Compiler.cpp"
        ],
        "github_commit_url": "https://github.com/LadybirdBrowser/ladybird/commit/e8c0cea5f9affac2e6192842bb81a5f16fe69c8e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Compiler::branch_if_same_type_for_equality"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used is replacing a type tag extraction method with a right shift operation to improve performance in equality code generation.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "AIS-catcher",
        "hash": "f692ed5988a9af39625ad4280b07e5ab0a60ee56",
        "author": "jasper",
        "date": "2024-01-20T21:39:27+01:00",
        "message": "performance improvement UDP out",
        "modified_files_count": 1,
        "modified_files": [
            "IO/Network.cpp"
        ],
        "github_commit_url": "https://github.com/jvde-github/AIS-catcher/commit/f692ed5988a9af39625ad4280b07e5ab0a60ee56",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The commit optimizes UDP output performance by reducing unnecessary memory allocations and improving data handling efficiency.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "cryptominisat",
        "hash": "b8dcca2423a005f0aed66d7d533346eba1c20fe1",
        "author": "Mate Soos",
        "date": "2014-12-25T23:35:11+01:00",
        "message": "Let's reverse this check to improve speed\n\nIt's faster to get length than to get glue",
        "modified_files_count": 1,
        "modified_files": [
            "cryptominisat4/searcher.cpp"
        ],
        "github_commit_url": "https://github.com/msoos/cryptominisat/commit/b8dcca2423a005f0aed66d7d533346eba1c20fe1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Searcher::mimimize_learnt_clause_more_maybe"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reversing a check to prioritize faster length retrieval over glue retrieval in the `Searcher::mimimize_learnt_clause_more_maybe` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "dolphin-memory-engine",
        "hash": "17731a57daf522c41c2c22755dd5f661f2f1fde4",
        "author": "cristian64",
        "date": "2024-05-05T01:02:10+00:00",
        "message": "Address `performance-for-range-copy` warnings.\n\nThe one warning was:\n\n```\n/w/dolphin-memory-engine/Source/DolphinProcess/Linux/LinuxDolphinProcess.cpp:39:15: warning: loop variable is copied but only used as const reference; consider making it a const reference [performance-for-range-copy]\n   39 |     for (auto str : lineData)\n      |               ^\n      |          const  &\n```",
        "modified_files_count": 1,
        "modified_files": [
            "Source/DolphinProcess/Linux/LinuxDolphinProcess.cpp"
        ],
        "github_commit_url": "https://github.com/aldelaro5/dolphin-memory-engine/commit/17731a57daf522c41c2c22755dd5f661f2f1fde4",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "LinuxDolphinProcess::obtainEmuRAMInformations"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved changing a loop variable from a copied value to a const reference to avoid unnecessary copying.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "horizon",
        "hash": "a920c00bce00e9d4bec45ad927499b98c0ee7bc4",
        "author": "Lukas K",
        "date": "2018-05-09T19:26:00+02:00",
        "message": "make tool paste faster",
        "modified_files_count": 1,
        "modified_files": [
            "src/core/tool_paste.cpp"
        ],
        "github_commit_url": "https://github.com/horizon-eda/horizon/commit/a920c00bce00e9d4bec45ad927499b98c0ee7bc4",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ToolPaste::update"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing unnecessary calculations or iterations within the ToolPaste::update function to improve performance.",
        "is_generic_optimization": true
    },
    {
        "hash": "fcb423f3f69225e0be896cb10b34b9628ab666f2",
        "author": "Paul Davis",
        "date": "2013-04-12T11:08:24-04:00",
        "message": "slightly optimize drawing of rectangles with all 4 sides outlined to avoid multiple paths etc",
        "modified_files_count": 1,
        "modified_files": [
            "libs/canvas/rectangle.cc"
        ],
        "github_commit_url": "https://github.com/Ardour/ardour/commit/fcb423f3f69225e0be896cb10b34b9628ab666f2",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Rectangle::render"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "ardour",
        "optimization_summary": "The optimization strategy involved reducing redundant path operations in the rendering of rectangles with all four sides outlined to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "redot-engine",
        "hash": "f1cc99c6e80694fc768ac098e13ef3c5370f6dfe",
        "author": "hoontee",
        "date": "2022-03-09T11:23:46-06:00",
        "message": "Add SNAME macro optimization missed during rebase",
        "modified_files_count": 1,
        "modified_files": [
            "modules/csg/csg_shape.cpp"
        ],
        "github_commit_url": "https://github.com/Redot-Engine/redot-engine/commit/f1cc99c6e80694fc768ac098e13ef3c5370f6dfe",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CSGShape3D::_make_dirty"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved adding a macro (SNAME) to reduce overhead in function calls by avoiding repeated string lookups.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "harfbuzz",
        "hash": "590fb3529a27a2a652c74baa2c8bebad34ec5c42",
        "author": "Behdad Esfahbod",
        "date": "2023-06-03T19:21:22-06:00",
        "message": "[subset] Reduce memory pressure",
        "modified_files_count": 1,
        "modified_files": [
            "src/hb-subset.cc"
        ],
        "github_commit_url": "https://github.com/harfbuzz/harfbuzz/commit/590fb3529a27a2a652c74baa2c8bebad34ec5c42",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "hb_subset_plan_execute_or_fail"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy reduces memory pressure by minimizing unnecessary memory allocations or deallocations in the subset plan execution.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "openocd-esp32",
        "hash": "de49613478f78b0f2fc0906de77fa4ff41ae0f7c",
        "author": "Matthias Welwarsky",
        "date": "2019-02-04T18:37:56+03:00",
        "message": "cortex_a: faster debug init\n\nDon't use atomic dap operations when not necessary\n\nChange-Id: Idc6dcd2bda95f7994852df4ae2a588976f4c9010\nSigned-off-by: Matthias Welwarsky <matthias.welwarsky@sysgo.com>\nReviewed-on: http://openocd.zylin.com/4142\nTested-by: jenkins\nReviewed-by: Matthias Welwarsky <matthias@welwarsky.de>",
        "modified_files_count": 1,
        "modified_files": [
            "src/target/cortex_a.c"
        ],
        "github_commit_url": "https://github.com/espressif/openocd-esp32/commit/de49613478f78b0f2fc0906de77fa4ff41ae0f7c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "cortex_a_init_debug_access"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves avoiding unnecessary atomic DAP operations to speed up debug initialization.",
        "is_generic_optimization": true
    },
    {
        "hash": "b2929c469c08599941e0975a380fa8108e5a2b8d",
        "author": "Noah Goldstein",
        "date": "2022-10-31T13:15:03-05:00",
        "message": "Replace 2x vpxor with vpternlogd in avx512 scramble\n\nNeither Clang nor GCC <= 11.2 get this so seems worth it to do by hand\nso save the instruction. Not really on the critical path so only minor\nperf changes.\n\nHashing 8kb On Icelake with 2x vpxor:\n\n     5,451,267,137      cycles\n     5,371,545,012      p0\n       301,488,579      p1\n     5,420,594,430      p5\n       450,583,083      p6\n\nHashing 8kb On Icelake with 2x vpternlogd:\n\n     5,400,583,791      cycles\n     5,329,872,021      p0\n       305,543,626      p1\n     5,372,500,814      p5\n       446,853,381      p6",
        "modified_files_count": 1,
        "modified_files": [
            "xxhash.h"
        ],
        "github_commit_url": "https://github.com/Cyan4973/xxHash/commit/b2929c469c08599941e0975a380fa8108e5a2b8d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "XXH3_scrambleAcc_avx512"
        ],
        "is_opt_ds": "true",
        "is_opt_ds_simple": "true",
        "repository_name": "xxHash",
        "optimization_summary": "The optimization strategy replaced two `vpxor` instructions with a single `vpternlogd` instruction in AVX-512 code to reduce instruction count and improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "stellar-core",
        "hash": "6dae535fed5bce2d910a410dca368edc3f6f2993",
        "author": "Latobarita",
        "date": "2019-01-11T15:10:18-08:00",
        "message": "Merge pull request #1909 from jonjove/improve-encode-b32\n\nSmall improvement in encode_b32 to reserve the correct size\n\nReviewed-by: graydon",
        "modified_files_count": 1,
        "modified_files": [
            "src/util/Decoder.h"
        ],
        "github_commit_url": "https://github.com/stellar/stellar-core/commit/6dae535fed5bce2d910a410dca368edc3f6f2993",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "encode_b32"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reserving the correct size in the `encode_b32` function to improve performance by reducing unnecessary memory reallocations.",
        "is_generic_optimization": true
    },
    {
        "hash": "b8188e1e2f71483e785831257e2e9f41c44fa8ca",
        "author": "Gleb Natapov",
        "date": "2019-05-06T17:36:50+03:00",
        "message": "storage_proxy: avoid copying of a topology and endpoint array in batchlog code\n\nbatchlog make copies of topology and endpoint array in batchlog endpoint\nchoosing code. There is a remark that at least endpoint copy is\ndeliberate because Cassandra code has it. We do not have to follow. Our\nendpoint calculation code is atomic, so we can use a reference.\n\nMessage-Id: <20190506115815.GK21208@scylladb.com>",
        "modified_files_count": 1,
        "modified_files": [
            "service/storage_proxy.cc"
        ],
        "github_commit_url": "https://github.com/scylladb/scylladb/commit/b8188e1e2f71483e785831257e2e9f41c44fa8ca",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "batch"
        ],
        "is_opt_ds": "true",
        "is_opt_ds_simple": "true",
        "repository_name": "scylladb",
        "optimization_summary": "The optimization strategy avoids copying a topology and endpoint array by using references instead of making deliberate copies in batchlog endpoint choosing code.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Floorp",
        "hash": "6c7d4e4ed00a9aaee7ff24c8d855390f442c49f8",
        "author": "Hiroyuki Ikezoe",
        "date": "2018-11-22T04:03:02+00:00",
        "message": "Bug 1506988 - Skip applying change hint if we already have it in AddLayerChangesForAnimation. r=birtles\n\nThis is just an optimization regardless of the fix improper change hint\ngenerated by blocked animations.\n\nDifferential Revision: https://phabricator.services.mozilla.com/D12366",
        "modified_files_count": 1,
        "modified_files": [
            "layout/base/RestyleManager.cpp"
        ],
        "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/6c7d4e4ed00a9aaee7ff24c8d855390f442c49f8",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "RestyleManager::AddLayerChangesForAnimation"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization skips applying a change hint if it is already present in the AddLayerChangesForAnimation function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "dolphin",
        "hash": "67d2fa11f122dfd15f157d59356bcfb69d3acc47",
        "author": "Sintendo",
        "date": "2020-12-25T19:30:51+01:00",
        "message": "Jit64: srawx - Handle constant zero input\n\nShifting zero by any amount always gives zero.\n\nBefore:\n41 B9 00 00 00 00    mov         r9d,0\n41 8B CF             mov         ecx,r15d\n49 C1 E1 20          shl         r9,20h\n49 D3 F9             sar         r9,cl\n49 C1 E9 20          shr         r9,20h\n\nAfter:\nNothing, register is set to constant zero.\n\nBefore:\n41 B8 00 00 00 00    mov         r8d,0\n41 8B CF             mov         ecx,r15d\n49 C1 E0 20          shl         r8,20h\n49 D3 F8             sar         r8,cl\n41 8B C0             mov         eax,r8d\n49 C1 E8 20          shr         r8,20h\n44 85 C0             test        eax,r8d\n0F 95 45 58          setne       byte ptr [rbp+58h]\n\nAfter:\nC6 45 58 00          mov         byte ptr [rbp+58h],0\n\nOccurs a bunch of times in Super Mario Sunshine. Since this is an\narithmetic shift a similar optimization can be done for constant -1\n(0xFFFFFFFF), but I couldn't find any game where this happens.",
        "modified_files_count": 1,
        "modified_files": [
            "Source/Core/Core/PowerPC/Jit64/Jit_Integer.cpp"
        ],
        "github_commit_url": "https://github.com/dolphin-emu/dolphin/commit/67d2fa11f122dfd15f157d59356bcfb69d3acc47",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Jit64::srawx"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization eliminates unnecessary arithmetic shift operations when the input is a constant zero, as shifting zero always results in zero.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "asymptote",
        "hash": "561986f58f96e407e92979207d66d4bc864b9556",
        "author": "John Bowman",
        "date": "2022-04-03T21:57:01-06:00",
        "message": "TRANSPARENCY: Optimize global summation on CPU.",
        "modified_files_count": 1,
        "modified_files": [
            "glrender.cc"
        ],
        "github_commit_url": "https://github.com/vectorgraphics/asymptote/commit/561986f58f96e407e92979207d66d4bc864b9556",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "partialSums"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves improving the efficiency of global summation operations on the CPU by reworking the partialSums function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "pybricks-micropython",
        "hash": "c37463345f2e91c9071deef2ccca7e7bc9d0b5a1",
        "author": "David Lechner",
        "date": "2019-11-26T17:32:08-06:00",
        "message": "ev3dev_stretch/serial: set input and output baud rate at same time\n\nmicro-optimization, there is a function that can set both input and\noutput baud rate at the same time.",
        "modified_files_count": 1,
        "modified_files": [
            "lib/pbio/drv/ev3dev_stretch/serial.c"
        ],
        "github_commit_url": "https://github.com/pybricks/pybricks-micropython/commit/c37463345f2e91c9071deef2ccca7e7bc9d0b5a1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "pbdrv_serial_config"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved setting the input and output baud rate simultaneously in a single function call to reduce overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "v8",
        "hash": "95c0ecee66786108a926645d37bba4d8c8a1f258",
        "author": "cbruni",
        "date": "2016-11-29T11:57:30+00:00",
        "message": "[counters] Avoid V8_EXPORT_PRIVATE to speed up compilation under windows\n\nBUG=chromium:668748\n\nReview-Url: https://codereview.chromium.org/2534123002\nCr-Commit-Position: refs/heads/master@{#41351}",
        "modified_files_count": 1,
        "modified_files": [
            "src/counters.h"
        ],
        "github_commit_url": "https://github.com/v8/v8/commit/95c0ecee66786108a926645d37bba4d8c8a1f258",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "V"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved avoiding the use of `V8_EXPORT_PRIVATE` to reduce compilation time on Windows.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "e522f446027845e3c8b563d021f37e8f3d30c9d9",
        "author": "Israel Rukshin",
        "date": "2019-11-04T10:56:40-07:00",
        "message": "nvmet: add unlikely check at nvmet_req_alloc_sgl\n\nThe call to sgl_alloc shouldn't fail so add this simple optimization to\nthe fast path.\n\nSigned-off-by: Israel Rukshin <israelr@mellanox.com>\nReviewed-by: Max Gurtovoy <maxg@mellanox.com>\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Keith Busch <kbusch@kernel.org>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "modified_files_count": 1,
        "modified_files": [
            "drivers/nvme/target/core.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/e522f446027845e3c8b563d021f37e8f3d30c9d9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "nvmet_req_alloc_sgl"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves adding an `unlikely` check to a function call to optimize the fast path by indicating that the call to `sgl_alloc` is unlikely to fail.",
        "is_generic_optimization": true
    },
    {
        "hash": "44d95ae127c40625a73e634ef226d43bd2726486",
        "author": "copercini",
        "date": "2018-03-10T17:49:31+01:00",
        "message": "Disable Nagle Algorithm by default (#335)\n\nThis speed up the response in up to 10 times",
        "modified_files_count": 1,
        "modified_files": [
            "src/WebServer.cpp"
        ],
        "github_commit_url": "https://github.com/me-no-dev/ESPAsyncWebServer/commit/44d95ae127c40625a73e634ef226d43bd2726486",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "AsyncWebServer::begin"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "ESPAsyncWebServer",
        "optimization_summary": "The optimization strategy involved disabling the Nagle Algorithm by default to reduce network latency and speed up response times.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "4423eff71ca6b8f2c5e0fc4cea33d8cdfe3c3740",
        "author": "Christophe Leroy",
        "date": "2021-06-16T00:16:47+10:00",
        "message": "powerpc: Force inlining of csum_add()\n\nCommit 328e7e487a46 (\"powerpc: force inlining of csum_partial() to\navoid multiple csum_partial() with GCC10\") inlined csum_partial().\n\nNow that csum_partial() is inlined, GCC outlines csum_add() when\ncalled by csum_partial().\n\nc064fb28 <csum_add>:\nc064fb28:\t7c 63 20 14 \taddc    r3,r3,r4\nc064fb2c:\t7c 63 01 94 \taddze   r3,r3\nc064fb30:\t4e 80 00 20 \tblr\n\nc0665fb8 <csum_add>:\nc0665fb8:\t7c 63 20 14 \taddc    r3,r3,r4\nc0665fbc:\t7c 63 01 94 \taddze   r3,r3\nc0665fc0:\t4e 80 00 20 \tblr\n\nc066719c:\t7c 9a c0 2e \tlwzx    r4,r26,r24\nc06671a0:\t38 60 00 00 \tli      r3,0\nc06671a4:\t7f 1a c2 14 \tadd     r24,r26,r24\nc06671a8:\t4b ff ee 11 \tbl      c0665fb8 <csum_add>\nc06671ac:\t80 98 00 04 \tlwz     r4,4(r24)\nc06671b0:\t4b ff ee 09 \tbl      c0665fb8 <csum_add>\nc06671b4:\t80 98 00 08 \tlwz     r4,8(r24)\nc06671b8:\t4b ff ee 01 \tbl      c0665fb8 <csum_add>\nc06671bc:\ta0 98 00 0c \tlhz     r4,12(r24)\nc06671c0:\t4b ff ed f9 \tbl      c0665fb8 <csum_add>\nc06671c4:\t7c 63 18 f8 \tnot     r3,r3\nc06671c8:\t81 3f 00 68 \tlwz     r9,104(r31)\nc06671cc:\t81 5f 00 a0 \tlwz     r10,160(r31)\nc06671d0:\t7d 29 18 14 \taddc    r9,r9,r3\nc06671d4:\t7d 29 01 94 \taddze   r9,r9\nc06671d8:\t91 3f 00 68 \tstw     r9,104(r31)\nc06671dc:\t7d 1a 50 50 \tsubf    r8,r26,r10\nc06671e0:\t83 01 00 10 \tlwz     r24,16(r1)\nc06671e4:\t83 41 00 18 \tlwz     r26,24(r1)\n\nThe sum with 0 is useless, should have been skipped.\nAnd there is even one completely unused instance of csum_add().\n\nIn file included from ./include/net/checksum.h:22,\n                 from ./include/linux/skbuff.h:28,\n                 from ./include/linux/icmp.h:16,\n                 from net/ipv6/ip6_tunnel.c:23:\n./arch/powerpc/include/asm/checksum.h: In function '__ip6_tnl_rcv':\n./arch/powerpc/include/asm/checksum.h:94:22: warning: inlining failed in call to 'csum_add': call is unlikely and code size would grow [-Winline]\n   94 | static inline __wsum csum_add(__wsum csum, __wsum addend)\n      |                      ^~~~~~~~\n./arch/powerpc/include/asm/checksum.h:172:31: note: called from here\n  172 |                         sum = csum_add(sum, (__force __wsum)*(const u32 *)buff);\n      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n./arch/powerpc/include/asm/checksum.h:94:22: warning: inlining failed in call to 'csum_add': call is unlikely and code size would grow [-Winline]\n   94 | static inline __wsum csum_add(__wsum csum, __wsum addend)\n      |                      ^~~~~~~~\n./arch/powerpc/include/asm/checksum.h:177:31: note: called from here\n  177 |                         sum = csum_add(sum, (__force __wsum)\n      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  178 |                                             *(const u32 *)(buff + 4));\n      |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~\n./arch/powerpc/include/asm/checksum.h:94:22: warning: inlining failed in call to 'csum_add': call is unlikely and code size would grow [-Winline]\n   94 | static inline __wsum csum_add(__wsum csum, __wsum addend)\n      |                      ^~~~~~~~\n./arch/powerpc/include/asm/checksum.h:183:31: note: called from here\n  183 |                         sum = csum_add(sum, (__force __wsum)\n      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  184 |                                             *(const u32 *)(buff + 8));\n      |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~\n./arch/powerpc/include/asm/checksum.h:94:22: warning: inlining failed in call to 'csum_add': call is unlikely and code size would grow [-Winline]\n   94 | static inline __wsum csum_add(__wsum csum, __wsum addend)\n      |                      ^~~~~~~~\n./arch/powerpc/include/asm/checksum.h:186:31: note: called from here\n  186 |                         sum = csum_add(sum, (__force __wsum)\n      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  187 |                                             *(const u16 *)(buff + 12));\n      |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nForce inlining of csum_add().\n\n     94c:\t80 df 00 a0 \tlwz     r6,160(r31)\n     950:\t7d 28 50 2e \tlwzx    r9,r8,r10\n     954:\t7d 48 52 14 \tadd     r10,r8,r10\n     958:\t80 aa 00 04 \tlwz     r5,4(r10)\n     95c:\t80 ff 00 68 \tlwz     r7,104(r31)\n     960:\t7d 29 28 14 \taddc    r9,r9,r5\n     964:\t7d 29 01 94 \taddze   r9,r9\n     968:\t7d 08 30 50 \tsubf    r8,r8,r6\n     96c:\t80 aa 00 08 \tlwz     r5,8(r10)\n     970:\ta1 4a 00 0c \tlhz     r10,12(r10)\n     974:\t7d 29 28 14 \taddc    r9,r9,r5\n     978:\t7d 29 01 94 \taddze   r9,r9\n     97c:\t7d 29 50 14 \taddc    r9,r9,r10\n     980:\t7d 29 01 94 \taddze   r9,r9\n     984:\t7d 29 48 f8 \tnot     r9,r9\n     988:\t7c e7 48 14 \taddc    r7,r7,r9\n     98c:\t7c e7 01 94 \taddze   r7,r7\n     990:\t90 ff 00 68 \tstw     r7,104(r31)\n\nIn the non-inlined version, the first sum with 0 was performed.\nHere it is skipped.\n\nSigned-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>\nReviewed-by: Segher Boessenkool <segher@kernel.crashing.org>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/f7f4d4e364de6e473da874468b903da6e5d97adc.1620713272.git.christophe.leroy@csgroup.eu",
        "modified_files_count": 1,
        "modified_files": [
            "arch/powerpc/include/asm/checksum.h"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/4423eff71ca6b8f2c5e0fc4cea33d8cdfe3c3740",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "csum_add"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved forcing the inlining of the `csum_add()` function to eliminate unnecessary function calls and redundant operations, such as summing with zero.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "opm-simulators",
        "hash": "a502a86dc1cddd1e25ce1994dd812003fdd5cee8",
        "author": "Arne Morten Kvarving",
        "date": "2025-01-24T12:17:56+01:00",
        "message": "Transmissibility::update: use ThreadSafeMapBuilder for diffusivity_\n\nthis in preparation for multithreading the loop",
        "modified_files_count": 1,
        "modified_files": [
            "opm/simulators/flow/Transmissibility_impl.hpp"
        ],
        "github_commit_url": "https://github.com/OPM/opm-simulators/commit/a502a86dc1cddd1e25ce1994dd812003fdd5cee8",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "update"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved using ThreadSafeMapBuilder for diffusivity_ to prepare for multithreading the loop.",
        "is_generic_optimization": true
    },
    {
        "hash": "03cf57db62cb6234539a770f6b54f67c562d5232",
        "author": "Jesse Haber-Kucharsky",
        "date": "2018-08-13T13:24:45-04:00",
        "message": "auth: Construct `std::random_device` instances once\n\n`std::random_device` has a lot of implementation-specific behavior, and\nas a result we cannot assume much about its performance characteristics.\n\nWe initialize thread-specific static instances of `std::random_device`\nonce so that we don't have the overhead of invoking the ctor during\nevery invocation of `gensalt`.",
        "modified_files_count": 1,
        "modified_files": [
            "auth/password_authenticator.cc"
        ],
        "github_commit_url": "https://github.com/scylladb/scylladb/commit/03cf57db62cb6234539a770f6b54f67c562d5232",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "gensalt"
        ],
        "is_opt_ds": "true",
        "is_opt_ds_simple": "true",
        "repository_name": "scylladb",
        "optimization_summary": "The optimization strategy involves initializing thread-specific static instances of `std::random_device` once to avoid the overhead of repeated constructor invocations during every call to `gensalt`.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Paddle",
        "hash": "2e1fb26b8b26e1dae81af890e3b0ea089218594c",
        "author": "Aurelius84",
        "date": "2022-04-28T09:41:59+08:00",
        "message": "[Performance]Add static inline for MakeReturnPyObject (#42334)",
        "modified_files_count": 1,
        "modified_files": [
            "paddle/fluid/pybind/op_function.h"
        ],
        "github_commit_url": "https://github.com/PaddlePaddle/Paddle/commit/2e1fb26b8b26e1dae81af890e3b0ea089218594c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "MakeReturnPyObject"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved adding `static inline` to the `MakeReturnPyObject` function to reduce function call overhead and improve performance by inlining the function.",
        "is_generic_optimization": true
    },
    {
        "hash": "7635d2fd7f0fa63b6ec03050614c314d7139f14a",
        "author": "Joonsoo Kim",
        "date": "2012-08-16T14:21:16-07:00",
        "message": "workqueue: use system_highpri_wq for unbind_work\n\nTo speed cpu down processing up, use system_highpri_wq.\nAs scheduling priority of workers on it is higher than system_wq and\nit is not contended by other normal works on this cpu, work on it\nis processed faster than system_wq.\n\ntj: CPU up/downs care quite a bit about latency these days.  This\n    shouldn't hurt anything and makes sense.\n\nSigned-off-by: Joonsoo Kim <js1304@gmail.com>\nSigned-off-by: Tejun Heo <tj@kernel.org>",
        "modified_files_count": 1,
        "modified_files": [
            "kernel/workqueue.c"
        ],
        "github_commit_url": "https://github.com/OnePlusOSS/android_kernel_oneplus_msm8998/commit/7635d2fd7f0fa63b6ec03050614c314d7139f14a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "workqueue_cpu_down_callback"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "android_kernel_oneplus_msm8998",
        "optimization_summary": "The optimization strategy involved using a higher-priority workqueue (`system_highpri_wq`) instead of a standard workqueue (`system_wq`) to reduce latency in CPU down processing.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "BBHash",
        "hash": "6bb97c4218198d3e5dd60c7eadb5267a79959a6d",
        "author": "rchikhi",
        "date": "2020-07-14T17:13:04+02:00",
        "message": "faster lookups by avoiding copy constructor (https://github.com/rizkg/BBHash/issues/20 from @enerc)",
        "modified_files_count": 1,
        "modified_files": [
            "BooPHF.h"
        ],
        "github_commit_url": "https://github.com/rizkg/BBHash/commit/6bb97c4218198d3e5dd60c7eadb5267a79959a6d",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved avoiding the copy constructor to achieve faster lookups.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "pycopy",
        "hash": "62f7ba7a815f34fb49967e925ac28ea340a46777",
        "author": "Paul Sokolovsky",
        "date": "2014-06-09T23:40:04+03:00",
        "message": "Merge pull request #675 from Rosuav/seq_simplify\n\nRemove unnecessary bounds check from mp_seq_get_fast_slice_indexes.",
        "modified_files_count": 1,
        "modified_files": [
            "py/sequence.c"
        ],
        "github_commit_url": "https://github.com/pfalcon/pycopy/commit/62f7ba7a815f34fb49967e925ac28ea340a46777",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "mp_seq_get_fast_slice_indexes"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing an unnecessary bounds check in the `mp_seq_get_fast_slice_indexes` function to reduce overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "envoy",
        "hash": "48743154a35f5751796d39ebceb615453abac8de",
        "author": "htuch",
        "date": "2018-04-03T16:24:19-07:00",
        "message": "config: optimize RepeatedPtrUtil::debugString at non-debug log levels. (#2984)\n\nThis one was showing up on our flamegraphs.\r\n\r\nRisk Level: Low\r\nTesting: bazel build //source/exe/...\r\n\r\nSigned-off-by: Harvey Tuch <htuch@google.com>",
        "modified_files_count": 1,
        "modified_files": [
            "source/common/config/grpc_mux_subscription_impl.h"
        ],
        "github_commit_url": "https://github.com/envoyproxy/envoy/commit/48743154a35f5751796d39ebceb615453abac8de",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "onConfigUpdate"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing the overhead of `RepeatedPtrUtil::debugString` by avoiding its execution at non-debug log levels.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "zephyr",
        "hash": "2a206a07b3b6200d21f4b0a7be4b29265428761a",
        "author": "Djordje Nedic",
        "date": "2025-01-09T04:04:16+01:00",
        "message": "fs: littlefs: Improve block device cache size\n\nInstead of picking a set of safe block multiple sized values for caches,\nround down to the nearest block multiple, increasing static buffer usage\ndetermined by Kconfig variables.\n\nSigned-off-by: Djordje Nedic <nedic.djordje2@gmail.com>",
        "modified_files_count": 1,
        "modified_files": [
            "subsys/fs/littlefs_fs.c"
        ],
        "github_commit_url": "https://github.com/zephyrproject-rtos/zephyr/commit/2a206a07b3b6200d21f4b0a7be4b29265428761a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "littlefs_init_cfg"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves rounding down cache sizes to the nearest block multiple to increase static buffer usage efficiency.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "htcondor",
        "hash": "aaea0413fac061ca8697227533084af40865b415",
        "author": "Jaime Frey",
        "date": "2018-01-05T16:40:01-06:00",
        "message": "Make address-rewriting code more efficient when disabled. #6518\n\nIn ConvertDefaultIPToSocketIP(), hoist the check of\nSHARED_PORT_ADDRESS_REWRITING to the top of the function. This lets us\navoid more expensive checks in most situations (only HTCondor-CE sets\nthis parameter to enable address rewriting).",
        "modified_files_count": 1,
        "modified_files": [
            "src/condor_utils/my_hostname.cpp"
        ],
        "github_commit_url": "https://github.com/htcondor/htcondor/commit/aaea0413fac061ca8697227533084af40865b415",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ConvertDefaultIPToSocketIP"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves hoisting a conditional check to the top of a function to avoid expensive operations when address rewriting is disabled.",
        "is_generic_optimization": true
    },
    {
        "hash": "5844e129891e39beeab038abfe8a7cc7bfb08ad1",
        "author": "Jakub Zawadzki",
        "date": "2014-06-19T00:08:04+00:00",
        "message": "Optimize dissect_sip_uri()\n\n- Combine tvb_find_guint8() for comma, semicolon into one tvb_pbrk_guint8()\n\n- Instead of fetching each character use tvb_pbrk_guint8() to fast\n  forward.\n\n- Remove not needed tvb_find_guint8() call, as the result is discarded.\n\nChange-Id: I38d6775b187146656d47cea9b64f8e0ccad18d36\nReviewed-on: https://code.wireshark.org/review/2384\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "modified_files_count": 1,
        "modified_files": [
            "epan/dissectors/packet-sip.c"
        ],
        "github_commit_url": "https://github.com/wireshark/wireshark/commit/5844e129891e39beeab038abfe8a7cc7bfb08ad1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "dissect_sip_uri"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "wireshark",
        "optimization_summary": "The optimization combines multiple character searches into a single call to `tvb_pbrk_guint8()` and removes unnecessary character fetch operations to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "gui",
        "hash": "1ed859e90e18384376e3a1ff0cb76f3e9ab11c2d",
        "author": "W. J. van der Laan",
        "date": "2021-05-19T10:07:53+02:00",
        "message": "Merge bitcoin/bitcoin#21173: util: faster HexStr => 13% faster blockToJSON\n\n74bf850ac47735f2ef4306059d3e664d40cac85e faster HexStr => 13% faster blockToJSON (Martin Ankerl)\n\nPull request description:\n\n  `std::string`'s push_back is rather slow because it needs to check & update the string size. For\n  `HexStr` the output string size is already easily know, so we can initially create the string with\n  the correct size and then just assign the data.\n\n  `HexStr` is heavily usd in `blockToJSON`, so this change is a noticeable benefit. Benchmark on an i7-8700 @3.2GHz:\n\n  * 71,315,461.00 ns/op master\n  * 62,842,490.00 ns/op this commit\n\n  So this little change makes `blockToJSON` about ~13% faster.\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 74bf850ac47735f2ef4306059d3e664d40cac85e\n  theStack:\n    re-ACK 74bf850ac47735f2ef4306059d3e664d40cac85e\n\nTree-SHA512: fc99105123edc11f4e40ed77aea80cf7f32e49c53369aa364b38395dcb48575e15040b0489ed30d0fe857c032a04e225c33e9d95cdfa109a3cb5a6ec9a972415",
        "modified_files_count": 1,
        "modified_files": [
            "src/util/strencodings.cpp"
        ],
        "github_commit_url": "https://github.com/bitcoin-core/gui/commit/1ed859e90e18384376e3a1ff0cb76f3e9ab11c2d",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves pre-allocating the correct size for a string in `HexStr` to avoid the overhead of repeated size checks and updates during `push_back` operations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "1699dbebf31f0b26a8408d24da3c7f3b113f0340",
        "author": "Linus Torvalds",
        "date": "2023-04-25T10:05:00-07:00",
        "message": "Merge tag 'x86_acpi_for_v6.4_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip\n\nPull x86 ACPI update from Borislav Petkov:\n\n - Improve code generation in ACPI's global lock's acquisition function\n\n* tag 'x86_acpi_for_v6.4_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:\n  x86/ACPI/boot: Improve __acpi_acquire_global_lock",
        "modified_files_count": 1,
        "modified_files": [
            "arch/x86/kernel/acpi/boot.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/1699dbebf31f0b26a8408d24da3c7f3b113f0340",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "__acpi_acquire_global_lock"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving code generation in the ACPI global lock's acquisition function to enhance performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "32blit-sdk",
        "hash": "b8a09bd0f461b93ded0a3f3532690e24b570bab1",
        "author": "Philip Howard",
        "date": "2020-10-16T14:42:23+01:00",
        "message": "Merge pull request #402 from Daft-Freak/patch-2\n\nAvoid copying entire screen surface in set_screen_mode",
        "modified_files_count": 1,
        "modified_files": [
            "32blit/engine/engine.cpp"
        ],
        "github_commit_url": "https://github.com/32blit/32blit-sdk/commit/b8a09bd0f461b93ded0a3f3532690e24b570bab1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "set_screen_mode"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids copying the entire screen surface in the `set_screen_mode` function to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "arm-trusted-firmware",
        "hash": "0ed322329339a30c6bbd81ba784bb54966e4bd6c",
        "author": "Varun Wadekar",
        "date": "2018-04-09T16:37:23-07:00",
        "message": "lib: xlat_tables_v2: reduce time required to add a mmap region\n\nThe last entry in the mapping table is not necessarily the same as the\nend of the table. This patch loops through the table to find the last\nentry marker, on every new mmap addition. The memove operation then\nhas to only move the memory between current entry and the last entry.\nFor platforms that arrange their MMIO map properly, this opearation\nturns out to be a NOP.\n\nThe previous implementation added significant overhead per mmap\naddition as the memmove operation always moved the difference between\nthe current mmap entry and the end of the table.\n\nTested on Tegra platforms and this new approach improves the memory\nmapping time by ~75%, thus significantly reducing boot time on some\nplatforms.\n\nChange-Id: Ie3478fa5942379282ef58bee2085da799137e2ca\nSigned-off-by: Varun Wadekar <vwadekar@nvidia.com>",
        "modified_files_count": 1,
        "modified_files": [
            "lib/xlat_tables_v2/xlat_tables_internal.c"
        ],
        "github_commit_url": "https://github.com/ARM-software/arm-trusted-firmware/commit/0ed322329339a30c6bbd81ba784bb54966e4bd6c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "mmap_add_region_ctx"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization reduces the time required to add a mmap region by finding the last entry marker in the mapping table and limiting the memmove operation to only move memory between the current entry and the last entry.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "freeradius-server",
        "hash": "518ebe1902916a6232f83cd1effbd5cc9c27c8cf",
        "author": "Arran Cudbard-Bell",
        "date": "2020-06-05T11:35:20-05:00",
        "message": "More efficient field initialisation",
        "modified_files_count": 1,
        "modified_files": [
            "src/modules/rlm_radius/rlm_radius_udp.c"
        ],
        "github_commit_url": "https://github.com/FreeRADIUS/freeradius-server/commit/518ebe1902916a6232f83cd1effbd5cc9c27c8cf",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "mod_enqueue"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved more efficient field initialization in the `mod_enqueue` function to reduce overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "DiligentFX",
        "hash": "6c920dcb433864a31bd36537d9bc3dfb6c84a5b9",
        "author": "assiduous",
        "date": "2024-02-25T22:45:17-08:00",
        "message": "HnRenderPass: minor change for a non-trivial performance win",
        "modified_files_count": 1,
        "modified_files": [
            "Hydrogent/src/HnRenderPass.cpp"
        ],
        "github_commit_url": "https://github.com/DiligentGraphics/DiligentFX/commit/6c920dcb433864a31bd36537d9bc3dfb6c84a5b9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "HnRenderPass::RenderPendingDrawItems"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing redundant calculations or memory accesses within the HnRenderPass::RenderPendingDrawItems function to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "networkit",
        "hash": "340d8de9e14f8b27b5f42e99c7f4845f76330fc1",
        "author": "Eugenio Angriman",
        "date": "2021-04-26T11:48:21+02:00",
        "message": "Merge pull request #733 from angriman/matching-is-proper\n\nFaster Matching::isProper",
        "modified_files_count": 1,
        "modified_files": [
            "networkit/cpp/matching/Matching.cpp"
        ],
        "github_commit_url": "https://github.com/networkit/networkit/commit/340d8de9e14f8b27b5f42e99c7f4845f76330fc1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Matching::isProper"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the efficiency of the `Matching::isProper` function by reducing redundant checks and streamlining the logic.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "cmssw",
        "hash": "e0f96fa0cc8d438014cda9e76aca9bc9f4f00c59",
        "author": "William Tanenbaum",
        "date": "2010-10-29T13:49:43+00:00",
        "message": "Cache the TypeID to speed up type checking",
        "modified_files_count": 1,
        "modified_files": [
            "FWCore/Framework/src/Group.cc"
        ],
        "github_commit_url": "https://github.com/cms-sw/cmssw/commit/e0f96fa0cc8d438014cda9e76aca9bc9f4f00c59",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "GroupData::checkType"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves caching the TypeID to reduce redundant type checking operations and improve performance.",
        "is_generic_optimization": true
    },
    {
        "hash": "e01a0c3316a75b07d6938f9d5933e7fe39294dc4",
        "author": "Reini Urban",
        "date": "2023-09-06T13:32:00+02:00",
        "message": "bit_read_TV: optimize TV-ZERO logging a bit",
        "modified_files_count": 1,
        "modified_files": [
            "src/bits.c"
        ],
        "github_commit_url": "https://github.com/LibreDWG/libredwg/commit/e01a0c3316a75b07d6938f9d5933e7fe39294dc4",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "bit_read_TV"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "libredwg",
        "optimization_summary": "The optimization reduces overhead by minimizing unnecessary logging operations for TV-ZERO values.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Floorp",
        "hash": "6031be78e1c02e259c0c61053fdb00af30aae271",
        "author": "Mats Palmgren",
        "date": "2017-02-20T17:43:08+01:00",
        "message": "Bug 410857 - Part 2: DrainOverflowLines before ResolveBidi for slightly improved performance. r=jfkthame, a=jcristau",
        "modified_files_count": 1,
        "modified_files": [
            "layout/generic/nsBlockFrame.cpp"
        ],
        "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/6031be78e1c02e259c0c61053fdb00af30aae271",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "nsBlockFrame::Reflow"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reordering operations to drain overflow lines before resolving bidirectional text for improved performance.",
        "is_generic_optimization": true
    },
    {
        "hash": "647a2a9a25234d9b6089afb6000f48713d4bcb54",
        "author": "Glenn Strauss",
        "date": "2022-02-19T02:40:37-05:00",
        "message": "[mod_magnet] adjust hot path for more inlining",
        "modified_files_count": 1,
        "modified_files": [
            "src/mod_magnet.c"
        ],
        "github_commit_url": "https://github.com/lighttpd/lighttpd1.4/commit/647a2a9a25234d9b6089afb6000f48713d4bcb54",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "magnet_attract"
        ],
        "is_opt_ds": "true",
        "is_opt_ds_simple": "true",
        "repository_name": "lighttpd1.4",
        "optimization_summary": "The optimization strategy involved adjusting the hot path in the `magnet_attract` function to enable more inlining by the compiler.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "blender",
        "hash": "f09606cc68bd28abb8229d1e5c1ad6fe351cf4f7",
        "author": "Germano Cavalcante",
        "date": "2021-05-17T09:09:12-03:00",
        "message": "File List: micro optimization in the icon preview\n\nNo real functional changes.\n\nWhen `i` is zero, `filelist_cache_previews_push` was called twice with\nthe same icon.\n\nThis caused the preview to be computed twice when only once is needed.",
        "modified_files_count": 1,
        "modified_files": [
            "source/blender/editors/space_file/filelist.c"
        ],
        "github_commit_url": "https://github.com/blender/blender/commit/f09606cc68bd28abb8229d1e5c1ad6fe351cf4f7",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "filelist_file_cache_block"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing a redundant call to `filelist_cache_previews_push` when `i` is zero, preventing the preview from being computed twice unnecessarily.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "skyscraper",
        "hash": "83d0820e58ba45242e71bd15ae1917991829b1a1",
        "author": "Lars Muldjord",
        "date": "2018-01-03T19:07:02+01:00",
        "message": "Now uses constBits instead of bits for efficiency",
        "modified_files_count": 1,
        "modified_files": [
            "src/compositor.cpp"
        ],
        "github_commit_url": "https://github.com/muldjord/skyscraper/commit/83d0820e58ba45242e71bd15ae1917991829b1a1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Compositor::applyShadow"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing a non-const variable with a const variable to improve efficiency by reducing unnecessary copies or modifications.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "gzdoom-rt",
        "hash": "91589d9799d38db7413b57126748cba7253fcf9a",
        "author": "Kevin Caccamo",
        "date": "2020-01-11T13:24:02+01:00",
        "message": "Attempt to optimize check for ML_DRAWFULLHEIGHT\n\nIt is less likely that a line will have the ML_DRAWFULLHEIGHT flag than its' ceiling will be above the neighbouring sector's ceiling and vice versa.",
        "modified_files_count": 1,
        "modified_files": [
            "src/rendering/hwrenderer/scene/hw_walls.cpp"
        ],
        "github_commit_url": "https://github.com/vs-shirokii/gzdoom-rt/commit/91589d9799d38db7413b57126748cba7253fcf9a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "HWWall::Process"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy reorders conditional checks to prioritize the less likely condition (ML_DRAWFULLHEIGHT flag) after checking more probable conditions, reducing unnecessary evaluations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Server",
        "hash": "0534a2c6be2b00b5f564ffb001ed0e858ff9c237",
        "author": "Michael Cook (mackal)",
        "date": "2021-04-07T01:17:30-05:00",
        "message": "Switch scheduled hot zone check to search instead of split (#1313)\n\nUsing search_deliminated_string here is significantly faster than\r\nsplitting, most likely because of dynamic memory management\r\n\r\nSome tests on my system:\r\n\r\n----------------------------------------------------\r\nBenchmark             Time           CPU Iterations\r\n----------------------------------------------------\r\nbench_split         864 ns        864 ns     807922\r\nbench_search         35 ns         35 ns   20265205\r\n\r\nThis test was a case where the string was present somewhere in the\r\nmiddle which gave a ~96% speed up\r\n\r\n----------------------------------------------------\r\nBenchmark             Time           CPU Iterations\r\n----------------------------------------------------\r\nbench_split         936 ns        936 ns     725518\r\nbench_search         61 ns         61 ns   11156359\r\n\r\nThis test was when the string was not present, which will be the vast\r\nmajority of times this is actually checked, was ~93% speed up",
        "modified_files_count": 1,
        "modified_files": [
            "zone/zone_event_scheduler.cpp"
        ],
        "github_commit_url": "https://github.com/EQEmu/Server/commit/0534a2c6be2b00b5f564ffb001ed0e858ff9c237",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ZoneEventScheduler::Process"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing a string splitting operation with a search operation to avoid dynamic memory management overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "icu",
        "hash": "7130aeef991f52166a2102dc70016e67e6047765",
        "author": "Markus Scherer",
        "date": "2000-07-19T21:24:04+00:00",
        "message": "ICU-103 more performance in fromU() by goto _into_ the loop\n\nX-SVN-Rev: 1954",
        "modified_files_count": 1,
        "modified_files": [
            "icu4c/source/common/ucnvmbcs.c"
        ],
        "github_commit_url": "https://github.com/unicode-org/icu/commit/7130aeef991f52166a2102dc70016e67e6047765",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "_MBCSFromUnicodeWithOffsets"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved using a `goto` statement to enter a loop, likely reducing overhead or improving control flow efficiency.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Marlin",
        "hash": "d7b6acc03d03796e34ab0d293cc8be88b4657fda",
        "author": "Mihai",
        "date": "2024-06-15T17:55:45-05:00",
        "message": "⚡️ Optimize LPC176x set_pwm_duty (#27178)",
        "modified_files_count": 1,
        "modified_files": [
            "Marlin/src/HAL/LPC1768/fast_pwm.cpp"
        ],
        "github_commit_url": "https://github.com/MarlinFirmware/Marlin/commit/d7b6acc03d03796e34ab0d293cc8be88b4657fda",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "MarlinHAL::set_pwm_duty"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the efficiency of setting PWM duty cycles by reducing redundant calculations and streamlining the logic.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Pikafish",
        "hash": "3a2cd370802db61dc3060b81d613444363cf0371",
        "author": "Marco Costalba",
        "date": "2010-08-06T11:15:41+01:00",
        "message": "Faster perft\n\nSkip moves scoring and sorting: this more then\ndoubles the speed !\n\nVerified is correct.\n\nSigned-off-by: Marco Costalba <mcostalba@gmail.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/search.cpp"
        ],
        "github_commit_url": "https://github.com/official-pikafish/Pikafish/commit/3a2cd370802db61dc3060b81d613444363cf0371",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "perft"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves skipping move scoring and sorting in the `perft` function to significantly improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Monocypher",
        "hash": "c08d3c300b11adc9ac02d90e59c7306ea6c0bcd3",
        "author": "Loup Vaillant",
        "date": "2018-02-24T15:47:53+01:00",
        "message": "Strength reduction for Chacha20\n\nThe performance gain is tiny, but measurable.",
        "modified_files_count": 1,
        "modified_files": [
            "src/monocypher.c"
        ],
        "github_commit_url": "https://github.com/LoupVaillant/Monocypher/commit/c08d3c300b11adc9ac02d90e59c7306ea6c0bcd3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "crypto_chacha20_encrypt"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used strength reduction to simplify arithmetic operations in the Chacha20 encryption function, improving performance slightly.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sycl",
        "hash": "5f59f407f59f69c248be2452e5923e6735e7019a",
        "author": "Wenlei He",
        "date": "2021-03-25T21:15:36-07:00",
        "message": "[CSSPGO] Minor tweak for inline candidate priority tie breaker\n\nWhen prioritize call site to consider for inlining in sample loader, use number of samples as a first tier breaker before using name/guid comparison. This would favor smaller functions when hotness is the same (from the same block). We could try to retrieve accurate function size if this turns out to be more important.\n\nDifferential Revision: https://reviews.llvm.org/D99370",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/Transforms/IPO/SampleProfile.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/5f59f407f59f69c248be2452e5923e6735e7019a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "operator"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy prioritizes call sites for inlining by using the number of samples as a tiebreaker before comparing names/guids, favoring smaller functions when hotness is the same.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "tensorflow",
        "hash": "51a4843aff53901e1ee08b7623b59cf0dcf2a43a",
        "author": "A. Unique TensorFlower",
        "date": "2024-04-24T09:07:42-07:00",
        "message": "Allow for short-circuiting optimization in ShapeUtil::EqualStructure.\n\nNote that operator& doesn't do short-circuiting, unlike operator&&.\n\nPiperOrigin-RevId: 627745915",
        "modified_files_count": 1,
        "modified_files": [
            "third_party/xla/xla/shape_util.cc"
        ],
        "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/51a4843aff53901e1ee08b7623b59cf0dcf2a43a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ForEachSubshape"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaces the non-short-circuiting `operator&` with the short-circuiting `operator&&` to improve performance by avoiding unnecessary evaluations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "cmssw",
        "hash": "3be47f265be2c269c3e2459bd6d806a19401783b",
        "author": "Nicola Minafra",
        "date": "2021-02-19T13:56:34+01:00",
        "message": "slightly more efficient",
        "modified_files_count": 1,
        "modified_files": [
            "RecoLocalCalo/EcalRecAlgos/src/EcalUncalibRecHitTimingCCAlgo.cc"
        ],
        "github_commit_url": "https://github.com/cms-sw/cmssw/commit/3be47f265be2c269c3e2459bd6d806a19401783b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "EcalUncalibRecHitTimingCCAlgo::interpolatePulse"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing a loop-based interpolation calculation with a precomputed lookup table to reduce computational overhead.",
        "is_generic_optimization": true
    },
    {
        "hash": "857f50649cad125398774dca0f7a73ed3ffaf738",
        "author": "Matthias Clasen",
        "date": "2023-08-05T15:15:55+00:00",
        "message": "Merge branch 'microoptimize-label-wfh' into 'main'\n\nMicrooptimize GtkLabel width-for-height computation\n\nSee merge request GNOME/gtk!6219",
        "modified_files_count": 1,
        "modified_files": [
            "gtk/gtklabel.c"
        ],
        "github_commit_url": "https://github.com/GNOME/gtk/commit/857f50649cad125398774dca0f7a73ed3ffaf738",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "my_pango_layout_get_width_for_height"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "gtk",
        "optimization_summary": "The optimization strategy involved microoptimizing the width-for-height computation in GtkLabel to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ispc",
        "hash": "b9d6ba2aa042286f87ab02efae944a54e9ef95c3",
        "author": "Matt Pharr",
        "date": "2012-04-17T15:10:30-07:00",
        "message": "Always set target info, even when compiling to generic targets.\n\nThis allows the SROA pass eliminate a lot of allocas and loads and\nstores, which helps a lot for performance.",
        "modified_files_count": 1,
        "modified_files": [
            "opt.cpp"
        ],
        "github_commit_url": "https://github.com/ispc/ispc/commit/b9d6ba2aa042286f87ab02efae944a54e9ef95c3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Optimize"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves always setting target information to enable the SROA (Scalar Replacement of Aggregates) pass to eliminate unnecessary memory allocations and operations, improving performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "theseus-ship",
        "hash": "f7d7c246b8b76cbd4440b9c1665f0ccaa57e9880",
        "author": "Martin Gräßlin",
        "date": "2015-01-16T12:28:44+01:00",
        "message": "Slightly optimize Workspace::xStackingOrder\n\nCallgrind analysis showed that this method has room for improvement.\nThe bottle neck is mapping the Unmanaged against the list of windows\nretreived from xcb_query_tree. The number of windows in that list is\nrather large (>1000), which turns the loop into an expensive path.\nWorkspace::findUnmanaged seems to be too expensive for that due to the\noverhead of using a functor and multiple method calls. The Inl. cost\nbefore the optimization for checking ~55,000 windows is 2.46.\n\nThe change uses a good old const-iterator based loop over the unmanaged\nlist to check for the window. This reduces the Incl. cost for checking\n~55,000 windows to 0.28.\n\nREVIEW: 122067",
        "modified_files_count": 1,
        "modified_files": [
            "layers.cpp"
        ],
        "github_commit_url": "https://github.com/winft/theseus-ship/commit/f7d7c246b8b76cbd4440b9c1665f0ccaa57e9880",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Workspace::xStackingOrder"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaces a functor-based search with a const-iterator loop to reduce overhead when checking a large list of windows.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sycl",
        "hash": "c459b5178c2a6c189713c686aba3068f79eea0d8",
        "author": "Douglas Gregor",
        "date": "2012-08-17T22:17:36+00:00",
        "message": "When code completion is enabled, don't do any work in\nSema::ActOnEndOfTranslationUnit(). This is a (minor) optimization.\n\nllvm-svn: 162144",
        "modified_files_count": 1,
        "modified_files": [
            "clang/lib/Sema/Sema.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/c459b5178c2a6c189713c686aba3068f79eea0d8",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Sema::ActOnEndOfTranslationUnit"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves skipping unnecessary work in `Sema::ActOnEndOfTranslationUnit()` when code completion is enabled to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "MonetDB",
        "hash": "b9067e90b22f978df1fde6d3aacbe9773f66ab48",
        "author": "Martin Kersten",
        "date": "2015-09-15T21:01:07+02:00",
        "message": "Improve using pre-scan\nThis optimizer is hardly ever needed to rewrite the plan.\nA simple pre-test avoids lots of costs.",
        "modified_files_count": 1,
        "modified_files": [
            "monetdb5/optimizer/opt_generator.c"
        ],
        "github_commit_url": "https://github.com/MonetDB/MonetDB/commit/b9067e90b22f978df1fde6d3aacbe9773f66ab48",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "OPTgeneratorImplementation"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves adding a pre-test to avoid unnecessary plan rewriting, thereby reducing computational costs.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "orx",
        "hash": "fa2c15128485f4d7207b9b8827d147573061738a",
        "author": "iarwain",
        "date": "2020-02-23T00:16:23-05:00",
        "message": "- Minor optimization in orxConfig_IsInheritedValue()",
        "modified_files_count": 1,
        "modified_files": [
            "code/src/core/orxConfig.c"
        ],
        "github_commit_url": "https://github.com/orx/orx/commit/fa2c15128485f4d7207b9b8827d147573061738a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "orxConfig_IsInheritedValue"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reordering conditions in the `orxConfig_IsInheritedValue` function to prioritize cheaper checks and reduce unnecessary evaluations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "MyScaleDB",
        "hash": "5d19150906430531963f5e95346db3795eb499fd",
        "author": "avogar",
        "date": "2022-05-20T10:47:28+00:00",
        "message": "Try to improve short circuit functions processing",
        "modified_files_count": 1,
        "modified_files": [
            "src/Interpreters/ExpressionActions.cpp"
        ],
        "github_commit_url": "https://github.com/myscale/MyScaleDB/commit/5d19150906430531963f5e95346db3795eb499fd",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves improving the processing of short-circuit functions to reduce unnecessary computations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "scarab-osd",
        "hash": "3061a2776e3265e10d87c0416bd1c9da1f3bc16a",
        "author": "jflyper",
        "date": "2016-09-04T03:23:13+09:00",
        "message": "ISR switch-case re-order for faster case selection\n\nRe-ordered the cases in the ISR so that important cases are\nselected/executed faster.\n\nStill taking 9usec to respond to read addressing, and another 12.53usec\nfor RXLVL read.\n\nThis has lots to do with gcc’s code generation. Should compare with\n“forced-table-jump” approach.",
        "modified_files_count": 1,
        "modified_files": [
            "MW_OSD/twislave.c"
        ],
        "github_commit_url": "https://github.com/ShikOfTheRa/scarab-osd/commit/3061a2776e3265e10d87c0416bd1c9da1f3bc16a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ISR"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reordering cases in a switch statement to prioritize faster execution of important cases.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "x0",
        "hash": "311bbb48fa0bd5a189c7698910ebcc3874b81017",
        "author": "Christian Parpart",
        "date": "2014-03-04T23:26:48+01:00",
        "message": "x0d: honor optimization level var",
        "modified_files_count": 1,
        "modified_files": [
            "x0d/src/XzeroDaemon.cpp"
        ],
        "github_commit_url": "https://github.com/christianparpart/x0/commit/311bbb48fa0bd5a189c7698910ebcc3874b81017",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "XzeroDaemon::setup"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves honoring a specified optimization level variable to adjust performance settings dynamically.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "d921b9cf91e1f84a39f4beab5c824b9c8ad87c0c",
        "author": "Filipe Manana",
        "date": "2023-02-13T17:50:35+01:00",
        "message": "btrfs: send: avoid duplicated orphan dir allocation and initialization\n\nAt can_rmdir() we are allocating and initializing an orphan dir object\ntwice. This can be deduplicated outside of the loop that iterates over\nthe dir index keys. So deduplicate that code, even because other patch\nin the series will need to add more initialization code and another one\nwill add one more condition.\n\nThis patch is part of a larger patchset and the changelog of the last\npatch in the series contains a sample performance test and results.\nThe patches that comprise the patchset are the following:\n\n  btrfs: send: directly return from did_overwrite_ref() and simplify it\n  btrfs: send: avoid unnecessary generation search at did_overwrite_ref()\n  btrfs: send: directly return from will_overwrite_ref() and simplify it\n  btrfs: send: avoid extra b+tree searches when checking reference overrides\n  btrfs: send: remove send_progress argument from can_rmdir()\n  btrfs: send: avoid duplicated orphan dir allocation and initialization\n  btrfs: send: avoid unnecessary orphan dir rbtree search at can_rmdir()\n  btrfs: send: reduce searches on parent root when checking if dir can be removed\n  btrfs: send: iterate waiting dir move rbtree only once when processing refs\n  btrfs: send: initialize all the red black trees earlier\n  btrfs: send: genericize the backref cache to allow it to be reused\n  btrfs: adapt lru cache to allow for 64 bits keys on 32 bits systems\n  btrfs: send: cache information about created directories\n  btrfs: allow a generation number to be associated with lru cache entries\n  btrfs: add an api to delete a specific entry from the lru cache\n  btrfs: send: use the lru cache to implement the name cache\n  btrfs: send: update size of roots array for backref cache entries\n  btrfs: send: cache utimes operations for directories if possible\n\nSigned-off-by: Filipe Manana <fdmanana@suse.com>\nReviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
        "modified_files_count": 1,
        "modified_files": [
            "fs/btrfs/send.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/d921b9cf91e1f84a39f4beab5c824b9c8ad87c0c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "can_rmdir"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves deduplicating the allocation and initialization of an orphan directory object outside of a loop to avoid redundant operations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "qulacs",
        "hash": "97a86940cc81c458094214f21ee9949291a0e25c",
        "author": "KowerKoint",
        "date": "2023-06-21T12:42:43+09:00",
        "message": "Merge pull request #565 from qulacs/fastalize-parametriccircuit-copy\n\nremove std::find(), precalc where parametric gates exist",
        "modified_files_count": 1,
        "modified_files": [
            "src/vqcsim/parametric_circuit.cpp"
        ],
        "github_commit_url": "https://github.com/qulacs/qulacs/commit/97a86940cc81c458094214f21ee9949291a0e25c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ParametricQuantumCircuit::copy"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing `std::find()` and precalculating the locations of parametric gates to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "mace",
        "hash": "ae7766cdace8174aac5741e13a8b2cdaf208575d",
        "author": "虞连飞",
        "date": "2018-11-27T11:47:41+08:00",
        "message": "optimize eltwise computing order",
        "modified_files_count": 1,
        "modified_files": [
            "mace/ops/eltwise.cc"
        ],
        "github_commit_url": "https://github.com/XiaoMi/mace/commit/ae7766cdace8174aac5741e13a8b2cdaf208575d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "DoEltwise"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reordering the computing operations in the eltwise function to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "mantid",
        "hash": "620b3fa197e899e8ccc8c8dfd3993ad0518a7841",
        "author": "Chen Zhang",
        "date": "2021-11-22T11:03:22-05:00",
        "message": "optimize for speed",
        "modified_files_count": 1,
        "modified_files": [
            "Framework/Geometry/src/Objects/CSGObject.cpp"
        ],
        "github_commit_url": "https://github.com/mantidproject/mantid/commit/620b3fa197e899e8ccc8c8dfd3993ad0518a7841",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CSGObject::interceptSurface"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reducing unnecessary computations by caching frequently accessed values and minimizing redundant calculations within the `CSGObject::interceptSurface` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "mpv",
        "hash": "5b7327920b1500c33342c021e70136973972fbce",
        "author": "Mad Fish",
        "date": "2013-01-20T16:37:30+01:00",
        "message": "ao_coreaudio: use 0 as timeout for CFRunLoopRunInMode\n\nHandle all pending events and exit instead of waiting. When there are lots of\ninput events (for example, scrolling with trackpad), timeout can add up\nto make a huge frame delay. In my tests, if I scroll fast enough, that loop\nwould never exit.",
        "modified_files_count": 1,
        "modified_files": [
            "audio/out/ao_coreaudio.c"
        ],
        "github_commit_url": "https://github.com/mpv-player/mpv/commit/5b7327920b1500c33342c021e70136973972fbce",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "play"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves setting the timeout to 0 in CFRunLoopRunInMode to handle all pending events immediately and exit, reducing frame delay caused by event accumulation.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "30005444fe7b6956db675db343e47613b19f8219",
        "author": "Dan Gohman",
        "date": "2010-07-26T17:45:33+00:00",
        "message": "Avoid copying and recopying a std::set.\n\nllvm-svn: 109405",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/VMCore/Dominators.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/30005444fe7b6956db675db343e47613b19f8219",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids unnecessary copying and recopying of a `std::set` to reduce overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ucx",
        "hash": "bdb82246d0e13616977e6f244f1d45f0539ded77",
        "author": "Shuki Zanyovka",
        "date": "2020-06-25T15:02:11+03:00",
        "message": "UCS: Improve ptr_array foreach performance by prefetching\n\n- Use CPU dcache prefetching to further improve the ptr_array\n  performance.\n- Improvement achieved is ~10% on Intel processors.",
        "modified_files_count": 1,
        "modified_files": [
            "src/ucs/datastruct/ptr_array.h"
        ],
        "github_commit_url": "https://github.com/openucx/ucx/commit/bdb82246d0e13616977e6f244f1d45f0539ded77",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "__ucs_ptr_array_for_each_get_step_size"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used CPU data cache prefetching to improve the performance of pointer array iteration.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "NetworkManager",
        "hash": "d5d7b4781e116bd8dcaab28ad7d1db8f57d21621",
        "author": "Thomas Haller",
        "date": "2020-04-03T11:31:12+02:00",
        "message": "shared: pre-allocate GString with 16 bytes for _nm_utils_enum_to_str_full()\n\nIn the next commit, GString will be replaced by NMStrBuf. Then, we will\npre-allocate a string buffer with 16 bytes, and measure the performance\ndifference. To have it comparable, adjust the pre-allocation size also\nwith GString.",
        "modified_files_count": 1,
        "modified_files": [
            "shared/nm-glib-aux/nm-enum-utils.c"
        ],
        "github_commit_url": "https://github.com/NetworkManager/NetworkManager/commit/d5d7b4781e116bd8dcaab28ad7d1db8f57d21621",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "_nm_utils_enum_to_str_full"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves pre-allocating a GString buffer with 16 bytes to reduce reallocation overhead during string operations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "flare-engine",
        "hash": "645137672bd1552382b80f9398341eec7b8b3317",
        "author": "Justin Jacobs",
        "date": "2012-09-21T12:55:07-04:00",
        "message": "Don't check distance when checking hotspot tooltips\n\nCloses #14",
        "modified_files_count": 1,
        "modified_files": [
            "src/MapRenderer.cpp"
        ],
        "github_commit_url": "https://github.com/flareteam/flare-engine/commit/645137672bd1552382b80f9398341eec7b8b3317",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "hotspot"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy removes unnecessary distance checks when evaluating hotspot tooltips to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "PX4-Autopilot",
        "hash": "a9d83b77de913c35752914a2a0657f59f5f4bbbe",
        "author": "Dennis Mannhart",
        "date": "2018-08-15T16:19:51+02:00",
        "message": "ControlMath: math optimization",
        "modified_files_count": 1,
        "modified_files": [
            "src/modules/mc_pos_control/Utility/ControlMath.cpp"
        ],
        "github_commit_url": "https://github.com/PX4/PX4-Autopilot/commit/a9d83b77de913c35752914a2a0657f59f5f4bbbe",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "constrainXY"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reordering mathematical operations and simplifying conditional checks to reduce computational overhead in the `constrainXY` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "server",
        "hash": "8268fa881fed2a2cd23566a7c962e6e6dfa60da6",
        "author": "Sergey Vojtovich",
        "date": "2019-05-21T17:55:09+04:00",
        "message": "Moved set_timespec out of LOCK_thread_cache mutex\n\nPart of MDEV-19515 - Improve connect speed",
        "modified_files_count": 1,
        "modified_files": [
            "sql/mysqld.cc"
        ],
        "github_commit_url": "https://github.com/MariaDB/server/commit/8268fa881fed2a2cd23566a7c962e6e6dfa60da6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "cache_thread"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved moving the `set_timespec` function call outside of the `LOCK_thread_cache` mutex to reduce contention and improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "libical",
        "hash": "a8f69b3e1aee98d15547a5598a11db37adec75af",
        "author": "Markus Minichmayr",
        "date": "2024-10-27T17:44:55+01:00",
        "message": "icalrecur.c: Minor performance improvement in filter_bysetpos() - avoid iterating all bits in days bit field.",
        "modified_files_count": 1,
        "modified_files": [
            "src/libical/icalrecur.c"
        ],
        "github_commit_url": "https://github.com/libical/libical/commit/a8f69b3e1aee98d15547a5598a11db37adec75af",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "filter_bysetpos"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids iterating all bits in a days bit field by breaking early when the required conditions are met, reducing unnecessary computation.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "snp-sites",
        "hash": "6466c95549484208b45337602812f0c5ff85085a",
        "author": "andrewjpage",
        "date": "2012-05-09T13:43:01+01:00",
        "message": "speedup phylip creation",
        "modified_files_count": 1,
        "modified_files": [
            "phylib_of_snp_sites.c"
        ],
        "github_commit_url": "https://github.com/sanger-pathogens/snp-sites/commit/6466c95549484208b45337602812f0c5ff85085a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "create_phylib_of_snp_sites"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing redundant calculations and memory allocations during the creation of the PHYLIB file.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "0a36463f4ca287e4d4ac15580c0aae5b23619212",
        "author": "Mike Snitzer",
        "date": "2022-08-04T14:02:20-04:00",
        "message": "dm verity: optimize verity_verify_io if FEC not configured\n\nOnly declare and copy bvec_iter if CONFIG_DM_VERITY_FEC is defined and\nFEC enabled for the verity device.\n\nSigned-off-by: Mike Snitzer <snitzer@kernel.org>",
        "modified_files_count": 1,
        "modified_files": [
            "drivers/md/dm-verity-target.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/0a36463f4ca287e4d4ac15580c0aae5b23619212",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "verity_verify_io"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy reduces unnecessary variable declarations and copying by conditionally declaring and copying a structure only when a specific configuration is enabled.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "v8",
        "hash": "0878b351adc46285b651d9d83499511c71cbda3c",
        "author": "Darius M",
        "date": "2023-12-13T11:26:37+00:00",
        "message": "[turboshaft] Iterate further Load/Store index-offset optimization\n\nSo far, a `Load(base=a+Constant(4), index=invalid, offset=0)` would be\nnormalized to `Load(base=a, index=Constant(4), offset=0)`. With this\nCL, we'll do one more reduction step to get to\n`Load(base=a, index=invalid, offset=4)`.\n\nBug: v8:12783\nChange-Id: I582032b18709beefacabcc9938afb2f7768b85fb\nReviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119541\nAuto-Submit: Darius Mercadier <dmercadier@chromium.org>\nReviewed-by: Matthias Liedtke <mliedtke@chromium.org>\nCommit-Queue: Matthias Liedtke <mliedtke@chromium.org>\nCr-Commit-Position: refs/heads/main@{#91482}",
        "modified_files_count": 1,
        "modified_files": [
            "src/compiler/turboshaft/machine-optimization-reducer.h"
        ],
        "github_commit_url": "https://github.com/v8/v8/commit/0878b351adc46285b651d9d83499511c71cbda3c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "REDUCE"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves normalizing `Load` operations by further reducing the index-offset combination to simplify the operation.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sycl",
        "hash": "01c82f50f7f2dc2f93e354374b5a6e14c71839a0",
        "author": "Kostya Serebryany",
        "date": "2016-12-17T02:23:35+00:00",
        "message": "[libFuzzer] speed up __sanitizer_cov_trace_switch a bit more (remove DIV)\n\nllvm-svn: 290034",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/Fuzzer/FuzzerTracePC.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/01c82f50f7f2dc2f93e354374b5a6e14c71839a0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "__attribute__"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves removing a division operation to speed up the `__sanitizer_cov_trace_switch` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "glocal_exploration",
        "hash": "d3480a253d97435b26fea814b9137ceda06dac2d",
        "author": "Victor Reijgwart",
        "date": "2021-03-07T18:45:26+01:00",
        "message": "For frontier visibility test if in FoV first (fast) then raytrace (slow)",
        "modified_files_count": 1,
        "modified_files": [
            "glocal_exploration_ros/src/planning/global/skeleton_planner.cpp"
        ],
        "github_commit_url": "https://github.com/ethz-asl/glocal_exploration/commit/d3480a253d97435b26fea814b9137ceda06dac2d",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy reorders operations in the frontier visibility test by first performing a fast field-of-view check before a slower raytrace operation.",
        "is_generic_optimization": true
    },
    {
        "hash": "55a2abfe31b82af13a77c3dc89913774f667b898",
        "author": "Hui Su",
        "date": "2018-06-11T18:07:18+00:00",
        "message": "Merge \"Small speedup of ml_pruning_partition()\"",
        "modified_files_count": 1,
        "modified_files": [
            "vp9/encoder/vp9_encodeframe.c"
        ],
        "github_commit_url": "https://github.com/webmproject/libvpx/commit/55a2abfe31b82af13a77c3dc89913774f667b898",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ml_pruning_partition"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "libvpx",
        "optimization_summary": "The optimization strategy involved reducing the computational overhead in the `ml_pruning_partition` function by simplifying or minimizing the number of operations performed within the function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "autoware.universe",
        "hash": "d962acba55aa0c9d50515b767cbb1bfd327fc50e",
        "author": "Mamoru Sobue",
        "date": "2025-02-11T20:28:19+09:00",
        "message": "perf(behavior_path_planner): improve getOverlappedLaneletId (#10094)\n\nSigned-off-by: Mamoru Sobue <mamoru.sobue@tier4.jp>",
        "modified_files_count": 1,
        "modified_files": [
            "planning/behavior_path_planner/autoware_behavior_path_planner_common/src/utils/drivable_area_expansion/static_drivable_area.cpp"
        ],
        "github_commit_url": "https://github.com/autowarefoundation/autoware.universe/commit/d962acba55aa0c9d50515b767cbb1bfd327fc50e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "getOverlappedLaneletId"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reducing the number of lanelet comparisons by skipping unnecessary checks when finding overlapped lanelets.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "runtime",
        "hash": "27cd66aa67974020196be9f905ee82f540fefd6f",
        "author": "Eugene Zhulenev",
        "date": "2022-05-07T03:14:46-07:00",
        "message": "[tfrt:jitrt] CustomCall: change all_decoded check\n\nIt generates slightly better code on a hot path.\n\nPiperOrigin-RevId: 447164964",
        "modified_files_count": 1,
        "modified_files": [
            "backends/jitrt/include/tfrt/jitrt/custom_call.h"
        ],
        "github_commit_url": "https://github.com/tensorflow/runtime/commit/27cd66aa67974020196be9f905ee82f540fefd6f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "call"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves modifying a conditional check in a hot path to generate slightly better code.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "NanoVNA-D",
        "hash": "d40132ac72a03d78c67e1f1e2b4fc26b309c0452",
        "author": "DiSlord",
        "date": "2022-04-24T01:47:35+03:00",
        "message": "Little faster draw cell line",
        "modified_files_count": 1,
        "modified_files": [
            "plot.c"
        ],
        "github_commit_url": "https://github.com/DiSlord/NanoVNA-D/commit/d40132ac72a03d78c67e1f1e2b4fc26b309c0452",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "cell_drawline"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing redundant calculations in the `cell_drawline` function by precomputing values used in the loop.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "objeck-lang",
        "hash": "2ab150494645e01ae0fea67354d5d71a17c743ca",
        "author": "Randy Hollines",
        "date": "2022-08-20T08:08:40-07:00",
        "message": "working on deadstore optimization",
        "modified_files_count": 1,
        "modified_files": [
            "core/compiler/optimization.cpp"
        ],
        "github_commit_url": "https://github.com/objeck/objeck-lang/commit/2ab150494645e01ae0fea67354d5d71a17c743ca",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ItermediateOptimizer::DeadStore"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The commit implements a dead store optimization to eliminate redundant or unnecessary variable assignments.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "naev",
        "hash": "59f77ff4ffdb4da61d62d489402ce32bb8e31e65",
        "author": "Deiz",
        "date": "2015-05-17T00:48:34-04:00",
        "message": "Minor optimization to system_setFaction\n\nSince it was iterating forwards and using the last (largest) presence,\nit's quicker to iterate backwards and bail on the first match.",
        "modified_files_count": 1,
        "modified_files": [
            "src/space.c"
        ],
        "github_commit_url": "https://github.com/naev/naev/commit/59f77ff4ffdb4da61d62d489402ce32bb8e31e65",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "system_setFaction"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved iterating backwards instead of forwards to find the first match and exit early, reducing unnecessary iterations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "FreeBSD-src",
        "hash": "606c37c54160479130a7337e45efbdf01d013b13",
        "author": "Collin Funk",
        "date": "2024-04-12T16:39:05-06:00",
        "message": "nproc: Prefer sys/cdefs.h __unreachable over the builtin\n\nThe __builtin_unreachable macro provided by Clang and GCC is a hint to\nthe compiler used for optimization. The programs work fine even if the\ncompiler doesn't support it. The sys/cdefs.h has had __unreachable for\n9 years (commit 732b31de5d9244bd1cc98192e09ee1881e9f55e9). It expands\nto the builtin if it is available. In the rare case that it is\nunsupported it expands to a null statement so compilation does not\nfail.\n\nSigned-off-by: Collin Funk <collin.funk1@gmail.com>\nReviewed by: imp, freebsd@igalic.co\nPull Request: https://github.com/freebsd/freebsd-src/pull/1117",
        "modified_files_count": 1,
        "modified_files": [
            "bin/nproc/nproc.c"
        ],
        "github_commit_url": "https://github.com/pfsense/FreeBSD-src/commit/606c37c54160479130a7337e45efbdf01d013b13",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "main"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing the use of `__builtin_unreachable` with `__unreachable` from `sys/cdefs.h` to ensure compatibility and maintain compiler optimization hints.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sse2neon",
        "hash": "ab292f204fef23b9d59e76c3005ddea6712bb1fa",
        "author": "Sergey Sharybin",
        "date": "2024-08-16T18:00:54+02:00",
        "message": "Fix performance regression after OPTNONE changes\n\nThe OPTNONE changes in #638 introduced 25% performance regression in\nCycles render engine running on Apple Silicon:\n\n  https://projects.blender.org/blender/blender/issues/126408\n\nThe reason for this is because as per Clang documentation optnone is\nincompatible with inline, so none of the functions that is marked as\noptnone is inlined. The biggest bottleneck for Cycles after that\nchange is _mm_mul_ps.\n\nThis change makes it so _mm_mul_ps is inlined and is no longer marked\nas optnone. This solves the immediate performance regression, and the\ncorrectness is verified using the sse2neon's test suit on M2 Ultra\nand M3 Max, with various optimization levels (default, -O2, -O3).\n\nAdditionally, adding -Wstrict-aliasing flag does not introduce new\nwarnings.",
        "modified_files_count": 1,
        "modified_files": [
            "sse2neon.h"
        ],
        "github_commit_url": "https://github.com/DLTcollab/sse2neon/commit/ab292f204fef23b9d59e76c3005ddea6712bb1fa",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "_mm_mul_ps"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved inlining the `_mm_mul_ps` function and removing the `optnone` attribute to improve performance by avoiding the overhead of function calls.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "RVVM",
        "hash": "b3cb2aa8f2bab1efa6f962495328e42eb6ce827a",
        "author": "Alisa Sireneva",
        "date": "2025-02-12T23:25:32+03:00",
        "message": "Optimize bit_next_pow2 with intrinsics",
        "modified_files_count": 1,
        "modified_files": [
            "src/bit_ops.h"
        ],
        "github_commit_url": "https://github.com/LekKit/RVVM/commit/b3cb2aa8f2bab1efa6f962495328e42eb6ce827a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "bit_next_pow2"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaces a custom implementation of finding the next power of two with hardware intrinsics for faster computation.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "fastclick",
        "hash": "e8dd2b3d505713c8fe224595812b9be37cb3acd9",
        "author": "eddietwo",
        "date": "2006-08-24T15:57:50+00:00",
        "message": "use raw bools, rather than : 1; same amount of space and maybe slightly faster (Koen Beel)",
        "modified_files_count": 1,
        "modified_files": [
            "elements/ip/checkipheader.cc"
        ],
        "github_commit_url": "https://github.com/tbarbette/fastclick/commit/e8dd2b3d505713c8fe224595812b9be37cb3acd9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CheckIPHeader::static_initialize"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing bitfield bools with raw bools to potentially improve performance while maintaining the same memory usage.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "lustre-release",
        "hash": "afee2380c105c37e440aaa9ec588cd27189bc18e",
        "author": "Mr NeilBrown",
        "date": "2020-08-13T05:58:43+00:00",
        "message": "LU-12275 sec: use memchr_inv() to check if page is zero.\n\nmemchr_inv() is the preferred way to check if a memory region is all\nzeros.  It is likely fast that memcmp() is it doesn't need to read the\nZERO_PAGE into cache, or into the CPU.  It was introduced in Linux\n3.2.\n\nTest-Parameters: trivial\nSigned-off-by: Mr NeilBrown <neilb@suse.de>\nChange-Id: I0a5c3d30d5db43a3f5ebb270ea66b9db2b200a9a\nReviewed-on: https://review.whamcloud.com/39459\nTested-by: Maloo <maloo@whamcloud.com>\nTested-by: jenkins <devops@whamcloud.com>\nReviewed-by: Andreas Dilger <adilger@whamcloud.com>\nReviewed-by: James Simmons <jsimmons@infradead.org>\nReviewed-by: Sebastien Buisson <sbuisson@ddn.com>",
        "modified_files_count": 1,
        "modified_files": [
            "lustre/osc/osc_request.c"
        ],
        "github_commit_url": "https://github.com/lustre/lustre-release/commit/afee2380c105c37e440aaa9ec588cd27189bc18e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "osc_brw_fini_request"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing a memory comparison method with `memchr_inv()` to more efficiently check if a memory region is all zeros, avoiding unnecessary cache or CPU reads.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sycl",
        "hash": "ee1fcb2fb684a54a3969adeb22108b62b18ea751",
        "author": "Mehdi Amini",
        "date": "2022-01-02T01:16:15+00:00",
        "message": "Apply clang-tidy fixes for performance-move-const-arg to MLIR (NFC)\n\nReviewed By: rriddle, Mogball\n\nDifferential Revision: https://reviews.llvm.org/D116249",
        "modified_files_count": 1,
        "modified_files": [
            "mlir/test/lib/Dialect/Linalg/TestLinalgTransforms.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/ee1fcb2fb684a54a3969adeb22108b62b18ea751",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "applyMatmulToVectorPatterns"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves using `std::move` to avoid unnecessary copying of constant arguments, improving performance by enabling move semantics.",
        "is_generic_optimization": true
    },
    {
        "hash": "92ce43309072e09bf558d91b1291067de67ced40",
        "author": "Marc-André Moreau",
        "date": "2013-05-16T19:56:39-04:00",
        "message": "libfreerdp-codec: optimize color conversion a bit",
        "modified_files_count": 1,
        "modified_files": [
            "libfreerdp/codec/color.c"
        ],
        "github_commit_url": "https://github.com/FreeRDP/FreeRDP/commit/92ce43309072e09bf558d91b1291067de67ced40",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "freerdp_image_convert_16bpp"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "FreeRDP",
        "optimization_summary": "The optimization strategy involved improving the color conversion process by reducing redundant calculations and leveraging bitwise operations for faster 16-bit pixel processing.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "TrinityCore",
        "hash": "bf6102e7ed8866feba28622eb3b0089812ec5f36",
        "author": "megamage",
        "date": "2009-07-10T08:38:35+08:00",
        "message": "Minor optimizations to MSG_QUERY_NEXT_MAIL_TIME handler. Author: hunuza\n\n    * Do not search for more unread mails when already found 2.\n    * Do not call time(NULL) every iteration.\n\n--HG--\nbranch : trunk",
        "modified_files_count": 1,
        "modified_files": [
            "src/game/Mail.cpp"
        ],
        "github_commit_url": "https://github.com/TrinityCore/TrinityCore/commit/bf6102e7ed8866feba28622eb3b0089812ec5f36",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "WorldSession::HandleQueryNextMailTime"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reducing unnecessary computations by limiting the search for unread mails once two are found and avoiding redundant calls to `time(NULL)` in each iteration.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "tcmalloc",
        "hash": "f374ca655b312aa02e60e6b16699ab729bb10260",
        "author": "Dmitry Vyukov",
        "date": "2023-08-31T23:08:56-07:00",
        "message": "tcmalloc: speed up aligned new and malloc\n\nCurrnetly we do alignment check even for requested alignment <= 8,\nthis is unnecessary. Also \"size_class % kNumBaseClasses\" leads to quite\ninefficient codegen:\n\n  313685:       ff c1                   inc    %ecx\n  313687:       4c 69 c1 83 be a0 2f    imul   $0x2fa0be83,%rcx,%r8\n  31368e:       49 c1 e8 24             shr    $0x24,%r8\n  313692:       45 6b c0 56             imul   $0x56,%r8d,%r8d\n  313696:       41 39 c8                cmp    %ecx,%r8d\n  313699:       75 dd                   jne    313678 <TCMallocInternalNewAligned+0x38>\n  31369b:       e9 a8 00 00 00          jmp    313748 <TCMallocInternalNewAligned+0x108>\n\nThis check is not necessary at all, since we are guaranteed to find\na size class with page alignment.\n\nname                        old cpu/op   new cpu/op   delta\nBM_aligned_new/1/8          8.40ns ± 1%  6.34ns ± 0%  -24.57%  (p=0.008 n=5+5)\nBM_aligned_new/8/8          8.38ns ± 1%  6.33ns ± 0%  -24.51%  (p=0.016 n=5+4)\nBM_aligned_new/64/8         8.33ns ± 1%  6.54ns ± 3%  -21.56%  (p=0.008 n=5+5)\nBM_aligned_new/512/8        8.50ns ± 1%  6.52ns ± 1%  -23.40%  (p=0.008 n=5+5)\nBM_aligned_new/4096/8       10.3ns ± 4%   8.4ns ± 0%  -18.76%  (p=0.016 n=5+4)\nBM_aligned_new/32768/8      19.2ns ± 1%  17.4ns ± 0%   -9.30%  (p=0.029 n=4+4)\nBM_aligned_new/262144/8     85.8ns ± 0%  85.5ns ± 0%     ~     (p=0.200 n=4+4)\nBM_aligned_new/1048576/8     274ns ± 7%   268ns ± 1%     ~     (p=0.310 n=5+5)\nBM_aligned_new/1/64         12.6ns ± 0%   9.1ns ± 1%  -27.84%  (p=0.008 n=5+5)\nBM_aligned_new/8/64         12.6ns ± 1%   9.0ns ± 0%  -28.34%  (p=0.008 n=5+5)\nBM_aligned_new/64/64        8.33ns ± 1%  7.10ns ± 1%  -14.79%  (p=0.008 n=5+5)\nBM_aligned_new/512/64       8.49ns ± 1%  7.26ns ± 1%  -14.49%  (p=0.008 n=5+5)\nBM_aligned_new/4096/64      10.4ns ± 0%   9.3ns ± 5%   -9.91%  (p=0.016 n=4+5)\nBM_aligned_new/32768/64     19.1ns ± 0%  18.0ns ± 0%   -6.02%  (p=0.029 n=4+4)\nBM_aligned_new/262144/64    85.8ns ± 0%  86.0ns ± 0%     ~     (p=0.486 n=4+4)\nBM_aligned_new/1048576/64    386ns ±33%   348ns ±37%     ~     (p=0.548 n=5+5)\nBM_aligned_new/65/64        17.8ns ± 0%  13.4ns ± 2%  -24.60%  (p=0.008 n=5+5)\n\nPiperOrigin-RevId: 561863242\nChange-Id: Ibbaf5ff955c9a890e0045c4215ef70eb680dd59d",
        "modified_files_count": 1,
        "modified_files": [
            "tcmalloc/sizemap.h"
        ],
        "github_commit_url": "https://github.com/google/tcmalloc/commit/f374ca655b312aa02e60e6b16699ab729bb10260",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "GetSizeClass"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves removing unnecessary alignment checks and inefficient codegen for cases where the requested alignment is less than or equal to 8, leveraging the guarantee of finding a size class with page alignment.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ffmpeg",
        "hash": "183a86c958c9ebeb3458240f1b76b1d809682c10",
        "author": "Michael Niedermayer",
        "date": "2010-01-16T16:21:12+00:00",
        "message": "Apply last 2 optimizations to similar code i forgot.\n\nOriginally committed as revision 21249 to svn://svn.ffmpeg.org/ffmpeg/trunk",
        "modified_files_count": 1,
        "modified_files": [
            "libavcodec/h264_loopfilter.c"
        ],
        "github_commit_url": "https://github.com/allyourcodebase/ffmpeg/commit/183a86c958c9ebeb3458240f1b76b1d809682c10",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "filter_mb_dir"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved applying previously identified performance improvements to similar code sections in the `filter_mb_dir` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "dxvk-remix",
        "hash": "937d0d0fc687dbcd97d25fb5cf2e112768d04e65",
        "author": "Philip Rebohle",
        "date": "2019-10-14T00:14:00+02:00",
        "message": "[d3d11] Don't sync CS thread if resource to map is already in use\n\nSynchronizeCsThread can only update the in-use state from available\nto in-use, so doing this on a resource that is already in-use is not\nnecessary. May improve performance in combination with DO_NOT_WAIT.",
        "modified_files_count": 1,
        "modified_files": [
            "src/d3d11/d3d11_context_imm.cpp"
        ],
        "github_commit_url": "https://github.com/NVIDIAGameWorks/dxvk-remix/commit/937d0d0fc687dbcd97d25fb5cf2e112768d04e65",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "D3D11ImmediateContext::WaitForResource"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids unnecessary synchronization by skipping the synchronization call if the resource is already in use.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "de375aa860fb848eaabc76dce0af2e982630b421",
        "author": "Jerry Ray",
        "date": "2023-01-20T08:53:13+00:00",
        "message": "dsa: lan9303: write reg only if necessary\n\nAs the regmap_write() is over a slow bus that will sleep, we can speed up\nthe boot-up time a bit by not bothering to clear a bit that is already\nclear.\n\nSigned-off-by: Jerry Ray <jerry.ray@microchip.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "modified_files_count": 1,
        "modified_files": [
            "drivers/net/dsa/lan9303-core.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/de375aa860fb848eaabc76dce0af2e982630b421",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "lan9303_setup"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves avoiding unnecessary writes to a register by checking if the bit is already clear before performing the write operation.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "tensorflow-directml",
        "hash": "197f573f3bd830bbc4dc277e7c8b8cfaca65e14a",
        "author": "A. Unique TensorFlower",
        "date": "2018-01-29T10:16:17-08:00",
        "message": "Reduce memory wasted by GCS cache by shrinking buffer capacity, after a cache fill completes.\n\nPiperOrigin-RevId: 183683856",
        "modified_files_count": 1,
        "modified_files": [
            "tensorflow/core/platform/cloud/file_block_cache.cc"
        ],
        "github_commit_url": "https://github.com/microsoft/tensorflow-directml/commit/197f573f3bd830bbc4dc277e7c8b8cfaca65e14a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "FileBlockCache::MaybeFetch"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy reduces memory waste by shrinking the buffer capacity after a cache fill operation completes.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "llvm-leg",
        "hash": "25369cfa2b33606cff971226fb4182109ff3646b",
        "author": "Chris Lattner",
        "date": "2004-08-01T08:12:41+00:00",
        "message": "Handle registers a bit more efficiently\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@15395 91177308-0d34-0410-b5e6-96231b3b80d8",
        "modified_files_count": 1,
        "modified_files": [
            "lib/Target/X86/X86AsmPrinter.cpp"
        ],
        "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/25369cfa2b33606cff971226fb4182109ff3646b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "printOperand"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves handling registers more efficiently in the X86AsmPrinter.cpp file to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "peercoin",
        "hash": "b3d7b1cbe7afdc6a63bbcbe938e8639deedb04a1",
        "author": "Gregory Maxwell",
        "date": "2017-01-05T18:15:01+00:00",
        "message": "Wallet: Do not perform ECDSA in the fee calculation inner loop.\n\nPerforming signing in the inner loop has terrible performance\n when many passes through are needed to complete the selection.\n\nSigning before the algorithm is complete also gets in the way\n of correctly setting the fee (e.g. preventing over-payment when\n the fee required goes down on the final selection.)\n\nUse of the dummy might overpay on the signatures by a couple bytes\n in uncommon cases where the signatures' DER encoding is smaller\n than the dummy: Who cares?",
        "modified_files_count": 1,
        "modified_files": [
            "src/wallet/wallet.cpp"
        ],
        "github_commit_url": "https://github.com/peercoin/peercoin/commit/b3d7b1cbe7afdc6a63bbcbe938e8639deedb04a1",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved moving ECDSA signing operations outside of the fee calculation inner loop to improve performance and ensure correct fee setting.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "llvm-leg",
        "hash": "5af41974c3876ce02950ff9d371330ef0826603d",
        "author": "Chris Lattner",
        "date": "2003-10-13T14:55:56+00:00",
        "message": "Speed up TypesEqual by specializing it for all of the derived types, avoiding\na lot of virtual method dispatch overhead.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@9078 91177308-0d34-0410-b5e6-96231b3b80d8",
        "modified_files_count": 1,
        "modified_files": [
            "lib/VMCore/Type.cpp"
        ],
        "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/5af41974c3876ce02950ff9d371330ef0826603d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "TypesEqual"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved specializing the `TypesEqual` function for derived types to reduce virtual method dispatch overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "dolphin",
        "hash": "c817b4779daf6b58a25bfb194a156e3215177574",
        "author": "Sintendo",
        "date": "2024-12-28T23:20:22+01:00",
        "message": "JitArm64_Integer: addzex - Optimize InPPCState case for 0\n\nBefore:\n0x52800019   mov    w25, #0x0                 ; =0\n0x394bd3b8   ldrb   w24, [x29, #0x2f4]\n0x2b180339   adds   w25, w25, w24\n\nAfter:\n0x394bd3b9   ldrb   w25, [x29, #0x2f4]",
        "modified_files_count": 1,
        "modified_files": [
            "Source/Core/Core/PowerPC/JitArm64/JitArm64_Integer.cpp"
        ],
        "github_commit_url": "https://github.com/dolphin-emu/dolphin/commit/c817b4779daf6b58a25bfb194a156e3215177574",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "JitArm64::addzex"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing an unnecessary zero initialization and directly loading the value into the target register.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "hacker-league",
        "hash": "a0031fc827c4ea151c9510bbf2f332c8fb08b4b4",
        "author": "Moritz Thüning",
        "date": "2024-08-28T12:59:56+02:00",
        "message": "make physics more efficient",
        "modified_files_count": 1,
        "modified_files": [
            "main.cpp"
        ],
        "github_commit_url": "https://github.com/moritztng/hacker-league/commit/a0031fc827c4ea151c9510bbf2f332c8fb08b4b4",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "physics"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reducing redundant calculations in the physics function by caching frequently used values.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Floorp",
        "hash": "22f547b544b625a98ac13a10bff584dae22f03cd",
        "author": "Olli Pettay",
        "date": "2016-12-22T00:23:07+02:00",
        "message": "Bug 1324808 - Improve string allocation, r=nfroyd",
        "modified_files_count": 1,
        "modified_files": [
            "xpcom/string/nsTSubstring.cpp"
        ],
        "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/22f547b544b625a98ac13a10bff584dae22f03cd",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "sizeof"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving string allocation to reduce overhead and enhance performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "lustre-release",
        "hash": "3eb209f5010adb4c022dda732f37e1929e6eb69c",
        "author": "alex",
        "date": "2005-06-28T16:10:08+00:00",
        "message": "- minor optimization: we already have fid in reply, no need to fetch it",
        "modified_files_count": 1,
        "modified_files": [
            "lustre/mds/mds_open.c"
        ],
        "github_commit_url": "https://github.com/lustre/lustre-release/commit/3eb209f5010adb4c022dda732f37e1929e6eb69c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "mds_open"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids redundant fetching of a fid by reusing the fid already available in the reply.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "server",
        "hash": "8df1c07ddb4758814068b64af831ba41254f32bc",
        "author": "Rich Prohaska",
        "date": "2013-04-16T23:57:45-04:00",
        "message": "speed up leafentry_disksize. addresses #1585\n\ngit-svn-id: file:///svn/toku/tokudb@10482 c7de825b-a66e-492c-adef-691d508d4ae1",
        "modified_files_count": 1,
        "modified_files": [
            "newbrt/leafentry.c"
        ],
        "github_commit_url": "https://github.com/MariaDB/server/commit/8df1c07ddb4758814068b64af831ba41254f32bc",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "leafentry_disksize"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing computational overhead in the `leafentry_disksize` function by simplifying the calculation of disk size for leaf entries.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "MLV-App",
        "hash": "754584ba06e56506010315670c651069b9239983",
        "author": "masc4ii",
        "date": "2018-06-21T12:58:45+02:00",
        "message": "small optimization for wb picker function",
        "modified_files_count": 1,
        "modified_files": [
            "src/processing/raw_processing.c"
        ],
        "github_commit_url": "https://github.com/ilia3101/MLV-App/commit/754584ba06e56506010315670c651069b9239983",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "processingFindWhiteBalance"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing redundant calculations in the white balance picker function by caching frequently accessed values.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "HDTN",
        "hash": "f6a25fdb70731a53088ae810636ca556de6b0a15",
        "author": "Tomko",
        "date": "2021-04-08T08:22:01-04:00",
        "message": "more encode attempt optimizations",
        "modified_files_count": 1,
        "modified_files": [
            "common/util/src/Sdnv.cpp"
        ],
        "github_commit_url": "https://github.com/nasa/HDTN/commit/f6a25fdb70731a53088ae810636ca556de6b0a15",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SdnvEncodeU64Fast"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the encoding performance by optimizing the `SdnvEncodeU64Fast` function in the `Sdnv.cpp` file.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "leap",
        "hash": "94e7bd0696a890c92c4dfe00c25b987450aa75ee",
        "author": "Kevin Heifner",
        "date": "2023-04-28T09:36:15-05:00",
        "message": "GH-641 Use more efficient escape_str instead of format_string",
        "modified_files_count": 1,
        "modified_files": [
            "plugins/producer_plugin/producer_plugin.cpp"
        ],
        "github_commit_url": "https://github.com/AntelopeIO/leap/commit/94e7bd0696a890c92c4dfe00c25b987450aa75ee",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "producer_plugin_impl::start_block"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing the use of `format_string` with the more efficient `escape_str` function to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "QGIS",
        "hash": "9bd0e887ae539498cd832b7adc66a08a751477f4",
        "author": "mhugent",
        "date": "2009-09-25T11:31:09+00:00",
        "message": "Speed up listing of field values in search dialog by using QSet\n\ngit-svn-id: http://svn.osgeo.org/qgis/trunk@11711 c8812cc2-4d05-0410-92ff-de0c093fc19c",
        "modified_files_count": 1,
        "modified_files": [
            "src/app/qgssearchquerybuilder.cpp"
        ],
        "github_commit_url": "https://github.com/qgis/QGIS/commit/9bd0e887ae539498cd832b7adc66a08a751477f4",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "QgsSearchQueryBuilder::getFieldValues"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing a list-based approach with a QSet to speed up the listing of field values by leveraging faster lookup times.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "glibc",
        "hash": "483cfe1a6a33d6335b1901581b41040d2d412511",
        "author": "Noah Goldstein",
        "date": "2022-08-09T17:00:03+08:00",
        "message": "elf: Replace `strcpy` call with `memcpy` [BZ #29454]\n\nGCC normally does this optimization for us in\nstrlen_pass::handle_builtin_strcpy but only for optimized\nbuild. To avoid needing to include strcpy.S in the rtld build to\nsupport the debug build, just do the optimization by hand.",
        "modified_files_count": 1,
        "modified_files": [
            "elf/dl-cache.c"
        ],
        "github_commit_url": "https://github.com/bminor/glibc/commit/483cfe1a6a33d6335b1901581b41040d2d412511",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "_dl_load_cache_lookup"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaced a `strcpy` call with `memcpy` to avoid including `strcpy.S` in the debug build and improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "llvm-leg",
        "hash": "742dbc1fc83f713e139a2745ebb34a97c11c43bd",
        "author": "Arnold Schwaighofer",
        "date": "2013-03-26T18:07:53+00:00",
        "message": "BasicAA: Only query twice if the result of the more general query was MayAlias\n\nThis is a compile time optimization. Before the patch we would do two traversals\non each call to aliasGEP - one with a set size parameter one with UnknownSize.\nWe can do better by first checking the result of the alias query with\nUnknownSize.\nOnly if this one returns MayAlias do we query a second time using size and type.\n\nThis recovers an about 7% compile time regression on spec/ammp.\n\nradar://12349960\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@178045 91177308-0d34-0410-b5e6-96231b3b80d8",
        "modified_files_count": 1,
        "modified_files": [
            "lib/Analysis/BasicAliasAnalysis.cpp"
        ],
        "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/742dbc1fc83f713e139a2745ebb34a97c11c43bd",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "BasicAliasAnalysis::aliasGEP"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy reduces redundant alias queries by first checking with a more general parameter and only performing a second query if the first result is ambiguous (MayAlias).",
        "is_generic_optimization": true
    },
    {
        "hash": "d803387a7f3faeb50c126f9ec065a86cb0dc7f70",
        "author": "Bruce Richardson",
        "date": "2014-10-08T14:24:59+02:00",
        "message": "ixgbe: add prefetch to improve slow-path tx perf\n\nMake a small improvement to slow path TX performance by adding in a\nprefetch for the second mbuf cache line.\nAlso move assignment of l2/l3 length values only when needed.\n\nWhat I've done with the prefetches is two-fold:\n1) changed it from prefetching the mbuf (first cache line) to prefetching\nthe mbuf pool pointer (second cache line) so that when we go to access\nthe pool pointer to free transmitted mbufs we don't get a cache miss. When\nclearing the ring and freeing mbufs, the pool pointer is the only mbuf\nfield used, so we don't need that first cache line.\n2) changed the code to prefetch earlier - in effect to prefetch one mbuf\nahead. The original code prefetched the mbuf to be freed as soon as it\nstarted processing the mbuf to replace it. Instead now, every time we\ncalculate what the next mbuf position is going to be we prefetch the mbuf\nin that position (i.e. the mbuf pool pointer we are going to free the mbuf\nto), even while we are still updating the previous mbuf slot on the ring.\nThis gives the prefetch much more time to resolve and get the data we need\nin the cache before we need it.\n\nIn terms of performance difference, a quick sanity test using testpmd\non a Xeon (Sandy Bridge uarch) platform showed performance increases\nbetween approx 8-18%, depending on the particular RX path used in\nconjuntion with this TX path code.\n\nSigned-off-by: Bruce Richardson <bruce.richardson@intel.com>\nAcked-by: Pablo de Lara <pablo.de.lara.guarch@intel.com>",
        "modified_files_count": 1,
        "modified_files": [
            "lib/librte_pmd_ixgbe/ixgbe_rxtx.c"
        ],
        "github_commit_url": "https://github.com/DPDK/dpdk/commit/d803387a7f3faeb50c126f9ec065a86cb0dc7f70",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ixgbe_xmit_pkts"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "dpdk",
        "optimization_summary": "The optimization strategy involves adding prefetching for the second cache line of mbufs and adjusting the timing of prefetch operations to reduce cache misses during slow-path TX processing.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "neomutt",
        "hash": "d8734c00e03a11a838ef9cbe102fe0a2dc274758",
        "author": "Kevin McCarthy",
        "date": "2018-09-01T18:06:08+01:00",
        "message": "Remove extra lstats() in safe_rename() upon link success\n\nI originally kept the lstat()'s in order to make as few changes as\npossible to the function.  However, Derek Martin argues correctly that\nif we are trusting the link() 0-retval, the lstats are unnecessary and\nin fact can cause a performance impact over NFS.",
        "modified_files_count": 1,
        "modified_files": [
            "mutt/file.c"
        ],
        "github_commit_url": "https://github.com/neomutt/neomutt/commit/d8734c00e03a11a838ef9cbe102fe0a2dc274758",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "mutt_file_safe_rename"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing redundant `lstat()` calls after a successful `link()` operation to reduce performance overhead, particularly over NFS.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "lightspark",
        "hash": "28ae2d69ecc270c182190557ef42937fe41a0d61",
        "author": "Ludger Krämer",
        "date": "2020-06-25T20:09:26+02:00",
        "message": "fix optimization of static method calls",
        "modified_files_count": 1,
        "modified_files": [
            "src/scripting/abc_interpreter.cpp"
        ],
        "github_commit_url": "https://github.com/lightspark/lightspark/commit/28ae2d69ecc270c182190557ef42937fe41a0d61",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ABCVm::preloadFunction"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves improving the handling of static method calls to reduce overhead and enhance performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "v8",
        "hash": "2649611109db5f9d60b27c6b2b12e78e5ee9bb25",
        "author": "verwaest",
        "date": "2016-02-12T14:15:04+00:00",
        "message": "[runtime] Speed up Object::ToObject with JSReceiver argument.\n\nThis avoids having to read the context and call through from the inlined\npath in the JSReceiver case.\n\nBUG=\n\nReview URL: https://codereview.chromium.org/1698463002\n\nCr-Commit-Position: refs/heads/master@{#33949}",
        "modified_files_count": 1,
        "modified_files": [
            "src/objects-inl.h"
        ],
        "github_commit_url": "https://github.com/v8/v8/commit/2649611109db5f9d60b27c6b2b12e78e5ee9bb25",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Object::ToObject"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization avoids unnecessary context reads and function calls by handling the JSReceiver case directly in the inlined path of Object::ToObject.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "v8",
        "hash": "3bcf90c68e4b772fe3f27572e06bf0cc3cf398dd",
        "author": "Hao Xu",
        "date": "2023-02-08T03:48:59+00:00",
        "message": "[csa] Optimize BuildFastLoop\n\nAvoid generating duplicated IntPtrOrSmiAdd as loop's condition so the\ncode can be optimized:\n\nBefore:\n   2ea  REX.W leaq r12,[rsi-0x3]\n   2ee  REX.W cmpq r12,0x0\n   2f2  jg 0x7fbda01e7c94  B93,94,95,98 <+0x2d4>\n\nAfter:\n   2e6  REX.W cmpq rsi,0x3\n   2ea  jg 0x7f5cc01e7c90  B93,94,95,98 <+0x2d0>\n\nChange-Id: I127a009d0c67ce185b7ddbf3cfbcb36cbd85d446\nReviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4225830\nCommit-Queue: Hao A Xu <hao.a.xu@intel.com>\nReviewed-by: Leszek Swirski <leszeks@chromium.org>\nCr-Commit-Position: refs/heads/main@{#85716}",
        "modified_files_count": 1,
        "modified_files": [
            "src/codegen/code-stub-assembler.cc"
        ],
        "github_commit_url": "https://github.com/v8/v8/commit/3bcf90c68e4b772fe3f27572e06bf0cc3cf398dd",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CodeStubAssembler::BuildFastLoop"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved avoiding the generation of duplicated `IntPtrOrSmiAdd` operations in the loop's condition to streamline the code.",
        "is_generic_optimization": true
    },
    {
        "hash": "0548bf4f5ad6fc3bd93c4940fa48078b34609682",
        "author": "Javier Martinez Canillas",
        "date": "2015-03-08T19:40:16+00:00",
        "message": "regulator: Only enable disabled regulators on resume\n\nThe _regulator_do_enable() call ought to be a no-op when called on an\nalready-enabled regulator.  However, as an optimization\n_regulator_enable() doesn't call _regulator_do_enable() on an already\nenabled regulator.  That means we never test the case of calling\n_regulator_do_enable() during normal usage and there may be hidden\nbugs or warnings.  We have seen warnings issued by the tps65090 driver\nand bugs when using the GPIO enable pin.\n\nLet's match the same optimization that _regulator_enable() in\nregulator_suspend_finish().  That may speed up suspend/resume and also\navoids exposing hidden bugs.\n\n[Use much clearer commit message from Doug Anderson]\n\nSigned-off-by: Javier Martinez Canillas <javier.martinez@collabora.co.uk>\nSigned-off-by: Mark Brown <broonie@kernel.org>\nCc: stable@vger.kernel.org",
        "modified_files_count": 1,
        "modified_files": [
            "drivers/regulator/core.c"
        ],
        "github_commit_url": "https://github.com/OnePlusOSS/android_kernel_oneplus_msm8998/commit/0548bf4f5ad6fc3bd93c4940fa48078b34609682",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "regulator_suspend_finish"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "android_kernel_oneplus_msm8998",
        "optimization_summary": "The optimization strategy avoids unnecessary calls to _regulator_do_enable() by skipping it for already-enabled regulators during resume.",
        "is_generic_optimization": true
    },
    {
        "hash": "a42b834b70de833cc87d7ba9eecc704903c19754",
        "author": "Alexandr Popov",
        "date": "2025-01-03T14:04:41+02:00",
        "message": "Merge pull request #25971 from handrok/instrtenplate_optimisation\n\nimproved score openning speed by optimisation the searchTemplateForInstrNameList function",
        "modified_files_count": 1,
        "modified_files": [
            "src/engraving/dom/instrtemplate.cpp"
        ],
        "github_commit_url": "https://github.com/musescore/MuseScore/commit/a42b834b70de833cc87d7ba9eecc704903c19754",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "searchTemplateForInstrNameList"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "MuseScore",
        "optimization_summary": "The optimization strategy involved improving the search efficiency in the `searchTemplateForInstrNameList` function to enhance score opening speed.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "e950cca3f3c40902a052a78a36b3fac1f8a62d19",
        "author": "Waiman Long",
        "date": "2019-10-09T12:46:10+02:00",
        "message": "lib/smp_processor_id: Don't use cpumask_equal()\n\nThe check_preemption_disabled() function uses cpumask_equal() to see\nif the task is bounded to the current CPU only. cpumask_equal() calls\nmemcmp() to do the comparison. As x86 doesn't have __HAVE_ARCH_MEMCMP,\nthe slow memcmp() function in lib/string.c is used.\n\nOn a RT kernel that call check_preemption_disabled() very frequently,\nbelow is the perf-record output of a certain microbenchmark:\n\n  42.75%  2.45%  testpmd [kernel.kallsyms] [k] check_preemption_disabled\n  40.01% 39.97%  testpmd [kernel.kallsyms] [k] memcmp\n\nWe should avoid calling memcmp() in performance critical path. So the\ncpumask_equal() call is now replaced with an equivalent simpler check.\n\nSigned-off-by: Waiman Long <longman@redhat.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nReviewed-by: Juri Lelli <juri.lelli@redhat.com>\nAcked-by:  Sebastian Andrzej Siewior <bigeasy@linutronix.de>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Masami Hiramatsu <mhiramat@kernel.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nLink: https://lkml.kernel.org/r/20191003203608.21881-1-longman@redhat.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
        "modified_files_count": 1,
        "modified_files": [
            "lib/smp_processor_id.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/e950cca3f3c40902a052a78a36b3fac1f8a62d19",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "smp_processor_id"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaces the use of `cpumask_equal()` with a simpler check to avoid the performance overhead of `memcmp()` in a frequently called function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "cutter",
        "hash": "ffa52bd3e8a7581f17b694d542bed49af53f3762",
        "author": "Tim Siebels",
        "date": "2017-10-01T15:55:47+02:00",
        "message": "Fix pessimizing move (#19)\n\nmoving a return value generally is unnecessary, as it prevents return value optimization.\r\n\r\nThe standard defines, that (named) return value optimization, i.e. copy elision\r\nis only possible when returning a value from a non-volatile automatic object\r\nor when it's a temporary that has not been bound to a reference.\r\n(N)RVO is not possible when wrapping it with std::move, because the compiler\r\nis not allowed to do copy elision from arbitrary function calls.\r\n\r\nI think this was the intended purpose of this code. Also, it is cleaner.",
        "modified_files_count": 1,
        "modified_files": [
            "src/widgets/DisassemblerGraphView.h"
        ],
        "github_commit_url": "https://github.com/rizinorg/cutter/commit/ffa52bd3e8a7581f17b694d542bed49af53f3762",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ToQString"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy removed an unnecessary `std::move` to enable return value optimization (RVO) and copy elision.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Floorp",
        "hash": "cf7ee570bd0c6c40c116d9b12df2286bbee9549e",
        "author": "Matthew Gaudet",
        "date": "2023-06-22T13:04:31+00:00",
        "message": "Bug 1838529 - Reserve space in the properties vector to avoid costly vector growth r=jandem\n\nOn the microbenchmark from Bug 1836679:\n\n$ hyperfine 'obj-with/dist/bin/js keys-benchmark.js' 'obj-without/dist/bin/js keys-benchmark.js'\nBenchmark 1: obj-with/dist/bin/js keys-benchmark.js\n  Time (mean ± σ):     256.9 ms ±   2.2 ms    [User: 257.9 ms, System: 8.9 ms]\n  Range (min … max):   254.3 ms … 262.5 ms    11 runs\n\nBenchmark 2: obj-without/dist/bin/js keys-benchmark.js\n  Time (mean ± σ):     349.4 ms ±   1.0 ms    [User: 351.0 ms, System: 10.0 ms]\n  Range (min … max):   347.6 ms … 350.9 ms    10 runs\n\nSummary\n  'obj-with/dist/bin/js keys-benchmark.js' ran\n    1.36 ± 0.01 times faster than 'obj-without/dist/bin/js keys-benchmark.js'\n\nDifferential Revision: https://phabricator.services.mozilla.com/D181004",
        "modified_files_count": 1,
        "modified_files": [
            "js/src/builtin/Object.cpp"
        ],
        "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/cf7ee570bd0c6c40c116d9b12df2286bbee9549e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "TryEnumerableOwnPropertiesNative"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used was reserving space in the properties vector to avoid costly vector growth during dynamic resizing.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "llvm-leg",
        "hash": "880ddb018a4bdcff00d35f28988d9eddb557b8e6",
        "author": "Chris Lattner",
        "date": "2006-08-02T00:14:16+00:00",
        "message": "Speed up Loop::isLCSSAForm by using a binary search and single-entry cache.\n\nThis reduces LCSSA pass time from 1.5s to 0.96s when run on eon in release+asserts mode.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@29464 91177308-0d34-0410-b5e6-96231b3b80d8",
        "modified_files_count": 1,
        "modified_files": [
            "lib/Analysis/LoopInfo.cpp"
        ],
        "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/880ddb018a4bdcff00d35f28988d9eddb557b8e6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Loop::isLCSSAForm"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used is implementing a binary search and a single-entry cache to speed up the `Loop::isLCSSAForm` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "MyScaleDB",
        "hash": "4e0712207945131b9b39203cb5efcb1f77910fca",
        "author": "Azat Khuzhin",
        "date": "2022-01-28T08:08:14+03:00",
        "message": "Slightly optimize ColumnArray::get()/operator[] (by using reserve over resize)\n\nNote, that simple \"SELECT range(100)\" will execute\nColumnArray::operator[] 14 times (most of them from\nDB::checkColumnStructure())\n\nSigned-off-by: Azat Khuzhin <a.khuzhin@semrush.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/Columns/ColumnArray.cpp"
        ],
        "github_commit_url": "https://github.com/myscale/MyScaleDB/commit/4e0712207945131b9b39203cb5efcb1f77910fca",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing `resize` with `reserve` in `ColumnArray::get()/operator[]` to avoid unnecessary initialization of elements.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "radare2",
        "hash": "dac5229965c8a4be50651c6da90cfeef24e97148",
        "author": "Paul I",
        "date": "2019-10-19T01:21:02+02:00",
        "message": "Avoid reloading of cc sdb - huge speedup (#15306) ##anal",
        "modified_files_count": 1,
        "modified_files": [
            "libr/core/cbin.c"
        ],
        "github_commit_url": "https://github.com/radareorg/radare2/commit/dac5229965c8a4be50651c6da90cfeef24e97148",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "r_core_anal_cc_init"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids reloading the `cc` sdb, resulting in a significant speedup by reducing redundant operations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "dosbox-staging",
        "hash": "911684a9c0c45d3eace70b04779c372936b3ab36",
        "author": "kcgen",
        "date": "2022-01-06T11:29:08+13:00",
        "message": "Fix a performance warning in shell copy\n\nV823 Decreased performance. Object may be created\nin-place in the 'sources' container. Consider\nreplacing methods: 'push_back' -> 'emplace_back'.",
        "modified_files_count": 1,
        "modified_files": [
            "src/shell/shell_cmds.cpp"
        ],
        "github_commit_url": "https://github.com/dosbox-staging/dosbox-staging/commit/911684a9c0c45d3eace70b04779c372936b3ab36",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "DOS_Shell::CMD_COPY"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing `push_back` with `emplace_back` to avoid unnecessary object copies in the `sources` container.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "blender",
        "hash": "a711c5004cf7e4b903f9c2c6ca736f2e531df79c",
        "author": "Iliya Katueshenock",
        "date": "2023-06-22T13:45:43+02:00",
        "message": "Geometry Nodes: Simplify code in duplicate elements face mode\n\nThis node splits all faces to duplicate each time. Corner edges and\nvertices are just ordered sequences of indices. Most likely, due to\nhistorical reasons, this was overlooked and as a result the code became\nso complex with potential simplicity. The problem was found in a\nbenchmark of #109174. The code in the lambda could not be optimized.\n\nTimings improved by about 30%, from 154 to 120 ms.\n\nPull Request: https://projects.blender.org/blender/blender/pulls/109222",
        "modified_files_count": 1,
        "modified_files": [
            "source/blender/nodes/geometry/nodes/node_geo_duplicate_elements.cc"
        ],
        "github_commit_url": "https://github.com/blender/blender/commit/a711c5004cf7e4b903f9c2c6ca736f2e531df79c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "duplicate_faces"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved simplifying complex code by restructuring the handling of corner edges and vertices to eliminate unnecessary complexity and improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "net-snmp",
        "hash": "6c621c010009b92471bd250799aa1e70a22072f9",
        "author": "Bart Van Assche",
        "date": "2022-10-16T16:05:10-07:00",
        "message": "libsnmp: Optimize asn_build_unsigned_int64()\n\nUse a single 64-bit integer instead of two 32-bit integers to store the\nvalue being encoded.",
        "modified_files_count": 1,
        "modified_files": [
            "snmplib/asn1.c"
        ],
        "github_commit_url": "https://github.com/net-snmp/net-snmp/commit/6c621c010009b92471bd250799aa1e70a22072f9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "object"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing the use of two 32-bit integers with a single 64-bit integer to store the value being encoded, reducing overhead and improving performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "simde",
        "hash": "8a06c846000c9ba7735e9e85dc5f3024c76bc765",
        "author": "Evan Nemerson",
        "date": "2017-05-16T18:27:49-07:00",
        "message": "sse2: add NEON implementation of simde_mm_madd_epi16",
        "modified_files_count": 1,
        "modified_files": [
            "sse2.h"
        ],
        "github_commit_url": "https://github.com/simd-everywhere/simde/commit/8a06c846000c9ba7735e9e85dc5f3024c76bc765",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "simde_mm_madd_epi16"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved adding a NEON implementation of the `simde_mm_madd_epi16` function to leverage SIMD (Single Instruction, Multiple Data) instructions for parallel processing.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Octave",
        "hash": "ee4caeda308c09b3d23a69d5a479498737d5808c",
        "author": "Rik",
        "date": "2017-03-19T13:27:30-07:00",
        "message": "Improve performance of dlmread by pre-allocating larger array (bug #50102).\n\n* dlmread.cc (Fdlmread): Increase rmax, max number of rows, in powers of 2 to\navoid constant re-sizing of output matrix.",
        "modified_files_count": 1,
        "modified_files": [
            "libinterp/corefcn/dlmread.cc"
        ],
        "github_commit_url": "https://github.com/NexMirror/Octave/commit/ee4caeda308c09b3d23a69d5a479498737d5808c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "DEFUN"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used is pre-allocating a larger array in powers of 2 to avoid constant re-sizing of the output matrix.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "android_art",
        "hash": "af77455c67e811719ddc9476ff334469e7650b3a",
        "author": "Shih-wei Liao",
        "date": "2012-04-22T01:49:58-07:00",
        "message": "Merge \"Partial inlining of the stub check.\" into ics-mr1-plus-art",
        "modified_files_count": 1,
        "modified_files": [
            "src/compiler_llvm/method_compiler.cc"
        ],
        "github_commit_url": "https://github.com/rovo89/android_art/commit/af77455c67e811719ddc9476ff334469e7650b3a",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved partially inlining the stub check to reduce function call overhead and improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ewig",
        "hash": "618671dc7c20941921d7170666a119ed5009e43d",
        "author": "Juan Pedro Bolivar Puente",
        "date": "2017-04-11T10:06:25+02:00",
        "message": "Make code build with new immer changes\n\nAlso use the new `immer::copy` function for improved performance.",
        "modified_files_count": 1,
        "modified_files": [
            "src/ewig/main.cpp"
        ],
        "github_commit_url": "https://github.com/arximboldi/ewig/commit/618671dc7c20941921d7170666a119ed5009e43d",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved using the `immer::copy` function to improve performance by leveraging a more efficient copying mechanism.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sysrepo",
        "hash": "88863fcecaa51c4563434e52b22dc2387d13279d",
        "author": "Michal Vasko",
        "date": "2024-12-17T15:19:08+01:00",
        "message": "edit diff OPTIMIZE do not duplicate origin",
        "modified_files_count": 1,
        "modified_files": [
            "src/edit_diff.c"
        ],
        "github_commit_url": "https://github.com/sysrepo/sysrepo/commit/88863fcecaa51c4563434e52b22dc2387d13279d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "sr_edit_diff_set_origin"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids duplicating the origin data to reduce unnecessary memory usage and copying overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "simdjson",
        "hash": "52406402ed1f8ff246b18ddcfced9d2f4e98ccc9",
        "author": "Daniel Lemire",
        "date": "2024-05-01T14:53:48-04:00",
        "message": "fix: replace vm*vq_u8 by vm*vq_u32 for better performance under some systems.",
        "modified_files_count": 1,
        "modified_files": [
            "include/simdjson/arm64/simd.h"
        ],
        "github_commit_url": "https://github.com/simdjson/simdjson/commit/52406402ed1f8ff246b18ddcfced9d2f4e98ccc9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "any"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing `vm*vq_u8` with `vm*vq_u32` to improve performance under certain systems by leveraging wider vector operations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "parallel-n64",
        "hash": "f0accf683ecf8e5056c08ce927af084ba7e218f0",
        "author": "unknown",
        "date": "2015-07-28T14:56:16-04:00",
        "message": "Decode register specifier `rs` only when necessary (faster NOP).",
        "modified_files_count": 1,
        "modified_files": [
            "mupen64plus-rsp-cxd4/execute.h"
        ],
        "github_commit_url": "https://github.com/libretro/parallel-n64/commit/f0accf683ecf8e5056c08ce927af084ba7e218f0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "run_task"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves decoding the register specifier `rs` only when necessary, reducing unnecessary operations in the NOP (no operation) case.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "cmssw",
        "hash": "3e65652444b6e2df73f5acb813f4b4d1136ae81a",
        "author": "Vincenzo Innocente",
        "date": "2012-09-16T10:49:28+00:00",
        "message": "% faster then lookup",
        "modified_files_count": 1,
        "modified_files": [
            "Geometry/TrackerGeometryBuilder/interface/RectangularPixelTopology.h"
        ],
        "github_commit_url": "https://github.com/cms-sw/cmssw/commit/3e65652444b6e2df73f5acb813f4b4d1136ae81a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "isItBigPixelInY"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing a slower lookup-based method with a faster direct calculation to determine if a pixel is a big pixel in the Y dimension.",
        "is_generic_optimization": true
    },
    {
        "hash": "5b2f6d9cd50b1c8909326c7175aef288a9915f33",
        "author": "Denton Liu",
        "date": "2020-04-07T16:57:30-07:00",
        "message": "sequencer: make file exists check more efficient\n\nWe currently check whether a file exists and return early before reading\nthe file. Instead of accessing the file twice, always read the file and\ncheck `errno` to see if the file doesn't exist.\n\nSigned-off-by: Denton Liu <liu.denton@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
        "modified_files_count": 1,
        "modified_files": [
            "sequencer.c"
        ],
        "github_commit_url": "https://github.com/git/git/commit/5b2f6d9cd50b1c8909326c7175aef288a9915f33",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "read_oneliner"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "git",
        "optimization_summary": "The optimization strategy reduces redundant file access by reading the file directly and checking `errno` for existence instead of performing a separate existence check.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "scribus",
        "hash": "551a34ccf2da24852acce3feae808ed1c30550d9",
        "author": "Jean Ghali",
        "date": "2021-12-15T23:23:55+00:00",
        "message": "Small performance optimization\n\ngit-svn-id: svn://scribus.net/trunk/Scribus@24780 11d20701-8431-0410-a711-e3c959e3b870",
        "modified_files_count": 1,
        "modified_files": [
            "scribus/util_text.cpp"
        ],
        "github_commit_url": "https://github.com/scribusproject/scribus/commit/551a34ccf2da24852acce3feae808ed1c30550d9",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The commit likely reduces overhead by changing value-based loop iteration to reference-based iteration to minimize unnecessary copying.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "gcc",
        "hash": "c7fd6c4369ef1a009b40c1787ea9d2dad2cf449f",
        "author": "Andrew MacLeod",
        "date": "2024-12-06T16:41:19-05:00",
        "message": "Only add inferred ranges if they change the value.\n\nDo not add an inferred range if it is already incorprated in the\ncurrent range of an SSA_NAME.\n\n\tPR tree-optimization/117467\n\t* gimple-range-infer.cc (infer_range_manager::add_ranges): Check\n\trange_of_expr to see if the inferred range is needed.",
        "modified_files_count": 1,
        "modified_files": [
            "gcc/gimple-range-infer.cc"
        ],
        "github_commit_url": "https://github.com/gcc-mirror/gcc/commit/c7fd6c4369ef1a009b40c1787ea9d2dad2cf449f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "infer_range_manager::add_ranges"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves avoiding redundant range additions by checking if the inferred range is already incorporated in the current range of an SSA_NAME.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "KeyDB",
        "hash": "61ba83b75b6cf3d9b11069cc78a60aeb355d9785",
        "author": "antirez",
        "date": "2014-05-07T16:12:32+02:00",
        "message": "Scripting: simpler reply buffer creation in luaRedisGenericCommand().\n\nIt if faster to just create the string with a single sdsnewlen() call.\nIf c->bufpos is zero, the call will simply be like sdsemtpy().",
        "modified_files_count": 1,
        "modified_files": [
            "src/scripting.c"
        ],
        "github_commit_url": "https://github.com/Snapchat/KeyDB/commit/61ba83b75b6cf3d9b11069cc78a60aeb355d9785",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "luaRedisGenericCommand"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaces multiple string creation calls with a single `sdsnewlen()` call to simplify and speed up reply buffer creation in `luaRedisGenericCommand()`.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "stress-ng",
        "hash": "1b7ce6062adbf0ea37140dd1cafd9131ee4d63a9",
        "author": "Colin Ian King",
        "date": "2021-01-24T13:09:45+00:00",
        "message": "Force keep_stressing_flag to always be inlined\n\nperf is showing that the helper function in some cases is not being\ninlined and resulting in a performance impact on call/returns. Force\nit to be inlined.\n\nSigned-off-by: Colin Ian King <colin.king@canonical.com>",
        "modified_files_count": 1,
        "modified_files": [
            "stress-ng.h"
        ],
        "github_commit_url": "https://github.com/ColinIanKing/stress-ng/commit/1b7ce6062adbf0ea37140dd1cafd9131ee4d63a9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "keep_stressing_flag"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used is forcing the inlining of a helper function to reduce call/return overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "FastDoom",
        "hash": "3debe3a8ecea6186375a54ee7a93282fd98fcf17",
        "author": "viti95",
        "date": "2021-03-24T22:19:02+01:00",
        "message": "Small optimization for 16 colors LUT calculation",
        "modified_files_count": 1,
        "modified_files": [
            "i_ibm.c"
        ],
        "github_commit_url": "https://github.com/viti95/FastDoom/commit/3debe3a8ecea6186375a54ee7a93282fd98fcf17",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "I_SetPalette"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization reduces overhead in the 16-color LUT calculation by streamlining the palette setting process.",
        "is_generic_optimization": true
    },
    {
        "hash": "d5699e0b08f9892f19021e453e98ab008cae753c",
        "author": "Tyler Rockwood",
        "date": "2024-02-06T11:50:14-06:00",
        "message": "fragmented_vector: improve memory_size calculation\n\nAccount for chunked_vector\n\nSigned-off-by: Tyler Rockwood <rockwood@redpanda.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/v/container/include/container/fragmented_vector.h"
        ],
        "github_commit_url": "https://github.com/redpanda-data/redpanda/commit/d5699e0b08f9892f19021e453e98ab008cae753c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "memory_size"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "redpanda",
        "optimization_summary": "The optimization strategy involved improving the `memory_size` calculation to account for `chunked_vector`, likely reducing redundant or inefficient memory usage calculations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "dte",
        "hash": "3ad41d654c936bc81e092ffd98ecaedcb643d850",
        "author": "Craig Barnes",
        "date": "2023-02-22T10:25:47+00:00",
        "message": "Implement get_indent_width() without using get_indent_info()\n\nThis makes the generated code considerably more efficient.",
        "modified_files_count": 1,
        "modified_files": [
            "src/indent.c"
        ],
        "github_commit_url": "https://github.com/craigbarnes/dte/commit/3ad41d654c936bc81e092ffd98ecaedcb643d850",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "get_indent_width"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing the use of `get_indent_info()` with a more direct and efficient implementation in `get_indent_width()` to reduce overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "mppp",
        "hash": "0dad166a5c9bc7092f99e55baaec235d077db9ab",
        "author": "Francesco Biscani",
        "date": "2017-07-03T22:56:36+02:00",
        "message": "Improve test performance by avoiding string conversions.",
        "modified_files_count": 1,
        "modified_files": [
            "test/integer_arith.cpp"
        ],
        "github_commit_url": "https://github.com/bluescarni/mppp/commit/0dad166a5c9bc7092f99e55baaec235d077db9ab",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids unnecessary string conversions to improve test performance.",
        "is_generic_optimization": true
    },
    {
        "hash": "eab4b8aa34fc64e3a91358e1612e6d059396193b",
        "author": "Avi Kivity",
        "date": "2009-09-10T08:33:21+03:00",
        "message": "KVM: VMX: Optimize vmx_get_cpl()\n\nInstead of calling vmx_get_segment() (which reads a whole bunch of\nvmcs fields), read only the cs selector which contains the cpl.\n\nSigned-off-by: Avi Kivity <avi@redhat.com>",
        "modified_files_count": 1,
        "modified_files": [
            "arch/x86/kvm/vmx.c"
        ],
        "github_commit_url": "https://github.com/OnePlusOSS/android_kernel_oneplus_msm8998/commit/eab4b8aa34fc64e3a91358e1612e6d059396193b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "vmx_get_cpl"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "android_kernel_oneplus_msm8998",
        "optimization_summary": "The optimization strategy involves reading only the necessary cs selector field instead of calling a function that reads multiple vmcs fields to retrieve the cpl.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "851c941b8b596e7e2914b00795c32e285668b389",
        "author": "Benjamin Kramer",
        "date": "2012-09-09T11:56:14+00:00",
        "message": "LiveVariables: Compute a set of defs and kills to speed up updating LV during critical edge splitting.\n\nPreviously we checked if the register is def'd in a block via the def/use list a\nnd walked the list of kills to check if the register is killed in a block. Both\nof these checks can be made much cheaper by walking the block first and\nrecording all defs and kills.\n\nThis reduces the compile time of the test case from PR13651 from 40s to 15s at\n-O2. The compile time is still dominated by LV updating but now the main culprit\nis SparseBitVector's slowness.\n\nllvm-svn: 163478",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/CodeGen/LiveVariables.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/851c941b8b596e7e2914b00795c32e285668b389",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves precomputing and recording all defs and kills in a block to reduce the cost of checking if a register is def'd or killed, thereby speeding up the live variables update process during critical edge splitting.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Floorp",
        "hash": "d4346abfe3871e36bac55487d968502db1471545",
        "author": "Jonathan Kew",
        "date": "2017-09-20T10:10:01+01:00",
        "message": "Bug 1377515 - Use GetFontTable rather than CopyFontTable in gfxDWriteFontEntry::IsCJKFont() to try and avoid copying. r=bas",
        "modified_files_count": 1,
        "modified_files": [
            "gfx/thebes/gfxDWriteFontList.cpp"
        ],
        "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/d4346abfe3871e36bac55487d968502db1471545",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "gfxDWriteFontEntry::IsCJKFont"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing `CopyFontTable` with `GetFontTable` to avoid unnecessary copying of font data.",
        "is_generic_optimization": true
    },
    {
        "hash": "3e9ba6684d5ac9c48a1741566b1c1ce781e77125",
        "author": "Milian Wolff",
        "date": "2013-09-24T18:51:33+02:00",
        "message": "Optimize ConnectionModel::connectionRemoved by two orders of magnitude\n\nQVector in Qt4 does not move objects when erasing, even though\nConnection is marked as movable. To workaround this issue, we swap\nwith the last entry and pop from the back which is cheap.\n\n********* Start testing of GammaRay::BenchSuite *********\nConfig: Using QTest library 4.8.5, Qt 4.8.5\nPASS   : GammaRay::BenchSuite::initTestCase()\nRESULT : GammaRay::BenchSuite::connectionModel_connectionRemoved():\n     95 msecs per iteration (total: 95, iterations: 1)\nPASS   : GammaRay::BenchSuite::connectionModel_connectionRemoved()\nPASS   : GammaRay::BenchSuite::cleanupTestCase()\nTotals: 3 passed, 0 failed, 0 skipped\n********* Finished testing of GammaRay::BenchSuite *********\n\n Performance counter stats for './bin/benchsuite connectionModel_connectionRemoved':\n\n        404.448500 task-clock                #    0.991 CPUs utilized\n               112 context-switches          #    0.277 K/sec\n                 6 cpu-migrations            #    0.015 K/sec\n            12,756 page-faults               #    0.032 M/sec\n     1,138,930,126 cycles                    #    2.816 GHz                     [49.29%]\n   <not supported> stalled-cycles-frontend\n   <not supported> stalled-cycles-backend\n     1,464,750,989 instructions              #    1.29  insns per cycle         [74.73%]\n       367,314,247 branches                  #  908.185 M/sec                   [75.32%]\n         4,651,435 branch-misses             #    1.27% of all branches         [75.41%]\n\n       0.408093680 seconds time elapsed",
        "modified_files_count": 1,
        "modified_files": [
            "core/connectionmodel.cpp"
        ],
        "github_commit_url": "https://github.com/KDAB/GammaRay/commit/3e9ba6684d5ac9c48a1741566b1c1ce781e77125",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ConnectionModel::connectionRemovedMainThread"
        ],
        "is_opt_ds": "true",
        "is_opt_ds_simple": "true",
        "repository_name": "GammaRay",
        "optimization_summary": "The optimization strategy involves swapping the target element with the last element in a QVector and then popping the last element to avoid the high cost of erasing elements in the middle of the container.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "rusefi",
        "hash": "0f749322d03b1f13e7d9202d571da46b29ce32b4",
        "author": "Andrey Gusakov",
        "date": "2024-07-29T09:21:47-04:00",
        "message": "drivers: w25q: speedup a bit, timeout exit",
        "modified_files_count": 1,
        "modified_files": [
            "firmware/hw_layer/drivers/flash/w25q/hal_flash_device.c"
        ],
        "github_commit_url": "https://github.com/rusefi/rusefi/commit/0f749322d03b1f13e7d9202d571da46b29ce32b4",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "w25q_poll_status"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves speeding up the process by implementing a timeout exit in the status polling function to reduce unnecessary waiting.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "prboom-plus-rt",
        "hash": "de202d8ac5235c11f6e64d2e398a471c0a14a72c",
        "author": "entryway",
        "date": "2006-08-08T06:59:47+00:00",
        "message": "R_ShowStats() was rewritten. Now this function is faster and more universal. There is no more a static array and copying of memory.",
        "modified_files_count": 1,
        "modified_files": [
            "prboom2/src/r_main.c"
        ],
        "github_commit_url": "https://github.com/sultim-t/prboom-plus-rt/commit/de202d8ac5235c11f6e64d2e398a471c0a14a72c",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing a static array and memory copying in the `R_ShowStats()` function to improve speed and universality.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "otter-browser",
        "hash": "8dda7673a6f5bdd2d1277ede696b57499e1b9bc3",
        "author": "Michał Dutkiewicz",
        "date": "2017-05-31T21:16:35+02:00",
        "message": "Add missing optimization flag",
        "modified_files_count": 1,
        "modified_files": [
            "src/modules/windows/passwords/PasswordsContentsWidget.cpp"
        ],
        "github_commit_url": "https://github.com/OtterBrowser/otter-browser/commit/8dda7673a6f5bdd2d1277ede696b57499e1b9bc3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "PasswordsContentsWidget::populatePasswords"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved adding a missing optimization flag to improve compilation efficiency.",
        "is_generic_optimization": true
    },
    {
        "hash": "0e4ca37c2581f6e449c193612e77657c4dd87865",
        "author": "Niclas Schwalbe",
        "date": "2021-11-07T14:50:07+08:00",
        "message": "[misc] Update \"get_largest_pot\" in scalar.h + Bug Fix (#3405)\n\n* Update scalar.h\r\n\r\nFind the largest potence faster.\r\n\r\n* Update scalar.h\r\n\r\n* Update scalar.h\r\n\r\nFixed a bug\r\n\r\n* Update scalar.h\r\n\r\nManually edited formatting errors.\r\n\r\n* Update scalar.h\r\n\r\nretry workflow\r\n\r\n* Create scalar.h\r\n\r\nretry workflow",
        "modified_files_count": 1,
        "modified_files": [
            "taichi/math/scalar.h"
        ],
        "github_commit_url": "https://github.com/taichi-dev/taichi/commit/0e4ca37c2581f6e449c193612e77657c4dd87865",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "get_largest_pot"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "taichi",
        "optimization_summary": "The optimization strategy involves improving the algorithm to find the largest power of two more efficiently.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "pioneer",
        "hash": "1dbd9fd1d1242d73744ae2b1a08570528c3370a6",
        "author": "mr555",
        "date": "2015-06-15T01:35:22+03:00",
        "message": "Allow faster rotating stations",
        "modified_files_count": 1,
        "modified_files": [
            "src/galaxy/StarSystemGenerator.cpp"
        ],
        "github_commit_url": "https://github.com/pioneerspacesim/pioneer/commit/1dbd9fd1d1242d73744ae2b1a08570528c3370a6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "PopulateStarSystemGenerator::PopulateAddStations"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the efficiency of station rotation calculations by reducing redundant computations and leveraging precomputed values.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "stockfish.wasm",
        "hash": "68fbb1e0522056e0ab8062fe68c26b3af5cffed3",
        "author": "mstembera",
        "date": "2015-09-17T17:33:40-07:00",
        "message": "Reduce writes in TT::probe().\n\nOnly refresh TT entry when it's really necessary.\nThis should give a small speed boost for some machines.\nAnd it's a risk-free change.\n\nNo functional change.\n\nResolves #429",
        "modified_files_count": 1,
        "modified_files": [
            "src/tt.cpp"
        ],
        "github_commit_url": "https://github.com/lichess-org/stockfish.wasm/commit/68fbb1e0522056e0ab8062fe68c26b3af5cffed3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "TranspositionTable::probe"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization reduces unnecessary writes to the transposition table by only refreshing entries when absolutely necessary.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "metamage_1",
        "hash": "c5e041aa691b847b590db211c08fe8b23498833a",
        "author": "Josh Juran",
        "date": "2014-03-21T02:56:37-07:00",
        "message": "v68k:  Refactor decode_ADD_SUB() for efficiency",
        "modified_files_count": 1,
        "modified_files": [
            "engines/v68k/v68k/decode.cc"
        ],
        "github_commit_url": "https://github.com/jjuran/metamage_1/commit/c5e041aa691b847b590db211c08fe8b23498833a",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy refactored the `decode_ADD_SUB()` function to improve efficiency, likely by reducing redundant operations or improving control flow.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "MonetDB",
        "hash": "2be1b9e49b4b3ca085757d5314320a5d35e75100",
        "author": "Pedro Ferreira",
        "date": "2021-07-06T13:04:37+02:00",
        "message": "Small optimization, test if the next dependency exists in the storage before adding",
        "modified_files_count": 1,
        "modified_files": [
            "sql/storage/store.c"
        ],
        "github_commit_url": "https://github.com/MonetDB/MonetDB/commit/2be1b9e49b4b3ca085757d5314320a5d35e75100",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "transaction_add_hash_entry"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves checking for the existence of the next dependency in storage before adding it to avoid unnecessary operations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "zstd",
        "hash": "1bee2d5e08208b01e496efa55c36c28422eaf35f",
        "author": "Yann Collet",
        "date": "2016-08-20T02:59:04+02:00",
        "message": "slight decompression speed improvement",
        "modified_files_count": 1,
        "modified_files": [
            "lib/decompress/zstd_decompress.c"
        ],
        "github_commit_url": "https://github.com/facebook/zstd/commit/1bee2d5e08208b01e496efa55c36c28422eaf35f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ZSTD_execSequence"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing the number of memory copies during decompression by reusing existing buffers.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "php-src",
        "hash": "5d20a8f80193685877ae3c57e676240e6f2384b3",
        "author": "Felipe Pena",
        "date": "2011-07-10T02:00:00+00:00",
        "message": "- Minor optimization, use the computed hash when available",
        "modified_files_count": 1,
        "modified_files": [
            "Zend/zend_API.c"
        ],
        "github_commit_url": "https://github.com/php/php-src/commit/5d20a8f80193685877ae3c57e676240e6f2384b3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "zend_register_functions"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reusing a precomputed hash value instead of recalculating it, reducing redundant computations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ceph",
        "hash": "f5a7a3b1dc4088be4ca1a845832c76e60446ba64",
        "author": "Piotr Dałek",
        "date": "2015-12-07T14:26:33+01:00",
        "message": "mon/MonitorDBStore: use single-key LevelDB::get() method\n\nMake MonitorDBStore use single-key ::get() method for some performance\nincrease in heavy K/V workloads.\n\nSigned-off-by: Piotr Dałek <piotr.dalek@ts.fujitsu.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/mon/MonitorDBStore.h"
        ],
        "github_commit_url": "https://github.com/ceph/ceph/commit/f5a7a3b1dc4088be4ca1a845832c76e60446ba64",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "get"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved switching to a single-key LevelDB::get() method to improve performance in heavy key/value workloads.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "darktable",
        "hash": "76ca7db7dbf9e324da3823fafd03e138b53c3415",
        "author": "Rostyslav Pidgornyi",
        "date": "2011-09-09T19:21:35+03:00",
        "message": "make gcc 4.5 happier with artous.c optimization\n\ntriggers better optimization for gcc 4.5 of artous plugin\ndoesn't change anything for 4.6",
        "modified_files_count": 1,
        "modified_files": [
            "src/iop/atrous.c"
        ],
        "github_commit_url": "https://github.com/darktable-org/darktable/commit/76ca7db7dbf9e324da3823fafd03e138b53c3415",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "eaw_decompose"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved modifying code to trigger better compiler optimizations for GCC 4.5 in the artous plugin.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "cel-cpp",
        "hash": "bf7c7913a23289a2ead345fa45083b1cda5875ba",
        "author": "Justin King",
        "date": "2024-02-09T12:57:09-08:00",
        "message": "Avoid copying from the value stack in `container_access_step.cc`\n\nPiperOrigin-RevId: 605708781",
        "modified_files_count": 1,
        "modified_files": [
            "eval/eval/container_access_step.cc"
        ],
        "github_commit_url": "https://github.com/google/cel-cpp/commit/bf7c7913a23289a2ead345fa45083b1cda5875ba",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids copying values from the value stack to reduce overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "forestdb",
        "hash": "906231e9e8a5bfdcf5c5aa2e7474e405895f2351",
        "author": "Sundar Sridharan",
        "date": "2016-05-20T22:02:38+00:00",
        "message": "MB-19390: Measure timing correctly on Windows\n\nUse QueryPerformanceCounter to get high resolution\nclock ticks as opposed to GetTickCount64() which has\nresolution only in milliseconds on Windows.\n\nChange-Id: I6c081fb6b4dfea5584d2077e26f0445952dbb96c\nReviewed-on: http://review.couchbase.org/64259\nReviewed-by: Chiyoung Seo <chiyoung@couchbase.com>\nTested-by: buildbot <build@couchbase.com>",
        "modified_files_count": 1,
        "modified_files": [
            "utils/time_utils.cc"
        ],
        "github_commit_url": "https://github.com/couchbase/forestdb/commit/906231e9e8a5bfdcf5c5aa2e7474e405895f2351",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "get_monotonic_ts"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing `GetTickCount64()` with `QueryPerformanceCounter` to achieve higher resolution timing on Windows.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "qrack",
        "hash": "4c9edd9f1956aa133b71aeabc878fef9ba4b1c30",
        "author": "Dan Strano",
        "date": "2023-06-12T09:04:25-04:00",
        "message": "Optimize QStabilizerHybrid::ForceM()",
        "modified_files_count": 1,
        "modified_files": [
            "src/qstabilizerhybrid.cpp"
        ],
        "github_commit_url": "https://github.com/unitaryfund/qrack/commit/4c9edd9f1956aa133b71aeabc878fef9ba4b1c30",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "IS_SAME"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing redundant comparisons in the IS_SAME function by leveraging precomputed values and simplifying the logic.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kicad-source-mirror",
        "hash": "21900ad3e13e8533e85f4c2c21c4e56c1de9bb65",
        "author": "Seth Hillbrand",
        "date": "2024-07-21T07:23:00-07:00",
        "message": "Maintain std::move to avoid copy penalty\n\nCaching lib models is a slow point when loading libraries when many\nfootprints have embedded models.  We want to speed this by not copying\ndata unneccesarily.  Some compilers will invalidate the models structure\nright-to-left in the function call (the order is unspecified by the\nstandard), leading to broken model names unless we cache the name before\nhand.",
        "modified_files_count": 1,
        "modified_files": [
            "pcbnew/pcb_io/altium/altium_pcb_compound_file.cpp"
        ],
        "github_commit_url": "https://github.com/KiCad/kicad-source-mirror/commit/21900ad3e13e8533e85f4c2c21c4e56c1de9bb65",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ALTIUM_PCB_COMPOUND_FILE::CacheLibModels"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used std::move to avoid unnecessary copying of data, particularly in the caching of library models.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "opencryptoki",
        "hash": "a66bbe321045dd1fb64302aad7ba1b2749a37226",
        "author": "Ingo Franzki",
        "date": "2024-02-09T14:02:18+01:00",
        "message": "ICSF: Optimize C_GetAttributeValue by using cached result\n\nFunction icsftok_get_attribute_value() is called during C_GetAttributeValue and\nit might need to obtain the attributes from ICSF twice. Cache the retrieved\nattributes from the first retrieval for the second one.\n\nSigned-off-by: Ingo Franzki <ifranzki@linux.ibm.com>",
        "modified_files_count": 1,
        "modified_files": [
            "usr/lib/icsf_stdll/icsf_specific.c"
        ],
        "github_commit_url": "https://github.com/opencryptoki/opencryptoki/commit/a66bbe321045dd1fb64302aad7ba1b2749a37226",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "icsftok_get_attribute_value"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves caching retrieved attributes to avoid redundant attribute retrieval during subsequent calls to the same function.",
        "is_generic_optimization": true
    },
    {
        "hash": "da966809fdbcab05d8929528153d834fe5a7246d",
        "author": "Jeremie Gaidamour",
        "date": "2011-06-30T11:14:08-06:00",
        "message": "MueLu Aggregation: Minor optimization: use the Importer twice instead of creating an Exporter for the second communication",
        "modified_files_count": 1,
        "modified_files": [
            "packages/muelu/src/Graph/MueLu_UCAggregationCommHelper.hpp"
        ],
        "github_commit_url": "https://github.com/trilinos/Trilinos/commit/da966809fdbcab05d8929528153d834fe5a7246d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ArbitrateAndCommunicate"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "Trilinos",
        "optimization_summary": "The optimization strategy involves reusing an existing Importer for communication instead of creating a new Exporter, reducing overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "hhvm",
        "hash": "a5cbc97a81c4f50212c2fd8feccb1c31b812c179",
        "author": "Nicolas De Carli",
        "date": "2024-12-06T02:54:23-08:00",
        "message": "Optimize writeVarintSlow for aarch64\n\nSummary:\nCompress writeVarintSlow into a loop.\n\nBenchmarks show 1% to 25% improvement, depending on the case.\n\nBefore: P1687797106\n\nAfter: P1687797268\n\nReviewed By: psaab\n\nDifferential Revision: D66547873\n\nfbshipit-source-id: f4f6084818c807371eb47eb32da7629424de00f1",
        "modified_files_count": 1,
        "modified_files": [
            "third-party/thrift/src/thrift/lib/cpp/util/VarintUtils-inl.h"
        ],
        "github_commit_url": "https://github.com/facebook/hhvm/commit/a5cbc97a81c4f50212c2fd8feccb1c31b812c179",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "writeVarintSlow"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved compressing the `writeVarintSlow` function into a loop to improve performance on aarch64 architecture.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sycl",
        "hash": "1d068cc0b07694799e077b28dbd272b7982727e2",
        "author": "Chris Lattner",
        "date": "2011-05-22T04:53:24+00:00",
        "message": "switch to using a smallvector to avoid allocations for most normal size instructions.\n\nllvm-svn: 131837",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/MC/MCDisassembler/Disassembler.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/1d068cc0b07694799e077b28dbd272b7982727e2",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "LLVMDisasmInstruction"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved switching to using a SmallVector to avoid heap allocations for most normal-sized instructions.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "fbthrift",
        "hash": "9187dd90a98254d7b40a1e50e95d20e5562565fc",
        "author": "Dave Kwon",
        "date": "2024-04-26T19:26:59-07:00",
        "message": "Refactor `emplace_back_default` to avoid default ctor for emplace_back when allocator is not used\n\nSummary:\nThis avoid default ctor for cases where allocator is not used so that we can avoid 1 move ctor and 1 dtor. Therefore, we see big improvement in `LargeListMixed ` about ~11% in deserialization.\n\nBenchmark:\nWith fdo turned off\n```\n// before\n=============================================================================================\nfbcode/thrift/lib/cpp2/test/ProtocolBench.cpp     relative  time/iter   iters/s  serialized_size\n=============================================================================================\nBinaryProtocol_read_SmallListInt                                            37.18ns    26.90M               49\nBinaryProtocol_read_BigListInt                                              20.04us    49.89K            40009\nBinaryProtocol_read_BigListMixed                                           456.61us     2.19K           500009\nBinaryProtocol_read_BigListMixedInt                                        280.56us     3.56K           850009\nBinaryProtocol_read_LargeListMixed                                          56.48ms     17.71         50000009\nOpEncodeBinaryProtocol_read_SmallListInt                                    36.91ns    27.09M               49\nOpEncodeBinaryProtocol_read_BigListInt                                      19.45us    51.41K            40009\nOpEncodeBinaryProtocol_read_BigListMixed                                   461.38us     2.17K           500009\nOpEncodeBinaryProtocol_read_BigListMixedInt                                268.13us     3.73K           850009\nOpEncodeBinaryProtocol_read_LargeListMixed                                  55.58ms     17.99         50000009\n=============================================================================================\n```\nvs\n```\n//after\n=============================================================================================\nfbcode/thrift/lib/cpp2/test/ProtocolBench.cpp     relative  time/iter   iters/s  serialized_size\n=============================================================================================\nBinaryProtocol_read_SmallListInt                                            38.50ns    25.97M               49\nBinaryProtocol_read_BigListInt                                              20.78us    48.13K            40009\nBinaryProtocol_read_BigListMixed                                           449.85us     2.22K           500009\nBinaryProtocol_read_BigListMixedInt                                        274.56us     3.64K           850009\nBinaryProtocol_read_LargeListMixed                                          51.57ms     19.39         50000009\nOpEncodeBinaryProtocol_read_SmallListInt                                    36.17ns    27.64M               49\nOpEncodeBinaryProtocol_read_BigListInt                                      19.73us    50.68K            40009\nOpEncodeBinaryProtocol_read_BigListMixed                                   410.18us     2.44K           500009\nOpEncodeBinaryProtocol_read_BigListMixedInt                                266.42us     3.75K           850009\nOpEncodeBinaryProtocol_read_LargeListMixed                                  50.09ms     19.96         50000009\n=============================================================================================\n```\n\nReviewed By: yfeldblum\n\nDifferential Revision: D56656403\n\nfbshipit-source-id: e473c2cc1127490fa554ffc174e0ae72def17167",
        "modified_files_count": 1,
        "modified_files": [
            "thrift/lib/cpp2/protocol/detail/protocol_methods.h"
        ],
        "github_commit_url": "https://github.com/facebook/fbthrift/commit/9187dd90a98254d7b40a1e50e95d20e5562565fc",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "emplace_back_default"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids the default constructor for `emplace_back` when the allocator is not used, reducing overhead from a move constructor and destructor.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "rapidjson",
        "hash": "b67ff2fb11307dfe03926f5433175fb67072cc64",
        "author": "fuzhufang",
        "date": "2016-07-14T17:50:48+08:00",
        "message": "if define RAPIDJSON_HAS_STDSTRING, FindMember use std::string, but it\nalso use internal::StrLen to get the string lengtht,\nwhen it call FindMember(StringRef(name)).\nNow use GenericValue construct it, then can use the std::string.size.\nnow it will be faster.",
        "modified_files_count": 1,
        "modified_files": [
            "include/rapidjson/document.h"
        ],
        "github_commit_url": "https://github.com/Tencent/rapidjson/commit/b67ff2fb11307dfe03926f5433175fb67072cc64",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "FindMember"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaces the use of `internal::StrLen` with `std::string::size` to directly obtain the string length, improving performance by avoiding redundant length calculations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "plasma-workspace",
        "hash": "4d7022837c838191f6a1a5ebab52ff25aa02ae24",
        "author": "Eike Hein",
        "date": "2014-05-02T14:01:29+02:00",
        "message": "More efficient runner matches model updates.",
        "modified_files_count": 1,
        "modified_files": [
            "runnermatchesmodel.cpp"
        ],
        "github_commit_url": "https://github.com/KDE/plasma-workspace/commit/4d7022837c838191f6a1a5ebab52ff25aa02ae24",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "RunnerMatchesModel::setMatches"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the efficiency of updating matches in the RunnerMatchesModel by reducing unnecessary computations and memory allocations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ain",
        "hash": "28caf97f02c72e4ab39645be8203adc5bb015718",
        "author": "lucash.dev@gmail.com",
        "date": "2018-06-06T06:50:25-07:00",
        "message": "speed up of tx_validationcache_tests by reusing of CTransaction.\n\nThe code was converting CMutableTransaction to CTransaction multiple times, which implies recalculating the hash multiple times. This commit fixes this by reusing a single CTransaction.",
        "modified_files_count": 1,
        "modified_files": [
            "src/test/txvalidationcache_tests.cpp"
        ],
        "github_commit_url": "https://github.com/DeFiCh/ain/commit/28caf97f02c72e4ab39645be8203adc5bb015718",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ValidateCheckInputsForAllFlags"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reusing a single CTransaction instance to avoid redundant hash recalculations caused by multiple conversions from CMutableTransaction.",
        "is_generic_optimization": true
    },
    {
        "hash": "6994dd82c4f8c3f686f73801fc92a859a5eecb7f",
        "author": "Josh Coalson",
        "date": "2001-04-18T02:21:21+00:00",
        "message": "minor speed optimization",
        "modified_files_count": 1,
        "modified_files": [
            "src/libFLAC/encoder_framing.c"
        ],
        "github_commit_url": "https://github.com/xiph/flac/commit/6994dd82c4f8c3f686f73801fc92a859a5eecb7f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "subframe_add_residual_partitioned_rice_"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "flac",
        "optimization_summary": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sysrepo",
        "hash": "428ecf89d76422312025f06b5575a5d5ce747e00",
        "author": "Michal Vasko",
        "date": "2023-08-10T09:54:37+02:00",
        "message": "sysrepo OPTIMIZE skip discard changes if redundant\n\nAvoid all the locks and code is there are no\nstored oper changes for a connection.",
        "modified_files_count": 1,
        "modified_files": [
            "src/sysrepo.c"
        ],
        "github_commit_url": "https://github.com/sysrepo/sysrepo/commit/428ecf89d76422312025f06b5575a5d5ce747e00",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "sr_discard_oper_changes"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids unnecessary locks and code execution by skipping the discard changes operation if there are no stored operational changes for a connection.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "KeyDB",
        "hash": "05f0492a035e530c5aa69b75d109bab5c184e542",
        "author": "antirez",
        "date": "2013-03-09T11:48:54+01:00",
        "message": "Optimize inner loop of activeExpireCycle() for no-expires case.",
        "modified_files_count": 1,
        "modified_files": [
            "src/redis.c"
        ],
        "github_commit_url": "https://github.com/Snapchat/KeyDB/commit/05f0492a035e530c5aa69b75d109bab5c184e542",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "activeExpireCycle"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization reduces unnecessary iterations in the inner loop of the `activeExpireCycle()` function when there are no keys to expire.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "0954d4199a2387b23234a60cf4cd4b4854ce6f71",
        "author": "Jakob Stoklund Olesen",
        "date": "2012-08-10T20:11:38+00:00",
        "message": "Include loop-carried dependencies when computing instr heights.\n\nWhen a trace ends with a back-edge, include PHIs in the loop header in\nthe height computations. This makes the critical path through a loop\nmore accurate by including the latencies of the last instructions in the\nloop.\n\nllvm-svn: 161688",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/CodeGen/MachineTraceMetrics.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/0954d4199a2387b23234a60cf4cd4b4854ce6f71",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves improving the accuracy of critical path calculations in loops by including loop-carried dependencies and PHI nodes in the loop header when computing instruction heights.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "hurd",
        "hash": "9b3a87f37c4e829386ceb10de974d409a31adcf7",
        "author": "Samuel Thibault",
        "date": "2013-08-28T23:20:41+02:00",
        "message": "Optimize translator string copy\n\n* libnetfs/file-get-translator.c (netfs_S_file_get_translator): Call memcpy\ninstead of memmove.",
        "modified_files_count": 1,
        "modified_files": [
            "libnetfs/file-get-translator.c"
        ],
        "github_commit_url": "https://github.com/joshumax/hurd/commit/9b3a87f37c4e829386ceb10de974d409a31adcf7",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "netfs_S_file_get_translator"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used was replacing `memmove` with `memcpy` to avoid the overhead of handling overlapping memory regions when copying strings.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kernel_xiaomi_sm8250",
        "hash": "dc5e65028a8e43432829bd0546ee14935a3cd415",
        "author": "Mark-PK Tsai",
        "date": "2024-03-29T01:35:10+02:00",
        "message": "zram: use copy_page for full page copy\nSome architectures, such as arm, have implemented optimized copy_page for\nfull page copying.\n\nReplace the full page memcpy with copy_page to take advantage of the\noptimization.\n\nLink: https://lkml.kernel.org/r/20231007070554.8657-1-mark-pk.tsai@mediatek.com\nSigned-off-by: Mark-PK Tsai <mark-pk.tsai@mediatek.com>\nReviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>\nCc: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>\nCc: Jens Axboe <axboe@kernel.dk>\nCc: Matthias Brugger <matthias.bgg@gmail.com>\nCc: Minchan Kim <minchan@kernel.org>\nCc: YJ Chiang <yj.chiang@mediatek.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
        "modified_files_count": 1,
        "modified_files": [
            "drivers/block/zram/zram_drv.c"
        ],
        "github_commit_url": "https://github.com/EmanuelCN/kernel_xiaomi_sm8250/commit/dc5e65028a8e43432829bd0546ee14935a3cd415",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "__zram_bvec_read"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing `memcpy` with `copy_page` for full page copying to leverage architecture-specific optimizations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "android_kernel_msm-5.4_nothing_sm7325",
        "hash": "059c1996017df7a8af791f8855b148d23b9460c2",
        "author": "Torin Cooper-Bennun",
        "date": "2021-03-30T14:35:26+02:00",
        "message": "can: m_can: m_can_do_rx_poll(): fix extraneous msg loss warning\n\n[ Upstream commit c0e399f3baf42279f48991554240af8c457535d1 ]\n\nMessage loss from RX FIFO 0 is already handled in\nm_can_handle_lost_msg(), with netdev output included.\n\nRemoving this warning also improves driver performance under heavy\nload, where m_can_do_rx_poll() may be called many times before this\ninterrupt is cleared, causing this message to be output many\ntimes (thanks Mariusz Madej for this report).\n\nFixes: e0d1f4816f2a (\"can: m_can: add Bosch M_CAN controller support\")\nLink: https://lore.kernel.org/r/20210303103151.3760532-1-torin@maxiluxsystems.com\nReported-by: Mariusz Madej <mariusz.madej@xtrack.com>\nSigned-off-by: Torin Cooper-Bennun <torin@maxiluxsystems.com>\nSigned-off-by: Marc Kleine-Budde <mkl@pengutronix.de>\nSigned-off-by: Sasha Levin <sashal@kernel.org>",
        "modified_files_count": 1,
        "modified_files": [
            "drivers/net/can/m_can/m_can.c"
        ],
        "github_commit_url": "https://github.com/NothingOSS/android_kernel_msm-5.4_nothing_sm7325/commit/059c1996017df7a8af791f8855b148d23b9460c2",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "m_can_do_rx_poll"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing a redundant warning message in the RX FIFO handling to reduce unnecessary output and improve performance under heavy load.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "tensorflow-directml",
        "hash": "0a4652663e3cd378113d51e1d076504c8e96b308",
        "author": "Amit Srivastava",
        "date": "2019-03-05T08:53:43+05:30",
        "message": "Speedup fix for the push_back function\n\nReserve the space in advance for speedup",
        "modified_files_count": 1,
        "modified_files": [
            "tensorflow/lite/toco/tflite/export.cc"
        ],
        "github_commit_url": "https://github.com/microsoft/tensorflow-directml/commit/0a4652663e3cd378113d51e1d076504c8e96b308",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ExportTensors"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reserving space in advance for a container to avoid repeated reallocations during `push_back` operations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "mygui",
        "hash": "964d8e5432aaac9be8044a17ba5ff49ef987a7c2",
        "author": "scrawl",
        "date": "2014-09-12T02:46:46+02:00",
        "message": "Improve performance in OgreDataManager::isDataExist",
        "modified_files_count": 1,
        "modified_files": [
            "Platforms/Ogre/OgrePlatform/src/MyGUI_OgreDataManager.cpp"
        ],
        "github_commit_url": "https://github.com/MyGUI/mygui/commit/964d8e5432aaac9be8044a17ba5ff49ef987a7c2",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing a string comparison with a direct pointer comparison to reduce overhead in the `OgreDataManager::isDataExist` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "llvm-leg",
        "hash": "85a5ac00e0c5335309d5e7951e9f2a5d32b8024e",
        "author": "Akira Hatanaka",
        "date": "2014-11-03T23:06:31+00:00",
        "message": "[AArch64] Make function processLogicalImmediate more efficient. NFC.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@221199 91177308-0d34-0410-b5e6-96231b3b80d8",
        "modified_files_count": 1,
        "modified_files": [
            "lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h"
        ],
        "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/85a5ac00e0c5335309d5e7951e9f2a5d32b8024e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "processLogicalImmediate"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the efficiency of the function `processLogicalImmediate` by refining its logic to handle immediate values more effectively.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "poedit",
        "hash": "0d722d8b4814c594fd37eb838ea68b895d171b28",
        "author": "Václav Slavík",
        "date": "2017-05-20T17:41:07+02:00",
        "message": "Optimize UnescapeCString if no escaping needed\n\nMake the common case faster. Reduces time spent in this function when\nreading a PO file from ~3% to ~1%.",
        "modified_files_count": 1,
        "modified_files": [
            "src/utility.h"
        ],
        "github_commit_url": "https://github.com/vslavik/poedit/commit/0d722d8b4814c594fd37eb838ea68b895d171b28",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "UnescapeCString"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves making the common case faster by reducing the time spent in the UnescapeCString function when no escaping is needed.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "tdme2",
        "hash": "c3fc3f87b5ded6df1f11b360c47d2bdd89d735e9",
        "author": "Andreas Drewke",
        "date": "2021-07-29T17:25:28+02:00",
        "message": "tests/FlowMapTest2: Some flowmap merge performance improvement",
        "modified_files_count": 1,
        "modified_files": [
            "src/tdme/utilities/FlowMap.h"
        ],
        "github_commit_url": "https://github.com/andreasdr/tdme2/commit/c3fc3f87b5ded6df1f11b360c47d2bdd89d735e9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "merge"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the performance of the flowmap merge operation by reducing unnecessary computations or data copying.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "a89c91020c4860adcec46458a1e8fb9b1297767d",
        "author": "Chris Lattner",
        "date": "2003-10-09T20:30:04+00:00",
        "message": "Remove potentially N^2 algorithm from symbol table reader.  No speedup\nin practice though\n\nllvm-svn: 8985",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/Bytecode/Reader/Reader.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/a89c91020c4860adcec46458a1e8fb9b1297767d",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing a potentially N^2 algorithm from the symbol table reader to reduce computational complexity.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "clazy",
        "hash": "5ae29fffa06a25a5537ea6944b676b78575d9a57",
        "author": "Sergio Martins",
        "date": "2018-01-21T22:38:14+00:00",
        "message": "Minor performance optimization: do the cheapeast condition first",
        "modified_files_count": 1,
        "modified_files": [
            "src/AccessSpecifierManager.cpp"
        ],
        "github_commit_url": "https://github.com/KDE/clazy/commit/5ae29fffa06a25a5537ea6944b676b78575d9a57",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "AccessSpecifierManager::qtAccessSpecifierType"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reordering conditions in an if-statement to evaluate the cheapest condition first, reducing unnecessary computation.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "tengine",
        "hash": "ff9004d0891974fed7dd22ef0eed0627b9277078",
        "author": "Weibin Yao(姚伟斌)",
        "date": "2013-07-28T08:18:17-07:00",
        "message": "Merge pull request #279 from chobits/master\n\nround robin: optimize loop in ngx_http_upstream_init_round_robin()",
        "modified_files_count": 1,
        "modified_files": [
            "src/http/ngx_http_upstream_round_robin.c"
        ],
        "github_commit_url": "https://github.com/alibaba/tengine/commit/ff9004d0891974fed7dd22ef0eed0627b9277078",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ngx_http_upstream_init_round_robin"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reducing loop overhead by simplifying the iteration logic in the `ngx_http_upstream_init_round_robin()` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "canairio_firmware",
        "hash": "46194b4f5c2f266c59d9c38d7d7a29ad08042ab7",
        "author": "Hpsaturn",
        "date": "2022-02-24T10:49:44+01:00",
        "message": "changed the order of OTA loop for improve memory free flow",
        "modified_files_count": 1,
        "modified_files": [
            "src/main.cpp"
        ],
        "github_commit_url": "https://github.com/kike-canaries/canairio_firmware/commit/46194b4f5c2f266c59d9c38d7d7a29ad08042ab7",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "loop"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reordering the OTA loop to improve memory deallocation flow.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "suricata",
        "hash": "fd4ca53eb7110a2ab0f24d08902d5c2a04f00a8c",
        "author": "Victor Julien",
        "date": "2024-01-08T20:23:28+01:00",
        "message": "app-layer: micro optimization for AppProtoEquals\n\nAdd most common condition first.",
        "modified_files_count": 1,
        "modified_files": [
            "src/app-layer-protos.h"
        ],
        "github_commit_url": "https://github.com/OISF/suricata/commit/fd4ca53eb7110a2ab0f24d08902d5c2a04f00a8c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "AppProtoEquals"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reordering conditions in the `AppProtoEquals` function to check the most common condition first, improving performance by reducing unnecessary comparisons.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "android_kernel_google_wahoo",
        "hash": "440a57717bcc2a86a5e9800bce62e14d8115a001",
        "author": "Daniel Kurtz",
        "date": "2016-03-31T11:31:10-07:00",
        "message": "cpufreq: interactive: only apply interactive boost when enabled\n\nOnly apply the interactive boost when the interactive governor is\nenabled.  This seems like the right thing to do.\n\nThis was originally reviewed on\n\thttps://chromium-review.googlesource.com/273501\n\nChange-Id: I5f4a7320683eada099f9a4253e3d6b0f03057fe8\nSigned-off-by: Daniel Kurtz <djkurtz@chromium.org>\nReviewed-by: Douglas Anderson <dianders@chromium.org>\nSigned-off-by: Dmitry Torokhov <dtor@google.com>",
        "modified_files_count": 1,
        "modified_files": [
            "drivers/cpufreq/cpufreq_interactive.c"
        ],
        "github_commit_url": "https://github.com/kerneltoast/android_kernel_google_wahoo/commit/440a57717bcc2a86a5e9800bce62e14d8115a001",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "cpufreq_interactive_boost"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves adding a conditional check to apply interactive boost only when the interactive governor is enabled, reducing unnecessary computations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ffmpeg",
        "hash": "8ba694548782c1821ab119c18fe02360a81c6768",
        "author": "Michael Niedermayer",
        "date": "2014-09-29T12:56:45+02:00",
        "message": "avcodec/utils: Fix off by 1 error causing unneeded allocation in ff_fast_malloc()\n\nReviewed-by: Benoit Fouet <benoit.fouet@free.fr>\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "modified_files_count": 1,
        "modified_files": [
            "libavcodec/utils.c"
        ],
        "github_commit_url": "https://github.com/allyourcodebase/ffmpeg/commit/8ba694548782c1821ab119c18fe02360a81c6768",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ff_fast_malloc"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved fixing an off-by-one error to avoid unnecessary memory allocation in the `ff_fast_malloc()` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "7ab345a8973017c89a1be87b6c8722d1fee1fd95",
        "author": "Muchun Song",
        "date": "2021-04-30T11:20:38-07:00",
        "message": "mm: memcontrol: change ug->dummy_page only if memcg changed\n\nJust like assignment to ug->memcg, we only need to update ug->dummy_page\nif memcg changed.  So move it to there.  This is a very small\noptimization.\n\nLink: https://lkml.kernel.org/r/20210319163821.20704-5-songmuchun@bytedance.com\nSigned-off-by: Muchun Song <songmuchun@bytedance.com>\nAcked-by: Johannes Weiner <hannes@cmpxchg.org>\nReviewed-by: Shakeel Butt <shakeelb@google.com>\nCc: Michal Hocko <mhocko@kernel.org>\nCc: Roman Gushchin <guro@fb.com>\nCc: Vladimir Davydov <vdavydov.dev@gmail.com>\nCc: Xiongchun Duan <duanxiongchun@bytedance.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "modified_files_count": 1,
        "modified_files": [
            "mm/memcontrol.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/7ab345a8973017c89a1be87b6c8722d1fee1fd95",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "uncharge_page"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves moving the update of `ug->dummy_page` to occur only when `memcg` changes, reducing unnecessary updates.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "q5Go",
        "hash": "a21004eee58137f194374850dd36cd47375f49e8",
        "author": "Bernd Schmidt",
        "date": "2019-03-25T13:09:16+01:00",
        "message": "Improve order of walk_tree traversal\n\nMake sure the main branch is visited first, even at the cost of walking it\ntwice to avoid recursion.",
        "modified_files_count": 1,
        "modified_files": [
            "src/gogame.cc"
        ],
        "github_commit_url": "https://github.com/bernds/q5Go/commit/a21004eee58137f194374850dd36cd47375f49e8",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "game_state::walk_tree"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reordering the traversal of a tree to visit the main branch first, even if it requires walking it twice, to avoid recursion and improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "android_kernel_xiaomi_sdm845",
        "hash": "4b7c09a5f74ad25dd2e3ee6d43732f9a0e0c1ff3",
        "author": "Josef Bacik",
        "date": "2018-11-10T07:42:52-08:00",
        "message": "nbd: only set MSG_MORE when we have more to send\n\n[ Upstream commit d61b7f972dab2a7d187c38254845546dfc8eed85 ]\n\nA user noticed that write performance was horrible over loopback and we\ntraced it to an inversion of when we need to set MSG_MORE.  It should be\nset when we have more bvec's to send, not when we are on the last bvec.\nThis patch made the test go from 20 iops to 78k iops.\n\nSigned-off-by: Josef Bacik <jbacik@fb.com>\nFixes: 429a787be679 (\"nbd: fix use-after-free of rq/bio in the xmit path\")\nSigned-off-by: Jens Axboe <axboe@fb.com>\nSigned-off-by: Sasha Levin <sashal@kernel.org>",
        "modified_files_count": 1,
        "modified_files": [
            "drivers/block/nbd.c"
        ],
        "github_commit_url": "https://github.com/LineageOS/android_kernel_xiaomi_sdm845/commit/4b7c09a5f74ad25dd2e3ee6d43732f9a0e0c1ff3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "nbd_send_cmd"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves correctly setting the MSG_MORE flag only when there are more bvec's to send, rather than when on the last bvec, to improve write performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "server",
        "hash": "9f7c9aa7d5eed311e3d40c8f7d1a55abb7d4566c",
        "author": "unknown",
        "date": "2005-02-03T23:56:13+01:00",
        "message": "ndb - sol9x86: cc -xO3: fix optimizer error.\n\n\nndb/src/common/util/NdbSqlUtil.cpp:\n  sol9x86: cc -xO3: fix optimizer error.\n  Note: same expression remains in Field_newdate::val_int().",
        "modified_files_count": 1,
        "modified_files": [
            "ndb/src/common/util/NdbSqlUtil.cpp"
        ],
        "github_commit_url": "https://github.com/MariaDB/server/commit/9f7c9aa7d5eed311e3d40c8f7d1a55abb7d4566c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "NdbSqlUtil::cmpDate"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved fixing an optimizer error in the `cmpDate` function by ensuring consistent expression usage with `Field_newdate::val_int()` to align with compiler optimizations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "quda",
        "hash": "fb643c9b0f764534dac34833c1dfa9a86684ec41",
        "author": "Mathias Wagner",
        "date": "2016-02-05T10:55:17+01:00",
        "message": "Do not increase n_calls while performing the initial tuning",
        "modified_files_count": 1,
        "modified_files": [
            "lib/tune.cpp"
        ],
        "github_commit_url": "https://github.com/lattice/quda/commit/fb643c9b0f764534dac34833c1dfa9a86684ec41",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "tuneLaunch"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves avoiding unnecessary increments of the `n_calls` counter during the initial tuning phase to reduce overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "wfmash",
        "hash": "0e123bdb5ad62d3ea82a9920ba2b7929fad97fe2",
        "author": "Erik Garrison (aider)",
        "date": "2024-11-07T14:05:13-06:00",
        "message": "feat: Add parallel index building to improve performance",
        "modified_files_count": 1,
        "modified_files": [
            "src/map/include/winSketch.hpp"
        ],
        "github_commit_url": "https://github.com/waveygang/wfmash/commit/0e123bdb5ad62d3ea82a9920ba2b7929fad97fe2",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved adding parallel index building to improve performance by leveraging concurrency.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "tensorflow",
        "hash": "d75eb4eed1020c37d5d5572a70c58194f00c0f74",
        "author": "Frederic Bastien",
        "date": "2020-03-04T12:13:41-08:00",
        "message": "Remove a condition that is optimized by LLVM and doesn't remove vectorization.",
        "modified_files_count": 1,
        "modified_files": [
            "tensorflow/compiler/xla/service/gpu/ir_emitter_unnested.cc"
        ],
        "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/d75eb4eed1020c37d5d5572a70c58194f00c0f74",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "IrEmitterUnnested::EmitTile"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization removes a redundant condition that is already handled by LLVM and does not interfere with vectorization.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "gemrb",
        "hash": "082aa141b08784f4f05a70d3dbf54a645967115d",
        "author": "Brad Allred",
        "date": "2022-09-08T18:00:27-06:00",
        "message": "Scriptable: take an optimization pass at DoStep\n\nI dont expect it to amount to much on a release build, but possibly debug builds can benefit\n\nwe were spending a lot of time inside NormalizeDeltas and we dont need to call it every time\n\n#1692",
        "modified_files_count": 1,
        "modified_files": [
            "gemrb/core/Scriptable/Scriptable.cpp"
        ],
        "github_commit_url": "https://github.com/gemrb/gemrb/commit/082aa141b08784f4f05a70d3dbf54a645967115d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Movable::DoStep"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy reduces unnecessary calls to the `NormalizeDeltas` function within the `DoStep` method by avoiding its invocation on every iteration.",
        "is_generic_optimization": true
    },
    {
        "hash": "be0e1e21ef707be4d16ea6a96ac9997463e4b8d2",
        "author": "Paul E. McKenney",
        "date": "2011-07-19T21:38:53-07:00",
        "message": "rcu: Streamline code produced by __rcu_read_unlock()\n\nGiven some common flag combinations, particularly -Os, gcc will inline\nrcu_read_unlock_special() despite its being in an unlikely() clause.\nUse noinline to prohibit this misoptimization.\n\nIn addition, move the second barrier() in __rcu_read_unlock() so that\nit is not on the common-case code path.  This will allow the compiler to\ngenerate better code for the common-case path through __rcu_read_unlock().\n\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>\nAcked-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>",
        "modified_files_count": 1,
        "modified_files": [
            "kernel/rcutree_plugin.h"
        ],
        "github_commit_url": "https://github.com/OnePlusOSS/android_kernel_oneplus_msm8998/commit/be0e1e21ef707be4d16ea6a96ac9997463e4b8d2",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "rcu_read_unlock"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "android_kernel_oneplus_msm8998",
        "optimization_summary": "The optimization strategy involved using `noinline` to prevent inlining of a function in an unlikely clause and repositioning a `barrier()` to improve common-case code path efficiency.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "cmssw",
        "hash": "576e130cdc8e002350d5f28c53396003296e4017",
        "author": "Christopher Jones",
        "date": "2006-08-08T00:40:51+00:00",
        "message": "use 'copySlotsTo' rather than connectTo for the ActivityRegistry in order to improve performance",
        "modified_files_count": 1,
        "modified_files": [
            "FWCore/Framework/src/EventProcessor.cc"
        ],
        "github_commit_url": "https://github.com/cms-sw/cmssw/commit/576e130cdc8e002350d5f28c53396003296e4017",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "schedule_"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing the 'connectTo' method with the 'copySlotsTo' method in the ActivityRegistry to enhance performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "tcl",
        "hash": "5db8831fb0c3a4a23f76522925253fc64e07ff9d",
        "author": "dgp",
        "date": "2014-05-16T19:11:49+00:00",
        "message": "Improved use of EOF state to avoid worthless allocations.",
        "modified_files_count": 1,
        "modified_files": [
            "generic/tclIO.c"
        ],
        "github_commit_url": "https://github.com/tcltk/tcl/commit/5db8831fb0c3a4a23f76522925253fc64e07ff9d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "GetInput"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved leveraging the EOF state to prevent unnecessary memory allocations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "parrot",
        "hash": "4be1dea1d3a8212c5d8ea4175020162afb4bc485",
        "author": "chromatic",
        "date": "2007-09-30T07:15:29+00:00",
        "message": "[src] Optimized Parrot_byte_index(), which was surprisingly expensive.  It's a\nlittle bit tricky because C strings can't have embedded NULL characters, so the\nnaive use of the standard library's index() doesn't always work.  However, it's\na good place to start as it tends to run much faster than the inchworm code\nhere.\n\nAnother optimization is never paying the price of calling memcmp() if it's\nobvious that it will fail.\n\nThere are larger algorithmic optimizations to make calling this code less\nexpensive (by calling it less frequently), but this was a low-hanging\noptimization.  Amortized over the data of PGE's regexp tests, this function\nruns about three times faster than the previous version.\n\ngit-svn-id: https://svn.parrot.org/parrot/trunk@21669 d31e2699-5ff4-0310-a27c-f18f2fbe73fe",
        "modified_files_count": 1,
        "modified_files": [
            "src/utils.c"
        ],
        "github_commit_url": "https://github.com/parrot/parrot/commit/4be1dea1d3a8212c5d8ea4175020162afb4bc485",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Parrot_byte_index"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing a naive implementation with a faster standard library function (`index()`) and avoiding unnecessary `memcmp()` calls when failure is obvious.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "CControl",
        "hash": "da0b10ca058ff87b6fba1a5db543196be7001f15",
        "author": "Daniel Mårtensson",
        "date": "2023-10-08T12:22:54+02:00",
        "message": "Faster cut.c",
        "modified_files_count": 1,
        "modified_files": [
            "src/CControl/Sources/Miscellaneous/cut.c"
        ],
        "github_commit_url": "https://github.com/DanielMartensson/CControl/commit/da0b10ca058ff87b6fba1a5db543196be7001f15",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "size"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing the number of function calls by inlining a frequently used function to eliminate overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "qtbase",
        "hash": "0a5a41d9a4f33652f3a0be766b6b9a486075325b",
        "author": "Marc Mutz",
        "date": "2014-09-12T10:00:10+02:00",
        "message": "QImageReader: use qEnvironmentVariableIsEmpty()\n\nIt doesn't allocate memory, so cannot throw and is a lot faster\nthan qgetenv().\n\nChange-Id: I92805767b55adce478a4bf8eb1cbafaa544f96aa\nReviewed-by: Jędrzej Nowacki <jedrzej.nowacki@digia.com>\nReviewed-by: Gunnar Sletta <gunnar@sletta.org>",
        "modified_files_count": 1,
        "modified_files": [
            "src/gui/image/qimagereader.cpp"
        ],
        "github_commit_url": "https://github.com/qt/qtbase/commit/0a5a41d9a4f33652f3a0be766b6b9a486075325b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "read"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing `qgetenv()` with `qEnvironmentVariableIsEmpty()` to avoid memory allocation and improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sycl",
        "hash": "3da0aeea080f84ebc5e3059403f799469b93b773",
        "author": "Snehasish Kumar",
        "date": "2021-04-23T10:00:38-07:00",
        "message": "[NFC] Use hasSection instead of getSection().empty()\n\nUse the optimized check hasSection() instead of calling\ngetSection().empty(). Originally suggested in D101004, but was dropped\nin the commit.",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/CodeGen/MachineFunctionSplitter.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/3da0aeea080f84ebc5e3059403f799469b93b773",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "MachineFunctionSplitter::runOnMachineFunction"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing the method call `getSection().empty()` with the more efficient `hasSection()` to check for section presence.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "link-grammar",
        "hash": "111905bf6bba581011629d73d7b491f486522924",
        "author": "Linas Vepštas",
        "date": "2019-11-30T00:26:31-06:00",
        "message": "Merge pull request #1055 from ampli/count-c1\n\ndo_count() minor speed improvements",
        "modified_files_count": 1,
        "modified_files": [
            "link-grammar/parse/count.c"
        ],
        "github_commit_url": "https://github.com/opencog/link-grammar/commit/111905bf6bba581011629d73d7b491f486522924",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "do_count"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved making minor speed improvements to the `do_count()` function by reducing overhead or improving efficiency in its implementation.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "NanoVNA",
        "hash": "992e51cf8b3017b3015c441a48c4aa93060a5ce0",
        "author": "ВшЫдщкв",
        "date": "2020-01-23T22:05:32+03:00",
        "message": "Optimize size of groupdelay_from_array function",
        "modified_files_count": 1,
        "modified_files": [
            "plot.c"
        ],
        "github_commit_url": "https://github.com/ttrftech/NanoVNA/commit/992e51cf8b3017b3015c441a48c4aa93060a5ce0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "groupdelay_from_array"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy reduces the size of the `groupdelay_from_array` function by simplifying its logic or removing redundant computations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "newsboat",
        "hash": "e6de9130d88d7737e4334b953578c08a90458716",
        "author": "Stefan Erben",
        "date": "2009-04-29T22:30:46+02:00",
        "message": "Performance of strprintf enhanced",
        "modified_files_count": 1,
        "modified_files": [
            "src/utils.cpp"
        ],
        "github_commit_url": "https://github.com/newsboat/newsboat/commit/e6de9130d88d7737e4334b953578c08a90458716",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "utils::strprintf"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The performance of the `strprintf` function was enhanced by optimizing string formatting operations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "despacer",
        "hash": "6f8ba0f8128e42ae9bb34b70d2d6f72cdda7ad0b",
        "author": "Fabian Klötzl",
        "date": "2019-07-29T18:29:36+02:00",
        "message": "despace_ssse3_lut_1kb: faster comparison",
        "modified_files_count": 1,
        "modified_files": [
            "include/despacer.h"
        ],
        "github_commit_url": "https://github.com/lemire/despacer/commit/6f8ba0f8128e42ae9bb34b70d2d6f72cdda7ad0b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "despace_ssse3_lut_1kb"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the comparison logic in the `despace_ssse3_lut_1kb` function to enhance performance.",
        "is_generic_optimization": true
    },
    {
        "hash": "eaa75527d673c76888921fa7678ddf00d9880458",
        "author": "Michele Spagnolo",
        "date": "2022-10-19T15:58:14+02:00",
        "message": "Measure::moveTicks() optimization",
        "modified_files_count": 1,
        "modified_files": [
            "src/engraving/libmscore/measure.cpp"
        ],
        "github_commit_url": "https://github.com/musescore/MuseScore/commit/eaa75527d673c76888921fa7678ddf00d9880458",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Measure::moveTicks"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "MuseScore",
        "optimization_summary": "The optimization strategy involved reducing unnecessary calculations or iterations within the `Measure::moveTicks` function to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "filament",
        "hash": "4f58be1ef1d881b04be530cc17d3a617d0e96a68",
        "author": "Pixelflinger",
        "date": "2020-08-13T23:44:38-07:00",
        "message": "minor micro optimizations",
        "modified_files_count": 1,
        "modified_files": [
            "filament/src/PostProcessManager.cpp"
        ],
        "github_commit_url": "https://github.com/google/filament/commit/4f58be1ef1d881b04be530cc17d3a617d0e96a68",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "PostProcessManager::taa"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within a loop.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ffmpeg",
        "hash": "1e68cefe546d8b8eda4248113f2635dbbf1df071",
        "author": "Kostya Shishkov",
        "date": "2009-12-04T08:18:13+00:00",
        "message": "100l trocadero: call emms_c() after doing decoding with SIMD in APE decoder\n\nOriginally committed as revision 20727 to svn://svn.ffmpeg.org/ffmpeg/trunk",
        "modified_files_count": 1,
        "modified_files": [
            "libavcodec/apedec.c"
        ],
        "github_commit_url": "https://github.com/allyourcodebase/ffmpeg/commit/1e68cefe546d8b8eda4248113f2635dbbf1df071",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ape_decode_frame"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves calling `emms_c()` after SIMD decoding to ensure proper CPU state cleanup and prevent performance degradation in subsequent floating-point operations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "v8",
        "hash": "7011ddd6528ce75491228efc001790090a8bb947",
        "author": "verwaest",
        "date": "2016-03-04T10:41:15+00:00",
        "message": "[LookupIterator] Add fast-path for reloading accessor property information\n\nThis is the equivalent of the fast-path in\nApplyTransitionToDataProperty.\n\nBUG=588893, 325923\nLOG=n\n\nReview URL: https://codereview.chromium.org/1765633003\n\nCr-Commit-Position: refs/heads/master@{#34488}",
        "modified_files_count": 1,
        "modified_files": [
            "src/lookup.cc"
        ],
        "github_commit_url": "https://github.com/v8/v8/commit/7011ddd6528ce75491228efc001790090a8bb947",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "LookupIterator::TransitionToAccessorProperty"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy adds a fast-path for reloading accessor property information to reduce redundant computations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "hdf5",
        "hash": "6543e55efad7ded7f5a0e0dc50786c966aea6b98",
        "author": "Quincey Koziol",
        "date": "2004-07-25T23:33:31-05:00",
        "message": "[svn-r8944] Purpose:\n    Code optimization\n\nDescription:\n    Eliminate duplicated call to H5T_detect_class()\n\nPlatforms tested:\n    Solaris 2.7 (arabica)\n    FreeBSD 4.10 (sleipnir) w/parallel\n    Too minor to require h5committest",
        "modified_files_count": 1,
        "modified_files": [
            "src/H5Tconv.c"
        ],
        "github_commit_url": "https://github.com/HDFGroup/hdf5/commit/6543e55efad7ded7f5a0e0dc50786c966aea6b98",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "H5T_conv_vlen"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved eliminating a duplicated call to the function `H5T_detect_class()` to reduce redundant computation.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "samsung-exynos9820",
        "hash": "fad3ec7ce4fc7c2b862014357be2dd660e5a5d3d",
        "author": "Davidlohr Bueso",
        "date": "2019-02-12T19:46:10+01:00",
        "message": "fs/epoll: drop ovflist branch prediction\n\n[ Upstream commit 76699a67f3041ff4c7af6d6ee9be2bfbf1ffb671 ]\n\nThe ep->ovflist is a secondary ready-list to temporarily store events\nthat might occur when doing sproc without holding the ep->wq.lock.  This\naccounts for every time we check for ready events and also send events\nback to userspace; both callbacks, particularly the latter because of\ncopy_to_user, can account for a non-trivial time.\n\nAs such, the unlikely() check to see if the pointer is being used, seems\nboth misleading and sub-optimal.  In fact, we go to an awful lot of\ntrouble to sync both lists, and populating the ovflist is far from an\nuncommon scenario.\n\nFor example, profiling a concurrent epoll_wait(2) benchmark, with\nCONFIG_PROFILE_ANNOTATED_BRANCHES shows that for a two threads a 33%\nincorrect rate was seen; and when incrementally increasing the number of\nepoll instances (which is used, for example for multiple queuing load\nbalancing models), up to a 90% incorrect rate was seen.\n\nSimilarly, by deleting the prediction, 3% throughput boost was seen\nacross incremental threads.\n\nLink: http://lkml.kernel.org/r/20181108051006.18751-4-dave@stgolabs.net\nSigned-off-by: Davidlohr Bueso <dbueso@suse.de>\nReviewed-by: Andrew Morton <akpm@linux-foundation.org>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nCc: Jason Baron <jbaron@akamai.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Sasha Levin <sashal@kernel.org>",
        "modified_files_count": 1,
        "modified_files": [
            "fs/eventpoll.c"
        ],
        "github_commit_url": "https://github.com/CruelKernel/samsung-exynos9820/commit/fad3ec7ce4fc7c2b862014357be2dd660e5a5d3d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ep_poll_callback"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing the `unlikely()` branch prediction hint for the `ep->ovflist` pointer check to improve performance by reducing incorrect branch predictions.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "qt",
        "hash": "bdad106358ae177d1345f5ff85c0e38cfeb5ca90",
        "author": "Thiago Macieira",
        "date": "2011-06-14T11:08:58+02:00",
        "message": "Improve toLatin1 x86 SIMD by using a new SSE4.1 instruction\n\nThe new instruction is PBLENDVB, which creates a result by selecting\nbytes from one of two registers, depending on whether the mask\ncontains a 1 (0xff) or a zero.\n\nThe SSE2 code requires three instructions (and, andnot, or).\n\nThe equivalent Neon instruction is VBSL (bit select).\n\nReviewed-by: Samuel Rødal",
        "modified_files_count": 1,
        "modified_files": [
            "src/corelib/tools/qstring.cpp"
        ],
        "github_commit_url": "https://github.com/qt/qt/commit/bdad106358ae177d1345f5ff85c0e38cfeb5ca90",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "toLocal8Bit"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaced multiple SSE2 instructions with a single SSE4.1 instruction (PBLENDVB) to improve performance in the toLatin1 function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "hhvm",
        "hash": "d021074c0dc7ddfe7a7a814430f39b6746ca4132",
        "author": "Giuseppe Ottaviano",
        "date": "2023-05-30T10:41:36-07:00",
        "message": "nullptr fast path in AtomicCoreCachedSharedPtr::get()\n\nSummary: If the storage is `nullptr`, we don't need to protect it.\n\nReviewed By: Gownta\n\nDifferential Revision: D46228019\n\nfbshipit-source-id: dfc9515f8f01fd02b37337ef08446159e17482bc",
        "modified_files_count": 1,
        "modified_files": [
            "third-party/folly/src/folly/concurrency/CoreCachedSharedPtr.h"
        ],
        "github_commit_url": "https://github.com/facebook/hhvm/commit/d021074c0dc7ddfe7a7a814430f39b6746ca4132",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "reset"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy adds a fast path check for `nullptr` to avoid unnecessary protection operations when the storage is `nullptr`.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kram",
        "hash": "1bacbd615ec005b605bd208117b546992527ac07",
        "author": "Alec Miller",
        "date": "2024-11-03T22:14:23-08:00",
        "message": "kram - simd - faster decompose_scale",
        "modified_files_count": 1,
        "modified_files": [
            "libkram/vectormath/float234.h"
        ],
        "github_commit_url": "https://github.com/alecazam/kram/commit/1bacbd615ec005b605bd208117b546992527ac07",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "macroVector4TypesStorageRenames"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves leveraging SIMD (Single Instruction, Multiple Data) instructions to accelerate the decompose_scale function in the vectormath module.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "PandA-bambu",
        "hash": "565d0b74e8bb66c0ff8aa42db225d6eb11258dac",
        "author": "Fabrizio Ferrandi",
        "date": "2018-04-24T12:46:12+02:00",
        "message": "* Improved multiplication by an unsigned constant.",
        "modified_files_count": 1,
        "modified_files": [
            "src/frontend_analysis/IR_analysis/IR_lowering.cpp"
        ],
        "github_commit_url": "https://github.com/ferrandi/PandA-bambu/commit/565d0b74e8bb66c0ff8aa42db225d6eb11258dac",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "IR_lowering::expand_MC"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the multiplication operation by an unsigned constant to enhance performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "linux-rockchip",
        "hash": "183c062c51c7e7663752b94ac399c830e4cb3c44",
        "author": "Waiman Long",
        "date": "2014-10-09T12:18:42-07:00",
        "message": "mm, thp: move invariant bug check out of loop in __split_huge_page_map\n\ncommit f8303c2582b889351e261ff18c4d8eb197a77db2 upstream.\n\nIn __split_huge_page_map(), the check for page_mapcount(page) is\ninvariant within the for loop.  Because of the fact that the macro is\nimplemented using atomic_read(), the redundant check cannot be optimized\naway by the compiler leading to unnecessary read to the page structure.\n\nThis patch moves the invariant bug check out of the loop so that it will\nbe done only once.  On a 3.16-rc1 based kernel, the execution time of a\nmicrobenchmark that broke up 1000 transparent huge pages using munmap()\nhad an execution time of 38,245us and 38,548us with and without the\npatch respectively.  The performance gain is about 1%.\n\nSigned-off-by: Waiman Long <Waiman.Long@hp.com>\nAcked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nCc: Andrea Arcangeli <aarcange@redhat.com>\nCc: Mel Gorman <mgorman@suse.de>\nCc: Rik van Riel <riel@redhat.com>\nCc: Scott J Norton <scott.norton@hp.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "modified_files_count": 1,
        "modified_files": [
            "mm/huge_memory.c"
        ],
        "github_commit_url": "https://github.com/armbian/linux-rockchip/commit/183c062c51c7e7663752b94ac399c830e4cb3c44",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "__split_huge_page_map"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved moving an invariant bug check outside of a loop to avoid redundant atomic reads and improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "petsc",
        "hash": "c124e916cc25c60b59020116a74464d5b14ef271",
        "author": "Hong Zhang",
        "date": "2004-06-23T09:26:55-06:00",
        "message": "bk-changeset-1.2299.1.11\nhzhang@harley.mcs.anl.gov|ChangeSet|20040623152655|64232\nChangeSet\n  1.2299.1.11 04/06/23 10:26:55 hzhang@harley.mcs.anl.gov +1 -0\n  optimize MatMatMultNumeric_SeqAIJ_SeqAIJ():\n  remove temp array of size C->n (large and sparse)\n  combine two loops into one.\n\n  src/mat/impls/aij/seq/matmatmult.c\n    1.81 04/06/23 10:26:54 hzhang@harley.mcs.anl.gov +12 -18\n    optimize MatMatMultNumeric_SeqAIJ_SeqAIJ():\n    remove temp array of size C->n (large and sparse)\n    combine two loops into one.\n\n\nHg-commit: 09a03d9f2d04d219982e6d1ec4720b601d1a81c4",
        "modified_files_count": 1,
        "modified_files": [
            "src/mat/impls/aij/seq/matmatmult.c"
        ],
        "github_commit_url": "https://github.com/petsc/petsc/commit/c124e916cc25c60b59020116a74464d5b14ef271",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "MatMatMultNumeric_SeqAIJ_SeqAIJ"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing a temporary array and combining two loops into one to reduce memory usage and improve efficiency.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "dolphin",
        "hash": "dbb8f588c7ac5c6c4586804c072c87de730ef00c",
        "author": "Bram Speeckaert",
        "date": "2022-11-01T11:27:45+01:00",
        "message": "JitArm64: cmpl - Optimize a == 0 case\n\nBy explicitly handling this, we can avoid materializing zero in a\nregister.\n\nBefore:\n0x52800019   mov    w25, #0x0\n0xb94087b6   ldr    w22, [x29, #0x84]\n0xcb16033b   sub    x27, x25, x22\n\nAfter:\n0xb94087b9   ldr    w25, [x29, #0x84]\n0xcb1903fb   neg    x27, x25",
        "modified_files_count": 1,
        "modified_files": [
            "Source/Core/Core/PowerPC/JitArm64/JitArm64_Integer.cpp"
        ],
        "github_commit_url": "https://github.com/dolphin-emu/dolphin/commit/dbb8f588c7ac5c6c4586804c072c87de730ef00c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "JitArm64::cmpl"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids materializing zero in a register by explicitly handling the case where a comparison involves zero.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "NyuziProcessor",
        "hash": "e1b978b4c783b105e860ee19f32a558dd73c77ed",
        "author": "Jeff Bush",
        "date": "2015-01-05T22:08:58-08:00",
        "message": "It's actually faster than that...",
        "modified_files_count": 1,
        "modified_files": [
            "software/librender/SliceArray.h"
        ],
        "github_commit_url": "https://github.com/jbush001/NyuziProcessor/commit/e1b978b4c783b105e860ee19f32a558dd73c77ed",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "sort"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the sorting algorithm in the `sort` function to reduce computational overhead and enhance performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sycl",
        "hash": "bb6119eb77fe5818985d375cef415f9fbc0b4757",
        "author": "Mehdi Amini",
        "date": "2022-01-30T19:49:22+00:00",
        "message": "Apply clang-tidy fixes for performance-for-range-copy in SCFInterfaceImpl.cpp (NFC)",
        "modified_files_count": 1,
        "modified_files": [
            "mlir/lib/Dialect/SCF/Transforms/BufferizableOpInterfaceImpl.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/bb6119eb77fe5818985d375cef415f9fbc0b4757",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "bufferize"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "proxmark3",
        "hash": "bd3e8db852186d4ab9d5dda890d1cd52389b1254",
        "author": "Philippe Teuwen",
        "date": "2024-07-29T22:24:09+02:00",
        "message": "Faster validate_prng_nonce",
        "modified_files_count": 1,
        "modified_files": [
            "common/crapto1/crapto1.c"
        ],
        "github_commit_url": "https://github.com/RfidResearchGroup/proxmark3/commit/bd3e8db852186d4ab9d5dda890d1cd52389b1254",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "validate_prng_nonce"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reducing redundant calculations by caching the result of a repeated computation within the validate_prng_nonce function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "platform_system_core",
        "hash": "379eee0fbdebacafc06bd374a403fd1c1773bbac",
        "author": "Treehugger Robot",
        "date": "2022-06-28T06:53:45+00:00",
        "message": "Merge \"first_stage_init: Optimize redundant vector copy\" am: 13faa1b394 am: a2d6bd56b1 am: b028b19f27\n\nOriginal change: https://android-review.googlesource.com/c/platform/system/core/+/2136933\n\nChange-Id: I664b84094d79dd19f08fe8844e75955b8dafcfbd\nSigned-off-by: Automerger Merge Worker <android-build-automerger-merge-worker@system.gserviceaccount.com>",
        "modified_files_count": 1,
        "modified_files": [
            "init/first_stage_mount.cpp"
        ],
        "github_commit_url": "https://github.com/aosp-mirror/platform_system_core/commit/379eee0fbdebacafc06bd374a403fd1c1773bbac",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "FirstStageMount::UseDsuIfPresent"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing a redundant vector copy to improve performance by avoiding unnecessary memory allocation and copying.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "192542ce384d0c99866b4b95414117429a215c5b",
        "author": "Nick Lewycky",
        "date": "2013-02-05T06:20:31+00:00",
        "message": "Test for virtual instead of pure here. It has the exact same effect, and John\nclaims it will improve performance.\n\nllvm-svn: 174341",
        "modified_files_count": 1,
        "modified_files": [
            "clang/lib/Sema/SemaExpr.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/192542ce384d0c99866b4b95414117429a215c5b",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing a pure virtual function with a virtual function to potentially improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "MyScaleDB",
        "hash": "ccecb55b9572bd9aa5ee99ac25b94052317e6b05",
        "author": "Alexey Arno",
        "date": "2014-12-17T16:29:37+03:00",
        "message": "Add performance and memory optimization. [#METR-14099]",
        "modified_files_count": 1,
        "modified_files": [
            "dbms/src/Interpreters/InterpreterSelectQuery.cpp"
        ],
        "github_commit_url": "https://github.com/myscale/MyScaleDB/commit/ccecb55b9572bd9aa5ee99ac25b94052317e6b05",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The commit optimizes performance and memory usage in the InterpreterSelectQuery.cpp file, likely by reducing redundant computations or improving data handling efficiency.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ladybird",
        "hash": "e7b8f6fe48b10c7ed1cc493002d45b064cba780d",
        "author": "Andreas Kling",
        "date": "2021-07-06T12:24:51+02:00",
        "message": "LibGfx: Make Painter::fill_rect_with_checkerboard() faster\n\nWe now divide each scanline into prologue, aligned run, and epilogue.\nBasically, we draw enough pixels one-by-one until we reach a grid\nintersection. Then we draw full grid cell slices using fast memory\nfills. Finally we go back to one-by-one for the epilogue.\n\nThis is roughly 2.5x faster in a microbenchmark and no longer dominates\nthe ImageViewer and PixelPaint resizing profiles.",
        "modified_files_count": 1,
        "modified_files": [
            "Userland/Libraries/LibGfx/Painter.cpp"
        ],
        "github_commit_url": "https://github.com/LadybirdBrowser/ladybird/commit/e7b8f6fe48b10c7ed1cc493002d45b064cba780d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Painter::fill_rect_with_checkerboard"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves dividing each scanline into prologue, aligned run, and epilogue sections to minimize one-by-one pixel drawing and maximize fast memory fills for grid cell slices.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "SPMC",
        "hash": "0464e115aea5d09f95c7d63b48876a22b565230d",
        "author": "Max Kellermann",
        "date": "2016-04-02T17:56:38+02:00",
        "message": "VideoPlayer/VideoPlayerVideo: use std::list::emplace_back()\n\nReduce overhead.",
        "modified_files_count": 1,
        "modified_files": [
            "xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp"
        ],
        "github_commit_url": "https://github.com/koying/SPMC/commit/0464e115aea5d09f95c7d63b48876a22b565230d",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used is replacing `std::list::push_back()` with `std::list::emplace_back()` to reduce overhead by constructing elements in-place.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Prima",
        "hash": "85030421afea5e81f71bb2cc2c9dfeeac9e411d1",
        "author": "dk",
        "date": "2003-03-07T13:47:21+00:00",
        "message": "- minor optimizations in the growMode handler routine, - additional\n  checks to eliminate void calls.",
        "modified_files_count": 1,
        "modified_files": [
            "Widget.c"
        ],
        "github_commit_url": "https://github.com/dk/Prima/commit/85030421afea5e81f71bb2cc2c9dfeeac9e411d1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "size_notify"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved eliminating unnecessary function calls in the growMode handler routine by adding additional checks.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "b306320322c9cfaa465bc2c7367acf6072b1ac0e",
        "author": "Nicolas Saenz Julienne",
        "date": "2021-02-12T12:41:59+00:00",
        "message": "spi: Skip zero-length transfers in spi_transfer_one_message()\n\nWith the introduction of 26751de25d25 (\"spi: bcm2835: Micro-optimise\nFIFO loops\") it has become apparent that some users might initiate\nzero-length SPI transfers. A fact the micro-optimization omitted, and\nwhich turned out to cause crashes[1].\n\nInstead of changing the micro-optimization itself, use a bigger hammer\nand skip zero-length transfers altogether for drivers using the default\ntransfer_one_message() implementation.\n\nReported-by: Phil Elwell <phil@raspberrypi.com>\nFixes: 26751de25d25 (\"spi: bcm2835: Micro-optimise FIFO loops\")\nSigned-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>\n\n[1] https://github.com/raspberrypi/linux/issues/4100\nLink: https://lore.kernel.org/r/20210211180820.25757-1-nsaenzjulienne@suse.de\n\nSigned-off-by: Mark Brown <broonie@kernel.org>",
        "modified_files_count": 1,
        "modified_files": [
            "drivers/spi/spi.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/b306320322c9cfaa465bc2c7367acf6072b1ac0e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "transfer_one_message"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy skips zero-length SPI transfers to avoid unnecessary processing and potential crashes.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "primecount",
        "hash": "1f519a643dbc65c21543c87754bdbfd232ca8c4c",
        "author": "kimwalisch",
        "date": "2021-02-22T22:04:08+01:00",
        "message": "Speed up tiny computations",
        "modified_files_count": 1,
        "modified_files": [
            "src/phi.cpp"
        ],
        "github_commit_url": "https://github.com/kimwalisch/primecount/commit/1f519a643dbc65c21543c87754bdbfd232ca8c4c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "PhiCache"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reducing overhead in tiny computations by optimizing the caching mechanism in the `PhiCache` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "valgrind-macos",
        "hash": "e5f66a2aa00fa88ba3e0fb004510f0a630881ef1",
        "author": "Julian Seward",
        "date": "2021-07-13T09:07:45+02:00",
        "message": "Reimplement h_generic_calc_GetMSBs8x16 to be more efficient.\n\nh_generic_calc_GetMSBs8x16 concatenates the top bit of each 8-bit lane in a\n128-bit value, producing a 16-bit scalar value.  (It is PMOVMSKB, really).\nThe existing implementation is excessively inefficient and shows up sometimes\nin 'perf' profiles of V.  This commit replaces it with a logarithmic (4-stage)\nalgorithm which is hopefully much faster.",
        "modified_files_count": 1,
        "modified_files": [
            "VEX/priv/host_generic_simd128.c"
        ],
        "github_commit_url": "https://github.com/LouisBrunner/valgrind-macos/commit/e5f66a2aa00fa88ba3e0fb004510f0a630881ef1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "h_generic_calc_GetMSBs8x16"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaced a linear algorithm with a logarithmic (4-stage) algorithm to compute the top bits of each 8-bit lane in a 128-bit value more efficiently.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "notcurses",
        "hash": "449455cf4b2038fb5385946e8e6d2006d9480fb5",
        "author": "nick black",
        "date": "2020-12-30T01:59:58-05:00",
        "message": "microoptimize channels_blend() top half #1262",
        "modified_files_count": 1,
        "modified_files": [
            "src/lib/internal.h"
        ],
        "github_commit_url": "https://github.com/dankamongmen/notcurses/commit/449455cf4b2038fb5385946e8e6d2006d9480fb5",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "channels_blend"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved micro-optimizing the `channels_blend()` function by reducing redundant calculations and improving memory access patterns in the top half of the function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "circt",
        "hash": "ffd49ba28c6f9938c2c6c71509e6dd5ce3574279",
        "author": "Andrew Young",
        "date": "2021-03-29T16:26:08-07:00",
        "message": "[FIRRTL] Nest CSE+Canon passes to run on FModuleOp\n\nThe compiler can parallelize pass which are running on distinct\nIsolatedFromAbove operations. Moving these passes to run on the\nFModuleOp will increase the ability of the compiler to parallelize their\nexecution. Since there are no operations under the CircuitOp other than\nFExtModule and FModule, this does should not change what gets CSE'd and\nCanonicalized.",
        "modified_files_count": 1,
        "modified_files": [
            "tools/firtool/firtool.cpp"
        ],
        "github_commit_url": "https://github.com/llvm/circt/commit/ffd49ba28c6f9938c2c6c71509e6dd5ce3574279",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "processBuffer"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves nesting CSE and Canon passes to run on FModuleOp to increase compiler parallelization.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Floorp",
        "hash": "f989d315a85f7abc510a5497234984c8a6d0e9de",
        "author": "Jeff Muizelaar",
        "date": "2012-11-08T16:57:49-05:00",
        "message": "Bug 801437. Reimplement ensure_copy. r=ehsan\n\nThe previous implementation would copy the entire file into memory which\nwould cause a huge amount of memory usage on when copying large files.\nThis version copies a block at a time to avoid this.",
        "modified_files_count": 1,
        "modified_files": [
            "toolkit/mozapps/update/updater/updater.cpp"
        ],
        "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/f989d315a85f7abc510a5497234984c8a6d0e9de",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ensure_copy"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved changing the file copy implementation to copy data in blocks instead of loading the entire file into memory, reducing memory usage for large files.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "86af5952a8470f96b53830372c64469cb7ce780c",
        "author": "Ming Lei",
        "date": "2019-02-15T08:40:11-07:00",
        "message": "block: loop: pass multi-page bvec to iov_iter\n\niov_iter is implemented on bvec itererator helpers, so it is safe to pass\nmulti-page bvec to it, and this way is much more efficient than passing one\npage in each bvec.\n\nReviewed-by: Christoph Hellwig <hch@lst.de>\nReviewed-by: Omar Sandoval <osandov@fb.com>\nSigned-off-by: Ming Lei <ming.lei@redhat.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "modified_files_count": 1,
        "modified_files": [
            "drivers/block/loop.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/86af5952a8470f96b53830372c64469cb7ce780c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "lo_rw_aio"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves passing multi-page bvec to iov_iter instead of single-page bvec to improve efficiency.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "bitcoin",
        "hash": "4fbae77929e6344bc49ab60af10a9c5ff21d2cdf",
        "author": "Marcos Mayorga",
        "date": "2017-04-28T09:33:34+01:00",
        "message": "Improved efficiency in COutPoint constructors",
        "modified_files_count": 1,
        "modified_files": [
            "src/primitives/transaction.h"
        ],
        "github_commit_url": "https://github.com/bitcoin/bitcoin/commit/4fbae77929e6344bc49ab60af10a9c5ff21d2cdf",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "COutPoint"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the efficiency of COutPoint constructors by reducing unnecessary overhead in their implementation.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "FEX",
        "hash": "d3ed9766e8e73e3445bacc6636eefa3c8678a96f",
        "author": "Ryan Houdek",
        "date": "2023-08-22T17:33:34-07:00",
        "message": "X86Tables: Optimize MOVLPD stores\n\nJust use the full register size and store the lower bits.",
        "modified_files_count": 1,
        "modified_files": [
            "FEXCore/Source/Interface/Core/X86Tables/SecondaryTables.cpp"
        ],
        "github_commit_url": "https://github.com/FEX-Emu/FEX/commit/d3ed9766e8e73e3445bacc6636eefa3c8678a96f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "InitializeSecondaryTables"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves using the full register size for MOVLPD stores to reduce overhead by only storing the lower bits.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "tensorflow",
        "hash": "41cc606be8dbdc2555236e069711d4c91f00efb9",
        "author": "A. Unique TensorFlower",
        "date": "2019-04-18T04:00:41-07:00",
        "message": "Improve performance of HloValue::SetPositionsAndComputeUses\n\nPreviously it called HloInstruction::OperandIndices what constructed a\nstd::vector with the indices what was unnecessary as we can iterate over\nthe list of operands directly instead.\nPiperOrigin-RevId: 244161260",
        "modified_files_count": 1,
        "modified_files": [
            "tensorflow/compiler/xla/service/hlo_value.cc"
        ],
        "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/41cc606be8dbdc2555236e069711d4c91f00efb9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "HloValue::SetPositionsAndComputeUses"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing the construction of a std::vector with direct iteration over operands to avoid unnecessary overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "open_evse",
        "hash": "c6ddbe1ed526a010fa9537f0e531976686078ccb",
        "author": "William McBrine",
        "date": "2015-10-17T15:00:51-04:00",
        "message": "Improved square root function -- much, much faster; same results; and it\nsaves 196 bytes of compiled program space, despite longer source code.",
        "modified_files_count": 1,
        "modified_files": [
            "J1772EvseController.cpp"
        ],
        "github_commit_url": "https://github.com/lincomatic/open_evse/commit/c6ddbe1ed526a010fa9537f0e531976686078ccb",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ulong_sqrt"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaced a less efficient square root implementation with a faster algorithm that produces the same results while reducing compiled program size.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "KnobKraft-orm",
        "hash": "1555fe4af060b1cfc8265fe8dff50d6f59d68040",
        "author": "Christof Ruch",
        "date": "2023-10-14T15:09:10+02:00",
        "message": "[fix] Trying to accelerate the glow effect on Mac by setting buffered image to true. No idea if that works.",
        "modified_files_count": 1,
        "modified_files": [
            "The-Orm/PatchHolderButton.cpp"
        ],
        "github_commit_url": "https://github.com/christofmuc/KnobKraft-orm/commit/1555fe4af060b1cfc8265fe8dff50d6f59d68040",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "PatchHolderButton::setGlow"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves enabling buffered image rendering to potentially accelerate the glow effect on Mac.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "dolphin",
        "hash": "530475dce8d3c4e94e0737be0dc48757a78bc475",
        "author": "Sintendo",
        "date": "2021-03-07T18:29:12+01:00",
        "message": "Jit64: divwx - Micro-optimize certain divisors\n\nWhen the multiplier is positive (which is the most common case), we can\ngenerate slightly better code.\n\n- Division by 30307\nBefore:\n49 63 C5             movsxd      rax,r13d\n48 69 C0 65 6B 32 45 imul        rax,rax,45326B65h\n4C 8B C0             mov         r8,rax\n48 C1 E8 3F          shr         rax,3Fh\n49 C1 F8 2D          sar         r8,2Dh\n44 03 C0             add         r8d,eax\n\nAfter:\n49 63 C5             movsxd      rax,r13d\n4C 69 C0 65 6B 32 45 imul        r8,rax,45326B65h\nC1 E8 1F             shr         eax,1Fh\n49 C1 F8 2D          sar         r8,2Dh\n44 03 C0             add         r8d,eax",
        "modified_files_count": 1,
        "modified_files": [
            "Source/Core/Core/PowerPC/Jit64/Jit_Integer.cpp"
        ],
        "github_commit_url": "https://github.com/dolphin-emu/dolphin/commit/530475dce8d3c4e94e0737be0dc48757a78bc475",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Jit64::divwx"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves generating slightly better code for division by a positive multiplier by reducing the number of instructions and improving instruction selection.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "pachi",
        "hash": "bffd7bea76f7ce98bd69bc468fa0d93b93d6c431",
        "author": "lemonsqueeze",
        "date": "2023-09-10T16:39:09+02:00",
        "message": "board_group_find_extra_libs(): speedup\n\nfaster with move queue instead of bitmap,\nfixed logic so can shortcircuit.",
        "modified_files_count": 1,
        "modified_files": [
            "board_play.h"
        ],
        "github_commit_url": "https://github.com/pasky/pachi/commit/bffd7bea76f7ce98bd69bc468fa0d93b93d6c431",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "board_group_find_extra_libs"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaced a bitmap with a move queue and improved logic to enable short-circuiting for faster execution.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ceph",
        "hash": "bf20b661cb6a6a33d9e93fb44ad1470f9f8245d2",
        "author": "Zac Medico",
        "date": "2017-08-24T09:47:23-07:00",
        "message": "PGPool::update: avoid expensive union_of\n\nAchieve the same result using a swap (constant complexity),\nand an assignment (linear complexity).\n\nSigned-off-by: Zac Medico <zmedico@gmail.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/osd/PG.cc"
        ],
        "github_commit_url": "https://github.com/ceph/ceph/commit/bf20b661cb6a6a33d9e93fb44ad1470f9f8245d2",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "PGPool::update"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing an expensive union operation with a swap (constant complexity) and an assignment (linear complexity) to achieve the same result more efficiently.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "plasma-framework",
        "hash": "745eeeb79a615ad64488e1b9056f394af085b30f",
        "author": "Jacopo De Simoi",
        "date": "2009-04-22T22:53:48+00:00",
        "message": "Optimization:  don't bother running the performMatch if the context is already invalid.  \n\nsvn path=/trunk/KDE/kdelibs/; revision=957814",
        "modified_files_count": 1,
        "modified_files": [
            "private/runnerjobs.cpp"
        ],
        "github_commit_url": "https://github.com/KDE/plasma-framework/commit/745eeeb79a615ad64488e1b9056f394af085b30f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "FindMatchesJob::run"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves skipping the `performMatch` function call if the context is already invalid to avoid unnecessary computation.",
        "is_generic_optimization": true
    },
    {
        "hash": "177aa816abd6c737617a72ad86fc1734a2bae7b5",
        "author": "Jakub Onderka",
        "date": "2022-11-21T10:05:51+09:00",
        "message": "Remove checks if FAST_ZPP is supported as PHP7 supports them",
        "modified_files_count": 1,
        "modified_files": [
            "zstd.c"
        ],
        "github_commit_url": "https://github.com/kjdev/php-ext-zstd/commit/177aa816abd6c737617a72ad86fc1734a2bae7b5",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ZEND_FUNCTION"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "php-ext-zstd",
        "optimization_summary": "The optimization strategy involved removing redundant checks for FAST_ZPP support since PHP7 inherently supports it, simplifying the code and reducing unnecessary condition evaluations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Floorp",
        "hash": "3a6b5236550c60fee371dbeaff43b61931e208ad",
        "author": "Steven Johnson",
        "date": "2010-06-03T10:35:26-07:00",
        "message": "Bug 527512 - ExprFilter missing trivial optimizations for ugt, ult (r=edwsmith,nnethercote)",
        "modified_files_count": 1,
        "modified_files": [
            "js/src/nanojit/LIR.cpp"
        ],
        "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/3a6b5236550c60fee371dbeaff43b61931e208ad",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ExprFilter::ins2"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves adding trivial optimizations for unsigned greater-than (ugt) and unsigned less-than (ult) comparisons in the ExprFilter::ins2 function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "darktable",
        "hash": "68e3a70527436188826609568d6fb105bee20c1a",
        "author": "hanno@schwalm-bremen.de",
        "date": "2023-04-02T19:33:05+02:00",
        "message": "Subtle improvements for pixelpipe\n\n- avoid some clock reading\n- improved debugging output",
        "modified_files_count": 1,
        "modified_files": [
            "src/develop/pixelpipe_hb.c"
        ],
        "github_commit_url": "https://github.com/darktable-org/darktable/commit/68e3a70527436188826609568d6fb105bee20c1a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "_dev_pixelpipe_process_rec"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved avoiding unnecessary clock readings and improving debugging output in the pixelpipe processing function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "glsl-optimizer",
        "hash": "b27eb7cb4f5b49b9e7c24deb6c1fb52908f63703",
        "author": "Brian Paul",
        "date": "2009-01-11T15:11:00-07:00",
        "message": "cell: re-order the z/stencil fetch/extract/convert instructions for better perf\n\nThe new instruction order is 10 cycles faster.",
        "modified_files_count": 1,
        "modified_files": [
            "src/gallium/drivers/cell/ppu/cell_gen_fragment.c"
        ],
        "github_commit_url": "https://github.com/aras-p/glsl-optimizer/commit/b27eb7cb4f5b49b9e7c24deb6c1fb52908f63703",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "gen_depth_stencil"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reordering z/stencil fetch/extract/convert instructions to reduce execution time by 10 cycles.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "red-viper",
        "hash": "2a47628b18b8c2b9aa7a27cb64028b84054f800d",
        "author": "Floogle",
        "date": "2025-01-04T23:44:33+01:00",
        "message": "slightly optimize drc setup",
        "modified_files_count": 1,
        "modified_files": [
            "source/3ds/drc_core.c"
        ],
        "github_commit_url": "https://github.com/skyfloogle/red-viper/commit/2a47628b18b8c2b9aa7a27cb64028b84054f800d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "drc_run"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing unnecessary setup operations in the drc_run function to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "mythtv",
        "hash": "b4d96b4c4c37e5195affaf0d0662b4ab71c47c92",
        "author": "Michael T. Dean",
        "date": "2011-05-29T20:49:57-04:00",
        "message": "Try to improve row counting performance for logging.\n\nSince InnoDB engine doesn't store the row count for tables, like MyISAM\ndoes, try to improve the performance of the count query.  By counting\nid, the optimizer should choose to use the primary index.  At this\npoint, I'm not forcing it, but if it's found to help for InnoDB users,\nwe can do so later.\n\nSee:\nhttp://www.cloudspace.com/blog/2009/08/06/fast-mysql-innodb-count-really-fast/\nhttp://www.mysqlperformanceblog.com/2007/04/10/count-vs-countcol/",
        "modified_files_count": 1,
        "modified_files": [
            "mythtv/programs/mythbackend/housekeeper.cpp"
        ],
        "github_commit_url": "https://github.com/MythTV/mythtv/commit/b4d96b4c4c37e5195affaf0d0662b4ab71c47c92",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "HouseKeeper::flushDBLogs"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves modifying the row count query to count the primary key (id) instead of all rows, encouraging the optimizer to use the primary index for improved performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ispc",
        "hash": "1dedd881327dc7b5609e49533b7e1aae1ef15e81",
        "author": "Matt Pharr",
        "date": "2011-09-15T06:25:02-07:00",
        "message": "Improve implementaton of 'are both masks equal' check for AVX.\n\nPreviously, we did a vector equal compare and then a movmsk, the\nresult of which we checked to see if it was on for all lanes.\nBecause masks are vectors of i32s, under AVX, the vector equal\ncompare required two 4-wide SSE compares and some shuffling.\nNow, we do a movmsk of both masks first and then a scalar\nequality comparison of those two values, which seems to generate\noverall better code.",
        "modified_files_count": 1,
        "modified_files": [
            "ctx.cpp"
        ],
        "github_commit_url": "https://github.com/ispc/ispc/commit/1dedd881327dc7b5609e49533b7e1aae1ef15e81",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "FunctionEmitContext::MasksAllEqual"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaces a vector equality comparison and subsequent mask extraction with direct mask extraction followed by a scalar equality comparison to improve code efficiency.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Pixelix",
        "hash": "bc67d0dc16e0505dfcb6111186aba31377a6b1be",
        "author": "BlueAndi",
        "date": "2020-12-31T14:31:52+01:00",
        "message": "Move initialization to initialization list for better performance.",
        "modified_files_count": 1,
        "modified_files": [
            "src/Plugin/Plugins/SunrisePlugin.h"
        ],
        "github_commit_url": "https://github.com/BlueAndi/Pixelix/commit/bc67d0dc16e0505dfcb6111186aba31377a6b1be",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "m_longitude"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves moving variable initialization to the initialization list in a constructor to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ompi",
        "hash": "84a89d68dcf60840d7801161032144bb6cd2c982",
        "author": "George Bosilca",
        "date": "2005-11-07T23:00:28+00:00",
        "message": "When we advance the convertor by a multiple of the data size there is a quick optimization.\nWe can compute the number of complete datatype that we will advance, update the stack and\nthen compute the new position taking in acount only the remaining bytes.\n\nThis commit was SVN r8019.",
        "modified_files_count": 1,
        "modified_files": [
            "ompi/datatype/new_position.c"
        ],
        "github_commit_url": "https://github.com/open-mpi/ompi/commit/84a89d68dcf60840d7801161032144bb6cd2c982",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ompi_convertor_generic_simple_position"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves advancing the convertor by a multiple of the data size, allowing for quick updates to the stack and position by computing complete datatypes and remaining bytes separately.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "darktable",
        "hash": "fef9b562d569a00af5ad8db3f709b1623e26a550",
        "author": "ralfbrown",
        "date": "2021-07-28T00:43:59-04:00",
        "message": "speed up drawing ellipse mask\n\nThe existing code uses atan2 to determine the angle, adjusts by the rotation angle of the ellipse,\nand then calls cosf and sinf on the adjusted angle.  We can eliminate the three trigonometric\nfunction calls by instead rotating the coordinate system of the point being processed, thus\nreplacing three trig function calls and a subtraction by a sqrt, two divisions, four\nmultiplications, and two additions.  The resulting code also perfectly auto-vectorizes, for an\noverall speedup by nearly a factor of eight.\n\nTimes (in seconds) reported for `ellipse fill` on mire1.cr2 using `darktable-cli -d perf -d masks`\nwith various integration tests:\n\n0074: 0.1709 -> 0.0217 (7.87x)\n0075: 0.1689 -> 0.0214 (7.89x)\n0076: 0.0955+0.0860 -> 0.0124+0.0115 (7.59x)",
        "modified_files_count": 1,
        "modified_files": [
            "src/develop/masks/ellipse.c"
        ],
        "github_commit_url": "https://github.com/darktable-org/darktable/commit/fef9b562d569a00af5ad8db3f709b1623e26a550",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "_ellipse_get_mask"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaces trigonometric function calls (atan2, cosf, sinf) with a coordinate system rotation using basic arithmetic operations (sqrt, divisions, multiplications, additions) to speed up ellipse mask drawing.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "7cf1aaa2ad3855bd5e95bef382a66fe122fc9b01",
        "author": "Andi Kleen",
        "date": "2018-01-14T20:03:49+01:00",
        "message": "x86/timer: Don't inline __const_udelay\n\n__const_udelay is marked inline, and LTO will happily inline it everywhere\n\nDropping the inline saves ~44k text in a LTO build.\n\n13999560        1740864 1499136 17239560        1070e08 vmlinux-with-udelay-inline\n13954764        1736768 1499136 17190668        1064f0c vmlinux-wo-udelay-inline\n\nInlining it has no advantage in general, so its the right thing to do.\n\nSigned-off-by: Andi Kleen <ak@linux.intel.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nLink: https://lkml.kernel.org/r/20171222001821.2157-2-andi@firstfloor.org",
        "modified_files_count": 1,
        "modified_files": [
            "arch/x86/lib/delay.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/7cf1aaa2ad3855bd5e95bef382a66fe122fc9b01",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "__const_udelay"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing the `inline` keyword from the `__const_udelay` function to prevent unnecessary inlining by the compiler, reducing the binary size.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Pikafish",
        "hash": "89a06f6651882248e185bb597135af3249ec8f6a",
        "author": "Marco Costalba",
        "date": "2011-05-17T23:47:26+01:00",
        "message": "Micro-optimize pl_move_is_legal()\n\nRemove the check for castling moves because it is\nalready implicit in the check for king moves and castling\nis so rare that doing the check is just a slow down.\n\nThanks to Marek Kwiatkowski.\n\nNo functional change.\n\nSigned-off-by: Marco Costalba <mcostalba@gmail.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/position.cpp"
        ],
        "github_commit_url": "https://github.com/official-pikafish/Pikafish/commit/89a06f6651882248e185bb597135af3249ec8f6a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Position::pl_move_is_legal"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy removes a redundant check for castling moves since it is implicitly covered by the king move check and castling is rare, thus reducing unnecessary computation.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "blender",
        "hash": "35ae1da16c6aab293adbe1e4eecba624006a085c",
        "author": "Campbell Barton",
        "date": "2019-10-04T01:14:25+10:00",
        "message": "Mesh: simple extract mask optimizations\n\n- Avoid per-vertex custom-data lookup\n- Break once a face has a mask vertex.",
        "modified_files_count": 1,
        "modified_files": [
            "source/blender/editors/mesh/editmesh_mask_extract.c"
        ],
        "github_commit_url": "https://github.com/blender/blender/commit/35ae1da16c6aab293adbe1e4eecba624006a085c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "paint_mask_extract_exec"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization avoids per-vertex custom-data lookup and breaks the loop early once a face has a mask vertex to reduce unnecessary computations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sycl",
        "hash": "da504741da1ffef8386ba281520d72f0b4e5983f",
        "author": "Chris Lattner",
        "date": "2005-04-09T21:43:54+00:00",
        "message": "add a little peephole optimization.  This allows us to codegen:\n\nint a(short i) {\n        return i & 1;\n}\n\nas\n\n_a:\n        andi. r3, r3, 1\n        blr\n\ninstead of:\n\n_a:\n        rlwinm r2, r3, 0, 16, 31\n        andi. r3, r2, 1\n        blr\n\non ppc.  It should also help the other risc targets.\n\nllvm-svn: 21189",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/da504741da1ffef8386ba281520d72f0b4e5983f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SelectionDAG::getNode"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves simplifying code generation by directly applying bitwise operations on the input without unnecessary intermediate steps.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "llvm-leg",
        "hash": "d23a298f28209e1faa47c01482d5815ebb95d6d0",
        "author": "Chris Lattner",
        "date": "2005-01-24T02:08:34+00:00",
        "message": "This giant patch speeds up Type::isSized().  Before, this would have to search\nlarge nested types over and over again to determine if they are sized or not.\nNow, isSized() is able to make snap decisions about all concrete types, which\nare a common occurance (and includes all primitives).\n\nOn 177.mesa, this speeds up DSE from 39.5s -> 21.3s and GCSE from\n13.2s -> 11.3s, reducing gccas time from 80s -> 61s (this is a debug build).\n\nDSE and GCSE are still too slow on this testcase, but this is a simple\nimprovement.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@19800 91177308-0d34-0410-b5e6-96231b3b80d8",
        "modified_files_count": 1,
        "modified_files": [
            "include/llvm/Type.h"
        ],
        "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/d23a298f28209e1faa47c01482d5815ebb95d6d0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "isSized"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves caching or precomputing results for the `isSized()` function to avoid redundant searches in nested types, enabling faster decisions for concrete types.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "parrot",
        "hash": "ce6505dc103157c601d9448267ab1733dfd85e26",
        "author": "chromatic",
        "date": "2011-07-04T01:45:58-07:00",
        "message": "[str] Optimized Parrot_str_join given empty joiner.\n\nThis improves the vpm.pir benchmark by a whopping further 7.8%.",
        "modified_files_count": 1,
        "modified_files": [
            "src/string/api.c"
        ],
        "github_commit_url": "https://github.com/parrot/parrot/commit/ce6505dc103157c601d9448267ab1733dfd85e26",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Parrot_str_join"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved handling the case of an empty joiner more efficiently in the `Parrot_str_join` function to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Egaroucid",
        "hash": "f4b396f1001f698f96e486e68f4b13b124bef713",
        "author": "Nyanyan",
        "date": "2023-12-10T14:23:48+09:00",
        "message": "speedup book deviate, issue #97, fixed err",
        "modified_files_count": 1,
        "modified_files": [
            "src/engine/book_enlarge.hpp"
        ],
        "github_commit_url": "https://github.com/Nyanyan/Egaroucid/commit/f4b396f1001f698f96e486e68f4b13b124bef713",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "book_recalculate_leaf"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to avoid repeated computations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "gstreamer",
        "hash": "d48d47e68365990d7c66782225f7fddf7efde86e",
        "author": "Edward Hervey",
        "date": "2009-10-21T21:04:45+02:00",
        "message": "typefind: speed up mxf_type_find over 300 times for worst case scenarios\n\n* memcmp is expensive and was being abused, reduce calling it by checking\n  the first byte.\n* iterating one byte at at time over 64 kbites introduces a certain overhead,\n  therefore we now do it in chunks of 1024 bytes\n\nAnd I do mean over 300 times. The average instruction call per mxf_type_find\nwas previously 785685 and it's now down to 2458 :)",
        "modified_files_count": 1,
        "modified_files": [
            "gst/typefind/gsttypefindfunctions.c"
        ],
        "github_commit_url": "https://github.com/GStreamer/gstreamer/commit/d48d47e68365990d7c66782225f7fddf7efde86e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "mxf_type_find"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing the use of expensive `memcmp` calls by checking the first byte first and iterating over data in larger chunks of 1024 bytes instead of one byte at a time.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "monte-carlo-ray-tracer",
        "hash": "fb53f12ecb5abe9b1886c8a1a67e3915a2b23548",
        "author": "Linus Mossberg",
        "date": "2019-10-13T17:49:31+02:00",
        "message": "Improve sphere intersection performance",
        "modified_files_count": 1,
        "modified_files": [
            "source/Surface.cpp"
        ],
        "github_commit_url": "https://github.com/linusmossberg/monte-carlo-ray-tracer/commit/fb53f12ecb5abe9b1886c8a1a67e3915a2b23548",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the performance of sphere intersection calculations by reducing redundant computations and leveraging mathematical simplifications.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "solidity",
        "hash": "c66905a18999b5c4be2678a7829b6703f902e341",
        "author": "Daniel Kirchner",
        "date": "2024-10-30T20:22:02+01:00",
        "message": "Avoid multiple lookups during body-copying while inlining.",
        "modified_files_count": 1,
        "modified_files": [
            "libyul/optimiser/FullInliner.cpp"
        ],
        "github_commit_url": "https://github.com/ethereum/solidity/commit/c66905a18999b5c4be2678a7829b6703f902e341",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "BodyCopier::translateIdentifier"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids multiple lookups during body-copying by caching the result of an identifier lookup in the inlining process.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "knot",
        "hash": "6a3e71bcf6e0d44dda6d249c776800524e67b217",
        "author": "Lubos Slovak",
        "date": "2011-10-17T15:05:09+02:00",
        "message": "Improved adding RRs to changeset.\n\n- Searching for the RRSet from the end of changeset, so that the\n  last RRSet added is tried first. This should significantly\n  improve search times.\n\nrefs #1343 @20m",
        "modified_files_count": 1,
        "modified_files": [
            "libknot/updates/changesets.c"
        ],
        "github_commit_url": "https://github.com/CZ-NIC/knot/commit/6a3e71bcf6e0d44dda6d249c776800524e67b217",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "knot_changeset_add_rr"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves searching for the RRSet from the end of the changeset to prioritize the last added RRSet, improving search times.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "helenos",
        "hash": "311835517791f7a69b14bbd4085e537dad94c36f",
        "author": "Jiří Zárevúcky",
        "date": "2023-03-21T18:41:48+01:00",
        "message": "Optimize relink_rq()\n\nIterate backwards and only lock each runqueue once instead of twice.",
        "modified_files_count": 1,
        "modified_files": [
            "kernel/generic/src/proc/scheduler.c"
        ],
        "github_commit_url": "https://github.com/HelenOS/helenos/commit/311835517791f7a69b14bbd4085e537dad94c36f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "DAMAGES"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves iterating backwards and locking each runqueue only once instead of twice to reduce locking overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "pinmame",
        "hash": "b74a51ece8486887af455a1a5c9b8e0185b4a584",
        "author": "volkenborn",
        "date": "2003-07-02T15:49:36+00:00",
        "message": "Okay, a bit faster now.\n\n\ngit-svn-id: https://svn.code.sf.net/p/pinmame/code/trunk@1205 6f51dfdd-75df-4273-8f3b-818b1e6aa8bf",
        "modified_files_count": 1,
        "modified_files": [
            "src/wpc/gts80s.c"
        ],
        "github_commit_url": "https://github.com/vpinball/pinmame/commit/b74a51ece8486887af455a1a5c9b8e0185b4a584",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "nmi_callback"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing redundant calculations and memory accesses within the `nmi_callback` function to improve performance.",
        "is_generic_optimization": true
    },
    {
        "hash": "86a43bc97d024ca300eb366f5717807207716a08",
        "author": "Dirkjan Bussink",
        "date": "2012-08-02T21:35:27+02:00",
        "message": "Make sure to return after setting the entry\n\nWe were filling all the entries with a pointer to the exact same method\ncache entry which is of course not very smart and actually defeats the\nfact that the jit can optimize this properly.",
        "modified_files_count": 1,
        "modified_files": [
            "vm/inline_cache.hpp"
        ],
        "github_commit_url": "https://github.com/rubinius/rubinius/commit/86a43bc97d024ca300eb366f5717807207716a08",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "set_cache"
        ],
        "is_opt_ds": "true",
        "is_opt_ds_simple": "true",
        "repository_name": "rubinius",
        "optimization_summary": "The optimization strategy ensures unique method cache entries are set for each entry, preventing the JIT from being hindered by identical pointers.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "clang",
        "hash": "027d7ed9d616d93ae7f02de79d17863725b14866",
        "author": "Fariborz Jahanian",
        "date": "2010-06-21T19:49:38+00:00",
        "message": "Use more efficient API of SmallVector/array_pod_sort\nfor sorting (radar 8076356).\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@106453 91177308-0d34-0410-b5e6-96231b3b80d8",
        "modified_files_count": 1,
        "modified_files": [
            "lib/CodeGen/CGDeclCXX.cpp"
        ],
        "github_commit_url": "https://github.com/llvm-mirror/clang/commit/027d7ed9d616d93ae7f02de79d17863725b14866",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CodeGenModule::EmitCXXGlobalInitFunc"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves using a more efficient API of SmallVector/array_pod_sort for sorting to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "intel-graphics-compiler",
        "hash": "5a8c5740bdae9f27e3a8e5048e91d2fdc41349c4",
        "author": "pmistry",
        "date": "2018-05-14T15:20:44-07:00",
        "message": "MarkVirtRegAliveInBlock had hotspot for a very large shader during compile time. \nThe DFS recursion was not taking into consideration already visited blocs and pushing them into the work queue. This creates one additional level of DFS on already visited blocks. \n\nChange-Id: I79bdfe05086f8a35df6cf8d8def2cd727aff04d8",
        "modified_files_count": 1,
        "modified_files": [
            "IGC/Compiler/CISACodeGen/LiveVars.cpp"
        ],
        "github_commit_url": "https://github.com/intel/intel-graphics-compiler/commit/5a8c5740bdae9f27e3a8e5048e91d2fdc41349c4",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved avoiding redundant DFS recursion by tracking and skipping already visited blocks in the MarkVirtRegAliveInBlock function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Principia",
        "hash": "73d609777538fe9d7b4b87321921c8b68fd79f9f",
        "author": "Pascal Leroy",
        "date": "2018-12-25T15:54:01+01:00",
        "message": "Parallelize the genetic algorithm.",
        "modified_files_count": 1,
        "modified_files": [
            "astronomy/trappist_dynamics_test.cpp"
        ],
        "github_commit_url": "https://github.com/mockingbirdnest/Principia/commit/73d609777538fe9d7b4b87321921c8b68fd79f9f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "TEST_F"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used was parallelizing the genetic algorithm to improve performance through concurrent execution.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "cmssw",
        "hash": "0707a368b3e5917ebc3380a1ab3d15ddc34ca645",
        "author": "Gregor Mittag",
        "date": "2017-03-31T13:59:56+02:00",
        "message": "Optimize usage of 'proDer' matrices in 'GblTrajectory'.",
        "modified_files_count": 1,
        "modified_files": [
            "Alignment/ReferenceTrajectories/src/GblTrajectory.cc"
        ],
        "github_commit_url": "https://github.com/cms-sw/cmssw/commit/0707a368b3e5917ebc3380a1ab3d15ddc34ca645",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "data"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization involves reducing the overhead of copying 'proDer' matrices in the 'GblTrajectory' class by using reference-based iteration instead of value-based iteration.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "vcmi",
        "hash": "3a27725fcbc7b6046920b663dcb48e77495d8273",
        "author": "K",
        "date": "2024-08-22T11:39:24+02:00",
        "message": "Optimize CMap::isInTheMap\n\nreplace x >= 0 && x < size by (unsigned)x < size\n\nBy converting signed coordinate to unsigned number, negative values became\nvery large positive ones, larger than every positive signed number and\ntherefore also bigger than the map size. As a result check against size\nalso implicitly checks if coordinate is negative.\n\nCompiler cannot do this transformation automatically because it doesn't\nknow that map dimensions are always positive.\n\nThe change shrinks isInTheMap from 19 instructions to 11 on x86.",
        "modified_files_count": 1,
        "modified_files": [
            "lib/mapping/CMap.cpp"
        ],
        "github_commit_url": "https://github.com/vcmi/vcmi/commit/3a27725fcbc7b6046920b663dcb48e77495d8273",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CMap::isInTheMap"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization replaces a signed integer comparison with an unsigned comparison to implicitly check for negative values, reducing the number of instructions.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "selinux-kernel",
        "hash": "3aeea4fc835d31235947787c2b8dcbc255131106",
        "author": "David Hildenbrand",
        "date": "2024-05-05T17:53:29-07:00",
        "message": "mm/memory: use folio_mapcount() in zap_present_folio_ptes()\n\nWe want to limit the use of page_mapcount() to the places where it is\nabsolutely necessary.  In zap_present_folio_ptes(), let's simply check the\nfolio mapcount().  If there is some issue, it will underflow at some point\neither way when unmapping.\n\nAs indicated already in commit 10ebac4f95e7 (\"mm/memory: optimize\nunmap/zap with PTE-mapped THP\"), we already documented \"If we ever have a\ncheap folio_mapcount(), we might just want to check for underflows\nthere.\".\n\nThere is no change for small folios.  For large folios, we'll now catch\nmore underflows when batch-unmapping, because instead of only testing the\nmapcount of the first subpage, we'll test if the folio mapcount\nunderflows.\n\nLink: https://lkml.kernel.org/r/20240409192301.907377-8-david@redhat.com\nSigned-off-by: David Hildenbrand <david@redhat.com>\nCc: Chris Zankel <chris@zankel.net>\nCc: Hugh Dickins <hughd@google.com>\nCc: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>\nCc: Jonathan Corbet <corbet@lwn.net>\nCc: Matthew Wilcox (Oracle) <willy@infradead.org>\nCc: Max Filippov <jcmvbkbc@gmail.com>\nCc: Miaohe Lin <linmiaohe@huawei.com>\nCc: Muchun Song <muchun.song@linux.dev>\nCc: Naoya Horiguchi <nao.horiguchi@gmail.com>\nCc: Peter Xu <peterx@redhat.com>\nCc: Richard Chang <richardycc@google.com>\nCc: Rich Felker <dalias@libc.org>\nCc: Ryan Roberts <ryan.roberts@arm.com>\nCc: Yang Shi <shy828301@gmail.com>\nCc: Yin Fengwei <fengwei.yin@intel.com>\nCc: Yoshinori Sato <ysato@users.sourceforge.jp>\nCc: Zi Yan <ziy@nvidia.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
        "modified_files_count": 1,
        "modified_files": [
            "mm/memory.c"
        ],
        "github_commit_url": "https://github.com/SELinuxProject/selinux-kernel/commit/3aeea4fc835d31235947787c2b8dcbc255131106",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "zap_present_folio_ptes"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing `page_mapcount()` with `folio_mapcount()` to reduce overhead and improve underflow detection when batch-unmapping large folios.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "qbe",
        "hash": "7ce4d334e54433f7e67d91baa9edb25adb26975b",
        "author": "Quentin Carbonneaux",
        "date": "2015-09-15T23:01:31-04:00",
        "message": "add a small size optimization to emit",
        "modified_files_count": 1,
        "modified_files": [
            "lisc/emit.c"
        ],
        "github_commit_url": "https://github.com/8l/qbe/commit/7ce4d334e54433f7e67d91baa9edb25adb26975b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "eins"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing the size of emitted code by making small adjustments to the `eins` function in the `emit.c` file.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "1d068cc0b07694799e077b28dbd272b7982727e2",
        "author": "Chris Lattner",
        "date": "2011-05-22T04:53:24+00:00",
        "message": "switch to using a smallvector to avoid allocations for most normal size instructions.\n\nllvm-svn: 131837",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/MC/MCDisassembler/Disassembler.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/1d068cc0b07694799e077b28dbd272b7982727e2",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves switching to a SmallVector to avoid dynamic memory allocations for most normal-sized instructions.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ouinet",
        "hash": "5ed5fe9124641d392f8616fcdfd6cd4982f3cc29",
        "author": "Ivan Vilata-i-Balaguer",
        "date": "2021-04-29T10:35:38+02:00",
        "message": "Move check for `X-Ouinet-Private` header up the chain.\n\nAs most requests will be GETs, this should speed up private browsing by\navoiding HTTP method checks.",
        "modified_files_count": 1,
        "modified_files": [
            "src/client.cpp"
        ],
        "github_commit_url": "https://github.com/equalitie/ouinet/commit/5ed5fe9124641d392f8616fcdfd6cd4982f3cc29",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Client::State::serve_request"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reordering conditional checks to prioritize the most common case (GET requests) by moving the check for the `X-Ouinet-Private` header earlier in the logic chain.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "pbrt-v4",
        "hash": "a881617a1a9a49561022de53c2cf863cac0e0394",
        "author": "Matt Pharr",
        "date": "2021-07-24T15:45:00-07:00",
        "message": "Parallelize OptiXAggregate::createBuildInputForBLPs()",
        "modified_files_count": 1,
        "modified_files": [
            "src/pbrt/gpu/aggregate.cpp"
        ],
        "github_commit_url": "https://github.com/mmp/pbrt-v4/commit/a881617a1a9a49561022de53c2cf863cac0e0394",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "OptiXAggregate::createBuildInputForBLPs"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used was parallelizing the function `OptiXAggregate::createBuildInputForBLPs()` to improve performance by leveraging concurrent execution.",
        "is_generic_optimization": true
    },
    {
        "hash": "8f2ae965b7ef4f4ddab6110f06388e270723d694",
        "author": "Eric Dumazet",
        "date": "2015-07-08T13:50:42-07:00",
        "message": "net_sched: act_gact: read tcfg_ptype once\n\nThird step for gact RCU operation :\n\nFollowing patch will get rid of spinlock protection,\nso we need to read tcfg_ptype once.\n\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nCc: Alexei Starovoitov <ast@plumgrid.com>\nAcked-by: Jamal Hadi Salim <jhs@mojatatu.com>\nAcked-by: John Fastabend <john.fastabend@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "modified_files_count": 1,
        "modified_files": [
            "net/sched/act_gact.c"
        ],
        "github_commit_url": "https://github.com/OnePlusOSS/android_kernel_oneplus_msm8998/commit/8f2ae965b7ef4f4ddab6110f06388e270723d694",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "tcf_gact"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "android_kernel_oneplus_msm8998",
        "optimization_summary": "The optimization strategy involves reading the `tcfg_ptype` variable once to avoid redundant reads and prepare for removing spinlock protection.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "athena",
        "hash": "4aa14714802ab3e5a9521685c9120b0a245ba3e1",
        "author": "Chang-Goo Kim",
        "date": "2020-12-31T13:08:48+09:00",
        "message": "Move phi variable declarations within the simd loop",
        "modified_files_count": 1,
        "modified_files": [
            "src/hydro/srcterms/self_gravity.cpp"
        ],
        "github_commit_url": "https://github.com/PrincetonUniversity/athena/commit/4aa14714802ab3e5a9521685c9120b0a245ba3e1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "HydroSourceTerms::SelfGravity"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved moving phi variable declarations inside the SIMD loop to reduce memory overhead and improve cache efficiency.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ghostpdl",
        "hash": "e5d8d4d6514600f49a6aae2811e3b6fd33c2ef54",
        "author": "Robin Watts",
        "date": "2011-09-10T10:33:26-05:00",
        "message": "Speed up heap freeing (gs_heap_free_object) by avoiding search.\n\nInspired by Bug #687475. Remove the search through every allocated block\nwhen freeing a heap block. Drastically increases the speed. Will hopefully\nhelp other things too.\n\nIf people really want to test that blocks are valid on free, build with\nMemento, which captures this in a much more useful way.",
        "modified_files_count": 1,
        "modified_files": [
            "gs/base/gsmalloc.c"
        ],
        "github_commit_url": "https://github.com/ArtifexSoftware/ghostpdl/commit/e5d8d4d6514600f49a6aae2811e3b6fd33c2ef54",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "gs_heap_free_object"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids searching through every allocated block when freeing a heap block to speed up the heap freeing process.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "wesnoth",
        "hash": "1a0cc7cc285e36f6048c984644edd4ee0554d51c",
        "author": "Mark de Wever",
        "date": "2008-02-06T21:52:32+00:00",
        "message": "Small optimization, send the parameter by reference instead of a copy.",
        "modified_files_count": 1,
        "modified_files": [
            "src/game_events.cpp"
        ],
        "github_commit_url": "https://github.com/wesnoth/wesnoth/commit/1a0cc7cc285e36f6048c984644edd4ee0554d51c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "cfg_to_loc"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used was changing the parameter passing from by value to by reference to avoid unnecessary copying.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "owt-deps-webrtc",
        "hash": "4637b6afca431be8caf1d22151a2cbb2e86a33d5",
        "author": "aleloi",
        "date": "2017-02-01T11:43:31+00:00",
        "message": "Consistent 30% improvement in audio mixer running time.\n\n(Or, in less flattering terms, fixing a performance issue introduced\na few months ago by me).\n\nIn GN release mode (is_debug = false), the version of the mixer code\nbefore this CL generated code that multiplied each sample (tens of\nthousands/second for each input stream) with a floating point number.\nThis number is almost always exactly 1.0f. The only situation when it's\nnot 1 is when an audio steam is added or removed.\n\nFor one input stream early return leads to a 30% improvement of audio\nmixing time profiled on x86-64 under a release build (is_debug = false,\nenable_profiling, enable_full_stack_frames_for_profiling) with 16kHz and no\nAPM limiter. There can be up to 3 streams.\n\nBUG=chromium:687502\n\nReview-Url: https://codereview.webrtc.org/2659423002\nCr-Commit-Position: refs/heads/master@{#16396}",
        "modified_files_count": 1,
        "modified_files": [
            "webrtc/modules/audio_mixer/audio_frame_manipulator.cc"
        ],
        "github_commit_url": "https://github.com/open-webrtc-toolkit/owt-deps-webrtc/commit/4637b6afca431be8caf1d22151a2cbb2e86a33d5",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved adding an early return condition to avoid unnecessary floating-point multiplication when the multiplier is almost always 1.0f.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "RAJA",
        "hash": "e6828338f96657da653d9b54fda743b5d14d83f6",
        "author": "Robert Chen",
        "date": "2020-03-10T17:25:41-07:00",
        "message": "Update mergesort with insertion sorting on 16-element chunks. 400ms faster on basic test.",
        "modified_files_count": 1,
        "modified_files": [
            "include/RAJA/util/sort.hpp"
        ],
        "github_commit_url": "https://github.com/LLNL/RAJA/commit/e6828338f96657da653d9b54fda743b5d14d83f6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "O"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaces mergesort with insertion sorting for 16-element chunks to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "foundationdb",
        "hash": "f18a0a242d654b5835f9210878699493a0c0b053",
        "author": "Meng Xu",
        "date": "2020-06-27T15:19:08-07:00",
        "message": "FastRestore:Loader frees mutation memory immediately after send mutations",
        "modified_files_count": 1,
        "modified_files": [
            "fdbserver/RestoreLoader.actor.cpp"
        ],
        "github_commit_url": "https://github.com/apple/foundationdb/commit/f18a0a242d654b5835f9210878699493a0c0b053",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "handleSendMutationsRequest"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves freeing memory allocated for mutations immediately after they are sent, reducing memory usage and improving performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "qtbase",
        "hash": "14d189f7875b7def6f9745bfd20527a0fce19a44",
        "author": "Marc Mutz",
        "date": "2015-11-29T22:47:15+00:00",
        "message": "AndroidStyle: use std::make_shared()\n\nMore efficient, because control block and tracked object\nare co-located in a single memory allocation.\n\nChange-Id: Id18e2d06db43568eb34c2e2d129d1b116af73acb\nReviewed-by: Olivier Goffart (Woboq GmbH) <ogoffart@woboq.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/plugins/platforms/android/qandroidplatformtheme.cpp"
        ],
        "github_commit_url": "https://github.com/qt/qtbase/commit/14d189f7875b7def6f9745bfd20527a0fce19a44",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "loadAndroidStyle"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy used was replacing `std::shared_ptr` construction with `std::make_shared` to co-locate the control block and tracked object in a single memory allocation, improving efficiency.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "5768402fd9c6e872252b5268ad85e3fbae4fe26b",
        "author": "Alexander Shishkin",
        "date": "2019-03-09T14:10:30+01:00",
        "message": "perf/ring_buffer: Use high order allocations for AUX buffers optimistically\n\nCurrently, the AUX buffer allocator will use high-order allocations\nfor PMUs that don't support hardware scatter-gather chaining to ensure\nlarge contiguous blocks of pages, and always use an array of single\npages otherwise.\n\nThere is, however, a tangible performance benefit in using larger chunks\nof contiguous memory even in the latter case, that comes from not having\nto fetch the next page's address at every page boundary. In particular,\na task running under Intel PT on an Atom CPU shows 1.5%-2% less runtime\npenalty with a single multi-page output region in snapshot mode (no PMI)\nthan with multiple single-page output regions, from ~6% down to ~4%. For\nthe snapshot mode it does make a difference as it is intended to run over\nlong periods of time.\n\nFor this reason, change the allocation policy to always optimistically\nstart with the highest possible order when allocating pages for the AUX\nbuffer, desceding until the allocation succeeds or order zero allocation\nfails.\n\nSigned-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Arnaldo Carvalho de Melo <acme@redhat.com>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Dave Hansen <dave.hansen@linux.intel.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Jiri Olsa <jolsa@redhat.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Rik van Riel <riel@surriel.com>\nCc: Stephane Eranian <eranian@google.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Vince Weaver <vincent.weaver@maine.edu>\nLink: https://lkml.kernel.org/r/20190215114727.62648-2-alexander.shishkin@linux.intel.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
        "modified_files_count": 1,
        "modified_files": [
            "kernel/events/ring_buffer.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/5768402fd9c6e872252b5268ad85e3fbae4fe26b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "rb_alloc_aux"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves using high-order allocations for AUX buffers to reduce runtime penalty by minimizing the need to fetch the next page's address at every page boundary.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "deadbeef",
        "hash": "1faf17b526a4629676581629d2ac6a9b6db029f9",
        "author": "Oleksiy Yakovenko",
        "date": "2022-12-22T11:19:52+01:00",
        "message": "gtkui: use float type where appropriate, for faster ftoi",
        "modified_files_count": 1,
        "modified_files": [
            "plugins/gtkui/widgets.c"
        ],
        "github_commit_url": "https://github.com/DeaDBeeF-Player/deadbeef/commit/1faf17b526a4629676581629d2ac6a9b6db029f9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "_draw_vline_aa"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves using the `float` type instead of `int` for specific calculations to improve the speed of floating-point to integer conversions.",
        "is_generic_optimization": true
    },
    {
        "hash": "87b6a3aba580944e3416630a28d7bfacc4c912e1",
        "author": "K. Lange",
        "date": "2018-08-16T22:43:18+09:00",
        "message": "[bim] Improve rendering speed by not sending so many color codes",
        "modified_files_count": 1,
        "modified_files": [
            "apps/bim.c"
        ],
        "github_commit_url": "https://github.com/klange/toaruos/commit/87b6a3aba580944e3416630a28d7bfacc4c912e1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "region"
        ],
        "is_opt_ds": "true",
        "is_opt_ds_simple": "true",
        "repository_name": "toaruos",
        "optimization_summary": "The optimization strategy reduces the number of color codes sent during rendering to improve speed.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "5e70f4bdc15960730d0ff2aa167399e36bc64278",
        "author": "Pavel Labath",
        "date": "2020-01-21T15:04:27+01:00",
        "message": "[lldb/breakpad] Use new line table constructor\n\nThe old construction method can be quadratic for some inputs. This\napproach guarantees a reasonable performance.",
        "modified_files_count": 1,
        "modified_files": [
            "lldb/source/Plugins/SymbolFile/Breakpad/SymbolFileBreakpad.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/5e70f4bdc15960730d0ff2aa167399e36bc64278",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaced a potentially quadratic line table construction method with a new approach to guarantee reasonable performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "suricata",
        "hash": "f44bbd71f56581cfc326b0142a26f51ab65f1db0",
        "author": "Victor Julien",
        "date": "2019-03-18T13:02:08+01:00",
        "message": "app-layer/udp: micro optimization",
        "modified_files_count": 1,
        "modified_files": [
            "src/app-layer.c"
        ],
        "github_commit_url": "https://github.com/OISF/suricata/commit/f44bbd71f56581cfc326b0142a26f51ab65f1db0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "AppLayerHandleUdp"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reducing the number of function calls by inlining a small, frequently used function within the `AppLayerHandleUdp` function to minimize overhead.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "viewer",
        "hash": "74a2354353813db529ae123858bafba86cd12110",
        "author": "Runitai Linden",
        "date": "2021-10-13T09:37:04-05:00",
        "message": "SL-16166 Don't use setupVertexBuffer where setupVertexBufferFast is called for (thank you, Henri!)",
        "modified_files_count": 1,
        "modified_files": [
            "indra/llrender/llvertexbuffer.cpp"
        ],
        "github_commit_url": "https://github.com/secondlife/viewer/commit/74a2354353813db529ae123858bafba86cd12110",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "LLVertexBuffer::setBufferFast"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing `setupVertexBuffer` with `setupVertexBufferFast` to reduce overhead in vertex buffer setup.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Fulcrum",
        "hash": "5cba060842da98cc0ad8545e1cdd358a040d630a",
        "author": "Calin Culianu",
        "date": "2020-01-03T00:34:37+02:00",
        "message": "Small performance improvement for block processing\n\nAdded a map.reserve() call for an internal hash table used to map\ntxid -> txPos in PreProcessedBlock::fill. This reduces the number of\nallocation during block processing slightly and should shave off a few\ncycles per block processed.",
        "modified_files_count": 1,
        "modified_files": [
            "BlockProc.cpp"
        ],
        "github_commit_url": "https://github.com/cculianu/Fulcrum/commit/5cba060842da98cc0ad8545e1cdd358a040d630a",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves calling `map.reserve()` to preallocate memory for a hash table, reducing the number of allocations during block processing.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "vengi",
        "hash": "70d07e285c3848def689c481bfa39c9bdfa65614",
        "author": "Martin Gerhardy",
        "date": "2023-08-08T18:39:21+02:00",
        "message": "VOXELFORMAT: GLTF: optimized loading gltf a lot",
        "modified_files_count": 1,
        "modified_files": [
            "src/modules/voxelformat/private/mesh/GLTFFormat.cpp"
        ],
        "github_commit_url": "https://github.com/vengi-voxel/vengi/commit/70d07e285c3848def689c481bfa39c9bdfa65614",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "copyGltfIndices"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing memory allocations and improving data copying efficiency in the GLTF file loading process.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ompi",
        "hash": "0e83568466dd89ff118b724dfa3b54104418f400",
        "author": "Nathan Hjelm",
        "date": "2018-02-13T09:51:01-07:00",
        "message": "coll/libnbc: do not take lock in progress if there are no requests\n\nThis commit fixes a flaw in the progress function for libnbc. The\nfunction was unconditionally taking a lock even if there are no\nrequests to process. This lock was showing up in vtune traces of\nmulti-threaded benchmarks.\n\nSigned-off-by: Nathan Hjelm <hjelmn@lanl.gov>",
        "modified_files_count": 1,
        "modified_files": [
            "ompi/mca/coll/libnbc/coll_libnbc_component.c"
        ],
        "github_commit_url": "https://github.com/open-mpi/ompi/commit/0e83568466dd89ff118b724dfa3b54104418f400",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ompi_coll_libnbc_progress"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves avoiding unnecessary lock acquisition in the progress function when there are no requests to process.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "qt-creator",
        "hash": "a9ef0a8af81f4822e8f6190a172747777d0b32af",
        "author": "Orgad Shaneh",
        "date": "2021-10-13T08:08:01+00:00",
        "message": "ClearCase: Minor cleanup\n\nReplace iteration over all documents with a faster lookup.\n\nChange-Id: Iccc20ff2e5a44eef9d0bc925e25ef5c7ebaa98e9\nReviewed-by: hjk <hjk@qt.io>",
        "modified_files_count": 1,
        "modified_files": [
            "src/plugins/clearcase/clearcaseplugin.cpp"
        ],
        "github_commit_url": "https://github.com/qt-creator/qt-creator/commit/a9ef0a8af81f4822e8f6190a172747777d0b32af",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ClearCasePluginPrivate::vcsOpen"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing an iteration over all documents with a faster lookup method to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "radare2",
        "hash": "9e11c5ce633da133e0922bce2591f99d21540c4c",
        "author": "pancake",
        "date": "2015-09-09T17:57:55+02:00",
        "message": "Make reflines 5x faster",
        "modified_files_count": 1,
        "modified_files": [
            "libr/core/disasm.c"
        ],
        "github_commit_url": "https://github.com/radareorg/radare2/commit/9e11c5ce633da133e0922bce2591f99d21540c4c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "handle_reflines_update"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved improving the efficiency of the reflines update function by reducing redundant calculations and streamlining the logic.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "6835dedb5bbebeadb1ee9f82f87f38a0e47e3171",
        "author": "Chris Lattner",
        "date": "2004-10-06T05:01:07+00:00",
        "message": "Codegen signed mod by 2 or -2 more efficiently.  Instead of generating:\n\nt:\n        mov %EDX, DWORD PTR [%ESP + 4]\n        mov %ECX, 2\n        mov %EAX, %EDX\n        sar %EDX, 31\n        idiv %ECX\n        mov %EAX, %EDX\n        ret\n\nGenerate:\nt:\n        mov %ECX, DWORD PTR [%ESP + 4]\n***     mov %EAX, %ECX\n        cdq\n        and %ECX, 1\n        xor %ECX, %EDX\n        sub %ECX, %EDX\n***     mov %EAX, %ECX\n        ret\n\nNote that the two marked moves are redundant, and should be eliminated by the\nregister allocator, but aren't.\n\nCompare this to GCC, which generates:\n\nt:\n        mov     %eax, DWORD PTR [%esp+4]\n        mov     %edx, %eax\n        shr     %edx, 31\n        lea     %ecx, [%edx+%eax]\n        and     %ecx, -2\n        sub     %eax, %ecx\n        ret\n\nor ICC 8.0, which generates:\n\nt:\n        movl      4(%esp), %ecx                                 #3.5\n        movl      $-2147483647, %eax                            #3.25\n        imull     %ecx                                          #3.25\n        movl      %ecx, %eax                                    #3.25\n        sarl      $31, %eax                                     #3.25\n        addl      %ecx, %edx                                    #3.25\n        subl      %edx, %eax                                    #3.25\n        addl      %eax, %eax                                    #3.25\n        negl      %eax                                          #3.25\n        subl      %eax, %ecx                                    #3.25\n        movl      %ecx, %eax                                    #3.25\n        ret                                                     #3.25\n\nWe would be in great shape if not for the moves.\n\nllvm-svn: 16763",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/Target/X86/X86ISelSimple.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/6835dedb5bbebeadb1ee9f82f87f38a0e47e3171",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaces a signed modulo operation by 2 or -2 with bitwise and arithmetic operations to avoid costly division instructions.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "efl",
        "hash": "964844821d10d4f4440c82cd99450870d1656cff",
        "author": "Derek Foreman",
        "date": "2017-02-03T15:54:48-06:00",
        "message": "ecore_evas: use ecore_timer_loop_add for idle timeout update\n\nThis shouldn't need \"exact\" time, so use a loop time based timer\nto potentially save a syscall on archs that don't have a vdso.\n\n@optimize",
        "modified_files_count": 1,
        "modified_files": [
            "src/lib/ecore_evas/ecore_evas.c"
        ],
        "github_commit_url": "https://github.com/Enlightenment/efl/commit/964844821d10d4f4440c82cd99450870d1656cff",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "_ecore_evas_idle_timeout_update"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves replacing an exact timer with a loop-based timer to reduce syscall overhead on architectures without a vdso.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "gui",
        "hash": "5ecd14a31cad496e58fbc4aca9af0e9a001689d5",
        "author": "fanquake",
        "date": "2023-02-15T16:10:46+00:00",
        "message": "Merge bitcoin/bitcoin#26844: Net: Pass `MSG_MORE` flag when sending non-final network messages (round 2)\n\n691eaf8873fe2f189153ca637506a0291504c97a Pass MSG_MORE flag when sending non-final network messages (Matt Whitlock)\n\nPull request description:\n\n  **N.B.:** This is my second attempt at introducing this optimization. #12519 (2018) was closed in deference to switching to doing gathering socket writes using `sendmsg(2)`, which I agree would have superior performance due to fewer syscalls, but that work was apparently abandoned in late 2018. Ever since, Bitcoin Core has continued writing tons of runt packets to the wire. Can we proceed with my halfway solution for now?\n\n  ----\n\n  Since Nagle's algorithm is disabled, each and every call to `send(2)` can potentially generate a separate TCP segment on the wire. This is especially inefficient when sending the tiny header preceding each message payload.\n\n  Linux implements a `MSG_MORE` flag that tells the kernel not to push the passed data immediately to the connected peer but rather to collect it in the socket's internal transmit buffer where it can be combined with data from successive calls to `send(2)`. Where available, specify this flag when calling `send(2)` in `CConnman::SocketSendData(CNode &)` if the data buffer being sent is not the last one in `node.vSendMsg`.\n\nACKs for top commit:\n  sipa:\n    ACK 691eaf8873fe2f189153ca637506a0291504c97a\n  vasild:\n    ACK 691eaf8873fe2f189153ca637506a0291504c97a\n\nTree-SHA512: 9a7f46bc12edbf78d488f05d1c46760110a24c95af74b627d2604fcd198fa3f511c5956bac36d0034e88c632d432f7d394147e667a11b027af0a30f70a546d70",
        "modified_files_count": 1,
        "modified_files": [
            "src/net.cpp"
        ],
        "github_commit_url": "https://github.com/bitcoin-core/gui/commit/5ecd14a31cad496e58fbc4aca9af0e9a001689d5",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves using the `MSG_MORE` flag in `send(2)` calls to reduce the number of TCP segments by buffering non-final network messages.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "flint",
        "hash": "5451b53703a529ff76123b7418fe2d624e122db6",
        "author": "wbhart",
        "date": "2019-04-16T13:11:30+02:00",
        "message": "Merge pull request #554 from thofma/th/fmpqpolyaddfmpq\n\nSpeed up fmpq_poly_add_fmpq",
        "modified_files_count": 1,
        "modified_files": [
            "fmpq_poly/inlines.c"
        ],
        "github_commit_url": "https://github.com/flintlib/flint/commit/5451b53703a529ff76123b7418fe2d624e122db6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "fmpq_poly_add_fmpq"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves inlining the function `fmpq_poly_add_fmpq` to reduce function call overhead and improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "metamage_1",
        "hash": "6a567e936b438ab3f1a1a82f4ede93481d89b4e1",
        "author": "Joshua Juran",
        "date": "2010-03-17T23:18:25-07:00",
        "message": "perl:  Unpessimize Lamp_async_check().\n\nInstead of calling kill() every million (or so) ops, we called it *after* that\npoint and then every time thereafter for another four billion ops (or so) until\nthe counter overflowed back to zero.\n\nThis dramatically improves performance of long-running Perl processes.",
        "modified_files_count": 1,
        "modified_files": [
            "lamp/contrib/perl-5.6.1/perl/macos/macish.c"
        ],
        "github_commit_url": "https://github.com/jjuran/metamage_1/commit/6a567e936b438ab3f1a1a82f4ede93481d89b4e1",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing the frequency of `kill()` calls by resetting the operation counter after a specific threshold, thereby improving performance for long-running Perl processes.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "xla",
        "hash": "240fd2f32d16b58473e16a4eff51f16a11a3fd6d",
        "author": "Eugene Zhulenev",
        "date": "2022-10-14T08:47:53-07:00",
        "message": "[xla:gpu:runtime] NFC: Micro performance optimizations\n\nPiperOrigin-RevId: 481153499",
        "modified_files_count": 1,
        "modified_files": [
            "xla/service/gpu/runtime/kernel_launch.cc"
        ],
        "github_commit_url": "https://github.com/openxla/xla/commit/240fd2f32d16b58473e16a4eff51f16a11a3fd6d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "LaunchFunc"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The commit implements micro performance optimizations by reducing unnecessary overhead in the kernel launch function.",
        "is_generic_optimization": true
    },
    {
        "hash": "fac64bf456cf56f0c6309d21286b7eaf170f668e",
        "author": "Matthias Kretz",
        "date": "2023-03-21T20:30:19+01:00",
        "message": "libstdc++: Use more precise __RECIPROCAL_MATH__ macro\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd_x86.h\n\t(_SimdImplX86::_S_divides): Replace test for __GCC_IEC_559 == 0\n\twith __RECIPROCAL_MATH__.",
        "modified_files_count": 1,
        "modified_files": [
            "libstdc++-v3/include/experimental/bits/simd_x86.h"
        ],
        "github_commit_url": "https://github.com/Rust-GCC/gccrs/commit/fac64bf456cf56f0c6309d21286b7eaf170f668e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "_S_divides"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "gccrs",
        "optimization_summary": "The optimization strategy involves replacing a less precise macro (`__GCC_IEC_559 == 0`) with a more specific macro (`__RECIPROCAL_MATH__`) to improve the accuracy of division operations in SIMD implementations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "libwebp",
        "hash": "b7346a1ed25d5091618f9d76c5f270e9408ba910",
        "author": "Jyrki Alakuijala",
        "date": "2013-07-09T18:47:06-07:00",
        "message": "0.1 % speedup to decoding\n\nChange-Id: If2add8a8b6f339f1d4b6a9581ce8d3d0f792d372",
        "modified_files_count": 1,
        "modified_files": [
            "src/dec/vp8l.c"
        ],
        "github_commit_url": "https://github.com/webmproject/libwebp/commit/b7346a1ed25d5091618f9d76c5f270e9408ba910",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ReadSymbol"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing the number of branches in the `ReadSymbol` function by simplifying the conditional logic, leading to a 0.1% speedup in decoding.",
        "is_generic_optimization": true
    },
    {
        "hash": "9c7a5f5efafaa01ccc57a82cc4619f433cbda699",
        "author": "Jasper St. Pierre",
        "date": "2014-11-26T18:10:55-08:00",
        "message": "gtkstylecontext: Optimize GtkStyleContext usage",
        "modified_files_count": 1,
        "modified_files": [
            "gtk/gtkstylecontext.c"
        ],
        "github_commit_url": "https://github.com/GNOME/gtk/commit/9c7a5f5efafaa01ccc57a82cc4619f433cbda699",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "get_cursor_color"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "gtk",
        "optimization_summary": "The optimization strategy involved reducing redundant calls to `GtkStyleContext` methods by caching results and reusing them where applicable.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ffmpeg",
        "hash": "d3d99a0a068ff703c7f7c3c0dc0b66c9a0774fdd",
        "author": "Anton Khirnov",
        "date": "2021-02-24T17:16:46+01:00",
        "message": "lavc/lscrdec: use ff_reget_buffer()\n\nIt is simpler and more efficient.\n\nSuggested-by: James Almer <jamrial@gmail.com>",
        "modified_files_count": 1,
        "modified_files": [
            "libavcodec/lscrdec.c"
        ],
        "github_commit_url": "https://github.com/allyourcodebase/ffmpeg/commit/d3d99a0a068ff703c7f7c3c0dc0b66c9a0774fdd",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "decode_frame_lscr"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing a custom buffer reallocation implementation with the more efficient and simpler `ff_reget_buffer()` function.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sycl",
        "hash": "e133140fd1e5ea3a5bcadc3e594e1b613c36d9c5",
        "author": "Alexander Kornienko",
        "date": "2017-05-16T15:44:42+00:00",
        "message": "[clang-tidy] Optimize matchers in readability-implicit-bool-cast. NFC\n\nDon't repeat `isInTemplateInstantiation()` and `hasAncestor()` unnecessarily.\nThis speeds up the check by a factor of up to 3 on some large files.\n\nllvm-svn: 303180",
        "modified_files_count": 1,
        "modified_files": [
            "clang-tools-extra/clang-tidy/readability/ImplicitBoolCastCheck.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/e133140fd1e5ea3a5bcadc3e594e1b613c36d9c5",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ImplicitBoolCastCheck::registerMatchers"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved avoiding redundant calls to `isInTemplateInstantiation()` and `hasAncestor()` in matchers to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "libulz",
        "hash": "ce4d80cfda0b3e3cc70aedbaeed3c5bb824ce7d7",
        "author": "rofl0r",
        "date": "2011-11-29T18:47:14+01:00",
        "message": "slightly more efficient sblist_delete",
        "modified_files_count": 1,
        "modified_files": [
            "src/sblist/sblist_delete.c"
        ],
        "github_commit_url": "https://github.com/rofl0r/libulz/commit/ce4d80cfda0b3e3cc70aedbaeed3c5bb824ce7d7",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "sblist_delete"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved making the `sblist_delete` function slightly more efficient, likely by reducing unnecessary operations or improving memory handling.",
        "is_generic_optimization": true
    },
    {
        "hash": "995e4286a047b32aebf8ce540908edb7fbd93f76",
        "author": "Subbaiah Venkata",
        "date": "2007-10-17T08:42:52-07:00",
        "message": "lib/sort.c optimization\n\nHello, I fixed and tested a small bug in lib/sort.c file, heap sort\nfunction.\n\nThe fix avoids unnecessary swap of contents when i is 0 (saves few loads\nand stores), which happens every time sort function is called.  I felt the\nfix is worth bringing it to your attention given the importance and\nfrequent use of the sort function.\n\nAcked-by: Matt Mackall <mpm@selenic.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "modified_files_count": 1,
        "modified_files": [
            "lib/sort.c"
        ],
        "github_commit_url": "https://github.com/OnePlusOSS/android_kernel_oneplus_msm8998/commit/995e4286a047b32aebf8ce540908edb7fbd93f76",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "O"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "android_kernel_oneplus_msm8998",
        "optimization_summary": "The optimization avoids unnecessary swaps in the heap sort function when the index is 0, reducing load and store operations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "mango",
        "hash": "5589735763e6fe23039bb5b3dbc35f8472e4c416",
        "author": "t0rakka",
        "date": "2022-09-04T20:36:02+03:00",
        "message": "Tune encode buffer size.",
        "modified_files_count": 1,
        "modified_files": [
            "source/mango/image/image_jxl.cpp"
        ],
        "github_commit_url": "https://github.com/t0rakka/mango/commit/5589735763e6fe23039bb5b3dbc35f8472e4c416",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "imageEncode"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves tuning the buffer size used in the encoding process to improve performance.",
        "is_generic_optimization": true
    },
    {
        "hash": "5473aca3767b00eab502b34a37b595de099980ae",
        "author": "Patrick Steinhardt",
        "date": "2024-01-03T09:54:21-08:00",
        "message": "reftable/merged: really reuse buffers to compute record keys\n\nIn 829231dc20 (reftable/merged: reuse buffer to compute record keys,\n2023-12-11), we have refactored the merged iterator to reuse a pair of\nlong-living strbufs by relying on the fact that `reftable_record_key()`\ntries to reuse already allocated strbufs by calling `strbuf_reset()`,\nwhich should give us significantly fewer reallocations compared to the\nold code that used on-stack strbufs that are allocated for each and\nevery iteration. Unfortunately, we called `strbuf_release()` on these\nlong-living strbufs that we meant to reuse on each iteration, defeating\nthe optimization.\n\nFix this performance issue by not releasing those buffers on iteration\nanymore, where we instead rely on `merged_iter_close()` to release the\nbuffers for us.\n\nUsing `git show-ref --quiet` in a repository with ~350k refs this leads\nto a significant drop in allocations. Before:\n\n    HEAP SUMMARY:\n        in use at exit: 21,163 bytes in 193 blocks\n      total heap usage: 1,410,148 allocs, 1,409,955 frees, 61,976,068 bytes allocated\n\nAfter:\n\n    HEAP SUMMARY:\n        in use at exit: 21,163 bytes in 193 blocks\n      total heap usage: 708,058 allocs, 707,865 frees, 36,783,255 bytes allocated\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
        "modified_files_count": 1,
        "modified_files": [
            "reftable/merged.c"
        ],
        "github_commit_url": "https://github.com/git/git/commit/5473aca3767b00eab502b34a37b595de099980ae",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "merged_iter_next_entry"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "git",
        "optimization_summary": "The optimization strategy involved reusing long-living buffers instead of releasing and reallocating them on each iteration to reduce memory allocations.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "bitcoin",
        "hash": "3252208cb10be645bae415c90fb2ed8217838490",
        "author": "João Barbosa",
        "date": "2016-03-09T10:10:36+00:00",
        "message": "Improve EncodeBase58 performance",
        "modified_files_count": 1,
        "modified_files": [
            "src/base58.cpp"
        ],
        "github_commit_url": "https://github.com/bitcoin/bitcoin/commit/3252208cb10be645bae415c90fb2ed8217838490",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "EncodeBase58"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing the number of division operations in the base58 encoding process by precomputing values and using bitwise shifts.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "gcc-xtensa",
        "hash": "8714c250029e1dcdd2413318c8dc0d0c0f002f57",
        "author": "wilson",
        "date": "1993-12-24T01:35:17+00:00",
        "message": "(optimize_reg_copy_1): After decreasing sregno's\nreg_live_length, correct it if it is now obviously too small.\n\n\ngit-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/trunk@6291 138bc75d-0d04-0410-961f-82ee72b054a4",
        "modified_files_count": 1,
        "modified_files": [
            "gcc/local-alloc.c"
        ],
        "github_commit_url": "https://github.com/jcmvbkbc/gcc-xtensa/commit/8714c250029e1dcdd2413318c8dc0d0c0f002f57",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "GET_MODE"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves correcting the `reg_live_length` of `sregno` after it was decreased to ensure it is not set to an obviously too small value.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "revng",
        "hash": "68fca82f46bea2688259f87a2691fea27da5f882",
        "author": "Pietro Fezzardi",
        "date": "2023-10-09T10:34:41+02:00",
        "message": "RestructureCFG: call updateNodes more efficiently\n\nBefore this commit it was called on all metaregions, now only on parent\nmetaregions.",
        "modified_files_count": 1,
        "modified_files": [
            "lib/RestructureCFG/RestructureCFG.cpp"
        ],
        "github_commit_url": "https://github.com/revng/revng/commit/68fca82f46bea2688259f87a2691fea27da5f882",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "restructureCFG"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy reduces redundant calls to `updateNodes` by invoking it only on parent metaregions instead of all metaregions.",
        "is_generic_optimization": true
    },
    {
        "hash": "f68e14805085972b4e0b0ab684af37f713b9c262",
        "author": "Michael S. Tsirkin",
        "date": "2009-09-22T07:17:42-07:00",
        "message": "mm: reduce atomic use on use_mm fast path\n\nWhen the mm being switched to matches the active mm, we don't need to\nincrement and then drop the mm count.  In a simple benchmark this happens\nin about 50% of time.  Making that conditional reduces contention on that\ncacheline on SMP systems.\n\nAcked-by: Andrea Arcangeli <aarcange@redhat.com>\nSigned-off-by: Michael S. Tsirkin <mst@redhat.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "modified_files_count": 1,
        "modified_files": [
            "mm/mmu_context.c"
        ],
        "github_commit_url": "https://github.com/OnePlusOSS/android_kernel_oneplus_msm8998/commit/f68e14805085972b4e0b0ab684af37f713b9c262",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "use_mm"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "android_kernel_oneplus_msm8998",
        "optimization_summary": "The optimization strategy reduces atomic operations by conditionally avoiding unnecessary increments and decrements of the mm count when the mm being switched to matches the active mm.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ceph",
        "hash": "fcff420a580d7f24cdd81aebf6c3b01c5f8785f7",
        "author": "lightmelodies",
        "date": "2023-11-26T06:07:27+00:00",
        "message": "rgw: optimize gc chain size calculation\n\nReduce time complexity of gc chain size calculation from O(n^2) to O(n).\n\nSigned-off-by: Wei Wang <lightmelodies@outlook.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/rgw/driver/rados/rgw_gc.cc"
        ],
        "github_commit_url": "https://github.com/ceph/ceph/commit/fcff420a580d7f24cdd81aebf6c3b01c5f8785f7",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "RGWGC::send_split_chain"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization reduces the time complexity of the garbage collection chain size calculation from O(n^2) to O(n) by improving the algorithm's efficiency.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ompi",
        "hash": "d5d16c21623c97a561ae818eb9c9db4a0c3eaf05",
        "author": "George Bosilca",
        "date": "2006-01-19T23:57:03+00:00",
        "message": "A slighy faster version. The if outside the for not inside.\n\nThis commit was SVN r8761.",
        "modified_files_count": 1,
        "modified_files": [
            "ompi/class/ompi_free_list.c"
        ],
        "github_commit_url": "https://github.com/open-mpi/ompi/commit/d5d16c21623c97a561ae818eb9c9db4a0c3eaf05",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ompi_free_list_grow"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved moving an if-condition outside of a for-loop to reduce redundant checks within each iteration.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "supercollider",
        "hash": "f0484bdd723a29917b7f19ec8e2715f397d76f81",
        "author": "Tim Blechmann",
        "date": "2010-11-28T14:12:17+01:00",
        "message": "sc plugin interface: increase speed of buffer_alloc_read_channels\n\nreading multiple frames at once from libsndfile seems to be way more\nefficient than reading one by one. quick benchmarks suggest a speedup of\nmore than 10\n\nSigned-off-by: Tim Blechmann <tim@klingt.org>",
        "modified_files_count": 1,
        "modified_files": [
            "source/sc/sc_plugin_interface.cpp"
        ],
        "github_commit_url": "https://github.com/supercollider/supercollider/commit/f0484bdd723a29917b7f19ec8e2715f397d76f81",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "sc_plugin_interface::buffer_alloc_read_channels"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reading multiple frames at once from libsndfile instead of reading them one by one to improve efficiency.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "mongoose-os",
        "hash": "12c07edc9a4d32bd71b3dc263ac9e6810f1ab25e",
        "author": "Deomid Ryabkov",
        "date": "2019-10-29T22:00:41+00:00",
        "message": "Do not render UDP log message if UDP logging is not enabled\n\nMinor perf optimization\n\nCL: Do not render UDP log message if UDP logging is not enabled; minor perf optimization",
        "modified_files_count": 1,
        "modified_files": [
            "src/mgos_debug.c"
        ],
        "github_commit_url": "https://github.com/cesanta/mongoose-os/commit/12c07edc9a4d32bd71b3dc263ac9e6810f1ab25e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "mgos_debug_write"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy avoids rendering UDP log messages when UDP logging is not enabled, reducing unnecessary processing.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "Halide",
        "hash": "fca8d9606145d0c42caac1954c37d86fa291fea0",
        "author": "Marcos Slomp",
        "date": "2023-07-28T09:55:19-07:00",
        "message": "Making Metal code-gen a bit faster (#7720)\n\nremoving redundant print_expr() call",
        "modified_files_count": 1,
        "modified_files": [
            "src/CodeGen_Metal_Dev.cpp"
        ],
        "github_commit_url": "https://github.com/halide/Halide/commit/fca8d9606145d0c42caac1954c37d86fa291fea0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CodeGen_Metal_Dev::CodeGen_Metal_C::visit"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved removing a redundant print_expr() call to improve code execution speed.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "ImageMagick6",
        "hash": "0132164f33ea82daf732f3923c2fb141cb834dcc",
        "author": "Cristy",
        "date": "2021-07-25T20:32:32-04:00",
        "message": "reduce memory moves",
        "modified_files_count": 1,
        "modified_files": [
            "magick/histogram.c"
        ],
        "github_commit_url": "https://github.com/ImageMagick/ImageMagick6/commit/0132164f33ea82daf732f3923c2fb141cb834dcc",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CheckImageColors"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves reducing memory moves by modifying the CheckImageColors function to minimize unnecessary data copying.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "fastbasic",
        "hash": "721036c954f346c71fef730230e273301ec6ac54",
        "author": "Daniel Serpell",
        "date": "2018-03-01T22:53:45-03:00",
        "message": "Adds an optimizer pass to replace A <= x with A < x+1.",
        "modified_files_count": 1,
        "modified_files": [
            "src/compiler/peephole.cc"
        ],
        "github_commit_url": "https://github.com/dmsc/fastbasic/commit/721036c954f346c71fef730230e273301ec6ac54",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "peephole"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaces the condition `A <= x` with `A < x+1` to potentially simplify comparisons and improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "silifuzz",
        "hash": "5875d5deab8d2f0419a376628a66782959546ea1",
        "author": "Doug Kwan",
        "date": "2024-03-28T10:49:18-07:00",
        "message": "#silifuzz Fix a minor performance issue in crc32c computation.\n\nWe should not do byte-wise CRC update at the end of input if remaining input size is a multiple of sizeof(uint64_t).\n\nPiperOrigin-RevId: 619989373",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/google/silifuzz/commit/5875d5deab8d2f0419a376628a66782959546ea1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "crc32c_accelerated_impl"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization avoids unnecessary byte-wise CRC updates when the remaining input size is a multiple of `sizeof(uint64_t)` by skipping the byte-wise computation in such cases.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "duckstation",
        "hash": "4e802e90caa14d95ea56a68faabcd95d2c7702f1",
        "author": "Connor McLaughlin",
        "date": "2021-01-20T12:32:37+10:00",
        "message": "SPU: Move voice key off/on outside sample loop\n\nShould be a very tiny performance boost with no difference in behaviour.",
        "modified_files_count": 1,
        "modified_files": [
            "src/core/spu.cpp"
        ],
        "github_commit_url": "https://github.com/stenzek/duckstation/commit/4e802e90caa14d95ea56a68faabcd95d2c7702f1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SPU::Execute"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved moving voice key off/on operations outside the sample loop to reduce redundant calls and improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "sparselizard",
        "hash": "280d40b3e06d8bb8ec4af35823802f1823511ad5",
        "author": "Alexandre Halbach",
        "date": "2021-03-08T08:57:42+02:00",
        "message": "minor speedup defineinneroverlapinterfaces",
        "modified_files_count": 1,
        "modified_files": [
            "src/mesh/dtracker.cpp"
        ],
        "github_commit_url": "https://github.com/halbux/sparselizard/commit/280d40b3e06d8bb8ec4af35823802f1823511ad5",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "dtracker::defineinneroverlapinterfaces"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing redundant computations by precomputing and caching frequently used values within the `defineinneroverlapinterfaces` function.",
        "is_generic_optimization": true
    },
    {
        "hash": "e9895752a396c4acb8c2b4ba525c13329d4e9fab",
        "author": "Nikias Bassen",
        "date": "2017-02-01T18:50:00+01:00",
        "message": "bplist: Avoid heap buffer allocation when parsing array/dict/string/data node sizes > 14\n\nThe sizes where effectively parsed by calling parse_uint_node() which\nallocates a node_t (along with plist_data_t) that is immediately freed\nafter retrieving the integer value it holds.\nThis commit changes the code to directly operate on the binary stream\nto 'just' read the size instead, reducing the memory footprint further.",
        "modified_files_count": 1,
        "modified_files": [
            "src/bplist.c"
        ],
        "github_commit_url": "https://github.com/libimobiledevice/libplist/commit/e9895752a396c4acb8c2b4ba525c13329d4e9fab",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "parse_bin_node"
        ],
        "is_opt_ds": "true",
        "is_opt_ds_simple": "true",
        "repository_name": "libplist",
        "optimization_summary": "The optimization strategy avoids heap buffer allocation by directly reading size values from the binary stream instead of creating and freeing temporary nodes.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "cppcheck",
        "hash": "7908421e0e02ddc79258864ec2c22d2541c500df",
        "author": "Daniel Marjamäki",
        "date": "2007-05-26T06:44:28+00:00",
        "message": "Tokenize: Improved the tokenizer. Calculations are done in the tokenizer. sizeof is replaced with numbers.",
        "modified_files_count": 1,
        "modified_files": [
            "tokenize.cpp"
        ],
        "github_commit_url": "https://github.com/danmar/cppcheck/commit/7908421e0e02ddc79258864ec2c22d2541c500df",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Tokenize"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved replacing `sizeof` calculations with precomputed numbers to reduce runtime overhead during tokenization.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "e6331a321aafcc291a60ceedf4d6b0051a6117ca",
        "author": "Paul Burton",
        "date": "2019-03-25T14:02:12-07:00",
        "message": "MIPS: KVM: Use prandom_u32_max() to generate tlbwr index\n\nEmulation of the tlbwr instruction, which writes a TLB entry to a random\nindex in the TLB, currently uses get_random_bytes() to generate a 4 byte\nrandom number which we then mask to form the index. This is overkill in\na couple of ways:\n\n  - We don't need 4 bytes here since we mask the value to form a 6 bit\n    number anyway, so we waste /dev/random entropy generating 3 random\n    bytes that are unused.\n\n  - We don't need crypto-grade randomness here - the architecture spec\n    allows implementations to use any algorithm & merely encourages that\n    some pseudo-randomness be used rather than a simple counter. The\n    fast prandom_u32() function fits that criteria well.\n\nSo rather than using get_random_bytes() & consuming /dev/random entropy,\nswitch to using the faster prandom_u32_max() which provides what we need\nhere whilst also performing the masking/modulo for us.\n\nSigned-off-by: Paul Burton <paul.burton@mips.com>\nReported-by: George Spelvin <lkml@sdf.org>\nCc: James Hogan <jhogan@kernel.org>\nCc: linux-mips@vger.kernel.org",
        "modified_files_count": 1,
        "modified_files": [
            "arch/mips/kvm/emulate.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/e6331a321aafcc291a60ceedf4d6b0051a6117ca",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "kvm_mips_emul_tlbwr"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaces a cryptographic random number generator with a faster pseudo-random number generator and reduces unnecessary entropy consumption for generating a TLB index.",
        "is_generic_optimization": true
    },
    {
        "hash": "3d7d72a34e05b23e21bafc8bfb861e73c86b31f3",
        "author": "Jack Wang",
        "date": "2023-09-06T23:55:09+02:00",
        "message": "x86/sgx: Break up long non-preemptible delays in sgx_vepc_release()\n\nOn large enclaves we hit the softlockup warning with following call trace:\n\n\txa_erase()\n\tsgx_vepc_release()\n\t__fput()\n\ttask_work_run()\n\tdo_exit()\n\nThe latency issue is similar to the one fixed in:\n\n  8795359e35bc (\"x86/sgx: Silence softlockup detection when releasing large enclaves\")\n\nThe test system has 64GB of enclave memory, and all is assigned to a single VM.\nRelease of 'vepc' takes a longer time and causes long latencies, which triggers\nthe softlockup warning.\n\nAdd cond_resched() to give other tasks a chance to run and reduce\nlatencies, which also avoids the softlockup detector.\n\n[ mingo: Rewrote the changelog. ]\n\nFixes: 540745ddbc70 (\"x86/sgx: Introduce virtual EPC for use by KVM guests\")\nReported-by: Yu Zhang <yu.zhang@ionos.com>\nSigned-off-by: Jack Wang <jinpu.wang@ionos.com>\nSigned-off-by: Ingo Molnar <mingo@kernel.org>\nTested-by: Yu Zhang <yu.zhang@ionos.com>\nReviewed-by: Jarkko Sakkinen <jarkko@kernel.org>\nReviewed-by: Kai Huang <kai.huang@intel.com>\nAcked-by: Haitao Huang <haitao.huang@linux.intel.com>\nCc: stable@vger.kernel.org",
        "modified_files_count": 1,
        "modified_files": [
            "arch/x86/kernel/cpu/sgx/virt.c"
        ],
        "github_commit_url": "https://github.com/altera-opensource/linux-socfpga/commit/3d7d72a34e05b23e21bafc8bfb861e73c86b31f3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "sgx_vepc_release"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "linux-socfpga",
        "optimization_summary": "The optimization strategy involved adding `cond_resched()` to break up long non-preemptible delays and reduce latencies, preventing softlockup warnings.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "133eb8e38b02c6c63a039523fca12737009a6686",
        "author": "Robin Gong",
        "date": "2018-10-12T18:54:02+02:00",
        "message": "spi: imx: use PIO mode if size is small\n\nUse PIO mode instead if size is smaller than fifo size, since\ndma may be less efficient.\n\nSigned-off-by: Robin Gong <yibin.gong@nxp.com>\nSigned-off-by: Mark Brown <broonie@kernel.org>",
        "modified_files_count": 1,
        "modified_files": [
            "drivers/spi/spi-imx.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/133eb8e38b02c6c63a039523fca12737009a6686",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "spi_imx_can_dma"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves switching to PIO mode for small data transfers to avoid the inefficiency of DMA for such cases.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "f32c",
        "hash": "738662dbedd55690cff26e171689ce9e40720e47",
        "author": "marko",
        "date": "2011-08-03T00:32:58+00:00",
        "message": "Do a binary search on half words, and then bytes, in word-aligned path\nof strcmp(), for performance increase from 1.34 to 1.37 DMIPS/MHz.\n\n\n\ngit-svn-id: svn+ssh://login.nxlab.fer.hr/fpgasvn/f32c@490 6164e1d0-f123-df11-80f4-0019d13f85ef",
        "modified_files_count": 1,
        "modified_files": [
            "src/include/string.h"
        ],
        "github_commit_url": "https://github.com/f32c/f32c/commit/738662dbedd55690cff26e171689ce9e40720e47",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "strcmp"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves using a binary search on half words and then bytes in the word-aligned path of strcmp() to improve performance.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "llvm-leg",
        "hash": "7c8a26030faad65d49ecd06a4e51344368b79d8d",
        "author": "Nadav Rotem",
        "date": "2013-07-16T22:51:07+00:00",
        "message": "SLPVectorizer: Improve the compile time of isConsecutive by adding a simple constant-gep check before using SCEV.\nThis check does not always work because not all of the GEPs use a constant offset, but it happens often enough to reduce the number of times we use SCEV.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@186465 91177308-0d34-0410-b5e6-96231b3b80d8",
        "modified_files_count": 1,
        "modified_files": [
            "lib/Transforms/Vectorize/SLPVectorizer.cpp"
        ],
        "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/7c8a26030faad65d49ecd06a4e51344368b79d8d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "BoUpSLP::isConsecutiveAccess"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves adding a simple constant-gep check before using SCEV to reduce compile time by avoiding expensive SCEV calculations in some cases.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "android_kernel_brcm_rpi",
        "hash": "3fe6a63b5dbdc0864f01d3171046af03d34ee747",
        "author": "Dmitry Vyukov",
        "date": "2022-01-05T12:42:32+01:00",
        "message": "tomoyo: Check exceeded quota early in tomoyo_domain_quota_is_ok().\n\n[ Upstream commit 04e57a2d952bbd34bc45744e72be3eecdc344294 ]\n\nIf tomoyo is used in a testing/fuzzing environment in learning mode,\nfor lots of domains the quota will be exceeded and stay exceeded\nfor prolonged periods of time. In such cases it's pointless (and slow)\nto walk the whole acl list again and again just to rediscover that\nthe quota is exceeded. We already have the TOMOYO_DIF_QUOTA_WARNED flag\nthat notes the overflow condition. Check it early to avoid the slowdown.\n\n[penguin-kernel]\nThis patch causes a user visible change that the learning mode will not be\nautomatically resumed after the quota is increased. To resume the learning\nmode, administrator will need to explicitly clear TOMOYO_DIF_QUOTA_WARNED\nflag after increasing the quota. But I think that this change is generally\npreferable, for administrator likely wants to optimize the acl list for\nthat domain before increasing the quota, or that domain likely hits the\nquota again. Therefore, don't try to care to clear TOMOYO_DIF_QUOTA_WARNED\nflag automatically when the quota for that domain changed.\n\nSigned-off-by: Dmitry Vyukov <dvyukov@google.com>\nSigned-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>\nSigned-off-by: Sasha Levin <sashal@kernel.org>",
        "modified_files_count": 1,
        "modified_files": [
            "security/tomoyo/util.c"
        ],
        "github_commit_url": "https://github.com/lineage-rpi/android_kernel_brcm_rpi/commit/3fe6a63b5dbdc0864f01d3171046af03d34ee747",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "tomoyo_read_lock"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves checking a flag early in the function to avoid unnecessary traversal of the ACL list when the quota is already exceeded.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "libosmscout",
        "hash": "6b64aa5b7e180cace70d47b837a53265e648b2f4",
        "author": "Lukáš Karas",
        "date": "2018-11-29T07:57:25+01:00",
        "message": "allow to change cache sizes by argument of PerformanceTest",
        "modified_files_count": 1,
        "modified_files": [
            "Demos/src/PerformanceTest.cpp"
        ],
        "github_commit_url": "https://github.com/Framstag/libosmscout/commit/6b64aa5b7e180cace70d47b837a53265e648b2f4",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involves allowing cache sizes to be adjusted via arguments in the PerformanceTest to potentially improve performance by fine-tuning memory usage.",
        "is_generic_optimization": true
    },
    {
        "hash": "e6e25101fd4addb24f9ec69032175c5d77ea7927",
        "author": "caballa",
        "date": "2022-05-26T22:29:07-06:00",
        "message": "refactor(optimizer): mark function as InaccessibleMemOnly\n\nLLVM may remove all calls to verifier.assume if it is marked as\nReadNone or ReadOnly even if the function is marked as OptimizeNone.\nThe attribute InaccessibleMemOnly should be good enough because it\nensures that the call may only access to memory that is innaccesible\nfrom the IR. Thus, LLVM optimizations should be okay.",
        "modified_files_count": 1,
        "modified_files": [
            "lib/Clam/Optimizer/Optimizer.cc"
        ],
        "github_commit_url": "https://github.com/seahorn/clam/commit/e6e25101fd4addb24f9ec69032175c5d77ea7927",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Optimizer::runOnModule"
        ],
        "is_opt_ds": "false",
        "is_opt_ds_simple": "true",
        "repository_name": "clam",
        "optimization_summary": "The optimization strategy involved marking a function with the `InaccessibleMemOnly` attribute to prevent LLVM from removing calls to `verifier.assume` while ensuring safe memory access assumptions.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "xbmc",
        "hash": "c3746317e21702a6fc53b13689df69fe78b74d34",
        "author": "Tobias Markus",
        "date": "2024-09-01T11:47:44+02:00",
        "message": "xbmc base: cppcheck performance fixes",
        "modified_files_count": 1,
        "modified_files": [
            "xbmc/Util.cpp"
        ],
        "github_commit_url": "https://github.com/xbmc/xbmc/commit/c3746317e21702a6fc53b13689df69fe78b74d34",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "GetHomePath"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved addressing performance issues identified by cppcheck in the `GetHomePath` function, likely by reducing unnecessary operations or improving code efficiency.",
        "is_generic_optimization": true
    },
    {
        "hash": "7e0f51cb445be8d3aee80e433ed8da4a33ad0157",
        "author": "Andy Lutomirski",
        "date": "2015-10-07T11:34:06+02:00",
        "message": "x86/uaccess: Add unlikely() to __chk_range_not_ok() failure paths\n\nThis should improve code quality a bit. It also shrinks the kernel text:\n\n Before:\n       text     data      bss       dec    filename\n   21828379  5194760  1277952  28301091    vmlinux\n\n After:\n       text     data      bss       dec    filename\n   21827997  5194760  1277952  28300709    vmlinux\n\n... by 382 bytes.\n\nSigned-off-by: Andy Lutomirski <luto@kernel.org>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: Denys Vlasenko <dvlasenk@redhat.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: linux-kernel@vger.kernel.org\nLink: http://lkml.kernel.org/r/f427b8002d932e5deab9055e0074bb4e7e80ee39.1444091584.git.luto@kernel.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
        "modified_files_count": 1,
        "modified_files": [
            "arch/x86/include/asm/uaccess.h"
        ],
        "github_commit_url": "https://github.com/OnePlusOSS/android_kernel_oneplus_msm8998/commit/7e0f51cb445be8d3aee80e433ed8da4a33ad0157",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "get_fs"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "android_kernel_oneplus_msm8998",
        "optimization_summary": "The optimization strategy used was adding `unlikely()` macros to failure paths in `__chk_range_not_ok()` to improve branch prediction and reduce kernel text size.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "kmsan",
        "hash": "fe66483156050f4eb63c4a1988f3b439e6c9ff2a",
        "author": "Davidlohr Bueso",
        "date": "2020-01-29T19:50:44+01:00",
        "message": "Bluetooth: optimize barrier usage for Rmw atomics\n\nUse smp_mb__before_atomic() instead of smp_mb() and avoid the\nunnecessary barrier for non LL/SC architectures, such as x86.\n\nSigned-off-by: Davidlohr Bueso <dbueso@suse.de>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>",
        "modified_files_count": 1,
        "modified_files": [
            "net/bluetooth/hidp/core.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/fe66483156050f4eb63c4a1988f3b439e6c9ff2a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "hidp_session_run"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy replaces a general memory barrier with a more specific one for non LL/SC architectures to avoid unnecessary barriers.",
        "is_generic_optimization": true
    },
    {
        "repository_name": "redot-engine",
        "hash": "4dad9c6c05921cf98c9ee59a5f28358496912433",
        "author": "katsuhisa yuasa",
        "date": "2024-10-19T14:09:34+09:00",
        "message": "optimize ImageLoaderSVG::create_image_from_utf8_buffer",
        "modified_files_count": 1,
        "modified_files": [
            "modules/svg/image_loader_svg.cpp"
        ],
        "github_commit_url": "https://github.com/Redot-Engine/redot-engine/commit/4dad9c6c05921cf98c9ee59a5f28358496912433",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ImageLoaderSVG::create_image_from_utf8_buffer"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": "The optimization strategy involved reducing unnecessary memory allocations and improving data handling efficiency in the SVG image loading process.",
        "is_generic_optimization": true
    }
]