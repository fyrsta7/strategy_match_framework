{
  "metadata": {
    "min_cluster_size": 13,
    "total_clusters": 10,
    "clusters_with_summaries": 10,
    "missing_summaries_count": 0
  },
  "combined_clusters": [
    {
      "cluster_id": "199",
      "size": 24,
      "repositories_distribution": {
        "ssde": 1,
        "tensorflow": 6,
        "osgearth": 1,
        "NPLRuntime": 1,
        "MyScaleDB": 1,
        "oneDAL": 1,
        "BsodSurvivor": 1,
        "graaljs": 1,
        "Seamly2D": 1,
        "bg3se": 1,
        "xbmc": 1,
        "spades": 2,
        "kate": 1,
        "synfig": 1,
        "NBlood": 1,
        "operon": 1,
        "cmssw": 1,
        "patchelf": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves replacing value-based loop iteration with reference-based iteration to eliminate unnecessary copy overhead and improve performance.",
        "code_examples": [
          [
            "// Before\nfor (auto value : container) {\n    process(value);\n}",
            "// After\nfor (const auto& value : container) {\n    process(value);\n}"
          ],
          [
            "// Before\nfor (auto element : vector) {\n    modify(element);\n}",
            "// After\nfor (auto& element : vector) {\n    modify(element);\n}"
          ]
        ],
        "application_conditions": [
          "The code contains a range-based for loop iterating over a container of non-primitive types.",
          "The loop variable is declared as a value type (e.g., `auto x` or `T x`) rather than a reference type (e.g., `auto& x` or `const auto& x`).",
          "The container being iterated over is not a temporary object or rvalue."
        ]
      },
      "commits": [
        {
          "repository_name": "ssde",
          "hash": "7cd12d8543e899ad4993ade30a2fdcb6add86a08",
          "author": "Valentin Radu",
          "date": "2021-08-28T01:30:32+03:00",
          "message": "Small performance improvement",
          "modified_files_count": 1,
          "modified_files": [
            "common.h"
          ],
          "github_commit_url": "https://github.com/valinet/ssde/commit/7cd12d8543e899ad4993ade30a2fdcb6add86a08",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "HandlePolicyBinary"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing the number of conditional checks by consolidating redundant conditions in the `HandlePolicyBinary` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "tensorflow",
          "hash": "982b79df43b05910cca9fa19777072a02c2529ff",
          "author": "Mehdi Amini",
          "date": "2021-12-28T19:13:03-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in hlo_legalize_to_memref.cc (NFC)\n\nPiperOrigin-RevId: 418709823\nChange-Id: I151f9ab6dad865d7921a5cbda4d2b85c6ff293d7",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/hlo_legalize_to_memref.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/982b79df43b05910cca9fa19777072a02c2529ff",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "InsertDynamicMemrefCastOp"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `InsertDynamicMemrefCastOp` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "osgearth",
          "hash": "4e2019530f30bc4e1f850f307efddb1d9337cf7a",
          "author": "Jason Beverage",
          "date": "2017-10-03T12:48:15-04:00",
          "message": "Applying reference optimization to offset codepath",
          "modified_files_count": 1,
          "modified_files": [
            "src/osgEarth/ElevationLayer.cpp"
          ],
          "github_commit_url": "https://github.com/gwaldron/osgearth/commit/4e2019530f30bc4e1f850f307efddb1d9337cf7a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ElevationLayerVector::populateHeightFieldAndNormalMap"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in the offset codepath.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "NPLRuntime",
          "hash": "8a4073ca0890a53aeb571781657e8a57ee50a7ee",
          "author": "kkvskkkk",
          "date": "2017-08-02T16:10:46+08:00",
          "message": "optimize performance",
          "modified_files_count": 1,
          "modified_files": [
            "Client/trunk/ParaEngineClient/NPL/NPLHelper.cpp"
          ],
          "github_commit_url": "https://github.com/LiXizhi/NPLRuntime/commit/8a4073ca0890a53aeb571781657e8a57ee50a7ee",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "NPLHelper::SerializeToSCode"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing a string concatenation operation with a more efficient method to reduce overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing unnecessary string copying by using `std::string_view` instead of `std::string` in the `SerializeToSCode` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "tensorflow",
          "hash": "5e0db672b677752b19ab2c7b52d3a32b7e3ae8b7",
          "author": "Mehdi Amini",
          "date": "2021-12-28T23:32:24-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in test_infer_shaped_type_pass.cc (NFC)\n\nPiperOrigin-RevId: 418732883\nChange-Id: Ic34888d9edd04c28367ac8e6b6d4557980c7f023",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/test_infer_shaped_type_pass.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/5e0db672b677752b19ab2c7b52d3a32b7e3ae8b7",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `matchAndRewrite` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `matchAndRewrite` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "tensorflow",
          "hash": "064772d6f1bc3048dd3c8dd8da5c2a27179b972f",
          "author": "Mehdi Amini",
          "date": "2021-12-28T22:26:49-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in optimize_mhlo.cc (NFC)\n\nPiperOrigin-RevId: 418727791\nChange-Id: I0eb619996990f46f4b0150257909974772220e5e",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/optimize_mhlo.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/064772d6f1bc3048dd3c8dd8da5c2a27179b972f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `matchAndRewrite` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in the `matchAndRewrite` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "MyScaleDB",
          "hash": "c41dedc9223d1c2cd049949a298880ff9557f741",
          "author": "Amos Bird",
          "date": "2021-03-02T11:55:58+08:00",
          "message": "optimize for ColumnLowCardinality",
          "modified_files_count": 1,
          "modified_files": [
            "src/Columns/ColumnLowCardinality.cpp"
          ],
          "github_commit_url": "https://github.com/myscale/MyScaleDB/commit/c41dedc9223d1c2cd049949a298880ff9557f741",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the overhead of copying values by changing value-based loop iteration to reference-based iteration in the ColumnLowCardinality implementation.",
            "The optimization strategy involved reducing the overhead of type checks and conversions in the ColumnLowCardinality implementation by streamlining the handling of low-cardinality data.",
            "The optimization strategy involved reducing the overhead of copying values by changing value-based loop iteration to reference-based iteration in ColumnLowCardinality.",
            "The optimization strategy involved improving the performance of the `ColumnLowCardinality` class by reducing unnecessary memory allocations and improving data access patterns.",
            "The optimization strategy involved reducing the overhead of handling low-cardinality columns by improving the efficiency of data access and storage mechanisms."
          ],
          "is_generic_optimization": [
            true,
            false,
            true,
            true,
            false
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the overhead of copying values by changing value-based loop iteration to reference-based iteration in the ColumnLowCardinality implementation.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "oneDAL",
          "hash": "38a60484fcf685015edd31145b705f49410da148",
          "author": "dmitrypa",
          "date": "2020-03-05T16:26:52+03:00",
          "message": "fix performance gap",
          "modified_files_count": 1,
          "modified_files": [
            "include/data_management/data/soa_numeric_table.h"
          ],
          "github_commit_url": "https://github.com/uxlfoundation/oneDAL/commit/38a60484fcf685015edd31145b705f49410da148",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the overhead of accessing elements in a Structure of Arrays (SoA) numeric table by minimizing unnecessary memory access and improving data locality.",
            "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration in the SOA numeric table implementation.",
            "The optimization strategy involved reducing the overhead of accessing elements in a structure of arrays (SoA) numeric table by minimizing unnecessary memory accesses and improving data locality.",
            "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration in the SOA numeric table implementation.",
            "The optimization strategy involved reducing overhead by changing value-based loop iteration to reference-based iteration in the SOA numeric table implementation."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration in the SOA numeric table implementation.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "BsodSurvivor",
          "hash": "774785a79d14c95d467dd0224761723d51b5f9da",
          "author": "Chris Lattner",
          "date": "2006-09-03T07:53:50+00:00",
          "message": "minor speedup\n\nllvm-svn: 30065",
          "modified_files_count": 1,
          "modified_files": [
            "llvm/lib/CodeGen/LiveIntervalAnalysis.cpp"
          ],
          "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/774785a79d14c95d467dd0224761723d51b5f9da",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the overhead of copying values by changing value-based loop iteration to reference-based iteration in the LiveIntervalAnalysis.cpp file.",
            "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values within a loop.",
            "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values within the LiveIntervalAnalysis.cpp file.",
            "The optimization strategy involved reducing the overhead of copying values by changing value-based loop iteration to reference-based iteration in the LiveIntervalAnalysis.cpp file.",
            "The commit likely implements a minor speedup by optimizing loop iteration or condition checks in the LiveIntervalAnalysis.cpp file."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the overhead of copying values by changing value-based loop iteration to reference-based iteration in the LiveIntervalAnalysis.cpp file.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "graaljs",
          "hash": "d2dce597295aefee9cef8ab36c81e1174227fe32",
          "author": "Tobias Nießen",
          "date": "2022-08-22T19:37:28-04:00",
          "message": "src: avoid copying BaseObjectPtrs in loop\n\nWhile copying BaseObjectPtrs is cheap, it is not a no-op, so it is best\nto iterate over references to BaseObjectPtrs only.\n\nPR-URL: https://github.com/nodejs/node/pull/44270\nReviewed-By: Richard Lau <rlau@redhat.com>\nReviewed-By: Darshan Sen <raisinten@gmail.com>\nReviewed-By: Luigi Pinca <luigipinca@gmail.com>",
          "modified_files_count": 1,
          "modified_files": [
            "src/node_messaging.cc"
          ],
          "github_commit_url": "https://github.com/oracle/graaljs/commit/d2dce597295aefee9cef8ab36c81e1174227fe32",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "AddNestedHostObjects"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves changing value-based loop iteration to reference-based iteration to reduce copy overhead of BaseObjectPtrs.",
            "The optimization strategy involves changing value-based loop iteration to reference-based iteration to reduce copy overhead of BaseObjectPtrs.",
            "The optimization strategy involves changing value-based loop iteration to reference-based iteration to reduce copy overhead of BaseObjectPtrs.",
            "The optimization strategy involves changing value-based loop iteration to reference-based iteration to reduce copy overhead for BaseObjectPtrs.",
            "The optimization strategy involves changing value-based loop iteration to reference-based iteration to avoid copying BaseObjectPtrs."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves changing value-based loop iteration to reference-based iteration to reduce copy overhead of BaseObjectPtrs.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "Seamly2D",
          "hash": "39a95d7e95a61913916fa1d50960985018a0f6fd",
          "author": "Roman Telezhynskyi",
          "date": "2017-08-04T21:25:59+03:00",
          "message": "Performance optimization.",
          "modified_files_count": 1,
          "modified_files": [
            "src/libs/vpatterndb/vcontainer.cpp"
          ],
          "github_commit_url": "https://github.com/FashionFreedom/Seamly2D/commit/39a95d7e95a61913916fa1d50960985018a0f6fd",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The commit replaces a loop that iterates over a container using indices with a range-based for loop to reduce overhead and improve readability.",
            "The optimization strategy involved replacing a loop that used value-based iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "tensorflow",
          "hash": "7480941f2d6d46dd1c7ce0ebf9f7e311736e928d",
          "author": "Mehdi Amini",
          "date": "2021-12-29T00:15:57-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in reshape_simplifier.cc (NFC)\n\nPiperOrigin-RevId: 418737195\nChange-Id: I80c6acdac10978cb59d7030c94c7cb650522250d",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Transforms/reshape_simplifier.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/7480941f2d6d46dd1c7ce0ebf9f7e311736e928d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `reshape_simplifier.cc` file.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "bg3se",
          "hash": "6a8f8a29ad094d6ac14775c888494013dc32a002",
          "author": "Norbyte",
          "date": "2024-08-14T23:25:32+02:00",
          "message": "Fix minor performance gotcha when pushing values",
          "modified_files_count": 1,
          "modified_files": [
            "BG3Extender/Lua/Shared/Proxies/LuaPropertyMapHelpers.h"
          ],
          "github_commit_url": "https://github.com/Norbyte/bg3se/commit/6a8f8a29ad094d6ac14775c888494013dc32a002",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "GenericGetOffsetProperty"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing unnecessary value copies when pushing values by using reference-based iteration instead of value-based iteration.",
            "The optimization strategy involved reducing unnecessary value copying by using reference-based iteration when pushing values.",
            "The optimization strategy involved reducing unnecessary value copies by using reference-based iteration when pushing values.",
            "The optimization strategy involved reducing unnecessary value copies by using reference-based iteration when pushing values in the `GenericGetOffsetProperty` function.",
            "The optimization strategy involved reducing unnecessary value copying by using reference-based iteration when pushing values in the `GenericGetOffsetProperty` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing unnecessary value copies by using reference-based iteration when pushing values.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "xbmc",
          "hash": "8196f918be28db1bb2d8ebac511357e54cefadba",
          "author": "Rechi",
          "date": "2022-03-01T23:31:00+00:00",
          "message": "[clang-tidy] performance-for-range-copy",
          "modified_files_count": 1,
          "modified_files": [
            "xbmc/settings/SubtitlesSettings.cpp"
          ],
          "github_commit_url": "https://github.com/xbmc/xbmc/commit/8196f918be28db1bb2d8ebac511357e54cefadba",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "CSubtitlesSettings::SettingOptionsSubtitleFontsFiller"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based range iteration with reference-based iteration to avoid unnecessary object copying.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "spades",
          "hash": "5567aefdacf30ab65952b2ec5b82bced5b2b7ed0",
          "author": "Anton",
          "date": "2012-05-03T19:23:39+04:00",
          "message": "mapper speed improve",
          "modified_files_count": 1,
          "modified_files": [
            "assembler/src/debruijn/utils.hpp"
          ],
          "github_commit_url": "https://github.com/ablab/spades/commit/5567aefdacf30ab65952b2ec5b82bced5b2b7ed0",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved improving the speed of the mapper by enhancing the efficiency of the DeBruijn graph utility functions.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing a value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            false,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "kate",
          "hash": "a7e8e22c3b6de7f6c9ab8751f838e440300aa2f7",
          "author": "Albert Astals Cid",
          "date": "2008-02-08T21:48:10+00:00",
          "message": "microoptimization\nconst & for foreach\n\nsvn path=/trunk/KDE/kdesdk/kate/; revision=772481",
          "modified_files_count": 1,
          "modified_files": [
            "kate/app/katemain.cpp"
          ],
          "github_commit_url": "https://github.com/KDE/kate/commit/a7e8e22c3b6de7f6c9ab8751f838e440300aa2f7",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "foreach"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy used was changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration using `const &` in a `foreach` loop to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration using `const &` in a `foreach` loop to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "synfig",
          "hash": "e194811d4fe7762a747232616cd5c18b182dd12d",
          "author": "Rodolfo Ribeiro Gomes",
          "date": "2020-06-08T19:51:11+07:00",
          "message": "minor efficiency improvement",
          "modified_files_count": 1,
          "modified_files": [
            "synfig-core/src/synfig/valuenodes/valuenode_bone.cpp"
          ],
          "github_commit_url": "https://github.com/synfig/synfig/commit/e194811d4fe7762a747232616cd5c18b182dd12d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ValueNode_Bone::get_bones_referenced_by"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing the loop iteration from using a value-based iterator to a reference-based iterator to reduce copy overhead.",
            "The optimization strategy involved changing the loop iteration from value-based to reference-based to reduce copy overhead.",
            "The optimization strategy involved changing the loop iteration from using a value-based approach to a reference-based approach to reduce copy overhead.",
            "The optimization strategy involved reducing the number of redundant calls to `get_bone()` by caching its result in a local variable within the `ValueNode_Bone::get_bones_referenced_by` function.",
            "The optimization strategy involved changing the loop iteration to use references instead of values to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing the loop iteration from value-based to reference-based to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "spades",
          "hash": "8f9fafaa74162bc48ea3c6c4b2e2ff5ff01f0141",
          "author": "Anton Korobeynikov",
          "date": "2019-01-21T17:23:29+03:00",
          "message": "Speedup",
          "modified_files_count": 1,
          "modified_files": [
            "assembler/src/common/assembly_graph/core/graph_core.hpp"
          ],
          "github_commit_url": "https://github.com/ablab/spades/commit/8f9fafaa74162bc48ea3c6c4b2e2ff5ff01f0141",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "NBlood",
          "hash": "b9e67132ccdaaec6ffcc915296f22e52f86841c9",
          "author": "Richard Gobeille",
          "date": "2022-04-12T17:45:45-07:00",
          "message": "engine: optimize 8cf7e9fbb0a49d9bdc3a3c8d80a9f63df7e4daa0\n\nAnd yes, I check the compiler output using godbolt.org :p",
          "modified_files_count": 1,
          "modified_files": [
            "source/build/src/engine.cpp"
          ],
          "github_commit_url": "https://github.com/NBlood/NBlood/commit/b9e67132ccdaaec6ffcc915296f22e52f86841c9",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "classicDrawSprite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing redundant calculations and improving cache efficiency by precomputing values and reordering memory accesses in the `classicDrawSprite` function.",
            "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration in the `classicDrawSprite` function.",
            "The optimization strategy involved reducing redundant calculations and improving memory access patterns in the `classicDrawSprite` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration in the `classicDrawSprite` function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "operon",
          "hash": "5fc734781021cf467482af25378195389a9f97df",
          "author": "Bogdan Burlacu",
          "date": "2019-08-05T17:58:59+02:00",
          "message": "Small performance improvement",
          "modified_files_count": 1,
          "modified_files": [
            "include/operon/core/eval.hpp"
          ],
          "github_commit_url": "https://github.com/heal-research/operon/commit/5fc734781021cf467482af25378195389a9f97df",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently used function.",
            "The optimization strategy involved reducing the number of temporary object creations by directly passing values instead of creating intermediate objects.",
            "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "cmssw",
          "hash": "4c69a0a36dc8816a4d58c6a34d687308ffcff2fe",
          "author": "Matti Kortelainen",
          "date": "2017-02-02T09:41:57+01:00",
          "message": "Small performance optimization",
          "modified_files_count": 1,
          "modified_files": [
            "SimGeneral/TrackingAnalysis/plugins/TrackingTruthAccumulator.cc"
          ],
          "github_commit_url": "https://github.com/cms-sw/cmssw/commit/4c69a0a36dc8816a4d58c6a34d687308ffcff2fe",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "TrackingParticleFactory::createTrackingParticle"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing the overhead of object creation by reusing existing objects instead of creating new ones.",
            "The optimization strategy involved reducing the overhead of copying objects by changing value-based loop iteration to reference-based iteration.",
            "The optimization strategy involved reducing the overhead of copying objects by changing value-based loop iteration to reference-based iteration.",
            "The optimization strategy involved reducing the overhead of copying objects by changing value-based loop iteration to reference-based iteration."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the overhead of copying objects by changing value-based loop iteration to reference-based iteration.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "tensorflow",
          "hash": "310d1654a43bd8091c006b66a8933d24082a372f",
          "author": "Mehdi Amini",
          "date": "2021-12-28T22:32:14-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in rank_specialization.cc (NFC)\n\nPiperOrigin-RevId: 418728399\nChange-Id: I5c32d13934161c4e9af44bac47cfc182b7e4c44d",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/rank_specialization.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/310d1654a43bd8091c006b66a8933d24082a372f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `matchAndRewrite` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "patchelf",
          "hash": "e17744d9660e2a56c47392c986dfb0403387393e",
          "author": "Rosen Penev",
          "date": "2021-02-14T17:47:17-08:00",
          "message": "clang-tidy: avoid copying loop variable\n\nFound with performance-for-range-copy\n\nSigned-off-by: Rosen Penev <rosenp@gmail.com>",
          "modified_files_count": 1,
          "modified_files": [
            "src/patchelf.cc"
          ],
          "github_commit_url": "https://github.com/NixOS/patchelf/commit/e17744d9660e2a56c47392c986dfb0403387393e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "patchElf"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy avoids copying the loop variable by using a reference-based iteration instead of value-based iteration in a loop.",
            "The optimization strategy avoids copying the loop variable by using a reference-based iteration in a range-based for loop.",
            "The optimization strategy involved avoiding copying the loop variable by using a reference-based iteration instead of value-based iteration to reduce overhead.",
            "The optimization strategy involved avoiding copying the loop variable by using a reference-based iteration instead of value-based iteration to reduce overhead.",
            "The optimization strategy involved avoiding copying the loop variable in a range-based for loop by using a reference instead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved avoiding copying the loop variable by using a reference-based iteration instead of value-based iteration to reduce overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "tensorflow",
          "hash": "d3881dcc330f728aea4900fa058fbc95b686a923",
          "author": "Mehdi Amini",
          "date": "2021-12-28T20:28:46-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in merge_assuming_ops.cc (NFC)\n\nPiperOrigin-RevId: 418717143\nChange-Id: I951af3d09387ccdacc90ff7bf72fe26fc4eeccb1",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/merge_assuming_ops.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/d3881dcc330f728aea4900fa058fbc95b686a923",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "MoveIntoAssumingOpMatchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true
        }
      ]
    },
    {
      "cluster_id": "83",
      "size": 17,
      "repositories_distribution": {
        "v8": 1,
        "sycl": 1,
        "BsodSurvivor": 2,
        "kmsan": 1,
        "veil": 1,
        "tensorflow": 1,
        "solidity": 1,
        "mangos-wotlk": 1,
        "pcem": 1,
        "mbedtls": 1,
        "fastclick": 1,
        "leechcraft": 1,
        "llvm-leg": 1,
        "Floorp": 1,
        "server": 1,
        "dolphin": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves **reordering or eliminating conditional checks to reduce unnecessary computations, ensuring that more expensive or redundant operations are only performed when absolutely necessary**.",
        "code_examples": [
          [
            "// Before\nif (IsAncestor(block) && !ChainActive.Contains(block)) {\n  CleanBlockIndexGarbage();\n}",
            "// After\nif (!ChainActive.Contains(block) && IsAncestor(block)) {\n  CleanBlockIndexGarbage();\n}"
          ],
          [
            "// Before\nif (IsReachableNonConst(a, b) && CanMerge(a, b)) {\n  Merge(a, b);\n}",
            "// After\nif (CanMerge(a, b) && IsReachableNonConst(a, b)) {\n  Merge(a, b);\n}"
          ],
          [
            "// Before\nif (CODEBLOCK_IN_DIRTY_LIST(block) && NeedsFlush(block)) {\n  FlushBlock(block);\n}",
            "// After\nif (NeedsFlush(block) && CODEBLOCK_IN_DIRTY_LIST(block)) {\n  FlushBlock(block);\n}"
          ]
        ],
        "application_conditions": [
          "The code contains a conditional check that is evaluated before a more expensive operation.",
          "The conditional check and the expensive operation are logically independent, and the order of evaluation does not affect correctness.",
          "The expensive operation is executed in cases where the conditional check could have already determined it is unnecessary."
        ]
      },
      "commits": [
        {
          "repository_name": "v8",
          "hash": "802f3e23eb731a3a707af639d618205308f09eb5",
          "author": "Mythri A",
          "date": "2019-06-14T16:20:42+00:00",
          "message": "[runtime] Move the check in %OptimizeFunctionOnNextCall to a later point\n\nBug: v8:8394, v8:9183, v8:8803\nChange-Id: Icd52eaaae28f605b14c0e63d3aca18541e3c8f6e\nReviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/1660616\nCommit-Queue: Mythri Alle <mythria@chromium.org>\nCommit-Queue: Ross McIlroy <rmcilroy@chromium.org>\nReviewed-by: Ross McIlroy <rmcilroy@chromium.org>\nCr-Commit-Position: refs/heads/master@{#62190}",
          "modified_files_count": 1,
          "modified_files": [
            "src/runtime/runtime-test.cc"
          ],
          "github_commit_url": "https://github.com/v8/v8/commit/802f3e23eb731a3a707af639d618205308f09eb5",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "RUNTIME_FUNCTION"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves moving the check in %OptimizeFunctionOnNextCall to a later point to reduce unnecessary checks during function execution.",
            "The optimization strategy involves moving the check in %OptimizeFunctionOnNextCall to a later point to potentially reduce unnecessary checks and improve performance.",
            "The optimization strategy involves moving the check in %OptimizeFunctionOnNextCall to a later point to reduce unnecessary checks and improve performance.",
            "The optimization strategy involves moving the check in %OptimizeFunctionOnNextCall to a later point to reduce unnecessary overhead.",
            "The optimization strategy involves moving the check in %OptimizeFunctionOnNextCall to a later point to reduce unnecessary overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves moving the check in %OptimizeFunctionOnNextCall to a later point to reduce unnecessary checks and improve performance.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "sycl",
          "hash": "c187146003c3b0fc7b4c2acdb989a2eae15a5ef6",
          "author": "Jordan Rose",
          "date": "2013-02-15T00:32:08+00:00",
          "message": "[analyzer] Tweak LazyCompoundVal reuse check to ignore qualifiers.\n\nThis is optimization only; no behavioral change.\n\nllvm-svn: 175231",
          "modified_files_count": 1,
          "modified_files": [
            "clang/lib/StaticAnalyzer/Core/RegionStore.cpp"
          ],
          "github_commit_url": "https://github.com/triSYCL/sycl/commit/c187146003c3b0fc7b4c2acdb989a2eae15a5ef6",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "RegionStoreManager::createLazyBinding"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves tweaking the LazyCompoundVal reuse check to ignore qualifiers, reducing unnecessary checks and improving performance.",
            "The optimization strategy involves tweaking the LazyCompoundVal reuse check to ignore qualifiers, reducing unnecessary checks and improving performance.",
            "The optimization strategy involves tweaking the LazyCompoundVal reuse check to ignore qualifiers, reducing unnecessary checks and improving performance.",
            "The optimization strategy involves tweaking the LazyCompoundVal reuse check to ignore qualifiers, reducing unnecessary checks and improving performance.",
            "The optimization strategy involves modifying the LazyCompoundVal reuse check to ignore qualifiers, reducing unnecessary checks and improving performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves tweaking the LazyCompoundVal reuse check to ignore qualifiers, reducing unnecessary checks and improving performance.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "BsodSurvivor",
          "hash": "cba18e3a0127b621085af39f9e7f13fed07f1c7e",
          "author": "Chris Lattner",
          "date": "2007-02-11T01:04:09+00:00",
          "message": "add an optimization for the case where the src has no name\n\nllvm-svn: 34174",
          "modified_files_count": 1,
          "modified_files": [
            "llvm/lib/VMCore/Value.cpp"
          ],
          "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/cba18e3a0127b621085af39f9e7f13fed07f1c7e",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves adding a conditional check to skip unnecessary operations when the source has no name, reducing overhead in such cases.",
            "The optimization adds a check to skip processing when the source has no name, reducing unnecessary computations.",
            "The optimization avoids unnecessary operations when the source has no name by adding a conditional check.",
            "The optimization strategy involves adding a conditional check to skip unnecessary operations when the source has no name, reducing overhead in such cases.",
            "The optimization strategy involves adding a conditional check to skip unnecessary processing when the source has no name."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves adding a conditional check to skip unnecessary operations when the source has no name, reducing overhead in such cases.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "kmsan",
          "hash": "0e706f7961a44f4be13cf9b5eedb70f0ab2724b8",
          "author": "Eric Dumazet",
          "date": "2022-12-08T14:27:48-08:00",
          "message": "net/mlx4: small optimization in mlx4_en_xmit()\n\nTest against MLX4_MAX_DESC_TXBBS only matters if the TX\nbounce buffer is going to be used.\n\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nCc: Wei Wang <weiwan@google.com>\nReviewed-by: Tariq Toukan <tariqt@nvidia.com>\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/net/ethernet/mellanox/mlx4/en_tx.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/0e706f7961a44f4be13cf9b5eedb70f0ab2724b8",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "mlx4_en_xmit"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves moving a conditional test inside an if-statement to avoid unnecessary checks when the TX bounce buffer is not used.",
            "The optimization strategy involves moving a conditional check to only execute when the TX bounce buffer is going to be used, reducing unnecessary evaluations.",
            "The optimization involves moving a conditional check to only test against MLX4_MAX_DESC_TXBBS when the TX bounce buffer is actually going to be used, reducing unnecessary evaluations.",
            "The optimization strategy involves moving a conditional check to only execute when the TX bounce buffer is used, reducing unnecessary comparisons.",
            "The optimization strategy involves moving a conditional test against MLX4_MAX_DESC_TXBBS inside the branch where the TX bounce buffer is actually used, reducing unnecessary checks."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves moving a conditional check to only execute when the TX bounce buffer is used, reducing unnecessary comparisons.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "veil",
          "hash": "3dcf2f79456143c31866951825f280fd1dec5f3d",
          "author": "codeofalltrades",
          "date": "2020-01-17T23:10:04-06:00",
          "message": "Merge #728: [Performance] don't check ancestry if block is in the current chain\n\n4262925e5 [Efficiency] don't check ancestry if block is in the current chain (Cave Spectre)\n\nPull request description:\n\n  (Note: this is also included in #727, but may be faster to merge than the full change)\n\n  ### Problem\n  The code to prune stale tips searches frequently (every time `ProcessNewBlockHeaders()` is called).\n   The bulk of the time spent in `CleanBlockIndexGarbage()` is in `IsAncestor()`.  This creates an an observed cost of about 1.3 seconds at the current block height for each time the search is done, while the `cs_main` lock is held.\n\n  ### Root Cause\n  The logic of the `if` statement will check `IsAncestor()` before checking if the block is contained in ChainActive.  However that check is not needed if the block is determined to be in ChainActive (due to the \"if not and not\" logic).   This causes IsAncestor to be run for every block in the map, where the vast majority of them don't need this check (~90% of them on startup, and over 99.8% of them after initial startup).\n\n  Greatly reducing the number of times IsAncestor is called, by reducing it to only be when the block is not in the active chain, significantly reduces the overall time spent in the `CleanBlockIndexGarbage()` call.\n\n  ### Solution\n  The order of the tests was changed.  The bulk of the time goes to the checking of the ancestors of a block.   If that block is in the current chain, the ancestor check is unnecessary.  So instead of checking the ancestors for every block in the database, then checking if it's in the current chain (and pruning it if neither occurs), the bulk of the blocks are in the chain, so we will rule that out first (much faster) and only check ancestry if the block is not in the current chain.\n\n  ### Testing\n  This not something that can be easily tested without adding timing into the code.  putting timers in the routine at hand, and keeping track of the amount of time the routine took, reveals the effect of that code change (about a 92% performance improvement on that section of code, and shaving off about 1.2 seconds of time in a critical section locked by `cs_main` for each block processed) (these tests were performed with an additional reduction in the number of stale tips; however even with the tips being cleaned every time they reach 1000; the reduction in time should still be similar; as 1000 blocks is still less than 0.2% of the total number of times IsAncestor() was being called prior to this PR.\n\n  # Before\n  ```\n  2020-01-02T01:45:34Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.632087 seconds\n  2020-01-02T01:46:47Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.253449 seconds\n  2020-01-02T01:46:50Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.251874 seconds\n  2020-01-02T01:47:33Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.292188 seconds\n  2020-01-02T01:47:45Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.321275 seconds\n  2020-01-02T01:47:51Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.293556 seconds\n  2020-01-02T01:47:54Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.286087 seconds\n  2020-01-02T01:48:01Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.360860 seconds\n  2020-01-02T01:48:48Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.303014 seconds\n  2020-01-02T01:49:12Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.243704 seconds\n  2020-01-02T01:49:18Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.251913 seconds\n  2020-01-02T01:49:33Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.242712 seconds\n  2020-01-02T01:49:41Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.284505 seconds\n  2020-01-02T01:49:50Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.301958 seconds\n  2020-01-02T01:50:10Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.318217 seconds\n  2020-01-02T01:51:00Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.304591 seconds\n  2020-01-02T01:51:17Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.272602 seconds\n  2020-01-02T01:51:34Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.257356 seconds\n  2020-01-02T01:51:59Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.284783 seconds\n  2020-01-02T01:52:02Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.265133 seconds\n  2020-01-02T01:53:00Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.300298 seconds\n  2020-01-02T01:53:28Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.248319 seconds\n  2020-01-02T01:54:19Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.294210 seconds\n  2020-01-02T01:55:28Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.302487 seconds\n  2020-01-02T01:56:22Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.255330 seconds\n  2020-01-02T01:57:22Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.268904 seconds\n  2020-01-02T01:58:11Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.293706 seconds\n  2020-01-02T01:58:39Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.354431 seconds\n  2020-01-02T01:58:56Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.291397 seconds\n  2020-01-02T01:59:03Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.353625 seconds\n  2020-01-02T02:00:59Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.309790 seconds\n  2020-01-02T02:01:12Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.246629 seconds\n  2020-01-02T02:01:15Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.350599 seconds\n  2020-01-02T02:01:28Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.303686 seconds\n  2020-01-02T02:01:40Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.303095 seconds\n  ```\n\n  # After\n  ```\n  2020-01-02T03:28:17Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099894 seconds\n  2020-01-02T03:28:18Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099980 seconds\n  2020-01-02T03:30:10Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099467 seconds\n  2020-01-02T03:31:27Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100021 seconds\n  2020-01-02T03:31:32Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099398 seconds\n  2020-01-02T03:31:38Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100509 seconds\n  2020-01-02T03:32:52Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.098997 seconds\n  2020-01-02T03:35:15Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.098915 seconds\n  2020-01-02T03:35:34Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099278 seconds\n  2020-01-02T03:36:09Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099287 seconds\n  2020-01-02T03:36:38Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099494 seconds\n  2020-01-02T03:37:43Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099135 seconds\n  2020-01-02T03:37:50Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.138882 seconds\n  2020-01-02T03:39:11Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100209 seconds\n  2020-01-02T03:39:22Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.125681 seconds\n  2020-01-02T03:39:23Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099585 seconds\n  2020-01-02T03:39:33Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100035 seconds\n  2020-01-02T03:39:48Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099417 seconds\n  2020-01-02T03:40:47Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100063 seconds\n  2020-01-02T03:40:47Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099346 seconds\n  2020-01-02T03:41:16Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.105898 seconds\n  2020-01-02T03:41:18Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099293 seconds\n  2020-01-02T03:42:19Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.101253 seconds\n  2020-01-02T03:42:20Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.138483 seconds\n  2020-01-02T03:42:24Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100591 seconds\n  2020-01-02T03:42:34Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100140 seconds\n  2020-01-02T03:43:10Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.138943 seconds\n  2020-01-02T03:43:45Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100185 seconds\n  2020-01-02T03:43:53Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.098239 seconds\n  2020-01-02T03:44:55Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100541 seconds\n  2020-01-02T03:46:53Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099540 seconds\n  2020-01-02T03:46:59Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100139 seconds\n  2020-01-02T03:47:04Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100110 seconds\n  2020-01-02T03:47:07Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099737 seconds\n  2020-01-02T03:47:20Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.098150 seconds\n  2020-01-02T03:47:24Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099493 seconds\n  2020-01-02T03:47:37Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100032 seconds\n  2020-01-02T03:48:08Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100015 seconds\n  2020-01-02T03:48:26Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099422 seconds\n  2020-01-02T03:48:40Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099060 seconds\n  2020-01-02T03:48:49Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.098883 seconds\n  2020-01-02T03:48:50Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099002 seconds\n  2020-01-02T03:48:55Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.098913 seconds\n  2020-01-02T03:49:13Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100458 seconds\n  ```\n\nTree-SHA512: 32c010b930db26601426eadfb56ffb9a6a4dd23f999eeb7e68a73c4510810d9c90f16b26dbac4b4456af7dc9062933a673f1a0ed45173c066c24f9abfb371d13",
          "modified_files_count": 1,
          "modified_files": [
            "src/validation.cpp"
          ],
          "github_commit_url": "https://github.com/Veil-Project/veil/commit/3dcf2f79456143c31866951825f280fd1dec5f3d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "CleanBlockIndexGarbage"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reordering conditional checks to first verify if a block is in the current chain before performing a more expensive ancestry check, thereby reducing unnecessary computations.",
            "The optimization strategy involved reordering conditional checks to avoid unnecessary ancestry checks for blocks already in the current chain, significantly reducing processing time.",
            "The optimization strategy involved reordering conditional checks to first verify if a block is in the current chain before performing a costly ancestry check, thereby reducing unnecessary computations.",
            "The optimization strategy involved reordering conditional checks to first verify if a block is in the current chain before performing a costly ancestry check, thereby reducing unnecessary computations.",
            "The optimization strategy involved reordering conditional checks to first verify if a block is in the current chain before performing a more expensive ancestry check, thereby reducing unnecessary computations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reordering conditional checks to first verify if a block is in the current chain before performing a costly ancestry check, thereby reducing unnecessary computations.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "tensorflow",
          "hash": "2f605c58a81522bb86a63aa2c48728ac2cbea6ca",
          "author": "Emilio Cota",
          "date": "2024-03-22T20:24:10-07:00",
          "message": "[xla:gpu] dot_merger: reorder merge checks to call IsReachableNonConst last\n\nOnly perform the reachability check if necessary, since it can be expensive.\n\nThis brings a 1.5x compilation time speedup for a large, dense model.\n\nPiperOrigin-RevId: 618355183",
          "modified_files_count": 1,
          "modified_files": [
            "third_party/xla/xla/service/dot_merger.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/2f605c58a81522bb86a63aa2c48728ac2cbea6ca",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "MergeDots"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reordering merge checks to perform an expensive reachability check only when necessary, reducing compilation time.",
            "The optimization strategy involves reordering merge checks to perform an expensive reachability check only when necessary, reducing compilation time.",
            "The optimization strategy involves reordering merge checks to perform an expensive reachability check only when necessary, reducing compilation time.",
            "The optimization strategy involves reordering merge checks to perform an expensive reachability check only when necessary, reducing compilation time.",
            "The optimization strategy involves reordering merge checks to perform an expensive reachability check only when necessary, reducing compilation time."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reordering merge checks to perform an expensive reachability check only when necessary, reducing compilation time.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "solidity",
          "hash": "7bdd1b1d4ae46920ae54aaa61c40b411a75f15b9",
          "author": "chriseth",
          "date": "2015-06-06T12:42:36+02:00",
          "message": "Optimize double ISZERO.",
          "modified_files_count": 1,
          "modified_files": [
            "ExpressionClasses.cpp"
          ],
          "github_commit_url": "https://github.com/ethereum/solidity/commit/7bdd1b1d4ae46920ae54aaa61c40b411a75f15b9",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Rules::Rules"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reducing redundant operations by eliminating double ISZERO checks in the code.",
            "The optimization strategy involves reducing redundant operations by eliminating double ISZERO checks in the code.",
            "The optimization strategy involves reducing redundant operations by eliminating double ISZERO checks in the code.",
            "The optimization strategy involves reducing redundant operations by eliminating double ISZERO checks in the code.",
            "The optimization strategy involved reducing redundant ISZERO operations by combining them into a single operation."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reducing redundant operations by eliminating double ISZERO checks in the code.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "mangos-wotlk",
          "hash": "24c6faca89886b9ae91f5772a2385782f5d52615",
          "author": "BThallid",
          "date": "2019-03-13T17:03:38+01:00",
          "message": "[PlayerBot] Improve Buff() function\n\n* Improve speed by checking that target is not already buffed",
          "modified_files_count": 1,
          "modified_files": [
            "src/game/PlayerBot/Base/PlayerbotAI.cpp"
          ],
          "github_commit_url": "https://github.com/cmangos/mangos-wotlk/commit/24c6faca89886b9ae91f5772a2385782f5d52615",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "PlayerbotAI::Buff"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves adding a check to avoid redundant buffing operations if the target is already buffed.",
            "The optimization strategy involves adding a check to ensure the target is not already buffed before applying the buff, thus avoiding redundant operations.",
            "The optimization strategy involves adding a pre-check to avoid redundant buff operations by verifying that the target is not already buffed.",
            "The optimization strategy involves adding a pre-check to avoid redundant buff operations by verifying if the target is already buffed.",
            "The optimization strategy involves adding a check to avoid redundant buff operations if the target is already buffed."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves adding a check to avoid redundant buff operations if the target is already buffed.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "pcem",
          "hash": "cd9e228b6d237e46d130f6d346db72c5ec816ca6",
          "author": "SarahW",
          "date": "2019-03-16T15:46:48+00:00",
          "message": "Move CODEBLOCK_IN_DIRTY_LIST check to after checking if block needs to be flushed. Improves performance in Eradicator.",
          "modified_files_count": 1,
          "modified_files": [
            "src/386_dynarec.c"
          ],
          "github_commit_url": "https://github.com/sarah-walker-pcem/pcem/commit/cd9e228b6d237e46d130f6d346db72c5ec816ca6",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "exec386_dynarec"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reordering conditional checks to avoid unnecessary evaluations, improving performance by checking if a block needs to be flushed before verifying its presence in a dirty list.",
            "The optimization strategy involves reordering a conditional check to reduce unnecessary evaluations, improving performance in specific scenarios.",
            "The optimization strategy involves reordering conditional checks to reduce unnecessary evaluations by moving the `CODEBLOCK_IN_DIRTY_LIST` check after verifying if the block needs to be flushed.",
            "The optimization strategy involves reordering a conditional check to avoid unnecessary evaluations, improving performance by ensuring the more expensive check is only executed when needed.",
            "The optimization strategy involves reordering a conditional check to reduce unnecessary evaluations in the execution path."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reordering a conditional check to avoid unnecessary evaluations, improving performance by ensuring the more expensive check is only executed when needed.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "mbedtls",
          "hash": "9b8d34edd48877972c2f446b183eca2212de63ab",
          "author": "Manuel Pégourié-Gonnard",
          "date": "2020-06-08T09:53:20+02:00",
          "message": "Avoid superflous randomization with restartable\n\nChecking the budget only after the randomization is done means sometimes we\nwere randomizing first, then noticing we ran out of budget, return, come back\nand randomize again before we finally normalize.\n\nWhile this is fine from a correctness and security perspective, it's a minor\ninefficiency, and can also be disconcerting while debugging, so we might as\nwell avoid it.\n\nSigned-off-by: Manuel Pégourié-Gonnard <manuel.pegourie-gonnard@arm.com>",
          "modified_files_count": 1,
          "modified_files": [
            "library/ecp.c"
          ],
          "github_commit_url": "https://github.com/Mbed-TLS/mbedtls/commit/9b8d34edd48877972c2f446b183eca2212de63ab",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "int"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves moving the budget check before the randomization step to avoid unnecessary randomization when the budget is already exhausted.",
            "The optimization strategy involves checking the budget before performing randomization to avoid unnecessary randomization steps.",
            "The optimization strategy involves checking the budget before performing randomization to avoid unnecessary repeated randomization operations.",
            "The optimization strategy involves checking the budget before performing randomization to avoid unnecessary randomization attempts.",
            "The optimization strategy involves checking the budget before performing randomization to avoid unnecessary randomization steps."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves checking the budget before performing randomization to avoid unnecessary randomization steps.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "BsodSurvivor",
          "hash": "b215d473ddadc3199bd63656bf15daff329082b6",
          "author": "Alexander Kornienko",
          "date": "2017-05-16T17:28:17+00:00",
          "message": "[clang-tidy] Speed up performance-unnecessary-value-param check\n\nMoved slower matchers closer to the end. The total speed up on a large file I\nwas interested in is not huge, just about 10%, since the check seems to be doing\na lot in the check() method.\n\nllvm-svn: 303191",
          "modified_files_count": 1,
          "modified_files": [
            "clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp"
          ],
          "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/b215d473ddadc3199bd63656bf15daff329082b6",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reordering slower matchers to be executed later, improving the overall performance of the check by approximately 10%.",
            "The optimization strategy involved reordering slower matchers to the end to improve the performance of the performance-unnecessary-value-param check.",
            "The optimization strategy involved reordering slower matchers to the end to improve the performance of the `performance-unnecessary-value-param` check.",
            "The optimization strategy involved reordering slower matchers to the end to improve performance by reducing their impact on the overall execution time.",
            "The optimization strategy involved reordering slower matchers to the end to improve the performance of the `performance-unnecessary-value-param` check."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reordering slower matchers to the end to improve the performance of the performance-unnecessary-value-param check.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "fastclick",
          "hash": "157b194f64acc56d05ca20ad1ef1c9a5cec7b987",
          "author": "benjie",
          "date": "2001-04-13T01:58:16+00:00",
          "message": "minor optimization: move check for SYN to before push",
          "modified_files_count": 1,
          "modified_files": [
            "elements/tcpudp/iprewriter.cc"
          ],
          "github_commit_url": "https://github.com/tbarbette/fastclick/commit/157b194f64acc56d05ca20ad1ef1c9a5cec7b987",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "IPRewriter::push"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reordering a condition check for SYN packets to occur before the push operation to reduce unnecessary processing.",
            "The optimization strategy involves moving the check for SYN packets to before the push operation to reduce unnecessary processing.",
            "The optimization strategy involves reordering a conditional check for SYN packets to occur before the push operation to reduce unnecessary processing.",
            "The optimization strategy involves reordering a condition check for SYN packets to occur before the push operation to reduce unnecessary processing.",
            "The optimization strategy involves reordering a conditional check for SYN packets to occur before the push operation to reduce unnecessary processing."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reordering a conditional check for SYN packets to occur before the push operation to reduce unnecessary processing.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "leechcraft",
          "hash": "eaf3c494ac4b31a96144160ed1796c2f2e835a0c",
          "author": "0xd34df00d",
          "date": "2009-12-07T21:04:31+03:00",
          "message": "Aggregator: optimization for feeds w/ categories.\n\nFirst check if we show unread items and only then check for categories\nmatch.",
          "modified_files_count": 1,
          "modified_files": [
            "src/plugins/aggregator/itemsfiltermodel.cpp"
          ],
          "github_commit_url": "https://github.com/0xd34df00d/leechcraft/commit/eaf3c494ac4b31a96144160ed1796c2f2e835a0c",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reordering conditional checks to first verify if unread items are shown before checking for category matches, reducing unnecessary computations.",
            "The optimization strategy involves reordering conditional checks to first verify if unread items are shown before checking for category matches, reducing unnecessary computations.",
            "The optimization strategy involves reordering conditional checks to first verify if unread items are shown before checking for category matches, reducing unnecessary computations.",
            "The optimization strategy involves reordering conditional checks to first verify if unread items are shown before checking for category matches, reducing unnecessary computations.",
            "The optimization strategy involves reordering conditional checks to first verify if unread items are shown before checking for category matches, reducing unnecessary computations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reordering conditional checks to first verify if unread items are shown before checking for category matches, reducing unnecessary computations.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "llvm-leg",
          "hash": "f1d9fe9d04ce93f6d5dcebbd2cb6a07414d7a029",
          "author": "Bill Wendling",
          "date": "2013-04-26T21:15:08+00:00",
          "message": "Micro-optimization\n\nTLVs probably won't be as common as the other types of variables. Check for them\nlast before defaulting to \"DATA\".\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@180631 91177308-0d34-0410-b5e6-96231b3b80d8",
          "modified_files_count": 1,
          "modified_files": [
            "lib/CodeGen/TargetLoweringObjectFileImpl.cpp"
          ],
          "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/f1d9fe9d04ce93f6d5dcebbd2cb6a07414d7a029",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "SelectSectionForGlobal"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reordering conditional checks to prioritize more common cases, reducing the average number of checks needed.",
            "The optimization strategy involves reordering conditional checks to prioritize more common cases, reducing the average number of comparisons needed.",
            "The optimization strategy involves reordering conditional checks to prioritize more common cases, reducing the frequency of less common checks.",
            "The optimization strategy involves reordering conditional checks to prioritize more common cases, reducing the average number of checks needed.",
            "The optimization strategy involves reordering conditional checks to prioritize more common cases, reducing the average number of comparisons needed."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reordering conditional checks to prioritize more common cases, reducing the average number of checks needed.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "Floorp",
          "hash": "629518e056b7c37431d82c14c361063a5ee685f4",
          "author": "Jon Coppeard",
          "date": "2024-02-12T09:59:07+00:00",
          "message": "Bug 1879566 - Part 1: Check for non-GC things first r=sfink\n\nWhen we scan a range of Values we check for several different kinds of GC\nthing. But it's relatively common to have large ranges of non-GC things (e.g.\nan array of numbers) and we don't handle this particularly well.\n\nWe can check whether the value is a GC thing first. This keeps the same number\nof comparisons but now it's private GC thing values that have to go through the\ngreatest number of comparisons before being handled.\n\nMicrobenchmarks show this improves marking performance of arrays of numbers by\nquite a bit.\n\nDifferential Revision: https://phabricator.services.mozilla.com/D201226",
          "modified_files_count": 1,
          "modified_files": [
            "js/src/gc/Marking.cpp"
          ],
          "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/629518e056b7c37431d82c14c361063a5ee685f4",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "GCMarker::processMarkStackTop"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reordering checks to prioritize non-GC things first, reducing the number of comparisons for common cases.",
            "The optimization strategy involves reordering checks to prioritize non-GC things first, reducing the number of comparisons for common cases.",
            "The optimization strategy involves reordering condition checks to prioritize non-GC things first, reducing the number of comparisons for common cases.",
            "The optimization strategy involves reordering condition checks to prioritize non-GC things first, reducing the number of comparisons for common cases.",
            "The optimization strategy involves reordering checks to prioritize non-GC things first, reducing the number of comparisons for common cases."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reordering checks to prioritize non-GC things first, reducing the number of comparisons for common cases.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "server",
          "hash": "144c873e3923fccdd368c08c496624342a9db1e0",
          "author": "monty@mysql.com",
          "date": "2005-10-13T17:41:55+03:00",
          "message": "Review of new pushed code\n- No need to check *ref when ref is checked (Simple optimization fix)",
          "modified_files_count": 1,
          "modified_files": [
            "sql/item.cc"
          ],
          "github_commit_url": "https://github.com/MariaDB/server/commit/144c873e3923fccdd368c08c496624342a9db1e0",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Item_field::fix_fields"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy removes redundant checks by eliminating the need to verify *ref when ref has already been validated.",
            "The optimization strategy removes redundant checks by eliminating the need to verify *ref when ref has already been validated.",
            "The optimization strategy removes a redundant check by leveraging an already verified condition, specifically avoiding the need to check *ref when ref is already checked.",
            "The optimization strategy involves removing redundant checks by leveraging the fact that a pointer (*ref) does not need to be checked if the reference (ref) itself has already been validated.",
            "The optimization strategy removes a redundant check by leveraging an already verified condition, specifically by not checking *ref when ref is already checked."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy removes a redundant check by leveraging an already verified condition, specifically by not checking *ref when ref is already checked.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "dolphin",
          "hash": "6a51c1564f14680c8e30dcfeeb986d8b1534d449",
          "author": "Sintendo",
          "date": "2021-01-26T21:25:00+01:00",
          "message": "Jit64: addx revisited\n\nThis doesn't really add any new optimizations, but fixes an issue that\nprevented the optimizations introduced in #8551 and #8755 from being\napplied in specific cases. A similar issue was solved for subfx as part\nof #9425.\n\nConsider the case where the destination register is also an input\nregister and happens to hold an immediate value. This results in a set\nof constraints that forces the RegCache to allocate a register and move\nthe immediate value into it for us. By the time we check for immediate\nvalues in the JIT, we're too late.\n\nWe solve this by refactoring the code in such a way that we can check\nfor immediates before involving the RegCache.\n\n- Example 1\nBefore:\n41 BF 00 68 00 CC    mov         r15d,0CC006800h\n44 03 FF             add         r15d,edi\n\nAfter:\n44 8D BF 00 68 00 CC lea         r15d,[rdi-33FF9800h]\n\n- Example 2\nBefore:\n41 BE 00 00 00 00    mov         r14d,0\n44 03 F7             add         r14d,edi\n\nAfter:\n44 8B F7             mov         r14d,edi\n\n- Example 3\nBefore:\n41 BD 03 00 00 00    mov         r13d,3\n44 03 6D 8C          add         r13d,dword ptr [rbp-74h]\n\nAfter:\n44 8B 6D 8C          mov         r13d,dword ptr [rbp-74h]\n41 83 C5 03          add         r13d,3",
          "modified_files_count": 1,
          "modified_files": [
            "Source/Core/Core/PowerPC/Jit64/Jit_Integer.cpp"
          ],
          "github_commit_url": "https://github.com/dolphin-emu/dolphin/commit/6a51c1564f14680c8e30dcfeeb986d8b1534d449",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Jit64::addx"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves refactoring code to check for immediate values before involving the RegCache, thereby avoiding unnecessary register allocations and moves.",
            "The optimization strategy involves refactoring code to check for immediate values before involving the RegCache, allowing for more efficient register usage and instruction selection.",
            "The optimization strategy involves refactoring code to check for immediate values before involving the RegCache, reducing unnecessary register allocations and moves.",
            "The optimization strategy involves refactoring code to check for immediate values before involving the RegCache, allowing for more efficient register allocation and instruction selection.",
            "The optimization strategy involves refactoring code to check for immediate values before involving the RegCache, allowing for more efficient register usage and instruction selection."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves refactoring code to check for immediate values before involving the RegCache, allowing for more efficient register usage and instruction selection.",
          "is_generic_optimization_final": true
        }
      ]
    },
    {
      "cluster_id": "1574",
      "size": 16,
      "repositories_distribution": {
        "glsl-optimizer": 1,
        "kwin": 1,
        "vbox": 1,
        "snes9x2010": 1,
        "project64": 1,
        "ffmpeg": 1,
        "torque": 1,
        "rtems": 1,
        "IvorySQL": 1,
        "weechat": 1,
        "doslib": 1,
        "zano": 1,
        "bibletime": 1,
        "netmap": 1,
        "kate": 1,
        "libplacebo": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves improving loop efficiency by reducing unnecessary operations, memory accesses, or iterations, often through techniques such as precomputing values, removing redundant loops, or optimizing memory access patterns.",
        "code_examples": [
          [
            "// Before\nfor (int i = 0; i < size; i++) {\n    output[i] = input[i] * factor;\n    output[i] += offset;\n}",
            "// After\nint temp;\nfor (int i = 0; i < size; i++) {\n    temp = input[i] * factor;\n    output[i] = temp + offset;\n}"
          ],
          [
            "// Before\nfor (int i = 0; i < count; i++) {\n    result += array[i] * array[i];\n}",
            "// After\nint squared;\nfor (int i = 0; i < count; i++) {\n    squared = array[i] * array[i];\n    result += squared;\n}"
          ],
          [
            "// Before\nfor (int i = 0; i < n; i++) {\n    buffer[i] = sprintf(\"%d\", values[i]);\n}",
            "// After\nchar temp[16];\nfor (int i = 0; i < n; i++) {\n    snprintf(temp, sizeof(temp), \"%d\", values[i]);\n    buffer[i] = temp;\n}"
          ]
        ],
        "application_conditions": [
          "The code contains a loop with at least one memory access operation that is repeated in every iteration.",
          "The loop includes a computation or operation that could be moved outside the loop without changing the program's behavior.",
          "The loop iterates over a range or collection where the number of iterations could be reduced by combining or eliminating redundant checks."
        ]
      },
      "commits": [
        {
          "repository_name": "glsl-optimizer",
          "hash": "e71a33bbf87649150bc748b85ca7213af7c737f4",
          "author": "Brian",
          "date": "2007-02-25T17:29:00-07:00",
          "message": "Optimize the loop for copying output results.",
          "modified_files_count": 1,
          "modified_files": [
            "src/mesa/tnl/t_vb_program.c"
          ],
          "github_commit_url": "https://github.com/aras-p/glsl-optimizer/commit/e71a33bbf87649150bc748b85ca7213af7c737f4",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "run_vp"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved improving the loop for copying output results by reducing unnecessary operations or overhead.",
            "The optimization strategy involved improving the loop for copying output results by reducing unnecessary operations or improving memory access patterns.",
            "The optimization strategy involved improving the loop for copying output results by reducing unnecessary operations or overhead.",
            "The optimization strategy involved improving the loop for copying output results by reducing unnecessary operations or improving memory access patterns.",
            "The optimization strategy involved improving the loop for copying output results by reducing unnecessary operations or improving memory access patterns."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving the loop for copying output results by reducing unnecessary operations or improving memory access patterns.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "kwin",
          "hash": "1f0a0c893a16b05a71c4468daca8339b9d08356c",
          "author": "ivan tkachenko",
          "date": "2022-09-16T18:02:55+03:00",
          "message": "effects/private: Nuke an unnecessary loop\n\nYes, Marco, there is a more efficient way.",
          "modified_files_count": 1,
          "modified_files": [
            "src/libkwineffects/kwinquickeffect.cpp"
          ],
          "github_commit_url": "https://github.com/KDE/kwin/commit/1f0a0c893a16b05a71c4468daca8339b9d08356c",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "QuickSceneEffectPrivate::isItemOnScreen"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved removing an unnecessary loop to improve efficiency.",
            "The optimization strategy involved removing an unnecessary loop to improve efficiency.",
            "The optimization strategy involved removing an unnecessary loop to improve efficiency.",
            "The optimization strategy involved removing an unnecessary loop to improve efficiency.",
            "The optimization strategy involved removing an unnecessary loop to improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved removing an unnecessary loop to improve efficiency.",
          "is_generic_optimization_final": true
        },
        {
          "hash": "b5f3ef0a56041abd6fcba8c10c100a99b75e4135",
          "author": "vboxsync",
          "date": "2013-08-12T10:42:55+00:00",
          "message": "loop $ optimization.\n\ngit-svn-id: https://www.virtualbox.org/svn/vbox/trunk@47669 cfe28804-0f27-0410-a406-dd0f0b0b656f",
          "modified_files_count": 1,
          "modified_files": [
            "src/VBox/VMM/VMMAll/IEMAllInstructions.cpp.h"
          ],
          "github_commit_url": "https://github.com/mirror/vbox/commit/b5f3ef0a56041abd6fcba8c10c100a99b75e4135",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "FNIEMOP_DEF"
          ],
          "is_opt_ds": "true",
          "is_opt_ds_simple": "true",
          "repository_name": "vbox",
          "optimization_summary": [
            "The optimization strategy involved optimizing loop operations to reduce overhead and improve performance.",
            "The optimization strategy involved improving loop performance by reducing unnecessary operations within the loop.",
            "The optimization strategy involved modifying loop iterations to reduce overhead and improve performance.",
            "The optimization strategy involved improving loop performance by reducing unnecessary operations within the loop.",
            "The optimization strategy involved improving loop performance by reducing unnecessary operations within the loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving loop performance by reducing unnecessary operations within the loop.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "snes9x2010",
          "hash": "5efcfb79137ddb885f093ac4547dafb9a8673c2e",
          "author": "Alcaro",
          "date": "2016-09-17T10:54:19+02:00",
          "message": "Doing this after S9xMainLoop is only going to increase latency. Fixing.",
          "modified_files_count": 1,
          "modified_files": [
            "libretro/libretro.c"
          ],
          "github_commit_url": "https://github.com/libretro/snes9x2010/commit/5efcfb79137ddb885f093ac4547dafb9a8673c2e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "retro_run"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved moving a task outside of the main loop to reduce latency.",
            "The optimization strategy involved moving a task outside of a latency-sensitive loop to reduce latency.",
            "The optimization strategy involved moving a task outside of the main loop to reduce latency.",
            "The optimization strategy involved moving a task before the `S9xMainLoop` function to reduce latency.",
            "The optimization strategy involved moving a task before the `S9xMainLoop` call to reduce latency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            false,
            false
          ],
          "optimization_summary_final": "The optimization strategy involved moving a task outside of the main loop to reduce latency.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "project64",
          "hash": "b066192abf4809ec08ffae9cacb5377725ec8979",
          "author": "LegendOfDragoon",
          "date": "2016-02-09T18:13:21-08:00",
          "message": "Optimize commonly executed loop in PI_DMA_WRITE",
          "modified_files_count": 1,
          "modified_files": [
            "Source/Project64-core/N64System/Mips/Dma.cpp"
          ],
          "github_commit_url": "https://github.com/project64/project64/commit/b066192abf4809ec08ffae9cacb5377725ec8979",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "CDMA::PI_DMA_WRITE"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the overhead of a commonly executed loop in the PI_DMA_WRITE function by minimizing unnecessary operations within the loop.",
            "The optimization strategy involved reducing the overhead in a commonly executed loop within the PI_DMA_WRITE function by minimizing unnecessary operations.",
            "The optimization strategy involved reducing the number of memory accesses in a commonly executed loop by precomputing values and minimizing redundant calculations.",
            "The optimization strategy involved reducing the number of memory accesses in a frequently executed loop by precomputing and reusing values.",
            "The optimization strategy involved reducing the number of memory accesses in a commonly executed loop by precomputing values outside the loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of memory accesses in a commonly executed loop by precomputing values outside the loop.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "ffmpeg",
          "hash": "0463df6f4241c8dfaed7e93ee301bd4c1a360c08",
          "author": "Yayoi",
          "date": "2014-12-18T21:54:23+01:00",
          "message": "avfilter/lut: reduce dereference in the inner loop\n\nFor rgb, with a 1080p source, 69 to 74fps on core i5(2 core, 1.8GHz),\nand 136 to 160 fps on an core i7(4770R, 3.2Ghz)\nChanged the yuv code for consistency, even though the performance\nincrease is not as obvious as rgb\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
          "modified_files_count": 1,
          "modified_files": [
            "libavfilter/vf_lut.c"
          ],
          "github_commit_url": "https://github.com/allyourcodebase/ffmpeg/commit/0463df6f4241c8dfaed7e93ee301bd4c1a360c08",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "filter_frame"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing dereference operations in the inner loop to improve performance.",
            "The optimization strategy reduces dereferencing in the inner loop to improve performance by minimizing memory access overhead.",
            "The optimization strategy involved reducing dereference operations in the inner loop to improve performance.",
            "The optimization strategy involved reducing dereferencing operations in the inner loop to improve performance.",
            "The optimization strategy involved reducing dereference operations in the inner loop to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing dereference operations in the inner loop to improve performance.",
          "is_generic_optimization_final": true
        },
        {
          "hash": "90616c229085437294306c4b8e7cb259eca562d2",
          "author": "bdaw",
          "date": "2013-07-22T13:43:42-06:00",
          "message": "trq-2085 Fixed an overrun on a calloc'd buffer and improved efficiency of sprintf loop.",
          "modified_files_count": 1,
          "modified_files": [
            "src/server/node_manager.c"
          ],
          "github_commit_url": "https://github.com/adaptivecomputing/torque/commit/90616c229085437294306c4b8e7cb259eca562d2",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "translate_howl_to_string"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "torque",
          "optimization_summary": [
            "The optimization strategy involved fixing a buffer overrun and improving the efficiency of a `sprintf` loop by reducing unnecessary operations.",
            "The optimization strategy involved improving the efficiency of a `sprintf` loop to reduce overhead and prevent buffer overrun.",
            "The optimization strategy involved improving the efficiency of a `sprintf` loop to reduce overhead and prevent buffer overrun.",
            "The optimization strategy involved improving the efficiency of a `sprintf` loop to reduce overhead and prevent buffer overrun.",
            "The optimization strategy involved improving the efficiency of a `sprintf` loop to prevent buffer overrun and enhance performance."
          ],
          "is_generic_optimization": [
            false,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving the efficiency of a `sprintf` loop to reduce overhead and prevent buffer overrun.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "rtems",
          "hash": "f9eca790ac000fdbc91891252c7f81d2ebc79d0e",
          "author": "Sebastian Huber",
          "date": "2014-09-12T16:06:29+02:00",
          "message": "sptests/spintrcritical_support: Optimize busy loop",
          "modified_files_count": 1,
          "modified_files": [
            "testsuites/sptests/spintrcritical_support/intrcritical.c"
          ],
          "github_commit_url": "https://github.com/RTEMS/rtems/commit/f9eca790ac000fdbc91891252c7f81d2ebc79d0e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "busy"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing a busy-wait loop with a more efficient delay mechanism to reduce CPU usage.",
            "The optimization strategy involved improving the efficiency of a busy loop by reducing unnecessary computations or iterations.",
            "The optimization strategy involved replacing a busy loop with a more efficient waiting mechanism to reduce CPU usage.",
            "The optimization strategy involved improving the efficiency of a busy loop by reducing unnecessary computations or iterations.",
            "The optimization strategy involved improving the efficiency of a busy loop by reducing unnecessary computations or iterations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving the efficiency of a busy loop by reducing unnecessary computations or iterations.",
          "is_generic_optimization_final": true
        },
        {
          "hash": "48cc59ed24f95fa171b12ba1b461e6dc72d62b2b",
          "author": "Noah Misch",
          "date": "2019-10-18T20:21:10-07:00",
          "message": "Use standard compare_exchange loop style in ProcArrayGroupClearXid().\n\nBesides style, this might improve performance in the contended case.\n\nReviewed by Amit Kapila.\n\nDiscussion: https://postgr.es/m/20191015035348.GA4166224@rfd.leadboat.com",
          "modified_files_count": 1,
          "modified_files": [
            "src/backend/storage/ipc/procarray.c"
          ],
          "github_commit_url": "https://github.com/IvorySQL/IvorySQL/commit/48cc59ed24f95fa171b12ba1b461e6dc72d62b2b",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ProcArrayGroupClearXid"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "IvorySQL",
          "optimization_summary": [
            "The optimization strategy involves using a standard compare-and-exchange loop style to potentially improve performance in contended cases.",
            "The optimization strategy involves using a standard compare-and-exchange loop style to improve performance in contended cases.",
            "The optimization strategy involves using a standard compare-and-exchange loop style to improve performance in contended cases.",
            "The optimization strategy involves using a standard compare-and-exchange loop style to potentially improve performance in contended cases.",
            "The optimization strategy involves using a standard compare-and-exchange loop style to potentially improve performance in contended cases."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves using a standard compare-and-exchange loop style to potentially improve performance in contended cases.",
          "is_generic_optimization_final": true
        },
        {
          "hash": "f435e8d3fa0cf50fa7db643c8d4e698292581467",
          "author": "Sebastien Helleu",
          "date": "2013-11-15T09:01:19+01:00",
          "message": "core: optimize loop when closing several buffers with command /buffer close n1-n2",
          "modified_files_count": 1,
          "modified_files": [
            "src/core/wee-command.c"
          ],
          "github_commit_url": "https://github.com/weechat/weechat/commit/f435e8d3fa0cf50fa7db643c8d4e698292581467",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "COMMAND_CALLBACK"
          ],
          "is_opt_ds": "true",
          "is_opt_ds_simple": "true",
          "repository_name": "weechat",
          "optimization_summary": [
            "The optimization strategy involved improving the loop efficiency when closing multiple buffers by reducing unnecessary iterations and checks.",
            "The optimization strategy involved improving the loop efficiency when closing multiple buffers by reducing unnecessary iterations and overhead.",
            "The optimization strategy involved improving the loop efficiency when closing multiple buffers by reducing unnecessary iterations and checks.",
            "The optimization strategy involved improving the loop efficiency when closing multiple buffers by reducing redundant operations and streamlining the iteration process.",
            "The optimization strategy involves improving the loop efficiency when closing multiple buffers by reducing unnecessary iterations and checks."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving the loop efficiency when closing multiple buffers by reducing unnecessary iterations and checks.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "doslib",
          "hash": "0c6d17b473340be60ab12e683e447db0b06a7958",
          "author": "Jonathan Campbell",
          "date": "2020-09-18T16:07:24-07:00",
          "message": "optimization, remove one instruction",
          "modified_files_count": 1,
          "modified_files": [
            "games/dgjamfall2020/codenamesunfish3d/game/game.c"
          ],
          "github_commit_url": "https://github.com/joncampbell123/doslib/commit/0c6d17b473340be60ab12e683e447db0b06a7958",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "game_loop"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved removing one redundant instruction to streamline the execution of the game loop.",
            "The optimization strategy involved removing one instruction to streamline the execution of the game loop.",
            "The optimization strategy involved removing one redundant instruction to streamline the execution of the game loop.",
            "The optimization strategy involved removing one instruction to streamline the execution of the game loop.",
            "The optimization strategy involved removing one instruction to streamline the execution of the game loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved removing one instruction to streamline the execution of the game loop.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "zano",
          "hash": "054be248cb88a77c0ae6456798d4271691b6bde7",
          "author": "sowle",
          "date": "2024-02-17T05:06:44+01:00",
          "message": "fix loop variable type here and there (performance)",
          "modified_files_count": 1,
          "modified_files": [
            "src/wallet/wallet2.cpp"
          ],
          "github_commit_url": "https://github.com/hyle-team/zano/commit/054be248cb88a77c0ae6456798d4271691b6bde7",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ENABLE_CHANNEL_BY_DEFAULT"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing the loop variable type to improve performance.",
            "The optimization strategy involved changing the loop variable type to improve performance.",
            "The optimization strategy involved changing the loop variable type to improve performance.",
            "The optimization strategy involved changing the loop variable type to improve performance.",
            "The optimization strategy involved changing the loop variable type to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing the loop variable type to improve performance.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "bibletime",
          "hash": "ad63611faa1ed41207ed88ce096056b3bc54c5d1",
          "author": "Jaak Ristioja",
          "date": "2021-04-11T01:18:04+03:00",
          "message": "frontend, CSearchAnalysisScene: Optimized away a loop in constructor",
          "modified_files_count": 1,
          "modified_files": [
            "src/frontend/searchdialog/analysis/csearchanalysisscene.cpp"
          ],
          "github_commit_url": "https://github.com/bibletime/bibletime/commit/ad63611faa1ed41207ed88ce096056b3bc54c5d1",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved removing an unnecessary loop in the constructor to improve performance.",
            "The optimization strategy involved removing an unnecessary loop in the constructor to reduce computational overhead.",
            "The optimization strategy involved removing an unnecessary loop in the constructor to reduce computational overhead.",
            "The optimization strategy involved removing an unnecessary loop in the constructor to reduce computational overhead.",
            "The optimization strategy involved removing an unnecessary loop in the constructor to reduce computational overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved removing an unnecessary loop in the constructor to reduce computational overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "netmap",
          "hash": "dc3eea8eda665d7b0ac411266090bfdcc11b4bcd",
          "author": "Giuseppe Lettieri",
          "date": "2018-03-06T13:48:54+01:00",
          "message": "pipe: sligthly faster swap loop",
          "modified_files_count": 1,
          "modified_files": [
            "sys/dev/netmap/netmap_pipe.c"
          ],
          "github_commit_url": "https://github.com/luigirizzo/netmap/commit/dc3eea8eda665d7b0ac411266090bfdcc11b4bcd",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "netmap_pipe_txsync"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved improving the efficiency of the swap loop by reducing unnecessary operations and streamlining the iteration process.",
            "The optimization strategy involved modifying the swap loop in the `netmap_pipe_txsync` function to reduce overhead and improve performance.",
            "The optimization strategy involved improving the efficiency of the swap loop by reducing unnecessary operations.",
            "The optimization strategy involved improving the efficiency of the swap loop in the `netmap_pipe_txsync` function by reducing unnecessary operations and streamlining the iteration process.",
            "The optimization strategy involved improving the efficiency of the swap loop by reducing unnecessary operations within the loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving the efficiency of the swap loop by reducing unnecessary operations within the loop.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "kate",
          "hash": "a46e42c0c6abd22d06afb7cc794e79fb5a4e7e2e",
          "author": "Christoph Cullmann",
          "date": "2021-01-30T13:25:14+01:00",
          "message": "optimize search loop a bit more, shaves of 10% for my benchmarks",
          "modified_files_count": 1,
          "modified_files": [
            "addons/search/SearchDiskFiles.cpp"
          ],
          "github_commit_url": "https://github.com/KDE/kate/commit/a46e42c0c6abd22d06afb7cc794e79fb5a4e7e2e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "SearchDiskFiles::searchSingleLineRegExp"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved refining the search loop logic to improve performance, resulting in a 10% reduction in benchmark time.",
            "The optimization strategy involved improving the search loop efficiency, likely by reducing unnecessary computations or iterations, resulting in a 10% performance gain in benchmarks.",
            "The optimization strategy involved improving the search loop efficiency, likely by reducing overhead or streamlining operations, resulting in a 10% performance gain in benchmarks.",
            "The optimization strategy involved improving the search loop efficiency, likely by reducing redundant operations or enhancing iteration logic, resulting in a 10% performance gain in benchmarks.",
            "The optimization strategy involved improving the search loop efficiency, likely by reducing unnecessary computations or iterations, resulting in a 10% performance gain in benchmarks."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving the search loop efficiency, likely by reducing unnecessary computations or iterations, resulting in a 10% performance gain in benchmarks.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "libplacebo",
          "hash": "e3331da8e5adb029b77d7bb64e8c3d111648c115",
          "author": "Niklas Haas",
          "date": "2021-09-12T15:07:01+02:00",
          "message": "shaders/film_grain_h274: further improve loop bounds\n\nEven clearing the rest of `tmp` is technically unnecessary, here.",
          "modified_files_count": 1,
          "modified_files": [
            "src/shaders/film_grain_h274.c"
          ],
          "github_commit_url": "https://github.com/haasn/libplacebo/commit/e3331da8e5adb029b77d7bb64e8c3d111648c115",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "generate_slice"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved improving loop bounds to reduce unnecessary operations within the loop.",
            "The optimization strategy involved improving loop bounds to reduce unnecessary operations within the loop.",
            "The optimization strategy involved improving loop bounds to avoid unnecessary operations, specifically by eliminating the clearing of the rest of the `tmp` array.",
            "The optimization strategy involved improving loop bounds to reduce unnecessary operations within the loop.",
            "The optimization strategy involved improving loop bounds to avoid unnecessary operations, specifically by eliminating the redundant clearing of the `tmp` array."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving loop bounds to reduce unnecessary operations within the loop.",
          "is_generic_optimization_final": true
        }
      ]
    },
    {
      "cluster_id": "315",
      "size": 15,
      "repositories_distribution": {
        "llvm-leg": 1,
        "kmsan": 2,
        "tk": 1,
        "ucx": 1,
        "fs2open.github.com": 1,
        "rygel": 1,
        "notcurses": 1,
        "sycl": 1,
        "mutter": 1,
        "eid-mw": 1,
        "tengine": 1,
        "xla": 1,
        "flare-engine": 1,
        "suricata": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits is **early loop termination**, where loops are exited as soon as a specific condition is met or unnecessary iterations are avoided, reducing computational overhead and improving performance.",
        "code_examples": [
          [
            "// Before\nfor (int i = 0; i < array.length; i++) {\n  if (array[i] == target) {\n    result = i;\n  }\n}",
            "// After\nfor (int i = 0; i < array.length; i++) {\n  if (array[i] == target) {\n    result = i;\n    break;\n  }\n}"
          ],
          [
            "// Before\nwhile (iterator.hasNext()) {\n  if (iterator.next().equals(value)) {\n    found = true;\n  }\n}",
            "// After\nwhile (iterator.hasNext()) {\n  if (iterator.next().equals(value)) {\n    found = true;\n    break;\n  }\n}"
          ],
          [
            "// Before\nfor (int i = 0; i < list.size(); i++) {\n  if (list.get(i) == null) {\n    continue;\n  }\n  process(list.get(i));\n}",
            "// After\nfor (int i = 0; i < list.size(); i++) {\n  if (list.get(i) == null) {\n    break;\n  }\n  process(list.get(i));\n}"
          ]
        ],
        "application_conditions": [
          "The loop contains a conditional statement that checks for a specific condition to break or return early.",
          "The loop iterates over a collection or range where the condition for early termination can be determined before completing all iterations.",
          "The loop does not modify any state or perform side effects after the condition for early termination is met."
        ]
      },
      "commits": [
        {
          "repository_name": "llvm-leg",
          "hash": "e7cec1e8539e8b5166932ede537fa6c6940823d0",
          "author": "Daniel Berlin",
          "date": "2015-03-20T18:05:49+00:00",
          "message": "Small optimization to avoid getting pass info when we will not run loop\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@232826 91177308-0d34-0410-b5e6-96231b3b80d8",
          "modified_files_count": 1,
          "modified_files": [
            "lib/Analysis/BasicAliasAnalysis.cpp"
          ],
          "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/e7cec1e8539e8b5166932ede537fa6c6940823d0",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "BasicAliasAnalysis::isValueEqualInPotentialCycles"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization avoids unnecessary retrieval of pass information when the loop will not be executed, reducing redundant operations.",
            "The optimization avoids retrieving pass information when it is determined that the loop will not run, reducing unnecessary computations.",
            "The optimization avoids retrieving pass information when the loop will not be executed, reducing unnecessary overhead.",
            "The optimization avoids retrieving pass information when the loop will not run, reducing unnecessary overhead.",
            "The optimization avoids retrieving pass information when the loop will not be executed, reducing unnecessary overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization avoids retrieving pass information when the loop will not run, reducing unnecessary overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "kmsan",
          "hash": "f3b9da31f0e36a3cd3edad51131d63c044cd1ec4",
          "author": "Haiyue Wang",
          "date": "2021-04-23T09:03:56-07:00",
          "message": "iavf: enhance the duplicated FDIR list scan handling\n\nWhen the FDIR entry is found, just return the result directly to break\nthe loop.\n\nSigned-off-by: Haiyue Wang <haiyue.wang@intel.com>\nSigned-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/net/ethernet/intel/iavf/iavf_fdir.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/f3b9da31f0e36a3cd3edad51131d63c044cd1ec4",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "iavf_fdir_is_dup_fltr"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves breaking out of a loop early when the desired FDIR entry is found, reducing unnecessary iterations.",
            "The optimization strategy involves breaking the loop early when the desired FDIR entry is found, reducing unnecessary iterations.",
            "The optimization strategy involves breaking out of a loop early when the desired entry is found, reducing unnecessary iterations.",
            "The optimization strategy involves breaking out of a loop early when the desired entry is found, reducing unnecessary iterations.",
            "The optimization strategy involves breaking the loop early when the desired FDIR entry is found to avoid unnecessary iterations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves breaking out of a loop early when the desired FDIR entry is found, reducing unnecessary iterations.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "tk",
          "hash": "d1f06f650ffed3d63ed1c6951d8ebefbbd221e89",
          "author": "fvogel",
          "date": "2019-04-19T14:07:19+00:00",
          "message": "Document what's happening with this bugfix and optimize (exit the while loop early).",
          "modified_files_count": 1,
          "modified_files": [
            "generic/tkTextIndex.c"
          ],
          "github_commit_url": "https://github.com/tcltk/tk/commit/d1f06f650ffed3d63ed1c6951d8ebefbbd221e89",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ForwBack"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves exiting a while loop early to reduce unnecessary iterations.",
            "The optimization strategy involves exiting a while loop early to reduce unnecessary iterations.",
            "The optimization strategy involves exiting a while loop early to reduce unnecessary iterations.",
            "The optimization strategy involves exiting a while loop early to reduce unnecessary iterations.",
            "The optimization strategy involves exiting a while loop early to reduce unnecessary iterations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves exiting a while loop early to reduce unnecessary iterations.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "ucx",
          "hash": "7e42f569bfdd1cf1543a377553bdc864727b873d",
          "author": "Sergey Oblomov",
          "date": "2018-01-15T15:27:47+02:00",
          "message": "UCP/AM/MRAIL: added limitations for AM_BW lanes (2)\n\n- minor optimization - break on found AM lane",
          "modified_files_count": 1,
          "modified_files": [
            "src/ucp/wireup/select.c"
          ],
          "github_commit_url": "https://github.com/openucx/ucx/commit/7e42f569bfdd1cf1543a377553bdc864727b873d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ucp_wireup_add_am_bw_lanes"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves breaking out of a loop early once the desired AM lane is found to avoid unnecessary iterations.",
            "The optimization strategy involves breaking out of a loop early once the desired AM lane is found to avoid unnecessary iterations.",
            "The optimization strategy involves breaking out of a loop early once the desired AM lane is found to avoid unnecessary iterations.",
            "The optimization strategy involves breaking out of a loop early once the desired AM lane is found to avoid unnecessary iterations.",
            "The optimization strategy involves breaking out of a loop early once the desired AM lane is found to avoid unnecessary iterations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves breaking out of a loop early once the desired AM lane is found to avoid unnecessary iterations.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "fs2open.github.com",
          "hash": "d11003a869c87fae57c867acf9a90da880f3c8d3",
          "author": "John Fernandez",
          "date": "2024-06-20T01:11:19-04:00",
          "message": "Simply logic here\n\nBreak when you've found a match, instead of just mindlessly comparing the rest.\n\nThis is technically just an optimization and safety change, but potentially, before, if the loops had been switched, it would have caused unexpected behavior if two copies of the same flag were listed.",
          "modified_files_count": 1,
          "modified_files": [
            "code/mission/missionparse.cpp"
          ],
          "github_commit_url": "https://github.com/scp-fs2open/fs2open.github.com/commit/d11003a869c87fae57c867acf9a90da880f3c8d3",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "parse_event"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves breaking out of a loop early upon finding a match to avoid unnecessary comparisons.",
            "The optimization strategy involves breaking out of a loop early upon finding a match to avoid unnecessary comparisons.",
            "The optimization strategy involves breaking out of a loop early once a match is found to avoid unnecessary comparisons.",
            "The optimization strategy involves breaking out of a loop early once a match is found to avoid unnecessary comparisons.",
            "The optimization strategy involves breaking out of a loop early upon finding a match to avoid unnecessary comparisons."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves breaking out of a loop early upon finding a match to avoid unnecessary comparisons.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "rygel",
          "hash": "e8928a221573ee6ff8e23000674615c9e3fb2b83",
          "author": "Niels Martignène",
          "date": "2021-12-06T12:22:09+01:00",
          "message": "Optimize away empty for loops",
          "modified_files_count": 1,
          "modified_files": [
            "src/blikk/libblikk/compiler.cc"
          ],
          "github_commit_url": "https://github.com/Koromix/rygel/commit/e8928a221573ee6ff8e23000674615c9e3fb2b83",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "bk_Parser::ParseFor"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy removes empty for loops to eliminate unnecessary iterations and reduce overhead.",
            "The optimization strategy removes empty for loops to eliminate unnecessary iterations and reduce overhead.",
            "The optimization strategy removes empty for loops to eliminate unnecessary iterations and reduce overhead.",
            "The optimization strategy removes empty for loops to eliminate unnecessary iterations and reduce overhead.",
            "The optimization strategy removes empty for loops to eliminate unnecessary iterations and reduce overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy removes empty for loops to eliminate unnecessary iterations and reduce overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "kmsan",
          "hash": "8e6971a819dfd289e40642405a9200076f5dd17f",
          "author": "Pavel Begunkov",
          "date": "2022-04-24T18:02:46-06:00",
          "message": "io_uring: optimise submission loop invariant\n\nInstead of keeping @submitted in io_submit_sqes(), which for each\niteration requires comparison with the initial number of SQEs, store the\nnumber of SQEs left to submit. We'll need nr only for when we're done\nwith SQE handling.\n\nnote: if we can't allocate a req for the first SQE we always has been\nreturning -EAGAIN to the userspace, save this behaviour by looking into\nthe cache in a slow path.\n\nSigned-off-by: Pavel Begunkov <asml.silence@gmail.com>\nLink: https://lore.kernel.org/r/c3b3df9aeae4c2f7a53fd8386385742e4e261e77.1649771823.git.asml.silence@gmail.com\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
          "modified_files_count": 1,
          "modified_files": [
            "fs/io_uring.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/8e6971a819dfd289e40642405a9200076f5dd17f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "io_submit_sqes"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reducing loop overhead by storing the number of SQEs left to submit instead of comparing with the initial number of SQEs in each iteration.",
            "The optimization strategy involves reducing loop overhead by storing the number of SQEs left to submit instead of comparing with the initial number of SQEs in each iteration.",
            "The optimization strategy involves reducing loop overhead by storing the number of SQEs left to submit instead of comparing with the initial number of SQEs in each iteration.",
            "The optimization strategy involves storing the number of SQEs left to submit instead of comparing with the initial number in each iteration to reduce loop invariant overhead.",
            "The optimization strategy involves reducing loop overhead by storing the number of SQEs left to submit instead of comparing with the initial number of SQEs in each iteration."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reducing loop overhead by storing the number of SQEs left to submit instead of comparing with the initial number of SQEs in each iteration.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "notcurses",
          "hash": "317cbb3fdb8c9d3847c3f70ce7cb93ca889fa5cd",
          "author": "nick black",
          "date": "2021-04-18T02:57:08-04:00",
          "message": "sixel_draw: break out of loop faster #1527",
          "modified_files_count": 1,
          "modified_files": [
            "src/lib/sixel.c"
          ],
          "github_commit_url": "https://github.com/dankamongmen/notcurses/commit/317cbb3fdb8c9d3847c3f70ce7cb93ca889fa5cd",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "sixel_draw"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves breaking out of a loop earlier to reduce unnecessary iterations.",
            "The optimization strategy involves breaking out of a loop earlier to reduce unnecessary iterations.",
            "The optimization strategy involves breaking out of a loop earlier to reduce unnecessary iterations and improve performance.",
            "The optimization strategy involves breaking out of a loop earlier to reduce unnecessary iterations and improve performance.",
            "The optimization strategy involves breaking out of a loop earlier to reduce unnecessary iterations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves breaking out of a loop earlier to reduce unnecessary iterations.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "sycl",
          "hash": "7a4e56acac4fa398880411282f6280d61533204b",
          "author": "Craig Topper",
          "date": "2022-10-18T21:35:15-07:00",
          "message": "[RISCV] Add an early out to lowerVECTOR_SHUFFLEAsVSlidedown. NFC\n\nIf Mask[0] is 0, then we're never going to match a slidedown. If\nwe get through the for loop, then it's an identity mask which should\nhave already been optimized out. Otherwise it's some non-contiguous\nmask that will fail out of the lop. Might as well not bother entering\nthe loop.",
          "modified_files_count": 1,
          "modified_files": [
            "llvm/lib/Target/RISCV/RISCVISelLowering.cpp"
          ],
          "github_commit_url": "https://github.com/triSYCL/sycl/commit/7a4e56acac4fa398880411282f6280d61533204b",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "lowerVECTOR_SHUFFLEAsVSlidedown"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves adding an early exit condition to avoid entering a loop when the first element of the mask is zero, as it guarantees no match for a slidedown operation.",
            "The optimization strategy adds an early exit condition to avoid entering a loop when the first element of the mask is zero, preventing unnecessary iterations.",
            "The optimization strategy adds an early exit condition to avoid entering a loop when the first element of the mask is zero, preventing unnecessary iterations.",
            "The optimization strategy adds an early exit condition to avoid entering a loop when the first element of the mask is zero, preventing unnecessary iterations.",
            "The optimization strategy adds an early exit condition to avoid entering a loop when the first element of the mask is zero, preventing unnecessary iterations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy adds an early exit condition to avoid entering a loop when the first element of the mask is zero, preventing unnecessary iterations.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "mutter",
          "hash": "5770b5b3c3cfbd6b38bd0a497eda9e2196602ccc",
          "author": "Jasper St. Pierre",
          "date": "2012-03-19T02:00:03-04:00",
          "message": "util: Quit early once we've found and removed a later\n\nThis prevents an invalid read and also improves performance slightly.\n\nhttps://bugzilla.gnome.org/show_bug.cgi?id=672374",
          "modified_files_count": 1,
          "modified_files": [
            "src/core/util.c"
          ],
          "github_commit_url": "https://github.com/GNOME/mutter/commit/5770b5b3c3cfbd6b38bd0a497eda9e2196602ccc",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "meta_later_add"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves quitting early once a specific condition is met to prevent unnecessary processing and invalid reads.",
            "The optimization strategy involves quitting early once a specific condition is met to prevent unnecessary iterations and invalid reads.",
            "The optimization strategy involves quitting early once a specific condition is met to prevent unnecessary iterations and invalid reads.",
            "The optimization strategy involves quitting early once a specific condition is met to prevent unnecessary iterations and invalid reads.",
            "The optimization strategy involves quitting early once a specific condition is met to prevent invalid reads and slightly improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves quitting early once a specific condition is met to prevent unnecessary iterations and invalid reads.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "eid-mw",
          "hash": "bf9b2931fe4b482063d28f37ca887ccf094fd858",
          "author": "Wouter Verhelst",
          "date": "2019-01-08T16:03:33+01:00",
          "message": "Optimize\n\nOnce we found the correct mechanism, it makes no more sense to keep\nsearching for it, so stop the search at that point.",
          "modified_files_count": 1,
          "modified_files": [
            "cardcomm/pkcs11/src/cal.cpp"
          ],
          "github_commit_url": "https://github.com/Fedict/eid-mw/commit/bf9b2931fe4b482063d28f37ca887ccf094fd858",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "cal_get_mechanism_info"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves stopping the search for the correct mechanism once it is found to avoid unnecessary iterations.",
            "The optimization strategy involves stopping the search for the correct mechanism once it is found to avoid unnecessary iterations.",
            "The optimization strategy involves stopping the search for the correct mechanism once it is found to avoid unnecessary iterations.",
            "The optimization strategy involves stopping the search for the correct mechanism once it is found to avoid unnecessary iterations.",
            "The optimization strategy involves stopping the search for the correct mechanism once it is found to avoid unnecessary iterations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves stopping the search for the correct mechanism once it is found to avoid unnecessary iterations.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "tengine",
          "hash": "f3e7954b0b2ebcb59a079d954a4c8b0a858f31fb",
          "author": "Xiaochen Wang",
          "date": "2013-07-26T14:34:08+08:00",
          "message": "round robin: optimize loop in ngx_http_upstream_init_round_robin()\n\n It is a trivial patch to move continue statement from inner loop to outer\n loop.",
          "modified_files_count": 1,
          "modified_files": [
            "src/http/ngx_http_upstream_round_robin.c"
          ],
          "github_commit_url": "https://github.com/alibaba/tengine/commit/f3e7954b0b2ebcb59a079d954a4c8b0a858f31fb",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ngx_http_upstream_init_round_robin"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved moving a `continue` statement from an inner loop to an outer loop to reduce unnecessary iterations.",
            "The optimization strategy involved moving a `continue` statement from an inner loop to an outer loop to reduce unnecessary iterations.",
            "The optimization strategy involved moving a `continue` statement from an inner loop to an outer loop to reduce unnecessary iterations.",
            "The optimization strategy involved moving a `continue` statement from an inner loop to an outer loop to reduce unnecessary iterations.",
            "The optimization strategy involved moving a continue statement from an inner loop to an outer loop to reduce unnecessary iterations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved moving a `continue` statement from an inner loop to an outer loop to reduce unnecessary iterations.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "xla",
          "hash": "0234a3a07bf68aa85c679c9b07560a53c5d58af3",
          "author": "Adrian Kuegel",
          "date": "2020-09-01T02:23:19-07:00",
          "message": "Small optimization for the calculation of element reuse.\n\nWe can break a loop early if we have already found an element reuse.\n\nPiperOrigin-RevId: 329466838\nChange-Id: I5f3f4940a694755c2194a11d479be23e11741efb",
          "modified_files_count": 1,
          "modified_files": [
            "xla/service/hlo_instruction.cc"
          ],
          "github_commit_url": "https://github.com/openxla/xla/commit/0234a3a07bf68aa85c679c9b07560a53c5d58af3",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ComputeInternal"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves breaking a loop early once an element reuse is found to reduce unnecessary iterations.",
            "The optimization strategy involves breaking a loop early once an element reuse is found to reduce unnecessary iterations.",
            "The optimization strategy involves breaking a loop early once an element reuse is found to reduce unnecessary iterations.",
            "The optimization strategy involves breaking a loop early once an element reuse is found to reduce unnecessary iterations.",
            "The optimization strategy involves breaking a loop early once an element reuse is found to reduce unnecessary iterations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves breaking a loop early once an element reuse is found to reduce unnecessary iterations.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "flare-engine",
          "hash": "eec6e0827d3ddac7ab16dadad062005ea8235098",
          "author": "Justin Jacobs",
          "date": "2013-06-15T01:41:45-04:00",
          "message": "Fix performance bug when sliding along bottom/right walls\n\nIf the direction we're sliding in has a step of 0, we can return at that\npoint to prevent excessive looping.",
          "modified_files_count": 1,
          "modified_files": [
            "src/MapCollision.cpp"
          ],
          "github_commit_url": "https://github.com/flareteam/flare-engine/commit/eec6e0827d3ddac7ab16dadad062005ea8235098",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "cardinal"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves early termination in a loop when the sliding direction has a step of 0 to prevent unnecessary iterations.",
            "The optimization strategy involves early termination in a loop when the sliding direction has a step of 0 to prevent unnecessary iterations.",
            "The optimization strategy involves early termination of a loop when the sliding direction has a step of 0 to prevent unnecessary iterations.",
            "The optimization strategy involves early return when the sliding direction has a step of 0 to prevent unnecessary looping.",
            "The optimization strategy involves early termination in a loop when the sliding direction has a step of 0 to prevent unnecessary iterations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves early termination of a loop when the sliding direction has a step of 0 to prevent unnecessary iterations.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "suricata",
          "hash": "3803cbd0e5fd013b9c9c012f557e075e4ebc417f",
          "author": "Victor Julien",
          "date": "2023-05-31T07:57:40+02:00",
          "message": "flow/recycler: stats micro optimization\n\nDon't update stat from loop as it's not read until after the loop.",
          "modified_files_count": 1,
          "modified_files": [
            "src/flow-manager.c"
          ],
          "github_commit_url": "https://github.com/OISF/suricata/commit/3803cbd0e5fd013b9c9c012f557e075e4ebc417f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "FlowRecycler"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves moving a statistics update outside of a loop to reduce unnecessary updates during iteration.",
            "The optimization strategy involves moving a statistics update outside of a loop to reduce unnecessary updates during each iteration.",
            "The optimization strategy involves moving a stat update outside of a loop to reduce unnecessary updates since the stat is not read until after the loop.",
            "The optimization strategy involves moving a statistics update outside of a loop to reduce unnecessary updates since the stat is not read until after the loop.",
            "The optimization strategy involves moving a statistics update outside of a loop to reduce unnecessary updates since the stat is not read until after the loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves moving a statistics update outside of a loop to reduce unnecessary updates since the stat is not read until after the loop.",
          "is_generic_optimization_final": true
        }
      ]
    },
    {
      "cluster_id": "678",
      "size": 15,
      "repositories_distribution": {
        "mantid": 1,
        "instead": 1,
        "sysstat": 1,
        "SkyFire_548": 1,
        "sparselizard": 1,
        "qi": 1,
        "3DWorld": 1,
        "primecount": 1,
        "fteqw": 1,
        "mlterm": 1,
        "openrave": 1,
        "maszyna": 1,
        "qgrep": 1,
        "overte": 1,
        "cactus": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves **reducing redundant calculations by caching frequently accessed values or function results** to improve performance.",
        "code_examples": [
          [
            "// Before\nfunction calculateValue() {\n  let result = 0;\n  for (let i = 0; i < 1000; i++) {\n    result += Math.sqrt(i) * Math.pow(i, 2);\n  }\n  return result;\n}",
            "// After\nfunction calculateValue() {\n  let result = 0;\n  for (let i = 0; i < 1000; i++) {\n    const sqrtVal = Math.sqrt(i);\n    const powVal = Math.pow(i, 2);\n    result += sqrtVal * powVal;\n  }\n  return result;\n}"
          ],
          [
            "// Before\nfunction processData(data) {\n  let output = [];\n  for (let i = 0; i < data.length; i++) {\n    output.push(expensiveFunction(data[i]));\n  }\n  return output;\n}",
            "// After\nfunction processData(data) {\n  let output = [];\n  const cachedExpensiveFunction = expensiveFunction;\n  for (let i = 0; i < data.length; i++) {\n    output.push(cachedExpensiveFunction(data[i]));\n  }\n  return output;\n}"
          ]
        ],
        "application_conditions": [
          "The code contains a function call or value access that is executed multiple times within the same scope (e.g., a loop or repeated function invocation).",
          "The function call or value access produces the same result across multiple executions without side effects.",
          "The scope of the function call or value access allows for the result to be stored in a variable without altering the program's behavior."
        ]
      },
      "commits": [
        {
          "repository_name": "mantid",
          "hash": "620b3fa197e899e8ccc8c8dfd3993ad0518a7841",
          "author": "Chen Zhang",
          "date": "2021-11-22T11:03:22-05:00",
          "message": "optimize for speed",
          "modified_files_count": 1,
          "modified_files": [
            "Framework/Geometry/src/Objects/CSGObject.cpp"
          ],
          "github_commit_url": "https://github.com/mantidproject/mantid/commit/620b3fa197e899e8ccc8c8dfd3993ad0518a7841",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "CSGObject::interceptSurface"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values within the `CSGObject::interceptSurface` function.",
            "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values and minimizing repeated function calls within the `CSGObject::interceptSurface` function.",
            "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values and minimizing repeated function calls within the `CSGObject::interceptSurface` method.",
            "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values and minimizing repeated computations within the `CSGObject::interceptSurface` function.",
            "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values and minimizing repeated function calls within the `CSGObject::interceptSurface` method."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values and minimizing repeated function calls within the `CSGObject::interceptSurface` method.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "instead",
          "hash": "f0c597ce0a6c063dd6079b22630b1c110969da53",
          "author": "Peter Kosyh",
          "date": "2018-01-14T22:07:57+03:00",
          "message": "small speedup",
          "modified_files_count": 1,
          "modified_files": [
            "src/themes.c"
          ],
          "github_commit_url": "https://github.com/instead-hub/instead/commit/f0c597ce0a6c063dd6079b22630b1c110969da53",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "theme_bg_scale"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing a loop with a more efficient mathematical calculation to reduce computational overhead.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently used function call.",
            "The optimization strategy involved replacing a loop that iterated over a fixed range with a direct calculation to reduce unnecessary iterations.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently used expression within the `theme_bg_scale` function.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently called function within a loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by caching the result of a frequently called function within a loop.",
          "is_generic_optimization_final": true
        },
        {
          "hash": "7bf60b2d73c72c8b2180140286777ffb58698ee3",
          "author": "Sebastien GODARD",
          "date": "2022-02-20T09:02:10+01:00",
          "message": "A_NET_SOFT: Slight optimization in get_global_soft_statistics() function\n\nSigned-off-by: Sebastien GODARD <sysstat@users.noreply.github.com>",
          "modified_files_count": 1,
          "modified_files": [
            "sa_common.c"
          ],
          "github_commit_url": "https://github.com/sysstat/sysstat/commit/7bf60b2d73c72c8b2180140286777ffb58698ee3",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "get_global_soft_statistics"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "sysstat",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values in the `get_global_soft_statistics()` function.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed value in the `get_global_soft_statistics()` function.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values in the get_global_soft_statistics() function.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values in the `get_global_soft_statistics` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop in the get_global_soft_statistics() function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed value in the `get_global_soft_statistics()` function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "SkyFire_548",
          "hash": "f8b952a2b27fcafab70bb0250cc9dbe88d6b3f20",
          "author": "win32",
          "date": "2009-12-17T13:30:40+02:00",
          "message": "speed-up code,Thanks QAtson.\n\n--HG--\nbranch : trunk",
          "modified_files_count": 1,
          "modified_files": [
            "src/game/SpellEffects.cpp"
          ],
          "github_commit_url": "https://github.com/ProjectSkyfire/SkyFire_548/commit/f8b952a2b27fcafab70bb0250cc9dbe88d6b3f20",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Spell::SpellDamageHeal"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the Spell::SpellDamageHeal function.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the Spell::SpellDamageHeal function.",
            "The optimization strategy involved reducing redundant calculations and improving loop efficiency in the Spell::SpellDamageHeal function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and storing frequently used values in local variables within the Spell::SpellDamageHeal function.",
            "The optimization strategy involved reducing redundant calculations and improving loop efficiency in the Spell::SpellDamageHeal function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the Spell::SpellDamageHeal function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "sparselizard",
          "hash": "280d40b3e06d8bb8ec4af35823802f1823511ad5",
          "author": "Alexandre Halbach",
          "date": "2021-03-08T08:57:42+02:00",
          "message": "minor speedup defineinneroverlapinterfaces",
          "modified_files_count": 1,
          "modified_files": [
            "src/mesh/dtracker.cpp"
          ],
          "github_commit_url": "https://github.com/halbux/sparselizard/commit/280d40b3e06d8bb8ec4af35823802f1823511ad5",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "dtracker::defineinneroverlapinterfaces"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant computations by caching frequently accessed data within the `defineinneroverlapinterfaces` function.",
            "The optimization strategy involved reducing redundant computations by caching frequently accessed data within the `defineinneroverlapinterfaces` function.",
            "The optimization strategy involved reducing redundant computations by caching frequently accessed data within the `defineinneroverlapinterfaces` function.",
            "The optimization strategy involved reducing redundant computations by caching frequently accessed data within the `defineinneroverlapinterfaces` function.",
            "The optimization strategy involved reducing redundant computations by caching frequently accessed data within the `defineinneroverlapinterfaces` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant computations by caching frequently accessed data within the `defineinneroverlapinterfaces` function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "qi",
          "hash": "1aed9a12d58972a6f5520ea78c1c97a3bcb5656b",
          "author": "Andrew Yang",
          "date": "2021-09-11T14:25:30-07:00",
          "message": "optimization in super_",
          "modified_files_count": 1,
          "modified_files": [
            "compiler.c"
          ],
          "github_commit_url": "https://github.com/AnonymousAAArdvark/qi/commit/1aed9a12d58972a6f5520ea78c1c97a3bcb5656b",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "super_"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values within the `super_` function.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the `super_` function.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the super_ function.",
            "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values in the `super_` function.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed value in the `super_` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the `super_` function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "3DWorld",
          "hash": "93f5fc0e02c3ee9f47c4c11198645a6f6f067877",
          "author": "Frank",
          "date": "2016-02-04T16:27:49+00:00",
          "message": "Minor optimization to is_cobj_contained().",
          "modified_files_count": 1,
          "modified_files": [
            "src/cobj_bsp_tree.cpp"
          ],
          "github_commit_url": "https://github.com/fegennari/3DWorld/commit/93f5fc0e02c3ee9f47c4c11198645a6f6f067877",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "cobj_bvh_tree::is_cobj_contained"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant checks in the `is_cobj_contained()` function by restructuring the logic to minimize unnecessary comparisons.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed property within the `is_cobj_contained` function.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed property within the `is_cobj_contained` function.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed property in a local variable.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed property within the `is_cobj_contained` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed property within the `is_cobj_contained` function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "primecount",
          "hash": "7b28c1202c89783e987c639b29a99ff698affb9b",
          "author": "kim",
          "date": "2013-07-26T20:26:11+02:00",
          "message": "minor speed up",
          "modified_files_count": 1,
          "modified_files": [
            "src/phi.cpp"
          ],
          "github_commit_url": "https://github.com/kimwalisch/primecount/commit/7b28c1202c89783e987c639b29a99ff698affb9b",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "phi"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of a loop.",
            "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values within the phi function.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used small function to eliminate overhead.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used small function within the `phi` function to eliminate overhead.",
            "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values within the `phi` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values within the phi function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "fteqw",
          "hash": "8ab73045aa375acafad0aee3d24806f3e376a43a",
          "author": "Spoike",
          "date": "2006-02-22T23:31:20+00:00",
          "message": "A small speedup.\n\n\ngit-svn-id: https://svn.code.sf.net/p/fteqw/code/trunk@1993 fc73d0e0-1445-4013-8a0c-d673dee63da5",
          "modified_files_count": 1,
          "modified_files": [
            "engine/server/svmodel.c"
          ],
          "github_commit_url": "https://github.com/fte-team/fteqw/commit/8ab73045aa375acafad0aee3d24806f3e376a43a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Mod_LoadBrushModel"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed function call.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the Mod_LoadBrushModel function.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed function call.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed function call."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed function call.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "mlterm",
          "hash": "2ae772bca1d23565588b31520a6e44071bff32eb",
          "author": "arakiken",
          "date": "2002-03-17T12:12:40+00:00",
          "message": "minor optimization in bidi_visual_line",
          "modified_files_count": 1,
          "modified_files": [
            "src/ml_logical_visual.c"
          ],
          "github_commit_url": "https://github.com/arakiken/mlterm/commit/2ae772bca1d23565588b31520a6e44071bff32eb",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "bidi_visual_line"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed function call within a loop.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed value in the `bidi_visual_line` function.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed function call within the `bidi_visual_line` function.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed property within the `bidi_visual_line` function.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed function call within a loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed function call within the `bidi_visual_line` function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "openrave",
          "hash": "12f3115f43a4b3e3431245f3aa2322539d11d909",
          "author": "rdiankov",
          "date": "2011-10-13T06:06:17+00:00",
          "message": "parabolic smoother small optimization",
          "modified_files_count": 1,
          "modified_files": [
            "plugins/rplanners/parabolicsmoother.cpp"
          ],
          "github_commit_url": "https://github.com/rdiankov/openrave/commit/12f3115f43a4b3e3431245f3aa2322539d11d909",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "PlanPath"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the parabolic smoother's path planning function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and storing frequently used values in the PlanPath function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and storing frequently used values in the parabolic smoother's path planning function.",
            "The optimization strategy involved reducing redundant calculations by caching frequently used values in the PlanPath function.",
            "The optimization strategy involved reducing redundant calculations by caching frequently used values within the PlanPath function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by caching frequently used values in the PlanPath function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "maszyna",
          "hash": "b1237e7245f63613e1f19232d37b879ebe88faa9",
          "author": "Królik Uszasty",
          "date": "2019-10-31T22:51:52+01:00",
          "message": "Simple fix for faster EStED reaction",
          "modified_files_count": 1,
          "modified_files": [
            "McZapkie/hamulce.cpp"
          ],
          "github_commit_url": "https://github.com/eu07/maszyna/commit/b1237e7245f63613e1f19232d37b879ebe88faa9",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "TEStED::GetPF"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved modifying the TEStED::GetPF function to improve the reaction speed of EStED by reducing unnecessary computations or improving data access patterns.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the TEStED::GetPF function.",
            "The optimization strategy involved reducing the number of conditional checks in the TEStED::GetPF function to improve performance.",
            "The optimization strategy involved modifying the TEStED::GetPF function to improve the reaction speed of EStED by reducing unnecessary computations or improving data access patterns.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently called function."
          ],
          "is_generic_optimization": [
            false,
            true,
            true,
            false,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the TEStED::GetPF function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "qgrep",
          "hash": "580bf2c928551822423ef4b2eb272a8739e1a472",
          "author": "Arseny Kapoulkine",
          "date": "2012-07-01T16:03:07+04:00",
          "message": "Command-T: Improve rank performance by memoization",
          "modified_files_count": 1,
          "modified_files": [
            "src/files.cpp"
          ],
          "github_commit_url": "https://github.com/zeux/qgrep/commit/580bf2c928551822423ef4b2eb272a8739e1a472",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy used memoization to improve the performance of ranking calculations by caching results of expensive function calls.",
            "The optimization strategy used was memoization to improve the performance of ranking calculations by caching results of expensive function calls.",
            "The optimization strategy used was memoization to improve the performance of ranking calculations by caching results of expensive function calls.",
            "The optimization strategy used was memoization to improve the performance of the rank calculation in the Command-T feature.",
            "The optimization strategy used was memoization to improve the performance of the rank function by caching previously computed results."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy used was memoization to improve the performance of ranking calculations by caching results of expensive function calls.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "overte",
          "hash": "374e89817bf86b66df0371065e89cf6ecd4ad5cf",
          "author": "Andrew Meadows",
          "date": "2014-08-01T14:46:28-07:00",
          "message": "minor optimization of MuscleConstraint::enforce()",
          "modified_files_count": 1,
          "modified_files": [
            "interface/src/avatar/MuscleConstraint.cpp"
          ],
          "github_commit_url": "https://github.com/overte-org/overte/commit/374e89817bf86b66df0371065e89cf6ecd4ad5cf",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the MuscleConstraint::enforce() function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the `MuscleConstraint::enforce()` function.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the MuscleConstraint::enforce() function.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the MuscleConstraint::enforce() function.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the MuscleConstraint::enforce() function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the MuscleConstraint::enforce() function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "cactus",
          "hash": "7c0882152d3d58f5d46163270dbfad4b60da59fa",
          "author": "Joel Armstrong",
          "date": "2016-10-06T14:12:10-07:00",
          "message": "Speed up chain-orientation checking",
          "modified_files_count": 1,
          "modified_files": [
            "caf/impl/phylogeny.c"
          ],
          "github_commit_url": "https://github.com/ComparativeGenomicsToolkit/cactus/commit/7c0882152d3d58f5d46163270dbfad4b60da59fa",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "stCaf_correctChainOrientation"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant computations by caching the result of a frequently accessed function call.",
            "The optimization strategy involved improving the efficiency of chain-orientation checking by reducing redundant computations and streamlining the logic.",
            "The optimization strategy involved reducing redundant computations by caching the result of a frequently called function within the chain-orientation checking process.",
            "The optimization strategy involved reducing redundant computations by caching the result of a frequently called function within a loop.",
            "The optimization strategy involved reducing redundant computations by caching the result of a frequently accessed property in the chain-orientation checking function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant computations by caching the result of a frequently called function within the chain-orientation checking process.",
          "is_generic_optimization_final": true
        }
      ]
    },
    {
      "cluster_id": "53",
      "size": 15,
      "repositories_distribution": {
        "pinba2": 1,
        "TOWNSEMU": 4,
        "cheribsd": 1,
        "zkevm-prover": 2,
        "tbd": 1,
        "pdns": 1,
        "helm": 1,
        "unbound": 1,
        "bitpit": 1,
        "tvheadend": 1,
        "cmssw": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves reducing memory allocation overhead by reusing pre-allocated or existing buffers instead of repeatedly allocating and deallocating memory.",
        "code_examples": [
          [
            "// Before\nvoid processData() {\n    char* buffer = malloc(1024);\n    // Process data\n    free(buffer);\n}",
            "// After\nchar buffer[1024];\nvoid processData() {\n    // Reuse pre-allocated buffer\n    // Process data\n}"
          ],
          [
            "// Before\nvoid logMessage(const char* msg) {\n    char* logBuffer = malloc(256);\n    snprintf(logBuffer, 256, \"Log: %s\", msg);\n    writeToLog(logBuffer);\n    free(logBuffer);\n}",
            "// After\nchar logBuffer[256];\nvoid logMessage(const char* msg) {\n    snprintf(logBuffer, 256, \"Log: %s\", msg);\n    writeToLog(logBuffer);\n}"
          ],
          [
            "// Before\nvoid makePackets() {\n    for (int i = 0; i < 100; i++) {\n        char* packet = malloc(512);\n        // Fill packet\n        sendPacket(packet);\n        free(packet);\n    }\n}",
            "// After\nchar packetBuffer[512];\nvoid makePackets() {\n    for (int i = 0; i < 100; i++) {\n        // Reuse buffer\n        // Fill packet\n        sendPacket(packetBuffer);\n    }\n}"
          ]
        ],
        "application_conditions": [
          "The code contains repeated calls to memory allocation functions (e.g., `malloc`, `calloc`, `new`) within a loop or frequently executed function.",
          "The allocated memory buffers are used for temporary storage and are deallocated (e.g., `free`, `delete`) shortly after their use in the same scope or function.",
          "The size of the allocated memory buffers is consistent across repeated allocations, allowing for reuse without resizing."
        ]
      },
      "commits": [
        {
          "repository_name": "pinba2",
          "hash": "77d4eb75f9adf6f49fa413eb9b097ec0f407fc06",
          "author": "Anton Povarov",
          "date": "2017-05-26T16:37:06+03:00",
          "message": "minor stats optimization",
          "modified_files_count": 1,
          "modified_files": [
            "src/report_by_timer.cpp"
          ],
          "github_commit_url": "https://github.com/badoo/pinba2/commit/77d4eb75f9adf6f49fa413eb9b097ec0f407fc06",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "merge_ticks_into_data"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the merge_ticks_into_data function.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the `merge_ticks_into_data` function.",
            "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer for merging ticks into data.",
            "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer for merging ticks into data.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing containers and minimizing the overhead of merging data structures."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer for merging ticks into data.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "TOWNSEMU",
          "hash": "b934c810010e46ab16613e557cf2f7e7f5b71b56",
          "author": "CaptainYS",
          "date": "2020-10-30T19:29:56-04:00",
          "message": "Small speed up.",
          "modified_files_count": 1,
          "modified_files": [
            "src/cpu/i486inst.cpp"
          ],
          "github_commit_url": "https://github.com/captainys/TOWNSEMU/commit/b934c810010e46ab16613e557cf2f7e7f5b71b56",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers, thereby decreasing overhead and improving speed.",
            "The optimization strategy involved replacing a value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "cheribsd",
          "hash": "3cc6bb7aba7dbd127cf9f855e742fb4b1b49da4a",
          "author": "jilles",
          "date": "2017-05-23T22:37:31+00:00",
          "message": "sh: Keep output buffer across builtins.\n\nAllocating and deallocating repeatedly the 1024-byte buffer for stdout from\nbuiltins costs CPU time for little or no benefit.\n\nA simple loop containing builtins that write to a file descriptor, such as\n  i=0; while [ \"$i\" -lt 1000000 ]; do printf .; i=$((i+1)); done >/dev/null\nis over 10% faster in a simple benchmark on an amd64 virtual machine.",
          "modified_files_count": 1,
          "modified_files": [
            "bin/sh/output.c"
          ],
          "github_commit_url": "https://github.com/CTSRD-CHERI/cheribsd/commit/3cc6bb7aba7dbd127cf9f855e742fb4b1b49da4a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "freestdout"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reusing a previously allocated output buffer across builtins to avoid repeated allocation and deallocation overhead.",
            "The optimization strategy involves reusing a 1024-byte output buffer across builtins to avoid repeated allocation and deallocation, reducing CPU overhead.",
            "The optimization strategy involves reusing a 1024-byte output buffer across builtins to avoid repeated allocation and deallocation, reducing CPU overhead.",
            "The optimization strategy involves reusing a previously allocated output buffer across builtins to avoid repeated allocation and deallocation overhead.",
            "The optimization strategy involves reusing a 1024-byte output buffer across builtins to avoid repeated allocation and deallocation, reducing CPU overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reusing a 1024-byte output buffer across builtins to avoid repeated allocation and deallocation, reducing CPU overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "zkevm-prover",
          "hash": "c184c1f304517390d6f28ccd16b3497faa08c39f",
          "author": "fractasy",
          "date": "2023-01-27T09:51:53+00:00",
          "message": "Optimize memory SM executor",
          "modified_files_count": 1,
          "modified_files": [
            "src/sm/memory/memory_executor.cpp"
          ],
          "github_commit_url": "https://github.com/0xPolygonHermez/zkevm-prover/commit/c184c1f304517390d6f28ccd16b3497faa08c39f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "MemoryExecutor::execute"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing memory allocation overhead by reusing pre-allocated buffers instead of creating new ones during execution.",
            "The optimization strategy involved reducing memory allocation overhead by reusing existing memory buffers instead of creating new ones during execution.",
            "The optimization strategy involved reducing memory allocation overhead by reusing existing memory buffers instead of creating new ones.",
            "The optimization strategy involved reducing memory allocation overhead by reusing existing memory buffers instead of creating new ones.",
            "The optimization strategy involved reducing memory allocation overhead by reusing existing memory buffers instead of creating new ones."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing memory allocation overhead by reusing existing memory buffers instead of creating new ones.",
          "is_generic_optimization_final": true
        },
        {
          "hash": "3b0c89697951fcfdf033035b1d78d33be5af84b4",
          "author": "inoahdev",
          "date": "2019-12-10T13:49:23-05:00",
          "message": "Optimize impl of dyld_shared_cache_parse_from_file()",
          "modified_files_count": 1,
          "modified_files": [
            "src/dyld_shared_cache.c"
          ],
          "github_commit_url": "https://github.com/inoahdev/tbd/commit/3b0c89697951fcfdf033035b1d78d33be5af84b4",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "dyld_shared_cache_parse_from_file"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "tbd",
          "optimization_summary": [
            "The optimization strategy involved reducing unnecessary memory allocations and improving data structure access patterns in the `dyld_shared_cache_parse_from_file` function.",
            "The optimization strategy involved reducing redundant memory allocations and improving cache locality by reusing pre-allocated buffers and minimizing unnecessary data copies.",
            "The optimization strategy involved reducing redundant memory allocations and improving data structure access patterns in the `dyld_shared_cache_parse_from_file` function.",
            "The optimization strategy involved reducing redundant memory allocations and improving cache locality by reusing existing buffers and minimizing unnecessary data copies.",
            "The optimization strategy involved reducing redundant memory allocations and improving cache locality by reusing existing buffers and minimizing unnecessary data copies."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant memory allocations and improving cache locality by reusing existing buffers and minimizing unnecessary data copies.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "pdns",
          "hash": "7750f6c673e2c828019e6faf765a36085b80e22b",
          "author": "Remi Gacogne",
          "date": "2018-08-28T11:01:17+02:00",
          "message": "ixfrdist: Small optimization in makeAXFRPackets()",
          "modified_files_count": 1,
          "modified_files": [
            "pdns/ixfrdist.cc"
          ],
          "github_commit_url": "https://github.com/PowerDNS/pdns/commit/7750f6c673e2c828019e6faf765a36085b80e22b",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "makeAXFRPackets"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer in the `makeAXFRPackets` function.",
            "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer in the `makeAXFRPackets` function.",
            "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer in the `makeAXFRPackets` function.",
            "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer in the `makeAXFRPackets` function.",
            "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer in the `makeAXFRPackets` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer in the `makeAXFRPackets` function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "helm",
          "hash": "a93658a4581b445e3fe5bf17512c4a3c14bd4692",
          "author": "mtytel",
          "date": "2017-05-02T12:15:33-04:00",
          "message": "Faster envelope.",
          "modified_files_count": 1,
          "modified_files": [
            "src/envelope.cpp"
          ],
          "github_commit_url": "https://github.com/mtytel/helm/commit/a93658a4581b445e3fe5bf17512c4a3c14bd4692",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Envelope::process"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values within the Envelope::process function.",
            "The optimization strategy involved reducing the number of memory allocations and deallocations by reusing existing buffers in the envelope processing function.",
            "The optimization strategy involved reducing the number of memory allocations and deallocations by reusing existing buffers in the envelope processing function.",
            "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of a loop.",
            "The optimization strategy involved reducing the number of memory allocations and deallocations by reusing existing buffers in the envelope processing function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of memory allocations and deallocations by reusing existing buffers in the envelope processing function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "unbound",
          "hash": "46099259be67325e6b080edebe19f11740b2105a",
          "author": "Kevin Chou",
          "date": "2019-05-04T12:52:18+08:00",
          "message": "performance improvement",
          "modified_files_count": 1,
          "modified_files": [
            "ipset/ipset.c"
          ],
          "github_commit_url": "https://github.com/NLnetLabs/unbound/commit/46099259be67325e6b080edebe19f11740b2105a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ipset_update"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of memory allocations by reusing existing memory buffers instead of creating new ones.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing memory buffers instead of creating new ones.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing memory buffers instead of allocating new ones.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing memory buffers instead of allocating new ones.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing memory buffers instead of allocating new ones."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of memory allocations by reusing existing memory buffers instead of allocating new ones.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "bitpit",
          "hash": "5c699ab1bd62cdafbb648454ead5339f3211cca7",
          "author": "Andrea Iob",
          "date": "2024-06-12T17:58:28+02:00",
          "message": "common: micro optimize flush of logger buffer",
          "modified_files_count": 1,
          "modified_files": [
            "src/common/logger.cpp"
          ],
          "github_commit_url": "https://github.com/optimad/bitpit/commit/5c699ab1bd62cdafbb648454ead5339f3211cca7",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "LoggerBuffer::flush"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of memory allocations and deallocations by reusing a pre-allocated buffer for flushing the logger.",
            "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer for flushing the logger.",
            "The optimization strategy involved reducing the number of memory allocations by reusing an existing buffer in the logger flush function.",
            "The optimization strategy involved reducing the number of function calls by directly accessing the buffer's data instead of using an intermediate function.",
            "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer for flushing the logger buffer."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of memory allocations by reusing an existing buffer in the logger flush function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "tvheadend",
          "hash": "2349f48cda80b49c04427a65d2479c5ad4ff2358",
          "author": "Jaroslav Kysela",
          "date": "2014-10-14T11:32:20+02:00",
          "message": "epggrab: ota - small optimization",
          "modified_files_count": 1,
          "modified_files": [
            "src/epggrab/otamux.c"
          ],
          "github_commit_url": "https://github.com/tvheadend/tvheadend/commit/2349f48cda80b49c04427a65d2479c5ad4ff2358",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "epggrab_ota_done"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently used small function.",
            "The optimization strategy involved reducing the number of function calls by inlining a small function directly into the main logic.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers in the `epggrab_ota_done` function.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers in the `epggrab_ota_done` function.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers in the `epggrab_ota_done` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers in the `epggrab_ota_done` function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "TOWNSEMU",
          "hash": "cebcc209693651729a0aa853a909616a797f6108",
          "author": "CaptainYS",
          "date": "2020-10-30T12:42:27-04:00",
          "message": "Small speed up.",
          "modified_files_count": 1,
          "modified_files": [
            "src/cpu/i486inst.cpp"
          ],
          "github_commit_url": "https://github.com/captainys/TOWNSEMU/commit/cebcc209693651729a0aa853a909616a797f6108",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers, thereby minimizing overhead and improving performance.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers instead of creating new ones.",
            "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values within a loop.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "zkevm-prover",
          "hash": "82ef84625987df5fb42cda7bdd463fe803b4cd5f",
          "author": "fractasy",
          "date": "2022-09-16T15:52:21+02:00",
          "message": "Merge pull request #68 from 0xPolygonHermez/feature/mem_optimization\n\nreuse memory pointer",
          "modified_files_count": 1,
          "modified_files": [
            "src/prover/prover.cpp"
          ],
          "github_commit_url": "https://github.com/0xPolygonHermez/zkevm-prover/commit/82ef84625987df5fb42cda7bdd463fe803b4cd5f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Prover::prove"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reusing a memory pointer to reduce memory allocation overhead.",
            "The optimization strategy involves reusing a memory pointer to reduce memory allocation overhead.",
            "The optimization strategy involved reusing a memory pointer to reduce memory allocation overhead.",
            "The optimization strategy involved reusing a memory pointer to reduce memory allocation overhead.",
            "The optimization strategy involves reusing a memory pointer to reduce memory allocation overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reusing a memory pointer to reduce memory allocation overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "TOWNSEMU",
          "hash": "d644cc3611f22630399c08d8b02a1f8846e17509",
          "author": "CaptainYS",
          "date": "2020-04-25T21:11:22-04:00",
          "message": "Small speed up.",
          "modified_files_count": 1,
          "modified_files": [
            "src/cpu/i486.cpp"
          ],
          "github_commit_url": "https://github.com/captainys/TOWNSEMU/commit/d644cc3611f22630399c08d8b02a1f8846e17509",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers instead of creating new ones.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers, thereby decreasing overhead and improving performance.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing the number of memory accesses by reusing previously computed values within a loop.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers, thereby decreasing overhead and improving performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers, thereby decreasing overhead and improving performance.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "cmssw",
          "hash": "66a5d7aebf52dd6e707cbb6326b2e702fcd02658",
          "author": "Burt Betchart",
          "date": "2009-08-05T15:28:43+00:00",
          "message": "Another speed improvement",
          "modified_files_count": 1,
          "modified_files": [
            "EventFilter/SiStripRawToDigi/src/SiStripFEDBufferGenerator.cc"
          ],
          "github_commit_url": "https://github.com/cms-sw/cmssw/commit/66a5d7aebf52dd6e707cbb6326b2e702fcd02658",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "FEDBufferPayloadCreator::fillClusterData"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer for cluster data.",
            "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer for cluster data.",
            "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer for cluster data.",
            "The optimization strategy involved reducing the number of memory allocations and deallocations by reusing a pre-allocated buffer for cluster data.",
            "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer for cluster data."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer for cluster data.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "TOWNSEMU",
          "hash": "58da773d8c0be7f7ad2b3d3eae47a675a36d1fb1",
          "author": "Soji Yamakawa",
          "date": "2021-11-07T09:53:19-05:00",
          "message": "A minor speed up.",
          "modified_files_count": 1,
          "modified_files": [
            "src/cpu/i486.h"
          ],
          "github_commit_url": "https://github.com/captainys/TOWNSEMU/commit/58da773d8c0be7f7ad2b3d3eae47a675a36d1fb1",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers.",
          "is_generic_optimization_final": true
        }
      ]
    },
    {
      "cluster_id": "12",
      "size": 15,
      "repositories_distribution": {
        "GLideN64": 1,
        "stan": 1,
        "XCSoar": 1,
        "bitshares-core": 1,
        "primecount": 1,
        "cmssw": 1,
        "love": 1,
        "MathGeoLib": 1,
        "Kratos": 2,
        "HPCC-Platform": 1,
        "embree": 1,
        "solidity": 1,
        "Egaroucid": 1,
        "zstd": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves reducing redundant calculations by precomputing and reusing values within specific functions to improve performance.",
        "code_examples": [
          [
            "// Before\nfunction F5INDI_CalcST(a, b, c) {\n  let x = Math.sin(a) * Math.cos(b);\n  let y = Math.sin(a) * Math.cos(b);\n  let z = Math.sin(c) * Math.cos(b);\n  return x + y + z;\n}",
            "// After\nfunction F5INDI_CalcST(a, b, c) {\n  const sinA = Math.sin(a);\n  const cosB = Math.cos(b);\n  let x = sinA * cosB;\n  let y = sinA * cosB;\n  let z = Math.sin(c) * cosB;\n  return x + y + z;\n}"
          ],
          [
            "// Before\nfunction CalculateOrientationNormal(a, b) {\n  let x = Math.sqrt(a * a + b * b);\n  let y = Math.sqrt(a * a + b * b);\n  return x + y;\n}",
            "// After\nfunction CalculateOrientationNormal(a, b) {\n  const sqrtVal = Math.sqrt(a * a + b * b);\n  let x = sqrtVal;\n  let y = sqrtVal;\n  return x + y;\n}"
          ]
        ],
        "application_conditions": [
          "The function contains repeated calculations of the same expression within its scope.",
          "The repeated expression does not depend on variables that change between its occurrences.",
          "The precomputed value can be stored in a variable without altering the function's logic or output."
        ]
      },
      "commits": [
        {
          "repository_name": "GLideN64",
          "hash": "cd4535025de2fa48da485696376dcd299bef587a",
          "author": "Sergey Lipskiy",
          "date": "2019-02-17T15:39:39+07:00",
          "message": "An optimization in F5INDI_CalcST",
          "modified_files_count": 1,
          "modified_files": [
            "src/uCodes/F5Indi_Naboo.cpp"
          ],
          "github_commit_url": "https://github.com/gonetz/GLideN64/commit/cd4535025de2fa48da485696376dcd299bef587a",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the F5INDI_CalcST function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the F5INDI_CalcST function.",
            "The optimization strategy involved reducing redundant calculations by caching and reusing previously computed values in the `F5INDI_CalcST` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the F5INDI_CalcST function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the F5INDI_CalcST function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the F5INDI_CalcST function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "stan",
          "hash": "ec8877b1e163480cd130a1cf37f7c8ce3d17745d",
          "author": "Ben Goodrich",
          "date": "2014-05-04T14:05:11-04:00",
          "message": "hopefully accelerate do_lkj_constant",
          "modified_files_count": 1,
          "modified_files": [
            "src/stan/prob/distributions/multivariate/continuous/lkj_corr.hpp"
          ],
          "github_commit_url": "https://github.com/stan-dev/stan/commit/ec8877b1e163480cd130a1cf37f7c8ce3d17745d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "do_lkj_constant"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing and caching constant values used within the function.",
            "The optimization strategy involved reducing computational overhead by simplifying or refactoring the constant calculation logic in the `do_lkj_constant` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing constant values within the `do_lkj_constant` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing constant values in the `do_lkj_constant` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing constant values within the `do_lkj_constant` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing and reusing constant values within the `do_lkj_constant` function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "XCSoar",
          "hash": "0540e38bdd98dbfad4680173df0bd35a5ae60e9a",
          "author": "Tobias Bieniek",
          "date": "2010-10-25T06:49:57+02:00",
          "message": "MapWindowProjection: Optimized CalculateOrientationNormal()",
          "modified_files_count": 1,
          "modified_files": [
            "src/MapWindowProjection.cpp"
          ],
          "github_commit_url": "https://github.com/XCSoar/XCSoar/commit/0540e38bdd98dbfad4680173df0bd35a5ae60e9a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "MapWindowProjection::CalculateOrientationNormal"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values in the CalculateOrientationNormal function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values in the `CalculateOrientationNormal` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the CalculateOrientationNormal function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values in the CalculateOrientationNormal function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values in the CalculateOrientationNormal function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing and reusing values in the CalculateOrientationNormal function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "bitshares-core",
          "hash": "cb0dbb8ec5359da6a0997c92e8ae200085c48393",
          "author": "abitmore",
          "date": "2018-09-06T14:08:10-04:00",
          "message": "price::call_price() minor optimization",
          "modified_files_count": 1,
          "modified_files": [
            "libraries/chain/protocol/asset.cpp"
          ],
          "github_commit_url": "https://github.com/bitshares/bitshares-core/commit/cb0dbb8ec5359da6a0997c92e8ae200085c48393",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "price::call_price"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations and simplifying logic in the `price::call_price` function to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing intermediate values in the `price::call_price` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the `price::call_price` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value used multiple times in the `price::call_price` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the `price::call_price` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the `price::call_price` function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "primecount",
          "hash": "b041d6dfe1675571a92324bb662e9c591885f3e8",
          "author": "Kim Walisch",
          "date": "2014-05-18T11:04:59-07:00",
          "message": "Speed improvement",
          "modified_files_count": 1,
          "modified_files": [
            "src/pi_lmo_parallel3.cpp"
          ],
          "github_commit_url": "https://github.com/kimwalisch/primecount/commit/b041d6dfe1675571a92324bb662e9c591885f3e8",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "S2"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of redundant calculations in the S2 function by precomputing and reusing values.",
            "The optimization strategy involved reducing redundant calculations by caching intermediate results in the S2 function.",
            "The optimization strategy involved parallelizing the computation in the S2 function to improve performance by leveraging multiple threads.",
            "The optimization strategy involved reducing the number of redundant calculations by precomputing and reusing values within the S2 function.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently called function within the `S2` function to minimize overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            false,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of redundant calculations in the S2 function by precomputing and reusing values.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "cmssw",
          "hash": "f706162d030eb3a78f94789219ea020c00db4de4",
          "author": "Thomas Reis",
          "date": "2016-12-15T20:48:52+01:00",
          "message": "Performance improvements for the L1TMuonCaloSumProducer",
          "modified_files_count": 1,
          "modified_files": [
            "L1Trigger/L1TMuon/plugins/L1TMuonCaloSumProducer.cc"
          ],
          "github_commit_url": "https://github.com/cms-sw/cmssw/commit/f706162d030eb3a78f94789219ea020c00db4de4",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "L1TMuonCaloSumProducer::produce"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of redundant calculations and memory accesses by precomputing values and reusing them within the loop.",
            "The optimization strategy involved reducing redundant calculations and improving loop efficiency in the L1TMuonCaloSumProducer::produce function.",
            "The optimization strategy involved reducing the number of redundant calculations and memory accesses by reusing previously computed values within the L1TMuonCaloSumProducer::produce function.",
            "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of loops and minimizing unnecessary memory allocations.",
            "The optimization strategy involved reducing redundant calculations and improving loop efficiency in the L1TMuonCaloSumProducer::produce function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of redundant calculations and memory accesses by reusing previously computed values within the L1TMuonCaloSumProducer::produce function.",
          "is_generic_optimization_final": true
        },
        {
          "hash": "4df411d95afef5136cf1fa41d2dbfc012c544254",
          "author": "vrld",
          "date": "2011-01-02T22:44:19+01:00",
          "message": "Faster Matrix::setTransformation",
          "modified_files_count": 1,
          "modified_files": [
            "src/common/Matrix.cpp"
          ],
          "github_commit_url": "https://github.com/love2d/love/commit/4df411d95afef5136cf1fa41d2dbfc012c544254",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Matrix::setTransformation"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "love",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations and simplifying matrix transformation operations to improve performance.",
            "The optimization strategy involved reducing redundant calculations in the Matrix::setTransformation function by precomputing and reusing values.",
            "The optimization strategy involved reducing redundant calculations in the Matrix::setTransformation function by precomputing and reusing values.",
            "The optimization strategy involved reducing redundant calculations in the `Matrix::setTransformation` function by precomputing and reusing values.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values in the matrix transformation function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations in the Matrix::setTransformation function by precomputing and reusing values.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "MathGeoLib",
          "hash": "9ad3c13b6b905769289b59ab5bf8a35d05d1ef61",
          "author": "Jukka Jylänki",
          "date": "2014-12-21T06:32:12+02:00",
          "message": "Micro-optimize AreEdgesCompatibleForOBB().",
          "modified_files_count": 1,
          "modified_files": [
            "src/Geometry/OBB.cpp"
          ],
          "github_commit_url": "https://github.com/juj/MathGeoLib/commit/9ad3c13b6b905769289b59ab5bf8a35d05d1ef61",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "AreEdgesCompatibleForOBB"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing intermediate results in the `AreEdgesCompatibleForOBB()` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the AreEdgesCompatibleForOBB() function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "Kratos",
          "hash": "b84ecc4ee0ca927eb90cba9f1ed2cfc41efd69c4",
          "author": "MFusseder",
          "date": "2018-05-08T09:04:46+02:00",
          "message": "optimized function to compute shape sensitivity",
          "modified_files_count": 1,
          "modified_files": [
            "applications/StructuralMechanicsApplication/custom_response_functions/adjoint_conditions/surface_load_adjoint_condition_3d.cpp"
          ],
          "github_commit_url": "https://github.com/KratosMultiphysics/Kratos/commit/b84ecc4ee0ca927eb90cba9f1ed2cfc41efd69c4",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "SurfaceLoadAdjointCondition3D::CalculateSensitivityMatrix"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing intermediate values in the sensitivity matrix computation.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the function to improve performance.",
            "The optimization strategy involved reducing redundant computations by precomputing and reusing values within the sensitivity matrix calculation function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the function to compute shape sensitivity.",
            "The optimization strategy involved reducing redundant calculations and improving memory access patterns in the sensitivity matrix computation function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant computations by precomputing and reusing values within the sensitivity matrix calculation function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "Kratos",
          "hash": "c143131a0edb2cb39275351e4c68852779396b9a",
          "author": "Tobias Teschemacher",
          "date": "2019-12-30T11:27:27+10:00",
          "message": "optimize CalculateTransformation",
          "modified_files_count": 1,
          "modified_files": [
            "applications/IgaApplication/custom_elements/shell_3p_element.cpp"
          ],
          "github_commit_url": "https://github.com/KratosMultiphysics/Kratos/commit/c143131a0edb2cb39275351e4c68852779396b9a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Shell3pElement::CalculateTransformation"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the `CalculateTransformation` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the `CalculateTransformation` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing transformation matrices in the `CalculateTransformation` function.",
            "The optimization strategy involved reducing redundant calculations by caching intermediate results in the `CalculateTransformation` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and storing frequently used values in local variables within the `CalculateTransformation` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the `CalculateTransformation` function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "HPCC-Platform",
          "hash": "0ac9a5479c9891731c6b60a446c929c3adf764a9",
          "author": "Gavin Halliday",
          "date": "2020-01-08T10:39:38+00:00",
          "message": "HPCC-23258 Improve resourcing of expressions evaluated once\n\nSigned-off-by: Gavin Halliday <gavin.halliday@lexisnexis.com>",
          "modified_files_count": 1,
          "modified_files": [
            "ecl/hqlcpp/hqlresource.cpp"
          ],
          "github_commit_url": "https://github.com/hpcc-systems/HPCC-Platform/commit/0ac9a5479c9891731c6b60a446c929c3adf764a9",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "queryNoteDataset"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved improving the resourcing of expressions evaluated once to reduce redundant computations.",
            "The optimization strategy involved improving the resourcing of expressions evaluated once to enhance performance.",
            "The optimization strategy involved improving the resourcing of expressions evaluated once to reduce redundant computations.",
            "The optimization strategy involved improving the resourcing of expressions evaluated once to reduce redundant computations.",
            "The optimization strategy involved improving the resourcing of expressions evaluated once to reduce unnecessary overhead."
          ],
          "is_generic_optimization": [
            true,
            false,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving the resourcing of expressions evaluated once to reduce redundant computations.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "embree",
          "hash": "593c39969b0259f5f862d566761015d6cabdfde5",
          "author": "Sven Woop",
          "date": "2018-01-26T11:08:50+01:00",
          "message": "optimization to eval_dt",
          "modified_files_count": 1,
          "modified_files": [
            "kernels/geometry/oriented_curve_intersector.h"
          ],
          "github_commit_url": "https://github.com/RenderKit/embree/commit/593c39969b0259f5f862d566761015d6cabdfde5",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "eval_dt"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations in the `eval_dt` function by precomputing and reusing intermediate values.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing intermediate values in the `eval_dt` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the `eval_dt` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the eval_dt function.",
            "The optimization strategy involved reducing redundant calculations in the `eval_dt` function by precomputing and reusing intermediate results."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing and reusing intermediate values in the `eval_dt` function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "solidity",
          "hash": "bed0368ffac4f9e34ff14e115619ed2cd994e2f7",
          "author": "chriseth",
          "date": "2018-11-07T20:30:31+01:00",
          "message": "Merge pull request #5327 from ethereum/rematerializerSmall\n\nAdd rematerializer to interactive optimizer.",
          "modified_files_count": 1,
          "modified_files": [
            "test/tools/yulopti.cpp"
          ],
          "github_commit_url": "https://github.com/ethereum/solidity/commit/bed0368ffac4f9e34ff14e115619ed2cd994e2f7",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "runInteractive"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves adding a rematerializer to the interactive optimizer to reduce redundant computations by reusing intermediate values.",
            "The optimization strategy involves adding a rematerializer to the interactive optimizer to reduce redundant computations by reusing intermediate values.",
            "The optimization strategy involves adding a rematerializer to the interactive optimizer to reduce redundant computations by reusing intermediate values.",
            "The optimization strategy involves adding a rematerializer to the interactive optimizer to reduce redundant computations by reusing intermediate values.",
            "The commit adds a rematerializer to the interactive optimizer to reduce redundant computations by reusing intermediate values."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves adding a rematerializer to the interactive optimizer to reduce redundant computations by reusing intermediate values.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "Egaroucid",
          "hash": "f4b396f1001f698f96e486e68f4b13b124bef713",
          "author": "Nyanyan",
          "date": "2023-12-10T14:23:48+09:00",
          "message": "speedup book deviate, issue #97, fixed err",
          "modified_files_count": 1,
          "modified_files": [
            "src/engine/book_enlarge.hpp"
          ],
          "github_commit_url": "https://github.com/Nyanyan/Egaroucid/commit/f4b396f1001f698f96e486e68f4b13b124bef713",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "book_recalculate_leaf"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved speeding up the book deviate function by recalculating leaf nodes more efficiently.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loop iterations.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loop iterations.",
            "The optimization strategy involved reducing unnecessary calculations and improving data access patterns in the `book_recalculate_leaf` function to enhance performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the `book_recalculate_leaf` function."
          ],
          "is_generic_optimization": [
            false,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the `book_recalculate_leaf` function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "zstd",
          "hash": "dc404119e5377ce18e49bedeeab3f0ff8b815d87",
          "author": "Yann Collet",
          "date": "2017-09-30T15:02:40-07:00",
          "message": "ZSTD_adjustCParams_internal : minor optimization",
          "modified_files_count": 1,
          "modified_files": [
            "lib/compress/zstd_compress.c"
          ],
          "github_commit_url": "https://github.com/facebook/zstd/commit/dc404119e5377ce18e49bedeeab3f0ff8b815d87",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ZSTD_adjustCParams_internal"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the ZSTD_adjustCParams_internal function.",
            "The optimization strategy involved reducing redundant calculations by reusing previously computed values within the function ZSTD_adjustCParams_internal.",
            "The optimization strategy involved minor adjustments to internal compression parameters to improve performance.",
            "The optimization strategy involved minor adjustments to internal compression parameters to improve performance.",
            "The optimization strategy involved reducing redundant calculations by reusing previously computed values within the `ZSTD_adjustCParams_internal` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by reusing previously computed values within the function ZSTD_adjustCParams_internal.",
          "is_generic_optimization_final": true
        }
      ]
    },
    {
      "cluster_id": "178",
      "size": 14,
      "repositories_distribution": {
        "smatch": 1,
        "vg": 1,
        "libcluon": 1,
        "lightrec": 1,
        "qcad": 1,
        "liblcf": 1,
        "wireshark": 1,
        "lammps": 1,
        "eos-vm": 1,
        "efl": 1,
        "incubator-pagespeed-mod": 1,
        "feelpp": 1,
        "v8": 1,
        "USBProxy-legacy": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves **eliminating redundant operations, function calls, or calculations by deferring, skipping, or directly handling specific cases when they are unnecessary or can be simplified**.",
        "code_examples": [
          [
            "// Before\nint get_fuzzy_math() {\n  int min = get_implied_min();\n  return min + some_calculation();\n}",
            "// After\nint get_fuzzy_math() {\n  int min = calculate_implied_min_directly();\n  return min + some_calculation();\n}"
          ],
          [
            "// Before\nvoid process_envelope(Envelope env) {\n  unpack(env);\n  if (needs_post_processing(env)) {\n    post_process(env);\n  }\n}",
            "// After\nvoid process_envelope(Envelope env) {\n  if (needs_post_processing(env)) {\n    unpack(env);\n    post_process(env);\n  }\n}"
          ],
          [
            "// Before\nvoid rec_load_direct(int value) {\n  if (value == 0) {\n    handle_zero_case();\n  }\n  perform_expensive_operation(value);\n}",
            "// After\nvoid rec_load_direct(int value) {\n  if (value == 0) {\n    handle_zero_case();\n    return;\n  }\n  perform_expensive_operation(value);\n}"
          ]
        ],
        "application_conditions": [
          "The code contains a function call that is executed unconditionally but could be skipped based on a specific condition (e.g., a zero value or a flag).",
          "The code performs a calculation or operation that is redundant because its result is already known or can be derived from existing data.",
          "The code includes a seek or positioning operation (e.g., `seekg`) that is unnecessary for small or zero values."
        ]
      },
      "commits": [
        {
          "repository_name": "smatch",
          "hash": "df336c84d0752586d39e34e897d557d832a60662",
          "author": "Dan Carpenter",
          "date": "2013-02-03T23:45:21+03:00",
          "message": "math: tweak get_fuzzy_math()\n\nInstead of calling get_implied_min() it already gets the estate and\nfigures out the implied min on its own.  This is more efficient.\n\nAlso I want get_implied_min() to be able to return s32min.  That's how\nget max works and it's cleaner.\n\nSigned-off-by: Dan Carpenter <dan.carpenter@oracle.com>",
          "modified_files_count": 1,
          "modified_files": [
            "smatch_math.c"
          ],
          "github_commit_url": "https://github.com/error27/smatch/commit/df336c84d0752586d39e34e897d557d832a60662",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "get_fuzzy_min_helper"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves inlining the logic of `get_implied_min()` within `get_fuzzy_min_helper()` to avoid the overhead of a function call and directly compute the implied minimum value.",
            "The optimization strategy involves directly calculating the implied minimum value within the function instead of calling an external function, reducing overhead and improving efficiency.",
            "The optimization strategy involves directly calculating the implied minimum value within the function instead of calling an external function, reducing overhead and improving efficiency.",
            "The optimization strategy involves directly calculating the implied minimum value within the function instead of calling an external function, reducing overhead.",
            "The optimization strategy involves directly calculating the implied minimum value within the function instead of calling an external function, reducing overhead and improving efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves directly calculating the implied minimum value within the function instead of calling an external function, reducing overhead and improving efficiency.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "vg",
          "hash": "a97a233dd37d4bd23f2b5c14a60d8493bb5a2adb",
          "author": "Glenn Hickey",
          "date": "2023-09-22T10:00:04-04:00",
          "message": "Merge pull request #4095 from vgteam/glenn\n\nfaster min_node_support when support is 0",
          "modified_files_count": 1,
          "modified_files": [
            "src/traversal_support.cpp"
          ],
          "github_commit_url": "https://github.com/vgteam/vg/commit/a97a233dd37d4bd23f2b5c14a60d8493bb5a2adb",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "PackedTraversalSupportFinder::get_min_node_support"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves skipping unnecessary computations when the support value is 0 to improve performance.",
            "The optimization strategy involves improving the efficiency of the `get_min_node_support` function by adding a special case to handle when the support value is 0, thereby avoiding unnecessary computations.",
            "The optimization strategy involves skipping unnecessary calculations when the support value is 0 to improve performance.",
            "The optimization strategy involves early termination in the `get_min_node_support` function when the support value is 0, reducing unnecessary computations.",
            "The optimization strategy involves skipping unnecessary calculations when the support value is 0 to improve performance."
          ],
          "is_generic_optimization": [
            true,
            false,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves skipping unnecessary calculations when the support value is 0 to improve performance.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "libcluon",
          "hash": "49b79c0d4cd73e4ba4d4ef66273845abf96ab7b6",
          "author": "Christian Berger",
          "date": "2018-06-13T20:22:17+02:00",
          "message": "* Improving performance of OD4Session: unpack the Envelope only when it is post-processed\n\nSigned-off-by: Christian Berger <christian.berger@gu.se>",
          "modified_files_count": 1,
          "modified_files": [
            "libcluon/src/OD4Session.cpp"
          ],
          "github_commit_url": "https://github.com/chrberger/libcluon/commit/49b79c0d4cd73e4ba4d4ef66273845abf96ab7b6",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "OD4Session::callback"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves deferring the unpacking of an Envelope object until it is actually needed for post-processing, reducing unnecessary operations.",
            "The optimization strategy involves deferring the unpacking of an Envelope until it is actually needed for post-processing, reducing unnecessary operations.",
            "The optimization strategy involves deferring the unpacking of an Envelope until it is actually needed for post-processing, reducing unnecessary operations.",
            "The optimization strategy involves deferring the unpacking of an Envelope until it is actually needed for post-processing, reducing unnecessary operations.",
            "The optimization strategy involves deferring the unpacking of an Envelope object until it is actually needed for post-processing, reducing unnecessary operations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves deferring the unpacking of an Envelope until it is actually needed for post-processing, reducing unnecessary operations.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "lightrec",
          "hash": "38088e7b165b236924c5ea58600f31598c0085c2",
          "author": "Paul Cercueil",
          "date": "2019-09-16T03:21:20+02:00",
          "message": "Emitter: Optimize rec_load_direct when immediate value is zero\n\nSigned-off-by: Paul Cercueil <paul@crapouillou.net>",
          "modified_files_count": 1,
          "modified_files": [
            "emitter.c"
          ],
          "github_commit_url": "https://github.com/pcercuei/lightrec/commit/38088e7b165b236924c5ea58600f31598c0085c2",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "rec_load_direct"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves optimizing the `rec_load_direct` function by handling the case where the immediate value is zero more efficiently.",
            "The optimization strategy involves optimizing the `rec_load_direct` function by handling the case where the immediate value is zero more efficiently.",
            "The optimization strategy involves simplifying the `rec_load_direct` function by handling the case where the immediate value is zero more efficiently.",
            "The optimization strategy involves optimizing the `rec_load_direct` function by handling the case where the immediate value is zero more efficiently.",
            "The optimization strategy involves optimizing the `rec_load_direct` function by handling the case where the immediate value is zero more efficiently."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves optimizing the `rec_load_direct` function by handling the case where the immediate value is zero more efficiently.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "qcad",
          "hash": "98f92a5a275102dfab915b920e2ebf52f43bf091",
          "author": "Andrew Mustun",
          "date": "2020-09-08T08:45:14+02:00",
          "message": "performance: avoid unnecessary bounding box calculations",
          "modified_files_count": 1,
          "modified_files": [
            "src/entity/RDimensionData.cpp"
          ],
          "github_commit_url": "https://github.com/qcad/qcad/commit/98f92a5a275102dfab915b920e2ebf52f43bf091",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "RDimensionData::getBoundingBox"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy avoids unnecessary bounding box calculations by skipping them when not required.",
            "The optimization strategy avoids unnecessary bounding box calculations to improve performance.",
            "The optimization strategy avoids unnecessary bounding box calculations by skipping them when not required.",
            "The optimization strategy avoids unnecessary bounding box calculations by skipping them when not required.",
            "The optimization strategy avoids unnecessary bounding box calculations by skipping them when not required."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy avoids unnecessary bounding box calculations by skipping them when not required.",
          "is_generic_optimization_final": true
        },
        {
          "hash": "123eb4cebef802d440217f04f6224b5f8c44dfb5",
          "author": "Matthew Fioravante",
          "date": "2019-12-14T02:04:49-05:00",
          "message": "ReaderLcf: Optimize out calls to seekg() for small values",
          "modified_files_count": 1,
          "modified_files": [
            "src/reader_lcf.cpp"
          ],
          "github_commit_url": "https://github.com/EasyRPG/liblcf/commit/123eb4cebef802d440217f04f6224b5f8c44dfb5",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "LcfReader::Seek"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "liblcf",
          "optimization_summary": [
            "The optimization strategy reduces unnecessary calls to `seekg()` for small values by avoiding the function call when the seek position is already correct.",
            "The optimization strategy reduces unnecessary calls to `seekg()` for small seek values to minimize overhead.",
            "The optimization strategy involves reducing unnecessary calls to `seekg()` for small values to improve performance.",
            "The optimization strategy reduces unnecessary calls to `seekg()` for small values by avoiding redundant seek operations.",
            "The optimization strategy reduces unnecessary calls to seekg() for small seek values by avoiding them when the target position is already the current position."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy reduces unnecessary calls to `seekg()` for small values by avoiding redundant seek operations.",
          "is_generic_optimization_final": true
        },
        {
          "hash": "95d8c7e2dad5cf54f209c87a2c0ca558aff69bd7",
          "author": "Anders Broman",
          "date": "2007-11-27T21:24:39+00:00",
          "message": "Apply yet another of the optimization patches:\n- Only call functions if they are needed or once.\n\nsvn path=/trunk/; revision=23628",
          "modified_files_count": 1,
          "modified_files": [
            "epan/dissectors/packet-http.c"
          ],
          "github_commit_url": "https://github.com/wireshark/wireshark/commit/95d8c7e2dad5cf54f209c87a2c0ca558aff69bd7",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "dissect_http_message"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "wireshark",
          "optimization_summary": [
            "The optimization strategy involves calling functions only when necessary or reducing redundant calls to improve performance.",
            "The optimization strategy involves calling functions only when necessary or once to reduce unnecessary function calls.",
            "The optimization strategy involves conditionally calling functions only when necessary or reducing redundant calls to improve performance.",
            "The optimization strategy involves calling functions only when necessary or reducing redundant calls to improve performance.",
            "The optimization strategy involves conditionally calling functions only when necessary or reducing redundant calls to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves calling functions only when necessary or reducing redundant calls to improve performance.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "lammps",
          "hash": "a3eee419a139e9ea09a1809ebb01aaea92a243f1",
          "author": "Yaser Afshar",
          "date": "2020-03-06T09:01:28-06:00",
          "message": "minor optimization, avoiding double computation and extra communication",
          "modified_files_count": 1,
          "modified_files": [
            "src/min_cg.cpp"
          ],
          "github_commit_url": "https://github.com/lammps/lammps/commit/a3eee419a139e9ea09a1809ebb01aaea92a243f1",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "MinCG::iterate"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy avoids double computation and reduces unnecessary communication in the MinCG::iterate function.",
            "The optimization strategy avoids double computation and reduces unnecessary communication in the MinCG::iterate function.",
            "The optimization strategy avoids redundant computations and unnecessary communication in the MinCG::iterate function.",
            "The optimization strategy avoids double computation and reduces extra communication in the MinCG::iterate function.",
            "The optimization strategy avoids double computation and reduces unnecessary communication in the MinCG::iterate function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy avoids double computation and reduces unnecessary communication in the MinCG::iterate function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "eos-vm",
          "hash": "7470b272f3afdc5100eb19b9d7030f1f35ce3c10",
          "author": "Steven Watanabe",
          "date": "2019-08-02T15:47:14-04:00",
          "message": "Small optimization to br_indirect, when the stack needs no adjustment.",
          "modified_files_count": 1,
          "modified_files": [
            "include/eosio/vm/x86_64.hpp"
          ],
          "github_commit_url": "https://github.com/EOSIO/eos-vm/commit/7470b272f3afdc5100eb19b9d7030f1f35ce3c10",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "emit_case"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves skipping stack adjustment in the `br_indirect` function when it is not needed, reducing unnecessary operations.",
            "The optimization strategy involves skipping stack adjustment in the `br_indirect` function when it is not needed, reducing unnecessary operations.",
            "The optimization strategy involves skipping stack adjustment in the `br_indirect` function when it is not needed, reducing unnecessary operations.",
            "The optimization strategy involves skipping stack adjustment in the `br_indirect` function when it is not needed, reducing unnecessary operations.",
            "The optimization strategy involves skipping stack adjustment in the `br_indirect` function when it is not necessary, reducing unnecessary operations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves skipping stack adjustment in the `br_indirect` function when it is not needed, reducing unnecessary operations.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "efl",
          "hash": "58aa349283d19e58eadb1acb7596d6ca1f23ea8d",
          "author": "Jean-Philippe Andre",
          "date": "2016-08-10T14:17:58+09:00",
          "message": "widget: Optimize out one function call if not needed",
          "modified_files_count": 1,
          "modified_files": [
            "src/lib/elementary/elm_widget.c"
          ],
          "github_commit_url": "https://github.com/Enlightenment/efl/commit/58aa349283d19e58eadb1acb7596d6ca1f23ea8d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "_propagate_event"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves removing an unnecessary function call when it is not required.",
            "The optimization strategy involves removing an unnecessary function call to improve performance.",
            "The optimization strategy involves removing an unnecessary function call when it is not required, thereby reducing overhead.",
            "The optimization strategy involves removing an unnecessary function call when it is not needed.",
            "The optimization strategy involves removing an unnecessary function call when it is not required."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves removing an unnecessary function call when it is not needed.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "incubator-pagespeed-mod",
          "hash": "a2d1cfbb715e76a48587404e8f68f3cf1ab3b673",
          "author": "Shawn Ligocki",
          "date": "2011-01-12T22:22:47+00:00",
          "message": "Implement Bryan's suggestion of avoiding work in Unescape when none needed. Makes the simple parsing benchmark go from taking about 2.35sec to about 1.99sec, so around 15% faster. -morlovich",
          "modified_files_count": 1,
          "modified_files": [
            "src/net/instaweb/htmlparse/html_escape.cc"
          ],
          "github_commit_url": "https://github.com/apache/incubator-pagespeed-mod/commit/a2d1cfbb715e76a48587404e8f68f3cf1ab3b673",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "HtmlEscape::UnescapeHelper"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy avoids unnecessary work in the `Unescape` function by skipping processing when no escaping is needed.",
            "The optimization strategy avoids unnecessary work in the `Unescape` function by skipping processing when no unescaping is needed.",
            "The optimization strategy avoids unnecessary work in the `Unescape` function by skipping processing when no unescaping is needed.",
            "The optimization strategy avoids unnecessary work in the `Unescape` function by skipping processing when no unescaping is needed.",
            "The optimization strategy avoids unnecessary work in the `Unescape` function by skipping processing when no unescaping is needed."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy avoids unnecessary work in the `Unescape` function by skipping processing when no unescaping is needed.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "feelpp",
          "hash": "c73c7699205c04b3351cf3c3fdf646e27b563446",
          "author": "Vincent Chabannes",
          "date": "2022-06-30T08:23:30+02:00",
          "message": "no use lambda expr if nosolve (minor optimization)\n\n- maybe instead of this change, we can store the expr expanded by the lambda",
          "modified_files_count": 1,
          "modified_files": [
            "mor/mor/feel/feelmor/eim.hpp"
          ],
          "github_commit_url": "https://github.com/feelpp/feelpp/commit/c73c7699205c04b3351cf3c3fdf646e27b563446",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "expr"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves avoiding the use of lambda expressions when no solving is required to reduce unnecessary computational overhead.",
            "The optimization strategy involves avoiding the use of lambda expressions when no solving is required, potentially reducing overhead.",
            "The optimization strategy involves avoiding the use of lambda expressions when no solving is required to reduce unnecessary computation overhead.",
            "The optimization strategy involves avoiding the use of lambda expressions when no solving is required, potentially reducing unnecessary computational overhead.",
            "The optimization strategy involves avoiding the use of lambda expressions when no solving is required, potentially reducing unnecessary computational overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves avoiding the use of lambda expressions when no solving is required, potentially reducing unnecessary computational overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "v8",
          "hash": "4f55501e1ffdee48103aa092011e01354299b5fd",
          "author": "Olivier Flückiger",
          "date": "2023-05-30T09:45:34+00:00",
          "message": "[Maglev-OSR] Don't mark for optimization twice\n\nIf the function is already tiered up it should not be marked for\noptimizations.\n\nBug: v8:7700\nChange-Id: I93d9e32a01b6043a4c375129e7714675b5311cca\nReviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4573672\nCommit-Queue: Victor Gomes <victorgomes@chromium.org>\nCommit-Queue: Olivier Flückiger <olivf@chromium.org>\nAuto-Submit: Olivier Flückiger <olivf@chromium.org>\nReviewed-by: Victor Gomes <victorgomes@chromium.org>\nCr-Commit-Position: refs/heads/main@{#87914}",
          "modified_files_count": 1,
          "modified_files": [
            "src/runtime/runtime-compiler.cc"
          ],
          "github_commit_url": "https://github.com/v8/v8/commit/4f55501e1ffdee48103aa092011e01354299b5fd",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "RUNTIME_FUNCTION"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy avoids redundant marking of functions for optimization if they have already been tiered up.",
            "The optimization strategy avoids redundant marking of functions for optimization if they have already been tiered up.",
            "The optimization strategy avoids redundant marking for optimization by checking if the function has already been tiered up.",
            "The optimization strategy avoids redundant marking of functions for optimization if they have already been tiered up.",
            "The optimization strategy avoids redundant marking for optimization by checking if the function has already been tiered up."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy avoids redundant marking of functions for optimization if they have already been tiered up.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "USBProxy-legacy",
          "hash": "7f77c6b527c614336ed87c03133f634cb354f448",
          "author": "Alexander Holler",
          "date": "2015-06-28T12:33:06+02:00",
          "message": "SafeQueue: add small optimization to dequeue",
          "modified_files_count": 1,
          "modified_files": [
            "src/lib/SafeQueue.hpp"
          ],
          "github_commit_url": "https://github.com/usb-tools/USBProxy-legacy/commit/7f77c6b527c614336ed87c03133f634cb354f448",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "dequeue"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reducing the number of lock acquisitions in the dequeue function by checking if the queue is empty before attempting to lock.",
            "The optimization strategy involves reducing unnecessary checks or operations in the dequeue function to improve performance.",
            "The optimization strategy involved reducing overhead in the dequeue function by minimizing unnecessary operations or checks.",
            "The optimization strategy involved reducing unnecessary checks in the dequeue function to improve performance.",
            "The optimization strategy involves reducing unnecessary operations in the dequeue function by directly returning the front element instead of copying it to a temporary variable."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reducing unnecessary checks or operations in the dequeue function to improve performance.",
          "is_generic_optimization_final": true
        }
      ]
    },
    {
      "cluster_id": "343",
      "size": 14,
      "repositories_distribution": {
        "FastDoom": 1,
        "apultra": 1,
        "Kratos": 1,
        "Mesen2": 1,
        "tvheadend": 1,
        "ofxFlowTools": 1,
        "owt-deps-webrtc": 1,
        "thundersvm": 1,
        "cmix": 1,
        "chrono": 1,
        "VAPOR": 1,
        "libwebp": 1,
        "Audio": 1,
        "TFT_ILI9341": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves reducing redundant calculations by precomputing invariant values outside of loops and reusing them within the loops to minimize computational overhead.",
        "code_examples": [
          [
            "// Before\nfor (int i = 0; i < n; i++) {\n    int result = expensiveCalculation(x) * y;\n    process(result);\n}",
            "// After\nint precomputed = expensiveCalculation(x);\nfor (int i = 0; i < n; i++) {\n    int result = precomputed * y;\n    process(result);\n}"
          ],
          [
            "// Before\nfor (int i = 0; i < n; i++) {\n    double value = sqrt(a) + b * c;\n    update(value);\n}",
            "// After\ndouble precomputed = sqrt(a);\nfor (int i = 0; i < n; i++) {\n    double value = precomputed + b * c;\n    update(value);\n}"
          ]
        ],
        "application_conditions": [
          "The code contains a loop where a value is computed repeatedly within the loop body but does not depend on the loop iteration variable.",
          "The value computed within the loop is invariant across all iterations of the loop.",
          "The value computed within the loop is used multiple times within the loop body or in subsequent iterations."
        ]
      },
      "commits": [
        {
          "repository_name": "FastDoom",
          "hash": "6a13257260be056803a20ac267efc9d54bd124cc",
          "author": "viti95",
          "date": "2022-05-03T23:15:59+02:00",
          "message": "Small optimization for VBD I_UpdateBox",
          "modified_files_count": 1,
          "modified_files": [
            "FASTDOOM/i_ibm.c"
          ],
          "github_commit_url": "https://github.com/viti95/FastDoom/commit/6a13257260be056803a20ac267efc9d54bd124cc",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "I_UpdateBox"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the I_UpdateBox function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the `I_UpdateBox` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the `I_UpdateBox` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the `I_UpdateBox` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the `I_UpdateBox` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the `I_UpdateBox` function.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "apultra",
          "hash": "c6f844e656030eda36f3e5855e6cf3a9d8ccdc9e",
          "author": "Emmanuel Marty",
          "date": "2019-11-27T09:48:52+01:00",
          "message": "Small speedup",
          "modified_files_count": 1,
          "modified_files": [
            "src/shrink.c"
          ],
          "github_commit_url": "https://github.com/emmanuel-marty/apultra/commit/c6f844e656030eda36f3e5855e6cf3a9d8ccdc9e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "apultra_optimize_forward"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of iterations in a loop by adjusting the loop condition to avoid unnecessary processing.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
            "The optimization strategy involved reducing the number of memory allocations by reusing previously allocated buffers.",
            "The optimization strategy involved reducing the number of iterations in a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            false,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "Kratos",
          "hash": "d26d6eaae41bb22bd87388a2ef869805ddcf197f",
          "author": "maceli",
          "date": "2016-10-25T09:46:33+00:00",
          "message": "Optimization before moving PeriodicIntersection out of Intersection",
          "modified_files_count": 1,
          "modified_files": [
            "applications/DEM_application/custom_utilities/discrete_particle_configure.h"
          ],
          "github_commit_url": "https://github.com/KratosMultiphysics/Kratos/commit/d26d6eaae41bb22bd87388a2ef869805ddcf197f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "PeriodicSubtract"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of vector operations by directly accessing and modifying vector elements instead of creating temporary vectors.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to minimize repeated computations.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to minimize repeated computations.",
            "The optimization strategy involved refactoring the `PeriodicSubtract` function to reduce computational overhead by simplifying the periodic boundary condition calculations.",
            "The optimization strategy involved modifying the `PeriodicSubtract` function to reduce computational overhead by simplifying the subtraction logic."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            false,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to minimize repeated computations.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "Mesen2",
          "hash": "d5554dbaeb36ab325129c29fda60d2e37a2603cd",
          "author": "Sour",
          "date": "2021-04-28T22:53:27-04:00",
          "message": "NES - Minor performance improvement",
          "modified_files_count": 1,
          "modified_files": [
            "Core/NES/NesPpu.h"
          ],
          "github_commit_url": "https://github.com/SourMesen/Mesen2/commit/d5554dbaeb36ab325129c29fda60d2e37a2603cd",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "NesPpu::Run"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations within the NesPpu::Run function by precomputing values outside of loops.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the NesPpu::Run function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the NesPpu::Run function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations within the NesPpu::Run function by precomputing values outside of loops.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "tvheadend",
          "hash": "f6537ab39f129f5242b77915c06dfacfa324f2a0",
          "author": "Jaroslav Kysela",
          "date": "2015-02-11T15:03:43+01:00",
          "message": "cwc: little optimization in cwc_table_input",
          "modified_files_count": 1,
          "modified_files": [
            "src/descrambler/cwc.c"
          ],
          "github_commit_url": "https://github.com/tvheadend/tvheadend/commit/f6537ab39f129f5242b77915c06dfacfa324f2a0",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "cwc_table_input"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the `cwc_table_input` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop to improve performance.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "ofxFlowTools",
          "hash": "41ca966b1833bfd7b018ac87bf948958512ae6aa",
          "author": "Matthias Oostrik",
          "date": "2018-09-01T16:09:59+02:00",
          "message": "speedup",
          "modified_files_count": 1,
          "modified_files": [
            "src/core/fluid/ftFluidFlow.cpp"
          ],
          "github_commit_url": "https://github.com/moostrik/ofxFlowTools/commit/41ca966b1833bfd7b018ac87bf948958512ae6aa",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Vivo"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loops.",
            "The optimization strategy involved replacing a loop with a more efficient algorithm or data structure to reduce computational overhead.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the Vivo function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops to improve performance.",
            "The optimization strategy involved reducing the number of random iterations in a test section to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            false
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loops.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "owt-deps-webrtc",
          "hash": "5d13d6119391e538eb42168058262407054feb15",
          "author": "Alessio Bazzica",
          "date": "2020-10-21T12:58:05+00:00",
          "message": "RNN VAD: LP residual optimized (part 1)\n\nUse hard-coded constants previously computed at runtime within a loop in\n`ComputeAndPostProcessLpcCoefficients`.\n\nNote that the `RnnVadTest.LpResidualPipelineBitExactness` unit test\nis still passing.\n\nBug: webrtc:10480\nChange-Id: Iaec178c56937449c3fe9af881354d19cc8c47c7d\nReviewed-on: https://webrtc-review.googlesource.com/c/src/+/189961\nCommit-Queue: Alessio Bazzica <alessiob@webrtc.org>\nReviewed-by: Karl Wiberg <kwiberg@webrtc.org>\nCr-Commit-Position: refs/heads/master@{#32462}",
          "modified_files_count": 1,
          "modified_files": [
            "modules/audio_processing/agc2/rnn_vad/lp_residual.cc"
          ],
          "github_commit_url": "https://github.com/open-webrtc-toolkit/owt-deps-webrtc/commit/5d13d6119391e538eb42168058262407054feb15",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing runtime-computed constants within a loop with hard-coded values to reduce computational overhead.",
            "The optimization strategy involved replacing runtime-computed constants with hard-coded values within a loop to reduce computational overhead.",
            "The optimization strategy involved replacing runtime-computed constants within a loop with hard-coded values to reduce computational overhead.",
            "The optimization strategy involved replacing runtime computations with hard-coded constants within a loop in `ComputeAndPostProcessLpcCoefficients` to improve performance.",
            "The optimization strategy involved replacing runtime-computed constants within a loop with hard-coded values to reduce computational overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing runtime-computed constants within a loop with hard-coded values to reduce computational overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "thundersvm",
          "hash": "477986ab065ee032d147fa53fd3284cd8e0290a7",
          "author": "Jiashuai Shi",
          "date": "2018-04-03T16:29:50+08:00",
          "message": "optimize cpu smo a bit",
          "modified_files_count": 1,
          "modified_files": [
            "src/thundersvm/kernel/smo_kernel.cpp"
          ],
          "github_commit_url": "https://github.com/Xtra-Computing/thundersvm/commit/477986ab065ee032d147fa53fd3284cd8e0290a7",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "c_smo_solve_kernel"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant computations by precomputing and reusing values within the kernel function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the SMO kernel function.",
            "The optimization strategy involved reducing redundant computations by precomputing and reusing values within the CPU SMO kernel.",
            "The optimization strategy involved reducing redundant computations by precomputing and reusing values within the kernel function.",
            "The optimization strategy involved reducing redundant computations by precomputing and reusing values within the CPU SMO kernel."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant computations by precomputing and reusing values within the CPU SMO kernel.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "cmix",
          "hash": "5d326560c71d1e41a9a678256dca8f763e5db992",
          "author": "Byron Knoll",
          "date": "2016-04-18T18:45:25-07:00",
          "message": "performance improvement",
          "modified_files_count": 1,
          "modified_files": [
            "src/mixer/byte-mixer.cpp"
          ],
          "github_commit_url": "https://github.com/byronknoll/cmix/commit/5d326560c71d1e41a9a678256dca8f763e5db992",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ByteMixer::ByteUpdate"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop and reusing them within the loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop and reusing it within the loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
          "is_generic_optimization_final": true
        },
        {
          "hash": "d197deb982db4f08280270b000e4753c6a92c110",
          "author": "Alessandro Tasora",
          "date": "2016-10-01T00:27:40+02:00",
          "message": "Optimize the SCM computation loop.",
          "modified_files_count": 1,
          "modified_files": [
            "src/chrono_vehicle/terrain/DeformableTerrain.cpp"
          ],
          "github_commit_url": "https://github.com/projectchrono/chrono/commit/d197deb982db4f08280270b000e4753c6a92c110",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "DeformableSoil::ComputeInternalForces"
          ],
          "is_opt_qwen_plus": "true",
          "is_opt_ds": "false",
          "is_opt_ds_simple": "true",
          "repository_name": "chrono",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant computations within the SCM computation loop by precomputing and reusing values.",
            "The optimization strategy involved restructuring the SCM computation loop to reduce redundant calculations and improve cache efficiency.",
            "The optimization strategy involved reducing redundant computations within the SCM computation loop by precomputing invariant values outside the loop.",
            "The optimization strategy involved improving the efficiency of the SCM computation loop by reducing redundant calculations and leveraging vectorized operations.",
            "The optimization strategy involved reducing redundant computations within the SCM computation loop by precomputing invariant values outside the loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant computations within the SCM computation loop by precomputing invariant values outside the loop.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "VAPOR",
          "hash": "089a6b2439177a08c0e8b2c8a7737cbf99b8a211",
          "author": "Samuel Li",
          "date": "2018-11-26T11:06:45-07:00",
          "message": "performance improvement",
          "modified_files_count": 1,
          "modified_files": [
            "lib/render/RayCaster.cpp"
          ],
          "github_commit_url": "https://github.com/NCAR/VAPOR/commit/089a6b2439177a08c0e8b2c8a7737cbf99b8a211",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "RayCaster::_renderTriangleStrips"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and minimizing function calls within the loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loop iterations.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and minimizing function calls within the loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and minimizing function calls within the loop.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the rendering loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and minimizing function calls within the loop.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "libwebp",
          "hash": "6a8c0eb7188c244f04161ed5b136999c8709230e",
          "author": "Pascal Massimino",
          "date": "2013-10-08T04:13:37-07:00",
          "message": "Merge \"small optimization in segment-smoothing loop\"",
          "modified_files_count": 1,
          "modified_files": [
            "src/enc/analysis.c"
          ],
          "github_commit_url": "https://github.com/webmproject/libwebp/commit/6a8c0eb7188c244f04161ed5b136999c8709230e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "SmoothSegmentMap"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations in the segment-smoothing loop by precomputing values outside the loop.",
            "The optimization strategy involved improving the efficiency of the segment-smoothing loop by reducing redundant computations or memory accesses.",
            "The optimization strategy involved reducing redundant calculations within the segment-smoothing loop by precomputing values outside the loop.",
            "The optimization strategy involved reducing redundant calculations in the segment-smoothing loop by precomputing values outside the loop.",
            "The optimization strategy involved reducing redundant calculations in the segment-smoothing loop by precomputing values outside the loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations in the segment-smoothing loop by precomputing values outside the loop.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "Audio",
          "hash": "9cb37528523e6dfeae450dad2cb01ab67005950f",
          "author": "PaulStoffregen",
          "date": "2017-05-01T02:09:09-07:00",
          "message": "Minor optimization in AudioSynthWaveformPWM",
          "modified_files_count": 1,
          "modified_files": [
            "synth_pwm.cpp"
          ],
          "github_commit_url": "https://github.com/PaulStoffregen/Audio/commit/9cb37528523e6dfeae450dad2cb01ab67005950f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "AudioSynthWaveformPWM::update"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of redundant calculations by precomputing a value outside the loop and reusing it within the loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing and storing frequently used values in local variables.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside the loop in the `AudioSynthWaveformPWM::update` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside the loop and reusing it within the loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing a value outside the loop and reusing it within the loop.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "TFT_ILI9341",
          "hash": "5dedc4c644eef82f73e06c86ca1c566f6874aa90",
          "author": "Bodmer",
          "date": "2016-07-24T01:31:37+01:00",
          "message": "Minor performance tweak",
          "modified_files_count": 1,
          "modified_files": [
            "TFT_ILI9341.cpp"
          ],
          "github_commit_url": "https://github.com/Bodmer/TFT_ILI9341/commit/5dedc4c644eef82f73e06c86ca1c566f6874aa90",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "TFT_ILI9341::setAddrWindow"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant function calls by caching frequently accessed values within the `setAddrWindow` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values used within a loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing values used within a loop.",
            "The optimization strategy involved reducing redundant address window settings by checking if the new coordinates match the current ones before updating.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
          "is_generic_optimization_final": true
        }
      ]
    },
    {
      "cluster_id": "70",
      "size": 13,
      "repositories_distribution": {
        "rocksdb": 6,
        "networkit": 1,
        "ddnet": 1,
        "scipp": 1,
        "dealii": 1,
        "sycl": 1,
        "gpusph": 1,
        "tensorflow": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves **changing function parameters from pass-by-value to pass-by-reference** to eliminate unnecessary copying and reduce overhead.",
        "code_examples": [
          [
            "// Before\nvoid processString(std::string data) {\n  // Use data\n}",
            "// After\nvoid processString(const std::string& data) {\n  // Use data\n}"
          ],
          [
            "// Before\nvoid handleFile(std::string file_data) {\n  // Use file_data\n}",
            "// After\nvoid handleFile(const std::string& file_data) {\n  // Use file_data\n}"
          ]
        ],
        "application_conditions": [
          "The function parameter is a non-primitive type (e.g., a class, struct, or container) passed by value.",
          "The parameter is not modified within the function body, ensuring pass-by-reference does not introduce unintended side effects.",
          "The parameter is not used to return a value from the function, ensuring pass-by-reference does not alter the intended behavior."
        ]
      },
      "commits": [
        {
          "hash": "873f1356a1781e8d638973ea320b722d3240fc5a",
          "author": "Danny Al-Gaaf",
          "date": "2014-09-30T23:30:32+02:00",
          "message": "db_ttl_impl.h: pass func parameter by reference\n\nFix for:\n\n[utilities/ttl/db_ttl_impl.h:209]: (performance) Function parameter\n 'merge_op' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "utilities/ttl/db_ttl_impl.h"
          ],
          "github_commit_url": "https://github.com/facebook/rocksdb/commit/873f1356a1781e8d638973ea320b722d3240fc5a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "TtlMergeOperator"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "rocksdb",
          "optimization_summary": [
            "The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.",
            "The optimization strategy involves passing a function parameter by reference instead of by value to avoid unnecessary copying."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.",
          "is_generic_optimization_final": true
        },
        {
          "hash": "93548ce8f451a701ad0967ba705f04fef80aa11a",
          "author": "Danny Al-Gaaf",
          "date": "2014-09-30T23:30:32+02:00",
          "message": "table/cuckoo_table_reader.cc: pass func parameter by ref\n\nFix for:\n\n[table/cuckoo_table_reader.cc:198]: (performance) Function\n parameter 'file_data' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "table/cuckoo_table_reader.cc"
          ],
          "github_commit_url": "https://github.com/facebook/rocksdb/commit/93548ce8f451a701ad0967ba705f04fef80aa11a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "BucketComparator"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "rocksdb",
          "optimization_summary": [
            "The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involves passing a function parameter by reference instead of by value to avoid unnecessary copying."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
          "is_generic_optimization_final": true
        },
        {
          "hash": "55652043c83c463ce57b7748e01c6d12bb5bf9fe",
          "author": "Danny Al-Gaaf",
          "date": "2014-10-01T10:49:08+02:00",
          "message": "table/cuckoo_table_reader.cc: pass func parameter by reference\n\nFix for:\n\n[table/cuckoo_table_reader.cc:196]: (performance) Function\n parameter 'target' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "table/cuckoo_table_reader.cc"
          ],
          "github_commit_url": "https://github.com/facebook/rocksdb/commit/55652043c83c463ce57b7748e01c6d12bb5bf9fe",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "BucketComparator"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "rocksdb",
          "optimization_summary": [
            "The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
          "is_generic_optimization_final": true
        },
        {
          "hash": "68ca534169a4f9e1930f6511109e973b43cf5998",
          "author": "Danny Al-Gaaf",
          "date": "2014-09-30T23:30:31+02:00",
          "message": "corruption_test.cc: pass parameter by reference\n\nFix for:\n\n[db/corruption_test.cc:134]: (performance) Function parameter\n 'fname' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "db/corruption_test.cc"
          ],
          "github_commit_url": "https://github.com/facebook/rocksdb/commit/68ca534169a4f9e1930f6511109e973b43cf5998",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "CorruptFile"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "rocksdb",
          "optimization_summary": [
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
          "is_generic_optimization_final": true
        },
        {
          "hash": "53910ddb152fbcba95a3e04b058a997c40f654ae",
          "author": "Danny Al-Gaaf",
          "date": "2014-09-30T23:30:31+02:00",
          "message": "db_test.cc: pass parameter by reference\n\nFix for:\n\n[db/db_test.cc:6141]: (performance) Function parameter\n 'key' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "db/db_test.cc"
          ],
          "github_commit_url": "https://github.com/facebook/rocksdb/commit/53910ddb152fbcba95a3e04b058a997c40f654ae",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "convertKey"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "rocksdb",
          "optimization_summary": [
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.",
            "The optimization strategy used was passing a function parameter by reference instead of by value to avoid unnecessary copying."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
          "is_generic_optimization_final": true
        },
        {
          "hash": "063471bf7613544496a4d4b5a1e1ba4a7aa605cf",
          "author": "Danny Al-Gaaf",
          "date": "2014-09-30T23:30:32+02:00",
          "message": "table/table_test.cc: pass func parameter by reference\n\nFix for:\n\n[table/table_test.cc:1218]: (performance) Function parameter\n 'prefix' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "table/table_test.cc"
          ],
          "github_commit_url": "https://github.com/facebook/rocksdb/commit/063471bf7613544496a4d4b5a1e1ba4a7aa605cf",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "AddInternalKey"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "rocksdb",
          "optimization_summary": [
            "The optimization strategy involved passing the function parameter 'prefix' by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "networkit",
          "hash": "00a76dc0a74105394472cfd293c3eaf6352f3050",
          "author": "Eugenio Angriman",
          "date": "2020-12-16T15:06:47+01:00",
          "message": "Clang-tidy fix: performance-unnecessary-value-param",
          "modified_files_count": 1,
          "modified_files": [
            "include/networkit/structures/Partition.hpp"
          ],
          "github_commit_url": "https://github.com/networkit/networkit/commit/00a76dc0a74105394472cfd293c3eaf6352f3050",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "setName"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing a function parameter from pass-by-value to pass-by-reference to avoid unnecessary copying.",
            "The optimization strategy involved changing a function parameter from pass-by-value to pass-by-reference to avoid unnecessary copying.",
            "The optimization strategy involved changing a function parameter from pass-by-value to pass-by-reference to avoid unnecessary copying.",
            "The optimization strategy involved changing a function parameter from pass-by-value to pass-by-reference to avoid unnecessary copying.",
            "The optimization strategy involved changing a function parameter from pass-by-value to pass-by-reference to avoid unnecessary copying."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing a function parameter from pass-by-value to pass-by-reference to avoid unnecessary copying.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "ddnet",
          "hash": "bf686342df77e30a08b9a0c7cf8c3277de325fae",
          "author": "Robert Müller",
          "date": "2022-07-10T21:42:57+02:00",
          "message": "Fix performance-unnecessary-value-param",
          "modified_files_count": 1,
          "modified_files": [
            "src/test/score.cpp"
          ],
          "github_commit_url": "https://github.com/ddnet/ddnet/commit/bf686342df77e30a08b9a0c7cf8c3277de325fae",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved fixing unnecessary value parameters to avoid copying overhead by using references instead.",
            "The optimization strategy involved fixing unnecessary value parameters by changing them to reference parameters to avoid copying overhead.",
            "The optimization strategy involved fixing unnecessary value parameters by changing them to reference parameters to avoid copying overhead.",
            "The optimization strategy involved fixing unnecessary value parameters by changing them to const references to avoid copying overhead.",
            "The optimization strategy involved removing unnecessary value parameters to avoid copying objects and improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved fixing unnecessary value parameters by changing them to reference parameters to avoid copying overhead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "scipp",
          "hash": "f83f5c6701925cbd8b33022780217264884e1953",
          "author": "Jan-Lukas Wynen",
          "date": "2021-11-12T16:01:56+01:00",
          "message": "Avoid copy of variable",
          "modified_files_count": 1,
          "modified_files": [
            "lib/python/bind_slice_methods.h"
          ],
          "github_commit_url": "https://github.com/scipp/scipp/commit/f83f5c6701925cbd8b33022780217264884e1953",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "get_slice_by_value"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy avoids copying a variable by using a reference or move semantics to reduce overhead.",
            "The optimization strategy avoids copying a variable by using a reference instead.",
            "The optimization strategy used was avoiding unnecessary copying of a variable to reduce overhead.",
            "The optimization strategy avoids copying a variable by using a reference or direct access instead.",
            "The optimization strategy avoids copying a variable by using a reference instead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy avoids copying a variable by using a reference instead.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "dealii",
          "hash": "723f41aa2dd617dad4529463225c400cd2075bce",
          "author": "Daniel Arndt",
          "date": "2019-01-29T11:01:49+01:00",
          "message": "performance-unnecessary-value-param",
          "modified_files_count": 1,
          "modified_files": [
            "source/base/hdf5.cc"
          ],
          "github_commit_url": "https://github.com/dealii/dealii/commit/723f41aa2dd617dad4529463225c400cd2075bce",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "HDF5Object::set_attribute"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing a function parameter from pass-by-value to pass-by-reference to avoid unnecessary copying of the parameter.",
            "The optimization strategy involved changing a function parameter from pass-by-value to pass-by-reference to avoid unnecessary copying.",
            "The optimization strategy involved changing a function parameter from being passed by value to being passed by reference to avoid unnecessary copying.",
            "The optimization strategy involved changing a function parameter from pass-by-value to pass-by-reference to avoid unnecessary copying of the parameter.",
            "The optimization strategy involved removing unnecessary value parameters to avoid copy overhead in the function `HDF5Object::set_attribute`."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing a function parameter from pass-by-value to pass-by-reference to avoid unnecessary copying of the parameter.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "sycl",
          "hash": "da3b8200e59987fc21bfb0741f05af4cba8b9bd3",
          "author": "Mehdi Amini",
          "date": "2022-05-26T21:29:58+00:00",
          "message": "Apply clang-tidy fixes for performance-unnecessary-value-param in Bufferize.cpp (NFC)",
          "modified_files_count": 1,
          "modified_files": [
            "mlir/lib/Dialect/Bufferization/Transforms/Bufferize.cpp"
          ],
          "github_commit_url": "https://github.com/triSYCL/sycl/commit/da3b8200e59987fc21bfb0741f05af4cba8b9bd3",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "parseLayoutMapOption"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based parameters to reference-based parameters to avoid unnecessary copying.",
            "The optimization strategy involved changing value-based parameters to reference-based parameters to avoid unnecessary copying.",
            "The optimization strategy involved changing value-based parameters to reference-based parameters to avoid unnecessary copying.",
            "The optimization strategy involved changing value-based parameters to reference-based parameters to avoid unnecessary copying.",
            "The optimization strategy involved changing value-based parameters to reference-based parameters to avoid unnecessary copying."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based parameters to reference-based parameters to avoid unnecessary copying.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "gpusph",
          "hash": "e75308c5b3e040151efeb7a10b871ac0680c980c",
          "author": "Giuseppe Bilotta",
          "date": "2018-12-16T15:48:08+01:00",
          "message": "empty structure: pass arguments by reference\n\nThis prevents the creation (and destruction) of spurious copies of\ncomplex types; aside from the potential performance issues, this is\nimportant to allow passing BufferLists to conditional structures without\nthem getting copied and destroyed (destruction that might invalidate\nfuture uses of the original buffer list!).",
          "modified_files_count": 1,
          "modified_files": [
            "src/cond_params.h"
          ],
          "github_commit_url": "https://github.com/GPUSPH/gpusph/commit/e75308c5b3e040151efeb7a10b871ac0680c980c",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves passing arguments by reference to avoid the creation and destruction of unnecessary copies of complex types.",
            "The optimization strategy involves passing arguments by reference to avoid the creation and destruction of unnecessary copies of complex types.",
            "The optimization strategy involves passing arguments by reference to avoid the creation and destruction of unnecessary copies of complex types.",
            "The optimization strategy involves passing arguments by reference to avoid the creation and destruction of unnecessary copies of complex types.",
            "The optimization strategy involves passing arguments by reference to avoid the creation and destruction of unnecessary copies of complex types."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves passing arguments by reference to avoid the creation and destruction of unnecessary copies of complex types.",
          "is_generic_optimization_final": true
        },
        {
          "repository_name": "tensorflow",
          "hash": "2b94b444d53cfa6875f7874197cbc584a06d7a30",
          "author": "Derek Murray",
          "date": "2018-04-11T16:45:42-07:00",
          "message": "Move callback into bound function to avoid copying.\n\nPiperOrigin-RevId: 192530231",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/core/common_runtime/rendezvous_mgr.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/2b94b444d53cfa6875f7874197cbc584a06d7a30",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "IntraProcessRendezvous::RecvAsync"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved moving a callback into a bound function to avoid unnecessary copying.",
            "The optimization strategy involves moving a callback into a bound function to avoid unnecessary copying.",
            "The optimization strategy involves moving a callback into a bound function to avoid unnecessary copying.",
            "The optimization strategy involved moving a callback into a bound function to avoid unnecessary copying.",
            "The optimization strategy involved moving a callback into a bound function to avoid unnecessary copying."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved moving a callback into a bound function to avoid unnecessary copying.",
          "is_generic_optimization_final": true
        }
      ]
    }
  ]
}