{
  "metadata": {
    "min_cluster_size": 16,
    "total_clusters": 3,
    "clusters_with_summaries": 3,
    "missing_summaries_count": 0
  },
  "combined_clusters": [
    {
      "cluster_id": "199",
      "size": 24,
      "repositories_distribution": {
        "ssde": 1,
        "tensorflow": 6,
        "osgearth": 1,
        "NPLRuntime": 1,
        "MyScaleDB": 1,
        "oneDAL": 1,
        "BsodSurvivor": 1,
        "graaljs": 1,
        "Seamly2D": 1,
        "bg3se": 1,
        "xbmc": 1,
        "spades": 2,
        "kate": 1,
        "synfig": 1,
        "NBlood": 1,
        "operon": 1,
        "cmssw": 1,
        "patchelf": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves reducing copy overhead by transitioning from value-based loop iteration to reference-based iteration, thereby avoiding unnecessary object duplication and improving performance.",
        "code_examples": [
          [
            "// Before\nfor (unsigned i = 0; i < mii->getNumOperands(); ++i) {\n  const MachineOperand& mop = mii->getOperand(i);\n  if (mop.isRegister() && mop.getReg() &&\n      MRegisterInfo::isVirtualRegister(mop.getReg())) {\n    // replace register with representative register\n  }\n}",
            "// After\nfor (unsigned i = 0, e = mii->getNumOperands(); i != e; ++i) {\n  const MachineOperand &mop = mii->getOperand(i);\n  if (mop.isRegister() && mop.getReg() &&\n      MRegisterInfo::isVirtualRegister(mop.getReg())) {\n    // replace register with representative register\n  }\n}"
          ],
          [
            "// Before\nfor (auto nested_transferable : nested_transferables) {\n  if (std::find(host_objects_.begin(),\n                host_objects_.end(),\n                nested_transferable) == host_objects_.end()) {\n    // process nested transferable\n  }\n}",
            "// After\nfor (auto& nested_transferable : nested_transferables) {\n  if (std::find(host_objects_.begin(),\n                host_objects_.end(),\n                nested_transferable) == host_objects_.end()) {\n    // process nested transferable\n  }\n}"
          ]
        ],
        "application_conditions": [
          "The code must contain a loop that iterates over a container of objects or values.",
          "The loop must use a value-based iteration (e.g., `for (auto x : container)`) instead of a reference-based iteration (e.g., `for (auto& x : container)`).",
          "The objects or values being iterated over must be non-trivial types (e.g., not primitive types like `int` or `float`)."
        ]
      },
      "commits": [
        {
          "repository_name": "Seamly2D",
          "hash": "39a95d7e95a61913916fa1d50960985018a0f6fd",
          "author": "Roman Telezhynskyi",
          "date": "2017-08-04T21:25:59+03:00",
          "message": "Performance optimization.",
          "modified_files_count": 1,
          "modified_files": [
            "src/libs/vpatterndb/vcontainer.cpp"
          ],
          "github_commit_url": "https://github.com/FashionFreedom/Seamly2D/commit/39a95d7e95a61913916fa1d50960985018a0f6fd",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The commit replaces a loop that iterates over a container using indices with a range-based for loop to reduce overhead and improve readability.",
            "The optimization strategy involved replacing a loop that used value-based iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9313868880271912
        },
        {
          "repository_name": "tensorflow",
          "hash": "7480941f2d6d46dd1c7ce0ebf9f7e311736e928d",
          "author": "Mehdi Amini",
          "date": "2021-12-29T00:15:57-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in reshape_simplifier.cc (NFC)\n\nPiperOrigin-RevId: 418737195\nChange-Id: I80c6acdac10978cb59d7030c94c7cb650522250d",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Transforms/reshape_simplifier.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/7480941f2d6d46dd1c7ce0ebf9f7e311736e928d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `reshape_simplifier.cc` file.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9313868880271912
        },
        {
          "repository_name": "ssde",
          "hash": "7cd12d8543e899ad4993ade30a2fdcb6add86a08",
          "author": "Valentin Radu",
          "date": "2021-08-28T01:30:32+03:00",
          "message": "Small performance improvement",
          "modified_files_count": 1,
          "modified_files": [
            "common.h"
          ],
          "github_commit_url": "https://github.com/valinet/ssde/commit/7cd12d8543e899ad4993ade30a2fdcb6add86a08",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "HandlePolicyBinary"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing the number of conditional checks by consolidating redundant conditions in the `HandlePolicyBinary` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9313867688179016
        },
        {
          "repository_name": "tensorflow",
          "hash": "982b79df43b05910cca9fa19777072a02c2529ff",
          "author": "Mehdi Amini",
          "date": "2021-12-28T19:13:03-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in hlo_legalize_to_memref.cc (NFC)\n\nPiperOrigin-RevId: 418709823\nChange-Id: I151f9ab6dad865d7921a5cbda4d2b85c6ff293d7",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/hlo_legalize_to_memref.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/982b79df43b05910cca9fa19777072a02c2529ff",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "InsertDynamicMemrefCastOp"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `InsertDynamicMemrefCastOp` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9313867688179016
        },
        {
          "repository_name": "osgearth",
          "hash": "4e2019530f30bc4e1f850f307efddb1d9337cf7a",
          "author": "Jason Beverage",
          "date": "2017-10-03T12:48:15-04:00",
          "message": "Applying reference optimization to offset codepath",
          "modified_files_count": 1,
          "modified_files": [
            "src/osgEarth/ElevationLayer.cpp"
          ],
          "github_commit_url": "https://github.com/gwaldron/osgearth/commit/4e2019530f30bc4e1f850f307efddb1d9337cf7a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ElevationLayerVector::populateHeightFieldAndNormalMap"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in the offset codepath.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9313867688179016
        },
        {
          "repository_name": "NPLRuntime",
          "hash": "8a4073ca0890a53aeb571781657e8a57ee50a7ee",
          "author": "kkvskkkk",
          "date": "2017-08-02T16:10:46+08:00",
          "message": "optimize performance",
          "modified_files_count": 1,
          "modified_files": [
            "Client/trunk/ParaEngineClient/NPL/NPLHelper.cpp"
          ],
          "github_commit_url": "https://github.com/LiXizhi/NPLRuntime/commit/8a4073ca0890a53aeb571781657e8a57ee50a7ee",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "NPLHelper::SerializeToSCode"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing a string concatenation operation with a more efficient method to reduce overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing unnecessary string copying by using `std::string_view` instead of `std::string` in the `SerializeToSCode` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9313867688179016
        },
        {
          "repository_name": "tensorflow",
          "hash": "5e0db672b677752b19ab2c7b52d3a32b7e3ae8b7",
          "author": "Mehdi Amini",
          "date": "2021-12-28T23:32:24-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in test_infer_shaped_type_pass.cc (NFC)\n\nPiperOrigin-RevId: 418732883\nChange-Id: Ic34888d9edd04c28367ac8e6b6d4557980c7f023",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/test_infer_shaped_type_pass.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/5e0db672b677752b19ab2c7b52d3a32b7e3ae8b7",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `matchAndRewrite` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `matchAndRewrite` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9313867688179016
        },
        {
          "repository_name": "tensorflow",
          "hash": "064772d6f1bc3048dd3c8dd8da5c2a27179b972f",
          "author": "Mehdi Amini",
          "date": "2021-12-28T22:26:49-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in optimize_mhlo.cc (NFC)\n\nPiperOrigin-RevId: 418727791\nChange-Id: I0eb619996990f46f4b0150257909974772220e5e",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/optimize_mhlo.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/064772d6f1bc3048dd3c8dd8da5c2a27179b972f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `matchAndRewrite` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in the `matchAndRewrite` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9313867688179016
        },
        {
          "repository_name": "spades",
          "hash": "5567aefdacf30ab65952b2ec5b82bced5b2b7ed0",
          "author": "Anton",
          "date": "2012-05-03T19:23:39+04:00",
          "message": "mapper speed improve",
          "modified_files_count": 1,
          "modified_files": [
            "assembler/src/debruijn/utils.hpp"
          ],
          "github_commit_url": "https://github.com/ablab/spades/commit/5567aefdacf30ab65952b2ec5b82bced5b2b7ed0",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved improving the speed of the mapper by enhancing the efficiency of the DeBruijn graph utility functions.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing a value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            false,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9313867688179016
        },
        {
          "repository_name": "kate",
          "hash": "a7e8e22c3b6de7f6c9ab8751f838e440300aa2f7",
          "author": "Albert Astals Cid",
          "date": "2008-02-08T21:48:10+00:00",
          "message": "microoptimization\nconst & for foreach\n\nsvn path=/trunk/KDE/kdesdk/kate/; revision=772481",
          "modified_files_count": 1,
          "modified_files": [
            "kate/app/katemain.cpp"
          ],
          "github_commit_url": "https://github.com/KDE/kate/commit/a7e8e22c3b6de7f6c9ab8751f838e440300aa2f7",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "foreach"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy used was changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration using `const &` in a `foreach` loop to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration using `const &` in a `foreach` loop to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9313867688179016
        },
        {
          "repository_name": "spades",
          "hash": "8f9fafaa74162bc48ea3c6c4b2e2ff5ff01f0141",
          "author": "Anton Korobeynikov",
          "date": "2019-01-21T17:23:29+03:00",
          "message": "Speedup",
          "modified_files_count": 1,
          "modified_files": [
            "assembler/src/common/assembly_graph/core/graph_core.hpp"
          ],
          "github_commit_url": "https://github.com/ablab/spades/commit/8f9fafaa74162bc48ea3c6c4b2e2ff5ff01f0141",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9313867688179016
        },
        {
          "repository_name": "operon",
          "hash": "5fc734781021cf467482af25378195389a9f97df",
          "author": "Bogdan Burlacu",
          "date": "2019-08-05T17:58:59+02:00",
          "message": "Small performance improvement",
          "modified_files_count": 1,
          "modified_files": [
            "include/operon/core/eval.hpp"
          ],
          "github_commit_url": "https://github.com/heal-research/operon/commit/5fc734781021cf467482af25378195389a9f97df",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently used function.",
            "The optimization strategy involved reducing the number of temporary object creations by directly passing values instead of creating intermediate objects.",
            "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9313867688179016
        },
        {
          "repository_name": "tensorflow",
          "hash": "310d1654a43bd8091c006b66a8933d24082a372f",
          "author": "Mehdi Amini",
          "date": "2021-12-28T22:32:14-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in rank_specialization.cc (NFC)\n\nPiperOrigin-RevId: 418728399\nChange-Id: I5c32d13934161c4e9af44bac47cfc182b7e4c44d",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/rank_specialization.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/310d1654a43bd8091c006b66a8933d24082a372f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `matchAndRewrite` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9313867688179016
        },
        {
          "repository_name": "tensorflow",
          "hash": "d3881dcc330f728aea4900fa058fbc95b686a923",
          "author": "Mehdi Amini",
          "date": "2021-12-28T20:28:46-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in merge_assuming_ops.cc (NFC)\n\nPiperOrigin-RevId: 418717143\nChange-Id: I951af3d09387ccdacc90ff7bf72fe26fc4eeccb1",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/merge_assuming_ops.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/d3881dcc330f728aea4900fa058fbc95b686a923",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "MoveIntoAssumingOpMatchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9313867688179016
        },
        {
          "repository_name": "xbmc",
          "hash": "8196f918be28db1bb2d8ebac511357e54cefadba",
          "author": "Rechi",
          "date": "2022-03-01T23:31:00+00:00",
          "message": "[clang-tidy] performance-for-range-copy",
          "modified_files_count": 1,
          "modified_files": [
            "xbmc/settings/SubtitlesSettings.cpp"
          ],
          "github_commit_url": "https://github.com/xbmc/xbmc/commit/8196f918be28db1bb2d8ebac511357e54cefadba",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "CSubtitlesSettings::SettingOptionsSubtitleFontsFiller"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based range iteration with reference-based iteration to avoid unnecessary object copying.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9197140336036682
        },
        {
          "repository_name": "synfig",
          "hash": "e194811d4fe7762a747232616cd5c18b182dd12d",
          "author": "Rodolfo Ribeiro Gomes",
          "date": "2020-06-08T19:51:11+07:00",
          "message": "minor efficiency improvement",
          "modified_files_count": 1,
          "modified_files": [
            "synfig-core/src/synfig/valuenodes/valuenode_bone.cpp"
          ],
          "github_commit_url": "https://github.com/synfig/synfig/commit/e194811d4fe7762a747232616cd5c18b182dd12d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ValueNode_Bone::get_bones_referenced_by"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing the loop iteration from using a value-based iterator to a reference-based iterator to reduce copy overhead.",
            "The optimization strategy involved changing the loop iteration from value-based to reference-based to reduce copy overhead.",
            "The optimization strategy involved changing the loop iteration from using a value-based approach to a reference-based approach to reduce copy overhead.",
            "The optimization strategy involved reducing the number of redundant calls to `get_bone()` by caching its result in a local variable within the `ValueNode_Bone::get_bones_referenced_by` function.",
            "The optimization strategy involved changing the loop iteration to use references instead of values to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing the loop iteration from value-based to reference-based to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9138817191123962
        },
        {
          "repository_name": "patchelf",
          "hash": "e17744d9660e2a56c47392c986dfb0403387393e",
          "author": "Rosen Penev",
          "date": "2021-02-14T17:47:17-08:00",
          "message": "clang-tidy: avoid copying loop variable\n\nFound with performance-for-range-copy\n\nSigned-off-by: Rosen Penev <rosenp@gmail.com>",
          "modified_files_count": 1,
          "modified_files": [
            "src/patchelf.cc"
          ],
          "github_commit_url": "https://github.com/NixOS/patchelf/commit/e17744d9660e2a56c47392c986dfb0403387393e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "patchElf"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy avoids copying the loop variable by using a reference-based iteration instead of value-based iteration in a loop.",
            "The optimization strategy avoids copying the loop variable by using a reference-based iteration in a range-based for loop.",
            "The optimization strategy involved avoiding copying the loop variable by using a reference-based iteration instead of value-based iteration to reduce overhead.",
            "The optimization strategy involved avoiding copying the loop variable by using a reference-based iteration instead of value-based iteration to reduce overhead.",
            "The optimization strategy involved avoiding copying the loop variable in a range-based for loop by using a reference instead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved avoiding copying the loop variable by using a reference-based iteration instead of value-based iteration to reduce overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8354085683822632
        },
        {
          "repository_name": "cmssw",
          "hash": "4c69a0a36dc8816a4d58c6a34d687308ffcff2fe",
          "author": "Matti Kortelainen",
          "date": "2017-02-02T09:41:57+01:00",
          "message": "Small performance optimization",
          "modified_files_count": 1,
          "modified_files": [
            "SimGeneral/TrackingAnalysis/plugins/TrackingTruthAccumulator.cc"
          ],
          "github_commit_url": "https://github.com/cms-sw/cmssw/commit/4c69a0a36dc8816a4d58c6a34d687308ffcff2fe",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "TrackingParticleFactory::createTrackingParticle"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing the overhead of object creation by reusing existing objects instead of creating new ones.",
            "The optimization strategy involved reducing the overhead of copying objects by changing value-based loop iteration to reference-based iteration.",
            "The optimization strategy involved reducing the overhead of copying objects by changing value-based loop iteration to reference-based iteration.",
            "The optimization strategy involved reducing the overhead of copying objects by changing value-based loop iteration to reference-based iteration."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the overhead of copying objects by changing value-based loop iteration to reference-based iteration.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8276214599609375
        },
        {
          "repository_name": "bg3se",
          "hash": "6a8f8a29ad094d6ac14775c888494013dc32a002",
          "author": "Norbyte",
          "date": "2024-08-14T23:25:32+02:00",
          "message": "Fix minor performance gotcha when pushing values",
          "modified_files_count": 1,
          "modified_files": [
            "BG3Extender/Lua/Shared/Proxies/LuaPropertyMapHelpers.h"
          ],
          "github_commit_url": "https://github.com/Norbyte/bg3se/commit/6a8f8a29ad094d6ac14775c888494013dc32a002",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "GenericGetOffsetProperty"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing unnecessary value copies when pushing values by using reference-based iteration instead of value-based iteration.",
            "The optimization strategy involved reducing unnecessary value copying by using reference-based iteration when pushing values.",
            "The optimization strategy involved reducing unnecessary value copies by using reference-based iteration when pushing values.",
            "The optimization strategy involved reducing unnecessary value copies by using reference-based iteration when pushing values in the `GenericGetOffsetProperty` function.",
            "The optimization strategy involved reducing unnecessary value copying by using reference-based iteration when pushing values in the `GenericGetOffsetProperty` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing unnecessary value copies by using reference-based iteration when pushing values.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7986862063407898
        },
        {
          "repository_name": "MyScaleDB",
          "hash": "c41dedc9223d1c2cd049949a298880ff9557f741",
          "author": "Amos Bird",
          "date": "2021-03-02T11:55:58+08:00",
          "message": "optimize for ColumnLowCardinality",
          "modified_files_count": 1,
          "modified_files": [
            "src/Columns/ColumnLowCardinality.cpp"
          ],
          "github_commit_url": "https://github.com/myscale/MyScaleDB/commit/c41dedc9223d1c2cd049949a298880ff9557f741",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the overhead of copying values by changing value-based loop iteration to reference-based iteration in the ColumnLowCardinality implementation.",
            "The optimization strategy involved reducing the overhead of type checks and conversions in the ColumnLowCardinality implementation by streamlining the handling of low-cardinality data.",
            "The optimization strategy involved reducing the overhead of copying values by changing value-based loop iteration to reference-based iteration in ColumnLowCardinality.",
            "The optimization strategy involved improving the performance of the `ColumnLowCardinality` class by reducing unnecessary memory allocations and improving data access patterns.",
            "The optimization strategy involved reducing the overhead of handling low-cardinality columns by improving the efficiency of data access and storage mechanisms."
          ],
          "is_generic_optimization": [
            true,
            false,
            true,
            true,
            false
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the overhead of copying values by changing value-based loop iteration to reference-based iteration in the ColumnLowCardinality implementation.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7769580483436584
        },
        {
          "repository_name": "NBlood",
          "hash": "b9e67132ccdaaec6ffcc915296f22e52f86841c9",
          "author": "Richard Gobeille",
          "date": "2022-04-12T17:45:45-07:00",
          "message": "engine: optimize 8cf7e9fbb0a49d9bdc3a3c8d80a9f63df7e4daa0\n\nAnd yes, I check the compiler output using godbolt.org :p",
          "modified_files_count": 1,
          "modified_files": [
            "source/build/src/engine.cpp"
          ],
          "github_commit_url": "https://github.com/NBlood/NBlood/commit/b9e67132ccdaaec6ffcc915296f22e52f86841c9",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "classicDrawSprite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing redundant calculations and improving cache efficiency by precomputing values and reordering memory accesses in the `classicDrawSprite` function.",
            "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration in the `classicDrawSprite` function.",
            "The optimization strategy involved reducing redundant calculations and improving memory access patterns in the `classicDrawSprite` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration in the `classicDrawSprite` function.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7581833600997925
        },
        {
          "repository_name": "graaljs",
          "hash": "d2dce597295aefee9cef8ab36c81e1174227fe32",
          "author": "Tobias Nießen",
          "date": "2022-08-22T19:37:28-04:00",
          "message": "src: avoid copying BaseObjectPtrs in loop\n\nWhile copying BaseObjectPtrs is cheap, it is not a no-op, so it is best\nto iterate over references to BaseObjectPtrs only.\n\nPR-URL: https://github.com/nodejs/node/pull/44270\nReviewed-By: Richard Lau <rlau@redhat.com>\nReviewed-By: Darshan Sen <raisinten@gmail.com>\nReviewed-By: Luigi Pinca <luigipinca@gmail.com>",
          "modified_files_count": 1,
          "modified_files": [
            "src/node_messaging.cc"
          ],
          "github_commit_url": "https://github.com/oracle/graaljs/commit/d2dce597295aefee9cef8ab36c81e1174227fe32",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "AddNestedHostObjects"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves changing value-based loop iteration to reference-based iteration to reduce copy overhead of BaseObjectPtrs.",
            "The optimization strategy involves changing value-based loop iteration to reference-based iteration to reduce copy overhead of BaseObjectPtrs.",
            "The optimization strategy involves changing value-based loop iteration to reference-based iteration to reduce copy overhead of BaseObjectPtrs.",
            "The optimization strategy involves changing value-based loop iteration to reference-based iteration to reduce copy overhead for BaseObjectPtrs.",
            "The optimization strategy involves changing value-based loop iteration to reference-based iteration to avoid copying BaseObjectPtrs."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves changing value-based loop iteration to reference-based iteration to reduce copy overhead of BaseObjectPtrs.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7302769422531128
        },
        {
          "repository_name": "oneDAL",
          "hash": "38a60484fcf685015edd31145b705f49410da148",
          "author": "dmitrypa",
          "date": "2020-03-05T16:26:52+03:00",
          "message": "fix performance gap",
          "modified_files_count": 1,
          "modified_files": [
            "include/data_management/data/soa_numeric_table.h"
          ],
          "github_commit_url": "https://github.com/uxlfoundation/oneDAL/commit/38a60484fcf685015edd31145b705f49410da148",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the overhead of accessing elements in a Structure of Arrays (SoA) numeric table by minimizing unnecessary memory access and improving data locality.",
            "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration in the SOA numeric table implementation.",
            "The optimization strategy involved reducing the overhead of accessing elements in a structure of arrays (SoA) numeric table by minimizing unnecessary memory accesses and improving data locality.",
            "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration in the SOA numeric table implementation.",
            "The optimization strategy involved reducing overhead by changing value-based loop iteration to reference-based iteration in the SOA numeric table implementation."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration in the SOA numeric table implementation.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7276039719581604
        },
        {
          "repository_name": "BsodSurvivor",
          "hash": "774785a79d14c95d467dd0224761723d51b5f9da",
          "author": "Chris Lattner",
          "date": "2006-09-03T07:53:50+00:00",
          "message": "minor speedup\n\nllvm-svn: 30065",
          "modified_files_count": 1,
          "modified_files": [
            "llvm/lib/CodeGen/LiveIntervalAnalysis.cpp"
          ],
          "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/774785a79d14c95d467dd0224761723d51b5f9da",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the overhead of copying values by changing value-based loop iteration to reference-based iteration in the LiveIntervalAnalysis.cpp file.",
            "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values within a loop.",
            "The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values within the LiveIntervalAnalysis.cpp file.",
            "The optimization strategy involved reducing the overhead of copying values by changing value-based loop iteration to reference-based iteration in the LiveIntervalAnalysis.cpp file.",
            "The commit likely implements a minor speedup by optimizing loop iteration or condition checks in the LiveIntervalAnalysis.cpp file."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the overhead of copying values by changing value-based loop iteration to reference-based iteration in the LiveIntervalAnalysis.cpp file.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7186435461044312
        }
      ]
    },
    {
      "cluster_id": "83",
      "size": 17,
      "repositories_distribution": {
        "v8": 1,
        "sycl": 1,
        "BsodSurvivor": 2,
        "kmsan": 1,
        "veil": 1,
        "tensorflow": 1,
        "solidity": 1,
        "mangos-wotlk": 1,
        "pcem": 1,
        "mbedtls": 1,
        "fastclick": 1,
        "leechcraft": 1,
        "llvm-leg": 1,
        "Floorp": 1,
        "server": 1,
        "dolphin": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves **reordering operations or checks to prioritize faster or more critical conditions earlier in the execution flow, thereby reducing unnecessary processing overhead**.",
        "code_examples": [
          [
            "// Before\nif (ip_p == IP_PROTO_TCP && !m->free_tracked()) {\n#if IPRW_SPINLOCKS\n_spinlock.acquire();\n#endif\nclick_tcp *tcph = reinterpret_cast<click_tcp *>(p->transport_header());\nif ((tcph->th_flags & (TH_FIN | TH_RST)) && m->session_over()) {\n#if 1\n_tcp_done = m->add_to_free_tracked(_tcp_done);\n#endif\n}\n#if IPRW_SPINLOCKS\n_spinlock.release();\n#endif\n}\noutput(m->output()).push(p);",
            "// After\nif (ip_p == IP_PROTO_TCP && !m->free_tracked()) {\nclick_tcp *tcph = reinterpret_cast<click_tcp *>(p->transport_header());\nif ((tcph->th_flags & (TH_FIN | TH_RST)) && m->session_over()) {\n#if 1\n_tcp_done = m->add_to_free_tracked(_tcp_done);\n#endif\n}\n}\n#if IPRW_SPINLOCKS\n_spinlock.release();\n#endif\noutput(m->output()).push(p);"
          ],
          [
            "// Before\nparmVarDecl(hasType(hasCanonicalType(allOf(matchers::isExpensiveToCopy(), unless(referenceType()))))), decl().bind(\"param\"));",
            "// After\nparmVarDecl(hasType(hasCanonicalType(allOf(unless(referenceType()), matchers::isExpensiveToCopy()))), decl().bind(\"param\"));"
          ]
        ],
        "application_conditions": [
          "The code contains conditional checks or operations that can be reordered without altering the program's correctness.",
          "The code includes operations with varying computational costs, where more expensive operations are executed later in the flow.",
          "The code has a sequence of operations where earlier checks can prevent the execution of unnecessary or redundant steps."
        ]
      },
      "commits": [
        {
          "repository_name": "pcem",
          "hash": "cd9e228b6d237e46d130f6d346db72c5ec816ca6",
          "author": "SarahW",
          "date": "2019-03-16T15:46:48+00:00",
          "message": "Move CODEBLOCK_IN_DIRTY_LIST check to after checking if block needs to be flushed. Improves performance in Eradicator.",
          "modified_files_count": 1,
          "modified_files": [
            "src/386_dynarec.c"
          ],
          "github_commit_url": "https://github.com/sarah-walker-pcem/pcem/commit/cd9e228b6d237e46d130f6d346db72c5ec816ca6",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "exec386_dynarec"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reordering conditional checks to avoid unnecessary evaluations, improving performance by checking if a block needs to be flushed before verifying its presence in a dirty list.",
            "The optimization strategy involves reordering a conditional check to reduce unnecessary evaluations, improving performance in specific scenarios.",
            "The optimization strategy involves reordering conditional checks to reduce unnecessary evaluations by moving the `CODEBLOCK_IN_DIRTY_LIST` check after verifying if the block needs to be flushed.",
            "The optimization strategy involves reordering a conditional check to avoid unnecessary evaluations, improving performance by ensuring the more expensive check is only executed when needed.",
            "The optimization strategy involves reordering a conditional check to reduce unnecessary evaluations in the execution path."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reordering a conditional check to avoid unnecessary evaluations, improving performance by ensuring the more expensive check is only executed when needed.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7661865949630737
        },
        {
          "repository_name": "llvm-leg",
          "hash": "f1d9fe9d04ce93f6d5dcebbd2cb6a07414d7a029",
          "author": "Bill Wendling",
          "date": "2013-04-26T21:15:08+00:00",
          "message": "Micro-optimization\n\nTLVs probably won't be as common as the other types of variables. Check for them\nlast before defaulting to \"DATA\".\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@180631 91177308-0d34-0410-b5e6-96231b3b80d8",
          "modified_files_count": 1,
          "modified_files": [
            "lib/CodeGen/TargetLoweringObjectFileImpl.cpp"
          ],
          "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/f1d9fe9d04ce93f6d5dcebbd2cb6a07414d7a029",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "SelectSectionForGlobal"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reordering conditional checks to prioritize more common cases, reducing the average number of checks needed.",
            "The optimization strategy involves reordering conditional checks to prioritize more common cases, reducing the average number of comparisons needed.",
            "The optimization strategy involves reordering conditional checks to prioritize more common cases, reducing the frequency of less common checks.",
            "The optimization strategy involves reordering conditional checks to prioritize more common cases, reducing the average number of checks needed.",
            "The optimization strategy involves reordering conditional checks to prioritize more common cases, reducing the average number of comparisons needed."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reordering conditional checks to prioritize more common cases, reducing the average number of checks needed.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7247570753097534
        },
        {
          "repository_name": "mangos-wotlk",
          "hash": "24c6faca89886b9ae91f5772a2385782f5d52615",
          "author": "BThallid",
          "date": "2019-03-13T17:03:38+01:00",
          "message": "[PlayerBot] Improve Buff() function\n\n* Improve speed by checking that target is not already buffed",
          "modified_files_count": 1,
          "modified_files": [
            "src/game/PlayerBot/Base/PlayerbotAI.cpp"
          ],
          "github_commit_url": "https://github.com/cmangos/mangos-wotlk/commit/24c6faca89886b9ae91f5772a2385782f5d52615",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "PlayerbotAI::Buff"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves adding a check to avoid redundant buffing operations if the target is already buffed.",
            "The optimization strategy involves adding a check to ensure the target is not already buffed before applying the buff, thus avoiding redundant operations.",
            "The optimization strategy involves adding a pre-check to avoid redundant buff operations by verifying that the target is not already buffed.",
            "The optimization strategy involves adding a pre-check to avoid redundant buff operations by verifying if the target is already buffed.",
            "The optimization strategy involves adding a check to avoid redundant buff operations if the target is already buffed."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves adding a check to avoid redundant buff operations if the target is already buffed.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6878445148468018
        },
        {
          "repository_name": "Floorp",
          "hash": "629518e056b7c37431d82c14c361063a5ee685f4",
          "author": "Jon Coppeard",
          "date": "2024-02-12T09:59:07+00:00",
          "message": "Bug 1879566 - Part 1: Check for non-GC things first r=sfink\n\nWhen we scan a range of Values we check for several different kinds of GC\nthing. But it's relatively common to have large ranges of non-GC things (e.g.\nan array of numbers) and we don't handle this particularly well.\n\nWe can check whether the value is a GC thing first. This keeps the same number\nof comparisons but now it's private GC thing values that have to go through the\ngreatest number of comparisons before being handled.\n\nMicrobenchmarks show this improves marking performance of arrays of numbers by\nquite a bit.\n\nDifferential Revision: https://phabricator.services.mozilla.com/D201226",
          "modified_files_count": 1,
          "modified_files": [
            "js/src/gc/Marking.cpp"
          ],
          "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/629518e056b7c37431d82c14c361063a5ee685f4",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "GCMarker::processMarkStackTop"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reordering checks to prioritize non-GC things first, reducing the number of comparisons for common cases.",
            "The optimization strategy involves reordering checks to prioritize non-GC things first, reducing the number of comparisons for common cases.",
            "The optimization strategy involves reordering condition checks to prioritize non-GC things first, reducing the number of comparisons for common cases.",
            "The optimization strategy involves reordering condition checks to prioritize non-GC things first, reducing the number of comparisons for common cases.",
            "The optimization strategy involves reordering checks to prioritize non-GC things first, reducing the number of comparisons for common cases."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reordering checks to prioritize non-GC things first, reducing the number of comparisons for common cases.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6838856935501099
        },
        {
          "repository_name": "tensorflow",
          "hash": "2f605c58a81522bb86a63aa2c48728ac2cbea6ca",
          "author": "Emilio Cota",
          "date": "2024-03-22T20:24:10-07:00",
          "message": "[xla:gpu] dot_merger: reorder merge checks to call IsReachableNonConst last\n\nOnly perform the reachability check if necessary, since it can be expensive.\n\nThis brings a 1.5x compilation time speedup for a large, dense model.\n\nPiperOrigin-RevId: 618355183",
          "modified_files_count": 1,
          "modified_files": [
            "third_party/xla/xla/service/dot_merger.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/2f605c58a81522bb86a63aa2c48728ac2cbea6ca",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "MergeDots"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reordering merge checks to perform an expensive reachability check only when necessary, reducing compilation time.",
            "The optimization strategy involves reordering merge checks to perform an expensive reachability check only when necessary, reducing compilation time.",
            "The optimization strategy involves reordering merge checks to perform an expensive reachability check only when necessary, reducing compilation time.",
            "The optimization strategy involves reordering merge checks to perform an expensive reachability check only when necessary, reducing compilation time.",
            "The optimization strategy involves reordering merge checks to perform an expensive reachability check only when necessary, reducing compilation time."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reordering merge checks to perform an expensive reachability check only when necessary, reducing compilation time.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6831156015396118
        },
        {
          "repository_name": "sycl",
          "hash": "c187146003c3b0fc7b4c2acdb989a2eae15a5ef6",
          "author": "Jordan Rose",
          "date": "2013-02-15T00:32:08+00:00",
          "message": "[analyzer] Tweak LazyCompoundVal reuse check to ignore qualifiers.\n\nThis is optimization only; no behavioral change.\n\nllvm-svn: 175231",
          "modified_files_count": 1,
          "modified_files": [
            "clang/lib/StaticAnalyzer/Core/RegionStore.cpp"
          ],
          "github_commit_url": "https://github.com/triSYCL/sycl/commit/c187146003c3b0fc7b4c2acdb989a2eae15a5ef6",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "RegionStoreManager::createLazyBinding"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves tweaking the LazyCompoundVal reuse check to ignore qualifiers, reducing unnecessary checks and improving performance.",
            "The optimization strategy involves tweaking the LazyCompoundVal reuse check to ignore qualifiers, reducing unnecessary checks and improving performance.",
            "The optimization strategy involves tweaking the LazyCompoundVal reuse check to ignore qualifiers, reducing unnecessary checks and improving performance.",
            "The optimization strategy involves tweaking the LazyCompoundVal reuse check to ignore qualifiers, reducing unnecessary checks and improving performance.",
            "The optimization strategy involves modifying the LazyCompoundVal reuse check to ignore qualifiers, reducing unnecessary checks and improving performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves tweaking the LazyCompoundVal reuse check to ignore qualifiers, reducing unnecessary checks and improving performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6795549392700195
        },
        {
          "repository_name": "kmsan",
          "hash": "0e706f7961a44f4be13cf9b5eedb70f0ab2724b8",
          "author": "Eric Dumazet",
          "date": "2022-12-08T14:27:48-08:00",
          "message": "net/mlx4: small optimization in mlx4_en_xmit()\n\nTest against MLX4_MAX_DESC_TXBBS only matters if the TX\nbounce buffer is going to be used.\n\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nCc: Wei Wang <weiwan@google.com>\nReviewed-by: Tariq Toukan <tariqt@nvidia.com>\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/net/ethernet/mellanox/mlx4/en_tx.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/0e706f7961a44f4be13cf9b5eedb70f0ab2724b8",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "mlx4_en_xmit"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves moving a conditional test inside an if-statement to avoid unnecessary checks when the TX bounce buffer is not used.",
            "The optimization strategy involves moving a conditional check to only execute when the TX bounce buffer is going to be used, reducing unnecessary evaluations.",
            "The optimization involves moving a conditional check to only test against MLX4_MAX_DESC_TXBBS when the TX bounce buffer is actually going to be used, reducing unnecessary evaluations.",
            "The optimization strategy involves moving a conditional check to only execute when the TX bounce buffer is used, reducing unnecessary comparisons.",
            "The optimization strategy involves moving a conditional test against MLX4_MAX_DESC_TXBBS inside the branch where the TX bounce buffer is actually used, reducing unnecessary checks."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves moving a conditional check to only execute when the TX bounce buffer is used, reducing unnecessary comparisons.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6596046090126038
        },
        {
          "repository_name": "server",
          "hash": "144c873e3923fccdd368c08c496624342a9db1e0",
          "author": "monty@mysql.com",
          "date": "2005-10-13T17:41:55+03:00",
          "message": "Review of new pushed code\n- No need to check *ref when ref is checked (Simple optimization fix)",
          "modified_files_count": 1,
          "modified_files": [
            "sql/item.cc"
          ],
          "github_commit_url": "https://github.com/MariaDB/server/commit/144c873e3923fccdd368c08c496624342a9db1e0",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Item_field::fix_fields"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy removes redundant checks by eliminating the need to verify *ref when ref has already been validated.",
            "The optimization strategy removes redundant checks by eliminating the need to verify *ref when ref has already been validated.",
            "The optimization strategy removes a redundant check by leveraging an already verified condition, specifically avoiding the need to check *ref when ref is already checked.",
            "The optimization strategy involves removing redundant checks by leveraging the fact that a pointer (*ref) does not need to be checked if the reference (ref) itself has already been validated.",
            "The optimization strategy removes a redundant check by leveraging an already verified condition, specifically by not checking *ref when ref is already checked."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy removes a redundant check by leveraging an already verified condition, specifically by not checking *ref when ref is already checked.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6558048725128174
        },
        {
          "repository_name": "v8",
          "hash": "802f3e23eb731a3a707af639d618205308f09eb5",
          "author": "Mythri A",
          "date": "2019-06-14T16:20:42+00:00",
          "message": "[runtime] Move the check in %OptimizeFunctionOnNextCall to a later point\n\nBug: v8:8394, v8:9183, v8:8803\nChange-Id: Icd52eaaae28f605b14c0e63d3aca18541e3c8f6e\nReviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/1660616\nCommit-Queue: Mythri Alle <mythria@chromium.org>\nCommit-Queue: Ross McIlroy <rmcilroy@chromium.org>\nReviewed-by: Ross McIlroy <rmcilroy@chromium.org>\nCr-Commit-Position: refs/heads/master@{#62190}",
          "modified_files_count": 1,
          "modified_files": [
            "src/runtime/runtime-test.cc"
          ],
          "github_commit_url": "https://github.com/v8/v8/commit/802f3e23eb731a3a707af639d618205308f09eb5",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "RUNTIME_FUNCTION"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves moving the check in %OptimizeFunctionOnNextCall to a later point to reduce unnecessary checks during function execution.",
            "The optimization strategy involves moving the check in %OptimizeFunctionOnNextCall to a later point to potentially reduce unnecessary checks and improve performance.",
            "The optimization strategy involves moving the check in %OptimizeFunctionOnNextCall to a later point to reduce unnecessary checks and improve performance.",
            "The optimization strategy involves moving the check in %OptimizeFunctionOnNextCall to a later point to reduce unnecessary overhead.",
            "The optimization strategy involves moving the check in %OptimizeFunctionOnNextCall to a later point to reduce unnecessary overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves moving the check in %OptimizeFunctionOnNextCall to a later point to reduce unnecessary checks and improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6548789739608765
        },
        {
          "repository_name": "solidity",
          "hash": "7bdd1b1d4ae46920ae54aaa61c40b411a75f15b9",
          "author": "chriseth",
          "date": "2015-06-06T12:42:36+02:00",
          "message": "Optimize double ISZERO.",
          "modified_files_count": 1,
          "modified_files": [
            "ExpressionClasses.cpp"
          ],
          "github_commit_url": "https://github.com/ethereum/solidity/commit/7bdd1b1d4ae46920ae54aaa61c40b411a75f15b9",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Rules::Rules"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reducing redundant operations by eliminating double ISZERO checks in the code.",
            "The optimization strategy involves reducing redundant operations by eliminating double ISZERO checks in the code.",
            "The optimization strategy involves reducing redundant operations by eliminating double ISZERO checks in the code.",
            "The optimization strategy involves reducing redundant operations by eliminating double ISZERO checks in the code.",
            "The optimization strategy involved reducing redundant ISZERO operations by combining them into a single operation."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reducing redundant operations by eliminating double ISZERO checks in the code.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6434552669525146
        },
        {
          "repository_name": "BsodSurvivor",
          "hash": "cba18e3a0127b621085af39f9e7f13fed07f1c7e",
          "author": "Chris Lattner",
          "date": "2007-02-11T01:04:09+00:00",
          "message": "add an optimization for the case where the src has no name\n\nllvm-svn: 34174",
          "modified_files_count": 1,
          "modified_files": [
            "llvm/lib/VMCore/Value.cpp"
          ],
          "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/cba18e3a0127b621085af39f9e7f13fed07f1c7e",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves adding a conditional check to skip unnecessary operations when the source has no name, reducing overhead in such cases.",
            "The optimization adds a check to skip processing when the source has no name, reducing unnecessary computations.",
            "The optimization avoids unnecessary operations when the source has no name by adding a conditional check.",
            "The optimization strategy involves adding a conditional check to skip unnecessary operations when the source has no name, reducing overhead in such cases.",
            "The optimization strategy involves adding a conditional check to skip unnecessary processing when the source has no name."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves adding a conditional check to skip unnecessary operations when the source has no name, reducing overhead in such cases.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6412838697433472
        },
        {
          "repository_name": "dolphin",
          "hash": "6a51c1564f14680c8e30dcfeeb986d8b1534d449",
          "author": "Sintendo",
          "date": "2021-01-26T21:25:00+01:00",
          "message": "Jit64: addx revisited\n\nThis doesn't really add any new optimizations, but fixes an issue that\nprevented the optimizations introduced in #8551 and #8755 from being\napplied in specific cases. A similar issue was solved for subfx as part\nof #9425.\n\nConsider the case where the destination register is also an input\nregister and happens to hold an immediate value. This results in a set\nof constraints that forces the RegCache to allocate a register and move\nthe immediate value into it for us. By the time we check for immediate\nvalues in the JIT, we're too late.\n\nWe solve this by refactoring the code in such a way that we can check\nfor immediates before involving the RegCache.\n\n- Example 1\nBefore:\n41 BF 00 68 00 CC    mov         r15d,0CC006800h\n44 03 FF             add         r15d,edi\n\nAfter:\n44 8D BF 00 68 00 CC lea         r15d,[rdi-33FF9800h]\n\n- Example 2\nBefore:\n41 BE 00 00 00 00    mov         r14d,0\n44 03 F7             add         r14d,edi\n\nAfter:\n44 8B F7             mov         r14d,edi\n\n- Example 3\nBefore:\n41 BD 03 00 00 00    mov         r13d,3\n44 03 6D 8C          add         r13d,dword ptr [rbp-74h]\n\nAfter:\n44 8B 6D 8C          mov         r13d,dword ptr [rbp-74h]\n41 83 C5 03          add         r13d,3",
          "modified_files_count": 1,
          "modified_files": [
            "Source/Core/Core/PowerPC/Jit64/Jit_Integer.cpp"
          ],
          "github_commit_url": "https://github.com/dolphin-emu/dolphin/commit/6a51c1564f14680c8e30dcfeeb986d8b1534d449",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Jit64::addx"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves refactoring code to check for immediate values before involving the RegCache, thereby avoiding unnecessary register allocations and moves.",
            "The optimization strategy involves refactoring code to check for immediate values before involving the RegCache, allowing for more efficient register usage and instruction selection.",
            "The optimization strategy involves refactoring code to check for immediate values before involving the RegCache, reducing unnecessary register allocations and moves.",
            "The optimization strategy involves refactoring code to check for immediate values before involving the RegCache, allowing for more efficient register allocation and instruction selection.",
            "The optimization strategy involves refactoring code to check for immediate values before involving the RegCache, allowing for more efficient register usage and instruction selection."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves refactoring code to check for immediate values before involving the RegCache, allowing for more efficient register usage and instruction selection.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6345316767692566
        },
        {
          "repository_name": "veil",
          "hash": "3dcf2f79456143c31866951825f280fd1dec5f3d",
          "author": "codeofalltrades",
          "date": "2020-01-17T23:10:04-06:00",
          "message": "Merge #728: [Performance] don't check ancestry if block is in the current chain\n\n4262925e5 [Efficiency] don't check ancestry if block is in the current chain (Cave Spectre)\n\nPull request description:\n\n  (Note: this is also included in #727, but may be faster to merge than the full change)\n\n  ### Problem\n  The code to prune stale tips searches frequently (every time `ProcessNewBlockHeaders()` is called).\n   The bulk of the time spent in `CleanBlockIndexGarbage()` is in `IsAncestor()`.  This creates an an observed cost of about 1.3 seconds at the current block height for each time the search is done, while the `cs_main` lock is held.\n\n  ### Root Cause\n  The logic of the `if` statement will check `IsAncestor()` before checking if the block is contained in ChainActive.  However that check is not needed if the block is determined to be in ChainActive (due to the \"if not and not\" logic).   This causes IsAncestor to be run for every block in the map, where the vast majority of them don't need this check (~90% of them on startup, and over 99.8% of them after initial startup).\n\n  Greatly reducing the number of times IsAncestor is called, by reducing it to only be when the block is not in the active chain, significantly reduces the overall time spent in the `CleanBlockIndexGarbage()` call.\n\n  ### Solution\n  The order of the tests was changed.  The bulk of the time goes to the checking of the ancestors of a block.   If that block is in the current chain, the ancestor check is unnecessary.  So instead of checking the ancestors for every block in the database, then checking if it's in the current chain (and pruning it if neither occurs), the bulk of the blocks are in the chain, so we will rule that out first (much faster) and only check ancestry if the block is not in the current chain.\n\n  ### Testing\n  This not something that can be easily tested without adding timing into the code.  putting timers in the routine at hand, and keeping track of the amount of time the routine took, reveals the effect of that code change (about a 92% performance improvement on that section of code, and shaving off about 1.2 seconds of time in a critical section locked by `cs_main` for each block processed) (these tests were performed with an additional reduction in the number of stale tips; however even with the tips being cleaned every time they reach 1000; the reduction in time should still be similar; as 1000 blocks is still less than 0.2% of the total number of times IsAncestor() was being called prior to this PR.\n\n  # Before\n  ```\n  2020-01-02T01:45:34Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.632087 seconds\n  2020-01-02T01:46:47Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.253449 seconds\n  2020-01-02T01:46:50Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.251874 seconds\n  2020-01-02T01:47:33Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.292188 seconds\n  2020-01-02T01:47:45Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.321275 seconds\n  2020-01-02T01:47:51Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.293556 seconds\n  2020-01-02T01:47:54Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.286087 seconds\n  2020-01-02T01:48:01Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.360860 seconds\n  2020-01-02T01:48:48Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.303014 seconds\n  2020-01-02T01:49:12Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.243704 seconds\n  2020-01-02T01:49:18Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.251913 seconds\n  2020-01-02T01:49:33Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.242712 seconds\n  2020-01-02T01:49:41Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.284505 seconds\n  2020-01-02T01:49:50Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.301958 seconds\n  2020-01-02T01:50:10Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.318217 seconds\n  2020-01-02T01:51:00Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.304591 seconds\n  2020-01-02T01:51:17Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.272602 seconds\n  2020-01-02T01:51:34Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.257356 seconds\n  2020-01-02T01:51:59Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.284783 seconds\n  2020-01-02T01:52:02Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.265133 seconds\n  2020-01-02T01:53:00Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.300298 seconds\n  2020-01-02T01:53:28Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.248319 seconds\n  2020-01-02T01:54:19Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.294210 seconds\n  2020-01-02T01:55:28Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.302487 seconds\n  2020-01-02T01:56:22Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.255330 seconds\n  2020-01-02T01:57:22Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.268904 seconds\n  2020-01-02T01:58:11Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.293706 seconds\n  2020-01-02T01:58:39Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.354431 seconds\n  2020-01-02T01:58:56Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.291397 seconds\n  2020-01-02T01:59:03Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.353625 seconds\n  2020-01-02T02:00:59Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.309790 seconds\n  2020-01-02T02:01:12Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.246629 seconds\n  2020-01-02T02:01:15Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.350599 seconds\n  2020-01-02T02:01:28Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.303686 seconds\n  2020-01-02T02:01:40Z (debug) validation.cpp:4731 - CleanBlockIndexGarbage took 1.303095 seconds\n  ```\n\n  # After\n  ```\n  2020-01-02T03:28:17Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099894 seconds\n  2020-01-02T03:28:18Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099980 seconds\n  2020-01-02T03:30:10Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099467 seconds\n  2020-01-02T03:31:27Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100021 seconds\n  2020-01-02T03:31:32Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099398 seconds\n  2020-01-02T03:31:38Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100509 seconds\n  2020-01-02T03:32:52Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.098997 seconds\n  2020-01-02T03:35:15Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.098915 seconds\n  2020-01-02T03:35:34Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099278 seconds\n  2020-01-02T03:36:09Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099287 seconds\n  2020-01-02T03:36:38Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099494 seconds\n  2020-01-02T03:37:43Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099135 seconds\n  2020-01-02T03:37:50Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.138882 seconds\n  2020-01-02T03:39:11Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100209 seconds\n  2020-01-02T03:39:22Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.125681 seconds\n  2020-01-02T03:39:23Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099585 seconds\n  2020-01-02T03:39:33Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100035 seconds\n  2020-01-02T03:39:48Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099417 seconds\n  2020-01-02T03:40:47Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100063 seconds\n  2020-01-02T03:40:47Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099346 seconds\n  2020-01-02T03:41:16Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.105898 seconds\n  2020-01-02T03:41:18Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099293 seconds\n  2020-01-02T03:42:19Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.101253 seconds\n  2020-01-02T03:42:20Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.138483 seconds\n  2020-01-02T03:42:24Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100591 seconds\n  2020-01-02T03:42:34Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100140 seconds\n  2020-01-02T03:43:10Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.138943 seconds\n  2020-01-02T03:43:45Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100185 seconds\n  2020-01-02T03:43:53Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.098239 seconds\n  2020-01-02T03:44:55Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100541 seconds\n  2020-01-02T03:46:53Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099540 seconds\n  2020-01-02T03:46:59Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100139 seconds\n  2020-01-02T03:47:04Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100110 seconds\n  2020-01-02T03:47:07Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099737 seconds\n  2020-01-02T03:47:20Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.098150 seconds\n  2020-01-02T03:47:24Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099493 seconds\n  2020-01-02T03:47:37Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100032 seconds\n  2020-01-02T03:48:08Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100015 seconds\n  2020-01-02T03:48:26Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099422 seconds\n  2020-01-02T03:48:40Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099060 seconds\n  2020-01-02T03:48:49Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.098883 seconds\n  2020-01-02T03:48:50Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.099002 seconds\n  2020-01-02T03:48:55Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.098913 seconds\n  2020-01-02T03:49:13Z (debug) validation.cpp:4751 - CleanBlockIndexGarbage took 0.100458 seconds\n  ```\n\nTree-SHA512: 32c010b930db26601426eadfb56ffb9a6a4dd23f999eeb7e68a73c4510810d9c90f16b26dbac4b4456af7dc9062933a673f1a0ed45173c066c24f9abfb371d13",
          "modified_files_count": 1,
          "modified_files": [
            "src/validation.cpp"
          ],
          "github_commit_url": "https://github.com/Veil-Project/veil/commit/3dcf2f79456143c31866951825f280fd1dec5f3d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "CleanBlockIndexGarbage"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reordering conditional checks to first verify if a block is in the current chain before performing a more expensive ancestry check, thereby reducing unnecessary computations.",
            "The optimization strategy involved reordering conditional checks to avoid unnecessary ancestry checks for blocks already in the current chain, significantly reducing processing time.",
            "The optimization strategy involved reordering conditional checks to first verify if a block is in the current chain before performing a costly ancestry check, thereby reducing unnecessary computations.",
            "The optimization strategy involved reordering conditional checks to first verify if a block is in the current chain before performing a costly ancestry check, thereby reducing unnecessary computations.",
            "The optimization strategy involved reordering conditional checks to first verify if a block is in the current chain before performing a more expensive ancestry check, thereby reducing unnecessary computations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reordering conditional checks to first verify if a block is in the current chain before performing a costly ancestry check, thereby reducing unnecessary computations.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6292592287063599
        },
        {
          "repository_name": "leechcraft",
          "hash": "eaf3c494ac4b31a96144160ed1796c2f2e835a0c",
          "author": "0xd34df00d",
          "date": "2009-12-07T21:04:31+03:00",
          "message": "Aggregator: optimization for feeds w/ categories.\n\nFirst check if we show unread items and only then check for categories\nmatch.",
          "modified_files_count": 1,
          "modified_files": [
            "src/plugins/aggregator/itemsfiltermodel.cpp"
          ],
          "github_commit_url": "https://github.com/0xd34df00d/leechcraft/commit/eaf3c494ac4b31a96144160ed1796c2f2e835a0c",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reordering conditional checks to first verify if unread items are shown before checking for category matches, reducing unnecessary computations.",
            "The optimization strategy involves reordering conditional checks to first verify if unread items are shown before checking for category matches, reducing unnecessary computations.",
            "The optimization strategy involves reordering conditional checks to first verify if unread items are shown before checking for category matches, reducing unnecessary computations.",
            "The optimization strategy involves reordering conditional checks to first verify if unread items are shown before checking for category matches, reducing unnecessary computations.",
            "The optimization strategy involves reordering conditional checks to first verify if unread items are shown before checking for category matches, reducing unnecessary computations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reordering conditional checks to first verify if unread items are shown before checking for category matches, reducing unnecessary computations.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6242680549621582
        },
        {
          "repository_name": "BsodSurvivor",
          "hash": "b215d473ddadc3199bd63656bf15daff329082b6",
          "author": "Alexander Kornienko",
          "date": "2017-05-16T17:28:17+00:00",
          "message": "[clang-tidy] Speed up performance-unnecessary-value-param check\n\nMoved slower matchers closer to the end. The total speed up on a large file I\nwas interested in is not huge, just about 10%, since the check seems to be doing\na lot in the check() method.\n\nllvm-svn: 303191",
          "modified_files_count": 1,
          "modified_files": [
            "clang-tools-extra/clang-tidy/performance/UnnecessaryValueParamCheck.cpp"
          ],
          "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/b215d473ddadc3199bd63656bf15daff329082b6",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reordering slower matchers to be executed later, improving the overall performance of the check by approximately 10%.",
            "The optimization strategy involved reordering slower matchers to the end to improve the performance of the performance-unnecessary-value-param check.",
            "The optimization strategy involved reordering slower matchers to the end to improve the performance of the `performance-unnecessary-value-param` check.",
            "The optimization strategy involved reordering slower matchers to the end to improve performance by reducing their impact on the overall execution time.",
            "The optimization strategy involved reordering slower matchers to the end to improve the performance of the `performance-unnecessary-value-param` check."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reordering slower matchers to the end to improve the performance of the performance-unnecessary-value-param check.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6148653030395508
        },
        {
          "repository_name": "fastclick",
          "hash": "157b194f64acc56d05ca20ad1ef1c9a5cec7b987",
          "author": "benjie",
          "date": "2001-04-13T01:58:16+00:00",
          "message": "minor optimization: move check for SYN to before push",
          "modified_files_count": 1,
          "modified_files": [
            "elements/tcpudp/iprewriter.cc"
          ],
          "github_commit_url": "https://github.com/tbarbette/fastclick/commit/157b194f64acc56d05ca20ad1ef1c9a5cec7b987",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "IPRewriter::push"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reordering a condition check for SYN packets to occur before the push operation to reduce unnecessary processing.",
            "The optimization strategy involves moving the check for SYN packets to before the push operation to reduce unnecessary processing.",
            "The optimization strategy involves reordering a conditional check for SYN packets to occur before the push operation to reduce unnecessary processing.",
            "The optimization strategy involves reordering a condition check for SYN packets to occur before the push operation to reduce unnecessary processing.",
            "The optimization strategy involves reordering a conditional check for SYN packets to occur before the push operation to reduce unnecessary processing."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reordering a conditional check for SYN packets to occur before the push operation to reduce unnecessary processing.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6138129234313965
        },
        {
          "repository_name": "mbedtls",
          "hash": "9b8d34edd48877972c2f446b183eca2212de63ab",
          "author": "Manuel Pégourié-Gonnard",
          "date": "2020-06-08T09:53:20+02:00",
          "message": "Avoid superflous randomization with restartable\n\nChecking the budget only after the randomization is done means sometimes we\nwere randomizing first, then noticing we ran out of budget, return, come back\nand randomize again before we finally normalize.\n\nWhile this is fine from a correctness and security perspective, it's a minor\ninefficiency, and can also be disconcerting while debugging, so we might as\nwell avoid it.\n\nSigned-off-by: Manuel Pégourié-Gonnard <manuel.pegourie-gonnard@arm.com>",
          "modified_files_count": 1,
          "modified_files": [
            "library/ecp.c"
          ],
          "github_commit_url": "https://github.com/Mbed-TLS/mbedtls/commit/9b8d34edd48877972c2f446b183eca2212de63ab",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "int"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves moving the budget check before the randomization step to avoid unnecessary randomization when the budget is already exhausted.",
            "The optimization strategy involves checking the budget before performing randomization to avoid unnecessary randomization steps.",
            "The optimization strategy involves checking the budget before performing randomization to avoid unnecessary repeated randomization operations.",
            "The optimization strategy involves checking the budget before performing randomization to avoid unnecessary randomization attempts.",
            "The optimization strategy involves checking the budget before performing randomization to avoid unnecessary randomization steps."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves checking the budget before performing randomization to avoid unnecessary randomization steps.",
          "is_generic_optimization_final": true,
          "authority_score": 0.595247745513916
        }
      ]
    },
    {
      "cluster_id": "1574",
      "size": 16,
      "repositories_distribution": {
        "glsl-optimizer": 1,
        "kwin": 1,
        "vbox": 1,
        "snes9x2010": 1,
        "project64": 1,
        "ffmpeg": 1,
        "torque": 1,
        "rtems": 1,
        "IvorySQL": 1,
        "weechat": 1,
        "doslib": 1,
        "zano": 1,
        "bibletime": 1,
        "netmap": 1,
        "kate": 1,
        "libplacebo": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves **reducing redundant operations and improving loop efficiency** by moving invariant computations outside loops, minimizing repeated function calls, and optimizing memory access patterns.",
        "code_examples": [
          [
            "// Before\nvoid retro_run (void)\n{\n   bool updated = false;\n   poll_cb();\n   report_buttons();\n   S9xMainLoop();\n   if (environ_cb(RETRO_ENVIRONMENT_GET_VARIABLE_UPDATE, &updated) && updated)\n   check_variables();\n}",
            "// After\nvoid retro_run (void)\n{\n   bool updated = false;\n   if (environ_cb(RETRO_ENVIRONMENT_GET_VARIABLE_UPDATE, &updated) && updated)\n   check_variables();\n   poll_cb();\n   report_buttons();\n   S9xMainLoop();\n}"
          ],
          [
            "// Before\nfor (hp = list; hp != NULL; hp = next)\n{\n   (*NCount)++;\n   sprintf(str + strlen(str), \"%s/%d+\", hp->name, hp->index);\n   if (port == TRUE)\n     sprintf(portlist + strlen(portlist), \"%d+\", hp->port);\n   next = hp->next;\n}",
            "// After\nfor (hp = list, end = str, endport = portlist; hp != NULL; hp = next)\n{\n   (*NCount)++;\n   sprintf(end, \"%s/%d+\", hp->name, hp->index);\n   end += strlen(end);\n   if (port == TRUE)\n   {\n     sprintf(endport, \"%d+\", hp->port);\n     endport += strlen(endport);\n   }\n   next = hp->next;\n}"
          ]
        ],
        "application_conditions": [
          "The code contains a loop where a function call or computation is repeated in each iteration, but its result does not change within the loop.",
          "The code includes repeated calls to `strlen` or similar functions on the same string within a loop.",
          "The code uses a loop where a variable is updated in each iteration, but its value could be precomputed or moved outside the loop."
        ]
      },
      "commits": [
        {
          "hash": "b5f3ef0a56041abd6fcba8c10c100a99b75e4135",
          "author": "vboxsync",
          "date": "2013-08-12T10:42:55+00:00",
          "message": "loop $ optimization.\n\ngit-svn-id: https://www.virtualbox.org/svn/vbox/trunk@47669 cfe28804-0f27-0410-a406-dd0f0b0b656f",
          "modified_files_count": 1,
          "modified_files": [
            "src/VBox/VMM/VMMAll/IEMAllInstructions.cpp.h"
          ],
          "github_commit_url": "https://github.com/mirror/vbox/commit/b5f3ef0a56041abd6fcba8c10c100a99b75e4135",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "FNIEMOP_DEF"
          ],
          "is_opt_ds": "true",
          "is_opt_ds_simple": "true",
          "repository_name": "vbox",
          "optimization_summary": [
            "The optimization strategy involved optimizing loop operations to reduce overhead and improve performance.",
            "The optimization strategy involved improving loop performance by reducing unnecessary operations within the loop.",
            "The optimization strategy involved modifying loop iterations to reduce overhead and improve performance.",
            "The optimization strategy involved improving loop performance by reducing unnecessary operations within the loop.",
            "The optimization strategy involved improving loop performance by reducing unnecessary operations within the loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving loop performance by reducing unnecessary operations within the loop.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8106145262718201
        },
        {
          "repository_name": "libplacebo",
          "hash": "e3331da8e5adb029b77d7bb64e8c3d111648c115",
          "author": "Niklas Haas",
          "date": "2021-09-12T15:07:01+02:00",
          "message": "shaders/film_grain_h274: further improve loop bounds\n\nEven clearing the rest of `tmp` is technically unnecessary, here.",
          "modified_files_count": 1,
          "modified_files": [
            "src/shaders/film_grain_h274.c"
          ],
          "github_commit_url": "https://github.com/haasn/libplacebo/commit/e3331da8e5adb029b77d7bb64e8c3d111648c115",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "generate_slice"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved improving loop bounds to reduce unnecessary operations within the loop.",
            "The optimization strategy involved improving loop bounds to reduce unnecessary operations within the loop.",
            "The optimization strategy involved improving loop bounds to avoid unnecessary operations, specifically by eliminating the clearing of the rest of the `tmp` array.",
            "The optimization strategy involved improving loop bounds to reduce unnecessary operations within the loop.",
            "The optimization strategy involved improving loop bounds to avoid unnecessary operations, specifically by eliminating the redundant clearing of the `tmp` array."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving loop bounds to reduce unnecessary operations within the loop.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7831235527992249
        },
        {
          "repository_name": "kwin",
          "hash": "1f0a0c893a16b05a71c4468daca8339b9d08356c",
          "author": "ivan tkachenko",
          "date": "2022-09-16T18:02:55+03:00",
          "message": "effects/private: Nuke an unnecessary loop\n\nYes, Marco, there is a more efficient way.",
          "modified_files_count": 1,
          "modified_files": [
            "src/libkwineffects/kwinquickeffect.cpp"
          ],
          "github_commit_url": "https://github.com/KDE/kwin/commit/1f0a0c893a16b05a71c4468daca8339b9d08356c",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "QuickSceneEffectPrivate::isItemOnScreen"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved removing an unnecessary loop to improve efficiency.",
            "The optimization strategy involved removing an unnecessary loop to improve efficiency.",
            "The optimization strategy involved removing an unnecessary loop to improve efficiency.",
            "The optimization strategy involved removing an unnecessary loop to improve efficiency.",
            "The optimization strategy involved removing an unnecessary loop to improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved removing an unnecessary loop to improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7658692598342896
        },
        {
          "repository_name": "rtems",
          "hash": "f9eca790ac000fdbc91891252c7f81d2ebc79d0e",
          "author": "Sebastian Huber",
          "date": "2014-09-12T16:06:29+02:00",
          "message": "sptests/spintrcritical_support: Optimize busy loop",
          "modified_files_count": 1,
          "modified_files": [
            "testsuites/sptests/spintrcritical_support/intrcritical.c"
          ],
          "github_commit_url": "https://github.com/RTEMS/rtems/commit/f9eca790ac000fdbc91891252c7f81d2ebc79d0e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "busy"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing a busy-wait loop with a more efficient delay mechanism to reduce CPU usage.",
            "The optimization strategy involved improving the efficiency of a busy loop by reducing unnecessary computations or iterations.",
            "The optimization strategy involved replacing a busy loop with a more efficient waiting mechanism to reduce CPU usage.",
            "The optimization strategy involved improving the efficiency of a busy loop by reducing unnecessary computations or iterations.",
            "The optimization strategy involved improving the efficiency of a busy loop by reducing unnecessary computations or iterations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving the efficiency of a busy loop by reducing unnecessary computations or iterations.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7626972198486328
        },
        {
          "repository_name": "ffmpeg",
          "hash": "0463df6f4241c8dfaed7e93ee301bd4c1a360c08",
          "author": "Yayoi",
          "date": "2014-12-18T21:54:23+01:00",
          "message": "avfilter/lut: reduce dereference in the inner loop\n\nFor rgb, with a 1080p source, 69 to 74fps on core i5(2 core, 1.8GHz),\nand 136 to 160 fps on an core i7(4770R, 3.2Ghz)\nChanged the yuv code for consistency, even though the performance\nincrease is not as obvious as rgb\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
          "modified_files_count": 1,
          "modified_files": [
            "libavfilter/vf_lut.c"
          ],
          "github_commit_url": "https://github.com/allyourcodebase/ffmpeg/commit/0463df6f4241c8dfaed7e93ee301bd4c1a360c08",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "filter_frame"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing dereference operations in the inner loop to improve performance.",
            "The optimization strategy reduces dereferencing in the inner loop to improve performance by minimizing memory access overhead.",
            "The optimization strategy involved reducing dereference operations in the inner loop to improve performance.",
            "The optimization strategy involved reducing dereferencing operations in the inner loop to improve performance.",
            "The optimization strategy involved reducing dereference operations in the inner loop to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing dereference operations in the inner loop to improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7411496639251709
        },
        {
          "repository_name": "project64",
          "hash": "b066192abf4809ec08ffae9cacb5377725ec8979",
          "author": "LegendOfDragoon",
          "date": "2016-02-09T18:13:21-08:00",
          "message": "Optimize commonly executed loop in PI_DMA_WRITE",
          "modified_files_count": 1,
          "modified_files": [
            "Source/Project64-core/N64System/Mips/Dma.cpp"
          ],
          "github_commit_url": "https://github.com/project64/project64/commit/b066192abf4809ec08ffae9cacb5377725ec8979",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "CDMA::PI_DMA_WRITE"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the overhead of a commonly executed loop in the PI_DMA_WRITE function by minimizing unnecessary operations within the loop.",
            "The optimization strategy involved reducing the overhead in a commonly executed loop within the PI_DMA_WRITE function by minimizing unnecessary operations.",
            "The optimization strategy involved reducing the number of memory accesses in a commonly executed loop by precomputing values and minimizing redundant calculations.",
            "The optimization strategy involved reducing the number of memory accesses in a frequently executed loop by precomputing and reusing values.",
            "The optimization strategy involved reducing the number of memory accesses in a commonly executed loop by precomputing values outside the loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of memory accesses in a commonly executed loop by precomputing values outside the loop.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7364981174468994
        },
        {
          "repository_name": "kate",
          "hash": "a46e42c0c6abd22d06afb7cc794e79fb5a4e7e2e",
          "author": "Christoph Cullmann",
          "date": "2021-01-30T13:25:14+01:00",
          "message": "optimize search loop a bit more, shaves of 10% for my benchmarks",
          "modified_files_count": 1,
          "modified_files": [
            "addons/search/SearchDiskFiles.cpp"
          ],
          "github_commit_url": "https://github.com/KDE/kate/commit/a46e42c0c6abd22d06afb7cc794e79fb5a4e7e2e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "SearchDiskFiles::searchSingleLineRegExp"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved refining the search loop logic to improve performance, resulting in a 10% reduction in benchmark time.",
            "The optimization strategy involved improving the search loop efficiency, likely by reducing unnecessary computations or iterations, resulting in a 10% performance gain in benchmarks.",
            "The optimization strategy involved improving the search loop efficiency, likely by reducing overhead or streamlining operations, resulting in a 10% performance gain in benchmarks.",
            "The optimization strategy involved improving the search loop efficiency, likely by reducing redundant operations or enhancing iteration logic, resulting in a 10% performance gain in benchmarks.",
            "The optimization strategy involved improving the search loop efficiency, likely by reducing unnecessary computations or iterations, resulting in a 10% performance gain in benchmarks."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving the search loop efficiency, likely by reducing unnecessary computations or iterations, resulting in a 10% performance gain in benchmarks.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7052831053733826
        },
        {
          "repository_name": "glsl-optimizer",
          "hash": "e71a33bbf87649150bc748b85ca7213af7c737f4",
          "author": "Brian",
          "date": "2007-02-25T17:29:00-07:00",
          "message": "Optimize the loop for copying output results.",
          "modified_files_count": 1,
          "modified_files": [
            "src/mesa/tnl/t_vb_program.c"
          ],
          "github_commit_url": "https://github.com/aras-p/glsl-optimizer/commit/e71a33bbf87649150bc748b85ca7213af7c737f4",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "run_vp"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved improving the loop for copying output results by reducing unnecessary operations or overhead.",
            "The optimization strategy involved improving the loop for copying output results by reducing unnecessary operations or improving memory access patterns.",
            "The optimization strategy involved improving the loop for copying output results by reducing unnecessary operations or overhead.",
            "The optimization strategy involved improving the loop for copying output results by reducing unnecessary operations or improving memory access patterns.",
            "The optimization strategy involved improving the loop for copying output results by reducing unnecessary operations or improving memory access patterns."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving the loop for copying output results by reducing unnecessary operations or improving memory access patterns.",
          "is_generic_optimization_final": true,
          "authority_score": 0.702071487903595
        },
        {
          "repository_name": "zano",
          "hash": "054be248cb88a77c0ae6456798d4271691b6bde7",
          "author": "sowle",
          "date": "2024-02-17T05:06:44+01:00",
          "message": "fix loop variable type here and there (performance)",
          "modified_files_count": 1,
          "modified_files": [
            "src/wallet/wallet2.cpp"
          ],
          "github_commit_url": "https://github.com/hyle-team/zano/commit/054be248cb88a77c0ae6456798d4271691b6bde7",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ENABLE_CHANNEL_BY_DEFAULT"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing the loop variable type to improve performance.",
            "The optimization strategy involved changing the loop variable type to improve performance.",
            "The optimization strategy involved changing the loop variable type to improve performance.",
            "The optimization strategy involved changing the loop variable type to improve performance.",
            "The optimization strategy involved changing the loop variable type to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing the loop variable type to improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7006387114524841
        },
        {
          "repository_name": "netmap",
          "hash": "dc3eea8eda665d7b0ac411266090bfdcc11b4bcd",
          "author": "Giuseppe Lettieri",
          "date": "2018-03-06T13:48:54+01:00",
          "message": "pipe: sligthly faster swap loop",
          "modified_files_count": 1,
          "modified_files": [
            "sys/dev/netmap/netmap_pipe.c"
          ],
          "github_commit_url": "https://github.com/luigirizzo/netmap/commit/dc3eea8eda665d7b0ac411266090bfdcc11b4bcd",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "netmap_pipe_txsync"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved improving the efficiency of the swap loop by reducing unnecessary operations and streamlining the iteration process.",
            "The optimization strategy involved modifying the swap loop in the `netmap_pipe_txsync` function to reduce overhead and improve performance.",
            "The optimization strategy involved improving the efficiency of the swap loop by reducing unnecessary operations.",
            "The optimization strategy involved improving the efficiency of the swap loop in the `netmap_pipe_txsync` function by reducing unnecessary operations and streamlining the iteration process.",
            "The optimization strategy involved improving the efficiency of the swap loop by reducing unnecessary operations within the loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving the efficiency of the swap loop by reducing unnecessary operations within the loop.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6816275715827942
        },
        {
          "repository_name": "bibletime",
          "hash": "ad63611faa1ed41207ed88ce096056b3bc54c5d1",
          "author": "Jaak Ristioja",
          "date": "2021-04-11T01:18:04+03:00",
          "message": "frontend, CSearchAnalysisScene: Optimized away a loop in constructor",
          "modified_files_count": 1,
          "modified_files": [
            "src/frontend/searchdialog/analysis/csearchanalysisscene.cpp"
          ],
          "github_commit_url": "https://github.com/bibletime/bibletime/commit/ad63611faa1ed41207ed88ce096056b3bc54c5d1",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved removing an unnecessary loop in the constructor to improve performance.",
            "The optimization strategy involved removing an unnecessary loop in the constructor to reduce computational overhead.",
            "The optimization strategy involved removing an unnecessary loop in the constructor to reduce computational overhead.",
            "The optimization strategy involved removing an unnecessary loop in the constructor to reduce computational overhead.",
            "The optimization strategy involved removing an unnecessary loop in the constructor to reduce computational overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved removing an unnecessary loop in the constructor to reduce computational overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.673836886882782
        },
        {
          "hash": "f435e8d3fa0cf50fa7db643c8d4e698292581467",
          "author": "Sebastien Helleu",
          "date": "2013-11-15T09:01:19+01:00",
          "message": "core: optimize loop when closing several buffers with command /buffer close n1-n2",
          "modified_files_count": 1,
          "modified_files": [
            "src/core/wee-command.c"
          ],
          "github_commit_url": "https://github.com/weechat/weechat/commit/f435e8d3fa0cf50fa7db643c8d4e698292581467",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "COMMAND_CALLBACK"
          ],
          "is_opt_ds": "true",
          "is_opt_ds_simple": "true",
          "repository_name": "weechat",
          "optimization_summary": [
            "The optimization strategy involved improving the loop efficiency when closing multiple buffers by reducing unnecessary iterations and checks.",
            "The optimization strategy involved improving the loop efficiency when closing multiple buffers by reducing unnecessary iterations and overhead.",
            "The optimization strategy involved improving the loop efficiency when closing multiple buffers by reducing unnecessary iterations and checks.",
            "The optimization strategy involved improving the loop efficiency when closing multiple buffers by reducing redundant operations and streamlining the iteration process.",
            "The optimization strategy involves improving the loop efficiency when closing multiple buffers by reducing unnecessary iterations and checks."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving the loop efficiency when closing multiple buffers by reducing unnecessary iterations and checks.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6713328957557678
        },
        {
          "repository_name": "doslib",
          "hash": "0c6d17b473340be60ab12e683e447db0b06a7958",
          "author": "Jonathan Campbell",
          "date": "2020-09-18T16:07:24-07:00",
          "message": "optimization, remove one instruction",
          "modified_files_count": 1,
          "modified_files": [
            "games/dgjamfall2020/codenamesunfish3d/game/game.c"
          ],
          "github_commit_url": "https://github.com/joncampbell123/doslib/commit/0c6d17b473340be60ab12e683e447db0b06a7958",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "game_loop"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved removing one redundant instruction to streamline the execution of the game loop.",
            "The optimization strategy involved removing one instruction to streamline the execution of the game loop.",
            "The optimization strategy involved removing one redundant instruction to streamline the execution of the game loop.",
            "The optimization strategy involved removing one instruction to streamline the execution of the game loop.",
            "The optimization strategy involved removing one instruction to streamline the execution of the game loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved removing one instruction to streamline the execution of the game loop.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6695604920387268
        },
        {
          "hash": "90616c229085437294306c4b8e7cb259eca562d2",
          "author": "bdaw",
          "date": "2013-07-22T13:43:42-06:00",
          "message": "trq-2085 Fixed an overrun on a calloc'd buffer and improved efficiency of sprintf loop.",
          "modified_files_count": 1,
          "modified_files": [
            "src/server/node_manager.c"
          ],
          "github_commit_url": "https://github.com/adaptivecomputing/torque/commit/90616c229085437294306c4b8e7cb259eca562d2",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "translate_howl_to_string"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "torque",
          "optimization_summary": [
            "The optimization strategy involved fixing a buffer overrun and improving the efficiency of a `sprintf` loop by reducing unnecessary operations.",
            "The optimization strategy involved improving the efficiency of a `sprintf` loop to reduce overhead and prevent buffer overrun.",
            "The optimization strategy involved improving the efficiency of a `sprintf` loop to reduce overhead and prevent buffer overrun.",
            "The optimization strategy involved improving the efficiency of a `sprintf` loop to reduce overhead and prevent buffer overrun.",
            "The optimization strategy involved improving the efficiency of a `sprintf` loop to prevent buffer overrun and enhance performance."
          ],
          "is_generic_optimization": [
            false,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved improving the efficiency of a `sprintf` loop to reduce overhead and prevent buffer overrun.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6578776240348816
        },
        {
          "hash": "48cc59ed24f95fa171b12ba1b461e6dc72d62b2b",
          "author": "Noah Misch",
          "date": "2019-10-18T20:21:10-07:00",
          "message": "Use standard compare_exchange loop style in ProcArrayGroupClearXid().\n\nBesides style, this might improve performance in the contended case.\n\nReviewed by Amit Kapila.\n\nDiscussion: https://postgr.es/m/20191015035348.GA4166224@rfd.leadboat.com",
          "modified_files_count": 1,
          "modified_files": [
            "src/backend/storage/ipc/procarray.c"
          ],
          "github_commit_url": "https://github.com/IvorySQL/IvorySQL/commit/48cc59ed24f95fa171b12ba1b461e6dc72d62b2b",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ProcArrayGroupClearXid"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "IvorySQL",
          "optimization_summary": [
            "The optimization strategy involves using a standard compare-and-exchange loop style to potentially improve performance in contended cases.",
            "The optimization strategy involves using a standard compare-and-exchange loop style to improve performance in contended cases.",
            "The optimization strategy involves using a standard compare-and-exchange loop style to improve performance in contended cases.",
            "The optimization strategy involves using a standard compare-and-exchange loop style to potentially improve performance in contended cases.",
            "The optimization strategy involves using a standard compare-and-exchange loop style to potentially improve performance in contended cases."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves using a standard compare-and-exchange loop style to potentially improve performance in contended cases.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6507824063301086
        },
        {
          "repository_name": "snes9x2010",
          "hash": "5efcfb79137ddb885f093ac4547dafb9a8673c2e",
          "author": "Alcaro",
          "date": "2016-09-17T10:54:19+02:00",
          "message": "Doing this after S9xMainLoop is only going to increase latency. Fixing.",
          "modified_files_count": 1,
          "modified_files": [
            "libretro/libretro.c"
          ],
          "github_commit_url": "https://github.com/libretro/snes9x2010/commit/5efcfb79137ddb885f093ac4547dafb9a8673c2e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "retro_run"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved moving a task outside of the main loop to reduce latency.",
            "The optimization strategy involved moving a task outside of a latency-sensitive loop to reduce latency.",
            "The optimization strategy involved moving a task outside of the main loop to reduce latency.",
            "The optimization strategy involved moving a task before the `S9xMainLoop` function to reduce latency.",
            "The optimization strategy involved moving a task before the `S9xMainLoop` call to reduce latency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            false,
            false
          ],
          "optimization_summary_final": "The optimization strategy involved moving a task outside of the main loop to reduce latency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.6506086587905884
        }
      ]
    }
  ]
}