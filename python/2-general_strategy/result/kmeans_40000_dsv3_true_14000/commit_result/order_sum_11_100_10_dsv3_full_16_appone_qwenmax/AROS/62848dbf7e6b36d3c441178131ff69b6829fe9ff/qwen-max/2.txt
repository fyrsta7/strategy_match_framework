int main(int argc, char **argv)
{
    if (InitOOP())
    {
        Class *timercl;
        
        printf("Object system initialized\n");
        
        /* Initialize the timer class */
        timercl = MakeTimerClass();
        if (timercl)
        {
            struct Node *n;
            Object *timer;
            
            printf("Class list:\n");
            ForeachNode(&ClassList, n)
            {
                printf("%s\n", n->ln_Name);
            }
            printf("\n\n");
            
            /* Create a new instance */
            timer = NewObject(NULL, TIMERCLASS, NULL);
            if (timer)
            {
                ULONG i;
                
                Method *test_m;
                
                printf("Timer object: %p\n", timer);
                
                printf("Doing ten billion calls to test method...\n");
                
                // Helper function to reduce inlining and improve clarity
                auto performTimerTest = [&](bool useFastInvocation, Method *method) {
                    Timer_Start(timer);
                    
                    if (useFastInvocation)
                    {
                        ULONG methodid = M_Timer_TestMethod;
                        for (i = 0; i < NUM_ITERATIONS; i++)
                        {
                            CallMethodFast(timer, method, &methodid);
                        }
                    }
                    else
                    {
                        for (i = 0; i < NUM_ITERATIONS; i++)
                        {
                            Timer_TestMethod(timer);
                        }
                    }
                    
                    Timer_Stop(timer);
                    printf("Time elapsed: ");
                    Timer_PrintElapsed(timer);
                };
                
                printf("Using normal invocation\n");
                performTimerTest(false, nullptr);
                
                printf("\nUsing fast invocation\n");
                test_m = GetMethod(timer, M_Timer_TestMethod);
                performTimerTest(true, test_m);
                
                printf("\n\nTestMethod output: %ld\n", Timer_TestMethod(timer));
                
                /* Dispose object */
                DisposeObject(timer);
            }
            FreeTimerClass(timercl);
        }
        CleanupOOP();
    }
    
    return 0;
}