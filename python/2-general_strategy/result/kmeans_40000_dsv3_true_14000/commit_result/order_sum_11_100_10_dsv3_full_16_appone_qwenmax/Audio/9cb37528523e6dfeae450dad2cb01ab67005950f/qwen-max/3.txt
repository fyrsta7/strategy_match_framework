void AudioSynthWaveformPWM::update(void)
{
	audio_block_t *block, *modinput;
	uint32_t i;
	int32_t out;

	modinput = receiveReadOnly();
	if (magnitude == 0) {
		if (modinput) release(modinput);
		return;
	}
	block = allocate();
	if (!block) {
		// unable to allocate memory, so we'll send nothing
		if (modinput) release(modinput);
		return;
	}

	if (modinput) {
		for (i = 0; i < AUDIO_BLOCK_SAMPLES; i++) {
			elapsed += 65536;
			int32_t in = modinput->data[i];
			if (magnitude < 0) in = -in;

			// Precompute duration-related value once per iteration
			uint32_t dur = ((uint64_t)(in + 32768) * duration) >> 15;

			if (elapsed < dur) {
				out = magnitude;
			} else {
				int32_t e = elapsed - dur;
				e = (e < 0) ? 0 : (e > 65535 ? 65535 : e);
				elapsed = e;

				// Precompute magnitude-related value once per iteration
				int32_t mag_scaled = (magnitude * elapsed * 2) >> 16;
				out = magnitude - mag_scaled;
				magnitude = -magnitude;
			}
			block->data[i] = out;
		}
		release(modinput);
	} else {
		// Precompute magnitude-related scaling factor outside the loop
		int32_t mag_scale_factor = (magnitude * 2) >> 16;

		for (i = 0; i < AUDIO_BLOCK_SAMPLES; i++) {
			elapsed += 65536;

			if (elapsed < duration) {
				out = magnitude;
			} else {
				elapsed -= duration;

				// Use precomputed scaling factor
				out = magnitude - (mag_scale_factor * elapsed);
				magnitude = -magnitude;
			}
			block->data[i] = out;
		}
	}
	transmit(block);
	release(block);
}