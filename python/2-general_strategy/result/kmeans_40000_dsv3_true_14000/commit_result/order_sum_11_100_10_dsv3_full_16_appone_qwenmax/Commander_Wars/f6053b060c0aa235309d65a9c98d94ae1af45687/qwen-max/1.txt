QmlVectorPoint* GameMap::getVisionCircle(qint32 x, qint32 y, qint32 minVisionRange, qint32 maxVisionRange, qint32 visionHigh)
{
    QmlVectorPoint* pRet = new QmlVectorPoint();
    if (maxVisionRange > 0)
    {
        if (visionHigh < 0)
        {
            visionHigh = 0;
        }
        QVector<QRect> m_LineSight;
        QVector<QRect> m_LineSightEvaluated;
        m_LineSight.append(QRect(x - 1, y, 0, 2));
        m_LineSight.append(QRect(x - 1, y, 0, 3));
        m_LineSight.append(QRect(x + 1, y, 1, 2));
        m_LineSight.append(QRect(x + 1, y, 1, 3));
        m_LineSight.append(QRect(x, y - 1, 2, 0));
        m_LineSight.append(QRect(x, y - 1, 2, 1));
        m_LineSight.append(QRect(x, y + 1, 3, 0));
        m_LineSight.append(QRect(x, y + 1, 3, 1));

        QPoint pos(x, y);
        if (0 >= minVisionRange && 0 <= maxVisionRange)
        {
            pRet->append(QPoint(0, 0));
        }
        while (m_LineSight.size() > 0)
        {
            QRect current = m_LineSight.front();
            m_LineSight.pop_front();
            m_LineSightEvaluated.append(current);

            qint32 currentX = current.x();
            qint32 currentY = current.y();
            bool isOnMap = onMap(currentX, currentY);

            if (isOnMap)
            {
                qint32 distance = Mainapp::getDistance(QPoint(currentX, currentY), pos);
                if (distance >= minVisionRange && distance <= maxVisionRange)
                {
                    QPoint nextPos(currentX - x, currentY - y);
                    if (!pRet->contains(nextPos))
                    {
                        pRet->append(nextPos);
                    }
                }
                Terrain* pTerrain = getTerrain(currentX, currentY);
                qint32 currentHeight = pTerrain->getVisionHigh();
                if (pTerrain->getBuilding() != nullptr)
                {
                    currentHeight += pTerrain->getBuilding()->getVisionHigh();
                }
                // We can see over the terrain, continue vision range
                if (currentHeight <= visionHigh && distance + 1 <= maxVisionRange)
                {
                    for (qint32 i = 0; i < 4; i++)
                    {
                        if (i != current.width() && i != current.height())
                        {
                            qint32 nextX, nextY;
                            switch (i)
                            {
                                case 0: nextX = currentX + 1; nextY = currentY; break;
                                case 1: nextX = currentX - 1; nextY = currentY; break;
                                case 2: nextX = currentX; nextY = currentY + 1; break;
                                case 3: nextX = currentX; nextY = currentY - 1; break;
                            }
                            if (onMap(nextX, nextY))
                            {
                                QRect next(nextX, nextY, current.width(), current.height());
                                if (!m_LineSightEvaluated.contains(next))
                                {
                                    m_LineSight.append(next);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return pRet;
}