bool NPLHelper::SerializeToSCode(const char* sStorageVar, const luabind::object& input, StringType& sCode, int nCodeOffset, STableStack* pRecursionTable, bool sort /*= false*/)
{
	sCode.resize(nCodeOffset);

	int nStorageVarLen = 0;
	if (sStorageVar != NULL)
	{
		nStorageVarLen = (int)strlen(sStorageVar);
		if (nStorageVarLen > 0)
		{
			sCode.append(sStorageVar, nStorageVarLen);
			sCode.append("=");
		}
	}

	int nType = type(input);
	switch (nType)
	{
	case LUA_TNUMBER:
	{
		double value = object_cast<double>(input);
		char buff[40];
		int nLen = ParaEngine::StringHelper::fast_dtoa(value, buff, 40, 5); // similar to "%.5f" but without trailing zeros. 
		sCode.append(buff, nLen);
		break;
	}
	case LUA_TBOOLEAN:
	{
		bool bValue = object_cast<bool>(input);
		sCode.append(bValue ? "true" : "false");
		break;
	}
	case LUA_TSTRING:
	{
		// this is something like string.format("%q") in NPL.
		int nSize = 0;
		const char* pStr = LuaObjectToString(input, &nSize);
		EncodeStringInQuotation(sCode, (int)(sCode.size()), pStr, nSize);
		break;
	}
	case LUA_TTABLE:
	{
		if (pRecursionTable)
		{
			// check for recursive tables
			const STableStack* pCheckTable = pRecursionTable;
			while (pCheckTable){
				if ((*pCheckTable->m_pTableObj) == input)
				{
					if (nStorageVarLen > 0)
					{
						sCode.resize(nCodeOffset);
					}
					return false;
				}
				pCheckTable = pCheckTable->m_pParent;
			}
		}
		STableStack thisRecursionTable = { &input, pRecursionTable};
		
		sCode.append("{");

		if (sort)
		{
			struct sortItem
			{
				sortItem(const object& key_, const object& value_) : key(key_), value(value_) {}
				sortItem() {};
				object key;
				object value;
			};

			std::vector<sortItem> sortTable;

			for (luabind::iterator itCur(input), itEnd; itCur != itEnd; ++itCur)
			{
				sortTable.push_back(sortItem(itCur.key(), *itCur));
			}

			std::sort(sortTable.begin(), sortTable.end(), [](const sortItem& a, const sortItem& b) {
				const object& key1 = a.key;
				const object& key2 = b.key;

				auto type1 = type(key1);
				auto type2 = type(key2);

				if (type1 == LUA_TNUMBER && type2 == LUA_TNUMBER)
				{
					return object_cast<double>(key1) < object_cast<double>(key2);
				}
				else if (type1 == LUA_TNUMBER && type2 == LUA_TSTRING)
				{
					return false;
				}
				else if (type1 == LUA_TSTRING && type2 == LUA_TNUMBER)
				{
					return true;
				}
				else if (type1 == LUA_TSTRING && type2 == LUA_TSTRING)
				{
					return object_cast<std::string>(key1).compare(object_cast<std::string>(key2)) < 0;
				}
				else if (type1 == type2)
				{
					key1.push(key1.interpreter());
					auto p1 = lua_topointer(key1.interpreter(), -1);
					lua_pop(key1.interpreter(), 1);

					key2.push(key2.interpreter());
					auto p2 = lua_topointer(key2.interpreter(), -1);
					lua_pop(key2.interpreter(), 1);

					return p1 < p2;
				}
				else
				{
					return type1 < type2;
				}
			});


			int nNumberIndex = 1;
			//for (luabind::iterator itCur(input), itEnd; itCur != itEnd; ++itCur)
			for (size_t i = 0; i < sortTable.size(); i++)
			{

				// we only serialize item with a string key
				const object& key = sortTable[i].key;
				const object& value = sortTable[i].value;
				if (type(key) == LUA_TSTRING)
				{
					const char* sKey = object_cast<const char*>(key);
						int nOldSize = (int)(sCode.size());
					// if sKey contains only alphabetic letters, we will use sKey=data,otherwise, we go the safer one ["sKey"]=data.
					// the first is more efficient in disk space. 
					int nSKeyCount = (int)strlen(sKey);
					bool bIsIdentifier = NPLParser::IsIdentifier(sKey, nSKeyCount);
					if (bIsIdentifier && nSKeyCount > 0)
					{
						sCode.append(sKey, nSKeyCount);
						sCode.append("=");
					}
					else
					{
						sCode.append("[");
						EncodeStringInQuotation(sCode, (int)(sCode.size()), sKey, nSKeyCount);
						sCode.append("]=");
					}
					if (SerializeToSCode(NULL, value, sCode, (int)(sCode.size()), &thisRecursionTable, sort))
					{
						sCode.append(",");
					}
					else
					{
						sCode.resize(nOldSize);
					}
				}
				else if (type(key) == LUA_TNUMBER)
				{
					double dKey = object_cast<double>(key);
					int64_t nKey = (int64_t)(dKey);
					int nOldSize = (int)(sCode.size());

					// for number index, we will serialize without square brackets. 
					if (nNumberIndex == nKey && dKey == nKey)
					{
						++nNumberIndex;
					}
					else
					{
						char buff[40];
						sCode.append("[");
						int nLen = 0;
						if (dKey == nKey)
						{
							nLen = ParaEngine::StringHelper::fast_itoa(nKey, buff, 40);
						}
						else
						{
							nLen = ParaEngine::StringHelper::fast_dtoa(dKey, buff, 40, 5); // similar to "%.5f" but without trailing zeros. 
						}
						sCode.append(buff, nLen);
						sCode.append("]=");
					}

					if (SerializeToSCode(NULL, value, sCode, (int)(sCode.size()), &thisRecursionTable, sort))
					{
						sCode.append(",");
					}
					else
					{
						nNumberIndex = -1;
						sCode.resize(nOldSize);
					}
				}
			}
		}
		else
		{
			int nNumberIndex = 1;
			for (luabind::iterator itCur(input), itEnd; itCur != itEnd; ++itCur)
			{
				// we only serialize item with a string key
				const object& key = itCur.key();
				if (type(key) == LUA_TSTRING)
				{
					const char* sKey = object_cast<const char*>(key);
					const object& value = *itCur;
					int nOldSize = (int)(sCode.size());
					// if sKey contains only alphabetic letters, we will use sKey=data,otherwise, we go the safer one ["sKey"]=data.
					// the first is more efficient in disk space. 
					int nSKeyCount = (int)strlen(sKey);
					bool bIsIdentifier = NPLParser::IsIdentifier(sKey, nSKeyCount);
					if (bIsIdentifier && nSKeyCount > 0)
					{
						sCode.append(sKey, nSKeyCount);
						sCode.append("=");
					}
					else
					{
						sCode.append("[");
						EncodeStringInQuotation(sCode, (int)(sCode.size()), sKey, nSKeyCount);
						sCode.append("]=");
					}
					if (SerializeToSCode(NULL, value, sCode, (int)(sCode.size()), &thisRecursionTable, sort))
					{
						sCode.append(",");
					}
					else
					{
						sCode.resize(nOldSize);
					}
				}
				else if (type(key) == LUA_TNUMBER)
				{
					double dKey = object_cast<double>(key);
					int64_t nKey = (int64_t)(dKey);
					const object& value = *itCur;
					int nOldSize = (int)(sCode.size());

					// for number index, we will serialize without square brackets. 
					if (nNumberIndex == nKey && dKey == nKey)
					{
						++nNumberIndex;
					}
					else
					{
						char buff[40];
						sCode.append("[");
						int nLen = 0;
						if (dKey == nKey)
						{
							nLen = ParaEngine::StringHelper::fast_itoa(nKey, buff, 40);
						}
						else
						{
							nLen = ParaEngine::StringHelper::fast_dtoa(dKey, buff, 40, 5); // similar to "%.5f" but without trailing zeros. 
						}
						sCode.append(buff, nLen);
						sCode.append("]=");
					}

					if (SerializeToSCode(NULL, value, sCode, (int)(sCode.size()), &thisRecursionTable, sort))
					{
						sCode.append(",");
					}
					else
					{
						nNumberIndex = -1;
						sCode.resize(nOldSize);
					}
				}
			}
		}
		
		
		sCode.append("}");
		break;
	}
	case LUA_TUSERDATA:
	{
		sCode.append("\"");
		try
		{
			ParaScripting::ParaFileObject file = object_cast<ParaScripting::ParaFileObject>(input);
			const char* pStr = file.GetBase64String();
			if (pStr)
			{
				sCode.append(pStr);
			}
			// TODO: LXZ: figure out a way to check user data type, instead of throwing exceptions
			// the following two may be possible ways, but I have not figured out how.

			//ParaScripting::ParaFileObject* pFile = (ParaScripting::ParaFileObject*)luaL_checkudata(input.interpreter(), 0, "ParaIO.ParaFileObject");

			//ParaScripting::ParaFileObject * pFile = object_cast<ParaScripting::ParaFileObject*>(input);
			//if(pFile)
			//{
			//	//OUTPUT_LOG("file name:%s\n", pFile->readline());
			//}
		}
		catch (...)
		{

		}
		sCode.append("\"");
		break;
	}
	default:
		// we will escape any functions, etc. 
		if (nStorageVarLen > 0)
		{
			sCode.resize(nCodeOffset);
		}
		return false;
		break;
	}
	return true;
}