static void apultra_optimize_forward(apultra_compressor *pCompressor, const unsigned char *pInWindow, const int nStartOffset, const int nEndOffset, const int nInsertForwardReps, const int *nCurRepMatchOffset, const int nBlockFlags, const int nMatchesPerArrival) {
   apultra_arrival *arrival = pCompressor->arrival - (nStartOffset * nMatchesPerArrival);
   int i, j, n;

   if ((nEndOffset - nStartOffset) > pCompressor->block_size) return;

   memset(arrival + (nStartOffset * nMatchesPerArrival), 0, sizeof(apultra_arrival) * ((nEndOffset - nStartOffset + 1) * nMatchesPerArrival));

   arrival[nStartOffset * nMatchesPerArrival].from_slot = -1;
   arrival[nStartOffset * nMatchesPerArrival].rep_offset = *nCurRepMatchOffset;

   for (i = (nStartOffset * nMatchesPerArrival); i != ((nEndOffset+1) * nMatchesPerArrival); i++) {
      arrival[i].cost = 0x40000000;
   }

   for (i = nStartOffset; i != nEndOffset; i++) {
      apultra_arrival *cur_arrival = &arrival[i * nMatchesPerArrival];
      int m;
      
      unsigned char *match1 = pCompressor->match1 + (i - nStartOffset);
      int nShortOffset;
      int nMatchLen;
      int nLiteralCost;

      if ((pInWindow[i] != 0 && (*match1) == 0) || (i == nStartOffset && (nBlockFlags & 1))) {
         nShortOffset = 0;
         nMatchLen = 0;
         nLiteralCost = 9 /* literal bit + literal byte */;
      }
      else {
         nShortOffset = (pInWindow[i] == 0) ? 0 : (*match1);
         nMatchLen = 1;
         nLiteralCost = 4 + TOKEN_SIZE_4BIT_MATCH /* command and offset cost; no length cost */;
      }

      for (j = 0; j < nMatchesPerArrival && cur_arrival[j].from_slot; j++) {
         int nPrevCost = cur_arrival[j].cost & 0x3fffffff;
         int nCodingChoiceCost = nPrevCost + nLiteralCost;

         apultra_arrival *pDestSlots = &cur_arrival[1 * nMatchesPerArrival];
         if (nCodingChoiceCost <= pDestSlots[nMatchesPerArrival - 1].cost) {
            int nScore = cur_arrival[j].score + (nShortOffset ? 3 : 1);
            int exists = 0;

            for (n = 0;
               n < nMatchesPerArrival && pDestSlots[n].cost < nCodingChoiceCost;
               n++) {
               if (pDestSlots[n].rep_offset == cur_arrival[j].rep_offset) {
                  exists = 1;
                  break;
               }
            }

            if (!exists) {
               int nn;

               for (nn = n;
                  nn < nMatchesPerArrival && pDestSlots[nn].cost == nCodingChoiceCost;
                  nn++) {
                  if (pDestSlots[nn].rep_offset == cur_arrival[j].rep_offset) {
                     exists = 1;
                     break;
                  }
               }

               if (!exists) {
                  for (; n < nMatchesPerArrival; n++) {
                     apultra_arrival* pDestArrival = &pDestSlots[n];
                     if (nCodingChoiceCost < pDestArrival->cost || nScore < pDestArrival->score) {
                        int z;

                        for (z = n; z < nMatchesPerArrival - 1 && pDestSlots[z].from_slot; z++) {
                           if (pDestSlots[z].rep_offset == cur_arrival[j].rep_offset)
                              break;
                        }

                        memmove(&pDestSlots[n + 1],
                           &pDestSlots[n],
                           sizeof(apultra_arrival) * (z - n));

                        pDestArrival->cost = nCodingChoiceCost;
                        pDestArrival->from_pos = i;
                        pDestArrival->from_slot = j + 1;
                        pDestArrival->follows_literal = 1;
                        pDestArrival->short_offset = nShortOffset;
                        pDestArrival->match_len = nMatchLen;
                        pDestArrival->score = nScore;
                        pDestArrival->rep_offset = cur_arrival[j].rep_offset;
                        pDestArrival->rep_pos = cur_arrival[j].rep_pos;
                        break;
                     }
                  }
               }
            }
         }
      }

      if (i == nStartOffset && (nBlockFlags & 1)) continue;

      apultra_match *match = pCompressor->match + ((i - nStartOffset) << MATCHES_PER_INDEX_SHIFT);
      unsigned short *match_depth = pCompressor->match_depth + ((i - nStartOffset) << MATCHES_PER_INDEX_SHIFT);
      const int nRepMatchOffsetCost = apultra_get_rep_offset_varlen_size();

      int nMinRepLen[NMATCHES_PER_ARRIVAL];
      memset(nMinRepLen, 0, NMATCHES_PER_ARRIVAL * sizeof(int));

      for (m = 0; m < NMATCHES_PER_INDEX && match[m].length; m++) {
         const int nOrigMatchLen = match[m].length;
         const int nOrigMatchOffset = match[m].offset;
         const unsigned int nOrigMatchDepth = match_depth[m] & 0x7fff;
         const int nScorePenalty = 3 + ((match_depth[m] & 0x8000) >> 15);

         for (unsigned int d = 0; d <= nOrigMatchDepth; d += (nOrigMatchDepth ? nOrigMatchDepth : 1)) {
            int nStartingMatchLen, nJumpMatchLen, k;
            int nMaxRepLen[NMATCHES_PER_ARRIVAL];
            int nMinMatchLen[NMATCHES_PER_ARRIVAL];

            const int nMatchOffset = nOrigMatchOffset - d;
            int nMatchLen = nOrigMatchLen - d;

            if ((i + nMatchLen) > nEndOffset)
               nMatchLen = nEndOffset - i;

            for (j = 0; j < nMatchesPerArrival && cur_arrival[j].from_slot; j++) {
               int nRepOffset = cur_arrival[j].rep_offset;
               int nCurMaxLen = 0;

               if (cur_arrival[j].follows_literal &&
                  nRepOffset) {

                  if (nMatchOffset == nRepOffset)
                     nCurMaxLen = nMatchLen;
                  else {
                     if (i >= nRepOffset &&
                        (i - nRepOffset + nMatchLen) <= nEndOffset) {
                        nCurMaxLen = nMinRepLen[j];

                        const unsigned char *pInWindowStart = pInWindow + i - nRepOffset;
                        const unsigned char *pInWindowAtRepOffset = pInWindowStart + nCurMaxLen;
                        const unsigned char *pInWindowMax = pInWindow + i - nRepOffset + nMatchLen;
                        int nMatchRepOffsetDelta = nRepOffset - nMatchOffset;

                        while ((pInWindowAtRepOffset + 8) < pInWindowMax && !memcmp(pInWindowAtRepOffset, pInWindowAtRepOffset + nMatchRepOffsetDelta, 8))
                           pInWindowAtRepOffset += 8;
                        while ((pInWindowAtRepOffset + 4) < pInWindowMax && !memcmp(pInWindowAtRepOffset, pInWindowAtRepOffset + nMatchRepOffsetDelta, 4))
                           pInWindowAtRepOffset += 4;
                        while (pInWindowAtRepOffset < pInWindowMax && pInWindowAtRepOffset[0] == pInWindowAtRepOffset[nMatchRepOffsetDelta])
                           pInWindowAtRepOffset++;

                        nCurMaxLen = (int)(pInWindowAtRepOffset - pInWindowStart);
                        nMinRepLen[j] = nCurMaxLen;
                     }
                  }
               }

               nMaxRepLen[j] = nCurMaxLen;

               int nIsRepMatch = (nMatchOffset == nRepOffset &&
                  cur_arrival[j].follows_literal) ? 1 : 0;

               if (nIsRepMatch == 0) {
                  if (nMatchOffset < MINMATCH3_OFFSET)
                     nMinMatchLen[j] = 2;
                  else {
                     if (nMatchOffset < MINMATCH4_OFFSET)
                        nMinMatchLen[j] = 3;
                     else
                        nMinMatchLen[j] = 4;
                  }
               }
               else {
                  nMinMatchLen[j] = nMatchLen + 1;
               }
            }
            while (j < NMATCHES_PER_ARRIVAL) {
               nMaxRepLen[j] = 0;
               nMinMatchLen[j++] = 0;
            }

            if (nInsertForwardReps)
               apultra_insert_forward_match(pCompressor, pInWindow, i, nMatchOffset, nStartOffset, nEndOffset, nMatchesPerArrival, 0);

            if (nMatchLen >= LEAVE_ALONE_MATCH_SIZE && i >= nMatchLen)
               nStartingMatchLen = nMatchLen;
            else
               nStartingMatchLen = 2;

            if ((nBlockFlags & 3) == 3 && nMatchLen > 90 && i >= 90)
               nJumpMatchLen = 90;
            else
               nJumpMatchLen = nMatchLen + 1;

            // Precompute values that do not change within the loop
            int nNoRepMatchOffsetCostForLit[2];
            if (nStartingMatchLen <= 3) {
               nNoRepMatchOffsetCostForLit[0] = apultra_get_offset_varlen_size(2, nMatchOffset, 0);
               nNoRepMatchOffsetCostForLit[1] = apultra_get_offset_varlen_size(2, nMatchOffset, 1);
            }
            else {
               nNoRepMatchOffsetCostForLit[0] = apultra_get_offset_varlen_size(4, nMatchOffset, 0);
               nNoRepMatchOffsetCostForLit[1] = apultra_get_offset_varlen_size(4, nMatchOffset, 1);
            }

            for (k = nStartingMatchLen; k <= nMatchLen; k++) {
               int nNoRepMatchMatchLenCost;
               int nRepMatchMatchLenCost = apultra_get_gamma2_size(k);

               if (k <= 3 && nMatchOffset < 128)
                  nNoRepMatchMatchLenCost = 0;
               else {
                  if (nMatchOffset < 128 || nMatchOffset >= MINMATCH4_OFFSET)
                     nNoRepMatchMatchLenCost = apultra_get_gamma2_size(k - 2);
                  else if (nMatchOffset < MINMATCH3_OFFSET)
                     nNoRepMatchMatchLenCost = nRepMatchMatchLenCost;
                  else
                     nNoRepMatchMatchLenCost = apultra_get_gamma2_size(k - 1);
               }

               int nRepMatchCmdCost = nRepMatchOffsetCost + nRepMatchMatchLenCost;
               apultra_arrival *pDestSlots = &cur_arrival[k * nMatchesPerArrival];
               int nInsertedNonRepOffset = 0;

               for (j = 0; j < nMatchesPerArrival && cur_arrival[j].from_slot; j++) {
                  int nPrevCost = cur_arrival[j].cost & 0x3fffffff;

                  int nRepCodingChoiceCost = nPrevCost /* the actual cost of the literals themselves accumulates up the chain */ + nRepMatchCmdCost;

                  if (nRepCodingChoiceCost <= pDestSlots[nMatchesPerArrival - 1].cost) {
                     if (k >= nMinMatchLen[j] && !nInsertedNonRepOffset) {
                        int nMatchCmdCost = nNoRepMatchMatchLenCost + nNoRepMatchOffsetCostForLit[cur_arrival[j].follows_literal];
                        int nCodingChoiceCost = nPrevCost /* the actual cost of the literals themselves accumulates up the chain */ + nMatchCmdCost;

                        if (nCodingChoiceCost <= pDestSlots[nMatchesPerArrival - 2].cost) {
                           int exists = 0;

                           for (n = 0;
                              n < nMatchesPerArrival && pDestSlots[n].cost < nCodingChoiceCost;
                              n++) {
                              if (pDestSlots[n].rep_offset == nMatchOffset) {
                                 exists = 1;
                                 if ((nCodingChoiceCost - pDestSlots[n].cost) > 1)
                                    nInsertedNonRepOffset = 1;
                                 break;
                              }
                           }

                           if (!exists) {
                              int nn;

                              for (nn = n;
                                 nn < nMatchesPerArrival && pDestSlots[nn].cost == nCodingChoiceCost;
                                 nn++) {
                                 if (pDestSlots[nn].rep_offset == nMatchOffset) {
                                    exists = 1;
                                    break;
                                 }
                              }

                              if (!exists) {
                                 int nScore = cur_arrival[j].score + nScorePenalty;

                                 if (nMatchLen >= LCP_MAX)
                                    nCodingChoiceCost -= 1;

                                 for (; n < nMatchesPerArrival - 1; n++) {
                                    apultra_arrival* pDestArrival = &pDestSlots[n];

                                    if (nCodingChoiceCost < pDestArrival->cost || nScore < pDestArrival->score) {
                                       int z;

                                       for (z = n; z < nMatchesPerArrival - 1 && pDestSlots[z].from_slot; z++) {
                                          if (pDestSlots[z].rep_offset == nMatchOffset)
                                             break;
                                       }

                                       memmove(&pDestSlots[n + 1],
                                          &pDestSlots[n],
                                          sizeof(apultra_arrival) * (z - n));

                                       pDestArrival->cost = nCodingChoiceCost;
                                       pDestArrival->from_pos = i;
                                       pDestArrival->from_slot = j + 1;
                                       pDestArrival->short_offset = 0;
                                       pDestArrival->match_len = k;
                                       pDestArrival->follows_literal = 0;
                                       pDestArrival->score = nScore;
                                       pDestArrival->rep_offset = nMatchOffset;
                                       pDestArrival->rep_pos = i;
                                       nMinMatchLen[j] = k + 1;
                                       break;
                                    }
                                 }
                              }
                           }
                        }
                     }

                     /* If this coding choice doesn't rep-match, see if we still get a match by using the current repmatch offset for this arrival. This can occur (and not have the
                      * matchfinder offer the offset in the first place, or have too many choices with the same cost to retain the repmatchable offset) when compressing regions
                      * of identical bytes, for instance. Checking for this provides a big compression win on some files. */

                     if (nMaxRepLen[j] >= k) {
                        int nRepOffset = cur_arrival[j].rep_offset;

                        /* A match is possible at the rep offset; insert the extra coding choice. */

                        int exists = 0;

                        for (n = 0;
                           n < nMatchesPerArrival && pDestSlots[n].cost < nRepCodingChoiceCost;
                           n++) {
                           if (pDestSlots[n].rep_offset == nRepOffset) {
                              exists = 1;
                              break;
                           }
                        }

                        if (!exists) {
                           int nn;

                           for (nn = n;
                              nn < nMatchesPerArrival && pDestSlots[nn].cost == nRepCodingChoiceCost;
                              nn++) {
                              if (pDestSlots[nn].rep_offset == nRepOffset) {
                                 exists = 1;
                                 break;
                              }
                           }

                           if (!exists) {
                              int nScore = cur_arrival[j].score + 2;

                              for (; n < nMatchesPerArrival; n++) {
                                 apultra_arrival* pDestArrival = &pDestSlots[n];

                                 if (nRepCodingChoiceCost < pDestArrival->cost || nScore < pDestArrival->score) {
                                    int z;

                                    for (z = n; z < nMatchesPerArrival - 1 && pDestSlots[z].from_slot; z++) {
                                       if (pDestSlots[z].rep_offset == nRepOffset)
                                          break;
                                    }

                                    memmove(&pDestSlots[n + 1],
                                       &pDestSlots[n],
                                       sizeof(apultra_arrival) * (z - n));

                                    pDestArrival->cost = nRepCodingChoiceCost;
                                    pDestArrival->from_pos = i;
                                    pDestArrival->from_slot = j + 1;
                                    pDestArrival->short_offset = 0;
                                    pDestArrival->match_len = k;
                                    pDestArrival->follows_literal = 0;
                                    pDestArrival->score = nScore;
                                    pDestArrival->rep_offset = nRepOffset;
                                    pDestArrival->rep_pos = i;
                                    break;
                                 }
                              }
                           }
                        }
                     }
                  }
                  else {
                     break;
                  }
               }

               if (k == nJumpMatchLen)
                  k = nMatchLen - 1;
            }

            if (nOrigMatchLen >= 512)
               break;
         }
      }
   }
   
   apultra_arrival *end_arrival = &arrival[(i * nMatchesPerArrival) + 0];
   apultra_final_match *pBestMatch = pCompressor->best_match - nStartOffset;
      
   while (end_arrival->from_slot > 0 && end_arrival->from_pos >= 0 && (int)end_arrival->from_pos < nEndOffset) {
      pBestMatch[end_arrival->from_pos].length = end_arrival->match_len;
      if (end_arrival->match_len >= 2)
         pBestMatch[end_arrival->from_pos].offset = end_arrival->rep_offset;
      else
         pBestMatch[end_arrival->from_pos].offset = end_arrival->short_offset;

      end_arrival = &arrival[(end_arrival->from_pos * nMatchesPerArrival) + (end_arrival->from_slot-1)];
   }
}