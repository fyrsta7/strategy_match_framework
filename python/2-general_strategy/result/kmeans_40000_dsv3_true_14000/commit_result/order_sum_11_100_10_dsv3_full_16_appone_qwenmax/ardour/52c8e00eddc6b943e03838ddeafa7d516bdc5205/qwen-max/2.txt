x86_sse_find_peaks(float *buf, nframes_t nframes, float *min, float *max)
{
	__m128 current_max, current_min, work;

	// Load max and min values into all four slots of the XMM registers
	current_min = _mm_set1_ps(*min);
	current_max = _mm_set1_ps(*max);

	// Work input until "buf" reaches 16 byte alignment
	while ( ((unsigned long)buf) % 16 != 0 && nframes > 0) {

		// Load the next float into the work buffer
		work = _mm_set1_ps(*buf);

		current_min = _mm_min_ps(current_min, work);
		current_max = _mm_max_ps(current_max, work);
		
		buf++;
		nframes--;
	}

	// Work through aligned buffers
	while (nframes >= 4) {
		// Prefetch data for the next iteration
		if (nframes >= 8) {
			_mm_prefetch((char*)(buf + 4), _MM_HINT_T0);
		}

		work = _mm_load_ps(buf);

		current_min = _mm_min_ps(current_min, work);
		current_max = _mm_max_ps(current_max, work);

		buf += 4;
		nframes -= 4;
	}
	
	// Work through the rest < 4 samples
	while ( nframes > 0) {

		// Load the next float into the work buffer
		work = _mm_set1_ps(*buf);

		current_min = _mm_min_ps(current_min, work);
		current_max = _mm_max_ps(current_max, work);
		
		buf++;
		nframes--;
	}

	// Find min & max value in current_max through shuffle tricks

	work = current_min;
	work = _mm_shuffle_ps(work, work, _MM_SHUFFLE(2, 3, 0, 1));
	work = _mm_min_ps (work, current_min);
	current_min = work;
	work = _mm_shuffle_ps(work, work, _MM_SHUFFLE(1, 0, 3, 2));
	work = _mm_min_ps (work, current_min);

	_mm_store_ss(min, work);

	work = current_max;
	work = _mm_shuffle_ps(work, work, _MM_SHUFFLE(2, 3, 0, 1));
	work = _mm_max_ps (work, current_max);
	current_max = work;
	work = _mm_shuffle_ps(work, work, _MM_SHUFFLE(1, 0, 3, 2));
	work = _mm_max_ps (work, current_max);

	_mm_store_ss(max, work);
}