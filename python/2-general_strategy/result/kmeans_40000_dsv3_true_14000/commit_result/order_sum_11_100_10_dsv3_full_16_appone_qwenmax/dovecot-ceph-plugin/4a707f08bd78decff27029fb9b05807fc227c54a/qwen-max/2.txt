int RmbCommands::load_objects(librmb::RadosStorageMetadataModule *ms,
                              std::vector<librmb::RadosMailObject *> &mail_objects, std::string &sort_string) {
  print_debug("entry: load_objects");
  if (ms == nullptr || storage == nullptr) {
    print_debug("end: load_objects");
    return -1;
  }
  // get load all objects metadata into memory
  librados::NObjectIterator iter(storage->find_mails(nullptr));
  while (iter != librados::NObjectIterator::__EndObjectIterator) {
    librmb::RadosMailObject *mail = new librmb::RadosMailObject();
    std::string oid = iter->get_oid();
    uint64_t object_size = 0;
    time_t save_date_rados;
    int ret = storage->stat_mail(oid, &object_size, &save_date_rados);
    if (ret != 0 || object_size <= 0) {
      std::cout << " object '" << oid << "' is not a valid mail object, size = 0" << std::endl;
      ++iter;
      delete mail;
      continue;
    }
    mail->set_oid(oid);
    if (ms->load_metadata(mail) < 0) {
      std::cout << " loading metadata of object '" << oid << "' faild " << std::endl;
      ++iter;
      delete mail;
      continue;
    }

    if (mail->get_metadata()->empty()) {
      std::cout << " pool object " << oid << " is not a mail object" << std::endl;
      ++iter;
      delete mail;
      continue;
    }

    if (!librmb::RadosUtils::validate_metadata(mail->get_metadata())) {
      std::cout << "object : " << oid << " metadata is not valid " << std::endl;
      ++iter;
      delete mail;
      continue;
    }

    mail->set_mail_size(object_size);
    mail->set_rados_save_date(save_date_rados);
    ++iter;
    mail_objects.push_back(mail);
    if (is_debug) {
      std::cout << "added: mail " << mail->get_oid() << std::endl;
    }
  }

  if (sort_string.compare("uid") == 0) {
    std::sort(mail_objects.begin(), mail_objects.end(), sort_uid);
  } else if (sort_string.compare("recv_date") == 0) {
    std::sort(mail_objects.begin(), mail_objects.end(), sort_recv_date);
  } else if (sort_string.compare("phy_size") == 0) {
    std::sort(mail_objects.begin(), mail_objects.end(), sort_phy_size);
  } else {
    std::sort(mail_objects.begin(), mail_objects.end(), sort_save_date);
  }

  print_debug("end: load_objects");
  return 0;
}