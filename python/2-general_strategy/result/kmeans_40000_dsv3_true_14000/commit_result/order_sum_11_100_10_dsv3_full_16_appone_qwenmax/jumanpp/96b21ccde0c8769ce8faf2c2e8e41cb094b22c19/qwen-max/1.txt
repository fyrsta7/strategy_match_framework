void HashedFeaturePerceptron::add(util::ArraySlice<float> source,
                                  util::MutableArraySlice<float> result,
                                  util::ConstSliceable<u32> ngrams) const {
  JPP_DCHECK(util::memory::IsPowerOf2(weights_.size()));
  JPP_DCHECK_EQ(source.size(), result.size());
  u32 mask = static_cast<u32>(weights_.size() - 1);
  int numRows = ngrams.numRows();

  for (int i = 0; i < numRows; ++i) {
    // Prefetch data for the next iteration
    if (i + 1 < numRows) {
      __builtin_prefetch(&source.at(i + 1), 0, 1);       // Prefetch source[i+1]
      __builtin_prefetch(&ngrams.row(i + 1)[0], 0, 1);   // Prefetch ngrams.row(i+1)
      __builtin_prefetch(&result.at(i + 1), 1, 1);       // Prefetch result[i+1] for write
    }

    // Current iteration computation
    auto src = source.at(i);
    auto add = impl::computeUnrolled4Perceptron(weights_, ngrams.row(i), mask);
    result.at(i) = src + add;
  }
}