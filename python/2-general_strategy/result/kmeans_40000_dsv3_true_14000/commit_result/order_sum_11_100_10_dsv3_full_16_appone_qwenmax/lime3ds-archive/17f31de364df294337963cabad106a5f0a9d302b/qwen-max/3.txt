static void ProcessShaderCode(VertexShaderState& state) {

    // Placeholder for invalid inputs
    static float24 dummy_vec4_float24[4];

    while (true) {
        if (!state.call_stack.empty()) {
            if (state.program_counter - shader_memory.data() == state.call_stack.top().final_address) {
                state.program_counter = &shader_memory[state.call_stack.top().return_address];
                state.call_stack.pop();

                // TODO: Is "trying again" accurate to hardware?
                continue;
            }
        }

        bool exit_loop = false;
        const Instruction& instr = *(const Instruction*)state.program_counter;
        const SwizzlePattern& swizzle = *(SwizzlePattern*)&swizzle_data[instr.common.operand_desc_id];

        auto call = [&](std::stack<VertexShaderState::CallStackElement>& stack, u32 offset, u32 num_instructions, u32 return_offset) {
            state.program_counter = &shader_memory[offset] - 1; // -1 to make sure when incrementing the PC we end up at the correct offset
            stack.push({ offset + num_instructions, return_offset });
        };
        u32 binary_offset = state.program_counter - shader_memory.data();

        state.debug.max_offset = std::max<u32>(state.debug.max_offset, 1 + binary_offset);

        auto LookupSourceRegister = [&](const SourceRegister& source_reg) -> const float24* {
            switch (source_reg.GetRegisterType()) {
            case RegisterType::Input:
                return state.input_register_table[source_reg.GetIndex()];

            case RegisterType::Temporary:
                return &state.temporary_registers[source_reg.GetIndex()].x;

            case RegisterType::FloatUniform:
                return &shader_uniforms.f[source_reg.GetIndex()].x;

            default:
                return dummy_vec4_float24;
            }
        };

        switch (instr.opcode.GetInfo().type) {
        case Instruction::OpCodeType::Arithmetic:
        {
            bool is_inverted = 0 != (instr.opcode.GetInfo().subtype & Instruction::OpCodeInfo::SrcInversed);
            if (is_inverted) {
                // TODO: We don't really support this properly: For instance, the address register
                //       offset needs to be applied to SRC2 instead, etc.
                //       For now, we just abort in this situation.
                LOG_ERROR(HW_GPU, "Bad condition...");
                exit(0);
            }

            const int address_offset = (instr.common.address_register_index == 0)
                                       ? 0 : state.address_registers[instr.common.address_register_index - 1];

            const float24* src1_ = LookupSourceRegister(instr.common.GetSrc1(is_inverted) + address_offset);
            const float24* src2_ = LookupSourceRegister(instr.common.GetSrc2(is_inverted));

            const bool negate_src1 = (swizzle.negate_src1 != false);
            const bool negate_src2 = (swizzle.negate_src2 != false);

            // Precompute negated values outside the loop
            float24 neg_src1[4], neg_src2[4];
            if (negate_src1) {
                neg_src1[0] = src1_[(int)swizzle.GetSelectorSrc1(0)] * float24::FromFloat32(-1);
                neg_src1[1] = src1_[(int)swizzle.GetSelectorSrc1(1)] * float24::FromFloat32(-1);
                neg_src1[2] = src1_[(int)swizzle.GetSelectorSrc1(2)] * float24::FromFloat32(-1);
                neg_src1[3] = src1_[(int)swizzle.GetSelectorSrc1(3)] * float24::FromFloat32(-1);
            } else {
                neg_src1[0] = src1_[(int)swizzle.GetSelectorSrc1(0)];
                neg_src1[1] = src1_[(int)swizzle.GetSelectorSrc1(1)];
                neg_src1[2] = src1_[(int)swizzle.GetSelectorSrc1(2)];
                neg_src1[3] = src1_[(int)swizzle.GetSelectorSrc1(3)];
            }

            if (negate_src2) {
                neg_src2[0] = src2_[(int)swizzle.GetSelectorSrc2(0)] * float24::FromFloat32(-1);
                neg_src2[1] = src2_[(int)swizzle.GetSelectorSrc2(1)] * float24::FromFloat32(-1);
                neg_src2[2] = src2_[(int)swizzle.GetSelectorSrc2(2)] * float24::FromFloat32(-1);
                neg_src2[3] = src2_[(int)swizzle.GetSelectorSrc2(3)] * float24::FromFloat32(-1);
            } else {
                neg_src2[0] = src2_[(int)swizzle.GetSelectorSrc2(0)];
                neg_src2[1] = src2_[(int)swizzle.GetSelectorSrc2(1)];
                neg_src2[2] = src2_[(int)swizzle.GetSelectorSrc2(2)];
                neg_src2[3] = src2_[(int)swizzle.GetSelectorSrc2(3)];
            }

            float24* dest = (instr.common.dest < 0x08) ? state.output_register_table[4*instr.common.dest.GetIndex()]
                        : (instr.common.dest < 0x10) ? dummy_vec4_float24
                        : (instr.common.dest < 0x20) ? &state.temporary_registers[instr.common.dest.GetIndex()][0]
                        : dummy_vec4_float24;

            state.debug.max_opdesc_id = std::max<u32>(state.debug.max_opdesc_id, 1+instr.common.operand_desc_id);

            switch (instr.opcode.EffectiveOpCode()) {
            case Instruction::OpCode::ADD:
            {
                for (int i = 0; i < 4; ++i) {
                    if (!swizzle.DestComponentEnabled(i))
                        continue;

                    dest[i] = neg_src1[i] + neg_src2[i];
                }

                break;
            }

            case Instruction::OpCode::MUL:
            {
                for (int i = 0; i < 4; ++i) {
                    if (!swizzle.DestComponentEnabled(i))
                        continue;

                    dest[i] = neg_src1[i] * neg_src2[i];
                }

                break;
            }

            case Instruction::OpCode::MAX:
                for (int i = 0; i < 4; ++i) {
                    if (!swizzle.DestComponentEnabled(i))
                        continue;

                    dest[i] = std::max(neg_src1[i], neg_src2[i]);
                }
                break;

            case Instruction::OpCode::DP3:
            case Instruction::OpCode::DP4:
            {
                float24 dot = float24::FromFloat32(0.f);
                int num_components = (instr.opcode == Instruction::OpCode::DP3) ? 3 : 4;
                for (int i = 0; i < num_components; ++i)
                    dot = dot + neg_src1[i] * neg_src2[i];

                for (int i = 0; i < num_components; ++i) {
                    if (!swizzle.DestComponentEnabled(i))
                        continue;

                    dest[i] = dot;
                }
                break;
            }

            // Reciprocal
            case Instruction::OpCode::RCP:
            {
                for (int i = 0; i < 4; ++i) {
                    if (!swizzle.DestComponentEnabled(i))
                        continue;

                    // TODO: Be stable against division by zero!
                    // TODO: I think this might be wrong... we should only use one component here
                    dest[i] = float24::FromFloat32(1.0 / neg_src1[i].ToFloat32());
                }

                break;
            }

            // Reciprocal Square Root
            case Instruction::OpCode::RSQ:
            {
                for (int i = 0; i < 4; ++i) {
                    if (!swizzle.DestComponentEnabled(i))
                        continue;

                    // TODO: Be stable against division by zero!
                    // TODO: I think this might be wrong... we should only use one component here
                    dest[i] = float24::FromFloat32(1.0 / sqrt(neg_src1[i].ToFloat32()));
                }

                break;
            }

            case Instruction::OpCode::MOVA:
            {
                for (int i = 0; i < 2; ++i) {
                    if (!swizzle.DestComponentEnabled(i))
                        continue;

                    // TODO: Figure out how the rounding is done on hardware
                    state.address_registers[i] = static_cast<s32>(neg_src1[i].ToFloat32());
                }

                break;
            }

            case Instruction::OpCode::MOV:
            {
                for (int i = 0; i < 4; ++i) {
                    if (!swizzle.DestComponentEnabled(i))
                        continue;

                    dest[i] = neg_src1[i];
                }
                break;
            }

            case Instruction::OpCode::CMP:
                for (int i = 0; i < 2; ++i) {
                    // TODO: Can you restrict to one compare via dest masking?

                    auto compare_op = instr.common.compare_op;
                    auto op = (i == 0) ? compare_op.x.Value() : compare_op.y.Value();

                    switch (op) {
                        case compare_op.Equal:
                            state.conditional_code[i] = (neg_src1[i] == neg_src2[i]);
                            break;

                        case compare_op.NotEqual:
                            state.conditional_code[i] = (neg_src1[i] != neg_src2[i]);
                            break;

                        case compare_op.LessThan:
                            state.conditional_code[i] = (neg_src1[i] <  neg_src2[i]);
                            break;

                        case compare_op.LessEqual:
                            state.conditional_code[i] = (neg_src1[i] <= neg_src2[i]);
                            break;

                        case compare_op.GreaterThan:
                            state.conditional_code[i] = (neg_src1[i] >  neg_src2[i]);
                            break;

                        case compare_op.GreaterEqual:
                            state.conditional_code[i] = (neg_src1[i] >= neg_src2[i]);
                            break;

                        default:
                            LOG_ERROR(HW_GPU, "Unknown compare mode %x", static_cast<int>(op));
                            break;
                    }
                }
                break;

            default:
                LOG_ERROR(HW_GPU, "Unhandled arithmetic instruction: 0x%02x (%s): 0x%08x",
                          (int)instr.opcode.Value(), instr.opcode.GetInfo().name, instr.hex);
                _dbg_assert_(HW_GPU, 0);
                break;
            }

            break;
        }
        default:
            // Handle each instruction on its own
            switch (instr.opcode) {
            case Instruction::OpCode::END:
                exit_loop = true;
                break;

            case Instruction::OpCode::CALL:
                call(state.call_stack,
                     instr.flow_control.dest_offset,
                     instr.flow_control.num_instructions,
                     binary_offset + 1);
                break;

            case Instruction::OpCode::NOP:
                break;

            case Instruction::OpCode::IFU:
                if (shader_uniforms.b[instr.flow_control.bool_uniform_id]) {
                    call(state.call_stack,
                         binary_offset + 1,
                         instr.flow_control.dest_offset - binary_offset - 1,
                         instr.flow_control.dest_offset + instr.flow_control.num_instructions);
                } else {
                    call(state.call_stack,
                         instr.flow_control.dest_offset,
                         instr.flow_control.num_instructions,
                         instr.flow_control.dest_offset + instr.flow_control.num_instructions);
                }

                break;

            case Instruction::OpCode::IFC:
            {
                // TODO: Do we need to consider swizzlers here?

                auto flow_control = instr.flow_control;
                bool results[3] = { flow_control.refx == state.conditional_code[0],
                                    flow_control.refy == state.conditional_code[1] };

                switch (flow_control.op) {
                case flow_control.Or:
                    results[2] = results[0] || results[1];
                    break;

                case flow_control.And:
                    results[2] = results[0] && results[1];
                    break;

                case flow_control.JustX:
                    results[2] = results[0];
                    break;

                case flow_control.JustY:
                    results[2] = results[1];
                    break;
                }

                if (results[2]) {
                    call(state.call_stack,
                         binary_offset + 1,
                         instr.flow_control.dest_offset - binary_offset - 1,
                         instr.flow_control.dest_offset + instr.flow_control.num_instructions);
                } else {
                    call(state.call_stack,
                         instr.flow_control.dest_offset,
                         instr.flow_control.num_instructions,
                         instr.flow_control.dest_offset + instr.flow_control.num_instructions);
                }

                break;
            }

            default:
                LOG_ERROR(HW_GPU, "Unhandled instruction: 0x%02x (%s): 0x%08x",
                          (int)instr.opcode.Value(), instr.opcode.GetInfo().name, instr.hex);
                break;
            }

            break;
        }

        ++state.program_counter;

        if (exit_loop)
            break;
    }
}