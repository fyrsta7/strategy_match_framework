Quad2dD Vec2DHelper::minimumAreaEnclosingRectangle(std::vector<Vec2D>& points) {
    std::vector<Vec2D> hull = Vec2DHelper::convexHull(points);

    double minArea = std::numeric_limits<double>::max();
    Quad2dD minRectangle({0, 0}, {0, 0}, {0, 0}, {0, 0});

    for (size_t i = 0; i < hull.size(); ++i) {
            size_t nextIndex = (i + 1) % hull.size();
            double dx = hull[nextIndex].x - hull[i].x;
            double dy = hull[nextIndex].y - hull[i].y;
            double angle = std::atan2(dy, dx);

            double minX = std::numeric_limits<double>::max();
            double maxX = std::numeric_limits<double>::lowest();
            double minY = std::numeric_limits<double>::max();
            double maxY = std::numeric_limits<double>::lowest();
            for (const auto& point : points) { // Changed from 'const Vec2D&' to 'const auto&'
                double rotatedX = (point.x - hull[i].x) * std::cos(-angle) - (point.y - hull[i].y) * std::sin(-angle);
                double rotatedY = (point.x - hull[i].x) * std::sin(-angle) + (point.y - hull[i].y) * std::cos(-angle);
                minX = std::min(minX, rotatedX);
                maxX = std::max(maxX, rotatedX);
                minY = std::min(minY, rotatedY);
                maxY = std::max(maxY, rotatedY);
            }

            double width = maxX - minX;
            double height = maxY - minY;
            double area = width * height;

            if (area < minArea) {
                minArea = area;
                minRectangle = {
                    {hull[i].x + minX * std::cos(angle) - minY * std::sin(angle),
                     hull[i].y + minX * std::sin(angle) + minY * std::cos(angle)},
                    {hull[i].x + maxX * std::cos(angle) - minY * std::sin(angle),
                     hull[i].y + maxX * std::sin(angle) + minY * std::cos(angle)},
                    {hull[i].x + maxX * std::cos(angle) - maxY * std::sin(angle),
                     hull[i].y + maxX * std::sin(angle) + maxY * std::cos(angle)},
                    {hull[i].x + minX * std::cos(angle) - maxY * std::sin(angle),
                     hull[i].y + minX * std::sin(angle) + maxY * std::cos(angle)}
                };
            }
        }

        return minRectangle;
}