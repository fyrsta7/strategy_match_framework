void IncompressibleNeoHookeanIntegrator::AssembleElementGrad(Array<const FiniteElement*> &el,
                                    ElementTransformation &Tr,
                                    Array<Vector *> &elfun, 
                                    Array2D<DenseMatrix *> &elmats)
{
   int dof_u = el[0]->GetDof();
   int dof_p = el[1]->GetDof();

   int dim = el[0]->GetDim();

   elmats(0,0)->SetSize(dof_u*dim, dof_u*dim);
   elmats(0,1)->SetSize(dof_u*dim, dof_p);
   elmats(1,0)->SetSize(dof_p, dof_u*dim);
   elmats(1,1)->SetSize(dof_p, dof_p);

   *elmats(0,0) = 0.0;
   *elmats(0,1) = 0.0;
   *elmats(1,0) = 0.0;
   *elmats(1,1) = 0.0;

   DSh_u.SetSize(dof_u, dim);
   DS_u.SetSize(dof_u, dim);
   J0i.SetSize(dim);
   F.SetSize(dim);
   FinvT.SetSize(dim);
   Finv.SetSize(dim);
   P.SetSize(dim);
   PMatI_u.UseExternalData(elfun[0]->GetData(), dof_u, dim);
   Sh_p.SetSize(dof_p);

   int intorder = 2*el[0]->GetOrder() + 3; // <---
   const IntegrationRule &ir = IntRules.Get(el[0]->GetGeomType(), intorder);

   for (int i = 0; i < ir.GetNPoints(); i++)
   {
      const IntegrationPoint &ip = ir.IntPoint(i);
      Tr.SetIntPoint(&ip);
      CalcInverse(Tr.Jacobian(), J0i);

      el[0]->CalcDShape(ip, DSh_u);
      Mult(DSh_u, J0i, DS_u);
      MultAtB(PMatI_u, DS_u, F);

      el[1]->CalcShape(ip, Sh_p);
      double pres = Sh_p * *elfun[1];
      double mu = c_mu->Eval(Tr, ip);      
      double dJ = F.Det();

      CalcInverseTranspose(F, FinvT);

      // Precompute constants used in the inner loops
      double weight_factor = ip.weight * Tr.Weight();
      double dJ_weight_factor = dJ * weight_factor;

      // u,u block
      for (int i_u = 0; i_u < dof_u; i_u++) {
         for (int i_dim = 0; i_dim < dim; i_dim++) {
            for (int j_u = 0; j_u < dof_u; j_u++) {
               for (int j_dim = 0; j_dim < dim; j_dim++) {

                  // Cache DS_u values to avoid repeated indexing
                  double DS_u_iu_l[dim], DS_u_ju_n[dim];
                  for (int l = 0; l < dim; l++) {
                     DS_u_iu_l[l] = DS_u(i_u, l);
                     DS_u_ju_n[l] = DS_u(j_u, l);
                  }

                  for (int n = 0; n < dim; n++) {
                     for (int m = 0; m < dim; m++) {
                        if (m == j_dim) {
                           for (int k = 0; k < dim; k++) {
                              if (k == i_dim) {
                                 for (int l = 0; l < dim; l++) {
                                    (*elmats(0,0))(i_u + i_dim*dof_u, j_u + j_dim*dof_u) +=
                                       dJ_weight_factor * (mu * F(k,l) - pres * FinvT(k,l)) * FinvT(m,n) * DS_u_iu_l[l] * DS_u_ju_n[n];

                                    if (m == k && n == l) {
                                       (*elmats(0,0))(i_u + i_dim*dof_u, j_u + j_dim*dof_u) +=
                                          dJ_weight_factor * mu * DS_u_iu_l[l] * DS_u_ju_n[n];
                                    }

                                    for (int a = 0; a < dim; a++) {
                                       for (int b = 0; b < dim; b++) {
                                          if (a == n && b == m) {
                                             (*elmats(0,0))(i_u + i_dim*dof_u, j_u + j_dim*dof_u) +=
                                                dJ_weight_factor * pres * FinvT(k,a) * FinvT(b,l) * DS_u_iu_l[l] * DS_u_ju_n[n];
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }

      // u,p and p,u blocks
      for (int i_p = 0; i_p < dof_p; i_p++) {
         double Sh_p_ip = Sh_p(i_p); // Cache Sh_p value
         for (int j_u = 0; j_u < dof_u; j_u++) {
            for (int dim_u = 0; dim_u < dim; dim_u++) {
               for (int l = 0; l < dim; l++) {
                  double term = dJ_weight_factor * FinvT(dim_u,l) * DS_u(j_u,l) * Sh_p_ip;
                  (*elmats(1,0))(i_p, j_u + dof_u * dim_u) += term;
                  (*elmats(0,1))(j_u + dof_u * dim_u, i_p) -= term;
               }               
            }
         }
      }
   }
}