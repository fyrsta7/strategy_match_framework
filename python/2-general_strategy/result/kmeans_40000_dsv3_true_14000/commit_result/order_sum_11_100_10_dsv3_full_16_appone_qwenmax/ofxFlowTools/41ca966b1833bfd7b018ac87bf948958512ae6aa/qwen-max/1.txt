//--------------------------------------------------------------
void ftFluidFlow::update(float _deltaTime){
    float timeStep = _deltaTime * speed.get() * simulationWidth;
    
    ofPushStyle();
    ofEnableBlendMode(OF_BLENDMODE_DISABLED);

    ftPingPongFbo& velocityFbo = inputFbo;
    ftPingPongFbo& densityFbo = outputFbo;
    
    // Precompute dissipation values to avoid repeated calls
    float dissipationVelValue = 1.0 - dissipationVel.get();
    float dissipationDenValue = 1.0 - dissipationDen.get();
    float dissipationPrsValue = 1.0 - dissipationPrs.get();
    
    // ADVECT
    velocityFbo.swap();
    advectShader.update(velocityFbo, velocityFbo.getBackTexture(), velocityFbo.getBackTexture(), timeStep, dissipationVelValue);
    velocityFbo.swap();
    applyObstacleShader.update(velocityFbo, velocityFbo.getBackTexture(), obstacleOffsetFbo.getTexture(), -1.0);
    
    // ADD FORCES: DIFFUSE
    if (viscosity.get() > 0.0) {
        for (int i = 0; i < numJacobiIterations.get(); i++) {
            velocityFbo.swap();
            diffuseShader.update(velocityFbo, velocityFbo.getBackTexture(), viscosity.get());
        }
        velocityFbo.swap();
        applyObstacleShader.update(velocityFbo, velocityFbo.getBackTexture(), obstacleOffsetFbo.getTexture(), -1.0);
    }
    
    // ADD FORCES: VORTEX CONFINEMENT
    if (vorticity.get() > 0.0) {
        vorticityVelocityShader.update(vorticityVelocityFbo, velocityFbo.getTexture());
        vorticityConfinementShader.update(vorticityConfinementFbo, vorticityVelocityFbo.getTexture(), timeStep, vorticity.get());
        addVelocity(vorticityConfinementFbo.getTexture());
        velocityFbo.swap();
        applyObstacleShader.update(velocityFbo, velocityFbo.getBackTexture(), obstacleOffsetFbo.getTexture(), -1.0);
    }
    
    // ADD FORCES: SMOKE BUOYANCY
    if (smokeSigma.get() > 0.0 && smokeWeight.get() > 0.0 ) {
        temperatureFbo.swap();
        advectShader.update(temperatureFbo, temperatureFbo.getBackTexture(), velocityFbo.getTexture(), timeStep, dissipationDenValue);
        temperatureFbo.swap();
        clampLengthShader.update(temperatureFbo, temperatureFbo.getBackTexture(), 2.0, 1.0);
        temperatureFbo.swap();
        applyObstacleShader.update(temperatureFbo, temperatureFbo.getBackTexture(), obstacleOffsetFbo.getTexture(), 1.0);
        ftUtil::zero(smokeBuoyancyFbo);
        smokeBuoyancyShader.update(smokeBuoyancyFbo, temperatureFbo.getTexture(), densityFbo.getTexture(), ambientTemperature.get(), timeStep, smokeSigma.get(), smokeWeight.get(), gravity.get());
        addVelocity(smokeBuoyancyFbo.getTexture());
        velocityFbo.swap();
        applyObstacleShader.update(velocityFbo, velocityFbo.getBackTexture(), obstacleOffsetFbo.getTexture(), -1.0);
    }
    else {
        ftUtil::zero(temperatureFbo);
    }
    
    // PRESSURE: DIVERGENCE
    ftUtil::zero(divergenceFbo);
    divergenceShader.update(divergenceFbo, velocityFbo.getTexture());
    
    // PRESSURE: JACOBI
    pressureFbo.swap();
    multiplyForceShader.update(pressureFbo, pressureFbo.getBackTexture(), dissipationPrsValue);
    for (int i = 0; i < numJacobiIterations.get(); i++) {
        pressureFbo.swap();
        jacobiShader.update(pressureFbo, pressureFbo.getBackTexture(), divergenceFbo.getTexture());
        pressureFbo.swap();
        applyObstacleShader.update(pressureFbo, pressureFbo.getBackTexture(), obstacleOffsetFbo.getTexture(), 1.0);
    }
    
    // PRESSURE: SUBSTRACT GRADIENT
    velocityFbo.swap();
    substractGradientShader.update(velocityFbo, velocityFbo.getBackTexture(), pressureFbo.getTexture());
    velocityFbo.swap();
    applyObstacleShader.update(velocityFbo, velocityFbo.getBackTexture(), obstacleOffsetFbo.getTexture(), -1.0);
    
    // DENSITY:
    densityFbo.swap();
    advectShader.update(densityFbo, densityFbo.getBackTexture(), velocityFbo.getTexture(), timeStep, dissipationDenValue);
    densityFbo.swap();
    clampLengthShader.update(densityFbo, densityFbo.getBackTexture(), sqrt(3), 1.0);
    densityFbo.swap();
    applyObstacleShader.update(densityFbo, densityFbo.getBackTexture(), obstacleOffsetFbo.getTexture(), 1.0);
    
    ofPopStyle();
}