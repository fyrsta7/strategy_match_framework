void MsgCppGenerator::generateDescriptorClass(const ClassInfo& info)
{
    CC << "class " << info.msgdescclass << " : public cClassDescriptor\n";
    CC << "{\n";
    CC << "  private:\n";
    CC << "    mutable const char **propertynames;\n";
    CC << "  public:\n";
    CC << "    " << info.msgdescclass << "();\n";
    CC << "    virtual ~" << info.msgdescclass << "();\n";
    CC << "\n";
    CC << "    virtual bool doesSupport(cObject *obj) const;\n";
    CC << "    virtual const char **getPropertyNames() const;\n";
    CC << "    virtual const char *getProperty(const char *propertyname) const;\n";
    CC << "    virtual int getFieldCount() const;\n";
    CC << "    virtual const char *getFieldName(int field) const;\n";
    CC << "    virtual int findField(const char *fieldName) const;\n";
    CC << "    virtual unsigned int getFieldTypeFlags(int field) const;\n";
    CC << "    virtual const char *getFieldTypeString(int field) const;\n";
    CC << "    virtual const char **getFieldPropertyNames(int field) const;\n";
    CC << "    virtual const char *getFieldProperty(int field, const char *propertyname) const;\n";
    CC << "    virtual int getFieldArraySize(void *object, int field) const;\n";
    CC << "\n";
    CC << "    virtual std::string getFieldValueAsString(void *object, int field, int i) const;\n";
    CC << "    virtual bool setFieldValueAsString(void *object, int field, int i, const char *value) const;\n";
    CC << "\n";
    CC << "    virtual const char *getFieldStructName(int field) const;\n";
    CC << "    virtual void *getFieldStructValuePointer(void *object, int field, int i) const;\n";
    CC << "};\n\n";

    // register class
    CC << "Register_ClassDescriptor(" << info.msgdescclass << ");\n\n";

    // ctor, dtor
    size_t fieldcount = info.fieldlist.size();
    std::string qualifiedrealmsgclass = prefixWithNamespace(info.realmsgclass);
    CC << "" << info.msgdescclass << "::" << info.msgdescclass << "() : cClassDescriptor(\"" << qualifiedrealmsgclass << "\", \"" << info.msgbaseclass << "\")\n";
    CC << "{\n";
    CC << "    propertynames = NULL;\n";
    CC << "}\n";
    CC << "\n";

    CC << "" << info.msgdescclass << "::~" << info.msgdescclass << "()\n";
    CC << "{\n";
    CC << "    delete[] propertynames;\n";
    CC << "}\n";
    CC << "\n";

    // doesSupport()
    CC << "bool " << info.msgdescclass << "::doesSupport(cObject *obj) const\n";
    CC << "{\n";
    CC << "    return dynamic_cast<" << info.msgclass << " *>(obj)!=NULL;\n";
    CC << "}\n";
    CC << "\n";

    // getPropertyNames()
    CC << "const char **" << info.msgdescclass << "::getPropertyNames() const\n";
    CC << "{\n";
    CC << "    if (!propertynames) {\n";
    CC << "        static const char *names[] = { ";
    for (const auto& key : info.props) {
        CC << opp_quotestr(key.first.c_str()) << ", ";
    }
    CC << " NULL };\n";
    CC << "        cClassDescriptor *basedesc = getBaseClassDescriptor();\n";
    CC << "        const char **basenames = basedesc ? basedesc->getPropertyNames() : NULL;\n";
    CC << "        propertynames = mergeLists(basenames, names);\n";
    CC << "    }\n";
    CC << "    return propertynames;\n";
    CC << "}\n";
    CC << "\n";

    // getProperty()
    CC << "const char *" << info.msgdescclass << "::getProperty(const char *propertyname) const\n";
    CC << "{\n";
    for (const auto& key : info.props) {
        CC << "    if (!strcmp(propertyname,"<< opp_quotestr(key.first.c_str()) << ")) return " << opp_quotestr(key.second.c_str()) << ";\n";
    }
    CC << "    cClassDescriptor *basedesc = getBaseClassDescriptor();\n";
    CC << "    return basedesc ? basedesc->getProperty(propertyname) : NULL;\n";
    CC << "}\n";
    CC << "\n";

    // getFieldCount()
    CC << "int " << info.msgdescclass << "::getFieldCount() const\n";
    CC << "{\n";
    CC << "    cClassDescriptor *basedesc = getBaseClassDescriptor();\n";
    CC << "    return basedesc ? " << fieldcount << "+basedesc->getFieldCount() : " << fieldcount << ";\n";
    CC << "}\n";
    CC << "\n";

    // getFieldTypeFlags()
    CC << "unsigned int " << info.msgdescclass << "::getFieldTypeFlags(int field) const\n";
    CC << "{\n";
    CC << "    cClassDescriptor *basedesc = getBaseClassDescriptor();\n";
    CC << "    if (basedesc) {\n";
    CC << "        if (field < basedesc->getFieldCount())\n";
    CC << "            return basedesc->getFieldTypeFlags(field);\n";
    CC << "        field -= basedesc->getFieldCount();\n";
    CC << "    }\n";
    if (fieldcount == 0) {
        CC << "    return 0;\n";
    } else {
        CC << "    static unsigned int fieldTypeFlags[] = {\n";
        for (const auto& it : info.fieldlist)
        {
            StringVector flags;
            ClassType classType = getClassType(it.ftype);
            if (it.fisarray)
                flags.push_back("FD_ISARRAY");
            if (it.fkind == "struct")
                flags.push_back("FD_ISCOMPOUND");
            if (it.fispointer)
                flags.push_back("FD_ISPOINTER");
            if (classType == COBJECT || classType == CNAMEDOBJECT)
                flags.push_back("FD_ISCOBJECT");
            if (classType == COWNEDOBJECT)
                flags.push_back("FD_ISCOBJECT | FD_ISCOWNEDOBJECT");

            if (it.feditable || (info.generate_setters_in_descriptor && it.fkind == "basic" && it.editNotDisabled))
                flags.push_back("FD_ISEDITABLE");
            std::string flagss;
            if (flags.empty())
                flagss = "0" ;
            else
            {
                flagss = flags[0];
                for (size_t i=1; i<flags.size(); i++)
                    flagss = flagss + " | " + flags[i];
            }

            CC << "        " << flagss << ",\n";
        }
        CC << "    };\n";
        CC << "    return (field>=0 && field<" << fieldcount << ") ? fieldTypeFlags[field] : 0;\n";
    }
    CC << "}\n";
    CC << "\n";

    // getFieldName()
    CC << "const char *" << info.msgdescclass << "::getFieldName(int field) const\n";
    CC << "{\n";
    CC << "    cClassDescriptor *basedesc = getBaseClassDescriptor();\n";
    CC << "    if (basedesc) {\n";
    CC << "        if (field < basedesc->getFieldCount())\n";
    CC << "            return basedesc->getFieldName(field);\n";
    CC << "        field -= basedesc->getFieldCount();\n";
    CC << "    }\n";
    if (fieldcount == 0) {
        CC << "    return NULL;\n";
    } else {
        CC << "    static const char *fieldNames[] = {\n";
        for (const auto& it : info.fieldlist)
        {
            CC << "        \"" << it.fname << "\",\n";
        }
        CC << "    };\n";
        CC << "    return (field>=0 && field<" << fieldcount << ") ? fieldNames[field] : NULL;\n";
    }
    CC << "}\n";
    CC << "\n";

    // findField()
    CC << "int " << info.msgdescclass << "::findField(const char *fieldName) const\n";
    CC << "{\n";
    CC << "    cClassDescriptor *basedesc = getBaseClassDescriptor();\n";
    if (fieldcount > 0) {
        CC << "    int base = basedesc ? basedesc->getFieldCount() : 0;\n";
        for (size_t i=0; i < info.fieldlist.size(); ++i)
        {
            char c = info.fieldlist[i].fname[0];
            CC << "    if (fieldName[0]=='" << c << "' && strcmp(fieldName, \""<<info.fieldlist[i].fname<<"\")==0) return base+" << i << ";\n";
        }
    }
    CC << "    return basedesc ? basedesc->findField(fieldName) : -1;\n";
    CC << "}\n";
    CC << "\n";

    // getFieldTypeString()
    CC << "const char *" << info.msgdescclass << "::getFieldTypeString(int field) const\n";
    CC << "{\n";
    CC << "    cClassDescriptor *basedesc = getBaseClassDescriptor();\n";
    CC << "    if (basedesc) {\n";
    CC << "        if (field < basedesc->getFieldCount())\n";
    CC << "            return basedesc->getFieldTypeString(field);\n";
    CC << "        field -= basedesc->getFieldCount();\n";
    CC << "    }\n";
    if (fieldcount == 0) {
        CC << "    return NULL;\n";
    } else {
        CC << "    static const char *fieldTypeStrings[] = {\n";
        for (const auto& it : info.fieldlist)
        {
            CC << "        \"" << it.ftype << "\",\n"; // note: NOT $fieldtypeqname! that's getFieldStructName()
        }
        CC << "    };\n";
        CC << "    return (field>=0 && field<" << fieldcount << ") ? fieldTypeStrings[field] : NULL;\n";
    }
    CC << "}\n";
    CC << "\n";

    // getFieldPropertyNames()
    CC << "const char **" << info.msgdescclass << "::getFieldPropertyNames(int field) const\n";
    CC << "{\n";
    CC << "    cClassDescriptor *basedesc = getBaseClassDescriptor();\n";
    CC << "    if (basedesc) {\n";
    CC << "        if (field < basedesc->getFieldCount())\n";
    CC << "            return basedesc->getFieldPropertyNames(field);\n";
    CC << "        field -= basedesc->getFieldCount();\n";
    CC << "    }\n";
    CC << "    switch (field) {\n";
    for (size_t i=0; i < fieldcount; ++i)
    {
        const Properties &ref = info.fieldlist[i].fprops;
        if (!ref.empty()) {
            CC << "        case " << i << ": {\n";
            CC << "            static const char *names[] = { ";
            for (const auto& it : ref) {
                CC << opp_quotestr(it.first.c_str()) << ", ";
            }
            CC << " NULL };\n";
            CC << "            return names;\n";
            CC << "        }\n";
        }
    }
    CC << "        default: return NULL;\n";
    CC << "    }\n";
    CC << "}\n";
    CC << "\n";


    // getFieldProperty()
    CC << "const char *" << info.msgdescclass << "::getFieldProperty(int field, const char *propertyname) const\n";
    CC << "{\n";
    CC << "    cClassDescriptor *basedesc = getBaseClassDescriptor();\n";
    CC << "    if (basedesc) {\n";
    CC << "        if (field < basedesc->getFieldCount())\n";
    CC << "            return basedesc->getFieldProperty(field, propertyname);\n";
    CC << "        field -= basedesc->getFieldCount();\n";
    CC << "    }\n";
    CC << "    switch (field) {\n";

    for (size_t i=0; i < fieldcount; ++i)
    {
        const Properties &ref = info.fieldlist[i].fprops;
        if (!ref.empty()) {
            CC << "        case " << i << ":\n";
            for (const auto& it : ref) {
                std::string prop = opp_quotestr(it.second.c_str());
                CC << "            if (!strcmp(propertyname,\"" << it.first << "\")) return " << prop << ";\n";
            }
            CC << "            return NULL;\n";
        }
    }

    CC << "        default: return NULL;\n";
    CC << "    }\n";
    CC << "}\n";
    CC << "\n";

    // getFieldArraySize()
    CC << "int " << info.msgdescclass << "::getFieldArraySize(void *object, int field) const\n";
    CC << "{\n";
    CC << "    cClassDescriptor *basedesc = getBaseClassDescriptor();\n";
    CC << "    if (basedesc) {\n";
    CC << "        if (field < basedesc->getFieldCount())\n";
    CC << "            return basedesc->getFieldArraySize(object, field);\n";
    CC << "        field -= basedesc->getFieldCount();\n";
    CC << "    }\n";
    CC << "    " << info.msgclass << " *pp = (" << info.msgclass << " *)object; (void)pp;\n";
    CC << "    switch (field) {\n";
    for (size_t i=0; i < fieldcount; i++) {
        if (info.fieldlist[i].fisarray) {
            CC << "        case " << i << ": ";
            if (!info.fieldlist[i].farraysize.empty()) {
                CC << "return " << info.fieldlist[i].farraysize << ";\n";
            } else if (info.classtype == STRUCT) {
                CC << "return pp->" << info.fieldlist[i].varsize << ";\n";
            } else {
                CC << "return pp->" << info.fieldlist[i].getsize << "();\n";
            }
        }
    }
    CC << "        default: return 0;\n";
    CC << "    }\n";
    CC << "}\n";
    CC << "\n";

    // getFieldValueAsString()
    CC << "std::string " << info.msgdescclass << "::getFieldValueAsString(void *object, int field, int i) const\n";
    CC << "{\n";
    CC << "    cClassDescriptor *basedesc = getBaseClassDescriptor();\n";
    CC << "    if (basedesc) {\n";
    CC << "        if (field < basedesc->getFieldCount())\n";
    CC << "            return basedesc->getFieldValueAsString(object,field,i);\n";
    CC << "        field -= basedesc->getFieldCount();\n";
    CC << "    }\n";
    CC << "    " << info.msgclass << " *pp = (" << info.msgclass << " *)object; (void)pp;\n";
    CC << "    switch (field) {\n";
    for (const auto& fieldInfo : info.fieldlist)
    {
        if (fieldInfo.fkind == "basic" || (fieldInfo.fkind == "struct" && !fieldInfo.tostring.empty())) {
            std::string tostringB, tostringE;
            if (fieldInfo.tostring[0] == '.') {
                tostringB = "";
                tostringE = fieldInfo.tostring;
            }
            else {
                tostringB = fieldInfo.tostring + "(";
                tostringE = ")";
            }
            CC << "        case " << (&fieldInfo - &info.fieldlist[0]) << ": ";
            if (info.classtype == STRUCT) {
                if (fieldInfo.fisarray) {
                    if (!fieldInfo.farraysize.empty()) {
                        CC << "if (i>=" << fieldInfo.farraysize << ") return \"\";\n";
                    } else {
                        CC << "if (i>=pp->" << fieldInfo.varsize << ") return \"\";\n";
                    }
                    CC << "                return " << tostringB << "pp->" << fieldInfo.var << "[i]" << tostringE << ";\n";
                } else {
                    CC << "return " << tostringB << "pp->" << fieldInfo.var << tostringE << ";\n";
                }
            } else {
                if (fieldInfo.fisarray) {
                    CC << "return " << tostringB << "pp->" << fieldInfo.getter << "(i)" << tostringE << ";\n";
                } else {
                    CC << "return " << tostringB << "pp->" << fieldInfo.getter << "()" << tostringE << ";\n";
                }
            }
        } else if (fieldInfo.fkind == "struct") {
            CC << "        case " << (&fieldInfo - &info.fieldlist[0]) << ": ";
            if (info.classtype == STRUCT) {
                if (fieldInfo.fisarray) {
                    CC << "{std::stringstream out; out << pp->" << fieldInfo.var << "[i]; return out.str();}\n";
                } else {
                    CC << "{std::stringstream out; out << pp->" << fieldInfo.var << "; return out.str();}\n";
                }
            } else {
                if (fieldInfo.fisarray) {
                    CC << "{std::stringstream out; out << pp->" << fieldInfo.getter << "(i); return out.str();}\n";
                } else {
                    CC << "{std::stringstream out; out << pp->" << fieldInfo.getter << "(); return out.str();}\n";
                }
            }
        } else {
            throw NEDException("internal error");
        }
    }
    CC << "        default: return \"\";\n";
    CC << "    }\n";
    CC << "}\n";
    CC << "\n";

    // setFieldValueAsString()
    CC << "bool " << info.msgdescclass << "::setFieldValueAsString(void *object, int field, int i, const char *value) const\n";
    CC << "{\n";
    CC << "    cClassDescriptor *basedesc = getBaseClassDescriptor();\n";
    CC << "    if (basedesc) {\n";
    CC << "        if (field < basedesc->getFieldCount())\n";
    CC << "            return basedesc->setFieldValueAsString(object,field,i,value);\n";
    CC << "        field -= basedesc->getFieldCount();\n";
    CC << "    }\n";
    CC << "    " << info.msgclass << " *pp = (" << info.msgclass << " *)object; (void)pp;\n";
    CC << "    switch (field) {\n";
    for (const auto& fieldInfo : info.fieldlist)
    {
        if (fieldInfo.feditable || (info.generate_setters_in_descriptor && fieldInfo.fkind == "basic" && fieldInfo.editNotDisabled)) {
            if (fieldInfo.fromstring.empty()) {
                errors->addError(fieldInfo.nedElement, "Field '%s' is editable, but fromstring() function is unspecified", fieldInfo.fname.c_str());
                continue;
            }
            CC << "        case " << (&fieldInfo - &info.fieldlist[0]) << ": ";
            if (info.classtype == STRUCT) {
                if (fieldInfo.fisarray) {
                    if (!fieldInfo.farraysize.empty()) {
                        CC << "if (i>=" << fieldInfo.farraysize << ") return false;\n";
                    } else {
                        CC << "if (i>=pp->" << fieldInfo.varsize << ") return false;\n";
                    }
                    CC << "                pp->"<<fieldInfo.var << "[i] = " << fieldInfo.fromstring << "(value); return true;\n";
                } else {
                    CC << "pp->" << fieldInfo.var << " = " << fieldInfo.fromstring << "(value); return true;\n";
                }
            } else {
                if (fieldInfo.fisarray) {
                    CC << "pp->" << fieldInfo.setter << "(i," << fieldInfo.fromstring << "(value)); return true;\n";
                } else {
                    CC << "pp->" << fieldInfo.setter << "(" << fieldInfo.fromstring << "(value)); return true;\n";
                }
            }
        }
    }
    CC << "        default: return false;\n";
    CC << "    }\n";
    CC << "}\n";
    CC << "\n";

    // getFieldStructName()
    CC << "const char *" << info.msgdescclass << "::getFieldStructName(int field) const\n";
    CC << "{\n";
    CC << "    cClassDescriptor *basedesc = getBaseClassDescriptor();\n";
    CC << "    if (basedesc) {\n";
    CC << "        if (field < basedesc->getFieldCount())\n";
    CC << "            return basedesc->getFieldStructName(field);\n";
    CC << "        field -= basedesc->getFieldCount();\n";
    CC << "    }\n";
    if (fieldcount == 0) {
        CC << "    return NULL;\n";
    } else {
        CC << "    switch (field) {\n";
        for (const auto& fieldInfo : info.fieldlist)
        {
            bool opaque = fieldInfo.fopaque;  // TODO: @opaque should rather be the attribute of the field's type, not the field itself
            if (fieldInfo.fkind == "struct" && !opaque) {
                CC << "        case " << (&fieldInfo - &info.fieldlist[0]) << ": return opp_typename(typeid(" << fieldInfo.ftype << "));\n";
            }
        }
        CC << "        default: return NULL;\n";
        CC << "    };\n";
    }
    CC << "}\n";
    CC << "\n";

    // getFieldStructValuePointer()
    CC << "void *" << info.msgdescclass << "::getFieldStructValuePointer(void *object, int field, int i) const\n";
    CC << "{\n";
    CC << "    cClassDescriptor *basedesc = getBaseClassDescriptor();\n";
    CC << "    if (basedesc) {\n";
    CC << "        if (field < basedesc->getFieldCount())\n";
    CC << "            return basedesc->getFieldStructValuePointer(object, field, i);\n";
    CC << "        field -= basedesc->getFieldCount();\n";
    CC << "    }\n";
    CC << "    " << info.msgclass << " *pp = (" << info.msgclass << " *)object; (void)pp;\n";
    CC << "    switch (field) {\n";
    for (const auto& fieldInfo : info.fieldlist)
    {
        bool opaque = fieldInfo.fopaque;  //# TODO: @opaque should rather be the attribute of the field's type, not the field itself
        if (fieldInfo.fkind == "struct" && !opaque) {
            std::string cast;
            std::string value;
            if (info.classtype == STRUCT) {
                if (fieldInfo.fisarray) {
                    value = std::string("pp->") + fieldInfo.var + "[i]";
                } else {
                    value = std::string("pp->") + fieldInfo.var;
                }
            } else {
                if (fieldInfo.fisarray) {
                    value = std::string("pp->") + fieldInfo.getter + "(i)";
                } else {
                    value = std::string("pp->") + fieldInfo.getter + "()";
                }
            }
            ClassType fieldclasstype = getClassType(fieldInfo.ftype);
            cast = "(void *)";
            if (fieldclasstype == COBJECT || fieldclasstype == CNAMEDOBJECT || fieldclasstype == COWNEDOBJECT)
                cast = cast + "static_cast<cObject *>";
            if (fieldInfo.fispointer) {
                CC << "        case " << (&fieldInfo - &info.fieldlist[0]) << ": return " << cast << "(" << value << "); break;\n";
            } else {
                CC << "        case " << (&fieldInfo - &info.fieldlist[0]) << ": return " << cast << "(&" << value << "); break;\n";
            }
        }
    }
    CC << "        default: return NULL;\n";
    CC << "    }\n";
    CC << "}\n";
    CC << "\n";
}