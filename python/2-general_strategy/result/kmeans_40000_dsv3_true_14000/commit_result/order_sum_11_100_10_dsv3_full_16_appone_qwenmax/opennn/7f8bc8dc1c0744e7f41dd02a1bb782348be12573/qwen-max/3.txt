Tensor<double> ConvolutionalLayer::calculate_hidden_delta_convolutional(ConvolutionalLayer* next_layer_pointer,
                                                                        const Tensor<double>&,
                                                                        const Tensor<double>& activations_derivatives,
                                                                        const Tensor<double>& next_layer_delta) const
{
    // Current layer's values

    const size_t images_number = next_layer_delta.get_dimension(0);
    const size_t filters_number = get_filters_number();
    const size_t output_rows_number = get_outputs_rows_number();
    const size_t output_columns_number = get_outputs_columns_number();

    // Next layer's values

    const size_t next_layers_filters_number = next_layer_pointer->get_filters_number();
    const size_t next_layers_filter_rows = next_layer_pointer->get_filters_rows_number();
    const size_t next_layers_filter_columns = next_layer_pointer->get_filters_columns_number();
    const size_t next_layers_output_rows = next_layer_pointer->get_outputs_rows_number();
    const size_t next_layers_output_columns = next_layer_pointer->get_outputs_columns_number();
    const size_t next_layers_row_stride = next_layer_pointer->get_row_stride();
    const size_t next_layers_column_stride = next_layer_pointer->get_column_stride();

    const Tensor<double> next_layers_weights = next_layer_pointer->get_synaptic_weights();

    const size_t next_delta_dimension_1 = next_layer_delta.get_dimension(1);
    const size_t next_delta_dimension_2 = next_layer_delta.get_dimension(2);

    Tensor<double> hidden_delta(Vector<size_t>({images_number, filters_number, output_rows_number, output_columns_number}));

    const size_t size = hidden_delta.size();

    #pragma omp parallel for

    for(size_t tensor_index = 0; tensor_index < size; tensor_index++)
    {
        const size_t image_index = tensor_index / (filters_number * output_rows_number * output_columns_number);
        const size_t channel_index = (tensor_index / (output_rows_number * output_columns_number)) % filters_number;
        const size_t row_index = (tensor_index / output_columns_number) % output_rows_number;
        const size_t column_index = tensor_index % output_columns_number;

        double sum = 0.0;

        int weights_row_index;
        int weights_column_index;
        double delta_element;
        double weight;

        for(size_t i = 0; i < next_layers_filters_number; i++)
        {
            const size_t i_offset = i + next_delta_dimension_1 * next_delta_dimension_2;

            for(size_t j = 0; j < next_layers_output_rows; j++)
            {
                weights_row_index = row_index - j * next_layers_row_stride;

                if(weights_row_index >= 0 && weights_row_index < next_layers_filter_rows)
                {
                    const size_t j_offset = j + next_delta_dimension_2;

                    for(size_t k = 0; k < next_layers_output_columns; k++)
                    {
                        weights_column_index = column_index - k * next_layers_column_stride;

                        if(weights_column_index >= 0 && weights_column_index < next_layers_filter_columns)
                        {
                            // Precompute index for next_layer_delta to avoid redundant calculations
                            const size_t delta_index = image_index + images_number * (i_offset + k * next_delta_dimension_2 + j_offset);

                            delta_element = next_layer_delta[delta_index];
                            weight = next_layers_weights(i, channel_index, weights_row_index, weights_column_index);

                            sum += delta_element * weight;
                        }
                    }
                }
            }
        }

        hidden_delta(image_index, channel_index, row_index, column_index) = sum;
    }

    return hidden_delta * activations_derivatives;
}