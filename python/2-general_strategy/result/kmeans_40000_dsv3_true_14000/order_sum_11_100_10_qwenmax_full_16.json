{
  "metadata": {
    "min_cluster_size": 16,
    "total_clusters": 8,
    "clusters_with_summaries": 8,
    "missing_summaries_count": 0
  },
  "combined_clusters": [
    {
      "cluster_id": "86",
      "size": 49,
      "repositories_distribution": {
        "tensorflow": 11,
        "NPLRuntime": 1,
        "osgearth": 1,
        "Seamly2D": 1,
        "xbmc": 3,
        "patchelf": 1,
        "spades": 2,
        "synfig": 1,
        "operon": 1,
        "bg3se": 1,
        "kate": 1,
        "kicad-source-mirror": 1,
        "ssde": 1,
        "fix8": 1,
        "sycl": 5,
        "omnetpp": 1,
        "CuraEngine": 1,
        "cegui": 1,
        "Floorp": 1,
        "stpyv8": 1,
        "bibletime": 1,
        "SysmonForLinux": 1,
        "llvm-leg": 1,
        "peercoin": 1,
        "hotspot": 1,
        "x0": 1,
        "bitcoin": 1,
        "ardupilot": 1,
        "pythonqt": 1,
        "chatterino2": 1,
        "maps-core": 1,
        "qtdeclarative": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves replacing value-based loop iterations with reference-based iterations to reduce copy overhead and improve performance.",
        "code_examples": [
          [
            "// Before\nfor (auto setting : prefs) {\n    gfxPrefs::Pref* pref = gfxPrefs::all()[setting.index()];\n    pref->SetCachedValue(setting.value());\n}",
            "// After\nconst nsTArray<gfxPrefs::Pref*>& globalPrefs = gfxPrefs::all();\nfor (auto& setting : prefs) {\n    gfxPrefs::Pref* pref = globalPrefs[setting.index()];\n    pref->SetCachedValue(setting.value());\n}"
          ],
          [
            "// Before\nfor (auto sig_pair : partial_sigs) {\n    SerializeToVector(s, CompactSizeWriter(PSBT_IN_PARTIAL_SIG), Span{sig_pair.second.first});\n    s << sig_pair.second.second;\n}",
            "// After\nfor (const auto& sig_pair : partial_sigs) {\n    SerializeToVector(s, CompactSizeWriter(PSBT_IN_PARTIAL_SIG), Span{sig_pair.second.first});\n    s << sig_pair.second.second;\n}"
          ]
        ],
        "application_conditions": [
          "The loop iterates over a collection of objects where each object is larger than a pointer size, and the iteration variable is passed by value.",
          "The loop body accesses member variables or methods of the iteration variable without modifying the variable itself.",
          "The collection being iterated is not modified within the loop body, ensuring safe use of const references."
        ]
      },
      "commits": [
        {
          "repository_name": "tensorflow",
          "hash": "5e0db672b677752b19ab2c7b52d3a32b7e3ae8b7",
          "author": "Mehdi Amini",
          "date": "2021-12-28T23:32:24-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in test_infer_shaped_type_pass.cc (NFC)\n\nPiperOrigin-RevId: 418732883\nChange-Id: Ic34888d9edd04c28367ac8e6b6d4557980c7f023",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/test_infer_shaped_type_pass.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/5e0db672b677752b19ab2c7b52d3a32b7e3ae8b7",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `matchAndRewrite` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `matchAndRewrite` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "tensorflow",
          "hash": "7480941f2d6d46dd1c7ce0ebf9f7e311736e928d",
          "author": "Mehdi Amini",
          "date": "2021-12-29T00:15:57-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in reshape_simplifier.cc (NFC)\n\nPiperOrigin-RevId: 418737195\nChange-Id: I80c6acdac10978cb59d7030c94c7cb650522250d",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Transforms/reshape_simplifier.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/7480941f2d6d46dd1c7ce0ebf9f7e311736e928d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `reshape_simplifier.cc` file.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "NPLRuntime",
          "hash": "8a4073ca0890a53aeb571781657e8a57ee50a7ee",
          "author": "kkvskkkk",
          "date": "2017-08-02T16:10:46+08:00",
          "message": "optimize performance",
          "modified_files_count": 1,
          "modified_files": [
            "Client/trunk/ParaEngineClient/NPL/NPLHelper.cpp"
          ],
          "github_commit_url": "https://github.com/LiXizhi/NPLRuntime/commit/8a4073ca0890a53aeb571781657e8a57ee50a7ee",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "NPLHelper::SerializeToSCode"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing a string concatenation operation with a more efficient method to reduce overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing unnecessary string copying by using `std::string_view` instead of `std::string` in the `SerializeToSCode` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "osgearth",
          "hash": "4e2019530f30bc4e1f850f307efddb1d9337cf7a",
          "author": "Jason Beverage",
          "date": "2017-10-03T12:48:15-04:00",
          "message": "Applying reference optimization to offset codepath",
          "modified_files_count": 1,
          "modified_files": [
            "src/osgEarth/ElevationLayer.cpp"
          ],
          "github_commit_url": "https://github.com/gwaldron/osgearth/commit/4e2019530f30bc4e1f850f307efddb1d9337cf7a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ElevationLayerVector::populateHeightFieldAndNormalMap"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in the offset codepath.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "Seamly2D",
          "hash": "39a95d7e95a61913916fa1d50960985018a0f6fd",
          "author": "Roman Telezhynskyi",
          "date": "2017-08-04T21:25:59+03:00",
          "message": "Performance optimization.",
          "modified_files_count": 1,
          "modified_files": [
            "src/libs/vpatterndb/vcontainer.cpp"
          ],
          "github_commit_url": "https://github.com/FashionFreedom/Seamly2D/commit/39a95d7e95a61913916fa1d50960985018a0f6fd",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The commit replaces a loop that iterates over a container using indices with a range-based for loop to reduce overhead and improve readability.",
            "The optimization strategy involved replacing a loop that used value-based iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "tensorflow",
          "hash": "064772d6f1bc3048dd3c8dd8da5c2a27179b972f",
          "author": "Mehdi Amini",
          "date": "2021-12-28T22:26:49-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in optimize_mhlo.cc (NFC)\n\nPiperOrigin-RevId: 418727791\nChange-Id: I0eb619996990f46f4b0150257909974772220e5e",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/optimize_mhlo.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/064772d6f1bc3048dd3c8dd8da5c2a27179b972f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `matchAndRewrite` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in the `matchAndRewrite` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "spades",
          "hash": "8f9fafaa74162bc48ea3c6c4b2e2ff5ff01f0141",
          "author": "Anton Korobeynikov",
          "date": "2019-01-21T17:23:29+03:00",
          "message": "Speedup",
          "modified_files_count": 1,
          "modified_files": [
            "assembler/src/common/assembly_graph/core/graph_core.hpp"
          ],
          "github_commit_url": "https://github.com/ablab/spades/commit/8f9fafaa74162bc48ea3c6c4b2e2ff5ff01f0141",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "operon",
          "hash": "5fc734781021cf467482af25378195389a9f97df",
          "author": "Bogdan Burlacu",
          "date": "2019-08-05T17:58:59+02:00",
          "message": "Small performance improvement",
          "modified_files_count": 1,
          "modified_files": [
            "include/operon/core/eval.hpp"
          ],
          "github_commit_url": "https://github.com/heal-research/operon/commit/5fc734781021cf467482af25378195389a9f97df",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently used function.",
            "The optimization strategy involved reducing the number of temporary object creations by directly passing values instead of creating intermediate objects.",
            "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "tensorflow",
          "hash": "d3881dcc330f728aea4900fa058fbc95b686a923",
          "author": "Mehdi Amini",
          "date": "2021-12-28T20:28:46-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in merge_assuming_ops.cc (NFC)\n\nPiperOrigin-RevId: 418717143\nChange-Id: I951af3d09387ccdacc90ff7bf72fe26fc4eeccb1",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/merge_assuming_ops.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/d3881dcc330f728aea4900fa058fbc95b686a923",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "MoveIntoAssumingOpMatchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "tensorflow",
          "hash": "982b79df43b05910cca9fa19777072a02c2529ff",
          "author": "Mehdi Amini",
          "date": "2021-12-28T19:13:03-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in hlo_legalize_to_memref.cc (NFC)\n\nPiperOrigin-RevId: 418709823\nChange-Id: I151f9ab6dad865d7921a5cbda4d2b85c6ff293d7",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/hlo_legalize_to_memref.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/982b79df43b05910cca9fa19777072a02c2529ff",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "InsertDynamicMemrefCastOp"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `InsertDynamicMemrefCastOp` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "kate",
          "hash": "a7e8e22c3b6de7f6c9ab8751f838e440300aa2f7",
          "author": "Albert Astals Cid",
          "date": "2008-02-08T21:48:10+00:00",
          "message": "microoptimization\nconst & for foreach\n\nsvn path=/trunk/KDE/kdesdk/kate/; revision=772481",
          "modified_files_count": 1,
          "modified_files": [
            "kate/app/katemain.cpp"
          ],
          "github_commit_url": "https://github.com/KDE/kate/commit/a7e8e22c3b6de7f6c9ab8751f838e440300aa2f7",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "foreach"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy used was changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration using `const &` in a `foreach` loop to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration using `const &` in a `foreach` loop to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "spades",
          "hash": "5567aefdacf30ab65952b2ec5b82bced5b2b7ed0",
          "author": "Anton",
          "date": "2012-05-03T19:23:39+04:00",
          "message": "mapper speed improve",
          "modified_files_count": 1,
          "modified_files": [
            "assembler/src/debruijn/utils.hpp"
          ],
          "github_commit_url": "https://github.com/ablab/spades/commit/5567aefdacf30ab65952b2ec5b82bced5b2b7ed0",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved improving the speed of the mapper by enhancing the efficiency of the DeBruijn graph utility functions.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing a value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            false,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "tensorflow",
          "hash": "310d1654a43bd8091c006b66a8933d24082a372f",
          "author": "Mehdi Amini",
          "date": "2021-12-28T22:32:14-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in rank_specialization.cc (NFC)\n\nPiperOrigin-RevId: 418728399\nChange-Id: I5c32d13934161c4e9af44bac47cfc182b7e4c44d",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/rank_specialization.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/310d1654a43bd8091c006b66a8933d24082a372f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `matchAndRewrite` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "ssde",
          "hash": "7cd12d8543e899ad4993ade30a2fdcb6add86a08",
          "author": "Valentin Radu",
          "date": "2021-08-28T01:30:32+03:00",
          "message": "Small performance improvement",
          "modified_files_count": 1,
          "modified_files": [
            "common.h"
          ],
          "github_commit_url": "https://github.com/valinet/ssde/commit/7cd12d8543e899ad4993ade30a2fdcb6add86a08",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "HandlePolicyBinary"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing the number of conditional checks by consolidating redundant conditions in the `HandlePolicyBinary` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "fix8",
          "hash": "4d24bf547966aa0383b7a3bc261a7f742a4e0c51",
          "author": "David Dight",
          "date": "2017-09-15T14:47:02+10:00",
          "message": "FX-821 - perf improvement",
          "modified_files_count": 1,
          "modified_files": [
            "include/fix8/message.hpp"
          ],
          "github_commit_url": "https://github.com/fix8/fix8/commit/4d24bf547966aa0383b7a3bc261a7f742a4e0c51",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The commit message \"FX-821 - perf improvement\" suggests a performance optimization, but the specific strategy cannot be determined without the actual code changes.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The commit improves performance by optimizing message handling through more efficient data structure usage and reducing unnecessary operations.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            false,
            true,
            true,
            false,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "tensorflow",
          "hash": "af5d840bdb640d962562c57162f220a113492c95",
          "author": "Mehdi Amini",
          "date": "2021-12-28T19:41:08-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in legalize_gather_to_torch_index_select.cc (NFC)\n\nPiperOrigin-RevId: 418712251\nChange-Id: I81c39d2375edfddcac3a9a02a6335a6ec8fdf87d",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/legalize_gather_to_torch_index_select.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/af5d840bdb640d962562c57162f220a113492c95",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in the `matchAndRewrite` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "tensorflow",
          "hash": "460d330428b22ca0d762d454cffb47efddca4d50",
          "author": "Mehdi Amini",
          "date": "2021-12-28T20:14:55-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in lower_general_dot.cc (NFC)\n\nPiperOrigin-RevId: 418715880\nChange-Id: Ief8af229ee4a74a7ee8ff1552e27c6ba34fe0124",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/lower_general_dot.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/460d330428b22ca0d762d454cffb47efddca4d50",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ProcessDotArg"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy used was changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "tensorflow",
          "hash": "b85311f03b3165f2e2db08c102e71c7a59e8a9dc",
          "author": "Mehdi Amini",
          "date": "2021-12-28T07:33:13-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in chlo_ops.cc (NFC)\n\nPiperOrigin-RevId: 418623132\nChange-Id: Ic726902326ce2d7c348660a091776f6a7d20e83d",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/IR/chlo_ops.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/b85311f03b3165f2e2db08c102e71c7a59e8a9dc",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "GetBroadcastType"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in the `GetBroadcastType` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "CuraEngine",
          "hash": "bb5cbbd532b2708f065ce723196e93b56c2f953d",
          "author": "Diego Prado Gesto",
          "date": "2018-07-19T11:53:34+02:00",
          "message": "Fix for loop that creates an instance every time. Make it more efficient\nby using references, as it was before.\n\nContributes to CURA-5317.",
          "modified_files_count": 1,
          "modified_files": [
            "src/FffGcodeWriter.cpp"
          ],
          "github_commit_url": "https://github.com/Ultimaker/CuraEngine/commit/bb5cbbd532b2708f065ce723196e93b56c2f953d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "FffGcodeWriter::addMeshLayerToGCode_meshSurfaceMode"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "cegui",
          "hash": "d257b89eb972e0a155739381ddced2992a1ae07a",
          "author": "Timotei Dolean",
          "date": "2014-06-03T20:46:54+03:00",
          "message": "Small performance tweak",
          "modified_files_count": 1,
          "modified_files": [
            "cegui/src/WindowRendererSets/Core/ItemViewRenderer.cpp"
          ],
          "github_commit_url": "https://github.com/cegui/cegui/commit/d257b89eb972e0a155739381ddced2992a1ae07a",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "tensorflow",
          "hash": "44ac227766b56c631eceb8779ef73b663add81e1",
          "author": "Mehdi Amini",
          "date": "2021-12-28T21:18:58-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in mhlo_mark_shape_calc.cc (NFC)\n\nPiperOrigin-RevId: 418721323\nChange-Id: I2473fa8b9fef8f1b282e5fe64bef880596461b02",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/mhlo_mark_shape_calc.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/44ac227766b56c631eceb8779ef73b663add81e1",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "MarkShapeCalc::markI64ReturnedCpuScalarOps"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "stpyv8",
          "hash": "4c6ecc95f2b91e844ac0fa0566250c045d1504e6",
          "author": "Angelo Dell'Aera",
          "date": "2019-10-17T13:51:43+00:00",
          "message": "Performance optimization",
          "modified_files_count": 1,
          "modified_files": [
            "src/Wrapper.cpp"
          ],
          "github_commit_url": "https://github.com/cloudflare/stpyv8/commit/4c6ecc95f2b91e844ac0fa0566250c045d1504e6",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "CJavascriptArray::GetItem"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing the way items are accessed in an array to reduce overhead and improve performance.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "bibletime",
          "hash": "c353798d4259ff99a8ad1feed545e721339a7e8f",
          "author": "Jaak Ristioja",
          "date": "2023-01-27T17:29:07+02:00",
          "message": "frontend, BtModelViewReadDisplay: Trivial optimization to copyByReferences()",
          "modified_files_count": 1,
          "modified_files": [
            "src/frontend/display/btmodelviewreaddisplay.cpp"
          ],
          "github_commit_url": "https://github.com/bibletime/bibletime/commit/c353798d4259ff99a8ad1feed545e721339a7e8f",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based iteration to reference-based iteration in the `copyByReferences()` function to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "SysmonForLinux",
          "hash": "18738d42b6417792744734ce79631cb6f969e52a",
          "author": "Coleman Kane",
          "date": "2021-10-28T21:38:09-04:00",
          "message": "Use reference vars for iteration in sysmonLogView.cpp\n\nThe prior implementation declared a loop-local copy for each of the\niterators on filters & eventIdFields in processCmdLine. Issue #23\npoints out that this causes a compilation failure when -Werror -Wall\nis used, because this introduces an inefficiency. This change makes\nthese all references, which saves the superfluous copies and makes\nthe code compile again.\n\nFixes #23",
          "modified_files_count": 1,
          "modified_files": [
            "sysmonLogView/sysmonLogView.cpp"
          ],
          "github_commit_url": "https://github.com/microsoft/SysmonForLinux/commit/18738d42b6417792744734ce79631cb6f969e52a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "processCmdline"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy used was changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy used was changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing loop-local copies to reference variables for iteration to avoid unnecessary copies and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "tensorflow",
          "hash": "991efbd2f527ca2f4ec50e8df3565d734d1c2ba5",
          "author": "Mehdi Amini",
          "date": "2021-12-28T20:03:42-08:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in legalize_to_linalg.cc (NFC)\n\nPiperOrigin-RevId: 418714383\nChange-Id: If606ba8710bafb6d7a7d9a99a0afeb8c653458bf",
          "modified_files_count": 1,
          "modified_files": [
            "tensorflow/compiler/mlir/hlo/lib/Dialect/mhlo/transforms/legalize_to_linalg.cc"
          ],
          "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/991efbd2f527ca2f4ec50e8df3565d734d1c2ba5",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "getIndexingMaps"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "hotspot",
          "hash": "42dd61f870a4905db1a9e1dcff22f595006c2066",
          "author": "Milian Wolff",
          "date": "2023-08-04T17:29:19+02:00",
          "message": "fix clang-tidy performance-for-range-copy",
          "modified_files_count": 1,
          "modified_files": [
            "tests/integrationtests/tst_perfparser.cpp"
          ],
          "github_commit_url": "https://github.com/KDAB/hotspot/commit/42dd61f870a4905db1a9e1dcff22f595006c2066",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "searchForChildSymbol"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "ardupilot",
          "hash": "dbbf09d018d22e562272af47bc98043e4d73d97d",
          "author": "Peter Barker",
          "date": "2019-05-28T09:19:48+10:00",
          "message": "AP_Proximity: minor performance enhancements",
          "modified_files_count": 1,
          "modified_files": [
            "libraries/AP_Proximity/AP_Proximity_Backend.cpp"
          ],
          "github_commit_url": "https://github.com/ArduPilot/ardupilot/commit/dbbf09d018d22e562272af47bc98043e4d73d97d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "AP_Proximity_Backend::get_horizontal_distances"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing the loop iteration to use references instead of values to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing the number of distance calculations by reusing previously computed values within the `get_horizontal_distances` function.",
            "The optimization strategy involved reducing the number of distance calculations by only updating distances when necessary, based on the proximity sensor's state."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            false
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "pythonqt",
          "hash": "952193045b08f3b221c5c777971378a480b5a227",
          "author": "Florian Link",
          "date": "2013-01-29T08:56:43+00:00",
          "message": "performance improvement (merged from MeVisLab PythonQt)",
          "modified_files_count": 1,
          "modified_files": [
            "src/PythonQt.cpp"
          ],
          "github_commit_url": "https://github.com/MeVisLab/pythonqt/commit/952193045b08f3b221c5c777971378a480b5a227",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The commit likely implements a performance improvement by optimizing a specific function or operation in the PythonQt.cpp file, though the exact strategy cannot be determined without the code changes.",
            "The commit improves performance by optimizing the handling of Python object references to reduce overhead.",
            "The commit message indicates a performance improvement, but the specific optimization strategy cannot be determined without the actual code changes."
          ],
          "is_generic_optimization": [
            true,
            true,
            false,
            true,
            false
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "chatterino2",
          "hash": "01082b123f0c71e10192d7f16fa5fd8f36258061",
          "author": "pajlada",
          "date": "2019-05-01T22:36:32+02:00",
          "message": "Merge pull request #1050 from apa420/apa-pubsub-fix\n\nChanged to ref for better performance #1049",
          "modified_files_count": 1,
          "modified_files": [
            "src/providers/twitch/TwitchServer.cpp"
          ],
          "github_commit_url": "https://github.com/Chatterino/chatterino2/commit/01082b123f0c71e10192d7f16fa5fd8f36258061",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "TwitchServer::getChannelOrEmptyByID"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "Changed value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing a value-based parameter to a reference-based parameter to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "qtdeclarative",
          "hash": "5b81451d448d667b500ae6283ded9e59826e72b3",
          "author": "Shawn Rutledge",
          "date": "2022-09-01T22:12:32+02:00",
          "message": "Optimize QQuickMultiPointHandler::grabPoints slightly\n\nClazy reminded me about the usual const-ref optimization in a range for.\n\nPick-to: 6.4 6.3 6.2\nChange-Id: I2eafb49d341758829ce8fc43a8e5432a2d6dd4f6\nReviewed-by: Fabian Kosmale <fabian.kosmale@qt.io>",
          "modified_files_count": 1,
          "modified_files": [
            "src/quick/handlers/qquickmultipointhandler.cpp"
          ],
          "github_commit_url": "https://github.com/qt/qtdeclarative/commit/5b81451d448d667b500ae6283ded9e59826e72b3",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "QQuickMultiPointHandler::grabPoints"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9779105186462402
        },
        {
          "repository_name": "xbmc",
          "hash": "8196f918be28db1bb2d8ebac511357e54cefadba",
          "author": "Rechi",
          "date": "2022-03-01T23:31:00+00:00",
          "message": "[clang-tidy] performance-for-range-copy",
          "modified_files_count": 1,
          "modified_files": [
            "xbmc/settings/SubtitlesSettings.cpp"
          ],
          "github_commit_url": "https://github.com/xbmc/xbmc/commit/8196f918be28db1bb2d8ebac511357e54cefadba",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "CSubtitlesSettings::SettingOptionsSubtitleFontsFiller"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based range iteration with reference-based iteration to avoid unnecessary object copying.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.969637393951416
        },
        {
          "repository_name": "sycl",
          "hash": "2d06420879d7c139cb40e9a4dc3677897672c1ec",
          "author": "Mehdi Amini",
          "date": "2022-04-14T09:42:36+00:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in SCF.cpp (NFC)",
          "modified_files_count": 1,
          "modified_files": [
            "mlir/lib/Dialect/SCF/SCF.cpp"
          ],
          "github_commit_url": "https://github.com/triSYCL/sycl/commit/2d06420879d7c139cb40e9a4dc3677897672c1ec",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `matchAndRewrite` function.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.969637393951416
        },
        {
          "repository_name": "sycl",
          "hash": "3b6943e66cf150b074044274b079c7286283974e",
          "author": "Mehdi Amini",
          "date": "2022-01-14T18:08:42+00:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in PadOpInterchange.cpp (NFC)",
          "modified_files_count": 1,
          "modified_files": [
            "mlir/lib/Dialect/Linalg/Transforms/PadOpInterchange.cpp"
          ],
          "github_commit_url": "https://github.com/triSYCL/sycl/commit/3b6943e66cf150b074044274b079c7286283974e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.969637393951416
        },
        {
          "repository_name": "xbmc",
          "hash": "31bc84ad7ef3961c79f577ca96c9e75b0ab51e9f",
          "author": "Rechi",
          "date": "2021-12-08T13:30:13+00:00",
          "message": "[clang-tidy] performance-for-range-copy",
          "modified_files_count": 1,
          "modified_files": [
            "xbmc/pvr/providers/PVRProviders.cpp"
          ],
          "github_commit_url": "https://github.com/xbmc/xbmc/commit/31bc84ad7ef3961c79f577ca96c9e75b0ab51e9f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "CPVRProviders::PersistUserChanges"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based iteration with reference-based iteration in a for-range loop to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.969637393951416
        },
        {
          "repository_name": "xbmc",
          "hash": "f99015a66863a860560ab5be4b6a3fcfc820050d",
          "author": "Rechi",
          "date": "2022-04-08T11:15:56+02:00",
          "message": "[clang-tidy] performance-for-range-copy",
          "modified_files_count": 1,
          "modified_files": [
            "xbmc/interfaces/json-rpc/SettingsOperations.cpp"
          ],
          "github_commit_url": "https://github.com/xbmc/xbmc/commit/f99015a66863a860560ab5be4b6a3fcfc820050d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "CSettingsOperations::GetSkinSettings"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based iteration with reference-based iteration in a range-based for loop to avoid unnecessary copying of objects.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing a range-based for loop to use a reference instead of copying elements to avoid unnecessary overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.969637393951416
        },
        {
          "repository_name": "sycl",
          "hash": "a68c8d3009b47856bb844f8eda8a5edec83d30bd",
          "author": "Mehdi Amini",
          "date": "2022-01-14T02:26:27+00:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy to MLIR (NFC)",
          "modified_files_count": 1,
          "modified_files": [
            "mlir/include/mlir/Dialect/Linalg/Utils/Utils.h"
          ],
          "github_commit_url": "https://github.com/triSYCL/sycl/commit/a68c8d3009b47856bb844f8eda8a5edec83d30bd",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "applyPermutationToVector"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead in the `applyPermutationToVector` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.969637393951416
        },
        {
          "repository_name": "sycl",
          "hash": "bb6119eb77fe5818985d375cef415f9fbc0b4757",
          "author": "Mehdi Amini",
          "date": "2022-01-30T19:49:22+00:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in SCFInterfaceImpl.cpp (NFC)",
          "modified_files_count": 1,
          "modified_files": [
            "mlir/lib/Dialect/SCF/Transforms/BufferizableOpInterfaceImpl.cpp"
          ],
          "github_commit_url": "https://github.com/triSYCL/sycl/commit/bb6119eb77fe5818985d375cef415f9fbc0b4757",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "bufferize"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved applying clang-tidy fixes to change value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.969637393951416
        },
        {
          "repository_name": "sycl",
          "hash": "f7cd3fc35ef881bb83b9a07090979e428c557bc6",
          "author": "Mehdi Amini",
          "date": "2022-10-13T21:49:19+00:00",
          "message": "Apply clang-tidy fixes for performance-for-range-copy in VectorOps.cpp (NFC)",
          "modified_files_count": 1,
          "modified_files": [
            "mlir/lib/Dialect/Vector/IR/VectorOps.cpp"
          ],
          "github_commit_url": "https://github.com/triSYCL/sycl/commit/f7cd3fc35ef881bb83b9a07090979e428c557bc6",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "matchAndRewrite"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.969637393951416
        },
        {
          "repository_name": "llvm-leg",
          "hash": "768ada611b78fe8143f5655f5a5c804b2a9768da",
          "author": "Duncan Sands",
          "date": "2012-02-27T12:11:41+00:00",
          "message": "Micro-optimization, no functionality change.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@151524 91177308-0d34-0410-b5e6-96231b3b80d8",
          "modified_files_count": 1,
          "modified_files": [
            "lib/Transforms/Scalar/GVN.cpp"
          ],
          "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/768ada611b78fe8143f5655f5a5c804b2a9768da",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "GVN::propagateEquality"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing a value-based loop iteration with a reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing a value-based loop iteration with a reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing a value-based loop iteration with a reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved replacing a value-based loop iteration with a reference-based iteration to reduce copy overhead.",
            "The optimization strategy involves reducing redundant memory accesses by reusing previously loaded values within the same function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing a value-based loop iteration with a reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.968040943145752
        },
        {
          "repository_name": "maps-core",
          "hash": "7411dcd0262d81a453947e623e2d51bf8c254507",
          "author": "Stefan Mitterrutzner",
          "date": "2023-06-21T11:39:54+02:00",
          "message": "performance improvements",
          "modified_files_count": 1,
          "modified_files": [
            "shared/src/graphics/helpers/Vec2DHelper.cpp"
          ],
          "github_commit_url": "https://github.com/openmobilemaps/maps-core/commit/7411dcd0262d81a453947e623e2d51bf8c254507",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The commit optimizes performance by reducing unnecessary object copies and improving memory access patterns in the Vec2DHelper.cpp file.",
            "The commit message and context provided do not contain sufficient information to determine the specific optimization strategy used.",
            "The optimization strategy involved reducing the number of redundant calculations by precomputing and reusing values within the Vec2DHelper.cpp file.",
            "The optimization strategy involves reducing copy overhead by changing value-based loop iteration to reference-based iteration.",
            "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration."
          ],
          "is_generic_optimization": [
            true,
            false,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reducing copy overhead by changing value-based loop iteration to reference-based iteration.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9600167274475098
        },
        {
          "repository_name": "omnetpp",
          "hash": "4dc312129c99c6986a416b5159d4238af5c8b0e3",
          "author": "Zoltan Bojthe",
          "date": "2014-09-11T22:46:46+02:00",
          "message": "msgc: optimization: uses a reference variable for access to info.fieldlist[i]",
          "modified_files_count": 1,
          "modified_files": [
            "src/nedxml/msgcppgenerator.cc"
          ],
          "github_commit_url": "https://github.com/omnetpp/omnetpp/commit/4dc312129c99c6986a416b5159d4238af5c8b0e3",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "MsgCppGenerator::generateDescriptorClass"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy used is changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involves using a reference variable to access elements in a list to reduce copy overhead.",
            "The optimization strategy used is changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involves using a reference variable to access elements in a list to reduce copy overhead.",
            "The optimization strategy used is changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy used is changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9570397734642029
        },
        {
          "repository_name": "synfig",
          "hash": "e194811d4fe7762a747232616cd5c18b182dd12d",
          "author": "Rodolfo Ribeiro Gomes",
          "date": "2020-06-08T19:51:11+07:00",
          "message": "minor efficiency improvement",
          "modified_files_count": 1,
          "modified_files": [
            "synfig-core/src/synfig/valuenodes/valuenode_bone.cpp"
          ],
          "github_commit_url": "https://github.com/synfig/synfig/commit/e194811d4fe7762a747232616cd5c18b182dd12d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ValueNode_Bone::get_bones_referenced_by"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing the loop iteration from using a value-based iterator to a reference-based iterator to reduce copy overhead.",
            "The optimization strategy involved changing the loop iteration from value-based to reference-based to reduce copy overhead.",
            "The optimization strategy involved changing the loop iteration from using a value-based approach to a reference-based approach to reduce copy overhead.",
            "The optimization strategy involved reducing the number of redundant calls to `get_bone()` by caching its result in a local variable within the `ValueNode_Bone::get_bones_referenced_by` function.",
            "The optimization strategy involved changing the loop iteration to use references instead of values to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing the loop iteration from value-based to reference-based to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9531143307685852
        },
        {
          "repository_name": "peercoin",
          "hash": "6ab44b770bb460754f96105473243c1d3dd70a46",
          "author": "Hennadii Stepanov",
          "date": "2023-06-05T18:07:21+10:00",
          "message": "clang-tidy: Fix `performance-for-range-copy` in headers\n\nSee https://clang.llvm.org/extra/clang-tidy/checks/performance/for-range-copy.html",
          "modified_files_count": 1,
          "modified_files": [
            "src/psbt.h"
          ],
          "github_commit_url": "https://github.com/peercoin/peercoin/commit/6ab44b770bb460754f96105473243c1d3dd70a46",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved fixing `performance-for-range-copy` by changing value-based loop iteration to reference-based iteration to reduce copy overhead in headers.",
            "The optimization strategy involved fixing unnecessary object copies in range-based for loops by using references instead of values.",
            "The optimization strategy involved fixing the `performance-for-range-copy` issue by changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved fixing unnecessary copying of elements in range-based for loops by using references instead of values.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in range-based for loops."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in range-based for loops.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9150883555412292
        },
        {
          "repository_name": "kicad-source-mirror",
          "hash": "2dcbc10a09bf660758a52652a7eddc3be7a19498",
          "author": "Jeff Young",
          "date": "2023-05-08T11:46:04+01:00",
          "message": "Performance optimization.",
          "modified_files_count": 1,
          "modified_files": [
            "pcbnew/router/pns_node.cpp"
          ],
          "github_commit_url": "https://github.com/KiCad/kicad-source-mirror/commit/2dcbc10a09bf660758a52652a7eddc3be7a19498",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "operator"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing unnecessary object copying by using reference-based iteration instead of value-based iteration in the operator function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing the comparison operator in the `operator` function to reduce unnecessary computations.",
            "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration in the `operator` function.",
            "The optimization strategy involved reducing unnecessary object copying by using reference-based iteration instead of value-based iteration in a loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing copy overhead by changing value-based loop iteration to reference-based iteration in the `operator` function.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8977425694465637
        },
        {
          "repository_name": "x0",
          "hash": "750e7021d0b4a8601387a52f6e5d1177bcdb66fd",
          "author": "Christian Parpart",
          "date": "2011-02-06T17:42:17+01:00",
          "message": "[plugins] cgi: minor improvement (iterator by reference is enough)",
          "modified_files_count": 1,
          "modified_files": [
            "plugins/cgi.cpp"
          ],
          "github_commit_url": "https://github.com/christianparpart/x0/commit/750e7021d0b4a8601387a52f6e5d1177bcdb66fd",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "set_mapping"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing iterator-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing iterator-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing iterator-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy used was changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing iterator-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing iterator-based loop iteration to reference-based iteration to reduce copy overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8943948149681091
        },
        {
          "repository_name": "patchelf",
          "hash": "e17744d9660e2a56c47392c986dfb0403387393e",
          "author": "Rosen Penev",
          "date": "2021-02-14T17:47:17-08:00",
          "message": "clang-tidy: avoid copying loop variable\n\nFound with performance-for-range-copy\n\nSigned-off-by: Rosen Penev <rosenp@gmail.com>",
          "modified_files_count": 1,
          "modified_files": [
            "src/patchelf.cc"
          ],
          "github_commit_url": "https://github.com/NixOS/patchelf/commit/e17744d9660e2a56c47392c986dfb0403387393e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "patchElf"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy avoids copying the loop variable by using a reference-based iteration instead of value-based iteration in a loop.",
            "The optimization strategy avoids copying the loop variable by using a reference-based iteration in a range-based for loop.",
            "The optimization strategy involved avoiding copying the loop variable by using a reference-based iteration instead of value-based iteration to reduce overhead.",
            "The optimization strategy involved avoiding copying the loop variable by using a reference-based iteration instead of value-based iteration to reduce overhead.",
            "The optimization strategy involved avoiding copying the loop variable in a range-based for loop by using a reference instead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved avoiding copying the loop variable by using a reference-based iteration instead of value-based iteration to reduce overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.87679123878479
        },
        {
          "repository_name": "bitcoin",
          "hash": "fab01b5220c28a334b451ed9625bd3914c48e6af",
          "author": "MarcoFalke",
          "date": "2024-06-09T13:07:35+02:00",
          "message": "refactor: performance-for-range-copy in psbt.h",
          "modified_files_count": 1,
          "modified_files": [
            "src/psbt.h"
          ],
          "github_commit_url": "https://github.com/bitcoin/bitcoin/commit/fab01b5220c28a334b451ed9625bd3914c48e6af",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Serialize"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in the Serialize function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in the `Serialize` function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in the Serialize function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in the Serialize function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in the Serialize function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead in the Serialize function.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8381893038749695
        },
        {
          "repository_name": "bg3se",
          "hash": "6a8f8a29ad094d6ac14775c888494013dc32a002",
          "author": "Norbyte",
          "date": "2024-08-14T23:25:32+02:00",
          "message": "Fix minor performance gotcha when pushing values",
          "modified_files_count": 1,
          "modified_files": [
            "BG3Extender/Lua/Shared/Proxies/LuaPropertyMapHelpers.h"
          ],
          "github_commit_url": "https://github.com/Norbyte/bg3se/commit/6a8f8a29ad094d6ac14775c888494013dc32a002",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "GenericGetOffsetProperty"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing unnecessary value copies when pushing values by using reference-based iteration instead of value-based iteration.",
            "The optimization strategy involved reducing unnecessary value copying by using reference-based iteration when pushing values.",
            "The optimization strategy involved reducing unnecessary value copies by using reference-based iteration when pushing values.",
            "The optimization strategy involved reducing unnecessary value copies by using reference-based iteration when pushing values in the `GenericGetOffsetProperty` function.",
            "The optimization strategy involved reducing unnecessary value copying by using reference-based iteration when pushing values in the `GenericGetOffsetProperty` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing unnecessary value copies by using reference-based iteration when pushing values.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8265495300292969
        },
        {
          "repository_name": "Floorp",
          "hash": "3150c965077266f2aed9c0690736599814c8ae97",
          "author": "Nathan Froyd",
          "date": "2016-07-20T16:55:07-04:00",
          "message": "Bug 1287784 - micro-optimize GPUParent::RecvInit; r=milan\n\nWe can make GPUParent::RecvInit more efficient in two ways:\n\n1. Using `auto&' for the type of the for-loop variable means that we're\n   not copying each GfxPrefSetting value that we're iterating over,\n   which is a win.\n\n2. Pulling the `gfxPrefs::all()' call out of the loop means that we\n   don't have to call it on each iteration.  You may think the compiler\n   could do this for you, but the compiler can't be sure that\n   sGfxPrefList isn't being modified by SetCachedValue.",
          "modified_files_count": 1,
          "modified_files": [
            "gfx/ipc/GPUParent.cpp"
          ],
          "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/3150c965077266f2aed9c0690736599814c8ae97",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "GPUParent::RecvInit"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved using reference-based iteration to avoid copying values and moving a function call outside of a loop to reduce redundant computations.",
            "The optimization strategy involved using reference-based iteration to avoid copying and moving a function call outside the loop to reduce redundant calls.",
            "The optimization strategy involved using reference-based iteration to avoid copying and moving a function call outside the loop to reduce redundant calls.",
            "The optimization strategy involved using reference-based iteration to avoid copying values and moving a function call outside of a loop to reduce redundant computations.",
            "The optimization strategy involved using reference-based iteration to avoid copying and moving a function call outside of a loop to reduce redundant calls."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved using reference-based iteration to avoid copying and moving a function call outside the loop to reduce redundant calls.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8153316378593445
        }
      ]
    },
    {
      "cluster_id": "82",
      "size": 27,
      "repositories_distribution": {
        "kmsan": 27
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits is the replacement of inlined wait loops with a centralized out-of-line function (`intel_wait_for_register`) to reduce code bloat and improve efficiency by consolidating repetitive polling logic into a reusable, parameterized function.",
        "code_examples": [
          [
            "// Before\nif (wait_for((I915_READ(BXT_DE_PLL_ENABLE) & BXT_DE_PLL_LOCK) != 0, 1))\n    DRM_ERROR(\"timeout waiting for DE PLL lock\\n\");",
            "// After\nif (intel_wait_for_register(dev_priv,\n                                    BXT_DE_PLL_ENABLE,\n                                    BXT_DE_PLL_LOCK,\n                                    BXT_DE_PLL_LOCK,\n                                    1))\n    DRM_ERROR(\"timeout waiting for DE PLL lock\\n\");"
          ],
          [
            "// Before\nif (wait_for(((I915_READ(DPLL(pipe)) & DPLL_LOCK_VLV) == DPLL_LOCK_VLV), 1))\n    DRM_ERROR(\"DPLL %d failed to lock\\n\", pipe);",
            "// After\nif (intel_wait_for_register(dev_priv,\n                                    DPLL(pipe),\n                                    DPLL_LOCK_VLV,\n                                    DPLL_LOCK_VLV,\n                                    1))\n    DRM_ERROR(\"DPLL %d failed to lock\\n\", pipe);"
          ]
        ],
        "application_conditions": [
          "The code contains a `wait_for` loop that polls a hardware register using `I915_READ` or similar functions.",
          "The polling logic checks for a specific bit mask or value in the register's response.",
          "The timeout value for the polling operation is explicitly defined as a constant or parameter within the loop."
        ]
      },
      "commits": [
        {
          "repository_name": "kmsan",
          "hash": "3d808eb1711f2431fe6ab9f912b2ff795bb74013",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:26+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-47-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_ringbuffer.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/3d808eb1711f2431fe6ab9f912b2ff795bb74013",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "stop_ring"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "9b6a2d72d98ce0846c71055c21c407b7f1e668f1",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:16+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-30-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_dsi.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/9b6a2d72d98ce0846c71055c21c407b7f1e668f1",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "wait_for_dsi_fifo_empty"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "d54fe4aad783ef68ffbd5e1bb7b4a33669b1b257",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:27+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-48-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_ringbuffer.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/d54fe4aad783ef68ffbd5e1bb7b4a33669b1b257",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "gen6_bsd_ring_write_tail"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "dfdb47497ca0c4f5983e926dc8a3e313440aeb69",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:08+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-17-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_display.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/dfdb47497ca0c4f5983e926dc8a3e313440aeb69",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "lpt_disable_pch_transcoder"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "0d01d0c0099b475677a4d8662d1f48065b993cc5",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:23+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-41-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_lvds.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/0d01d0c0099b475677a4d8662d1f48065b993cc5",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "intel_enable_lvds"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "2af05078d6d9e81fca69de96f582e16e1b141e43",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:19+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-34-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_dsi.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/2af05078d6d9e81fca69de96f582e16e1b141e43",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "dpi_send_cmd"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "3e7941a11f7ac83053574e5d246d3e161f2dfa1a",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:22+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-40-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_lrc.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/3e7941a11f7ac83053574e5d246d3e161f2dfa1a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "intel_logical_ring_stop"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "a7d04662358daf44c4fe61d1f27bbaeca7cd126e",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:07+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-16-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_display.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/a7d04662358daf44c4fe61d1f27bbaeca7cd126e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ironlake_disable_pch_transcoder"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "93220c08edfea2af75bc8948729424ccc3a93942",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:13+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-25-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_display.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/93220c08edfea2af75bc8948729424ccc3a93942",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "hsw_restore_lcpll"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "a5b2fd8cdc576688c65aec82c775fd779d48b503",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:25+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-44-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_psr.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/a5b2fd8cdc576688c65aec82c775fd779d48b503",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "hsw_psr_disable"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "12bb63198cb775fe20d5321584059deb70b8b51a",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:25+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-45-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_psr.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/12bb63198cb775fe20d5321584059deb70b8b51a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "intel_psr_work"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "27bf23a9113dd3aafbd0e9e4b432d7f773ba3e5b",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:16+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-29-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_dpll_mgr.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/27bf23a9113dd3aafbd0e9e4b432d7f773ba3e5b",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "skl_ddi_pll_enable"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a more efficient out-of-line function to reduce code bloat and improve performance.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "4ce533b5eb47ed90ede2d798018e036990bcf987",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:30+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-54-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_sideband.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/4ce533b5eb47ed90ede2d798018e036990bcf987",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "vlv_sideband_rw"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "4a17fe13c04b4a692ac104ed950c7e9f223b0d3b",
          "author": "Chris Wilson",
          "date": "2016-06-30T17:05:07+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-61-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_uncore.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/4a17fe13c04b4a692ac104ed950c7e9f223b0d3b",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "gen6_hw_domain_reset"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "87273b7110a031c7b258f8c05efcd88194f79fe8",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:34+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-60-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_uncore.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/87273b7110a031c7b258f8c05efcd88194f79fe8",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ironlake_do_reset"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "24d8441d46ad453e71b2a6e58f96800e80dca822",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:12+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-24-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_display.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/24d8441d46ad453e71b2a6e58f96800e80dca822",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "hsw_disable_lcpll"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "7cf41c3d0e5848d9da64c1a5a3514a287bdaaa14",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:23+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-42-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_lvds.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/7cf41c3d0e5848d9da64c1a5a3514a287bdaaa14",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "intel_disable_lvds"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "fd3790d41b3443c99a0d40674dad5da89a44ff4d",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:02+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-8-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_crt.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/fd3790d41b3443c99a0d40674dad5da89a44ff4d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "intel_crt_detect_hotplug"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "564514fdde045edb141f2293b0accec673ad1871",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:31+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-56-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_sideband.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/564514fdde045edb141f2293b0accec673ad1871",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "intel_sbi_read"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "d9f96244b88ec68ec459d3c8110a2be7a6e9d841",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:07+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-15-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_display.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/d9f96244b88ec68ec459d3c8110a2be7a6e9d841",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "lpt_enable_pch_transcoder"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "a522ae4bb6e19e3072bb79fdcf692cae6507f9fc",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:02+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-7-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_crt.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/a522ae4bb6e19e3072bb79fdcf692cae6507f9fc",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "valleyview_crt_detect_hotplug"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "2ec9ba3cffd08c6d78e1ed1fd0188efe7fcaec1c",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:09+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-18-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_display.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/2ec9ba3cffd08c6d78e1ed1fd0188efe7fcaec1c",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "hsw_enable_ips"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "aaaffb838b6109eed3adc45c2ddebae3c30b4880",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:33+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-59-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_sideband.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/aaaffb838b6109eed3adc45c2ddebae3c30b4880",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "intel_sbi_write"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "919fcd518d438f8ba7518143d76dc834d9d4405c",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:29+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-52-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_runtime_pm.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/919fcd518d438f8ba7518143d76dc834d9d4405c",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "assert_chv_phy_status"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "84c2aa9025e7046d25daaa8219cfd36e3f2d7a2d",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:17+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-32-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_dsi.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/84c2aa9025e7046d25daaa8219cfd36e3f2d7a2d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "intel_dsi_host_transfer"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9979581236839294
        },
        {
          "repository_name": "kmsan",
          "hash": "e084e1b9cc1bb0717aaeccccec640e28cc141560",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:11+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-21-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_display.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/e084e1b9cc1bb0717aaeccccec640e28cc141560",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "bxt_de_pll_enable"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.97447669506073
        },
        {
          "repository_name": "kmsan",
          "hash": "2c30b43b59c5662aaacd6ec9a6b3f55124121746",
          "author": "Chris Wilson",
          "date": "2016-06-30T15:42:04+01:00",
          "message": "drm/i915: Convert wait_for(I915_READ(reg)) to intel_wait_for_register()\n\nBy using the out-of-line intel_wait_for_register() not only do we can\nefficiency from using the hybrid wait_for() contained within, but we\navoid code bloat from the numerous inlined loops, in total (all patches):\n\n   text    data     bss     dec     hex filename\n1078551    4557     416 1083524  108884 drivers/gpu/drm/i915/i915.ko\n1070775    4557     416 1075748  106a24 drivers/gpu/drm/i915/i915.ko\n\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nReviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nLink: http://patchwork.freedesktop.org/patch/msgid/1467297225-21379-11-git-send-email-chris@chris-wilson.co.uk",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/gpu/drm/i915/intel_display.c"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/2c30b43b59c5662aaacd6ec9a6b3f55124121746",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "_vlv_enable_pll"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
            "The optimization strategy involved replacing inlined wait loops with a centralized out-of-line function to reduce code bloat and improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved replacing inlined wait loops with an out-of-line function to reduce code bloat and improve efficiency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.97447669506073
        }
      ]
    },
    {
      "cluster_id": "6",
      "size": 20,
      "repositories_distribution": {
        "VAPOR": 1,
        "ofxFlowTools": 1,
        "Audio": 1,
        "opennn": 2,
        "cmssw": 1,
        "steem": 1,
        "ppsspp": 1,
        "spades": 1,
        "gpuvis": 1,
        "FastDoom": 1,
        "csound": 1,
        "Commander_Wars": 1,
        "kicad-source-mirror": 1,
        "gwater2": 1,
        "mantid": 1,
        "gnsstk": 1,
        "mfem": 1,
        "or-tools": 1,
        "OpenMS": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves reducing redundant computations by precomputing values outside of loops and reusing them within loop iterations to minimize unnecessary recalculations.",
        "code_examples": [
          [
            "// Before\nfor (i = 0; i < n; i++)\n  p->buf[i] = FL(0.0);",
            "// After\nif (p->read_pos < (int_least64_t) 0)\n  p->bufStartPos = (int_least64_t) p->bufSize;\nelse\n  p->bufStartPos = -((int_least64_t) p->bufSize);"
          ],
          [
            "// Before\nfor (i = 0; i < 14 * 256; i++) {\n  r1 = (int)ptr[*palette++];\n  g1 = (int)ptr[*palette++];\n  b1 = (int)ptr[*palette++];\n  bestcolor = GetClosestColor(colors, 4, r1, g1, b1);\n}",
            "// After\nfor (i = 0; i < 14 * 256; i++, palette += 3) {\n  r1 = (int)ptr[*(palette)];\n  g1 = (int)ptr[*(palette+1)];\n  b1 = (int)ptr[*(palette+2)];\n  bestcolor = GetClosestColor(colors, 4, r1, g1, b1);\n}"
          ]
        ],
        "application_conditions": [
          "The code contains a loop where the same computation is performed repeatedly with identical inputs for each iteration.",
          "The code includes function calls or expressions inside a loop that could be precomputed and reused without changing the program's semantics.",
          "The code performs arithmetic or logical operations inside a loop that depend solely on variables invariant across iterations."
        ]
      },
      "commits": [
        {
          "repository_name": "cmssw",
          "hash": "56f737f62c656550e407cbb905b195fd9c259d2d",
          "author": "Thomas Reis",
          "date": "2017-02-07T12:12:05+01:00",
          "message": "Performance improvements for the L1TMuonCaloSumProducer",
          "modified_files_count": 1,
          "modified_files": [
            "L1Trigger/L1TMuon/plugins/L1TMuonCaloSumProducer.cc"
          ],
          "github_commit_url": "https://github.com/cms-sw/cmssw/commit/56f737f62c656550e407cbb905b195fd9c259d2d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "L1TMuonCaloSumProducer::produce"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of redundant calculations and improving loop efficiency in the L1TMuonCaloSumProducer::produce function.",
            "The optimization strategy involved reducing the number of redundant calculations and memory accesses by precomputing values and reusing them within the loop.",
            "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of loops and reusing them within the loops.",
            "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of loops and reusing them within the loops.",
            "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of loops and reusing them within the loop iterations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of loops and reusing them within the loops.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9358024597167969
        },
        {
          "repository_name": "opennn",
          "hash": "7f8bc8dc1c0744e7f41dd02a1bb782348be12573",
          "author": "Roberto Lopez",
          "date": "2020-01-07T18:19:49+01:00",
          "message": "Small performance improvements",
          "modified_files_count": 1,
          "modified_files": [
            "opennn/convolutional_layer.cpp"
          ],
          "github_commit_url": "https://github.com/Artelnics/opennn/commit/7f8bc8dc1c0744e7f41dd02a1bb782348be12573",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ConvolutionalLayer::calculate_hidden_delta_convolutional"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and minimizing memory access overhead.",
            "The optimization strategy involved reducing the number of nested loops and minimizing redundant calculations within the convolutional layer's delta computation.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and minimizing the number of function calls within iterative structures.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loops.",
            "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of loops and reusing them within the loops."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of loops and reusing them within the loops.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9358024597167969
        },
        {
          "repository_name": "ofxFlowTools",
          "hash": "41ca966b1833bfd7b018ac87bf948958512ae6aa",
          "author": "Matthias Oostrik",
          "date": "2018-09-01T16:09:59+02:00",
          "message": "speedup",
          "modified_files_count": 1,
          "modified_files": [
            "src/core/fluid/ftFluidFlow.cpp"
          ],
          "github_commit_url": "https://github.com/moostrik/ofxFlowTools/commit/41ca966b1833bfd7b018ac87bf948958512ae6aa",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Vivo"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loops.",
            "The optimization strategy involved replacing a loop with a more efficient algorithm or data structure to reduce computational overhead.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the Vivo function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops to improve performance.",
            "The optimization strategy involved reducing the number of random iterations in a test section to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            false
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loops.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9349494576454163
        },
        {
          "repository_name": "opennn",
          "hash": "66f8bd354562c9a890fe526fc1758585bedec103",
          "author": "Roberto Lopez",
          "date": "2020-01-07T18:19:49+01:00",
          "message": "Small performance improvements",
          "modified_files_count": 1,
          "modified_files": [
            "opennn/convolutional_layer.cpp"
          ],
          "github_commit_url": "https://github.com/Artelnics/opennn/commit/66f8bd354562c9a890fe526fc1758585bedec103",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ConvolutionalLayer::calculate_hidden_delta_convolutional"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops to improve performance.",
            "The optimization strategy involved reducing redundant calculations and improving memory access patterns in the convolutional layer's delta calculation function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loops.",
            "The optimization strategy involved reducing redundant calculations by precomputing values used in nested loops.",
            "The optimization strategy involved reducing redundant calculations and improving loop efficiency in the convolutional layer's delta calculation."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loops.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9349494576454163
        },
        {
          "repository_name": "gwater2",
          "hash": "a5116e98bcf9035521cfc9a07f45d06d4fdaebd4",
          "author": "Meetric",
          "date": "2024-06-23T19:40:26-04:00",
          "message": "microoptimization",
          "modified_files_count": 1,
          "modified_files": [
            "binary/src/flex_renderer.cpp"
          ],
          "github_commit_url": "https://github.com/meetric1/gwater2/commit/a5116e98bcf9035521cfc9a07f45d06d4fdaebd4",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "_build_water_anisotropy"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loops.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the _build_water_anisotropy function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loop iterations.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and using them within the loop iterations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loop iterations.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9312140941619873
        },
        {
          "repository_name": "gnsstk",
          "hash": "3c2965d913e4e29efecd15ba9191eeec9b51126b",
          "author": "Dagoberto Salazar",
          "date": "2009-02-06T18:58:10+00:00",
          "message": "Minor performance improvement.",
          "modified_files_count": 1,
          "modified_files": [
            "dev/lib/procframe/SolverPPP.cpp"
          ],
          "github_commit_url": "https://github.com/SGL-UT/gnsstk/commit/3c2965d913e4e29efecd15ba9191eeec9b51126b",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "SolverPPP::Process"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of redundant calculations by precomputing a value outside of a loop.",
            "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of loops.",
            "The optimization strategy involved reducing the number of redundant calculations by precomputing and reusing values within the SolverPPP::Process function.",
            "The optimization strategy involved reducing the number of redundant computations by moving invariant calculations outside of a loop.",
            "The optimization strategy involved changing the order of conditions in an if-statement to evaluate the most likely or less computationally expensive condition first."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of redundant calculations by precomputing a value outside of a loop.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9280759692192078
        },
        {
          "repository_name": "OpenMS",
          "hash": "0229023e12db3b4f4ab90992dda51737e9d9a7a3",
          "author": "bielow",
          "date": "2021-11-10T15:16:35+01:00",
          "message": "mini example for performance opt. This yields 2x speed...",
          "modified_files_count": 1,
          "modified_files": [
            "src/openswathalgo/source/OPENSWATHALGO/ALGO/Scoring.cpp"
          ],
          "github_commit_url": "https://github.com/OpenMS/OpenMS/commit/0229023e12db3b4f4ab90992dda51737e9d9a7a3",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of a loop.",
            "The optimization strategy involves reducing the number of redundant calculations by precomputing values outside of loops.",
            "The commit likely implements a performance optimization by reducing unnecessary computations or improving algorithmic efficiency in the scoring function.",
            "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of a loop.",
            "The commit optimizes performance by reducing unnecessary computations and improving loop efficiency in the scoring algorithm."
          ],
          "is_generic_optimization": [
            true,
            true,
            false,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reducing the number of redundant calculations by precomputing values outside of loops.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9280238747596741
        },
        {
          "repository_name": "Audio",
          "hash": "9cb37528523e6dfeae450dad2cb01ab67005950f",
          "author": "PaulStoffregen",
          "date": "2017-05-01T02:09:09-07:00",
          "message": "Minor optimization in AudioSynthWaveformPWM",
          "modified_files_count": 1,
          "modified_files": [
            "synth_pwm.cpp"
          ],
          "github_commit_url": "https://github.com/PaulStoffregen/Audio/commit/9cb37528523e6dfeae450dad2cb01ab67005950f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "AudioSynthWaveformPWM::update"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of redundant calculations by precomputing a value outside the loop and reusing it within the loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing and storing frequently used values in local variables.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside the loop in the `AudioSynthWaveformPWM::update` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside the loop and reusing it within the loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing a value outside the loop and reusing it within the loop.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9245470762252808
        },
        {
          "repository_name": "ppsspp",
          "hash": "9a51d25279b8e23b849c815769b297d43dd45797",
          "author": "Henrik Rydgard",
          "date": "2013-11-08T12:43:47+01:00",
          "message": "Minor optimization in IndexGenerator::AddStrip.",
          "modified_files_count": 1,
          "modified_files": [
            "GPU/Common/IndexGenerator.cpp"
          ],
          "github_commit_url": "https://github.com/hrydgard/ppsspp/commit/9a51d25279b8e23b849c815769b297d43dd45797",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "IndexGenerator::AddStrip"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside the loop and reusing it within the loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside the loop and reusing it within the loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the `IndexGenerator::AddStrip` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the loop in IndexGenerator::AddStrip."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing a value outside the loop and reusing it within the loop.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9245470762252808
        },
        {
          "repository_name": "VAPOR",
          "hash": "089a6b2439177a08c0e8b2c8a7737cbf99b8a211",
          "author": "Samuel Li",
          "date": "2018-11-26T11:06:45-07:00",
          "message": "performance improvement",
          "modified_files_count": 1,
          "modified_files": [
            "lib/render/RayCaster.cpp"
          ],
          "github_commit_url": "https://github.com/NCAR/VAPOR/commit/089a6b2439177a08c0e8b2c8a7737cbf99b8a211",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "RayCaster::_renderTriangleStrips"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and minimizing function calls within the loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loop iterations.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and minimizing function calls within the loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and minimizing function calls within the loop.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the rendering loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and minimizing function calls within the loop.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9243667721748352
        },
        {
          "repository_name": "mantid",
          "hash": "61027ab4d95b721586f2872138a80ab2ea11534f",
          "author": "Steve Williams",
          "date": "2011-06-23T19:41:20+00:00",
          "message": "Thinking about speed ups re #3167",
          "modified_files_count": 1,
          "modified_files": [
            "Code/Mantid/Framework/Algorithms/src/Q1DTOF.cpp"
          ],
          "github_commit_url": "https://github.com/mantidproject/mantid/commit/61027ab4d95b721586f2872138a80ab2ea11534f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Q1DTOF::exec"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of calculations by precomputing and reusing values within the loop to avoid redundant computations.",
            "The optimization strategy involved reducing the number of calculations by precomputing and storing frequently used values outside of loops to avoid redundant computations.",
            "The optimization strategy involved reducing the number of calculations by precomputing and reusing values within the loop to avoid redundant computations.",
            "The optimization strategy involved reducing the number of calculations within a loop by precomputing values outside the loop.",
            "The optimization strategy involved reducing the number of calculations by precomputing and reusing values within the loop to avoid redundant computations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of calculations by precomputing and reusing values within the loop to avoid redundant computations.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9161941409111023
        },
        {
          "repository_name": "spades",
          "hash": "e4ad3ddc1e6c7100327e0a853756850c1eebab2d",
          "author": "Dmitry Antipov",
          "date": "2014-10-06T16:07:21+04:00",
          "message": "one more serious optimization",
          "modified_files_count": 1,
          "modified_files": [
            "assembler/src/corrector/interesting_pos_processor.cpp"
          ],
          "github_commit_url": "https://github.com/ablab/spades/commit/e4ad3ddc1e6c7100327e0a853756850c1eebab2d",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the overhead of processing interesting positions by minimizing unnecessary computations and memory allocations.",
            "The optimization strategy involved reducing the number of random iterations in a test section by changing the loop count from 10 to 30.",
            "The commit optimizes performance by reducing redundant calculations and improving loop efficiency in the interesting positions processing logic.",
            "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of loops and reusing them within the loop iterations.",
            "The optimization strategy involved reducing unnecessary computations by precomputing values outside of loops and reusing them within the loop iterations."
          ],
          "is_generic_optimization": [
            true,
            false,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing unnecessary computations by precomputing values outside of loops and reusing them within the loop iterations.",
          "is_generic_optimization_final": true,
          "authority_score": 0.905712902545929
        },
        {
          "repository_name": "Commander_Wars",
          "hash": "f6053b060c0aa235309d65a9c98d94ae1af45687",
          "author": "Robosturm",
          "date": "2020-03-19T18:43:46+01:00",
          "message": "performance improvement",
          "modified_files_count": 1,
          "modified_files": [
            "game/gamemap.cpp"
          ],
          "github_commit_url": "https://github.com/Robosturm/Commander_Wars/commit/f6053b060c0aa235309d65a9c98d94ae1af45687",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "GameMap::getVisionCircle"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of calculations within a loop by precomputing values outside the loop.",
            "The optimization strategy involved reducing the number of calculations in the vision circle computation by precomputing and reusing values.",
            "The optimization strategy involved reducing the number of calculations within a loop by precomputing values outside the loop.",
            "The optimization strategy involved reducing redundant calculations and improving loop efficiency in the `GameMap::getVisionCircle` function.",
            "The optimization strategy involved reducing redundant calculations and improving data access patterns in the `GameMap::getVisionCircle` function to enhance performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of calculations within a loop by precomputing values outside the loop.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8936395049095154
        },
        {
          "repository_name": "mfem",
          "hash": "81a11a5a23027a3153aa6214ffba075db3c73310",
          "author": "Jamie A. Bramwell",
          "date": "2017-10-12T15:58:34-07:00",
          "message": "Some loop optimizations",
          "modified_files_count": 1,
          "modified_files": [
            "fem/nonlininteg.cpp"
          ],
          "github_commit_url": "https://github.com/mfem/mfem/commit/81a11a5a23027a3153aa6214ffba075db3c73310",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "IncompressibleNeoHookeanIntegrator::AssembleElementGrad"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing loop iterations to reduce computational overhead by minimizing redundant calculations within the loop.",
            "The optimization strategy involved loop optimizations to improve performance in the IncompressibleNeoHookeanIntegrator::AssembleElementGrad function.",
            "The optimization strategy involved reducing redundant computations within a loop by precomputing values outside the loop and simplifying loop conditions.",
            "The optimization strategy involved reducing redundant computations within a loop by precomputing values outside the loop and simplifying the loop body.",
            "The optimization strategy involved loop optimizations in the `IncompressibleNeoHookeanIntegrator::AssembleElementGrad` function to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant computations within a loop by precomputing values outside the loop and simplifying the loop body.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8888322114944458
        },
        {
          "repository_name": "kicad-source-mirror",
          "hash": "d3aed6c4083f37432d0a9bbae1075374941439cb",
          "author": "Alex",
          "date": "2022-11-19T04:02:05+05:00",
          "message": "Optimize hot loop in UpdateItems.",
          "modified_files_count": 1,
          "modified_files": [
            "common/view/view.cpp"
          ],
          "github_commit_url": "https://github.com/KiCad/kicad-source-mirror/commit/d3aed6c4083f37432d0a9bbae1075374941439cb",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "VIEW::UpdateItems"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of function calls within a hot loop by inlining a frequently called function.",
            "The optimization strategy involved reducing the number of redundant calculations and memory accesses within a frequently executed loop in the `VIEW::UpdateItems` function.",
            "The optimization strategy involved reducing the number of redundant calculations and memory accesses within a hot loop by precomputing values and minimizing repeated operations.",
            "The optimization strategy involved reducing the number of function calls within a hot loop by inlining a frequently called function.",
            "The optimization strategy involved reducing the number of redundant calculations within a hot loop by precomputing values outside the loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of redundant calculations within a hot loop by precomputing values outside the loop.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8872396349906921
        },
        {
          "repository_name": "steem",
          "hash": "2d4bd75af3dc4c52981f39e79414f3974b13c6c4",
          "author": "Reverse Flash",
          "date": "2016-08-10T14:42:40-04:00",
          "message": "performanc optimization #256",
          "modified_files_count": 1,
          "modified_files": [
            "libraries/chain/protocol/steem_operations.cpp"
          ],
          "github_commit_url": "https://github.com/steemit/steem/commit/2d4bd75af3dc4c52981f39e79414f3974b13c6c4",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "pow2::create"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of unnecessary operations by simplifying the logic within the `pow2::create` function.",
            "The optimization strategy involved reducing the number of iterations in a loop to improve performance.",
            "The optimization strategy involved reducing the number of unnecessary computations by precomputing values outside of loops and minimizing redundant function calls.",
            "The optimization strategy involved reducing unnecessary computations by precomputing values outside of loops and minimizing redundant function calls.",
            "The optimization strategy involved reducing unnecessary computations by precomputing values and avoiding redundant calculations within the pow2::create function."
          ],
          "is_generic_optimization": [
            true,
            false,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of unnecessary computations by precomputing values outside of loops and minimizing redundant function calls.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8831233978271484
        },
        {
          "repository_name": "gpuvis",
          "hash": "655a965e6ed9871f34f69034b042b8124392d970",
          "author": "omar",
          "date": "2017-08-14T11:05:39-06:00",
          "message": "ImFont::CalcWordWrapPositionA: minor optimization",
          "modified_files_count": 1,
          "modified_files": [
            "src/imgui/imgui_draw.cpp"
          ],
          "github_commit_url": "https://github.com/mikesart/gpuvis/commit/655a965e6ed9871f34f69034b042b8124392d970",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ImFont::CalcWordWrapPositionA"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the `ImFont::CalcWordWrapPositionA` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing the result of a frequently called function within a loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop and reusing it within the loop.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed property within a loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the `ImFont::CalcWordWrapPositionA` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing and reusing the result of a frequently called function within a loop.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8827834129333496
        },
        {
          "repository_name": "or-tools",
          "hash": "3dc612e1df596b645805e76cf938ea6e51c74bdb",
          "author": "Laurent Perron",
          "date": "2024-02-17T22:49:16+01:00",
          "message": "faster code",
          "modified_files_count": 1,
          "modified_files": [
            "ortools/sat/linear_relaxation.cc"
          ],
          "github_commit_url": "https://github.com/google/or-tools/commit/3dc612e1df596b645805e76cf938ea6e51c74bdb",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ComputeLinearRelaxation"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of loops and reusing them within the loops.",
            "The optimization strategy involved reducing the number of redundant computations by caching intermediate results and avoiding repeated calculations within the ComputeLinearRelaxation function.",
            "The optimization strategy involved reducing the number of redundant computations by caching intermediate results in the ComputeLinearRelaxation function.",
            "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of loops and reusing them within the loop iterations.",
            "The optimization strategy involved reducing the number of redundant computations by precomputing and caching values used within a loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of redundant computations by precomputing and caching values used within a loop.",
          "is_generic_optimization_final": true,
          "authority_score": 0.816274881362915
        },
        {
          "repository_name": "FastDoom",
          "hash": "a10c5de1014e20aac6807601e1861454f72f1e13",
          "author": "viti95",
          "date": "2023-04-08T09:35:48+02:00",
          "message": "Small optimization for I_ProcessPalette",
          "modified_files_count": 1,
          "modified_files": [
            "FASTDOOM/i_cga4.c"
          ],
          "github_commit_url": "https://github.com/viti95/FastDoom/commit/a10c5de1014e20aac6807601e1861454f72f1e13",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "I_ProcessPalette"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the I_ProcessPalette function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the I_ProcessPalette function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the I_ProcessPalette function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the I_ProcessPalette function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the I_ProcessPalette function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the I_ProcessPalette function.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7990443110466003
        },
        {
          "repository_name": "csound",
          "hash": "d96f9c6e46af5708ddc4664d9a26b982cab0c65c",
          "author": "Istvan Varga",
          "date": "2005-06-05T19:33:02+00:00",
          "message": "Minor speedup in sndinset()",
          "modified_files_count": 1,
          "modified_files": [
            "OOps/diskin2.c"
          ],
          "github_commit_url": "https://github.com/csound/csound/commit/d96f9c6e46af5708ddc4664d9a26b982cab0c65c",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "sndinset"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant function calls and simplifying conditional checks within the `sndinset` function to improve performance.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently called small function within sndinset().",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the `sndinset()` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the sndinset() function.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed function call."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the `sndinset()` function.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7952306270599365
        }
      ]
    },
    {
      "cluster_id": "80",
      "size": 18,
      "repositories_distribution": {
        "suricata": 1,
        "MonetDB": 1,
        "TOWNSEMU": 1,
        "moses": 1,
        "instantWM": 1,
        "rtpengine": 1,
        "MyScaleDB": 1,
        "AIS-catcher": 1,
        "scst": 1,
        "primecount": 1,
        "calligra": 2,
        "ntpsec": 1,
        "scribus": 1,
        "plumed2": 1,
        "klayout": 1,
        "llvm-leg": 1,
        "UltraVNC": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves reducing function call overhead by inlining small, frequently called functions to eliminate unnecessary calls and improve performance.",
        "code_examples": [
          [
            "// Before\nif (!isColumnConst(*columns[i]))\n{\n    first_non_constant_column = i;\n    break;\n}",
            "// After\nif (i != filter_column_position && !isColumnConst(*columns[i]))\n{\n    first_non_constant_column = i;\n    break;\n}"
          ],
          [
            "// Before\nDSNodeHandle Dest = getValueDest(*FI.getOperand(0));\nif (Dest.getNode() == 0) return;\nDest.getNode()->NodeType |= DSNode::Modified;",
            "// After\ngetValueDest(*FI.getOperand(0)).getNode()->NodeType |= DSNode::Modified;"
          ]
        ],
        "application_conditions": [
          "The function being inlined must be called more than 5 times within a single code block or loop.",
          "The function being inlined must have fewer than 10 lines of executable code.",
          "The function call overhead must account for more than 1% of the total execution time in a performance-critical section."
        ]
      },
      "commits": [
        {
          "repository_name": "primecount",
          "hash": "2581e929b30abd31625c5ce077ded5f4644c21df",
          "author": "Kim Walisch",
          "date": "2014-05-07T16:49:33+02:00",
          "message": "Speed improvement",
          "modified_files_count": 1,
          "modified_files": [
            "src/pi_lehmer.cpp"
          ],
          "github_commit_url": "https://github.com/kimwalisch/primecount/commit/2581e929b30abd31625c5ce077ded5f4644c21df",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "pi_lehmer"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used function to eliminate overhead.",
            "The optimization strategy involved reducing the number of function calls and simplifying the logic within the pi_lehmer function to improve performance.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used function within the pi_lehmer function.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used small function to eliminate overhead.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used function to eliminate overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of function calls by inlining a frequently used small function to eliminate overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9400381445884705
        },
        {
          "repository_name": "plumed2",
          "hash": "debcc155339ce961ad476ac60097ff00d0775329",
          "author": "Gareth Aneurin Tribello",
          "date": "2012-10-09T13:18:39+02:00",
          "message": "One final speed up trick.",
          "modified_files_count": 1,
          "modified_files": [
            "src/MultiColvar.cpp"
          ],
          "github_commit_url": "https://github.com/plumed/plumed2/commit/debcc155339ce961ad476ac60097ff00d0775329",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used small function to eliminate overhead.",
            "The commit likely implements a local performance optimization within the MultiColvar.cpp file, potentially involving loop unrolling or reducing redundant calculations.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used small function to eliminate overhead.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently used small function.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used small function to eliminate overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of function calls by inlining a frequently used small function to eliminate overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9400380849838257
        },
        {
          "repository_name": "TOWNSEMU",
          "hash": "2579850deda63c575e8dd5f864d3f87bc67d452c",
          "author": "Soji Yamakawa",
          "date": "2021-10-29T21:54:01-04:00",
          "message": "Very small speed up.",
          "modified_files_count": 1,
          "modified_files": [
            "src/cpu/i486inst.cpp"
          ],
          "github_commit_url": "https://github.com/captainys/TOWNSEMU/commit/2579850deda63c575e8dd5f864d3f87bc67d452c",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of function calls by inlining a small, frequently called function to eliminate overhead.",
            "The optimization strategy involved reducing redundant calculations or operations within a specific function to achieve a small speed-up.",
            "The commit likely implements a minor speed-up by optimizing a specific instruction or operation within the CPU emulation code.",
            "The optimization strategy involved reducing the number of function calls by inlining a small function to eliminate overhead.",
            "The optimization strategy involved reducing the number of function calls by inlining a small, frequently called function to eliminate call overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            false,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of function calls by inlining a small, frequently called function to eliminate overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9332298636436462
        },
        {
          "repository_name": "rtpengine",
          "hash": "be51f00feb683c2fc28eacd8d74338560c932d92",
          "author": "Richard Fuchs",
          "date": "2013-06-20T14:28:13-04:00",
          "message": "teeny tiny performance fix",
          "modified_files_count": 1,
          "modified_files": [
            "daemon/crypto.c"
          ],
          "github_commit_url": "https://github.com/sipwise/rtpengine/commit/be51f00feb683c2fc28eacd8d74338560c932d92",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "prf_n"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of iterations in a loop to improve performance.",
            "The optimization strategy involved reducing the number of function calls by inlining a small, frequently called function to eliminate overhead.",
            "The optimization strategy involved reducing the number of function calls by inlining a small, frequently used function to eliminate overhead.",
            "The optimization strategy involved reducing the number of function calls by inlining a small, frequently called function.",
            "The optimization strategy involved reducing the number of function calls by inlining a small, frequently called function to minimize overhead."
          ],
          "is_generic_optimization": [
            false,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of function calls by inlining a small, frequently called function to eliminate overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9332298636436462
        },
        {
          "repository_name": "AIS-catcher",
          "hash": "7d7306a5dd2c41c13627cbd946c6b4b4057091c2",
          "author": "jvde.github",
          "date": "2021-12-17T21:05:31+01:00",
          "message": "small speed improvement",
          "modified_files_count": 1,
          "modified_files": [
            "DSP.cpp"
          ],
          "github_commit_url": "https://github.com/jvde-github/AIS-catcher/commit/7d7306a5dd2c41c13627cbd946c6b4b4057091c2",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The commit likely implements a small speed improvement by optimizing a specific function or operation in the DSP.cpp file.",
            "The optimization strategy involved reducing the number of floating-point operations by simplifying a mathematical expression in the DSP.cpp file.",
            "The optimization strategy involved reducing the number of function calls by inlining a small function to eliminate overhead.",
            "The optimization strategy involved reducing the number of function calls by inlining a small, frequently used function to eliminate overhead.",
            "The optimization strategy involved reducing the number of function calls by inlining a small function to eliminate overhead."
          ],
          "is_generic_optimization": [
            false,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of function calls by inlining a small function to eliminate overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9326455593109131
        },
        {
          "repository_name": "calligra",
          "hash": "ad7eecd8b5c2586d46d8e46cd9f64f840e955f5f",
          "author": "David Faure",
          "date": "2001-04-20T18:19:00+00:00",
          "message": "slightly faster\n\nsvn path=/trunk/koffice/; revision=93116",
          "modified_files_count": 1,
          "modified_files": [
            "kword/kwdoc.cc"
          ],
          "github_commit_url": "https://github.com/KDE/calligra/commit/ad7eecd8b5c2586d46d8e46cd9f64f840e955f5f",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved modifying the code to reduce unnecessary computations or improve loop efficiency, resulting in slightly faster performance.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used function.",
            "The optimization strategy involved reducing the number of function calls by inlining a small function to eliminate overhead.",
            "The optimization strategy involved reducing the number of function calls by inlining a small function to eliminate overhead.",
            "The commit likely implements a minor performance improvement by optimizing a specific function or operation in the code."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            false
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of function calls by inlining a small function to eliminate overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9326454997062683
        },
        {
          "repository_name": "scst",
          "hash": "f0df3281980d124a854d3a0e8b4f457730e72eb3",
          "author": "Vladislav Bolkhovitin",
          "date": "2012-08-11T01:37:07+00:00",
          "message": "Microoptimization\n\n\n\ngit-svn-id: http://svn.code.sf.net/p/scst/svn/trunk@4465 d57e44dd-8a1f-0410-8b47-8ef2f437770f",
          "modified_files_count": 1,
          "modified_files": [
            "scst/src/scst_targ.c"
          ],
          "github_commit_url": "https://github.com/SCST-project/scst/commit/f0df3281980d124a854d3a0e8b4f457730e72eb3",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "device"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of function calls by inlining a frequently called small function to minimize overhead.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently used function.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently called small function.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently called small function to eliminate overhead.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently called small function to minimize overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of function calls by inlining a frequently called small function to eliminate overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9310013651847839
        },
        {
          "repository_name": "klayout",
          "hash": "7e6dfdf5b4988f470909fe855e5f18d015a60555",
          "author": "Matthias Koefferlein",
          "date": "2017-06-17T16:01:09+02:00",
          "message": "Another tiny performance enhancement.",
          "modified_files_count": 1,
          "modified_files": [
            "src/rba/rbaUtils.cc"
          ],
          "github_commit_url": "https://github.com/KLayout/klayout/commit/7e6dfdf5b4988f470909fe855e5f18d015a60555",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of temporary object creations by reusing existing objects within the function.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a small, frequently used function.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a small, frequently used function.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a small, frequently used function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the overhead of function calls by inlining a small, frequently used function.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9291550517082214
        },
        {
          "repository_name": "calligra",
          "hash": "e222abf52ea7830b3d828f3e4ae2456495812490",
          "author": "Thomas Zander",
          "date": "2010-07-08T08:24:51+00:00",
          "message": "Make faster\n\nsvn path=/trunk/koffice/; revision=1147423",
          "modified_files_count": 1,
          "modified_files": [
            "plugins/textshape/Layout.cpp"
          ],
          "github_commit_url": "https://github.com/KDE/calligra/commit/e222abf52ea7830b3d828f3e4ae2456495812490",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of function calls by inlining a frequently called function to eliminate overhead.",
            "The commit message \"Make faster\" suggests a performance improvement, but without specific code changes, the exact optimization strategy cannot be determined.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing the number of conditional checks within a loop to minimize overhead and improve execution speed.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used function to eliminate overhead."
          ],
          "is_generic_optimization": [
            true,
            false,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of function calls by inlining a frequently used function to eliminate overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9279593825340271
        },
        {
          "repository_name": "llvm-leg",
          "hash": "787645839a3730a5c225b06e46574f957b37635d",
          "author": "Chris Lattner",
          "date": "2003-01-23T21:31:16+00:00",
          "message": "Slight efficiency improvement\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@5418 91177308-0d34-0410-b5e6-96231b3b80d8",
          "modified_files_count": 1,
          "modified_files": [
            "lib/Analysis/DataStructure/Local.cpp"
          ],
          "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/787645839a3730a5c225b06e46574f957b37635d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "GraphBuilder::visitFreeInst"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the overhead of function calls by inlining a small, frequently called function.",
            "The optimization strategy involved changing the order of conditions in an if-statement to evaluate the less computationally expensive condition first.",
            "The optimization strategy involved replacing a value-based loop iteration with a reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a small, frequently called function.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a small, frequently called function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the overhead of function calls by inlining a small, frequently called function.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9227057695388794
        },
        {
          "repository_name": "scribus",
          "hash": "c72500cc308f648e652757b7704b5af1f94cae87",
          "author": "Jean Ghali",
          "date": "2022-02-21T22:59:25+00:00",
          "message": "Small performance optimization\n\ngit-svn-id: svn://scribus.net/trunk/Scribus@24958 11d20701-8431-0410-a711-e3c959e3b870",
          "modified_files_count": 1,
          "modified_files": [
            "scribus/plugins/import/ai/importai.cpp"
          ],
          "github_commit_url": "https://github.com/scribusproject/scribus/commit/c72500cc308f648e652757b7704b5af1f94cae87",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of function calls by inlining a small, frequently called function to eliminate overhead.",
            "The optimization strategy involved changing the iteration method in a loop to reduce copy overhead by using reference-based iteration instead of value-based iteration.",
            "The optimization strategy involved reducing the number of redundant function calls by caching the result of a frequently called function.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing unnecessary function calls by inlining a small, frequently used function to eliminate overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing unnecessary function calls by inlining a small, frequently used function to eliminate overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9221283197402954
        },
        {
          "repository_name": "instantWM",
          "hash": "b098c94ed44495957de11a6160fa0560abbe944f",
          "author": "arg@10ksloc.org",
          "date": "2006-08-04T18:34:40+02:00",
          "message": "small performance tweak ;)",
          "modified_files_count": 1,
          "modified_files": [
            "event.c"
          ],
          "github_commit_url": "https://github.com/instantOS/instantWM/commit/b098c94ed44495957de11a6160fa0560abbe944f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "configurerequest"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used small function.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used small function.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used small function.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used small function.",
            "The optimization strategy involved reducing the number of function calls by inlining a small function directly into the calling code."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of function calls by inlining a frequently used small function.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9170947074890137
        },
        {
          "repository_name": "UltraVNC",
          "hash": "64f095fcc78f56d8903a249a383669143ee278df",
          "author": "cyberfox123",
          "date": "2007-09-17T19:41:41+00:00",
          "message": "speed boost schook\n\ngit-svn-id: https://svn.code.sf.net/p/ultravnc/code/UltraVNC%20Project%20Root/UltraVNC@99 0bd26501-c230-0410-ab9e-a7946180fe3b",
          "modified_files_count": 1,
          "modified_files": [
            "winvnc/winvnc/IPC.cpp"
          ],
          "github_commit_url": "https://github.com/ultravnc/UltraVNC/commit/64f095fcc78f56d8903a249a383669143ee278df",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "CIPC::CIPC"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of system calls by caching the result of a frequently accessed system property.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently called function.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently used function.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently called function.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently called function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the overhead of function calls by inlining a frequently called function.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9158352017402649
        },
        {
          "repository_name": "moses",
          "hash": "3945470648ee67de9f64f5710d011b1b3f14fcc2",
          "author": "Linas Vepstas",
          "date": "2015-02-02T13:26:39-06:00",
          "message": "guile: Minor performance improvement.",
          "modified_files_count": 1,
          "modified_files": [
            "opencog/guile/SchemeEval.cc"
          ],
          "github_commit_url": "https://github.com/opencog/moses/commit/3945470648ee67de9f64f5710d011b1b3f14fcc2",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "do_scm_eval"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the overhead of Scheme evaluation by avoiding unnecessary string conversions and directly using Scheme objects.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently used function.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently used function.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently used function.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently used function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the overhead of function calls by inlining a frequently used function.",
          "is_generic_optimization_final": true,
          "authority_score": 0.911676287651062
        },
        {
          "repository_name": "suricata",
          "hash": "27adbfa86828d21d06ff9fc3a999270da7bed00e",
          "author": "Eric Leblond",
          "date": "2016-05-20T12:32:39+02:00",
          "message": "af-packet: micro optimization",
          "modified_files_count": 1,
          "modified_files": [
            "src/source-af-packet.c"
          ],
          "github_commit_url": "https://github.com/OISF/suricata/commit/27adbfa86828d21d06ff9fc3a999270da7bed00e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ReceiveAFPLoop"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently called function within the ReceiveAFPLoop.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently called function within the ReceiveAFPLoop.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently called function within the ReceiveAFPLoop function.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently called function within the ReceiveAFPLoop function.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently called function within the ReceiveAFPLoop function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the overhead of function calls by inlining a frequently called function within the ReceiveAFPLoop function.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8085160851478577
        },
        {
          "repository_name": "ntpsec",
          "hash": "1af2c117c4bc82629491b7bf557c451038fff9a5",
          "author": "Eric S. Raymond",
          "date": "2015-10-20T21:38:09-04:00",
          "message": "A minor efficiency hack.",
          "modified_files_count": 1,
          "modified_files": [
            "ntpfrob/jitter.c"
          ],
          "github_commit_url": "https://github.com/ntpsec/ntpsec/commit/1af2c117c4bc82629491b7bf557c451038fff9a5",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "jitter"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of function calls by inlining a small function within the jitter function to improve performance.",
            "The optimization strategy involved reducing the number of function calls by inlining a small function within the `jitter` function to minimize overhead.",
            "The optimization strategy involved reducing the number of function calls by inlining a small function within a loop to minimize overhead.",
            "The optimization strategy involved reducing the number of function calls by inlining a small function within the jitter function to minimize overhead.",
            "The optimization strategy involved reducing the number of iterations in a loop to improve efficiency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            false
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of function calls by inlining a small function within the `jitter` function to minimize overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8053763508796692
        },
        {
          "repository_name": "MonetDB",
          "hash": "dfd8bdbe5275dc1b70bdf8f20512cc0bb2b6e076",
          "author": "Niels Nes",
          "date": "2021-05-18T11:32:38+02:00",
          "message": "tiny performance improvement",
          "modified_files_count": 1,
          "modified_files": [
            "sql/storage/bat/bat_storage.c"
          ],
          "github_commit_url": "https://github.com/MonetDB/MonetDB/commit/dfd8bdbe5275dc1b70bdf8f20512cc0bb2b6e076",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "segments_in_transaction"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used small function.",
            "The optimization strategy involved reducing the number of function calls by inlining a small function within a loop to minimize overhead.",
            "The optimization strategy involved reducing the number of function calls by inlining a small function within the `segments_in_transaction` function to eliminate overhead.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently used small function within the `segments_in_transaction` function.",
            "The optimization strategy involved reducing the number of function calls by inlining a small function within the `segments_in_transaction` function to eliminate overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of function calls by inlining a small function within the `segments_in_transaction` function to eliminate overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.803168773651123
        },
        {
          "repository_name": "MyScaleDB",
          "hash": "7db03cfaf7990e467f68add2b883e5a586d6c3ba",
          "author": "Nikolai Kochetov",
          "date": "2019-11-08T14:27:52+03:00",
          "message": "Fix performance in FilterTransform.",
          "modified_files_count": 1,
          "modified_files": [
            "dbms/src/Processors/Transforms/FilterTransform.cpp"
          ],
          "github_commit_url": "https://github.com/myscale/MyScaleDB/commit/7db03cfaf7990e467f68add2b883e5a586d6c3ba",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The commit optimizes performance by reducing unnecessary computations in the FilterTransform function.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently called small function within the FilterTransform process.",
            "The optimization strategy involved reducing the overhead of function calls by inlining a frequently called function within the FilterTransform process.",
            "The optimization strategy involved reducing unnecessary function calls and improving loop efficiency in the FilterTransform process.",
            "The optimization strategy involved reducing unnecessary computations by moving a condition check outside of a loop to avoid redundant evaluations."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the overhead of function calls by inlining a frequently called function within the FilterTransform process.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8012369275093079
        }
      ]
    },
    {
      "cluster_id": "2103",
      "size": 18,
      "repositories_distribution": {
        "ceph": 13,
        "rocksdb": 2,
        "goldberg_emulator": 1,
        "clink": 1,
        "dovecot-ceph-plugin": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits is replacing methods like `size()`, `length()`, or `!size()` with `empty()` to check for container emptiness, leveraging the constant time complexity guarantee of `empty()` for improved performance.",
        "code_examples": [
          [
            "// Before\nclass AsyncReserver {\n  void do_queues() {\n    while (in_progress.size() < max_allowed &&\n           queue.size()) {\n      pair<T, Context*> p = queue.front();\n      queue_pointers.erase(p.first);\n      queue.pop_front();\n    }\n  }\n};",
            "// After\nclass AsyncReserver {\n  void do_queues() {\n    while (in_progress.size() < max_allowed &&\n           !queue.empty()) {\n      pair<T, Context*> p = queue.front();\n      queue_pointers.erase(p.first);\n      queue.pop_front();\n    }\n  }\n};"
          ],
          [
            "// Before\nbool file_match_generator::generate(const line_state& line, matches_builder& builder) {\n    buffer = line.word;\n    path::get_directory(buffer);\n    if (buffer.length())\n        buffer << \"/\";\n}",
            "// After\nbool file_match_generator::generate(const line_state& line, matches_builder& builder) {\n    buffer = line.word;\n    path::get_directory(buffer);\n    if (!buffer.empty())\n        buffer << \"/\";\n}"
          ]
        ],
        "application_conditions": [
          "The code must use a method like `size()` or `length()` to check if a container is empty by comparing it to zero or using it in a conditional statement.",
          "The container being checked must have an `empty()` method that guarantees constant time complexity.",
          "The optimization must not alter the logical behavior of the code, ensuring that replacing `size()` or `length()` with `empty()` produces equivalent results in all cases."
        ]
      },
      "commits": [
        {
          "repository_name": "ceph",
          "hash": "180cae5e0b586e3ed33e28ddd93f99aab448d0cf",
          "author": "Danny Al-Gaaf",
          "date": "2013-02-13T13:59:18+01:00",
          "message": "AuthMonitor.cc: use !pending_auth.empty() instead of 'size() > 0'\n\nUse empty() since it should be prefered as it has, following the\nstandard, a constant time complexity regardless of the containter\ntype. The same is not guaranteed for size().\n\nwarning from cppcheck was:\n[src/mon/AuthMonitor.cc:210]: (performance) Possible inefficient\n  checking for 'pending_auth' emptiness.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "src/mon/AuthMonitor.cc"
          ],
          "github_commit_url": "https://github.com/ceph/ceph/commit/180cae5e0b586e3ed33e28ddd93f99aab448d0cf",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "AuthMonitor::should_propose"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves replacing `size() > 0` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()`.",
            "The optimization strategy involves replacing `size() > 0` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()`.",
            "The optimization strategy involves replacing `size() > 0` with `empty()` for checking container emptiness to leverage constant time complexity.",
            "The optimization strategy used was replacing `size() > 0` with `empty()` to check for container emptiness, as `empty()` guarantees constant time complexity regardless of the container type.",
            "The optimization strategy involved replacing `size() > 0` with `empty()` to check for container emptiness, leveraging the constant time complexity guarantee of `empty()`."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `size() > 0` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()`.",
          "is_generic_optimization_final": true,
          "authority_score": 0.94371098279953
        },
        {
          "hash": "b8b7117e97e649fc65d0a4dd397caf9a39fb71b1",
          "author": "Danny Al-Gaaf",
          "date": "2014-09-30T23:30:31+02:00",
          "message": "db/version_set.cc: use !empty() instead of 'size() > 0'\n\nUse empty() since it should be prefered as it has, following\nthe standard, a constant time complexity regardless of the\ncontainter type. The same is not guaranteed for size().\n\nFix for:\n[db/version_set.cc:2250]: (performance) Possible inefficient\n checking for 'column_families_not_found' emptiness.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "db/version_set.cc"
          ],
          "github_commit_url": "https://github.com/facebook/rocksdb/commit/b8b7117e97e649fc65d0a4dd397caf9a39fb71b1",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "VersionSet::Recover"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "rocksdb",
          "optimization_summary": [
            "The optimization strategy used was replacing `size() > 0` with `empty()` to check for container emptiness, as `empty()` guarantees constant time complexity regardless of the container type.",
            "The optimization strategy used was replacing `size() > 0` with `empty()` to check for container emptiness, as `empty()` guarantees constant time complexity regardless of the container type.",
            "The optimization strategy involves replacing `size() > 0` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()` across different container types.",
            "The optimization strategy replaces `size() > 0` with `empty()` to ensure constant time complexity for checking container emptiness.",
            "The optimization strategy involved replacing `size() > 0` with `empty()` to check for container emptiness, leveraging `empty()`'s constant time complexity."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `size() > 0` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()` across different container types.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9430113434791565
        },
        {
          "repository_name": "ceph",
          "hash": "4893def5690f811e2764c3083a63a6093e09a80e",
          "author": "Danny Al-Gaaf",
          "date": "2013-02-13T14:58:45+01:00",
          "message": "HashIndex.cc: use empty() instead of size() to check for emptiness\n\nUse empty() since it should be prefered as it has, following the\nstandard, a constant time complexity regardless of the containter\ntype. The same is not guaranteed for size().\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "src/os/HashIndex.cc"
          ],
          "github_commit_url": "https://github.com/ceph/ceph/commit/4893def5690f811e2764c3083a63a6093e09a80e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "HashIndex::recursive_remove"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy used is replacing `size()` with `empty()` to check for container emptiness, as `empty()` guarantees constant time complexity regardless of the container type.",
            "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()`.",
            "The optimization strategy involves using the `empty()` method instead of `size()` to check for container emptiness, ensuring constant time complexity regardless of the container type.",
            "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, leveraging the constant time complexity guarantee of `empty()`.",
            "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()` across different container types."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()` across different container types.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9424770474433899
        },
        {
          "repository_name": "ceph",
          "hash": "e719e0a286687a26d37f743fc3be11d25bae6dad",
          "author": "Danny Al-Gaaf",
          "date": "2013-02-14T10:27:38-08:00",
          "message": "common/WorkQueue.cc: use !empty() instead of size() to check for emptiness\n\nUse empty() since it should be prefered as it has, following the\nstandard, a constant time complexity regardless of the containter\ntype. The same is not guaranteed for size().\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "src/common/WorkQueue.cc"
          ],
          "github_commit_url": "https://github.com/ceph/ceph/commit/e719e0a286687a26d37f743fc3be11d25bae6dad",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ThreadPool::worker"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, leveraging the constant time complexity guarantee of `empty()`.",
            "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, ensuring constant time complexity regardless of the container type.",
            "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()` across different container types.",
            "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, leveraging the constant time complexity guarantee of `empty()`.",
            "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, ensuring constant time complexity regardless of the container type."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()` across different container types.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9424770474433899
        },
        {
          "repository_name": "ceph",
          "hash": "c115bdb4951a0d1c54241145d411734f60247647",
          "author": "Danny Al-Gaaf",
          "date": "2013-02-14T10:26:22-08:00",
          "message": "rbd.cc: use empty() instead of size() to check for emptiness\n\nUse empty() since it should be prefered as it has, following the\nstandard, a constant time complexity regardless of the containter\ntype. The same is not guaranteed for size().\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "src/rbd.cc"
          ],
          "github_commit_url": "https://github.com/ceph/ceph/commit/c115bdb4951a0d1c54241145d411734f60247647",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "do_list"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()`.",
            "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()`.",
            "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, ensuring constant time complexity regardless of the container type.",
            "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, leveraging `empty()`'s constant time complexity.",
            "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()` across different container types."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, leveraging `empty()`'s constant time complexity.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9420853853225708
        },
        {
          "repository_name": "ceph",
          "hash": "1f0fd504901c31aa6a82c18e7b12c93e7279909d",
          "author": "Danny Al-Gaaf",
          "date": "2013-02-11T11:38:02+01:00",
          "message": "src/osd/PG.h: use empty() instead of size()\n\nFix warning for usage of objects.size(). Use empty() since it\nshould be prefered as it has, following the standard, a constant\ntime complexity regardless of the containter type. The same is not\nguaranteed for size().\n\nwarning from cppchecker was:\n[osd/PG.h:599]: (performance) Possible inefficient checking for\n  'objects' emptiness.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "src/osd/PG.h"
          ],
          "github_commit_url": "https://github.com/ceph/ceph/commit/1f0fd504901c31aa6a82c18e7b12c93e7279909d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "trim"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, ensuring constant time complexity.",
            "The optimization strategy involved replacing `size()` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()`.",
            "The optimization strategy involves replacing `objects.size()` with `objects.empty()` to ensure constant time complexity when checking for container emptiness.",
            "The optimization strategy involved replacing `objects.size()` with `objects.empty()` to check for emptiness, leveraging the constant time complexity of `empty()` across different container types.",
            "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()`."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `size()` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()`.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9409700632095337
        },
        {
          "repository_name": "ceph",
          "hash": "d0896404a9a5acd5430aff62d4684dc5ccb00ea6",
          "author": "Danny Al-Gaaf",
          "date": "2013-02-14T10:27:39-08:00",
          "message": "mds/CDir.cc: use !empty() instead of size()\n\nUse empty() since it should be prefered as it has, following the\nstandard, a constant time complexity regardless of the containter\ntype. The same is not guaranteed for size().\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "src/mds/CDir.cc"
          ],
          "github_commit_url": "https://github.com/ceph/ceph/commit/d0896404a9a5acd5430aff62d4684dc5ccb00ea6",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "CDir::take_waiting"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves replacing `size()` with `empty()` to ensure constant time complexity for checking container emptiness.",
            "The optimization strategy involves replacing `size()` with `empty()` for checking container emptiness to ensure constant time complexity.",
            "The optimization strategy involves replacing `size()` with `empty()` to ensure constant time complexity for checking container emptiness.",
            "The optimization strategy involves replacing `size()` with `empty()` to ensure constant time complexity for checking container emptiness.",
            "The optimization strategy involves replacing `size()` with `empty()` for checking container emptiness to ensure constant time complexity."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `size()` with `empty()` to ensure constant time complexity for checking container emptiness.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9400677680969238
        },
        {
          "repository_name": "ceph",
          "hash": "d50a22d6a6466b8dc1c2fbd90a45a8cd295c520d",
          "author": "Danny Al-Gaaf",
          "date": "2013-02-15T21:55:08+01:00",
          "message": "ceph_authtool.cc: use empty() instead of size()\n\nUse empty() since it should be prefered as it has, following the\nstandard, a constant time complexity regardless of the containter\ntype. The same is not guaranteed for size().\n\nwarning from cppchecker was:\n[src/ceph_authtool.cc:124]: (performance) Possible inefficient\n  checking for 'caps' emptiness.\n[src/ceph_authtool.cc:237]: (performance) Possible inefficient\n  checking for 'caps' emptiness.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "src/ceph_authtool.cc"
          ],
          "github_commit_url": "https://github.com/ceph/ceph/commit/d50a22d6a6466b8dc1c2fbd90a45a8cd295c520d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "main"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy used is replacing `size()` with `empty()` for checking container emptiness to ensure constant time complexity.",
            "The optimization strategy involves replacing `size()` with `empty()` for checking container emptiness to ensure constant time complexity.",
            "The optimization strategy involves replacing `size()` with `empty()` for checking container emptiness to ensure constant time complexity.",
            "The optimization strategy involves replacing `size()` with `empty()` for checking container emptiness to ensure constant time complexity.",
            "The optimization strategy involves replacing `size()` with `empty()` for checking container emptiness to ensure constant time complexity."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `size()` with `empty()` for checking container emptiness to ensure constant time complexity.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9330449104309082
        },
        {
          "repository_name": "ceph",
          "hash": "6f0175e5a95a6c1d7bc7baac6381256ea80f0f52",
          "author": "Danny Al-Gaaf",
          "date": "2013-02-13T14:41:04+01:00",
          "message": "OSDMonitor.cc: use !empty() instead of size()\n\nUse empty() since it should be prefered as it has, following the\nstandard, a constant time complexity regardless of the containter\ntype. The same is not guaranteed for size().\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "src/mon/OSDMonitor.cc"
          ],
          "github_commit_url": "https://github.com/ceph/ceph/commit/6f0175e5a95a6c1d7bc7baac6381256ea80f0f52",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "OSDMonitor::thrash"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves replacing `size()` with `empty()` for checking container emptiness to ensure constant time complexity.",
            "The optimization strategy involves replacing `size()` with `empty()` for checking container emptiness to ensure constant time complexity.",
            "The optimization strategy involves replacing `size()` with `empty()` to ensure constant time complexity regardless of the container type.",
            "The optimization strategy involves replacing `size()` with `empty()` for checking container emptiness to ensure constant time complexity regardless of the container type.",
            "The optimization strategy involves replacing `size()` with `empty()` for checking container emptiness to ensure constant time complexity regardless of the container type."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `size()` with `empty()` for checking container emptiness to ensure constant time complexity regardless of the container type.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9317631721496582
        },
        {
          "repository_name": "ceph",
          "hash": "722d12c812b4b20ad77682af438b3d200d69d49e",
          "author": "Danny Al-Gaaf",
          "date": "2013-02-13T15:24:37+01:00",
          "message": "ObjectCacher.cc: use empty() instead of !size() to check for emptiness\n\nUse empty() since it should be prefered as it has, following the\nstandard, a constant time complexity regardless of the containter\ntype. The same is not guaranteed for size().\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "src/osdc/ObjectCacher.cc"
          ],
          "github_commit_url": "https://github.com/ceph/ceph/commit/722d12c812b4b20ad77682af438b3d200d69d49e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ObjectCacher::~ObjectCacher"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves replacing `!size()` with `empty()` to check for container emptiness, leveraging the constant time complexity guarantee of `empty()`.",
            "The optimization strategy involves replacing `!size()` with `empty()` to check for container emptiness, leveraging the constant time complexity guarantee of `empty()` across different container types.",
            "The optimization strategy involves replacing `!size()` with `empty()` to check for container emptiness, leveraging the constant time complexity guarantee of `empty()`.",
            "The optimization strategy involves replacing `!size()` with `empty()` to check for container emptiness, leveraging the constant time complexity guarantee of `empty()` across different container types.",
            "The optimization strategy involves replacing `!size()` with `empty()` to check for container emptiness, ensuring constant time complexity regardless of the container type."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `!size()` with `empty()` to check for container emptiness, leveraging the constant time complexity guarantee of `empty()` across different container types.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9261093139648438
        },
        {
          "repository_name": "ceph",
          "hash": "f94f79793d27f34abb5320d52e760b3882665bfe",
          "author": "Danny Al-Gaaf",
          "date": "2013-02-13T14:59:53+01:00",
          "message": "LFNIndex.cc: use !holes.empty() instead of 'size() > 0'\n\nUse empty() since it should be prefered as it has, following the\nstandard, a constant time complexity regardless of the containter\ntype. The same is not guaranteed for size().\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "src/os/LFNIndex.cc"
          ],
          "github_commit_url": "https://github.com/ceph/ceph/commit/f94f79793d27f34abb5320d52e760b3882665bfe",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "LFNIndex::remove_objects"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves replacing `size() > 0` with `!empty()` for container checks to leverage the constant time complexity guarantee of `empty()`.",
            "The optimization strategy involves replacing `size() > 0` with `!empty()` to leverage the constant time complexity guarantee of `empty()` across different container types.",
            "The optimization strategy involves replacing `size() > 0` with `!empty()` to leverage the constant time complexity guarantee of `empty()` across different container types.",
            "The optimization strategy involves replacing `size() > 0` with `!empty()` to leverage the constant time complexity guarantee of `empty()` across different container types.",
            "The optimization strategy involves replacing `size() > 0` with `!empty()` to leverage the constant time complexity guarantee of `empty()` across different container types."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `size() > 0` with `!empty()` to leverage the constant time complexity guarantee of `empty()` across different container types.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9241528511047363
        },
        {
          "repository_name": "ceph",
          "hash": "14716fd24bb695975636bcce6afa51c563242bf4",
          "author": "Danny Al-Gaaf",
          "date": "2013-02-26T11:01:42+01:00",
          "message": "Monitor.h: use empty() instead of !size()\n\nUse empty() since it should be prefered as it has, following the\nstandard, a constant time complexity regardless of the containter\ntype. The same is not guaranteed for size().\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "src/mon/Monitor.h"
          ],
          "github_commit_url": "https://github.com/ceph/ceph/commit/14716fd24bb695975636bcce6afa51c563242bf4",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "finish"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves replacing `!size()` with `empty()` to ensure constant time complexity for checking container emptiness.",
            "The optimization strategy involves replacing `!size()` with `empty()` to ensure constant time complexity for checking container emptiness.",
            "The optimization strategy involves replacing `!size()` with `empty()` to ensure constant time complexity for checking container emptiness.",
            "The optimization strategy used is replacing `!size()` with `empty()` to ensure constant time complexity for checking container emptiness.",
            "The optimization strategy involves replacing `!size()` with `empty()` to ensure constant time complexity for checking container emptiness."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `!size()` with `empty()` to ensure constant time complexity for checking container emptiness.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9229735136032104
        },
        {
          "hash": "43c789c8f246a2a35864e3fca9585b55c40c2095",
          "author": "Danny Al-Gaaf",
          "date": "2014-09-30T23:30:32+02:00",
          "message": "spatialdb/spatial_db.cc: use !empty() instead of 'size() > 0'\n\nUse empty() since it should be prefered as it has, following\nthe standard, a constant time complexity regardless of the\ncontainter type. The same is not guaranteed for size().\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
          ],
          "github_commit_url": "https://github.com/facebook/rocksdb/commit/43c789c8f246a2a35864e3fca9585b55c40c2095",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "SpatialIndexCursor"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "rocksdb",
          "optimization_summary": [
            "The optimization strategy involves replacing `size() > 0` with `!empty()` to leverage the constant time complexity of `empty()` across different container types.",
            "The optimization strategy involves replacing `size() > 0` with `empty()` to leverage the constant time complexity of `empty()` across different container types.",
            "The optimization strategy involves replacing `size() > 0` with `empty()` to leverage constant time complexity for checking container emptiness.",
            "The optimization strategy involves replacing `size() > 0` with `empty()` to leverage constant time complexity for checking container emptiness.",
            "The optimization strategy involves replacing `size() > 0` with `!empty()` to leverage the constant time complexity of `empty()` across different container types."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `size() > 0` with `!empty()` to leverage the constant time complexity of `empty()` across different container types.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9205760955810547
        },
        {
          "hash": "4a707f08bd78decff27029fb9b05807fc227c54a",
          "author": "Danny Al-Gaaf",
          "date": "2018-05-29T17:52:24+02:00",
          "message": "librmb: use empty() over length() for emptiness check\n\nUse empty() since it should be prefered as it has, following the\nstandard, a constant time complexity regardless of the containter\ntype. The same is not guaranteed for size().\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "src/librmb/tools/rmb/rmb-commands.cpp"
          ],
          "github_commit_url": "https://github.com/ceph-dovecot/dovecot-ceph-plugin/commit/4a707f08bd78decff27029fb9b05807fc227c54a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "RmbCommands::load_objects"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "dovecot-ceph-plugin",
          "optimization_summary": [
            "The optimization strategy involves replacing `length()` with `empty()` for checking container emptiness to ensure constant time complexity.",
            "The optimization strategy involves replacing `length()` with `empty()` for checking container emptiness to ensure constant time complexity.",
            "The optimization strategy involves replacing `length()` with `empty()` for checking container emptiness to ensure constant time complexity.",
            "The optimization strategy involves replacing the use of `length()` with `empty()` for checking container emptiness to ensure constant time complexity.",
            "The optimization strategy involves replacing the use of `length()` with `empty()` for checking container emptiness to ensure constant time complexity."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `length()` with `empty()` for checking container emptiness to ensure constant time complexity.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8953222036361694
        },
        {
          "repository_name": "ceph",
          "hash": "49028367dbecd02a203d51bba4c60398d3830ca6",
          "author": "Danny Al-Gaaf",
          "date": "2013-02-15T21:55:08+01:00",
          "message": "mds/MDSMap.h: use up.empty() instead of up.size()\n\nUse empty() since it should be prefered as it has, following the\nstandard, a constant time complexity regardless of the containter\ntype. The same is not guaranteed for size().\n\nwarning from cppchecker was:\n[src/mds/MDSMap.h:448]: (performance) Possible inefficient\n  checking for 'up' emptiness.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "src/mds/MDSMap.h"
          ],
          "github_commit_url": "https://github.com/ceph/ceph/commit/49028367dbecd02a203d51bba4c60398d3830ca6",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "get_mdsmap_compat_set_base"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves replacing `up.size()` with `up.empty()` to ensure constant time complexity when checking for container emptiness.",
            "The optimization strategy involves replacing `up.size()` with `up.empty()` to check for container emptiness, leveraging the constant time complexity of `empty()`.",
            "The optimization strategy involves replacing `up.size()` with `up.empty()` to check for container emptiness, leveraging the constant time complexity of `empty()` regardless of container type.",
            "The optimization strategy involves replacing `up.size()` with `up.empty()` to check for container emptiness, leveraging the constant time complexity of `empty()`.",
            "The optimization strategy involves replacing `up.size()` with `up.empty()` to check for container emptiness, leveraging the constant time complexity of `empty()` across different container types."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `up.size()` with `up.empty()` to check for container emptiness, leveraging the constant time complexity of `empty()`.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8770104050636292
        },
        {
          "repository_name": "goldberg_emulator",
          "hash": "56957abc9962428fb6ae536f1374febd55303e90",
          "author": "Nemirtingas",
          "date": "2019-11-08T16:00:49+01:00",
          "message": "Little improvements\n\nsteam_user_stats: Use the value stored in the JSON object.\nsteal_inventory: use 'empty' that is guaranteed to be constant in time.",
          "modified_files_count": 1,
          "modified_files": [
            "dll/steam_inventory.h"
          ],
          "github_commit_url": "https://github.com/inflation/goldberg_emulator/commit/56957abc9962428fb6ae536f1374febd55303e90",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "RunCallbacks"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved using the 'empty' method, which is guaranteed to have constant time complexity, instead of potentially slower operations.",
            "The optimization strategy involved using the 'empty' method for checking container emptiness, which is guaranteed to have constant time complexity.",
            "The optimization strategy involves using the 'empty' method for checking container emptiness, which is guaranteed to have constant time complexity, instead of potentially less efficient methods.",
            "The optimization strategy involves using a constant-time 'empty' method to check inventory status instead of a potentially non-constant-time alternative.",
            "The optimization strategy involves using a constant-time 'empty' method to check inventory status instead of a potentially non-constant-time alternative."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves using the 'empty' method for checking container emptiness, which is guaranteed to have constant time complexity, instead of potentially less efficient methods.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8496752381324768
        },
        {
          "repository_name": "clink",
          "hash": "e4499bc89bf772f39493d0bc56d172bac1b92463",
          "author": "Martin Ridgers",
          "date": "2016-07-14T17:47:19+02:00",
          "message": "empty() is faster than length()",
          "modified_files_count": 1,
          "modified_files": [
            "clink/lib/file_match_generator.cpp"
          ],
          "github_commit_url": "https://github.com/chrisant996/clink/commit/e4499bc89bf772f39493d0bc56d172bac1b92463",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "file_match_generator::generate"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved replacing the use of the `length()` method with the `empty()` method for checking if a container is empty, as `empty()` is generally faster.",
            "The optimization strategy involves replacing the use of the `length()` method with the `empty()` method to check if a container is empty, as `empty()` is generally faster.",
            "The optimization strategy involves replacing the use of `length()` with `empty()` for checking if a container is empty, as `empty()` is typically faster.",
            "The optimization strategy involves replacing the use of the `length()` method with the `empty()` method for checking if a container is empty, as `empty()` is generally faster.",
            "The optimization strategy replaced the use of the `length()` method with the `empty()` method to check if a container is empty, as `empty()` is generally faster."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing the use of the `length()` method with the `empty()` method for checking if a container is empty, as `empty()` is generally faster.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8399536609649658
        },
        {
          "repository_name": "ceph",
          "hash": "3b77687c42598c721cf98e3f27158bb4f8fa9d10",
          "author": "Danny Al-Gaaf",
          "date": "2013-02-11T11:38:02+01:00",
          "message": "common/AsyncReserver.h: use empty() instead of size()\n\nFix warning for usage of queue.size() in do_queues(). Use empty()\nsince it should be prefered as it has, following the standard, a\nconstant time complexity regardless of the containter type. The\nsame is not guaranteed for size().\n\nwarning from cppchecker was:\n[common/AsyncReserver.h:40]: (performance) Possible inefficient\n  checking for 'queue' emptiness.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
          "modified_files_count": 1,
          "modified_files": [
            "src/common/AsyncReserver.h"
          ],
          "github_commit_url": "https://github.com/ceph/ceph/commit/3b77687c42598c721cf98e3f27158bb4f8fa9d10",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "do_queues"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves replacing `queue.size()` with `queue.empty()` to check for emptiness, as `empty()` guarantees constant time complexity regardless of the container type.",
            "The optimization strategy involves replacing `queue.size()` with `queue.empty()` to check for emptiness, as `empty()` guarantees constant time complexity regardless of the container type.",
            "The optimization strategy involved replacing `queue.size()` with `queue.empty()` to check for queue emptiness, as `empty()` guarantees constant time complexity regardless of the container type.",
            "The optimization strategy involves replacing `queue.size()` with `queue.empty()` to check for queue emptiness, leveraging the constant time complexity of `empty()` across different container types.",
            "The optimization strategy involves replacing `queue.size()` with `queue.empty()` to ensure constant time complexity for checking queue emptiness."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing `queue.size()` with `queue.empty()` to check for emptiness, as `empty()` guarantees constant time complexity regardless of the container type.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8038232922554016
        }
      ]
    },
    {
      "cluster_id": "6661",
      "size": 16,
      "repositories_distribution": {
        "dpdk": 1,
        "jumanpp": 2,
        "stxxl": 1,
        "vengi": 1,
        "zstd": 2,
        "kmsan": 1,
        "cm-compiler": 1,
        "stress-ng": 1,
        "hypre": 1,
        "supercollider": 1,
        "skia": 1,
        "xmr-stak": 1,
        "ardour": 1,
        "zydis": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves strategically adding, modifying, or relocating prefetch instructions to improve cache utilization, reduce memory access latency, and enhance overall performance.",
        "code_examples": [
          [
            "// Before\nvoid process_data(float *buf, nframes_t nframes, float *min, float *max) {\n    while (nframes >= 4) {\n        work = _mm_load_ps(buf);\n        current_min = _mm_min_ps(current_min, work);\n        current_max = _mm_max_ps(current_max, work);\n        buf += 4;\n        nframes -= 4;\n    }\n}",
            "// After\nvoid process_data(float *buf, nframes_t nframes, float *min, float *max) {\n    while (nframes >= 16) {\n        __builtin_prefetch(buf + 64, 0, 0);\n        work = _mm_load_ps(buf);\n        current_min = _mm_min_ps(current_min, work);\n        current_max = _mm_max_ps(current_max, work);\n        buf += 4;\n        work = _mm_load_ps(buf);\n        current_min = _mm_min_ps(current_min, work);\n        current_max = _mm_max_ps(current_max, work);\n        buf += 4;\n        work = _mm_load_ps(buf);\n        current_min = _mm_min_ps(current_min, work);\n        current_max = _mm_max_ps(current_max, work);\n        buf += 4;\n        work = _mm_load_ps(buf);\n        current_min = _mm_min_ps(current_min, work);\n        current_max = _mm_max_ps(current_max, work);\n        buf += 4;\n        nframes -= 16;\n    }\n}"
          ],
          [
            "// Before\nraw_copy_to_user(void __user *to, const void *from, unsigned long n) {\n    prefetchw(from);\n    return __xtensa_copy_user((__force void *)to, from, n);\n}",
            "// After\nraw_copy_to_user(void __user *to, const void *from, unsigned long n) {\n    prefetch(from);\n    return __xtensa_copy_user((__force void *)to, from, n);\n}"
          ]
        ],
        "application_conditions": [
          "The code must contain loops that iterate over memory regions larger than the CPU cache line size, where prefetching can reduce memory latency.",
          "The code must include memory access patterns that are predictable and sequential, allowing prefetch instructions to load data into the cache before it is explicitly accessed.",
          "The code must exhibit performance bottlenecks caused by memory access latency, as identified through profiling or static analysis of memory access patterns."
        ]
      },
      "commits": [
        {
          "repository_name": "hypre",
          "hash": "426ae5c72af44eb522cc67e2b047e3e8df9c1160",
          "author": "Wayne Mitchell",
          "date": "2021-11-05T00:31:06+00:00",
          "message": "Add prefetch",
          "modified_files_count": 1,
          "modified_files": [
            "src/utilities/memory.c"
          ],
          "github_commit_url": "https://github.com/hypre-space/hypre/commit/426ae5c72af44eb522cc67e2b047e3e8df9c1160",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "hypre_UnifiedMemPrefetch"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves adding prefetch instructions to improve memory access performance by reducing latency.",
            "The optimization strategy involves adding prefetch instructions to improve memory access performance by reducing latency.",
            "The optimization strategy involves adding prefetch instructions to improve memory access performance by reducing latency.",
            "The optimization strategy involves adding prefetch instructions to improve memory access performance by fetching data into the cache before it is needed.",
            "The optimization strategy involves adding prefetch instructions to improve memory access performance by reducing latency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves adding prefetch instructions to improve memory access performance by reducing latency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.865500807762146
        },
        {
          "repository_name": "skia",
          "hash": "0a5699ee482c3b5ef1e857de8a2de06c6a1fa298",
          "author": "commit-bot@chromium.org",
          "date": "2013-07-11T20:28:24+00:00",
          "message": "ARM Skia NEON patches - 13 - S32A_Opaque\n\n\n\n\n\nBlitrow32: S32A_Opaque code cleaning and speed improvement\n\n- the old way of calculating alpha doesn't seem to be used anymore,\n  so remove the remaining code\n- adding prefetching allows to improve performance greatly in some\n  cases at the expense of a little trade-off:\n\n+-------+-----------+------------+\n| count | Cortex-A9 | Cortex-A15 |\n+-------+-----------+------------+\n| 1,2   | 0         | 0          |\n+-------+-----------+------------+\n| 4     | 0         | -3%        |\n+-------+-----------+------------+\n| 8     | 0         | -4%        |\n+-------+-----------+------------+\n| 16    | 0         | -5%        |\n+-------+-----------+------------+\n| 64    | +14%      | 0          |\n+-------+-----------+------------+\n| 256   | +14%      | +12%       |\n+-------+-----------+------------+\n| 1024  | +115%     | +15%       |\n+-------+-----------+------------+\n\nBUG=\nR=djsollen@google.com\n\nAuthor: kevin.petit.arm@gmail.com\n\nReview URL: https://chromiumcodereview.appspot.com/18459008\n\ngit-svn-id: http://skia.googlecode.com/svn/trunk@10026 2bbb7eff-a529-9590-31e7-b0007b416f81",
          "modified_files_count": 1,
          "modified_files": [
            "src/opts/SkBlitRow_opts_arm_neon.cpp"
          ],
          "github_commit_url": "https://github.com/google/skia/commit/0a5699ee482c3b5ef1e857de8a2de06c6a1fa298",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "S32A_Opaque_BlitRow32_neon"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved adding prefetching to improve performance in the S32A_Opaque_BlitRow32_neon function.",
            "The optimization strategy involved adding prefetching to improve performance in certain cases by reducing memory latency.",
            "The optimization strategy involved adding prefetching to improve performance in certain cases by reducing memory latency.",
            "The optimization strategy involved adding prefetching to improve performance in certain cases by reducing memory latency.",
            "The optimization strategy involved adding prefetching to improve performance in certain cases by reducing memory latency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved adding prefetching to improve performance in certain cases by reducing memory latency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8358625769615173
        },
        {
          "repository_name": "stress-ng",
          "hash": "2659931d389cfd487b5740c7c9886028ed1e7975",
          "author": "Colin Ian King",
          "date": "2023-03-23T12:36:32+00:00",
          "message": "core-mmap: add prefetch in check loop\n\nSigned-off-by: Colin Ian King <colin.i.king@gmail.com>",
          "modified_files_count": 1,
          "modified_files": [
            "core-mmap.c"
          ],
          "github_commit_url": "https://github.com/ColinIanKing/stress-ng/commit/2659931d389cfd487b5740c7c9886028ed1e7975",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "stress_mmap_check"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves adding prefetch instructions in the check loop to improve memory access performance.",
            "The optimization strategy involves adding prefetch instructions within the check loop to improve memory access performance.",
            "The optimization strategy involves adding prefetch instructions within a loop to improve memory access performance by reducing latency.",
            "The optimization strategy involves adding prefetch instructions within the check loop to improve memory access performance.",
            "The optimization strategy involves adding prefetch instructions within the check loop to improve memory access performance by reducing latency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves adding prefetch instructions within the check loop to improve memory access performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8280137181282043
        },
        {
          "repository_name": "zstd",
          "hash": "a494111385bd7d61dbf8f4e3d817e51d2ba6a81c",
          "author": "W. Felix Handte",
          "date": "2020-09-10T18:51:52-04:00",
          "message": "Move Prefetch Before Insertion; Speed Up ~6%",
          "modified_files_count": 1,
          "modified_files": [
            "lib/compress/zstd_lazy.c"
          ],
          "github_commit_url": "https://github.com/facebook/zstd/commit/a494111385bd7d61dbf8f4e3d817e51d2ba6a81c",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ZSTD_HcFindBestMatch_generic"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved moving a prefetch operation before an insertion to reduce latency and improve cache utilization.",
            "The optimization strategy involved moving a prefetch operation before an insertion to reduce latency and improve cache utilization.",
            "The optimization strategy involved moving a prefetch operation before an insertion to reduce latency and improve cache utilization.",
            "The optimization strategy involves moving a prefetch operation before an insertion to reduce latency and improve cache utilization.",
            "The optimization strategy involved moving a prefetch operation before an insertion to reduce latency and improve cache utilization."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved moving a prefetch operation before an insertion to reduce latency and improve cache utilization.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8206430077552795
        },
        {
          "repository_name": "supercollider",
          "hash": "215253cdef9c06942f721c5564301c0a9b0fb573",
          "author": "Tim Blechmann",
          "date": "2013-09-18T16:44:14+02:00",
          "message": "supernova: sc_synth - perform prefetching of units\n\nSigned-off-by: Tim Blechmann <tim@klingt.org>",
          "modified_files_count": 1,
          "modified_files": [
            "server/supernova/sc/sc_synth.hpp"
          ],
          "github_commit_url": "https://github.com/supercollider/supercollider/commit/215253cdef9c06942f721c5564301c0a9b0fb573",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "perform"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves prefetching units in the `perform` function to reduce memory latency and improve performance.",
            "The optimization strategy involves prefetching units in the `perform` function to reduce memory access latency and improve performance.",
            "The optimization strategy involves prefetching units in the `perform` function to reduce memory latency and improve cache utilization.",
            "The optimization strategy involves prefetching units in the `perform` function to reduce memory access latency.",
            "The optimization strategy involves prefetching units in the `perform` function to reduce memory access latency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves prefetching units in the `perform` function to reduce memory access latency and improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8132690787315369
        },
        {
          "repository_name": "stxxl",
          "hash": "913c4f255ea2a6ab10290b1ac126cc2466cd8edc",
          "author": "Andreas Beckmann",
          "date": "2009-11-16T11:45:30+00:00",
          "message": "runs_merger: deduct all memory used by prefetch buffers from memory_to_use\n\ngit-svn-id: svn://svn.code.sf.net/p/stxxl/code/trunk@2141 4e380d45-d1fd-0310-85a7-d18ec86df0ad",
          "modified_files_count": 1,
          "modified_files": [
            "include/stxxl/bits/stream/sort_stream.h"
          ],
          "github_commit_url": "https://github.com/stxxl/stxxl/commit/913c4f255ea2a6ab10290b1ac126cc2466cd8edc",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "buffer_pos"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves adjusting memory allocation by deducting the memory used by prefetch buffers from the total available memory to optimize resource utilization.",
            "The optimization strategy involves deducting the memory used by prefetch buffers from the total available memory to ensure efficient memory allocation and usage.",
            "The optimization strategy involves deducting the memory used by prefetch buffers from the total available memory to ensure efficient memory allocation and usage.",
            "The optimization strategy involves deducting the memory used by prefetch buffers from the total memory available to ensure more efficient memory allocation and usage.",
            "The optimization strategy involves deducting the memory used by prefetch buffers from the total available memory to ensure efficient memory allocation and usage."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            false,
            false
          ],
          "optimization_summary_final": "The optimization strategy involves deducting the memory used by prefetch buffers from the total available memory to ensure efficient memory allocation and usage.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8129170536994934
        },
        {
          "repository_name": "kmsan",
          "hash": "7d4914db8fda6d38d92b1b8a740bafbd6c6d89a1",
          "author": "Max Filippov",
          "date": "2017-04-04T16:53:13-04:00",
          "message": "xtensa: fix prefetch in the raw_copy_to_user\n\n'from' is the input buffer, it should be prefetched with prefetch, not\nprefetchw.\n\nTested-by: Max Filippov <jcmvbkbc@gmail.com>\nSigned-off-by: Max Filippov <jcmvbkbc@gmail.com>\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
          "modified_files_count": 1,
          "modified_files": [
            "arch/xtensa/include/asm/uaccess.h"
          ],
          "github_commit_url": "https://github.com/google/kmsan/commit/7d4914db8fda6d38d92b1b8a740bafbd6c6d89a1",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "raw_copy_to_user"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved changing the prefetch instruction from 'prefetchw' to 'prefetch' for the input buffer to improve performance.",
            "The optimization strategy involved changing the prefetch instruction from 'prefetchw' to 'prefetch' for the input buffer to improve performance by correctly prefetching data for read operations.",
            "The optimization strategy involved changing the prefetch instruction from 'prefetchw' to 'prefetch' for the input buffer 'from' to ensure correct prefetching behavior.",
            "The optimization strategy involved changing the prefetch instruction from 'prefetchw' to 'prefetch' for the input buffer to improve performance.",
            "The optimization strategy involved changing the prefetch instruction from 'prefetchw' to 'prefetch' for the input buffer 'from' to ensure correct prefetching behavior."
          ],
          "is_generic_optimization": [
            true,
            true,
            false,
            true,
            false
          ],
          "optimization_summary_final": "The optimization strategy involved changing the prefetch instruction from 'prefetchw' to 'prefetch' for the input buffer to improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7917745113372803
        },
        {
          "repository_name": "jumanpp",
          "hash": "18247712495440cd1789f2326a7896c284a17e4e",
          "author": "Tolmachev Arseny",
          "date": "2017-11-11T18:19:24+09:00",
          "message": "hw prefetcher seems to be smarter",
          "modified_files_count": 1,
          "modified_files": [
            "v2/src/core/codegen/pattern_feature_codegen.cc"
          ],
          "github_commit_url": "https://github.com/ku-nlp/jumanpp/commit/18247712495440cd1789f2326a7896c284a17e4e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "InNodeComputationsCodegen::generateLoopBody"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved leveraging the hardware prefetcher to improve loop performance by reducing memory access latency.",
            "The optimization strategy involved leveraging the hardware prefetcher to improve performance by adjusting the loop body generation to better utilize prefetching capabilities.",
            "The optimization strategy involved leveraging the hardware prefetcher to improve loop performance by reducing memory access latency.",
            "The optimization strategy involved leveraging hardware prefetching to improve loop performance by reducing memory access latency.",
            "The optimization strategy involved leveraging the hardware prefetcher's capabilities to improve loop performance by reducing memory access latency."
          ],
          "is_generic_optimization": [
            true,
            false,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved leveraging the hardware prefetcher to improve loop performance by reducing memory access latency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7912836074829102
        },
        {
          "repository_name": "zydis",
          "hash": "04c6c1b7e161ecaa178495c9cd30fe94a3e7b4e5",
          "author": "mappzor",
          "date": "2023-12-09T17:15:45+01:00",
          "message": "Enable `IPREFETCH` mode by default",
          "modified_files_count": 1,
          "modified_files": [
            "src/Decoder.c"
          ],
          "github_commit_url": "https://github.com/zyantific/zydis/commit/04c6c1b7e161ecaa178495c9cd30fe94a3e7b4e5",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ZydisDecoderInit"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves enabling instruction prefetching (`IPREFETCH`) by default to improve CPU cache utilization and reduce latency.",
            "The optimization strategy involves enabling the `IPREFETCH` mode by default to improve instruction prefetching performance.",
            "The optimization strategy involves enabling the `IPREFETCH` mode by default to improve instruction prefetching performance.",
            "The optimization strategy involves enabling the `IPREFETCH` mode by default to improve instruction prefetching efficiency.",
            "The optimization strategy involves enabling the `IPREFETCH` mode by default to improve instruction prefetching performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves enabling the `IPREFETCH` mode by default to improve instruction prefetching performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7897745370864868
        },
        {
          "repository_name": "cm-compiler",
          "hash": "941bbd910c944a2a9a7d8b8b0afbd03cd37325cb",
          "author": "Semenov, Vadim",
          "date": "2024-05-14T21:32:22+03:00",
          "message": "Allow all-default-cache-hint LSC prefetch\n\n.",
          "modified_files_count": 1,
          "modified_files": [
            "clang/lib/Headers/cm/include/cm/cm_lsc.h"
          ],
          "github_commit_url": "https://github.com/intel/cm-compiler/commit/941bbd910c944a2a9a7d8b8b0afbd03cd37325cb",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves allowing all-default-cache-hint LSC prefetch to improve memory access performance.",
            "The optimization strategy involves allowing all-default-cache-hint LSC prefetch to improve memory access performance.",
            "The optimization strategy involves allowing all-default-cache-hint LSC prefetch to improve performance by leveraging cache hints.",
            "The optimization strategy involves enabling LSC prefetch with all-default cache hints to improve memory access performance.",
            "The optimization strategy involves allowing all-default-cache-hint LSC prefetch to improve memory access performance."
          ],
          "is_generic_optimization": [
            true,
            false,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves allowing all-default-cache-hint LSC prefetch to improve memory access performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7765520811080933
        },
        {
          "repository_name": "vengi",
          "hash": "7b966907884be4c40f2d816e97d6da2d99a4b8ee",
          "author": "Martin Gerhardy",
          "date": "2016-11-28T20:12:02+01:00",
          "message": "VOXEL: improved prefetch performance\n\nless locks",
          "modified_files_count": 1,
          "modified_files": [
            "src/modules/voxel/polyvox/PagedVolume.cpp"
          ],
          "github_commit_url": "https://github.com/vengi-voxel/vengi/commit/7b966907884be4c40f2d816e97d6da2d99a4b8ee",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "PagedVolume::prefetch"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of locks in the prefetch function to improve performance.",
            "The optimization strategy involved reducing the number of locks in the prefetch function to improve performance.",
            "The optimization strategy involved reducing the number of locks in the prefetch function to improve performance.",
            "The optimization strategy involved reducing the number of locks in the prefetch function to improve performance.",
            "The optimization strategy involved reducing the number of locks in the prefetch function to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            false,
            true,
            false
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of locks in the prefetch function to improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7730188965797424
        },
        {
          "repository_name": "jumanpp",
          "hash": "96b21ccde0c8769ce8faf2c2e8e41cb094b22c19",
          "author": "Arseny Tolmachev",
          "date": "2017-10-13T20:36:30+09:00",
          "message": "prefetch next row of perceptron data",
          "modified_files_count": 1,
          "modified_files": [
            "v2/src/core/analysis/perceptron.cc"
          ],
          "github_commit_url": "https://github.com/ku-nlp/jumanpp/commit/96b21ccde0c8769ce8faf2c2e8e41cb094b22c19",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "HashedFeaturePerceptron::add"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves prefetching the next row of perceptron data to reduce memory access latency.",
            "The optimization strategy involves prefetching the next row of perceptron data to reduce memory access latency.",
            "The optimization strategy involves prefetching the next row of perceptron data to reduce memory latency and improve cache utilization.",
            "The optimization strategy involves prefetching the next row of perceptron data to reduce memory latency and improve cache utilization.",
            "The optimization strategy involves prefetching the next row of perceptron data to reduce memory access latency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves prefetching the next row of perceptron data to reduce memory access latency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7726922631263733
        },
        {
          "repository_name": "zstd",
          "hash": "57a100f6dcb46fff20eacdfc9fc000b0f226b76f",
          "author": "W. Felix Handte",
          "date": "2021-09-01T14:15:04-04:00",
          "message": "Add `ip1 + 128` Prefetch; Tiny Cleanup",
          "modified_files_count": 1,
          "modified_files": [
            "lib/compress/zstd_fast.c"
          ],
          "github_commit_url": "https://github.com/facebook/zstd/commit/57a100f6dcb46fff20eacdfc9fc000b0f226b76f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ZSTD_compressBlock_fast_generic_pipelined"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves adding prefetching for `ip1 + 128` to improve data access latency during compression.",
            "The optimization strategy involves adding prefetching for `ip1 + 128` to improve cache utilization and reduce memory latency.",
            "The optimization strategy involves adding prefetching for `ip1 + 128` to improve memory access latency in the `ZSTD_compressBlock_fast_generic_pipelined` function.",
            "The optimization strategy involves adding prefetching for `ip1 + 128` to improve memory access patterns and reduce latency.",
            "The optimization strategy involves adding prefetching for `ip1 + 128` to improve memory access patterns and reduce latency."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves adding prefetching for `ip1 + 128` to improve memory access patterns and reduce latency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.763763964176178
        },
        {
          "hash": "52c8e00eddc6b943e03838ddeafa7d516bdc5205",
          "author": "Sampo Savolainen",
          "date": "2007-03-15T19:54:18+00:00",
          "message": "Add Mike's quad-quad + prefetch optimization.\n\n\ngit-svn-id: svn://localhost/ardour2/trunk@1597 d708f5d6-7413-0410-9779-e7cbd77b26cf",
          "modified_files_count": 1,
          "modified_files": [
            "libs/ardour/sse_functions_xmm.cc"
          ],
          "github_commit_url": "https://github.com/Ardour/ardour/commit/52c8e00eddc6b943e03838ddeafa7d516bdc5205",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "x86_sse_find_peaks"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "ardour",
          "optimization_summary": [
            "The optimization strategy involves adding prefetch instructions to improve data access patterns and reduce cache misses in the SSE-based peak finding function.",
            "The optimization strategy involves adding prefetch instructions to improve cache performance during peak finding operations.",
            "The optimization strategy involves using quad-quad operations and prefetching to enhance performance in the SSE function for finding peaks.",
            "The optimization strategy involves adding prefetch instructions to improve cache utilization and reduce memory latency in the SSE-based peak finding function.",
            "The optimization strategy involves using quad-quad operations and prefetching to enhance performance in the SSE-based peak finding function."
          ],
          "is_generic_optimization": [
            true,
            true,
            false,
            true,
            false
          ],
          "optimization_summary_final": "The optimization strategy involves adding prefetch instructions to improve cache utilization and reduce memory latency in the SSE-based peak finding function.",
          "is_generic_optimization_final": true,
          "authority_score": 0.757015585899353
        },
        {
          "repository_name": "xmr-stak",
          "hash": "c88e76d9a9b978ba93050dca783294223cb7ba9a",
          "author": "fireice-uk",
          "date": "2018-01-03T07:52:56+00:00",
          "message": "Merge pull request #705 from dataway/dev\n\nRearrange prefetch for slight performance increase in CPU miner",
          "modified_files_count": 1,
          "modified_files": [
            "xmrstak/backend/cpu/crypto/cryptonight_aesni.h"
          ],
          "github_commit_url": "https://github.com/fireice-uk/xmr-stak/commit/c88e76d9a9b978ba93050dca783294223cb7ba9a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "cryptonight_hash"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved rearranging prefetch instructions to improve performance in the CPU miner.",
            "The optimization strategy involved rearranging prefetch instructions to improve performance in the CPU miner.",
            "The optimization strategy involved rearranging prefetch instructions to improve performance in the CPU miner.",
            "The optimization strategy involved rearranging prefetch instructions to improve performance in the CPU miner.",
            "The optimization strategy involved rearranging prefetch instructions to improve performance in the CPU miner."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved rearranging prefetch instructions to improve performance in the CPU miner.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7530792355537415
        },
        {
          "hash": "5e1d11ecf5212153ffb095d4a49fbc38d9112624",
          "author": "Nelio Laranjeiro",
          "date": "2016-03-16T18:52:17+01:00",
          "message": "mlx5: prefetch next Tx mbuf header and data\n\nThis change improves performance noticeably.\n\nSigned-off-by: Nelio Laranjeiro <nelio.laranjeiro@6wind.com>",
          "modified_files_count": 1,
          "modified_files": [
            "drivers/net/mlx5/mlx5_rxtx.c"
          ],
          "github_commit_url": "https://github.com/DPDK/dpdk/commit/5e1d11ecf5212153ffb095d4a49fbc38d9112624",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "transmitted"
          ],
          "is_opt_ds_simple": "true",
          "repository_name": "dpdk",
          "optimization_summary": [
            "The optimization strategy involves prefetching the next Tx mbuf header and data to improve performance by reducing memory access latency.",
            "The optimization strategy involves prefetching the next Tx mbuf header and data to improve performance by reducing memory access latency.",
            "The optimization strategy involves prefetching the next Tx mbuf header and data to improve performance by reducing memory access latency.",
            "The optimization strategy involves prefetching the next Tx mbuf header and data to improve performance by reducing memory access latency.",
            "The optimization strategy involves prefetching the next Tx mbuf header and data to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves prefetching the next Tx mbuf header and data to improve performance by reducing memory access latency.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7491849660873413
        }
      ]
    },
    {
      "cluster_id": "463",
      "size": 16,
      "repositories_distribution": {
        "Kratos": 1,
        "apultra": 3,
        "TFT_ILI9341": 1,
        "cmix": 1,
        "tvheadend": 1,
        "embree": 1,
        "RawTherapee": 1,
        "lime3ds-archive": 1,
        "ffmpeg": 1,
        "darktable": 1,
        "opennn": 1,
        "harfbuzz": 1,
        "SORT": 1,
        "hoomd-blue": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits involves reducing redundant calculations by precomputing values outside of loops, thereby minimizing repeated computations and improving performance.",
        "code_examples": [
          [
            "// Before\nconst float timeSegments = float(int(pre.numTimeSteps()-1));\nconst float timeScaled = ray.time * timeSegments;\nconst size_t itime = int(clamp(floor(timeScaled), 0.0f, timeSegments-1.0f));\nlazy_node = grid->root(itime);",
            "// After\nlazy_node = grid->root(pre.itime());"
          ],
          [
            "// Before\nfor (size_t weight = 0; weight < states_[layer].size(); ++weight) {\n    states_[offset][neuron] += states_[layer][weight] * weights_[layer][neuron][weight];\n}\nstates_[offset][neuron] = logistic_.Squash(states_[offset][neuron]);",
            "// After\nstates_[offset][neuron] = logistic_.Squash(std::inner_product(\n    &states_[layer][0], &states_[layer][states_[layer].size()],\n    &weights_[layer][neuron][0], 0.0));"
          ]
        ],
        "application_conditions": [
          "The code contains a loop where the same calculation is performed multiple times with identical inputs.",
          "The code accesses a value derived from a constant or precomputable expression within a loop without caching it outside the loop.",
          "The code performs a computationally expensive operation inside a loop that could be hoisted outside the loop without altering program semantics."
        ]
      },
      "commits": [
        {
          "repository_name": "apultra",
          "hash": "c6f844e656030eda36f3e5855e6cf3a9d8ccdc9e",
          "author": "Emmanuel Marty",
          "date": "2019-11-27T09:48:52+01:00",
          "message": "Small speedup",
          "modified_files_count": 1,
          "modified_files": [
            "src/shrink.c"
          ],
          "github_commit_url": "https://github.com/emmanuel-marty/apultra/commit/c6f844e656030eda36f3e5855e6cf3a9d8ccdc9e",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "apultra_optimize_forward"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of iterations in a loop by adjusting the loop condition to avoid unnecessary processing.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
            "The optimization strategy involved reducing the number of memory allocations by reusing previously allocated buffers.",
            "The optimization strategy involved reducing the number of iterations in a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            false,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9804877638816833
        },
        {
          "repository_name": "TFT_ILI9341",
          "hash": "5dedc4c644eef82f73e06c86ca1c566f6874aa90",
          "author": "Bodmer",
          "date": "2016-07-24T01:31:37+01:00",
          "message": "Minor performance tweak",
          "modified_files_count": 1,
          "modified_files": [
            "TFT_ILI9341.cpp"
          ],
          "github_commit_url": "https://github.com/Bodmer/TFT_ILI9341/commit/5dedc4c644eef82f73e06c86ca1c566f6874aa90",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "TFT_ILI9341::setAddrWindow"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant function calls by caching frequently accessed values within the `setAddrWindow` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values used within a loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing values used within a loop.",
            "The optimization strategy involved reducing redundant address window settings by checking if the new coordinates match the current ones before updating.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9804877638816833
        },
        {
          "repository_name": "cmix",
          "hash": "5d326560c71d1e41a9a678256dca8f763e5db992",
          "author": "Byron Knoll",
          "date": "2016-04-18T18:45:25-07:00",
          "message": "performance improvement",
          "modified_files_count": 1,
          "modified_files": [
            "src/mixer/byte-mixer.cpp"
          ],
          "github_commit_url": "https://github.com/byronknoll/cmix/commit/5d326560c71d1e41a9a678256dca8f763e5db992",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ByteMixer::ByteUpdate"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop and reusing them within the loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop and reusing it within the loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9804877638816833
        },
        {
          "repository_name": "ffmpeg",
          "hash": "eb73742d6e19d72bced2bfec6f65cd45e93308d1",
          "author": "Vitor Sessak",
          "date": "2008-07-06T12:01:59+00:00",
          "message": "Slighly faster operation\n\nOriginally committed as revision 14091 to svn://svn.ffmpeg.org/ffmpeg/trunk",
          "modified_files_count": 1,
          "modified_files": [
            "libavcodec/ra288.c"
          ],
          "github_commit_url": "https://github.com/allyourcodebase/ffmpeg/commit/eb73742d6e19d72bced2bfec6f65cd45e93308d1",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "update"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
            "The optimization strategy involved reducing the number of floating-point operations in the update function by simplifying the calculation logic.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
            "The optimization strategy involved reducing the number of floating-point operations by simplifying the calculation of a specific value within the update function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9804877638816833
        },
        {
          "repository_name": "harfbuzz",
          "hash": "90122925ffcd786365bfb1907c3e6b88230b73d0",
          "author": "Behdad Esfahbod",
          "date": "2023-06-05T13:33:10-06:00",
          "message": "[subset/cff1] Minor speedup",
          "modified_files_count": 1,
          "modified_files": [
            "src/hb-subset-cff1.cc"
          ],
          "github_commit_url": "https://github.com/harfbuzz/harfbuzz/commit/90122925ffcd786365bfb1907c3e6b88230b73d0",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "create"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reordering conditions in an if-statement to prioritize the evaluation of cheaper conditions first, reducing unnecessary computations.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers in the CFF1 subset creation process.",
            "The optimization strategy involved reducing the number of memory allocations by reusing existing buffers in the CFF1 subset creation process.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9804877638816833
        },
        {
          "repository_name": "apultra",
          "hash": "76a1d7dc7b7eac273c7aa3027b770fce97698660",
          "author": "Emmanuel Marty",
          "date": "2021-12-06T16:32:18+01:00",
          "message": "Another small speedup",
          "modified_files_count": 1,
          "modified_files": [
            "src/shrink.c"
          ],
          "github_commit_url": "https://github.com/emmanuel-marty/apultra/commit/76a1d7dc7b7eac273c7aa3027b770fce97698660",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "apultra_optimize_forward"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of memory allocations by reusing previously allocated buffers.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops to improve performance.",
            "The optimization strategy involved reducing redundant calculations by caching frequently accessed values within a loop.",
            "The optimization strategy involved reducing the number of iterations in a loop by adjusting the loop condition to avoid unnecessary processing.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9804877638816833
        },
        {
          "repository_name": "RawTherapee",
          "hash": "7e5f2ee19e7328c0eec218f8388dfb7e6e004514",
          "author": "heckflosse",
          "date": "2018-03-01T00:13:59+01:00",
          "message": "rcd_demosaic(): another small speedup",
          "modified_files_count": 1,
          "modified_files": [
            "rtengine/rcd_demosaic.cc"
          ],
          "github_commit_url": "https://github.com/RawTherapee/RawTherapee/commit/7e5f2ee19e7328c0eec218f8388dfb7e6e004514",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Rodriguez"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loops.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops in the rcd_demosaic function.",
            "The optimization strategy involved reducing redundant calculations and improving loop efficiency in the demosaicing process."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops to improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9776435494422913
        },
        {
          "repository_name": "darktable",
          "hash": "e0e094534bd6a482212bb8c7c71551331371e20b",
          "author": "ralfbrown",
          "date": "2021-07-16T11:50:46-04:00",
          "message": "speed up init",
          "modified_files_count": 1,
          "modified_files": [
            "src/common/heal.c"
          ],
          "github_commit_url": "https://github.com/darktable-org/darktable/commit/e0e094534bd6a482212bb8c7c71551331371e20b",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "dt_heal_laplace_loop"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of loop iterations by adjusting the loop bounds to avoid unnecessary computations.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and minimizing memory access overhead.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops to improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9776435494422913
        },
        {
          "repository_name": "apultra",
          "hash": "49b096b76b473e56cf18767a56a5154fffaa3151",
          "author": "Emmanuel Marty",
          "date": "2020-05-27T10:09:57+02:00",
          "message": "Another small speedup",
          "modified_files_count": 1,
          "modified_files": [
            "src/shrink.c"
          ],
          "github_commit_url": "https://github.com/emmanuel-marty/apultra/commit/49b096b76b473e56cf18767a56a5154fffaa3151",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "apultra_optimize_forward"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of memory accesses by reusing previously computed values within the loop.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed value in a local variable.",
            "The optimization strategy involved reducing the number of iterations in a loop by adjusting the loop condition to avoid unnecessary computations.",
            "The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed value in a local variable.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop.",
          "is_generic_optimization_final": true,
          "authority_score": 0.975751519203186
        },
        {
          "repository_name": "lime3ds-archive",
          "hash": "17f31de364df294337963cabad106a5f0a9d302b",
          "author": "Tony Wasserka",
          "date": "2014-12-20T18:06:56+01:00",
          "message": "Pica/VertexShader: Small optimization.",
          "modified_files_count": 1,
          "modified_files": [
            "src/video_core/vertex_shader.cpp"
          ],
          "github_commit_url": "https://github.com/Lime3DS/lime3ds-archive/commit/17f31de364df294337963cabad106a5f0a9d302b",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ProcessShaderCode"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and reusing them within the loop iterations.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops in the vertex shader processing code.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9747306704521179
        },
        {
          "repository_name": "tvheadend",
          "hash": "f6537ab39f129f5242b77915c06dfacfa324f2a0",
          "author": "Jaroslav Kysela",
          "date": "2015-02-11T15:03:43+01:00",
          "message": "cwc: little optimization in cwc_table_input",
          "modified_files_count": 1,
          "modified_files": [
            "src/descrambler/cwc.c"
          ],
          "github_commit_url": "https://github.com/tvheadend/tvheadend/commit/f6537ab39f129f5242b77915c06dfacfa324f2a0",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "cwc_table_input"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop to improve performance.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop in the `cwc_table_input` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop to improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.973460853099823
        },
        {
          "repository_name": "opennn",
          "hash": "f9d29e3435c3854ed7946baa1f0dca917560d584",
          "author": "Roberto Lopez",
          "date": "2020-01-07T18:47:02+01:00",
          "message": "small performance improvement",
          "modified_files_count": 1,
          "modified_files": [
            "opennn/convolutional_layer.cpp"
          ],
          "github_commit_url": "https://github.com/Artelnics/opennn/commit/f9d29e3435c3854ed7946baa1f0dca917560d584",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ConvolutionalLayer::calculate_hidden_delta_convolutional"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of loops.",
            "The optimization strategy involved reducing redundant calculations by reusing precomputed values within the convolutional layer's delta calculation function.",
            "The optimization strategy involved reducing the number of redundant calculations within the convolutional layer's delta computation by reusing precomputed values.",
            "The optimization strategy involved reducing redundant calculations by precomputing values used within a loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the number of redundant calculations by precomputing values outside of loops.",
          "is_generic_optimization_final": true,
          "authority_score": 0.966073751449585
        },
        {
          "repository_name": "SORT",
          "hash": "28dacec9a728e7591a6676d45b552138e2c1fcb2",
          "author": "JiayinCao",
          "date": "2020-02-09T22:08:48-08:00",
          "message": "[Volumetric Rendering] Very minor optimization.",
          "modified_files_count": 1,
          "modified_files": [
            "src/accel/accelerator.cpp"
          ],
          "github_commit_url": "https://github.com/JiayinCao/SORT/commit/28dacec9a728e7591a6676d45b552138e2c1fcb2",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "Accelerator::GetAttenuation"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing a value used multiple times within the function.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop.",
            "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9652605056762695
        },
        {
          "repository_name": "Kratos",
          "hash": "d26d6eaae41bb22bd87388a2ef869805ddcf197f",
          "author": "maceli",
          "date": "2016-10-25T09:46:33+00:00",
          "message": "Optimization before moving PeriodicIntersection out of Intersection",
          "modified_files_count": 1,
          "modified_files": [
            "applications/DEM_application/custom_utilities/discrete_particle_configure.h"
          ],
          "github_commit_url": "https://github.com/KratosMultiphysics/Kratos/commit/d26d6eaae41bb22bd87388a2ef869805ddcf197f",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "PeriodicSubtract"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing the number of vector operations by directly accessing and modifying vector elements instead of creating temporary vectors.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to minimize repeated computations.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to minimize repeated computations.",
            "The optimization strategy involved refactoring the `PeriodicSubtract` function to reduce computational overhead by simplifying the periodic boundary condition calculations.",
            "The optimization strategy involved modifying the `PeriodicSubtract` function to reduce computational overhead by simplifying the subtraction logic."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            false,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to minimize repeated computations.",
          "is_generic_optimization_final": true,
          "authority_score": 0.960536777973175
        },
        {
          "repository_name": "hoomd-blue",
          "hash": "375a6907b2c229fd6120b22304a0ae5186fa396b",
          "author": "Jens Glaser",
          "date": "2014-03-05T17:42:26-05:00",
          "message": "Really fixed performance regression",
          "modified_files_count": 1,
          "modified_files": [
            "libhoomd/updaters_gpu/TwoStepNVTGPU.cc"
          ],
          "github_commit_url": "https://github.com/glotzerlab/hoomd-blue/commit/375a6907b2c229fd6120b22304a0ae5186fa396b",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "TwoStepNVTGPU::integrateStepTwo"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and minimizing memory access overhead.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the integrateStepTwo function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and minimizing memory access overhead.",
            "The optimization strategy involved reducing redundant memory accesses by reusing previously computed values within the GPU kernel.",
            "The optimization strategy involved reducing redundant calculations by precomputing and reusing values within the GPU integration step."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and minimizing memory access overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.9472116827964783
        },
        {
          "repository_name": "embree",
          "hash": "dfd67d0c57d599d4b596f4e5be2ad75d17fa61ff",
          "author": "Attila T. Áfra",
          "date": "2016-10-10T17:29:55+03:00",
          "message": "minor optimization for subdiv msmblur",
          "modified_files_count": 1,
          "modified_files": [
            "kernels/geometry/subdivpatch1cached_intersector1.h"
          ],
          "github_commit_url": "https://github.com/RenderKit/embree/commit/dfd67d0c57d599d4b596f4e5be2ad75d17fa61ff",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "processLazyNode"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance in the `processLazyNode` function.",
            "The optimization strategy involved reducing redundant calculations in the `processLazyNode` function by caching intermediate results.",
            "The optimization strategy involved reducing redundant calculations in the `processLazyNode` function by caching intermediate results.",
            "The optimization strategy involves reducing redundant calculations by precomputing and reusing values within the `processLazyNode` function.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by precomputing values outside of a loop to improve performance in the `processLazyNode` function.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8707069754600525
        }
      ]
    },
    {
      "cluster_id": "5496",
      "size": 16,
      "repositories_distribution": {
        "scummvm": 1,
        "objeck-lang": 2,
        "cloudpilot-emu": 1,
        "mir": 1,
        "BsodSurvivor": 1,
        "efl": 1,
        "xls": 1,
        "haiku": 1,
        "httpd": 1,
        "swift": 1,
        "asteria": 1,
        "AROS": 1,
        "cheerp-compiler": 1,
        "terra": 1,
        "Floorp": 1
      },
      "generic_ratio": 1.0,
      "summary": {
        "strategy_summary": "The common optimization strategy across these commits is to reduce function call overhead by inlining functions, either through mandatory inlining of specific calls, increasing inlining depth, enabling procedure inlining, or replacing function calls with direct logic to improve performance.",
        "code_examples": [
          [
            "// Before\ndiff --git a/lib/SILPasses/PerformanceInliner.cpp b/lib/SILPasses/PerformanceInliner.cpp\nindex 8c10624a7fc..5cf7089d62d 100644\n--- a/lib/SILPasses/PerformanceInliner.cpp\n+++ b/lib/SILPasses/PerformanceInliner.cpp\n@@ -122,6 +122,11 @@ bool SILPerformanceInliner::isProfitableToInline(SILFunction *Caller,\n                                                   SILFunction *Callee,\n                                                   const ApplyInst *AI,\n                                                   unsigned CalleeCount) {\n+  /// Always inline transparent calls. This should have been done during\n+  /// MandatoryInlining, but generics are not currenly handled.\n+  if (AI->isTransparent())\n+    return true;\n+\n    // To handle recursion and prevent massive code size expansion, we prevent\n    // inlining the same callee many times into the caller. The recursion\n    // detection logic in CallGraphAnalysis can't handle class_method in the",
            "// After\ndiff --git a/lib/SILPasses/PerformanceInliner.cpp b/lib/SILPasses/PerformanceInliner.cpp\nindex 8c10624a7fc..5cf7089d62d 100644\n--- a/lib/SILPasses/PerformanceInliner.cpp\n+++ b/lib/SILPasses/PerformanceInliner.cpp\n@@ -122,6 +122,11 @@ bool SILPerformanceInliner::isProfitableToInline(SILFunction *Caller,\n                                                   SILFunction *Callee,\n                                                   const ApplyInst *AI,\n                                                   unsigned CalleeCount) {\n+  /// Always inline transparent calls. This should have been done during\n+  /// MandatoryInlining, but generics are not currenly handled.\n+  if (AI->isTransparent())\n+    return true;\n+\n    // To handle recursion and prevent massive code size expansion, we prevent\n    // inlining the same callee many times into the caller. The recursion\n    // detection logic in CallGraphAnalysis can't handle class_method in the"
          ],
          [
            "// Before\ndiff --git a/src/tllvmutil.cpp b/src/tllvmutil.cpp\nindex 42989cf..ccddf73 100644\n--- a/src/tllvmutil.cpp\n+++ b/src/tllvmutil.cpp\n@@ -273,7 +273,7 @@ void llvmutil_optimizemodule(Module * M, TargetMachine * TM) {\n     PassManagerBuilder PMB;\n     PMB.OptLevel = 3;\n     PMB.SizeLevel = 0;\n-\n+    PMB.Inliner = createFunctionInliningPass(PMB.OptLevel, 0);\n #if LLVM_VERSION >= 35\n     PMB.LoopVectorize = true;\n     PMB.SLPVectorize = true;",
            "// After\ndiff --git a/src/tllvmutil.cpp b/src/tllvmutil.cpp\nindex 42989cf..ccddf73 100644\n--- a/src/tllvmutil.cpp\n+++ b/src/tllvmutil.cpp\n@@ -273,7 +273,7 @@ void llvmutil_optimizemodule(Module * M, TargetMachine * TM) {\n     PassManagerBuilder PMB;\n     PMB.OptLevel = 3;\n     PMB.SizeLevel = 0;\n-\n+    PMB.Inliner = createFunctionInliningPass(PMB.OptLevel, 0);\n #if LLVM_VERSION >= 35\n     PMB.LoopVectorize = true;\n     PMB.SLPVectorize = true;"
          ]
        ],
        "application_conditions": [
          "The function call must be marked as transparent or explicitly annotated for inlining.",
          "The size of the caller function, measured in basic blocks, must not exceed a predefined threshold to prevent excessive code growth.",
          "The function being called must have a low invocation cost, determined by its instruction count and frequency of calls within performance-critical sections."
        ]
      },
      "commits": [
        {
          "repository_name": "cheerp-compiler",
          "hash": "f2e54c4cddc13bea421ac9ab3dc9845349568b36",
          "author": "Alessandro Pignotti",
          "date": "2022-12-07T16:36:17+00:00",
          "message": "Enable inlining of Calls in more cases",
          "modified_files_count": 1,
          "modified_files": [
            "llvm/lib/CheerpUtils/Utility.cpp"
          ],
          "github_commit_url": "https://github.com/leaningtech/cheerp-compiler/commit/f2e54c4cddc13bea421ac9ab3dc9845349568b36",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "isInlineable"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves enabling inlining of function calls in more cases to reduce function call overhead and improve performance.",
            "The optimization strategy involves enabling inlining of function calls in more scenarios to reduce function call overhead.",
            "The optimization strategy involves enabling inlining of function calls in more cases to reduce function call overhead and improve performance.",
            "The optimization strategy involves enabling inlining of function calls in more cases to reduce function call overhead and improve performance.",
            "The optimization strategy involves enabling inlining of function calls in more cases to reduce function call overhead and improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves enabling inlining of function calls in more cases to reduce function call overhead and improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8915835022926331
        },
        {
          "repository_name": "mir",
          "hash": "d9f6076fa20c66d213a06de129aab22f6e78c73d",
          "author": "Vladimir N. Makarov",
          "date": "2019-06-13T16:33:29-04:00",
          "message": "Add inlining.  Print MIR code after simplification and inlining when there is no option.",
          "modified_files_count": 1,
          "modified_files": [
            "mir-tests/run-test.c"
          ],
          "github_commit_url": "https://github.com/vnmakarov/mir/commit/d9f6076fa20c66d213a06de129aab22f6e78c73d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "main"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves adding inlining to improve performance by reducing function call overhead.",
            "The optimization strategy involves adding inlining to reduce function call overhead and improve performance.",
            "The optimization strategy involves adding inlining to improve performance by reducing function call overhead.",
            "The optimization strategy involves adding inlining to reduce function call overhead and printing MIR code after simplification and inlining when no option is specified.",
            "The optimization strategy involves adding inlining to reduce function call overhead and improve performance by integrating function code directly into the calling site."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves adding inlining to reduce function call overhead and improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8829877376556396
        },
        {
          "repository_name": "objeck-lang",
          "hash": "9d10fe400ce2d14a1ff72d4262f29dc9f6cbbf28",
          "author": "objeck",
          "date": "2010-07-13T22:54:40+00:00",
          "message": "working on method inlining",
          "modified_files_count": 1,
          "modified_files": [
            "objeck-lang/src/compiler/optimize.cpp"
          ],
          "github_commit_url": "https://github.com/objeck/objeck-lang/commit/9d10fe400ce2d14a1ff72d4262f29dc9f6cbbf28",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ItermediateOptimizer::Optimize"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves implementing method inlining to reduce function call overhead and improve execution speed.",
            "The optimization strategy involves implementing method inlining to reduce function call overhead and improve execution speed.",
            "The optimization strategy involves implementing method inlining to reduce function call overhead.",
            "The optimization strategy involves implementing method inlining to reduce function call overhead.",
            "The optimization strategy involves implementing method inlining to reduce function call overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves implementing method inlining to reduce function call overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8803975582122803
        },
        {
          "repository_name": "objeck-lang",
          "hash": "237553779a67d9c4ad009261c84442e0e0b68661",
          "author": "objeck",
          "date": "2010-07-13T22:54:40+00:00",
          "message": "working on method inlining",
          "modified_files_count": 1,
          "modified_files": [
            "src/compiler/optimize.cpp"
          ],
          "github_commit_url": "https://github.com/objeck/objeck-lang/commit/237553779a67d9c4ad009261c84442e0e0b68661",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "ItermediateOptimizer::Optimize"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves implementing method inlining to reduce function call overhead.",
            "The optimization strategy involves implementing method inlining to reduce function call overhead.",
            "The optimization strategy involves implementing method inlining to reduce function call overhead.",
            "The optimization strategy involves implementing method inlining to reduce function call overhead.",
            "The optimization strategy involves implementing method inlining to reduce function call overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves implementing method inlining to reduce function call overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8803975582122803
        },
        {
          "repository_name": "asteria",
          "hash": "e90cfdb6cc6473d1cd96f12ac5b6d07a6331d6d2",
          "author": "LIU Hao",
          "date": "2023-12-28T13:21:54+08:00",
          "message": "air_node: Force inlining more",
          "modified_files_count": 1,
          "modified_files": [
            "asteria/runtime/air_node.cpp"
          ],
          "github_commit_url": "https://github.com/lhmouse/asteria/commit/e90cfdb6cc6473d1cd96f12ac5b6d07a6331d6d2",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "solidify"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved forcing inlining of functions to reduce function call overhead.",
            "The optimization strategy used is forcing inlining of functions to reduce function call overhead.",
            "The optimization strategy used was forcing inlining of functions to reduce function call overhead.",
            "The optimization strategy used was forcing inlining of functions to reduce function call overhead.",
            "The optimization strategy involved forcing inlining of functions to reduce function call overhead and improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy used is forcing inlining of functions to reduce function call overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8789058923721313
        },
        {
          "repository_name": "cloudpilot-emu",
          "hash": "5dd28616fd7169b1b5de2994b7bfa731885c820a",
          "author": "Christian Speckner",
          "date": "2024-10-01T21:34:05+02:00",
          "message": "Force inlining.",
          "modified_files_count": 1,
          "modified_files": [
            "src/uarm/src/uarm/CPU.cpp"
          ],
          "github_commit_url": "https://github.com/cloudpilot-emu/cloudpilot-emu/commit/5dd28616fd7169b1b5de2994b7bfa731885c820a",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "__attribute__"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy used was forcing inlining of functions to reduce function call overhead.",
            "The optimization strategy used was forcing inlining of functions to reduce function call overhead.",
            "The optimization strategy used was forcing inlining of functions to reduce function call overhead.",
            "The optimization strategy used was forcing inlining of functions to reduce function call overhead.",
            "The optimization strategy used was forcing inlining of functions to reduce function call overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy used was forcing inlining of functions to reduce function call overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8424646258354187
        },
        {
          "repository_name": "Floorp",
          "hash": "5d4207c10966c52ffe664b616f8be855157cba0d",
          "author": "Jan de Mooij",
          "date": "2012-06-18T21:34:55+02:00",
          "message": "Bug 765208 - Increase maximum inlining depth. r=djvj",
          "modified_files_count": 1,
          "modified_files": [
            "js/src/ion/IonBuilder.cpp"
          ],
          "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/5d4207c10966c52ffe664b616f8be855157cba0d",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "IonBuilder::makeInliningDecision"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves increasing the maximum inlining depth to potentially improve performance by reducing function call overhead.",
            "The optimization strategy involves increasing the maximum inlining depth to potentially reduce function call overhead and improve performance.",
            "The optimization strategy involved increasing the maximum inlining depth to improve performance by allowing more function inlining.",
            "The optimization strategy involved increasing the maximum inlining depth to potentially reduce function call overhead and improve performance.",
            "The optimization strategy involves increasing the maximum inlining depth to potentially improve performance by reducing function call overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves increasing the maximum inlining depth to potentially improve performance by reducing function call overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8179894685745239
        },
        {
          "repository_name": "httpd",
          "hash": "606c7d4243cab078a3688c194c2dfe9ef746ed04",
          "author": "André Malo",
          "date": "2003-07-15T20:38:04+00:00",
          "message": "minor optimization. No need to use a function overhead here.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@100637 13f79535-47bb-0310-9956-ffa450edef68",
          "modified_files_count": 1,
          "modified_files": [
            "modules/mappers/mod_rewrite.c"
          ],
          "github_commit_url": "https://github.com/apache/httpd/commit/606c7d4243cab078a3688c194c2dfe9ef746ed04",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "single"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved removing unnecessary function overhead by inlining or directly using the code instead of calling a separate function.",
            "The optimization strategy involved removing unnecessary function overhead by inlining a simple function call.",
            "The optimization strategy involved removing unnecessary function overhead by inlining or directly using the required logic instead of calling a separate function.",
            "The optimization strategy involved removing unnecessary function overhead by inlining or directly using the code instead of calling a separate function.",
            "The optimization strategy involved removing unnecessary function overhead by inlining or directly implementing the logic instead of calling a separate function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved removing unnecessary function overhead by inlining or directly using the required logic instead of calling a separate function.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8120462894439697
        },
        {
          "repository_name": "scummvm",
          "hash": "54ecf13bdd940893ebb6326aa1b6e39d489fc302",
          "author": "antoniou79",
          "date": "2021-06-12T14:58:07+03:00",
          "message": "BLADERUNNER: Another minor possible optimization\n\nReally minor, but maybe there's gain in low performing devices since the function is called very often",
          "modified_files_count": 1,
          "modified_files": [
            "engines/bladerunner/vqa_decoder.cpp"
          ],
          "github_commit_url": "https://github.com/scummvm/scummvm/commit/54ecf13bdd940893ebb6326aa1b6e39d489fc302",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "VQADecoder::VQAVideoTrack::VPTRWriteBlock"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves reducing the number of function calls by inlining a frequently called function to improve performance on low-performing devices.",
            "The optimization strategy involves reducing the number of function calls by inlining a frequently called function to improve performance on low-performing devices.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently called function to potentially improve performance on low-performing devices.",
            "The optimization strategy involves reducing the number of function calls by inlining a frequently called function to improve performance on low-performing devices.",
            "The optimization strategy involved reducing the number of function calls by inlining a frequently called function to potentially improve performance on low-performing devices."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves reducing the number of function calls by inlining a frequently called function to improve performance on low-performing devices.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8110568523406982
        },
        {
          "repository_name": "BsodSurvivor",
          "hash": "5fba36cc1bcc02beaf20b28ecb42e0e3e5cae050",
          "author": "Jakob Stoklund Olesen",
          "date": "2010-03-09T22:17:06+00:00",
          "message": "Permit inlining into huge functions. This heuristic is ancient, and inlining\ncan sometimes help reduce function size.\n\nllvm-svn: 98088",
          "modified_files_count": 1,
          "modified_files": [
            "llvm/lib/Analysis/InlineCost.cpp"
          ],
          "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/5fba36cc1bcc02beaf20b28ecb42e0e3e5cae050",
          "contains_optimization_keyword": true,
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves allowing inlining into large functions to potentially reduce overall function size.",
            "The optimization strategy involves allowing inlining into large functions to potentially reduce overall function size.",
            "The optimization strategy involves permitting inlining into large functions to potentially reduce overall function size.",
            "The optimization strategy involves allowing inlining into large functions to potentially reduce overall function size.",
            "The optimization strategy involves permitting inlining into large functions to potentially reduce overall function size."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves allowing inlining into large functions to potentially reduce overall function size.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8098326325416565
        },
        {
          "repository_name": "xls",
          "hash": "fa1ab2dde2f117f9e1d3fa3962258e0fcb2dc502",
          "author": "Mark Heffernan",
          "date": "2022-03-23T16:25:14-07:00",
          "message": "Enable proc-inlining in benchmark_main.\n\nPiperOrigin-RevId: 436856408",
          "modified_files_count": 1,
          "modified_files": [
            "xls/tools/benchmark_main.cc"
          ],
          "github_commit_url": "https://github.com/google/xls/commit/fa1ab2dde2f117f9e1d3fa3962258e0fcb2dc502",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "RunOptimizationAndPrintStats"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involved enabling procedure inlining in the benchmark to reduce function call overhead and improve performance.",
            "The optimization strategy involved enabling procedure inlining in the benchmark to reduce function call overhead and improve performance.",
            "The optimization strategy involves enabling procedure inlining in the benchmark to reduce function call overhead and improve performance.",
            "The optimization strategy involved enabling procedure inlining to reduce function call overhead and improve performance in the benchmark.",
            "The optimization strategy involves enabling procedure inlining in the benchmark to reduce function call overhead and improve performance."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved enabling procedure inlining in the benchmark to reduce function call overhead and improve performance.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8089449405670166
        },
        {
          "repository_name": "efl",
          "hash": "ec71288548bf0fa2d2d14a7e979d67b467ee3079",
          "author": "Jean-Philippe Andre",
          "date": "2017-04-19T14:44:14+09:00",
          "message": "eo: Micro-optimize function calls\n\nThis is related to the previous changes to efl_super.",
          "modified_files_count": 1,
          "modified_files": [
            "src/lib/eo/eo.c"
          ],
          "github_commit_url": "https://github.com/Enlightenment/efl/commit/ec71288548bf0fa2d2d14a7e979d67b467ee3079",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "_efl_object_call_resolve"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves micro-optimizing function calls to reduce overhead and improve performance.",
            "The optimization strategy involves micro-optimizing function calls to reduce overhead in the `_efl_object_call_resolve` function.",
            "The optimization strategy involves micro-optimizing function calls by reducing overhead in the function resolution process.",
            "The optimization strategy involves micro-optimizing function calls to improve performance, likely by reducing overhead or streamlining the call resolution process.",
            "The optimization strategy involves micro-optimizing function calls by reducing overhead in the `_efl_object_call_resolve` function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves micro-optimizing function calls to improve performance, likely by reducing overhead or streamlining the call resolution process.",
          "is_generic_optimization_final": true,
          "authority_score": 0.8047322630882263
        },
        {
          "repository_name": "AROS",
          "hash": "62848dbf7e6b36d3c441178131ff69b6829fe9ff",
          "author": "nlorentz",
          "date": "1998-05-31T10:01:12+00:00",
          "message": "Minor optimization for fast method invocation\n\n\ngit-svn-id: https://svn.aros.org/svn/aros/trunk@4325 fb15a70f-31f2-0310-bbcc-cdcc74a49acc",
          "modified_files_count": 1,
          "modified_files": [
            "test/oop/test.c"
          ],
          "github_commit_url": "https://github.com/aros-development-team/AROS/commit/62848dbf7e6b36d3c441178131ff69b6829fe9ff",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "main"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The commit optimizes fast method invocation by reducing overhead in the test execution loop.",
            "The optimization strategy involves reducing the overhead of method invocation by streamlining the call process.",
            "The optimization strategy involved reducing the overhead of method invocation by streamlining the function call process.",
            "The optimization strategy involved reducing the overhead of method invocation by streamlining the function call process.",
            "The optimization strategy involved reducing the overhead of method invocation by streamlining the call process in the test function."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involved reducing the overhead of method invocation by streamlining the function call process.",
          "is_generic_optimization_final": true,
          "authority_score": 0.794255256652832
        },
        {
          "repository_name": "haiku",
          "hash": "ffeb987dc475fb6a84f5c00a42c9b0ac86718d29",
          "author": "Dario Casalinuovo",
          "date": "2016-02-03T13:25:13+01:00",
          "message": "BMediaEventLooper: Make lateness calculus in real time\n\n* After having this patch applied locally for some time,\nI'm going to be sure that we have to deal only with real_time values.\n* Since RealTime() is just a system_time() wrapper, the code\nwill be slightly improved in performances too.\n* Additionally it performs very well when the thread is\nexternally stopped (such as debugging it), so that the audio\nrecover almost immediately.",
          "modified_files_count": 1,
          "modified_files": [
            "src/kits/media/MediaEventLooper.cpp"
          ],
          "github_commit_url": "https://github.com/haiku/haiku/commit/ffeb987dc475fb6a84f5c00a42c9b0ac86718d29",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "BMediaEventLooper::ControlLoop"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves replacing a system_time() wrapper with direct real_time values to improve performance and responsiveness.",
            "The optimization strategy involved replacing a function call with a direct system call to improve performance by reducing overhead.",
            "The optimization strategy involves replacing a function call with a more efficient wrapper function to improve performance in real-time calculations.",
            "The optimization strategy involves replacing a function call with a more efficient wrapper function to improve performance in real-time calculations.",
            "The optimization strategy involves replacing a function call with a direct system call to improve performance by reducing overhead."
          ],
          "is_generic_optimization": [
            false,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves replacing a function call with a direct system call to improve performance by reducing overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7926971316337585
        },
        {
          "repository_name": "terra",
          "hash": "fe2fa47273b78ea7e19e20b993c55b05a13f2af3",
          "author": "Zachary DeVito",
          "date": "2015-06-05T13:30:01-07:00",
          "message": "ensure offline stuff does function inlining.",
          "modified_files_count": 1,
          "modified_files": [
            "src/tllvmutil.cpp"
          ],
          "github_commit_url": "https://github.com/terralang/terra/commit/fe2fa47273b78ea7e19e20b993c55b05a13f2af3",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "llvmutil_optimizemodule"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves ensuring that offline functions are inlined to improve performance.",
            "The optimization strategy involves ensuring that offline functions are inlined to improve performance by reducing function call overhead.",
            "The optimization strategy involves ensuring that offline functions are inlined to improve performance by reducing function call overhead.",
            "The optimization strategy involves ensuring that offline functions are inlined to improve performance by reducing function call overhead.",
            "The optimization strategy involves ensuring that offline functions are inlined to improve performance by reducing function call overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves ensuring that offline functions are inlined to improve performance by reducing function call overhead.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7835182547569275
        },
        {
          "repository_name": "swift",
          "hash": "818bc5885d3d4f6814168fe891ba2c5f72ccf927",
          "author": "Andrew Trick",
          "date": "2014-07-10T07:31:41+00:00",
          "message": "PerformanceInliner; always inline transparent calls. Just to be sure.\n\nSwift SVN r19798",
          "modified_files_count": 1,
          "modified_files": [
            "lib/SILPasses/PerformanceInliner.cpp"
          ],
          "github_commit_url": "https://github.com/apple/swift/commit/818bc5885d3d4f6814168fe891ba2c5f72ccf927",
          "contains_optimization_keyword": true,
          "modified_func_count": 1,
          "modified_other": false,
          "modified_func": [
            "SILPerformanceInliner::isProfitableToInline"
          ],
          "is_opt_ds_simple": "true",
          "optimization_summary": [
            "The optimization strategy involves always inlining transparent calls to ensure performance improvements.",
            "The optimization strategy involves always inlining transparent calls to ensure performance improvements.",
            "The optimization strategy involves always inlining transparent calls to ensure performance improvements.",
            "The optimization strategy involves always inlining transparent calls to ensure performance improvements.",
            "The optimization strategy involves always inlining transparent calls to ensure performance by reducing function call overhead."
          ],
          "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
          ],
          "optimization_summary_final": "The optimization strategy involves always inlining transparent calls to ensure performance improvements.",
          "is_generic_optimization_final": true,
          "authority_score": 0.7504613399505615
        }
      ]
    }
  ]
}