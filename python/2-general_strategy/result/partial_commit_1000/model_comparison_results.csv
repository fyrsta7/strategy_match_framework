hash,repository_name,qwenmax_optimization_summary_final,qwenmax_is_generic_optimization_final,dsv3_optimization_summary_final,dsv3_is_generic_optimization_final
d19b646bca8cc48e0a614f2ff5d152fc78013e90,atomspace,"The optimization strategy involves restructuring the search logic for parent/child type relationships to leverage strict partial order properties, reducing unnecessary comparisons.",False,The optimization strategy involves leveraging the strict partial order property to streamline searches for parent/child type relationships.,False
fbe965591f8a0a32c805a279a2505d4c20d22d26,FreeBSD-src,"The optimization strategy involved removing unnecessary readahead logic for directory blocks in NFS client operations, as it provided no performance benefit and added complexity.",False,The optimization strategy involves removing readahead for directory blocks in the NFS client to simplify code and avoid unnecessary serialized operations that do not provide performance benefits.,False
9596a29d0bdcce6fc1c6e1a710679035c957e9b0,libmtev,The optimization avoids unnecessary PCRE compilations by checking for the presence of a hash table that can override the PCRE.,False,The optimization strategy avoids unnecessary PCRE compiles by checking for the presence of a hash table that can override the PCRE.,False
f68e14805085972b4e0b0ab684af37f713b9c262,android_kernel_oneplus_msm8998,"The optimization strategy conditionally avoids incrementing and dropping the mm count when the mm being switched to matches the active mm, reducing cacheline contention on SMP systems.",False,The optimization strategy reduces atomic operations by conditionally avoiding unnecessary increments and decrements of the mm count when the mm being switched to matches the active mm.,True
5da6b5db2fa57e638f58570c4ca3931213815d06,cheribsd,The optimization strategy involved batching individual byte writes into 32-bit writes to reduce the number of PCI write cycles for improved performance on 8-bit framebuffers.,False,The optimization strategy involves grouping multiple 8-bit writes into 32-bit writes to reduce the number of PCI write cycles and improve performance.,True
7908421e0e02ddc79258864ec2c22d2541c500df,cppcheck,"The optimization strategy involved precomputing `sizeof` values during tokenization to replace them with concrete numbers, reducing runtime calculations.",False,The optimization strategy involved replacing `sizeof` with precomputed numbers to eliminate runtime calculations in the tokenizer.,True
6ffd24a8832690534281b0563d99340fd8783bc2,upbge,"The optimization removes an unnecessary sort operation for transparent objects during shadow rendering, as alpha clipping (which affects shadows) is order-independent.",False,"The optimization strategy involved removing unnecessary sorting of transparent objects during shadow rendering, as sorting is irrelevant for alpha clip effects which are order-independent.",False
1bdd5c8b9868ebc092074e078604acb80546e43f,musl,"The optimization avoids excessive upscaling in the floatscan function by reducing unnecessary iterations in the loop when processing small-magnitude, few-digit values.",False,The optimization strategy avoids excessive upscaling in the floatscan function to reduce the number of iterations in the subsequent loop.,False
c8a3a628e4ac345d62db559c3eea89dbee651c24,flux-core,The optimization avoids unnecessary job ownership access checks for RPC requests from the instance owner in the job-info watch code.,False,The optimization strategy involves skipping an unnecessary job ownership access check for RPC requests from the instance owner in the job-info watch code.,False
94fad8119eb93dd4116eabc0e446e20f4feaee7a,grpc,The optimization strategy reduces the number of channels in the qps_test to decrease resource usage and improve performance.,False,The optimization strategy involved reducing the number of channels in the QPS test to improve performance.,False
2ab150494645e01ae0fea67354d5d71a17c743ca,objeck-lang,"The optimization strategy removes unnecessary store operations that are immediately overwritten, reducing redundant memory writes.",True,"The optimization strategy involves removing dead stores, which are assignments to variables that are never subsequently used.",True
3da0aeea080f84ebc5e3059403f799469b93b773,sycl,The optimization replaces a potentially costly `getSection().empty()` check with a more efficient `hasSection()` method to improve performance.,True,The optimization strategy involves replacing the `getSection().empty()` check with the more efficient `hasSection()` method to reduce unnecessary function calls and improve performance.,True
89d1667dae6621ba7a9a5d341789f2b522063d80,libopenshot,The optimization strategy involved parallelizing the hue adjustment computation to improve performance by utilizing multiple threads.,False,The optimization strategy involved parallelizing the Hue::GetFrame function to improve performance by leveraging concurrent processing.,True
68ca534169a4f9e1930f6511109e973b43cf5998,rocksdb,The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.,True,The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.,True
12405709f0521b1596b364a91324c010eaf5baf6,ppsspp,"The optimization skips processing triangles that are partially or fully outside the visible scissor region, reducing unnecessary computations.",False,The optimization strategy involves skipping the processing of scissored triangles to reduce overhead and improve performance.,False
7089c0b8074867c6ad023e7b0dec56a147b40dc5,darktable,The optimization merges two separate loops into one to reduce memory traffic and improve cache utilization by performing pixel inversion/desaturation during the shadows/highlights adjustment pass.,False,The optimization strategy involved merging two separate loops into one to reduce memory traffic and improve performance.,True
544cea832ed42aabfe28cbc5be4fbcf083f019fe,httpd,The optimization strategy involved restructuring the logic to reduce redundant computations within the request handling process.,False,"The commit adds comments explaining a new optimization strategy, but the specific optimization details are not provided in the given context.",False
36310193f4577075762be7f4ce6ccc35a2d537dc,mlt,"The optimization strategy involved fixing a bug that caused excessive memory consumption during audio downsampling, particularly for multi-channel sources.",False,The optimization strategy involved fixing a bug in audio muxing that reduced excessive memory consumption when downsampling audio with more than two channels.,False
2aa06a989dfef2950ab45da80dd9c1adadd9f9a2,BsodSurvivor,The optimization disables the use of Alias Analysis (AA) during CodeGen for Cortex-A57 to avoid generating suboptimal code for out-of-order cores.,False,The optimization strategy involves disabling the use of alias analysis (useAA) during code generation for Cortex-A57 processors to avoid generating suboptimal code for out-of-order cores.,False
786b2603db86141c624703335a93a2aa1b60a858,3DWorld,"The optimization strategy involved reordering the texture load operation to occur after polygon addition, reducing peak memory usage during model loading.",False,"The optimization strategy involved reordering operations to delay texture loading until after polygon addition, thereby reducing peak memory usage during large model loading.",False
85a5ac00e0c5335309d5e7951e9f2a5d32b8024e,llvm-leg,The optimization strategy involved restructuring the function to reduce unnecessary computations and improve the efficiency of processing logical immediates.,False,The optimization strategy involved improving the efficiency of the function `processLogicalImmediate` by refining its logic to handle immediate values more effectively.,True
64143619ab52bac3705de2671e9c789d119312df,FreeBSD-src,The optimization strategy replaces a loop-based TLB invalidation process with a single 'tlbilx' instruction on newer cores to reduce clock cycles and improve performance.,False,The optimization strategy replaces a slower TLB invalidation loop with a faster 'tlbilx' instruction on newer cores.,False
880ddb018a4bdcff00d35f28988d9eddb557b8e6,llvm-leg,The optimization strategy used is to replace a linear search with a binary search and introduce a single-entry cache to reduce the time complexity of lookups in the `Loop::isLCSSAForm` function.,True,The optimization strategy used was implementing a binary search and a single-entry cache to speed up the `Loop::isLCSSAForm` function.,True
4192bce91b2c4baf36d3cec47eeb33b2ef93648b,BsodSurvivor,The optimization strategy reduces the creation of unnecessary fall-through basic blocks and deep recursion in switch-case code generation by consolidating multiple sequential cases into a single target block.,False,The optimization strategy involves reducing the number of fall-through basic blocks and deep recursion in code generation by consolidating sequential cases in a switch statement to a single label.,True
a881617a1a9a49561022de53c2cf863cac0e0394,pbrt-v4,"The optimization strategy used was to parallelize the execution of a loop in the `createBuildInputForBLPs` function, likely leveraging multi-threading or GPU parallelism to improve performance.",True,The optimization strategy involved parallelizing the `OptiXAggregate::createBuildInputForBLPs()` function to improve performance by leveraging concurrent execution.,True
a20f0935cf31bdeec1527852e8973c7e137115f3,MediaInfoLib,"The optimization strategy involved introducing a dedicated reading thread to improve the speed of reading large files, particularly during full parsing, while addressing crashes with certain MOV files.",False,"The optimization strategy involved using a dedicated reading thread to improve the speed of reading big files, especially for full parsing.",False
71258981c116a51930dddde4bac6c1d2a3601dd5,calligra,The optimization strategy involved improving the efficiency and accuracy of the `mixColors` function by refining its algorithm or reducing unnecessary computations.,False,The optimization strategy involved improving the speed and accuracy of the `mixColors` function by refining its color mixing algorithm.,False
d8ecb7e7dcd153b757b48b5666a13bbe5c509cc3,frequensea,The optimization strategy involved simplifying the loop logic and reducing unnecessary computations within the `pixel_inc` function to improve performance.,True,"The optimization strategy involved modifying the `pixel_inc` function to reduce its computational overhead, as identified by gprof as the bottleneck.",False
0a4652663e3cd378113d51e1d076504c8e96b308,tensorflow-directml,The optimization strategy involved reserving space in advance for a vector to reduce the overhead of repeated memory reallocations during push_back operations.,True,The optimization strategy involved reserving space in advance for a container to avoid repeated reallocations during `push_back` operations.,True
24436a540d16ca6a523b8e5441180001c31b6b35,selinux-kernel,The optimization avoids a large rounding error in the pclk calculation by replacing the use of drm_mode_vrefresh() with a more precise method.,False,The optimization strategy avoids using `drm_mode_vrefresh()` to reduce rounding errors in the calculation of the DSC pclk rate.,False
a882beb2402fa232cb05d05ee4b277f15895214c,open62541,The optimization strategy involved reducing the socket timeout from 300ms to 1ms to prevent resource blocking and improve responsiveness in the subscriber server.,False,The optimization strategy involved reducing the socket timeout from 300ms to 1ms to minimize waiting time and improve resource utilization in the subscriber server.,False
415be93bec7d1d7b594d1132cc05b471e3443142,FreeRDP,The optimization strategy involved correcting the handling of performance flags to ensure proper functionality and potentially improve performance.,False,The optimization strategy involved correcting the handling of performance flags to ensure proper performance settings are applied in the Android client.,False
eaa75527d673c76888921fa7678ddf00d9880458,MuseScore,The optimization strategy involved reducing redundant calculations by caching and reusing results within the `Measure::moveTicks` function.,True,The optimization strategy involved reducing redundant calculations and improving loop efficiency in the `Measure::moveTicks()` function.,True
e7b8f6fe48b10c7ed1cc493002d45b064cba780d,ladybird,"The optimization strategy divides each scanline into prologue, aligned run, and epilogue to reduce the number of one-by-one pixel operations by leveraging faster memory fills for grid cell slices.",False,"The optimization strategy involves dividing each scanline into prologue, aligned run, and epilogue sections to minimize one-by-one pixel drawing and maximize fast memory fills for grid cell slices.",False
0afabc1fdb98edac2c1ea2bbc0712a495599acec,linux-rockchip,"The optimization strategy eliminates redundant unpoisoning of memory objects in `kasan_kmalloc_large()` by leveraging the fact that they are already unpoisoned elsewhere, thus reducing unnecessary operations.",False,"The optimization strategy involves reducing redundant unpoisoning operations in `kasan_kmalloc_large()` by only poisoning the redzone, as the object is already unpoisoned by `alloc_pages()` or `ksize()`.",False
477e88ee9e13d6902e359f9af526ac2eee6407a0,BsodSurvivor,The optimization strategy reduced memory consumption in allocator tests to ensure compatibility with devices having limited memory (1GB).,False,The optimization strategy involved reducing the memory consumption of the allocator test to ensure it fits within the constraints of a 1G device.,False
7cabe39aae99ca73b74f4e7da4282042a1fa5423,foundationdb,The optimization strategy involved reducing the delay for candidacy in a low-latency workload to improve recovery speed.,False,The optimization strategy involved reducing the delay parameter `DELAY_CC_WORST_FIT_CANDIDACY_SECONDS` to improve performance in the LowLatencyWorkload setup.,False
f989d315a85f7abc510a5497234984c8a6d0e9de,Floorp,The optimization strategy involved changing the file copying mechanism from loading the entire file into memory to copying it in smaller blocks to reduce memory usage.,True,The optimization strategy involves copying a file in blocks instead of loading the entire file into memory to reduce memory usage during large file copies.,True
73d609777538fe9d7b4b87321921c8b68fd79f9f,Principia,The optimization strategy involved parallelizing the genetic algorithm to improve computational efficiency by leveraging multiple threads or processes.,False,The optimization strategy involved parallelizing the genetic algorithm to improve performance by leveraging concurrent execution.,True
723f41aa2dd617dad4529463225c400cd2075bce,dealii,The optimization strategy involved replacing a value parameter with a reference parameter to avoid unnecessary copying of data.,True,The optimization strategy involved removing unnecessary value parameters to avoid copy overhead in the `HDF5Object::set_attribute` function.,True
b493e23067e1243456e807fb95dca621c2c66094,PhotoshopAPI,The optimization strategy involved replacing a loop with a more efficient bitwise operation to reduce computational overhead during RLE decompression.,True,The optimization strategy involved slightly improving the RLE decompression algorithm to enhance performance.,True
a3814e36356fb339f0d22d19a886a7bb68a9161f,server,The optimization strategy involved correcting a false assumption in the `tdc_wait_for_old_versions` function to prevent live-lock conditions during concurrent table operations.,False,The optimization strategy involved fixing a live-lock issue by removing a false assumption in the `tdc_wait_for_old_versions` function to prevent infinite looping and CPU hogging during concurrent FLUSH TABLES operations.,False
1780d7bb5d02e007f52d800a78904555aa42af6a,wayfire,The optimization strategy involved simplifying the visibility computation logic to reduce unnecessary checks and improve efficiency.,False,The optimization strategy involved reducing redundant visibility computations by caching and reusing previously calculated visibility states.,True
bd91eafb73453d04d6997a4aca8f926cdf20f06a,Q2RTX,The optimization strategy involved caching memory for image readbacks to reduce the overhead of repeatedly allocating and deallocating memory during screenshot operations.,False,The optimization strategy involves using cached memory for image readbacks to improve the speed of taking screenshots.,False
fac64bf456cf56f0c6309d21286b7eaf170f668e,gccrs,The optimization replaces a less precise macro check with a more specific one to enable reciprocal math optimizations where appropriate.,False,The optimization strategy involves replacing a less precise macro (`__GCC_IEC_559 == 0`) with a more precise macro (`__RECIPROCAL_MATH__`) to improve performance in division operations.,True
d2b0652b32b8671c9ec4057e6da2fa564d1cc610,rocksdb,The optimization strategy involves reducing redundant computations by calculating the compaction score once for a batch of range file deletions instead of recalculating it for each individual deletion.,False,"The optimization strategy involves computing the compaction score once for a batch of range file deletions instead of recalculating it for each deletion, reducing redundant calculations.",True
6c24b26f91a792627a7fc1383004aae22b76fbd8,cachegrand,The optimization strategy refactors the Redis GET command to avoid unnecessary fiber context switches when sending small data back to the client.,False,The optimization strategy refactors the Redis get command to reduce unnecessary fiber context switches when sending small data back to the client.,False
e30965acdd51056d0f72fad9687771652c47d3fa,athena,"The optimization strategy involves adding an error check to prevent inefficient resource usage when the number of OpenMP threads exceeds the number of MeshBlocks, ensuring threads do not sit idle.",False,"The optimization strategy involves adding an error check to prevent OpenMP threads from sitting idle when there are more threads than MeshBlocks, improving efficiency by avoiding unnecessary thread allocation.",False
ee05b0a83df7464448f52aa2b2b3f3ae90c3eb47,overwitch,The optimization strategy used was merging two separate loops into a single loop to reduce CPU time.,True,The optimization strategy involved merging two separate loops into one to reduce CPU time.,True
6c04b3ae15889eeaa7cf85a3e9b81c6d8cb7d2f9,tensorflow,The optimization strategy involved improving the allocation logic for output tensors in MKL-based convolution operations to enhance performance during ResNet-50 FP32 inference.,False,The optimization strategy involved improving the performance of ResNet50 FP32 inference by enhancing the allocation of output tensors in the MKL convolution operations.,False
c37463345f2e91c9071deef2ccca7e7bc9d0b5a1,pybricks-micropython,The optimization strategy involved reducing redundant calls by using a single function to set both input and output baud rates simultaneously.,True,The optimization strategy involves setting both the input and output baud rate simultaneously using a single function call to reduce redundant operations.,True
74a2354353813db529ae123858bafba86cd12110,viewer,"The optimization strategy involved replacing a more general but potentially slower method (`setupVertexBuffer`) with a faster, specialized method (`setupVertexBufferFast`) where applicable.",False,The optimization strategy involves replacing `setupVertexBuffer` with `setupVertexBufferFast` to reduce overhead in vertex buffer setup.,True
280d40b3e06d8bb8ec4af35823802f1823511ad5,sparselizard,The optimization strategy involved reducing redundant computations by caching and reusing results within the function.,True,The optimization strategy involved reducing redundant computations by caching frequently accessed data within the `defineinneroverlapinterfaces` function.,True
22028aa9ab27cf860b74d12e006f82ff551caee0,rocksdb,"The optimization ensures that compaction reads strictly adhere to the user-specified `compaction_readahead_size` by preventing additional bytes from being read, aligning behavior with user expectations and reducing unnecessary I/O overhead.",False,The optimization strategy involved ensuring that compaction reads strictly adhere to the `compaction_readahead_size` limit to avoid unnecessary data fetching.,False
b2929c469c08599941e0975a380fa8108e5a2b8d,xxHash,The optimization replaces two `vpxor` instructions with a single `vpternlogd` instruction in AVX-512 to reduce instruction count and improve performance slightly.,False,The optimization strategy involved replacing two `vpxor` instructions with a single `vpternlogd` instruction in AVX-512 code to reduce the number of instructions executed.,True
e5d8d4d6514600f49a6aae2811e3b6fd33c2ef54,ghostpdl,The optimization avoids searching through all allocated blocks when freeing a heap block by directly managing memory validity.,False,The optimization strategy avoids searching through every allocated block when freeing a heap block to speed up the heap freeing process.,True
f1bc2b187c72d7fa165e48b0120a41f7caf4272f,scummvm,The optimization strategy involved hoisting a storage pointer to a local variable to prevent the compiler from reloading it during each iteration of array operations.,True,The optimization strategy involves hoisting the storage pointer of an array to a local variable to prevent the compiler from reloading it in every iteration of a loop.,True
4903d2eace3a564a68e27855d61bf885e46ea812,wildmeshing-toolkit,The optimization strategy involved replacing a slower envelope computation with a faster alternative to improve performance.,False,The optimization strategy involves using a fast envelope algorithm to improve performance in the test case for smooth operations.,False
bffd7bea76f7ce98bd69bc468fa0d93b93d6c431,pachi,The optimization strategy replaced a bitmap with a move queue and introduced short-circuit logic to improve the speed of the `board_group_find_extra_libs` function.,False,The optimization strategy involved replacing a bitmap with a move queue and fixing the logic to allow short-circuiting for faster execution.,True
739294fb03f590401bbd7faa6d31a507e3ffada5,kmsan,The optimization strategy involves conditionally overriding the final test in the migrate_degrades_locality function during idle balancing to reduce unnecessary NUMA-related checks and improve performance.,False,The optimization strategy involves overriding part of the `migrate_degrades_locality()` function during idle balancing to improve performance in specific benchmark scenarios.,False
8673b83bf2f013379453b4779047bf3c6ae387e4,android_kernel_oneplus_msm8998,The optimization strategy involves setting the current frequency based on the target P-State to ensure correct initial frequency alignment and avoid unnecessary calls to the target routine.,False,"The optimization strategy involves setting the current frequency based on the target P-State to ensure the correct initial P-State is applied, fixing a regression where the default governor wouldn't enable turbo mode correctly.",False
9d00c20ae6169bf7aeaae6611063d7e88ff243ef,OpenMS,The optimization strategy involved reducing unnecessary computations in the RNaseDigestion::digest function by improving the logic for handling unspecific cleavage on long RNAs.,False,The optimization strategy involved improving the performance of unspecific cleavage on long RNAs in the RNaseDigestion::digest function by reducing unnecessary computations and streamlining the digestion process.,False
fc0fed3fc7159d17dc6a08e91a4eda413ace3642,clang,The optimization avoids counting diagnostics when not generating current diagnostics to improve performance and GCC compatibility.,False,The optimization strategy involves avoiding the count of diagnostics when not generating caret diagnostics to improve GCC compatibility and testing efficiency.,False
630a2e6d19fc0163e06d90c6257cc2f2412b6072,TheXTech,The optimization strategy involved restructuring the loop and condition checks to minimize redundant operations and improve the efficiency of `iBlock` handling.,False,The optimization strategy involved improving the efficiency of handling iBlock in the PSwitch function by reducing redundant checks and streamlining the logic.,True
fcb423f3f69225e0be896cb10b34b9628ab666f2,ardour,The optimization avoids redundant path calculations by directly rendering all four sides of a rectangle in a single operation.,True,The optimization strategy involves reducing redundant path operations in the rendering of rectangles with all four sides outlined to improve drawing efficiency.,True
8052d043a48f733905e8ea8f900bf58b441a317f,kmsan,The optimization strategy replaces a heavy function call with multiple lighter calls to reduce overhead in a hot path.,False,The optimization strategy involves replacing a single heavy `copy_from_kernel_nofault()` call with multiple lighter `copy_inst_from_kernel_nofault()` calls to reduce overhead in a hot path.,False
c4ad247b7aa09f2fd9c90c92a23eeebe5c72f256,FreeBSD-src,"The optimization strategy coalesces adjacent TLS headers and trailers in mbuf chains to reduce scatter/gather list fragmentation, improving PCIe bus efficiency.",False,The optimization strategy involves coalescing adjacent TLS trailers and headers to reduce scatter/gather list inefficiencies and improve PCIe bus efficiency.,False
707b0c9cc4d5335d04fce4addb8ed2f158cbd1c0,tensorflow-directml,The optimization strategy involved replacing a loop that repeatedly accessed a Java array with a single direct access to improve JNI performance.,True,The optimization strategy involved improving JNI performance by reducing unnecessary object allocations and method calls in the `Java_org_tensorflow_lite_Tensor_shape` function.,True
544c4cb58b22d25f92f2ea5e77f29fee44845ca6,novacoin,The optimization strategy pre-calculates the midstate of the first 24 static bytes to avoid redundant hashing operations on the full 28-byte sequence.,False,The optimization pre-calculates the midstate from the first 24 bytes of a static kernel sequence to avoid redundant hashing operations.,False
55d1e8bceb0f8d3a4b1f128bb938a8506e5c5718,media-driver,The optimization strategy involved reducing redundant operations in the Fast Dump usage for 1D buffer dumps by improving the logic for handling buffer allocations and memory mappings.,False,The optimization strategy involved improving the efficiency of Fast Dump usage in 1D buffer dump operations.,False
5cba060842da98cc0ad8545e1cdd358a040d630a,Fulcrum,The optimization strategy involved pre-allocating memory for a hash table using `map.reserve()` to minimize dynamic allocations during block processing.,True,The optimization strategy involved pre-allocating memory for a hash table using `map.reserve()` to reduce the number of allocations during block processing.,True
be7d512e17f0829e115a2cfbca8edb0f07d8bc36,open_spiel,"The commit reintroduces a special-case optimization for the `UpdateIncrementalStateDistribution` function in UniversalPoker, likely reducing redundant computations or improving efficiency for a specific scenario.",False,The optimization strategy involves reintroducing a special-case optimization for the `UpdateIncrementalStateDistribution` function in UniversalPoker to improve performance.,False
849c3e45173f4dee3c3797b49382e8f4efb5dc37,OpenDDS,The optimization strategy involved reducing mutex contention by restructuring the locking mechanism in the Thrasher Test's PublisherService.,False,The optimization strategy involved reducing mutex contention in the PublisherService::createPublisher function to improve performance.,False
e4411622690654cdc530c6262c7115a9e15dc359,gcc-darwin-arm64,"The optimization strategy eliminates redundant path calculations in the `find_paths_to_names` function by leveraging previously resolved paths, reducing unnecessary calls to the path solver.",True,The optimization strategy involves avoiding redundant calculations by reusing previously resolved paths instead of recalculating them for each exported range.,True
b8cea7cc279fe609de85b7ce4f50d4ff4f90047f,rocksdb,The optimization strategy involved replacing erase operations with iterator-based erase to improve performance by avoiding unnecessary lookups.,True,The optimization strategy involved using iterators for erasing elements to improve performance.,True
72334282a29ed09c28a5205339ec333bac869906,intel-graphics-compiler,"The optimization introduces a heuristic to skip unnecessary liveness analysis reruns by checking the candidate size on each iteration, reducing redundant computations.",False,"Added a heuristic to skip liveness analysis reruns when the candidate size is too small to impact register pressure, reducing compilation time.",True
d56ce03a409825e09dff0bfdfeee79c8a5002b16,relic,The optimization strategy involved restructuring the BLS signature verification process to reduce redundant computations and improve efficiency.,False,The optimization strategy involved improving the efficiency of BLS signature verification by reducing computational overhead in the verification process.,False
28caf97f02c72e4ab39645be8203adc5bb015718,ain,The optimization strategy involved reusing a single CTransaction object to avoid redundant conversions and hash recalculations.,True,The optimization strategy involves reusing a single CTransaction object instead of repeatedly converting CMutableTransaction to CTransaction to avoid redundant hash recalculations.,True
711fe232dcd2c66806a4eb675e1620eee2cb9a8c,cloud-kernel,The optimization strategy skips unnecessary TLB flushes during retried page faults to mitigate performance regression caused by excessive spurious flushes.,False,The optimization strategy involves skipping spurious TLB flushes during retried page faults to mitigate performance regression.,False
53bdb06987fc1381dffe93209d850931588df616,wesnoth,"The optimization strategy fixed a memory leak by preventing redundant additions to a cache that was not properly flushed, thus avoiding unbounded growth.",False,"The optimization strategy involved fixing a cache bug by preventing the addition of redundant greyscaled images to the reversed_cache during each redraw, which was causing infinite growth in the cache.",False
5478c5fcd4bcc74c5da64238f86d3132c3dc755e,embox,"The optimization strategy involved writing raw data directly to flash memory without using a buffer, reducing overhead and improving speed.",False,The optimization strategy involved writing raw data directly to flash memory without using a buffer to speed up the formatting process.,False
9bf811dae443794594615625577277852edc181b,kmsan,"The optimization strategy involves attempting to destroy secure pages during memory teardown instead of exporting them, which is faster when applicable.",False,"The optimization strategy involves attempting to destroy secure pages directly during memory teardown to avoid the slower export process, falling back to export if destruction fails or if it's not a teardown.",False
3aeea4fc835d31235947787c2b8dcbc255131106,selinux-kernel,The optimization strategy replaces `page_mapcount()` with `folio_mapcount()` in `zap_present_folio_ptes()` to improve efficiency and catch more underflows during batch unmapping for large folios.,False,The optimization strategy involves replacing `page_mapcount()` with `folio_mapcount()` in `zap_present_folio_ptes()` to more efficiently detect underflows during batch-unmapping of large folios.,True
4e7a898d7ebf82462d895827580009902496854f,Pikafish,The optimization avoids unnecessary computation in the SEE evaluation for king moves by leveraging the fact that legal king moves cannot have negative SEE values.,False,The optimization strategy removes unnecessary checks for negative SEE (Static Exchange Evaluation) in king moves since they are guaranteed to be legal and thus cannot have negative SEE.,False
64ac0e1cddff681409ecf95293824f95039f099c,NX-FPS,The optimization strategy involved reducing the frequency of file write operations by buffering data and writing in larger chunks.,True,The optimization strategy involved improving file output performance by reducing the number of write operations through buffering.,True
01cbdd2aae8f998e3e532dec06f0f373a6cff719,rocksdb,The optimization strategy involved adjusting the compression starting level and other storage parameters to better suit the spatialDB workload.,False,The optimization strategy involved adjusting storage parameters to start compression at an earlier level (level 1 instead of level 2) and modifying other related settings for better performance.,False
e592ea8ddffb44bab52d36d9862bb39ffae4d144,gcc,"The optimization strategy involves enabling the use of power-aligned loads for single-lane SLP by treating non-grouped accesses like non-SLP, resolving missed opportunities in vectorization.",False,"The optimization strategy involves treating non-grouped accesses in single-lane SLP like non-SLP to enable the use of power realign loads, improving alignment handling in vectorization.",False
177aa816abd6c737617a72ad86fc1734a2bae7b5,php-ext-zstd,"The optimization removes unnecessary checks for FAST_ZPP support since PHP7 inherently supports it, reducing redundant conditional evaluations.",False,The optimization strategy involved removing redundant checks for FAST_ZPP support since PHP7 inherently supports them.,True
0b02da5b99e89347f5f8bf875ec8318f84adff18,gcc,The optimization ensures scalar uses are recorded for BB reduction remain defs to correctly compute live lanes and restore vectorization.,False,"The optimization strategy ensures that scalars added to the BB reduction vectorization result are recorded as scalar uses to compute live lanes, restoring vectorization in specific cases.",False
ce4d80cfda0b3e3cc70aedbaeed3c5bb824ce7d7,libulz,The optimization strategy involved reducing unnecessary memory shifts in the `sblist_delete` function by directly overwriting the deleted element with the last element in the list.,True,The optimization strategy involved reducing unnecessary memory operations by directly manipulating pointers in the sblist_delete function.,True
65e69dcf3e4803a8e60f888dba68cf0db4a55e6f,OpenCPN,The optimization strategy involved reducing redundant OpenGL state changes by caching and reusing pattern rendering settings.,False,The optimization strategy involved improving the performance of OpenGL pattern rendering by modifying the rendering process in the `s52plib::RenderToGLAP` function.,False
e9895752a396c4acb8c2b4ba525c13329d4e9fab,libplist,The optimization avoids unnecessary heap allocation by directly reading the size from the binary stream instead of creating and freeing an intermediate node.,False,The optimization strategy avoids unnecessary heap buffer allocation by directly reading size values from the binary stream instead of parsing and freeing temporary nodes.,True
ba10dad8a5cc983c6d26fb4bb47251defe286d24,seqtk,The optimization strategy involved restructuring the parsing logic to minimize unnecessary memory operations and improve cache efficiency.,True,"The optimization strategy involved improving the parsing performance of FASTA files by enhancing the `ks_getuntil2` function, doubling throughput to 2GB/s.",False
565d0b74e8bb66c0ff8aa42db225d6eb11258dac,PandA-bambu,"The optimization strategy involved improving the handling of multiplication by an unsigned constant, likely through more efficient code generation or transformation.",True,The optimization strategy involved improving multiplication by an unsigned constant to enhance performance.,True
50f5921425afbc5edb9a296343706ac260ce6a86,wiredtiger,The optimization avoids unnecessary cleanup of reconciliation boundary structures by short-circuiting the process when the list is empty or not large enough to justify the operation.,False,The optimization strategy involves short-circuiting the cleanup of reconciliation boundary structures to avoid performance bottlenecks caused by large lists.,False
ca50fedd06d93e3942609d947700d559561e07da,swipl-devel,The optimization strategy involved relocating the computation of atom-hash outside of a locked section to reduce contention and improve concurrency.,False,The optimization strategy involved moving the computation of atom-hash outside of a locked area to reduce contention and improve performance.,True
89a06f6651882248e185bb597135af3249ec8f6a,Pikafish,"The optimization removes an unnecessary explicit check for castling moves in the `pl_move_is_legal` function, as it is already implicitly covered by the king move check and is rare enough to slow down performance.",False,"The optimization strategy removes a redundant check for castling moves, leveraging the fact that it is implicitly covered by the king move check and is rarely encountered.",True
d40132ac72a03d78c67e1f1e2b4fc26b309c0452,NanoVNA-D,The optimization strategy involved reducing redundant calculations within the loop to improve drawing performance.,True,The optimization strategy involved reducing redundant calculations and simplifying the logic in the `cell_drawline` function to improve drawing performance.,True
68fca82f46bea2688259f87a2691fea27da5f882,revng,The optimization strategy involves reducing the number of calls to `updateNodes` by invoking it only on parent metaregions instead of all metaregions.,False,The optimization strategy involves reducing redundant calls to `updateNodes` by only invoking it on parent metaregions instead of all metaregions.,True
55a2abfe31b82af13a77c3dc89913774f667b898,libvpx,The optimization strategy involved simplifying the logic in the loop to reduce unnecessary computations during partition pruning.,True,The optimization strategy involved reducing the number of function calls and simplifying the logic in `ml_pruning_partition()` to achieve a small speedup.,True
e967a7602f838eeae2a9f1bc7c2d0a8d86d4e4e9,3DWorld,The optimization strategy involved replacing a less efficient drawing method with a more efficient `glDrawArrays()` call to improve rendering performance.,False,The optimization strategy involved replacing a less efficient drawing method with a more efficient `glDrawArrays()` call in the `sd_sphere_d::draw_ndiv_pow2()` function.,True
4b7e1ac7947e13746735ab5bfa069b08c0b0c0ae,notepad-plus-plus,The optimization strategy involved reducing redundant operations by caching and reusing results within the loop.,True,The optimization strategy involved improving the performance of opening all search results by reducing redundant operations and streamlining the process.,False
01c82f50f7f2dc2f93e354374b5a6e14c71839a0,sycl,The optimization strategy involved removing a division operation in the `__sanitizer_cov_trace_switch` function to reduce computational overhead.,True,The optimization strategy involved removing a division operation to speed up the `__sanitizer_cov_trace_switch` function.,True
2e5a323dbd4dbfad5b1e3d45d489e6dca37f4257,rocksdb,The optimization strategy replaced a no-operation (nop) instruction with a more effective instruction (`isb`) in spin-wait loops on ARM64 architecture to better align with the behavior of the x86 `pause` instruction.,False,"The optimization strategy involved replacing the yield instruction with an isb instruction on arm64 to better mimic the behavior of the x86 pause instruction, improving spin-wait loop performance.",False
27cd66aa67974020196be9f905ee82f540fefd6f,runtime,The optimization strategy involved modifying a condition check to improve the efficiency of a hot path in the code.,False,The optimization strategy involved modifying a conditional check in a hot path to generate slightly better code.,True
7ac154065f3acbb38afba7fc0eccd3adf8208ced,mpv,The optimization adjusts the scheduled time for the next frame when changing playback speed to improve responsiveness during faster playback without audio.,False,The optimization strategy involves adjusting the scheduled time until the next frame when changing playback speed to improve responsiveness without audio.,False
002feb3b26f1b66c0b57875b9e03ea883c08cbb9,Indigo,The optimization strategy involved reducing memory usage by modifying how molecule data is processed and saved in the CML format.,False,The optimization strategy involved reducing memory usage during molecule saving by modifying the CML saver implementation.,False
2738ede6b2e8de6b09afadc7f09d75b18491a629,sycl,"The optimization strategy involves using MRI (Machine Register Information) to find the highest used registers, which is faster than searching the entire program for calls when there are no calls present.",False,"The optimization strategy involves using MRI to find the highest used registers, providing a faster path than searching the entire program for calls when there are no calls.",False
851c941b8b596e7e2914b00795c32e285668b389,BsodSurvivor,The optimization strategy involved precomputing and caching sets of definitions and kills for each block to avoid repeatedly walking def/use lists and kill lists during live variable updates.,False,The optimization strategy involves precomputing sets of definitions and kills for registers in a block to reduce the cost of updating live variables during critical edge splitting.,True
216bf531440434b7ce51ba0d8ce35db6a4359781,epiphany,The optimization strategy disables hardware acceleration to reduce memory usage by lowering the resource demands of the webview component.,False,The optimization strategy involved disabling hardware acceleration to reduce memory usage.,False
a45f99d74008f1c7fe646d84d9e7ff3bbfc09a5f,casadi,The optimization strategy involved reducing redundant computations inside a loop by moving invariant calculations outside the loop.,True,"The commit resolves a performance degradation by reverting changes introduced in a previous revision, likely restoring a more efficient implementation.",False
a2e879bc6330544856948e78ddf2859ba410fdd4,pqR,"The optimization strategy used is to directly assign an integer scalar to a specific index in a real vector, avoiding unnecessary computations or checks.",True,The optimization strategy involved speeding up the assignment of an integer scalar to a subset of a real vector by reducing unnecessary operations and improving memory access patterns.,False
4e12e03c5b4272c875e968fdebc36a6b875e439b,petsc,The optimization strategy involved restructuring the matrix transposition logic to reduce redundant computations and improve cache locality.,False,The optimization strategy involved improving the performance of the matrix transpose operation for a specific matrix type (SeqBAIJ) by refining the implementation details.,False
fbd02630c6e3c60feecc4688f5f98b015d264516,android_kernel_oneplus_msm8998,The optimization strategy involves reenabling local IRQs during slowpath calls in bulk freeing to reduce overhead compared to the fallback function.,False,"The optimization strategy involves reenabling local IRQs during the slowpath __slab_free() call to reduce overhead compared to the fallback function, leveraging the faster local_irq_{disable,enable} operations.",False
09952ddc4b29e384ca06fbe5c4e58a1012cc6395,gstreamer,The optimization avoids using PBO (Pixel Buffer Object) memory for internal textures in GL effects to reduce DMA memory overhead and improve performance.,False,The optimization strategy involved switching from using PBO (Pixel Buffer Object) GLMemory to non-PBO GLMemory for internal textures to reduce DMA memory usage and improve performance.,False
1197b4d8bd1397e1d9f1cd04c90e20a4b5aa539a,apulse,"The optimization strategy involves discarding ringbuffer contents when the application fails to read data quickly enough, preventing buffer overflows and improving performance under high load.",False,The optimization strategy involves dropping ringbuffer contents when the application does not read data fast enough to prevent buffer overflow and improve performance.,False
63a3565e972aa6466286ecd77d66ed092041d561,secp256k1,"The optimization skips unnecessary random number generation when no seed is available, avoiding redundant computation.",False,"The optimization strategy skips the RNG computation when creating blinding if no seed is available, avoiding unnecessary processing.",False
d3ed9766e8e73e3445bacc6636eefa3c8678a96f,FEX,"The optimization strategy involves using the full register size for MOVLPD stores and only storing the lower bits, reducing unnecessary memory operations.",True,The optimization strategy involves using the full register size for MOVLPD stores to reduce overhead by only storing the lower bits.,True
9a72ae384f4205f0b60cb5b090f8fd0e89e303c9,ucx,The optimization strategy involved improving the efficiency of tag offload operations by optimizing bounce buffer handling in CUDA contexts.,False,The optimization strategy involves improving tag offload bounce buffer handling in CUDA to enhance performance.,False
31c77ca08b2cfe315e59e9cff5ae9d90e8a58793,osquery,The optimization strategy involved adding a timeout to the ConnectServer call to ensure it returns within a fixed duration (2 minutes or less) instead of hanging indefinitely.,False,The optimization strategy involved setting a timeout for the ConnectServer call to prevent indefinite waiting when connecting to a broken server.,False
038ac18aae935c89c874649acde5a82f588a12b4,selinux-kernel,"The optimization avoids broadcasting TLB flushes for kernel memory when only one CPU is active, reducing unnecessary overhead.",False,The optimization strategy avoids broadcasting TLB flushes when the memory context is only active on the local CPU or when only one CPU is online.,False
0366e02b3e6b3304b4ea95d06c9ed7683ae5c7ec,angie,The optimization strategy involved restructuring the logic in ngx_http_upstream_process_header() to reduce redundant checks and improve the efficiency of header processing.,False,The optimization strategy involved slightly optimizing the `ngx_http_upstream_process_header()` function to improve performance.,True
a21004eee58137f194374850dd36cd47375f49e8,q5Go,"The optimization strategy reorders the traversal logic to prioritize visiting the main branch first, even if it results in walking it twice, to avoid recursion overhead.",False,"The optimization strategy involves reordering the traversal of a tree to prioritize visiting the main branch first, even if it means walking it twice, to avoid recursion.",False
5ed89eb5eefd985087051e044c5c16980fdd8e5f,odp,The optimization strategy avoids prematurely moving to the next priority queue by continuing to schedule over empty or destroyed queues until an event is found or the queue is confirmed empty.,False,"The optimization strategy involves modifying the scheduler to continue searching through priority queues even when encountering empty queues, ensuring events are not missed.",False
a381b70a1cf88e4a2d54f24d59abdcad0ff2dfe6,kmsan,The optimization strategy replaced the heavier `rmb()` memory barrier with the lighter `smp_rmb()` compiler barrier to reduce runtime overhead in a specific kernel configuration.,False,"The optimization strategy involved replacing `rmb()` with `smp_rmb()` to reduce memory barrier overhead in a seccomp filter, improving performance by avoiding unnecessary memory access restrictions.",True
031862bc330ae70de367c240f6da347a25400b04,rondb,The optimization strategy reduces the number of iterations in microbenchmarks during debug mode to minimize execution time while still ensuring basic functionality checks.,False,The optimization strategy involved reducing the number of iterations in microbenchmarks to minimize unnecessary execution time in debug mode.,False
3c6db98a1474bca34927562783bced836ac12892,smaug,The optimization strategy adjusts the tiling approach for convolution layers by rounding down the number of output feature maps to a multiple of NUM_PE_INSTS to improve hardware utilization.,False,The optimization strategy involves adjusting the tiling strategy for the convolution layer to round down the number of output feature maps to the previous multiple of NUM_PE_INSTS to improve hardware utilization.,False
946a36f82a0b21567e92f932832abdeb758bcc70,android_kernel_msm-5.4_nothing_sm7325,"The optimization enables hardware-based segmentation of TSO packets on VXLAN over VLAN topologies by updating VLAN features, reducing CPU overhead.",False,"The optimization strategy involves enabling tunnel offloads in `dev->vlan_features` to allow TSO on VXLAN over VLAN topologies, reducing CPU usage by leveraging hardware segmentation capabilities.",False
bb15d2f62ff6d5a9468f1a85d9640d9758263e94,xenia,The optimization strategy involved reducing redundant texture binding operations in the font setup process to improve rendering performance.,False,The optimization strategy involved improving the performance of profiler drawing by enhancing the font setup process in the GL4ProfilerDisplay class.,False
9a5d19d680323dfb9705c6c5ac10ac30d9ccc842,glsl-optimizer,The optimization strategy skips unnecessary reference count adjustments for index buffer objects to reduce overhead.,False,The optimization strategy involved skipping unnecessary reference count manipulations on index buffer buffer objects to improve performance.,False
532e2128823823fd4b71922fbb144a24216d4969,ardour,The optimization avoids unnecessary redraw requests by checking if the route still exists before triggering a GUI update during the deletion process.,False,The optimization strategy involved reducing redundant redraw operations by modifying the `RouteTimeAxisView::io_changed` function to avoid unnecessary GUI updates before the `RouteTimeAxisView` is deleted.,False
951b8c875ac905aa9d348c825c380e7ce66c0f62,android_kernel_oneplus_msm8998,The optimization strategy involves boosting the controller core clock to ensure faster card detection by operating SDCC at its maximum clock speed.,False,"The optimization strategy involves boosting the controller core clock to ensure the SDCC operates at maximum speed, thereby reducing card detection time.",False
faf83743d8b66df3a7c98b22c8cdacd1b1948842,clr,The optimization strategy involved switching persistent emulation to use device memory instead of system memory to address a performance bottleneck related to ROCr's lack of support for visible heap without large bar.,False,The optimization strategy involved switching persistent emulation from system memory to device memory to improve performance by leveraging ROCr's capabilities.,False
857f50649cad125398774dca0f7a73ed3ffaf738,gtk,The optimization strategy involved refining the width-for-height computation in GtkLabel by improving the efficiency of layout calculations.,False,The optimization strategy involved microoptimizing the width-for-height computation in GtkLabel to improve performance.,False
821da6a556fb94425080b975d177ebfba624c10e,cadical,The optimization strategy involved making the LRAT (Linear RAT) proof generation for assumptions more memory efficient by reducing unnecessary memory allocations or usage.,False,The optimization strategy involved making the LRAT (Linear Resolution Asymmetric Tautology) for assumptions more memory efficient.,False
68c4fa31aa52765314b4285a7835368ea35b509c,android_kernel_oneplus_msm8998,The optimization avoids unnecessary spinlocks by calling a locked version of the function under an existing lock.,False,The optimization strategy avoids redundant spinlocks by calling `ttm_eu_backoff_reservation_locked` under the existing lru spinlock.,False
8df1c07ddb4758814068b64af831ba41254f32bc,server,The optimization strategy involved simplifying or reducing unnecessary computations within the `leafentry_disksize` function to improve its execution speed.,False,The optimization strategy involved reducing redundant calculations and simplifying the logic in the `leafentry_disksize` function to improve its performance.,True
de202d8ac5235c11f6e64d2e398a471c0a14a72c,prboom-plus-rt,The optimization strategy involved replacing a static array and memory copying with a more efficient and universal implementation in the R_ShowStats() function.,False,The optimization strategy involved removing a static array and memory copying in the R_ShowStats() function to improve performance and universality.,True
60588bfa223ff675b95f866249f90616613fbe31,kmsan,The optimization strategy limits the number of CPUs scanned in `select_idle_cpu()` by using a per-CPU mask to avoid unnecessary checks and potential stack overflow.,False,The optimization strategy involves using a per-CPU pointer 'select_idle_mask' to prevent stack overflow and improve efficiency in scanning for idle CPUs within the LLC domain.,False
a3732ee4d3b54b47c3319bb8ecfbed5c83975340,cheerp-compiler,The optimization strategy propagates section information to optimized global variables to potentially improve linking and memory layout efficiency.,False,The optimization strategy involves propagating section attributes to optimized global variables to improve memory layout and access efficiency.,True
b8a09bd0f461b93ded0a3f3532690e24b570bab1,32blit-sdk,The optimization avoids copying the entire screen surface by directly manipulating the screen mode without unnecessary data duplication.,True,The optimization strategy avoids copying the entire screen surface in the `set_screen_mode` function to reduce overhead.,True
8608c03b76b20aa4a1e4786e32799f13d82e9e25,pipewire,"The optimization strategy involved moving timestamping outside of an unlikely block to reduce jitter in IRQ-based software timestamping, improving timer-sensitive code performance.",False,The optimization strategy involved moving timestamping outside of an unlikely block to reduce jitter and improve timer-sensitive code performance.,False
0708cc582f0fe2578eaab722841caf2b4f8cfe37,android_kernel_oneplus_msm8998,The optimization strategy involved adding a hardware-specific quirk to reduce CPU load by adjusting the `position_fix` parameter for a specific audio device.,False,The optimization strategy involved adding a position_fix quirk to reduce high CPU load caused by PulseAudio and application interactions with the audio device.,False
b306320322c9cfaa465bc2c7367acf6072b1ac0e,kmsan,The optimization strategy skips zero-length SPI transfers in the default `transfer_one_message()` implementation to avoid unnecessary processing and potential crashes.,False,The optimization strategy involves skipping zero-length SPI transfers to avoid crashes and unnecessary processing.,True
92b3dc1cbffdb8e3d6370e6de7584980e3192253,libfabric,The optimization disables the delivery complete feature for inject operations to avoid unnecessary overhead since completions are not required for such messages.,False,"The optimization strategy involves disabling the delivery complete feature for `fi_inject` messages to avoid unnecessary completion entries, thereby improving performance.",False
917ac7d4131795bfd84694a07364e6bba2d8693a,v8,The optimization improves range analysis for smi phi nodes by refining the inference logic to reduce unnecessary computations.,False,The optimization strategy improves range analysis for small integer (SMI) phi nodes to enhance performance by refining the inference of value ranges.,False
3e9ba6684d5ac9c48a1741566b1c1ce781e77125,GammaRay,The optimization strategy used is replacing the erase operation with a swap-and-pop approach to avoid expensive element shifting in QVector.,True,The optimization strategy involved swapping the element to be removed with the last element in a QVector and then popping the last element to avoid costly object moves during erasure.,True
a875fd1620ffb65f4e0d488f7fe1fba62cf9fedd,kmsan,The optimization flags contiguous TX buffer elements to enable hardware-level data access optimizations for specific skb layouts.,False,The optimization strategy involves flagging contiguous TX buffer elements to enable hardware to optimize data access for specific skb layouts.,False
518ebe1902916a6232f83cd1effbd5cc9c27c8cf,freeradius-server,The optimization strategy involved restructuring the initialization of fields to reduce redundant operations and improve efficiency.,False,The optimization strategy involved more efficient field initialization to reduce overhead in the `mod_enqueue` function.,True
e3951631b987e2be6f9fd46df8c48d23c68e09fb,n3n,The optimization strategy involved reducing unnecessary overhead in the benchmark loop to improve packet processing speed.,True,The optimization strategy involved improving the benchmark performance by adjusting the timing and packet handling in the `run_transop_benchmark` function.,False
a247e83bb45da02d79c85301bfa8068735aa1649,wiredtiger,"The optimization avoids acquiring and releasing the overflow lock when the cell type is known to be WT_CELL_VALUE_OVFL_RM, as re-instantiation of the value is not possible.",False,"The optimization strategy involves bypassing the acquisition and release of an overflow lock when the on-page overflow cell is known to be of a specific type (WT_CELL_VALUE_OVFL_RM), as it does not require re-instantiation.",False
e1fdf7b3f0046b87bbf6d3464a0fe2b8ab9f6f59,openvino,The optimization strategy involved refining the logic in the `customIsSupported` function to improve performance by reducing unnecessary checks or computations.,False,The optimization strategy involved addressing performance degradation in the deconvolution layer by modifying the customIsSupported function to improve efficiency in noise suppression scenarios for FP16 operations.,False
d021074c0dc7ddfe7a7a814430f39b6746ca4132,hhvm,The optimization introduces a fast path for `nullptr` checks in `AtomicCoreCachedSharedPtr::get()` to avoid unnecessary protection logic when the storage is empty.,True,The optimization strategy adds a fast path for `nullptr` in `AtomicCoreCachedSharedPtr::get()` to avoid unnecessary protection when the storage is `nullptr`.,True
55652043c83c463ce57b7748e01c6d12bb5bf9fe,rocksdb,The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying and improve performance.,True,The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.,True
c6ddbe1ed526a010fa9537f0e531976686078ccb,open_evse,The optimization strategy involved replacing a standard square root implementation with a more efficient algorithm that reduces both execution time and compiled code size while maintaining correctness.,True,The optimization strategy involved improving the square root function to be faster and more space-efficient while maintaining the same results.,True
3061a2776e3265e10d87c0416bd1c9da1f3bc16a,scarab-osd,The optimization strategy reorders switch-case statements in an ISR to prioritize faster execution of important cases based on their likelihood of occurrence.,False,The optimization strategy involved reordering cases in a switch statement to prioritize faster execution of important cases.,True
23eaecf02dedf0a5a25e1cdbfdfc7b8c70c17a56,platform_system_core,The optimization strategy involves changing the SD card mounting process to be synchronous to gather performance data related to system regressions.,False,The optimization strategy involves mounting the SD card synchronously to investigate performance regressions related to SD card access.,False
6fee27a09d894c820f474ca26610cfcd9ac81c54,naemon-core,The optimization strategy involved reducing unnecessary iterations or operations in the test code to improve execution speed.,False,"The optimization strategy involved modifying the test_timeperiods.c file to improve performance, likely by refining time period calculations or reducing redundant operations.",False
c074b18f8d4510713f6d66149213510428eae6f1,qt-creator,The optimization strategy involved improving the hash code generation for literals to reduce performance overhead when handling numerous unique literals.,False,The optimization strategy involved improving the `Literal::hashCode` function to enhance performance when handling files with numerous unique literals.,True
e8c0cea5f9affac2e6192842bb81a5f16fe69c8e,ladybird,"The optimization strategy used right shift operations to efficiently extract type tags in equality code generation, reducing computational overhead.",True,"The optimization strategy used a right shift operation to extract type tags in equality code generation, improving performance by reducing computational overhead.",True
cf359f6a7ef0bc249cc5c7e1cd51b72962b7933b,hhvm,The optimization strategy involved modifying the code to utilize SIMD registers to break cycles and improve performance.,False,"The optimization strategy involves ensuring that a SIMD (Single Instruction, Multiple Data) register is used to break cycles, leveraging SIMD capabilities for performance improvement.",False
73067b1ef11ea1f085ccc2f721c46be7a30c0438,dolphin,The optimization strategy involved improving the efficiency of linking continuous blocks in the JIT compiler by reducing unnecessary operations or overhead.,False,The optimization strategy involves faster linking of continuous blocks in the JIT cache to improve performance.,False
0f3cc9a72e193e7ade68889ab030729cae2c8ba0,cheribsd,"The optimization strategy adjusts the `steal_thresh` parameter to be dynamically set based on the logarithm of the number of CPUs, improving load balancing efficiency across different CPU configurations.",False,The optimization strategy involves adjusting the `steal_thresh` parameter to `log2(ncpus)` to improve load balancing on machines with different CPU counts.,False
8228f2b5465e41e537d6bd972123270fca484ced,drm-kmod,The optimization strategy avoids unnecessary expensive bandwidth revalidation calls by restricting them to medium and fast updates only when required.,False,The optimization strategy involves conditionally skipping an expensive bandwidth revalidation call during fast updates to improve performance.,False
64cedae3cfeff626ad453db696e7e57b75d591f5,nap,The optimization strategy used was replacing `insert` with `emplace` to avoid unnecessary copy operations and improve performance.,True,The optimization strategy used was replacing `insert` with `emplace` to avoid unnecessary copying of objects.,True
6533a3636d5dfdb46062f90102b54b750f1b47cf,rethinkdb,The optimization strategy involved adjusting the flush waiting threshold to reduce latency by changing when data is flushed to storage.,False,The optimization strategy involved adjusting the flush waiting threshold to reduce latency.,False
ccaa910c3540a89beb078f1dd5f344fac7080441,yugabyte-db,The optimization strategy involves caching the client IP address once per backend lifetime to avoid repeated expensive operations.,False,The optimization strategy involves caching the client IP address once per backend lifetime to avoid repeated expensive operations.,True
a502a86dc1cddd1e25ce1994dd812003fdd5cee8,opm-simulators,The optimization strategy involved replacing the existing data structure with a ThreadSafeMapBuilder to prepare for multithreading in the loop.,False,The optimization strategy involves using ThreadSafeMapBuilder for diffusivity_ to prepare for multithreading the loop.,False
8c7cac42838bb4f0e9a4ab8345933445db36a7aa,mintty,The optimization strategy limits width checking to specific symbol ranges to reduce unnecessary computations.,False,The optimization strategy limits width checking to specific symbol ranges to reduce unnecessary computations and improve performance.,False
2d692e9e87d8b2b438fd21dfae6749d573c4d5b8,AshamaneCore,The optimization strategy involved reducing redundant database queries by caching results during waypoint script loading.,False,The optimization strategy involved improving the efficiency of waypoint script loading by reducing redundant data processing and streamlining access patterns.,False
08954743b61c0441119ebed0098880fdafe07543,RaZ,The optimization strategy involves directly testing the triangle in a leaf node before performing an AABB check to avoid unnecessary operations and potentially reduce irrelevant data processing.,False,The optimization strategy involves directly testing the triangle in a leaf node instead of first testing the AABB to avoid unnecessary operations and improve query performance.,False
5db8831fb0c3a4a23f76522925253fc64e07ff9d,tcl,The optimization avoids unnecessary memory allocations by leveraging the EOF state to prevent worthless buffer allocations during input operations.,False,The optimization strategy involved leveraging the EOF state to prevent unnecessary memory allocations.,True
5e22b757a82a29269bfba7b1828ba8d078331c95,drm-kmod,"Increased the size of user LRC rings to allow compute contexts to submit more work without blocking userspace, reducing stalls during workload execution.",False,"The optimization strategy involves increasing the ring size for compute contexts to allow more work submissions without blocking userspace, reducing the likelihood of stalling during workloads.",False
fdc00aef69df9646bd29c5d18be728b64f15e343,petsc,The optimization strategy involved restructuring the computation of metrics to reduce redundant calculations and improve efficiency.,False,The optimization strategy involved updating the metric computations in the `ComputeMetric` function to improve performance.,False
7eacea4c518a46664f6f388143bcd74c9c0c9e71,ClickHouse,The optimization strategy involves refining the logic for determining if a partition key suits a group-by key to reduce unnecessary computations.,False,The optimization strategy involves modifying the `isPartitionKeySuitsGroupByKey` function to improve the efficiency of data parallel aggregation by better aligning partition keys with group-by keys.,False
5d20a8f80193685877ae3c57e676240e6f2384b3,php-src,"The optimization strategy involved reusing a precomputed hash value instead of recalculating it, reducing redundant computations.",True,"The optimization strategy involves reusing a precomputed hash value instead of recalculating it, reducing redundant computations.",True
7130aeef991f52166a2102dc70016e67e6047765,icu,"The optimization strategy involved restructuring the loop logic in `_MBCSFromUnicodeWithOffsets` to use a `goto` statement to jump directly into the loop, reducing redundant computations and improving performance.",False,"The optimization strategy involved using a `goto` statement to enter a loop directly, reducing overhead from loop initialization.",True
c23ae082099b52952db027123b047a09ab5d8744,vlc,The optimization reduces buffering delay by aligning the demuxer's frame processing time closer to the target frame interval for smoother playback.,False,"The optimization strategy involves adjusting the delay between demuxer calls to align with the frame rate of a 60 FPS video, ensuring the buffering level remains optimal.",False
c0743209e2d380fd03a6042650c7cda2bf4d0674,plumed2,"The optimization strategy reduces unnecessary computations by limiting the number of shift vectors tested, leveraging the reduced cell information.",False,"The optimization strategy reduces the number of shift vectors tested by leveraging the reduced cell, thereby minimizing unnecessary computations.",False
97a86940cc81c458094214f21ee9949291a0e25c,qulacs,The optimization strategy involved replacing `std::find()` with precomputed indices to reduce the overhead of repeated searches for parametric gates.,True,The optimization strategy involved removing `std::find()` and precalculating the locations of parametric gates to improve performance.,True
82e8e9e26bb16d1af07a26741bcf63d8342e4336,rocksdb,The optimization strategy used a merge operation on two sorted arrays to reduce the time complexity of the `SaveTo()` function to linear time.,True,The optimization strategy used was merging two sorted arrays (`base_files` and `added_files`) to reduce the complexity of the `SaveTo` function to linear time.,True
9125969086bfa1bf804b246ea574a2329b06d2c5,gccrs,The optimization ensures proper handling of mask arguments for SIMD clone calls by using a VEC_COND_EXPR to generate valid mask values instead of directly converting the vector mask.,False,The optimization strategy involves properly handling invariant and loop mask passing in SIMD clone calls by using VEC_COND_EXPR to generate mask elements with 1 or 0 values.,False
4fbae77929e6344bc49ab60af10a9c5ff21d2cdf,bitcoin,The optimization strategy involved modifying the `COutPoint` constructors to reduce unnecessary initializations and improve construction efficiency.,True,The optimization strategy involved improving the efficiency of COutPoint constructors by reducing unnecessary operations or overhead.,True
83d0820e58ba45242e71bd15ae1917991829b1a1,skyscraper,The optimization strategy involved replacing the use of `bits` with `constBits` to avoid unnecessary data copying and improve efficiency.,True,The optimization strategy involves using `constBits` instead of `bits` to improve efficiency by leveraging const-correctness and potentially reducing unnecessary copying or modification overhead.,True
c5e8f441b6b5fb6cb25ecd1d621144ff80794ec6,android_kernel_xiaomi_sm8150,"The optimization strategy fixes rx reordering latency by ensuring reordering is only bypassed for packets with a no-ack policy, addressing incorrect handling of non-explicit/psmp ack policies.",False,The optimization strategy involves bypassing reordering only for packets with a no-ack policy to reduce latency in QoS ack policy scenarios.,False
121bf54b822673237859486a2dea2863c3c14e06,SIRIUS,"The optimization strategy involved reverting to a previously used, faster computational method for solving a specific problem in the code.",False,The optimization strategy involved switching back to a faster method for solving a specific problem in the Band::solve_for_kset function.,False
68e3a70527436188826609568d6fb105bee20c1a,darktable,The optimization strategy involved reducing the frequency of clock readings and enhancing debugging output efficiency in the pixelpipe processing function.,False,The optimization strategy involves avoiding unnecessary clock readings and improving debugging output to enhance performance.,True
8caedfe81e0f03423fe46f05274b3590e2bb9416,Hercules,The optimization avoids unnecessary calculations by checking a configuration flag before performing certain operations.,False,The optimization strategy involves skipping unnecessary calculations for users with `battle_config.ksprotection` disabled to improve performance.,False
46194b4f5c2f266c59d9c38d7d7a29ad08042ab7,canairio_firmware,The optimization strategy involved reordering the OTA loop to improve memory management and free flow during execution.,False,The optimization strategy involved reordering the OTA loop to improve memory deallocation flow.,False
249176cc0ba651b523374c95ad014028b7afa88b,john,The optimization forces auto-tuning in the OpenCL rawSHA512 implementation to improve cracking performance by adapting to hardware capabilities.,False,The optimization strategy involved enabling auto-tuning in the OpenCL rawSHA512 implementation to improve cracking performance.,False
d451fb9a6257e1cc93baf1b2b9bcd52dc4a762e1,OpenTESArena,"The optimization caches voxel grid dimensions to avoid repeated getter calls, reducing function call overhead in performance-critical code.",True,"The optimization strategy involved caching voxel grid dimensions to avoid repeated getter calls, improving performance by reducing function call overhead.",True
bdad106358ae177d1345f5ff85c0e38cfeb5ca90,qt,"The optimization leverages the SSE4.1 instruction PBLENDVB to replace multiple SSE2 instructions, reducing instruction count and improving SIMD performance for the `toLatin1` function.",False,The optimization strategy used involves replacing three SSE2 instructions with a single SSE4.1 instruction (PBLENDVB) to improve performance in the toLatin1 function.,True
5974446523ab87f7b36a9a924e004487e985ff29,kicad-source-mirror,The optimization reduces inefficiency in r-tree filtering by adjusting a heuristic parameter to better leverage spatial indexing in dense designs.,False,"The optimization strategy involved adjusting the r-tree filtering parameter from a fixed ""4x worst"" value to a value slightly above the worst clearance to improve performance in dense designs.",False
687460ce7f68ab0621d42ed00ca6fbce4e940121,simde,The optimization strategy involved manually implementing shuffles to replace operations that the autovectorizer could not optimize.,False,The optimization strategy involved manually implementing vectorized operations using shuffles to bypass the autovectorizer's limitations.,False
e338bbed44d09c08b7ca047ff0914ed01d3917fd,qtdeclarative,The optimization strategy involved replacing QList with QVarLengthArray to reduce memory allocations and improve performance in the `didYouMean` function.,True,The optimization strategy involved replacing QList with QVarLengthArray to reduce allocation overhead and improve runtime performance.,True
4a278393bda27e62e2e08fb4d000350c0ce83578,wiredtiger,"The optimization strategy involved changing the default statistics configuration to ""fast"" mode in wtperf to reduce overhead.",False,"The optimization strategy involves defaulting to ""fast"" statistics in wtperf to improve performance by reducing the overhead of detailed statistical collection.",False
a9ef0a8af81f4822e8f6190a172747777d0b32af,qt-creator,The optimization strategy replaced iteration over all documents with a faster lookup to improve performance.,True,The optimization strategy replaced iteration over all documents with a faster lookup method to improve performance.,True
4e802e90caa14d95ea56a68faabcd95d2c7702f1,duckstation,The optimization moves the voice key off/on operations outside of the sample loop to reduce redundant checks and improve performance.,True,The optimization strategy involved moving the voice key off/on operations outside the sample loop to reduce redundant checks and improve performance.,True
bb52073645a618ab4d93c8d932fb8faf114c55bc,kmsan,The optimization strategy involves specializing the handling of the XDP_REDIRECT verdict in the AF_XDP zero-copy path to improve throughput for packets directed to user space.,False,"The optimization strategy focuses on enhancing the performance of the XDP_REDIRECT verdict path in the xsk zero-copy path by prioritizing packets directed to user space, which is common in AF_XDP zero-copy scenarios.",False
f0accf683ecf8e5056c08ce927af084ba7e218f0,parallel-n64,"The optimization strategy involves decoding the register specifier `rs` only when necessary, reducing unnecessary operations for NOP instructions.",True,The optimization strategy involves decoding the register specifier `rs` only when necessary to avoid unnecessary operations during NOP instructions.,True
4634c735a8bb4f83b8099928fb12b50ad8df7b88,rocksdb,"The optimization strategy involved updating the `IncreaseParallelism` function to use the newer `max_background_jobs` setting instead of directly configuring `max_background_compactions` or `max_background_flushes`, improving thread utilization and reducing stalls.",False,The optimization strategy involved updating the `IncreaseParallelism` function to use the `max_background_jobs` setting instead of directly setting `max_background_compactions` or `max_background_flushes` to improve performance by reducing stalls.,False
de49613478f78b0f2fc0906de77fa4ff41ae0f7c,openocd-esp32,The optimization avoids unnecessary atomic DAP operations during debug initialization to improve performance.,False,The optimization strategy involved avoiding unnecessary atomic DAP operations to speed up debug initialization.,True
3bcf90c68e4b772fe3f27572e06bf0cc3cf398dd,v8,The optimization strategy eliminates redundant IntPtrOrSmiAdd operations in loop conditions by directly comparing the loop variable with a constant value.,True,The optimization strategy involved avoiding the generation of duplicated `IntPtrOrSmiAdd` operations in the loop's condition to streamline the code.,True
a02d4711263f3d50b6e5617cb1c89aae21a37f79,Vulkan-ValidationLayers,The optimization disables the friendly-name-mapping feature in SPIR-V validation to reduce processing overhead and improve performance.,False,The optimization strategy involved disabling the friendly-name-mapper in SPIR-V validation to improve performance by reducing overhead.,False
7e00ebf786b231b6ea264b3d4b8df6e7a5f0afd4,ngsolve,The optimization strategy involved simplifying or reducing the generality of SIMD constructor implementations to improve performance in non-AVX scenarios.,False,"The optimization strategy involves modifying the SIMD constructor to be less general for non-AVX architectures, likely to reduce overhead and improve performance.",False
0211dda68a4f6531923a2f72d8e8959207f59fba,kmsan,"The optimization strategy involved fixing a bug that prevented the DIM algorithm from updating its baseline sample, ensuring proper decision-making and stabilizing performance.",False,The optimization strategy involved updating the baseline sample after each iteration of the net_dim algorithm to ensure correct comparisons and improve performance.,False
fff033c6536dadb1dbcdd59aa6e563e045874f98,sycl,The optimization strategy involved reducing redundant operations by caching and reusing the last command event in a synchronized queue.,False,The optimization strategy involves reducing the overhead of event synchronization in the Level Zero backend by optimizing the handling of the LastCommandEvent in the synchronized queue.,False
9187dd90a98254d7b40a1e50e95d20e5562565fc,fbthrift,"The optimization avoids unnecessary default constructor calls in `emplace_back_default` by directly constructing objects in place when no allocator is used, reducing move and destructor overhead.",True,"The optimization strategy refactors `emplace_back_default` to avoid the default constructor when the allocator is not used, reducing one move constructor and one destructor call.",True
90d835507581324d0449f1ded4f56a8b16f20bf7,rocksdb,The optimization corrected an incorrect memory address calculation in a prefetch operation to ensure proper byte-level access instead of bit-level access.,False,The optimization strategy corrected the address calculation for prefetching by using the proper byte index instead of the bit index to reduce unnecessary memory access.,True
d5e6ba1ff1df8af3439d1144122f55acf72d118c,scylladb,The optimization strategy skips unnecessary disk reads and hash calculations during repair operations when there are no followers to repair with.,False,The optimization strategy involves skipping unnecessary disk reads and hash calculations in the repair process when there are no followers to repair with.,False
13b39a0c3e11ae44277599dc01512d620197b407,ZeroTierOne,The commit optimizes SQLite performance by tuning its configuration parameters for better efficiency.,False,The commit optimizes SQLite performance by tuning the database configuration and query execution parameters.,False
4704833357a8609e7c42df4f337f938a8e870c08,rocksdb,The optimization strategy involves passing an input string to the WriteBatch constructor by const reference to avoid unnecessary copying of the string data.,True,The optimization strategy involves passing the input string to WriteBatch() by const reference to reduce data copying.,True
cf420cca572b061fdd63587cb90904c641b6e216,llvm-leg,The optimization strategy involves improving block deletion by leveraging knowledge that predecessor blocks do not fall through into branch-only blocks if they are part of a jumptable.,False,The optimization strategy involves improving the deletion of blocks containing only branches by leveraging knowledge that the predecessor block does not fall through into them if it's a jumptable.,False
17731a57daf522c41c2c22755dd5f661f2f1fde4,dolphin-memory-engine,The optimization strategy involved changing a loop variable from a value copy to a const reference to avoid unnecessary copying during iteration.,True,The optimization strategy involved changing a loop variable from a value-based copy to a const reference to avoid unnecessary copying.,True
059c1996017df7a8af791f8855b148d23b9460c2,android_kernel_msm-5.4_nothing_sm7325,"The optimization removes redundant warning messages during heavy load to prevent excessive logging, which improves performance by reducing unnecessary output operations.",False,The optimization strategy involved removing a redundant warning message in the RX polling function to reduce unnecessary output and improve performance under heavy load.,False
1bacbd615ec005b605bd208117b546992527ac07,kram,"The optimization strategy used SIMD (Single Instruction, Multiple Data) instructions to improve the performance of the `decompose_scale` function by processing multiple data points in parallel.",True,"The optimization strategy used SIMD (Single Instruction, Multiple Data) instructions to accelerate the decompose_scale function.",True
6be06310230872c7bfa991c668cc9481ea112af8,SWIFT,The optimization strategy avoids using threadpool parallelization for waiting and unpacking cell proxies to reduce overhead.,False,The optimization strategy involves avoiding the use of threadpool parallelization for waiting and unpacking cell proxies to reduce overhead.,False
0534a2c6be2b00b5f564ffb001ed0e858ff9c237,Server,The optimization strategy replaced a string-splitting operation with a search-based approach to reduce dynamic memory management overhead and improve performance.,True,The optimization strategy involved replacing a string splitting operation with a string search operation to avoid dynamic memory management overhead.,True
2f0aa30425414f3105bc29dd39bfdb40cb684393,android_kernel_oneplus_msm8998,The optimization strategy involved reducing the RC6 timeout value to improve residency during active workloads.,False,The optimization strategy involved lowering the RC6 timeout value to improve RC6 residency during active loads.,False
857e4745c6998c63fa433cf7e0d0e7da6d0d18a7,DragonFlyBSD,The optimization strategy involved correcting the improper override of the sync_port setting in unix domain sockets to eliminate unnecessary netmsg traffic.,False,The optimization strategy involved fixing the improper override of the sync_port setting for unix domain sockets to reduce unnecessary netmsg traffic to netisr threads.,False
0a061b6f9ea8ea10414e04a6a87c14c6b12ad04b,solvespace,The optimization strategy parallelizes the creation of copies in step-and-repeat groups and combines them using unions of equal-sized shells to reduce boolean operation time.,False,The optimization strategy involves creating copies in parallel first and then combining them using unions of equal size shells to reduce the total time spent on boolean operations.,False
1a0cc7cc285e36f6048c984644edd4ee0554d51c,wesnoth,The optimization strategy used is passing a parameter by reference instead of by value to avoid unnecessary copying.,True,The optimization strategy involved changing the parameter passing method from by-value to by-reference to avoid unnecessary copying.,True
069cb27017de6476d47a70fbf144f69200d3e854,android_kernel_oneplus_msm8998,The optimization strategy involved adjusting the packet size in Bluetooth's L2CAP SAR mode to avoid unnecessary fragmentation and improve data packing efficiency.,False,"The optimization strategy involves improving data packing in SAR mode by avoiding unnecessary reduction of PDU size in the Start L2CAP SDU frame, allowing for longer payloads and reducing the number of required I-Frames.",False
2facef3bb66847f546418584a6033187d4dfc1ed,meow_hash,The optimization strategy involved improving short input hashing performance on ARMv8 by likely leveraging architecture-specific instructions or optimizations.,False,The optimization strategy improves short input hashing performance on ARMv8 by leveraging ARMv8-specific instructions or optimizations.,False
67d2fa11f122dfd15f157d59356bcfb69d3acc47,dolphin,"The optimization eliminates unnecessary arithmetic shift operations when the input is a constant zero, as shifting zero always results in zero.",True,"The optimization strategy involves eliminating unnecessary arithmetic shift operations when the input is a constant zero, as shifting zero always results in zero.",True
6302a9fba0778e63379a13946ccdfe0d257ed2d1,libarchive,The optimization avoids unnecessary calls to a read-ahead function when sufficient data is already available.,True,The optimization strategy avoids unnecessary calls to `archive_read_filter_ahead()` when sufficient data is already available.,True
5451b53703a529ff76123b7418fe2d624e122db6,flint,The optimization strategy involved reducing redundant computations and improving the efficiency of coefficient handling in the polynomial addition function.,False,The optimization strategy involved speeding up the `fmpq_poly_add_fmpq` function by improving its implementation to reduce computational overhead.,False
4e506c200bc7f0c59fa1092577c129d9723a1c6e,skia,"The optimization simplifies the implementation of the `Plus` function with anti-aliasing (AA) by reducing computational complexity, achieving a ~25% performance improvement.",False,The optimization strategy involved simplifying the implementation of the Plus operation with anti-aliasing (AA) to achieve a ~25% performance improvement.,False
b4724dbda23aed9148c91fb0cfc5f9052e376bee,BsodSurvivor,The optimization strategy involves improving return slot optimization by notifying memdep when removing memcpy operations to enhance memory dependency analysis.,False,The optimization strategy involves informing the memory dependence analysis (memdep) when removing a memcpy during return slot optimization to ensure correct memory behavior.,False
41a4651af6fd6830bff136ac26597d2ff480df52,v8,The optimization strategy involved expanding the scope of a trace event to include expensive setup operations for more accurate performance accounting.,False,"The optimization strategy involved extending the scope of the ""V8.OptimizeCode"" trace event to include the setup of the OptimizedCompilationJob, ensuring accurate performance measurement of expensive operations.",False
f69071265203edb0084f136b03bd4fcb42f16911,rocksdb,The optimization strategy involved reducing unnecessary operations during the shutdown process of the db_bench tool to improve performance.,False,The optimization strategy involved speeding up the shutdown process of db_bench by modifying the destructor of the Benchmark class.,False
68d506e0d15c0c412142be68ed006c65b641560f,edk2,The optimization strategy involves selecting the NonSmm BSP as the default SMM BSP to potentially improve performance by leveraging a higher-performing core instead of defaulting to Core0.,False,The optimization strategy involves using the NonSmm BSP (Boot Strap Processor) as the default SMM BSP to improve performance by leveraging the processor with the highest performance rather than defaulting to Core0.,False
e5f66a2aa00fa88ba3e0fb004510f0a630881ef1,valgrind-macos,The optimization strategy replaced an inefficient linear algorithm with a logarithmic (4-stage) approach to improve the performance of extracting the most significant bits from a 128-bit value.,False,The optimization strategy replaced a linear algorithm with a logarithmic (4-stage) algorithm to more efficiently concatenate the top bit of each 8-bit lane in a 128-bit value.,True
7bdd67c52a66425d6aee3bbef8af860d4cbbf1f3,NBlood,The optimization strategy reduces unnecessary computations by drawing the rainbow background at a fixed shade and avoiding fullbright colors.,False,"The optimization strategy involved adjusting the drawing parameters for the background 'rainbow' effect to use a specific shade and avoid fullbright colors, reducing unnecessary rendering overhead.",False
5589735763e6fe23039bb5b3dbc35f8472e4c416,mango,The optimization strategy involved adjusting the encode buffer size to improve performance during image encoding.,False,The optimization strategy involved tuning the buffer size used in the encoding process to improve performance.,True
97c9d4c64c870c1eceb1d6264f2457273e6e0738,llvm-leg,The optimization strategy involves enabling post-register allocation scheduling and full anti-dependency breaking to improve performance on embedded PowerPC cores.,False,"The optimization strategy involves enabling post-register allocation scheduling and full anti-dependency breaking on embedded PowerPC cores to improve performance, particularly for floating-point-intensive blocks.",False
2e1fb26b8b26e1dae81af890e3b0ea089218594c,Paddle,The optimization strategy used is to add `static inline` to the `MakeReturnPyObject` function to reduce function call overhead and improve performance by enabling potential compiler optimizations.,True,The optimization strategy involved adding `static inline` to the `MakeReturnPyObject` function to reduce function call overhead and improve performance by inlining the function.,True
bc5d127bd6b1fef4cf9888b92b2f09acea57bff3,magnum,The optimization strategy reduces redundant queries to the Arguments value by caching or restructuring access within the function.,True,The optimization strategy involves reducing unnecessary queries of the Arguments value in the --info output to avoid wasting time.,True
0f3cea8ee8d7e36d342efe396d3ea0912ec090ed,android_kernel_xiaomi_marble,The optimization strategy removes an unnecessary function call during a specific roaming state to prevent incorrect reference counting and associated power/performance issues.,False,"The optimization strategy involved removing a redundant call to `hdd_napi_serialize` during the roam start phase to prevent an imbalance in the boost reference count, thereby addressing power and performance issues.",False
721036c954f346c71fef730230e273301ec6ac54,fastbasic,"The optimization strategy replaces comparisons of the form ""A <= x"" with ""A < x+1"" to potentially improve performance by simplifying or aligning better with low-level instruction handling.",True,The optimization strategy replaces the comparison `A <= x` with `A < x+1` to potentially simplify and speed up the comparison operation.,True
1ed859e90e18384376e3a1ff0cb76f3e9ab11c2d,gui,The optimization strategy involved preallocating the exact size of the output string in `HexStr` to avoid repeated size checks and updates during `push_back` operations.,True,The optimization strategy involved pre-allocating the correct size for the `std::string` in `HexStr` to avoid the overhead of repeated size checks and updates during `push_back` operations.,True
4f2daa7a4f9c7209476f9b51e66db4fb1ebc4ce7,epsilon,The optimization strategy involved reducing unnecessary computations in the `indexFromCumulatedWidth` function by caching or precomputing values to avoid redundant calculations.,True,The optimization strategy involved improving the performance of the `ValuesController::indexFromCumulatedWidth` function by reducing computational overhead through more efficient width calculations.,True
498a84db834a62eef2e5cb2fb85d051c39f89fff,linux-rockchip,"The optimization strategy involves adding specific machines to the DMI table to avoid using a non-functional C2 power state, thereby reducing CPU temperature and improving performance.",False,"The optimization strategy involved adding specific machines to the DMI table for C state anomalies to avoid using a non-functioning C2 power state, thereby improving performance and reducing high CPU temperature.",False
bf6102e7ed8866feba28622eb3b0089812ec5f36,TrinityCore,The optimization avoids unnecessary iterations and redundant function calls by stopping the search for unread mails after finding two and caching the result of `time(NULL)`.,True,The optimization strategy involves reducing unnecessary operations by limiting the search for unread mails after finding two and avoiding repeated calls to `time(NULL)` within a loop.,True
e660f5b372bbb3e4238bc60167c42933c9ff3e67,MonetDB,"The optimization strategy involves conditionally applying a postfix optimizer on joins only when two results are being returned, reducing unnecessary processing.",False,The optimization strategy involves applying the postfix optimizer on joins only when two results are being returned and removing an assertion about argument usage to align with deadcode optimizer behavior.,False
9cd20f3fe045af95a8fe7a12328b21bfd2f3b8bf,selinux-kernel,The optimization strategy avoids reserving memory for highatomic allocations on small systems where the reservation would exceed a reasonable percentage of zone memory.,False,The optimization strategy involves avoiding the reservation of memory for high atomic allocations on small systems where the minimum size for such reserves would be disproportionately large relative to the zone memory.,False
6b893be6e7c383df45ae9cc2dac886d29c74d5f9,poedit,The optimization avoids retrieving and formatting translations known to be empty strings when writing POT files.,False,The optimization strategy involves skipping the retrieval and formatting of empty translations to improve efficiency when writing POT files.,True
dc0d0468e995514e14838189a1e2aee879ace880,avidemux2,"The optimization strategy involved extending fast readback plane conversion to DMA operations, reducing unnecessary data processing overhead.",False,The optimization strategy involves implementing fast readback plane conversion for DMA to improve performance in texture downloading.,False
e8ab1934d9cb3ffebd61097d67bb23439554b265,rocksdb,The optimization strategy involved moving iteration creation work outside of a mutex to reduce contention and improve concurrency.,False,"The optimization strategy involved moving iteration creation works outside of a mutex to reduce contention, leaving only object reference and get operations inside the mutex.",False
98b7beba1ee6fb4ee755812e6c06cfc9084e7430,selinux-kernel,"The optimization ensures that all reserved pages are consistently initialized to MIGRATE_MOVABLE, improving memory management efficiency by reducing fragmentation and ensuring uniform behavior regardless of configuration settings.",False,The optimization strategy involves uniformly initializing all reserved pages to MIGRATE_MOVABLE to ensure consistent memory management behavior regardless of the CONFIG_DEFERRED_STRUCT_PAGE_INIT setting.,False
1a0ad33b16946d4f86f07fb0c64b88050e7dbdd1,3DWorld,"The optimization strategy involved setting the global locale to ""C"" in the object file reader to reduce overhead during string processing and improve load times.",False,The optimization strategy involved setting the global locale to C in the object file reader to improve load times by reducing locale-related overhead.,True
8f2ae965b7ef4f4ddab6110f06388e270723d694,android_kernel_oneplus_msm8998,The optimization strategy involves reading the `tcfg_ptype` variable once to reduce redundant accesses and prepare for the removal of spinlock protection.,False,The optimization strategy involves reading the `tcfg_ptype` variable once to avoid redundant reads and prepare for removing spinlock protection.,True
1dedd881327dc7b5609e49533b7e1aae1ef15e81,ispc,The optimization strategy replaced a vector comparison and mask extraction with direct mask extraction followed by a scalar equality check to improve performance for AVX masks.,False,The optimization strategy replaced a vector equality comparison followed by a movmsk operation with a movmsk operation on both masks followed by a scalar equality comparison to generate better code.,True
0878b351adc46285b651d9d83499511c71cbda3c,v8,The optimization strategy simplifies load/store operations by reducing index-offset combinations to a more efficient canonical form with a direct offset.,True,The optimization strategy involves further normalizing Load/Store operations by reducing the index-offset representation to simplify and potentially improve performance.,True
7797fcc3c9edf77138788ea763ae159edea9d9ec,blender,The optimization strategy removes the ability to animate the node mute property to reduce performance overhead associated with unnecessary animation handling.,False,The optimization strategy involved removing the ability to animate the node mute property to address performance concerns.,False
5082af8f2563848eb84e905cefb744f473de602b,xeus-cling,The optimization strategy involved implementing a more efficient method for appending characters in bulk to reduce overhead.,True,The optimization strategy involves implementing a more efficient method for appending a string of characters in the `xoutput_buffer::xsputn()` function.,True
43b8153c26655a7a00f1584fcb4f511dc5e45fab,gcc,The optimization avoids unnecessary locale object copies and comparisons by checking for the 'L' option and directly comparing with the classic locale before invoking `std::time_put`.,False,The optimization strategy involves avoiding unnecessary locale copies and comparisons by first checking for the 'L' option before performing locale-specific operations in std::format.,True
59fea5bc52848f330f1bce6079df5f6b392d91c3,openmv,The optimization strategy used loop unrolling and direct memory access to improve the speed of UV sub-sampling in JPEG compression.,True,The optimization strategy involved improving the speed of JPEG YUV422/420 UV sub-sampling in the jpeg_compress function.,False
1685b9c0dd4019f09d1290c85dad596198f7650f,kernel-copyleft,The optimization disables a specific hardware feature (cache miss in NDP-BAM) by default to improve performance in the BAM initialization process.,False,The optimization strategy involves disabling the cache miss feature in NDP-BAM by default to improve performance.,False
54c9ceb902a202d919cb19005813218f3f4e9bf1,openmm,The optimization strategy involved restructuring the computation of long-range corrections to reduce redundant calculations and improve efficiency.,False,The optimization strategy involves improving the efficiency of updating long-range correction calculations in the CommonCalcCustomNonbondedForceKernel::execute function.,False
7d95b5a74b307e3e61df87c6e46951f9bd46c936,splatapult,The optimization strategy involved replacing a less efficient sorting algorithm with a 24-bit radix sort and removing an unnecessary barrier to improve performance.,False,The optimization strategy involved using a 24-bit radix sort to improve performance and removing an unnecessary barrier.,False
2649611109db5f9d60b27c6b2b12e78e5ee9bb25,v8,The optimization avoids unnecessary context reads and function calls in the inlined path for JSReceiver arguments in Object::ToObject.,False,The optimization avoids reading the context and calling through from the inlined path in the JSReceiver case to speed up Object::ToObject.,False
cdda76d1c88e2967494cdf65f20e77ecdf47827a,AlphaRTC,The optimization strategy involved reducing the number of iterations or test cases in scenario unittests to significantly decrease runtime while maintaining correctness.,False,The optimization strategy involved reducing the runtime of scenario unit tests by shortening their execution time while ensuring they still pass and maintain correctness.,False
db19310ad106db774f752383fea54c8c3af26ebb,scummvm,"The optimization reduces unnecessary screen updates by checking if the palette is animated before performing updates, thus saving computational resources.",False,"The optimization strategy reduces screen updates when the palette is not animated, improving performance on low-resource systems.",False
483cfe1a6a33d6335b1901581b41040d2d412511,glibc,The optimization strategy replaced a `strcpy` call with `memcpy` to eliminate the need for including `strcpy.S` in the rtld build for debug builds.,False,The optimization strategy involved replacing a `strcpy` call with `memcpy` to avoid the need for including `strcpy.S` in the debug build and to ensure consistent performance across builds.,True
c3c13db346749c3dfe45e167db2129c645377e9e,rocksdb,The optimization strategy involved adding an early exit condition in the MemTable::Get function to prevent unnecessary full memtable scans when the current key does not match the user key.,False,The optimization strategy involved adding an exit condition to avoid a full memtable scan when the current key does not match the user key.,False
2d3c819f95c5b1d53eaecfae2d85a51047fbf6cb,athena,The optimization strategy involved removing an inefficient pragma to improve compilation efficiency and potentially enhance runtime performance.,False,The optimization strategy involved removing an inefficient pragma directive to improve performance.,True
699badd56b4c1472dbab552917842d9587effc5f,v8,"The optimization introduces a fast path for converting UTF-8 ASCII data to UTF-16, reducing unnecessary computations by directly handling ASCII characters without full UTF-8 decoding.",True,The optimization strategy involves adding a fast path for converting UTF-8 encoded ASCII characters to UTF-16 to improve performance.,True
280743051a035e3ec678047651e2dc07ac08751e,mistserver,The optimization strategy involved reducing CPU usage by avoiding unnecessary updates to the end time of fast-playing recordings.,False,The optimization strategy involved reducing CPU usage by adjusting the handling of dynamic end times in fast-playing recordings to avoid unnecessary processing.,False
4c9edd9f1956aa133b71aeabc878fef9ba4b1c30,qrack,The optimization strategy used is to reduce redundant calculations by caching and reusing results within the function.,True,The optimization strategy involved replacing a value-based comparison with a reference-based comparison to reduce copy overhead in the IS_SAME function.,True
f4140ecc0c78d3d89f4e2459105e3ce3a1ab3ce1,Pikafish,The optimization strategy involves adding a compiler-specific hack to prevent the Intel compiler from optimizing away a prefetching operation.,False,The optimization strategy involves using a hack to prevent the Intel compiler from optimizing away GCC built-in prefetching calls.,False
0a9dec60b58cd63aaa7048d0d348b93187f5aa51,rockbox,The optimization strategy ensures the CPU is unboosted while stopping playback to reduce unnecessary resource usage.,False,The optimization strategy involves unboosting the CPU during playback stop to reduce power consumption and improve efficiency.,False
dbb8f588c7ac5c6c4586804c072c87de730ef00c,dolphin,"The optimization avoids materializing zero in a register by directly using the `neg` instruction for the `a == 0` case, reducing unnecessary operations.",True,"The optimization strategy avoids materializing zero in a register by explicitly handling the `a == 0` case, reducing unnecessary instructions.",True
5768402fd9c6e872252b5268ad85e3fbae4fe26b,kmsan,"The optimization strategy involves using high-order memory allocations for AUX buffers to reduce the overhead of fetching page addresses at boundaries, improving performance in scenarios like Intel PT on Atom CPUs.",False,The optimization strategy involves using high-order memory allocations for AUX buffers to reduce runtime penalty by minimizing the need to fetch the next page's address at every page boundary.,False
f3530f26f8e9869e6e8c3370cf6f61330774fe2b,kmsan,"The optimization strategy involves conditionally triggering DMA transfers only when the data size exceeds a threshold (4 bytes), reducing overhead for smaller transfers.",False,"The optimization strategy involves triggering DMA transfers only when more than 4 bytes need to be transferred, as the overhead of DMA preparation is negligible above this threshold and indirect transfers provide better throughput below it.",False
3fe6a63b5dbdc0864f01d3171046af03d34ee747,android_kernel_brcm_rpi,The optimization strategy involves checking the quota exceeded flag early to avoid unnecessary ACL list traversal in a testing/fuzzing environment.,False,The optimization strategy involves checking the TOMOYO_DIF_QUOTA_WARNED flag early in the `tomoyo_domain_quota_is_ok()` function to avoid unnecessary traversal of the ACL list when the quota is already exceeded.,True
8c92bb3441c628fe87ccf4a946b1c8b14cb0a0d2,coreutils,"The optimization strategy reinstates a previous commit to disable unnecessary file capabilities checking, reducing overhead in the `print_color_indicator` function.",False,The optimization strategy involved reinstating a previous commit that disabled file capabilities checking to improve performance.,False
61ba83b75b6cf3d9b11069cc78a60aeb355d9785,KeyDB,The optimization strategy used is to replace multiple string creation operations with a single `sdsnewlen()` call to reduce overhead and improve performance.,True,The optimization strategy involves replacing multiple buffer creation steps with a single `sdsnewlen()` call to simplify and speed up reply buffer creation in `luaRedisGenericCommand()`.,True
51a4843aff53901e1ee08b7623b59cf0dcf2a43a,tensorflow,The optimization strategy replaces the non-short-circuiting operator& with the short-circuiting operator&& to improve performance by avoiding unnecessary evaluations.,True,The optimization strategy involves replacing the non-short-circuiting `operator&` with the short-circuiting `operator&&` to improve performance by avoiding unnecessary evaluations.,True
b16117c368ad4e6d004ac912549b2c6ed06731a5,llvm-leg,The optimization strategy delays inlining for small functions with linkonce-ODR linkage to improve performance by avoiding unnecessary code bloat when inlining is not profitable.,False,"The optimization strategy involves delaying inlining for functions that are small enough to be inlined themselves, specifically extending this delay to include linkonce-ODR functions (common in C++ inline and templated functions) to avoid unnecessary code pessimization.",False
cf7ee570bd0c6c40c116d9b12df2286bbee9549e,Floorp,The optimization strategy involved reserving space in a vector to prevent repeated reallocations during growth.,True,The optimization strategy involved reserving space in the properties vector to avoid costly vector growth during iteration.,True
29f571264da1e88ec3eb0612643b63accb966be1,MoarVM,The optimization strategy removes unnecessary OSR (On-Stack Replacement) point instructions during the optimization phase to reduce overhead.,False,The optimization strategy involved removing osrpoint instructions during the optimization process to improve performance.,True
266fe63f417564a5626810e94b9285a283174a16,beetle-psx-libretro,The optimization strategy involved replacing a less efficient time calculation method with a performance counter for more efficient time delta calculations.,False,"The optimization strategy involves using a performance counter to calculate time deltas, which is more efficient than the previous method.",True
fa2c15128485f4d7207b9b8827d147573061738a,orx,The optimization strategy involved simplifying the logic in orxConfig_IsInheritedValue() to reduce unnecessary computations and improve performance by directly returning results based on conditional checks.,True,The optimization strategy involved reducing redundant string comparisons by checking the length of strings before performing the comparison.,True
618671dc7c20941921d7170666a119ed5009e43d,ewig,The optimization strategy involved adopting the new `immer::copy` function to enhance performance by leveraging its improved implementation.,True,The optimization strategy involved using the `immer::copy` function to improve performance by leveraging a more efficient copying mechanism.,True
2cac4ab6bc7248a9f3a826002c679165434ba92a,uarch-configure,"The optimization strategy involved updating CPU detection logic to include newer CPUIDs, potentially improving the efficiency of prefetch disabling on supported processors.",False,The optimization strategy involved updating CPU detection logic to include newer CPUIDs for better prefetch disable functionality.,False
185d4db0810b1ca46e840aad5c62c206bda63177,ppsspp,The optimization ensures proper synchronization of SIMD register writes before transposing to avoid incorrect data propagation.,False,The optimization ensures proper write-back of a matrix before transposing it to avoid incorrect results.,False
bc67d0dc16e0505dfcb6111186aba31377a6b1be,Pixelix,The optimization strategy involved moving member initialization to the constructor's initialization list to reduce unnecessary default constructions and assignments.,True,The optimization strategy involves moving variable initialization to the initialization list to improve performance.,True
b2011f870be4a78aac8561319c7c3944cd92cedf,clang,The optimization strategy involved reducing the size of bitfields in a data structure to conserve memory space for the MSVC ABI.,False,The optimization strategy involved tightening the bitfield types to conserve memory space for the MSVC ABI.,True
2ae9e2224800777de8f893e733ab7df6e3986674,ClickHouse,The optimization avoids unnecessary memory copying by directly writing compressed data to the buffer.,True,The optimization strategy avoids unnecessary memory copying in the `CompressedWriteBuffer::nextImpl` function by improving the handling of compressed data.,True
557990cad33f1b06a1e2a416231d79590237dd2e,libevent,The optimization strategy used a mathematical transformation to replace an expensive modulo operation with a cheaper equivalent expression.,True,The optimization strategy involved changing the calculation of `2**32 % upper_bound` to `-upper_bound % upper_bound` to improve performance in the `arc4random_uniform` function.,True
ddc8a443125b3006d75b3bc424f9793952d3d7eb,FastDoom,The optimization strategy used is to reduce redundant calculations by caching and reusing results within the function.,True,The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the P_CrossSubsector function.,True
621561cdf37057d45e38cf1b4404e5de870b1683,ffmpeg,"The optimization skips chroma handling when there is no coded chroma, reducing unnecessary computations.",False,"The optimization strategy involves skipping chroma handling when there is no coded chroma, reducing unnecessary processing.",False
e5696f36ba739d188bed53ec4ed431769089d945,simc,The optimization strategy involved reducing unnecessary computations in the `available_targets` function by improving the logic for selecting valid targets.,False,The optimization strategy involved reducing the number of target checks in the Fire Nova ability by leveraging existing target data to avoid redundant calculations.,False
b86875b94424de60c259d87ce78ddde5b1d9cbc1,cheribsd,The optimization strategy fixes the block count to 2 when setting block size to reduce latency for smaller block sizes.,False,The optimization strategy involves fixing the block count to 2 when setting the block size to reduce latency with smaller block sizes.,False
35ae1da16c6aab293adbe1e4eecba624006a085c,blender,"The optimization avoids per-vertex custom-data lookups and exits early when a face with a mask vertex is found, reducing unnecessary computations.",False,The optimization avoids per-vertex custom-data lookup and breaks early once a face has a mask vertex to reduce unnecessary computations.,True
ac9f18274676baab2dc90c6f9431738c6e9c17d5,v8,The optimization avoids using register allocation hints from deferred blocks to prevent unnecessary register moves on the hot path.,False,The optimization strategy involves prioritizing hints from operands in non-deferred blocks to avoid unnecessary register moves on the hot path.,False
14d189f7875b7def6f9745bfd20527a0fce19a44,qtbase,The optimization strategy used is replacing raw `std::shared_ptr` construction with `std::make_shared` to reduce memory allocation overhead by co-locating the control block and the managed object.,True,"The optimization strategy used is replacing `std::shared_ptr` construction with `std::make_shared` to co-locate the control block and the tracked object in a single memory allocation, improving efficiency.",True
23aac68805ad1b509a84989a78ddde083f41cee9,qrack,"The commit re-enables a previously disabled optimization in the QUnit class, specifically targeting phase application logic to improve performance.",False,"The commit restores previously disabled optimization code in the QUnit::ApplyAntiControlledSinglePhase function, likely re-enabling a performance-enhancing technique.",False
93c27871936c797380aef9d47a969c088edb0bff,BsodSurvivor,"The optimization removes a flag check and modification inside a loop, assuming the control flow remains unaffected and no iteration restarts occur.",False,"The optimization strategy involved removing a redundant dominator tree update (`ModifiedDT`) from a loop that does not modify control flow or restart iterations, thereby reducing unnecessary computations.",True
790d6bda3902b3dd65173333eb94c00bac361e58,velox,The optimization strategy reduced the size of the input dataset for a test to decrease its runtime while maintaining coverage.,False,The optimization strategy involved reducing the input dataset size in a test to achieve the same coverage while significantly decreasing execution time.,False
1d7912955b3abc434d9d0e6aa73b2c142df9f0b8,rockbox,The optimization strategy eliminates redundant memory accesses within a loop to improve performance.,True,The optimization strategy involved reducing unnecessary memory accesses within a loop to achieve a slight speedup.,True
b3cb2aa8f2bab1efa6f962495328e42eb6ce827a,RVVM,The optimization strategy used intrinsic functions to improve the performance of the `bit_next_pow2` function by leveraging low-level hardware instructions for faster computation.,True,The optimization strategy used involves replacing a custom implementation of finding the next power of two with intrinsic functions to leverage hardware-level optimizations.,True
fb53f12ecb5abe9b1886c8a1a67e3915a2b23548,monte-carlo-ray-tracer,The optimization strategy involved restructuring the sphere intersection calculations to reduce redundant computations and improve efficiency.,True,The optimization strategy involved improving the performance of sphere intersection calculations by reducing computational overhead through more efficient mathematical operations.,True
b759fc924af554dcaad7f2c2613e6123bbf7bbbb,QGIS,The optimization strategy involved preparing expressions in advance to reduce redundant calculations during field computations in the attribute table dialog.,False,The optimization strategy involved preparing expressions to expedite field calculations in the attribute table dialog.,False
8f86d9f0190576fbf6c65fd82bb49122bfe182f2,perfetto,The optimization strategy involved modifying the trace configuration to reduce the computational overhead during fuzzing by limiting unnecessary operations.,False,The optimization strategy involved modifying the trace configuration to improve the speed of the fuzzer.,False
4dacbf7a9d5aed35249944ed95d3d90886b51c09,SPMC,"The optimization strategy reduces memory bandwidth pressure by implementing a more efficient handling of 1080p content, likely through improved data processing or reduced redundant operations.",False,The optimization strategy involved reducing memory bandwidth pressure specifically for 1080p content by modifying the video codec handling in the iOS platform.,False
a13c61bb149dc179b7b4f137cd2ea794f248d50d,DSI-Studio,The optimization strategy involved restructuring the loop to minimize redundant computations and improve iteration efficiency.,True,The optimization strategy involved improving the efficiency of the QSDR reconstruction process by reducing redundant computations and streamlining data handling.,False
1bc36b6426ae49139e9f56491db76b95921454d7,android_kernel_oneplus_msm8998,"The optimization strategy expands the scope of background writeback to include all dirty inodes, improving efficiency by avoiding the exclusion of newly dirtied inodes during prolonged operations.",False,"The optimization strategy involves modifying the background writeback logic to include all dirty inodes, rather than excluding newly dirtied ones, to improve efficiency and avoid livelock.",False
8610b0b355b56c87b9326a71beb21934b15dd17d,wget-lua,The optimization strategy involved reducing unnecessary memory allocations by reusing existing variables or structures within the `main` function.,True,The optimization strategy involved reducing memory allocations in the main function to improve performance.,True
7f985575b0900e4efdcb06bd8e504c5ac10dfc2e,hhvm,The optimization strategy involved improving the efficiency of string replacement operations by reducing unnecessary computations or memory usage in the `str_replace` function.,True,"The optimization strategy involved improving the performance of the `str_replace(string, string, string)` function, likely by reducing overhead or improving algorithmic efficiency.",True
c23f397cc4e440742b2b27690694c9346f638800,android_kernel_oneplus_msm8998,"The optimization re-enables the ""load program parameter"" facility bit to restore a performance measurement helper instruction for KVM on s390 architecture.",False,"The optimization strategy involved re-enabling the ""load program parameter"" facility bit to restore the performance measurement helper instruction functionality in KVM.",False
0b26a15b6223e490a8553cbf5b4be0ebb28c24b8,gtk,The optimization strategy involved reverting to using a hash table for index lookups to improve performance.,False,The optimization strategy involved reverting to using a hash table for index lookup to restore performance lost in a previous commit.,False
3a6b5236550c60fee371dbeaff43b61931e208ad,Floorp,The optimization strategy involved simplifying or removing unnecessary greater-than (ugt) and less-than (ult) comparisons in the ExprFilter to improve performance.,True,The optimization strategy involved adding trivial optimizations for unsigned greater-than (ugt) and unsigned less-than (ult) operations in the ExprFilter::ins2 function.,True
f54bb7743a5e0a0242b3d577a997cab4100c5137,BsodSurvivor,The optimization strategy involves simplifying array-out-of-bounds assumptions by dropping existentially quantified dimensions to reduce compile-time complexity.,False,The optimization strategy involves dropping existentially quantified dimensions in array-out-of-bounds assumptions to simplify integer sets and reduce compile time.,False
5e5dda81a0dfb82de1757ab878d9ffd2339c9b2a,kmsan,The optimization avoids unnecessary MMU notifier calls during page migration by initializing the `mmu_notifier_range` with specific event types and fields to allow device drivers to handle invalidations more efficiently.,False,"The optimization strategy involves allowing device drivers to optimize invalidation by initializing the mmu notifier range with specific event types, reducing redundant calls during page migration.",False
917a490193251ae2d46f88cb467e34eb20855ec6,pstack,The optimization strategy involved restructuring the logic for finding string addresses to reduce unnecessary computations and improve efficiency.,False,"The optimization strategy involved improving the efficiency of finding string addresses by refactoring the original inefficient implementation in the ""canal -S"" command.",False
1535e9dbb6d66647f3f64d307b07abd41c8973c5,spdk,The optimization strategy reduces performance overhead by lowering the frequency of socket polling from constant to every 1ms.,False,The optimization strategy involves reducing the polling frequency of the libvfio-user socket from constant polling to every 1ms to improve performance.,True
b9d6ba2aa042286f87ab02efae944a54e9ef95c3,ispc,"The optimization strategy involves setting target info consistently to enable the SROA pass to eliminate unnecessary allocas, loads, and stores, improving performance.",False,"The optimization strategy involves always setting target information to enable the SROA (Scalar Replacement of Aggregates) pass to eliminate unnecessary memory allocations and operations, improving performance.",True
464688ab6ddb82db22ea9b934ddea192478e4535,gperftools,"The optimization removes a ""fast path allowed check"" in the free code path to reduce conditional branching and improve performance.",False,"The optimization strategy involved removing a ""fast path allowed check"" to speed up the free code path.",False
6b67db1f230512d757d5ffa0e09d3d8283354580,mongo,The optimization strategy involved reducing memory allocations by reusing existing data structures in the `findOne` query execution.,False,The optimization strategy reduces memory usage in the `findOne` query by minimizing unnecessary data allocations and improving memory management within the `runQuery` function.,False
14a6f862dce4ed1db61279d2912f99bdf1b63a6d,vg,The optimization strategy involved adopting a new bin finding interface to improve the speed of IndexedVG by reducing unnecessary computations.,False,The optimization strategy involved adopting a new bin finding interface to improve the performance of IndexedVG.,False
9aa67226223b0c5239c910bc5fa3aa061c12784d,wesnoth,The optimization strategy eliminates unnecessary function calls (SDL_GetTicks() and game_display_->delay(10)) when the delay is zero to reduce overhead.,True,The optimization strategy involves skipping unnecessary calls to `SDL_GetTicks()` and `game_display_->delay(10)` when the delay value is 0.,True
a89c91020c4860adcec46458a1e8fb9b1297767d,BsodSurvivor,The optimization strategy involved replacing a potentially N^2 algorithm with a more efficient approach in the symbol table reader.,False,The optimization strategy involved removing a potentially N^2 algorithm from the symbol table reader to improve performance.,True
67d1a71aa4d55c2f82cc9b70f5afc2016e3daf69,sycl,The optimization avoids creating an iterator for simple insertions into an unbranched tree to reduce overhead.,True,The optimization strategy speeds up insertions into an unbranched tree by avoiding the creation of an iterator.,True
0820dc0c8434432d7b1f7740f5561db7c62db9e6,ClickHouse,The optimization strategy involved restructuring the sorting heap to reduce unnecessary comparisons during element insertion and extraction.,True,The optimization strategy involved improving the efficiency of the sorting heap by reducing unnecessary comparisons and swaps in the heap operations.,True
183c062c51c7e7663752b94ac399c830e4cb3c44,linux-rockchip,The optimization strategy moves an invariant bug check out of a loop to eliminate redundant atomic reads and improve performance.,True,The optimization strategy involved moving an invariant bug check outside of a loop to avoid redundant atomic reads and improve performance.,True
c62038f98cf1636b7ffe7db61e589596cb96aeff,v8,"The optimization strategy involved reverting a change that attempted to box Float64 values as Smis, which was found to regress performance on specific benchmarks.",False,The optimization strategy involved reverting a change that attempted to box Float64s as Smis to avoid performance regressions in certain benchmarks.,False
3d8ee770a03559fa82b14f02e9759430cb030bae,tensorflow,The optimization strategy removes unnecessary duplication of single-use argument loads to improve performance by avoiding deoptimization of hoisted loads.,False,The optimization strategy involves removing the deoptimization of hoisted loads out of loops to improve performance by allowing single-use argument loads to remain in the entry block.,False
22f547b544b625a98ac13a10bff584dae22f03cd,Floorp,The optimization strategy involved improving string allocation by reducing unnecessary memory overhead in the `sizeof` function.,True,The optimization strategy involved improving string allocation to reduce overhead and enhance performance.,True
3a2cd370802db61dc3060b81d613444363cf0371,Pikafish,The optimization strategy skips move scoring and sorting in the perft function to reduce computational overhead and significantly improve performance.,False,The optimization strategy involves skipping move scoring and sorting in the `perft` function to significantly increase speed.,False
a73744da1125385bf240fa4a43ba5ae9e135c8bc,dealii,The optimization strategy involved restructuring the `renumber_dofs` function to reduce redundant computations and improve cache locality during parallel triangulation processing.,False,The optimization strategy involved improving the performance of the `renumber_dofs` function for parallel triangulation by reducing overhead and enhancing efficiency in the renumbering process.,False
4864f3c184d371520092669a693fa2ade9e7f58c,lzsa,The optimization strategy involved restructuring the loop to reduce unnecessary computations during the compression process.,True,The optimization strategy involved improving the compression speed of LZSA1 by enhancing the forward optimization algorithm in the `lzsa_optimize_forward_v1` function.,False
b8188e1e2f71483e785831257e2e9f41c44fa8ca,scylladb,The optimization avoids unnecessary copying of topology and endpoint arrays by using references instead of copies in the batchlog code.,True,"The optimization strategy avoids copying a topology and endpoint array by using references instead, reducing overhead in the batchlog endpoint choosing code.",True
da0b10ca058ff87b6fba1a5db543196be7001f15,CControl,The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency in the `size` function.,True,The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.,True
19dba8bf9f4c87278b8e6e2133ebc39f4edb6592,uboot-imx,The optimization strategy involved enabling the I-Cache to reduce boot time by improving instruction fetch efficiency.,False,The optimization strategy involved enabling the I-Cache to reduce boot time by improving instruction fetch performance.,False
e9318edf30ea84e65d3beb096ca02946d2b10d00,DeepRec,"The optimization avoids vectorization for row reduction on P100 GPUs when the tile size is imperfect or the data type exceeds 32 bits, reducing unnecessary computation overhead.",False,The optimization strategy involves avoiding vectorization on P100 GPUs for row reduction when the tile size does not fit perfectly and the data type exceeds 32 bits.,False
428ecf89d76422312025f06b5575a5d5ce747e00,sysrepo,The optimization avoids unnecessary locks and function execution by skipping discard operations when there are no stored operational changes for a connection.,False,The optimization strategy involves skipping redundant operations and locks when there are no stored operational changes for a connection.,True
1bee2d5e08208b01e496efa55c36c28422eaf35f,zstd,The optimization strategy involved reducing unnecessary memory operations by reordering and minimizing data movement within the decompression loop.,True,The optimization strategy involved reducing redundant memory access and improving cache efficiency by reordering operations in the decompression sequence.,True
d48d47e68365990d7c66782225f7fddf7efde86e,gstreamer,The optimization reduces the frequency of expensive `memcmp` calls by first checking the first byte and processes data in larger chunks (1024 bytes) instead of one byte at a time to minimize iteration overhead.,False,The optimization strategy involved reducing the frequency of expensive `memcmp` calls by checking the first byte first and iterating over data in larger chunks of 1024 bytes instead of one byte at a time.,True
449455cf4b2038fb5385946e8e6d2006d9480fb5,notcurses,The optimization strategy involved simplifying the logic in the `channels_blend` function to reduce unnecessary operations and improve execution speed.,False,The optimization strategy involved micro-optimizing the top half of the `channels_blend()` function to improve performance.,False
0a36463f4ca287e4d4ac15580c0aae5b23619212,kmsan,"The optimization avoids declaring and copying `bvec_iter` unless FEC is both configured and enabled for the verity device, reducing unnecessary overhead.",False,"The optimization strategy involves conditionally declaring and copying a variable only when a specific configuration (CONFIG_DM_VERITY_FEC) is enabled, reducing unnecessary operations when it is not.",True
6c920dcb433864a31bd36537d9bc3dfb6c84a5b9,DiligentFX,The optimization strategy involved reducing redundant state changes in the rendering pipeline by caching and reusing previously set states.,True,The optimization strategy involved reducing the overhead of copying objects by changing value-based loop iteration to reference-based iteration in the `HnRenderPass::RenderPendingDrawItems` function.,True
8714c250029e1dcdd2413318c8dc0d0c0f002f57,gcc-xtensa,"The optimization strategy corrects the `reg_live_length` of a register after it has been decreased to ensure it is not obviously too small, improving register allocation accuracy.",False,The optimization strategy involves correcting the `reg_live_length` of `sregno` after decreasing it to ensure it is not set to an obviously too small value.,True
bdf262379fb8b01ae42594b08466a7fe738031b1,mame2003-plus-libretro,The optimization strategy involved replacing a series of individual bit-shift operations with a more efficient combined operation to improve performance.,True,The optimization strategy involved improving the performance of the WRITE16_HANDLER function by implementing a multi32 speedup technique.,False
735ab91f3c6260733b71f0dfab29a99c5805a5c6,ceph,The optimization strategy involves adding an early return check for zero-length reads to avoid unnecessary processing and potential assertion failures.,True,The optimization strategy involves adding an early return in the `Client::_read_async` function when the length parameter is 0 to avoid unnecessary processing.,True
d803387a7f3faeb50c126f9ec065a86cb0dc7f70,dpdk,The optimization strategy involved adding prefetch instructions for the mbuf pool pointer and reordering prefetch timing to reduce cache misses during slow-path TX operations.,False,The optimization strategy involved adding prefetch instructions for the second cache line of the mbuf pool pointer and moving the prefetch earlier to reduce cache misses during slow-path TX processing.,True
192ad80d14ee5478e23fe4b7bed55f203748aec3,android_kernel_oneplus_msm8998,The optimization strategy reduces the clock gating timeout from 150ms to 50ms to save power without impacting storage performance benchmark numbers.,False,The optimization strategy involved reducing the clock gating timeout from 150ms to 50ms to save power without impacting storage performance benchmarks.,False
3bac7e845b2a5bd877c60e16de4e3186b510dbfc,wireshark,The optimization strategy involved reducing unnecessary safety checks by tailoring the checks to specific cases (master-list and recycler) to improve performance.,False,"The optimization strategy involved reducing unnecessary safety checks by tailoring them specifically to the master-list and recycler cases, improving performance by avoiding redundant operations.",False
48743154a35f5751796d39ebceb615453abac8de,envoy,The optimization avoids unnecessary string construction in `RepeatedPtrUtil::debugString` when logging is not at the debug level.,True,The optimization strategy involves reducing the overhead of `RepeatedPtrUtil::debugString` by minimizing its usage at non-debug log levels.,True
58db2c1f94451d7a352d2ad1a1b1e9732f4f0a11,kernel-copyleft,"The optimization avoids unnecessary flushing of inactive endpoints by checking for pending requests before flushing, reducing processing time during USB disconnect/reset operations.",False,The optimization strategy involves avoiding unnecessary flushing of inactive USB endpoints to reduce processing time during disconnect/reset operations.,False
25369cfa2b33606cff971226fb4182109ff3646b,llvm-leg,The optimization strategy involved improving register handling efficiency by reducing unnecessary operations or checks when printing operands.,False,The optimization strategy involves improving the efficiency of handling registers in the X86AsmPrinter.cpp file.,True
a42b834b70de833cc87d7ba9eecc704903c19754,MuseScore,The optimization strategy involved improving the efficiency of string comparisons in the `searchTemplateForInstrNameList` function by reducing redundant operations.,False,The optimization strategy involved improving the search algorithm in the `searchTemplateForInstrNameList` function to enhance score opening speed.,False
3fe45d9897459da9c78263ae709e5c611e622243,bind9,The optimization strategy involved restructuring length checks to leverage new buffer API macros for improved efficiency.,True,The optimization strategy involves leveraging new buffer API macros to perform length checks more efficiently in the `dns_name_fromwire` function.,True
b5b4a2f76b5de723606c0e8f30eb0f930d4a3c21,BsodSurvivor,The optimization strategy involved replacing less efficient map operations with more efficient ones to improve performance.,True,The optimization strategy involved using more efficient map operations to improve performance and fixing a bug related to handling multiple memory operands.,True
4f6aaea1e88a092a143e37a7b99949800c320f35,ppsspp,The optimization strategy corrected a thread dependency issue in relocations by ensuring proper ordering of value access before relocation.,False,"The optimization strategy involved correcting thread dependency in relocations to ensure proper value access before relocation, maintaining performance benefits.",False
10101ad997117b63a4c854c409f9d645324cfc0b,HiGHS,The optimization avoids unnecessary copying of arguments and reduces redundant lookups in the variables array to improve the performance of the `getvarbyname` function.,True,The optimization strategy avoids copying the argument and reduces the number of lookups in the variables array to improve performance.,True
4c263649bbfc2e29de97d09f1b13bb3050341703,rondb,"The optimization strategy ensures that the range optimizer only considers indexes from the table being analyzed in the ORDER BY clause, avoiding unnecessary checks on unrelated tables.",False,The optimization strategy involves checking if the fields in the ORDER BY clause belong to the table being analyzed to avoid unnecessary range optimizer checks on unrelated tables.,False
f09606cc68bd28abb8229d1e5c1ad6fe351cf4f7,blender,The optimization avoids redundant calls to `filelist_cache_previews_push` by ensuring it is only invoked once when `i` is zero.,False,"The optimization strategy involved avoiding redundant calls to `filelist_cache_previews_push` when `i` is zero, ensuring the preview is computed only once instead of twice.",True
c817b4779daf6b58a25bfb194a156e3215177574,dolphin,The optimization eliminates an unnecessary zero-initialization and directly loads the value into the target register.,True,The optimization strategy involved removing an unnecessary zero initialization and directly loading the value into the target register to reduce redundant instructions.,True
05f0492a035e530c5aa69b75d109bab5c184e542,KeyDB,The optimization strategy avoids unnecessary iterations in the inner loop of `activeExpireCycle()` by skipping processing when there are no keys with expiration set.,False,The optimization strategy involved reducing unnecessary checks in the inner loop of the `activeExpireCycle()` function for cases where no keys are set to expire.,True
b0b7a7d24b66109a940d09d8d2dcf513e4eaf3a1,kmsan,The optimization strategy involves rechecking the task work (tw) list for emptiness after flushing completions to handle newly queued linked requests efficiently.,False,The optimization strategy involves rechecking the task work list for emptiness after flushing completions to avoid unnecessary processing.,False
d8734c00e03a11a838ef9cbe102fe0a2dc274758,neomutt,The optimization removes redundant `lstat()` calls after a successful `link()` operation to reduce unnecessary file system overhead.,False,"The optimization strategy involved removing redundant `lstat()` calls after a successful `link()` operation to reduce unnecessary performance overhead, especially over NFS.",True
240fd2f32d16b58473e16a4eff51f16a11a3fd6d,xla,The commit likely involved micro-optimizations such as reducing unnecessary computations or improving loop efficiency in the `LaunchFunc` function.,True,"The commit implements micro performance optimizations in the `LaunchFunc` function, likely involving low-level code improvements such as reducing overhead or improving efficiency in function execution.",True
d5d16c21623c97a561ae818eb9c9db4a0c3eaf05,ompi,The optimization strategy involved moving a conditional check outside of a loop to avoid redundant evaluations during each iteration.,True,The optimization strategy involved moving an if-condition outside of a for-loop to reduce redundant evaluations.,True
4dad9c6c05921cf98c9ee59a5f28358496912433,redot-engine,The optimization strategy involved reducing redundant computations and memory allocations within the `create_image_from_utf8_buffer` function by reusing existing resources and simplifying logic.,True,The optimization strategy involved reducing redundant memory allocations and improving data handling efficiency in the SVG image loading process.,True
a1075477c351ba010b11721e89b4f6c96334377a,OpenBLAS,The optimization strategy disables multithreading for small workloads in the ?TRTRI function to reduce overhead and improve performance.,False,The optimization strategy involves disabling multithreading in the ?TRTRI function for small workloads to avoid overhead and improve performance.,False
6543e55efad7ded7f5a0e0dc50786c966aea6b98,hdf5,The optimization strategy eliminates a redundant function call to H5T_detect_class() within the H5T_conv_vlen function to reduce unnecessary computations.,True,The optimization strategy involved eliminating a duplicated call to the function H5T_detect_class() to reduce redundant computations.,True
02d2e8fcb48f1a9e2b435ccc75e3e2e95982550d,linux-rockchip,"The optimization allows zero bytesused for Rockchip UVC to avoid unnecessary data processing, improving performance for 1080P@MJPG preview.",False,"The optimization strategy involves using a flag to allow zero `bytesused` values for Rockchip platforms, enabling faster previews by avoiding unnecessary data processing.",False
f82e693a31d07ab8b391888ff60eb7ff5b95bd13,rocksdb,"The optimization strategy involves skipping the execution of a function that clears vectors if they are already empty, thereby avoiding unnecessary CPU usage.",False,"The optimization strategy involves skipping the `Invalidate` function call if the vectors it clears are already empty, saving CPU cycles.",True
ff9004d0891974fed7dd22ef0eed0627b9277078,tengine,The optimization strategy involved restructuring the loop in ngx_http_upstream_init_round_robin() to reduce redundant computations and improve iteration efficiency.,True,The optimization strategy involved improving the loop efficiency in the `ngx_http_upstream_init_round_robin()` function to reduce unnecessary iterations.,True
73808d0fd26b3d3f0f44cc7c469ad1d3c1b570b8,kmsan,The optimization strategy avoids potential efficiency penalties by setting the default minimum performance level to the lowest nonlinear performance instead of the absolute lowest performance.,False,The optimization strategy involves initializing the `policy->min` value to the lowest nonlinear performance level to avoid efficiency penalties.,False
70d07e285c3848def689c481bfa39c9bdfa65614,vengi,The optimization strategy involved reducing redundant data copying and improving index handling during GLTF loading.,False,The optimization strategy involved improving the loading of GLTF files by optimizing the copying of GLTF indices.,False
a234e4c2009b08039d0698cbbcc8595a1f04a615,lime3ds-archive,The optimization replaced `std::min()` with a ternary operator to leverage compiler-level optimizations for improved performance.,True,The optimization strategy involved replacing the ternary operator with `std::min()` to leverage compiler optimizations and improve performance.,True
85868b2c4cf39e468b960b0f7a09cd5c03f7df2b,darktable,The optimization strategy involved improving vectorization by copying buffers earlier to reduce I/O operations and enhance data locality.,True,The optimization strategy involves improving vectorization by copying buffers early to reduce I/O and enhance data locality.,True
2674cc3efa7f7c25a0b47b6af3b65aacea0d4d95,Koivisto,The optimization strategy involved fine-tuning the threat pruning logic to improve search efficiency by reducing unnecessary evaluations.,False,The optimization strategy involved fine-tuning the threat pruning mechanism in the search algorithm to improve performance.,False
e94eea4527f2d7de82a6bf3303177977011e5dd9,rocksdb,The optimization removes an unnecessary string resize operation in WriteBatch::Clear to avoid redundant memory reallocations.,False,The optimization strategy involved removing an unnecessary string resize operation in WriteBatch::Clear to avoid re-allocation overhead during merged write batches.,True
0464e115aea5d09f95c7d63b48876a22b565230d,SPMC,The optimization strategy involved replacing a push_back operation with emplace_back to reduce overhead by constructing elements in-place.,True,The optimization strategy used is replacing `std::list::push_back()` with `std::list::emplace_back()` to reduce overhead by constructing elements in-place.,True
0012ba6a87f1286164160b6d14516e4bad0f63c3,haiku,The optimization reduces the load difference threshold for rebalancing in low latency mode to improve scheduler responsiveness.,False,The optimization strategy involved reducing the load difference threshold for rebalancing in low latency mode to improve load distribution across cores.,False
5b2f6d9cd50b1c8909326c7175aef288a9915f33,git,The optimization strategy reduces file system calls by reading the file directly and checking `errno` instead of performing a separate existence check.,True,The optimization strategy reduces redundant file system access by reading the file directly and checking `errno` for existence instead of performing a separate existence check.,True
65e2150501b87e6ce00fae4e3f056444f39462fd,Stockfish,The optimization refines the condition for performing deeper searches after Late Move Reductions (LMR) by requiring the score to exceed the current best value instead of a fixed margin above alpha.,False,The optimization strategy refines the logic conditions for deeper searches after passed LMR by requiring the value to exceed the current best value instead of exceeding alpha by some margin.,False
0e4ca37c2581f6e449c193612e77657c4dd87865,taichi,The optimization strategy used is to improve the efficiency of finding the largest power of two by reducing unnecessary computations.,True,The optimization strategy involves improving the algorithm to find the largest power of two more efficiently.,True
7cf1aaa2ad3855bd5e95bef382a66fe122fc9b01,kmsan,"The optimization strategy involved removing the `inline` keyword from the `__const_udelay` function to prevent excessive inlining during Link-Time Optimization (LTO), reducing code size without sacrificing performance benefits.",True,The optimization strategy involved removing the inline attribute from the `__const_udelay` function to reduce the binary size by preventing unnecessary inlining.,True
4423eff71ca6b8f2c5e0fc4cea33d8cdfe3c3740,kmsan,"The optimization strategy forces the inlining of the `csum_add()` function to eliminate function call overhead and redundant computations, improving performance by reducing unnecessary operations and skipping unused or redundant calls.",True,The optimization strategy used was forcing the inlining of the `csum_add` function to eliminate unnecessary function call overhead and redundant operations.,True
a711c5004cf7e4b903f9c2c6ca736f2e531df79c,blender,"The optimization simplified complex code by leveraging the inherent ordering of corner edges and vertices, reducing unnecessary computations.",False,"The optimization strategy involved simplifying the code by reducing complexity in the handling of corner edges and vertices in face duplication, leading to a 30% performance improvement.",True
eab4b8aa34fc64e3a91358e1612e6d059396193b,android_kernel_oneplus_msm8998,The optimization strategy reduces overhead by directly reading the CS selector from the VMCS instead of calling a function that retrieves multiple segment fields.,False,The optimization strategy involves reducing unnecessary reads by directly accessing the cs selector to obtain the cpl instead of calling a function that reads multiple vmcs fields.,True
d4346abfe3871e36bac55487d968502db1471545,Floorp,The optimization strategy involved replacing a function that copies font table data with one that retrieves it directly to avoid unnecessary memory copying.,True,The optimization strategy used is replacing `CopyFontTable` with `GetFontTable` to avoid unnecessary copying of font data.,True
ecdfec3e8049325a9da1966cbb8ab9cbd39243c6,urho3d,The optimization strategy involved reducing redundant drawable collection by caching and reusing previously collected data.,False,The optimization strategy involved improving the efficiency of drawable collection by reducing redundant checks or operations in the `View::GetDrawables` function.,True
44d95ae127c40625a73e634ef226d43bd2726486,ESPAsyncWebServer,The optimization disables the Nagle Algorithm by default to reduce latency and improve response times.,False,The optimization strategy involved disabling the Nagle Algorithm by default to reduce network latency and speed up response times.,True
9655215689729527c501184f5dd1ae8e1e100f99,mOS,"The optimization strategy limits the time a task can be stuck in the `balance_dirty_pages()` loop by breaking out after writing a sufficient number of pages, regardless of the dirty memory ratio.",False,"The optimization strategy introduces an upper limit on the time a task can be stuck in the `balance_dirty_pages()` loop by breaking out if the task has written 1.5x the number of pages it just dirtied, regardless of the current dirty memory limits.",False
4637b6afca431be8caf1d22151a2cbb2e86a33d5,owt-deps-webrtc,"The optimization avoids unnecessary floating-point multiplications by early-returning when the multiplier is 1.0f, which is the common case.",True,"The optimization strategy involved adding an early return condition to skip unnecessary floating-point multiplications when the multiplier is 1.0f, which is the most common case.",True
068a665054d786b83c8af0b791bf4aeddb75dd90,media-driver,The optimization disables vdenc stream processing when segmentation is disabled to avoid unnecessary operations.,False,The optimization strategy involves disabling the vdenc stream when the segment is disabled to reduce unnecessary processing.,False
fe10ecd097c82e257af2408913c25dddb8514022,gstreamer,The optimization strategy involves avoiding the wait for a new keyframe after a discontinuity (DISCONT) to allow the decoder to continue processing and conceal errors until the next keyframe.,False,The optimization strategy involves not waiting for a keyframe after a discontinuity (DISCONT) to improve performance on lossy networks or corrupted frames.,False
5844e129891e39beeab038abfe8a7cc7bfb08ad1,wireshark,The optimization strategy combines multiple searches for specific characters into a single more efficient search operation using `tvb_pbrk_guint8()` and removes unnecessary calls to improve performance.,True,The optimization strategy combines multiple character searches into a single function call and removes unnecessary character fetch operations to improve performance.,True
dbc4cf52aeeb54d916a2fc9fea976829974f21b4,mptcp,The optimization strategy involves sending a TCP RST after reaching the MP_FASTCLOSE retransmission limit to clear connection states in stateful firewalls.,False,The optimization strategy involves sending a TCP RST packet when the limit of MP_FASTCLOSE retransmissions is reached to clear erroneous connection states in firewalls and prevent resource accumulation.,False
6890d40225538860002a12f30a42d68b3de5c8bd,XRT,The optimization strategy involved removing or commenting out debug messages to reduce performance overhead during asynchronous operations.,False,The optimization strategy involved removing or commenting out debug messages to reduce performance overhead in asynchronous operations.,True
fe66483156050f4eb63c4a1988f3b439e6c9ff2a,kmsan,The optimization strategy replaces a general memory barrier with a more specific one tailored for atomic operations and eliminates unnecessary barriers on certain architectures.,False,The optimization strategy involves replacing a general memory barrier (`smp_mb()`) with a more specific one (`smp_mb__before_atomic()`) to avoid unnecessary barriers on non-LL/SC architectures like x86.,True
83b0967c1fe57ce9b59ab553d282090283ca09ed,ghostbsd-src,"The optimization avoids unnecessary prefetching of L1 buffers during scan operations by setting a flag, reducing CPU overhead associated with buffer decompression.",False,"The optimization strategy involves setting a flag to avoid unnecessary decompression of L1 buffers during scan prefetching, saving CPU time.",False
da504741da1ffef8386ba281520d72f0b4e5983f,sycl,"The optimization eliminates unnecessary bit manipulation operations by directly applying a bitwise AND operation on the input, reducing instruction count in the generated code.",True,"The optimization strategy involves simplifying the code generation for bitwise AND operations by directly applying the operation to the input register, eliminating unnecessary intermediate steps.",True
4a727370b1c2e9746434c00bf2236db86c31ea5c,c-blosc2,The commit introduces a fast path for handling memcpyed and special chunks in the `_blosc_getitem` function to reduce unnecessary computations and improve performance.,False,The optimization strategy introduces a fast path for handling memcpyed and special chunks in the `_blosc_getitem` function to reduce unnecessary processing.,False
e133140fd1e5ea3a5bcadc3e594e1b613c36d9c5,sycl,The optimization strategy eliminates redundant calls to `isInTemplateInstantiation()` and `hasAncestor()` to reduce unnecessary computations.,True,The optimization strategy involved avoiding redundant calls to `isInTemplateInstantiation()` and `hasAncestor()` in matchers to improve performance.,True
ba7603ee52b328a30ef4b56d377c847b4e1fc0f7,ytsaurus,The optimization strategy involved refining memory usage calculation to improve accuracy and reduce unnecessary overhead.,False,The optimization strategy involved fixing the memory usage calculation to ensure accurate tracking and management of memory resources.,False
966fa58918e3bccf7325f3ef4ae5bb21642f1980,bitcoin-abc,The optimization strategy involves pruning an additional 10% of data during Initial Block Download (IBD) to reduce the frequency of subsequent pruning operations and minimize performance degradation caused by chainstate flushes.,False,The optimization strategy involves pruning an extra 10% during Initial Block Download (IBD) to avoid frequent pruning and subsequent performance degradation caused by chainstate flushes.,False
db3a7dc72b56c2fb1dc18d1954c5861333e18dd9,gnome-builder,"The optimization avoids using `va_args` and `g_object_set()` by directly creating a `GValue` to own the string, reducing overhead from copying and variadic argument processing.",True,"The optimization avoids copying strings into new GValue instances by creating the GValue upfront and allowing it to own the generated string, thus eliminating the need for va_list g_object_set() calls.",True
6c5cb46be6dd39a7d987c475b8d39415615a9bcc,gambatte-libretro,The optimization strategy skips resampling during fast-forwarding to reduce unnecessary computational overhead.,False,The optimization strategy involves skipping resampling during fast-forwarding to reduce unnecessary processing.,False
4f58be1ef1d881b04be530cc17d3a617d0e96a68,filament,The optimization strategy involved reducing redundant computations and improving memory access patterns within the `taa` function.,True,The optimization strategy involved reducing redundant calculations and improving cache efficiency by precomputing values and reordering memory accesses.,True
dbeaa0d397fd2d26e105817242782024d1e607b7,rocksdb,The optimization strategy reduces the number of iterations in a test to shorten execution time without compromising test quality.,False,The optimization strategy involved reducing the number of iterations in a test from 5000 to 1000 to shorten execution time without significantly impacting test quality.,False
6a09c52db9cd5f67c4d2726a5e5a40fb53112c2c,circt,The optimization strategy replaced repeated calls to a slow module lookup function with efficient lookups using a precomputed instance graph.,False,"The optimization strategy replaces the use of `getReferencedModule`, which scans the top level of the circuit, with the `InstanceGraph` for module lookups to improve performance.",False
754584ba06e56506010315670c651069b9239983,MLV-App,The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency in the white balance picker function.,True,The optimization strategy involved reducing redundant calculations by caching the result of a frequently accessed value in the white balance picker function.,True
c5c71fdbb6f4883c0729cd8f9c7498e8c2f5c647,wiredtiger,"The optimization fixes a logical error by checking the correct flags value for WT_SKIP_UPDATE_RESTORE, potentially allowing more pages to be evicted.",False,"The optimization strategy involved correcting the flag check for WT_SKIP_UPDATE_RESTORE to allow eviction of more pages, potentially improving performance.",False
606c37c54160479130a7337e45efbdf01d013b13,FreeBSD-src,"The optimization strategy replaces the compiler-specific `__builtin_unreachable` with the more portable and standardized `__unreachable` macro from `sys/cdefs.h`, ensuring broader compatibility while maintaining optimization hints.",True,The optimization strategy involves replacing the use of `__builtin_unreachable` with `__unreachable` from `sys/cdefs.h` to ensure compatibility and provide a fallback for compilers that do not support the builtin.,True
961a96a9875cac296e96dbc7246cd7435b5ed9b0,haiku,The optimization strategy involved adjusting the memory allocation parameters (max bin size and alignment) to reduce waste and improve efficiency for specific allocation sizes.,False,The optimization strategy involved adjusting the max bin size and alignment in the port heap configuration to reduce memory waste for specific allocation sizes.,False
6bb97c4218198d3e5dd60c7eadb5267a79959a6d,BBHash,The optimization avoids unnecessary copy constructor calls during lookups by utilizing reference-based access instead of value-based access.,True,The optimization strategy involved faster lookups by avoiding the copy constructor to reduce overhead.,True
934176818f32ffa0ffe359192dbf7d769c3e740f,WLED,The optimization strategy involved improving the efficiency of the `color_scale()` function by likely reducing computational overhead or improving algorithmic complexity.,False,"The optimization strategy involved improving the `color_scale()` function to enhance its performance, likely through algorithmic refinements or reducing computational overhead.",False
aaccb8899d5d1fdf78ad6687eb9e120cd298a474,Floorp,The optimization strategy involved reducing unnecessary computations or memory allocations within the TableRowsCollection to improve its performance.,False,The optimization strategy involved improving the performance of TableRowsCollection by modifying the implementation of NS_IMPL_NS_NEW_HTML_ELEMENT in HTMLTableElement.cpp.,False
5d19150906430531963f5e95346db3795eb499fd,MyScaleDB,The optimization strategy involved restructuring the evaluation of short-circuit functions to minimize unnecessary computations by exiting early when a result is determined.,True,The optimization strategy involves improving the processing of short-circuit functions to reduce unnecessary computations.,True
380e5a4242061b332e0d91326b77f295f1402593,Floorp,The optimization strategy involves disabling specific Ion optimization passes in OdinMonkey that do not contribute to performance improvements.,False,The optimization strategy involved disabling specific Ion optimization passes that were determined to be ineffective.,False
1ac7b8a996fea356e43352a196638c068dbf69de,seqan3,The optimization strategy involved improving FASTA parsing performance by reducing unnecessary memory operations or iterations within the sequence file handling logic.,False,The optimization strategy involved modifying the FASTA format parsing to improve performance by reducing unnecessary operations and streamlining the reading process.,False
bab10a549fd64e36f06c995d6adf22c0413e9379,android_kernel_xiaomi_sdm845,"The optimization strategy involved extending the fast-RX path to handle multicast packets directly, avoiding the need to fall back to the slower RX path and reducing spinlock contention.",False,"The optimization strategy involves handling multicast packets directly in the fast-RX path by copying and resending the SKB, avoiding the overhead of punting packets to the slow RX path and acquiring a spinlock.",False
59b49457fbd870b4d033159698c452f7248b57b1,android_kernel_brcm_rpi,The optimization strategy synchronizes with the firmware after sending multicast commands to prevent command queue overflow and reduce the number of commands sent.,False,The optimization strategy involves synchronizing with the firmware after sending multiple asynchronous multicast commands to prevent command queue overflow and reduce redundant command submissions.,False
a5cbc97a81c4f50212c2fd8feccb1c31b812c179,hhvm,The optimization strategy involved restructuring the `writeVarintSlow` function by compressing its logic into a loop to reduce redundancy and improve performance.,True,The optimization strategy involved compressing the `writeVarintSlow` function into a loop to improve performance on aarch64 architecture.,True
bf11f1ad2242c65ee64fb6f1bb3af8815544199c,Floorp,The optimization strategy involved reducing unnecessary cursor updates by caching the current cursor state and only applying changes when necessary.,False,The optimization strategy involved improving the performance of the `SetCursor` function by reducing unnecessary cursor updates in the Qt widget scrolling implementation.,False
ea3d0070d96b17b8e4dd76a668f063f4a084661d,MediaInfoLib,The optimization strategy involved reducing unnecessary computations or checks after VC-3 detection to improve parsing speed.,False,The optimization strategy involved improving processing speed after detecting VC-3 by making targeted changes to the data parsing function.,False
6739e59116c85d05515d3f038302fa1bd74764fc,orx,The commit worked around a GCC optimization bug by modifying the code to ensure correct behavior when handling the end of FXs.,False,The optimization strategy involved working around a specific GCC optimization bug affecting the end of FXs by modifying the code in the orxFX_Apply function.,False
dac5229965c8a4be50651c6da90cfeef24e97148,radare2,"The optimization avoids redundant reloading of the `cc` SDB database by caching its initialization state, significantly improving performance.",False,The optimization strategy avoids reloading the `cc` SDB (Simple DataBase) to achieve a significant speedup.,True
4e5e186784fa234a2f1b4b3a2fffe2eb4d92553a,mongoose,The optimization strategy involved reducing the number of iterations in a loop to decrease execution time.,False,"The commit speeds up MQTT tests by optimizing the test execution process, likely through reducing redundant operations or improving test setup efficiency.",False
2d1c4fd72b40adbc8ddd691c863fbffa0d5be4bb,flatpak,The optimization strategy involves scanning the repository for hardlinks during commit to reduce redundant operations in specific repository types (bare repos).,False,The optimization strategy involves scanning the repository for hardlinks during commit to improve performance in bare repositories when the source is a checkout from the repo.,False
fca8d9606145d0c42caac1954c37d86fa291fea0,Halide,The optimization strategy involved removing a redundant function call to improve performance by eliminating unnecessary computations.,True,The optimization strategy involved removing a redundant `print_expr()` call to improve code execution speed.,True
724f04cf5b40599d7d9eff436f3c880df1302d0c,psi,The optimization strategy involved reducing redundant computations or unnecessary operations within the `HistoryDlg::displayResult` function to improve performance.,False,The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the HistoryDlg::displayResult function.,True
69b475fb98d11a550e8751ebe27b9e40ff741eb7,cheribsd,The optimization strategy reduces overhead by mapping larger memory segments at once instead of repeatedly mapping individual bytes.,False,The optimization strategy involves mapping a segment of user strings at a time instead of repeatedly mapping each byte to reduce overhead in the copyinstr() function.,False
3ecbdf133e8be1d94b24dcdcef3fdc7313f49507,tensorflow-directml,The optimization strategy involved manually unrolling loops to work around a ptxas bug affecting unoptimized builds for Pascal GPUs.,False,Manually unrolling loops to avoid a compiler bug affecting unoptimized builds for Pascal GPUs.,False
6aeff241fe6c4561a842b344c1ca14a700ec8441,kmsan,The optimization migrates the PG_readahead flag during page migration to avoid performance loss caused by resetting readahead state.,False,The optimization strategy involves migrating the PG_readahead flag during page migration to avoid potential performance loss due to readahead ramp-up.,False
8688bbfb8f7f2cb847f711ceed73c89f9aaece6c,meshoptimizer,The optimization strategy replaced a Hoare partition with a branchless Lomuto partition to improve performance for specific workloads by reducing branching overhead.,False,The optimization strategy involved replacing the Hoare partition algorithm with a branchless Lomuto partition to improve performance in the clusterizer workload.,True
efb61a71854014bf2705d48454885f58ec6ed62e,android_kernel_brcm_rpi,The optimization strategy explicitly specifies the update type per plane info change instead of relying on fragile bit-flag checks to determine FAST vs MEDIUM updates.,False,"The optimization strategy involves explicitly specifying the update type per plane info change instead of relying on fragile bit checks to determine the update type, ensuring correct and efficient updates.",False
95c0ecee66786108a926645d37bba4d8c8a1f258,v8,The optimization strategy involved removing the `V8_EXPORT_PRIVATE` macro to reduce compilation overhead on Windows.,False,The optimization strategy involved avoiding the use of `V8_EXPORT_PRIVATE` to speed up compilation under Windows.,True
37f771cffb1034af8ae840174acaac98d42a046a,ceph,The optimization strategy involves reducing unnecessary computations by considering overfull OSDs only when attempting to perform upmap operations.,False,"The optimization strategy involves limiting the consideration of overfull OSDs to only when upmap operations are being performed, reducing unnecessary computations.",False
7944bea083deb466016eb8e012430593d5a664d1,Floorp,The optimization strategy avoids unnecessary animation of the skeleton UI during fast startups to reduce computational overhead.,False,The optimization strategy involves avoiding the animation of the skeleton UI during fast startups to reduce unnecessary performance costs.,False
0d64043d74024e337119adc637cd27f767171794,omr,The optimization restricts the use of rotate instructions for specific nodes (lshl+land) to improve performance or correctness in generated code.,False,The optimization strategy restricts the application of rotate instruction optimization to specific node types (lshl+land) to avoid unnecessary transformations.,False
fef9b562d569a00af5ad8db3f709b1623e26a550,darktable,"The optimization replaces trigonometric function calls with simpler arithmetic operations by rotating the coordinate system, reducing computational overhead and enabling auto-vectorization.",True,The optimization strategy replaces trigonometric function calls with coordinate system rotation and basic arithmetic operations to speed up ellipse mask drawing.,False
7f7c5a5c90e1c504d0b125b922dec99500e73a28,libyami,"The optimization strategy involved ensuring proper asynchronous input handling by delaying the return of VppInput until after VppInputAsync was added, thereby improving performance.",False,The optimization strategy involved ensuring that VppInputAsync is properly added before returning VppInput to improve performance in threaded input handling.,False
2be1b9e49b4b3ca085757d5314320a5d35e75100,MonetDB,"The optimization strategy involves checking for the existence of a dependency in storage before adding it, to avoid unnecessary additions.",False,"The optimization strategy involves checking if the next dependency exists in storage before adding it, to avoid redundant operations.",True
beeee9dccc338ae7129016f2f2e17d2a40ecc5df,rocksdb,The optimization avoids unnecessary string allocations by reducing calls to ToString() during compaction.,False,The optimization strategy involves reducing the overhead of expensive `ToString()` calls by minimizing string allocations during compaction.,True
68fbb1e0522056e0ab8062fe68c26b3af5cffed3,stockfish.wasm,"The optimization strategy reduces unnecessary writes to the transposition table by refreshing entries only when necessary, minimizing memory operations for speed improvement.",True,"The optimization reduces unnecessary writes to the transposition table by refreshing entries only when necessary, improving performance without changing functionality.",True
f053851af643755dc2ee252f92e3853b30a12be3,rocksdb,The optimization skips non-overlapping levels when determining grandparent files to reduce unnecessary processing and avoid potential violations of max_compaction_bytes.,False,The optimization strategy involves ignoring non-overlapping levels when determining grandparent files to improve compaction efficiency.,False
5af41974c3876ce02950ff9d371330ef0826603d,llvm-leg,The optimization strategy specializes the `TypesEqual` function for derived types to eliminate virtual method dispatch overhead.,False,The optimization strategy involved specializing the `TypesEqual` function for all derived types to reduce virtual method dispatch overhead.,True
6c7d4e4ed00a9aaee7ff24c8d855390f442c49f8,Floorp,The optimization strategy skips applying redundant change hints in the animation layer changes processing to avoid unnecessary work.,False,"The optimization strategy involves skipping the application of a change hint if it is already present, avoiding redundant operations.",True
bdb82246d0e13616977e6f244f1d45f0539ded77,ucx,The optimization strategy used CPU data cache prefetching to improve the performance of iterating through a pointer array by reducing cache misses.,True,The optimization strategy used CPU data cache prefetching to improve the performance of the ptr_array iteration by ~10% on Intel processors.,True
1b7ce6062adbf0ea37140dd1cafd9131ee4d63a9,stress-ng,The optimization forces the inlining of the `keep_stressing_flag` function to eliminate call/return overhead.,True,The optimization strategy involves forcing the inlining of the `keep_stressing_flag` function to reduce the performance impact of call/return overhead.,True
163489b64361083144b88d21824d4bb58d741208,android_kernel_msm-5.4_nothing_sm7325,The optimization fixes a performance regression caused by incorrect hash function usage by ensuring the correct futex key pointer and size are used for hashing.,False,The optimization strategy involved correcting the futex key hashing function by using the futex key pointer and adjusting the size calculation based on struct offset to restore proper hash distribution and performance.,False
628fd7d141013dcda06d13fa644f44029f317a8c,qt,"The optimization avoids unnecessary copying by directly using the internal buffer of a QString when converting to CFStringRef, leveraging knowledge of the string's lifetime.",False,"The optimization strategy involves reusing the internal buffer of a QString for a CFStringRef object instead of copying the data, leveraging known lifecycle constraints to avoid unnecessary copying.",False
c124e916cc25c60b59020116a74464d5b14ef271,petsc,The optimization strategy involved removing a large temporary array and merging two loops into one to reduce memory usage and improve cache efficiency.,True,The optimization strategy involved removing a temporary array and combining two loops into one to reduce memory usage and improve efficiency.,True
6b64aa5b7e180cace70d47b837a53265e648b2f4,libosmscout,The optimization strategy allows dynamic adjustment of cache sizes via function arguments to improve performance testing flexibility.,False,The optimization strategy involves allowing cache sizes to be adjusted via arguments in the PerformanceTest to potentially improve performance by optimizing memory usage.,True
e0f96fa0cc8d438014cda9e76aca9bc9f4f00c59,cmssw,The optimization strategy involved caching the TypeID to avoid redundant type checking computations.,False,The optimization strategy involves caching the TypeID to reduce the overhead of repeated type checking operations.,True
763e6a5d4837d350fcb6d74fc6289deb2e7fa389,llpc,The optimization strategy involves adding `!invariant.load` metadata to descriptor set loads to enable compiler optimizations like common subexpression elimination (CSE).,True,The optimization strategy involves adding `!invariant.load` metadata to load descriptor sets to enable better optimization of these loads by common subexpression elimination (CSE).,True
ae2669dcf8695260c7f3385bec836b92bcb57f5c,nautilus,The optimization replaces a custom function with a faster alternative that enables SQLite to utilize indexing for URI comparisons.,False,Replaced the custom `tracker:uri-is-descendant()` function with the `STRSTARTS` function to leverage SQLite's indexing capabilities for faster URI comparisons.,True
6ffecc946fada1c39455e89488dba57941e81659,kmsan,"The optimization strategy skips unnecessary memory migrations for pages already in the desired VRAM domain, reducing redundant operations.",False,The optimization strategy involves skipping migration for pages already in VRAM to avoid redundant operations.,False
30dac96a785b5f86619c2daf2253eda23427b6bb,Arctic-Fox,The optimization strategy involved moving the computation of `affectedByScriptMinSize` to an earlier stage to avoid unnecessary assertions or redundant work.,False,The optimization strategy involves computing the `affectedByScriptMinSize` condition earlier to avoid unnecessary work and assertions.,False
8a52381903baddd4ef4ef630bef83a25e2d7ab4a,libvma,The optimization strategy involved reducing unnecessary memory operations by improving the release process of `m_p_tx_mem_buf_desc_list`.,False,The optimization strategy involved improving the release mechanism of `m_p_tx_mem_buf_desc_list` to enhance performance during the `prepare_to_send` function execution.,False
e073674f2c5ef23d4f88afb8d36e5e8886cde1c5,Cocos2d-Lua-Community,The optimization strategy involved reducing redundant file parsing operations during the loading of sprite frame plists by caching parsed data.,False,The optimization strategy involved improving the loading of plist files by reducing redundant operations and streamlining data parsing.,False
43c789c8f246a2a35864e3fca9585b55c40c2095,rocksdb,"The optimization strategy replaces `size() > 0` with `!empty()` to ensure constant-time complexity for checking if a container is non-empty, as mandated by the C++ standard.",True,The optimization strategy involves replacing `size() > 0` with `!empty()` to leverage the constant time complexity of `empty()` across different container types.,True
0a5a41d9a4f33652f3a0be766b6b9a486075325b,qtbase,"The optimization strategy replaced a memory-allocating environment variable check with a faster, non-allocating alternative to improve performance.",True,The optimization strategy replaced `qgetenv()` with `qEnvironmentVariableIsEmpty()` to avoid memory allocation and improve performance.,True
bf20b661cb6a6a33d9e93fb44ad1470f9f8245d2,ceph,The optimization strategy replaces an expensive union operation with a swap and assignment to reduce complexity.,True,The optimization strategy replaces an expensive union operation with a swap (constant complexity) and an assignment (linear complexity) to achieve the same result more efficiently.,True
806cb5676be3e3524c83d2e508234bf8d9f4980a,online,The optimization strategy involves detecting connection termination errors (ECONNRESET and EPIPE) during writes to avoid unnecessary polling and expedite cleanup.,False,The optimization strategy involves detecting connection termination errors (ECONNRESET and EPIPE) after writes to avoid extra polling and speed up cleanup.,False
3f89af1c39da4991ef6c544fc5e3f164a688b375,rocksdb,The optimization strategy reduces the number of random iterations in a test to prevent timeouts under TSAN by lowering computational overhead.,False,The optimization strategy involved reducing the number of random iterations in a test to decrease execution time under TSAN.,False
d2255f7e932024bca21b3c07f28e19bf51d7b84d,skyrimse-test,"The optimization strategy involved rewriting the function to use more efficient SIMD (Single Instruction, Multiple Data) vectorized operations.",False,The optimization strategy involved vectorizing code in the function sub_1414974E0_SSE41 to improve performance.,True
5765cabb951bc1f82da2b883635cc9b1c74e6d44,QGIS,The optimization strategy involved reducing redundant computations by caching and reusing previously calculated field values during clipboard data processing.,True,The optimization strategy involved improving the efficiency of reading the field list from the clipboard by reducing unnecessary operations or streamlining the retrieval process.,True
ccecb55b9572bd9aa5ee99ac25b94052317e6b05,MyScaleDB,The optimization strategy involved reducing unnecessary memory allocations and improving cache locality by reusing pre-allocated buffers.,True,The commit optimizes performance and memory usage by reducing unnecessary data copying and improving cache locality in the query interpretation process.,True
c459b5178c2a6c189713c686aba3068f79eea0d8,sycl,The optimization avoids unnecessary work in Sema::ActOnEndOfTranslationUnit() when code completion is enabled by skipping the function's execution.,False,The optimization strategy involves skipping unnecessary work in the `Sema::ActOnEndOfTranslationUnit` function when code completion is enabled.,False
0e83568466dd89ff118b724dfa3b54104418f400,ompi,"The optimization strategy avoids taking a lock in the progress function when there are no requests to process, reducing unnecessary synchronization overhead.",False,"The optimization strategy involves avoiding unnecessary lock acquisition in the progress function when there are no requests to process, reducing overhead in multi-threaded benchmarks.",False
745eeeb79a615ad64488e1b9056f394af085b30f,plasma-framework,The optimization avoids unnecessary execution of the `performMatch` function by checking if the context is already invalid before proceeding.,False,"The optimization strategy involves skipping the `performMatch` function call if the context is already invalid, avoiding unnecessary computation.",True
7a0652b4ed110861e629e3d4da7769c81e588fa6,simple_lmk,"The optimization avoids accessing the freed `tagset` by using the mapping built in the request queue to determine the default hardware context, preventing use-after-free issues while potentially improving performance.",False,"The optimization strategy avoids accessing the freed `->tagset` by using the mapping built in the request queue instead, preventing use-after-free and potentially improving performance.",False
a871f2934cd24dd852a1810a82d7029cf8cfb3e9,geeqie,The optimization strategy involved reducing redundant computations inside a loop by caching results of expensive operations.,True,The optimization strategy involved reducing the number of redundant file system checks by caching the results of previous checks in the `vficon_sync` function.,False
a75e0d22a37f4ef7e1243da38031549f6de20dde,qmcpack,The optimization avoids unnecessary in-memory data addition by reusing pre-existing data set via `setStatus`.,False,The optimization strategy involves avoiding redundant in-memory data addition by utilizing the data already set by the `setStatus` function.,False
fc29646db1886c4300c0eaa77ca3f9bdbdeeb243,AdaptiveCpp,The optimization strategy involves adding metadata to the loop latch terminator to enable vectorization of work-item loops by the compiler.,True,The optimization strategy involves adding vectorization metadata to the latch terminator to enable vectorization of work-item loops.,True
1ada2c947b894f97ac4e7e9c6435a8b4e42ca1fa,lustre-release,The optimization strategy adjusts the over-quota flag logic to reduce unnecessary performance penalties by introducing a threshold-based check for remaining quota space.,False,"The optimization strategy involves adjusting the over-quota flag marking logic to only consider the threshold when the remaining quota space is larger than the threshold, thereby reducing unnecessary performance degradation.",False
1f519a643dbc65c21543c87754bdbfd232ca8c4c,primecount,The optimization strategy involved reducing unnecessary computations in small cases by caching and reusing results.,False,The optimization strategy involved reducing the overhead of tiny computations by caching results in the `PhiCache` function.,False
3feac5dc4cdfe0d447f3b34fbac3bd5f5c47c5f9,cgal,"The optimization strategy used was to directly insert elements into the triangulation hierarchy without unnecessary intermediate steps, reducing redundant operations.",False,The optimization strategy involved improving the insertion speed for iterator ranges in the Triangulation_hierarchy_2 by optimizing the insert function.,False
a8e1340c45dcad45415a9699a153881c79f78cd9,scummvm,The optimization strategy involved improving the timer resolution to reduce latency and enhance performance under load.,False,"The optimization strategy involved improving timer resolution to enhance performance under system load, particularly benefiting iMuse.",False
24be4b4969d0103dab41b0f1bf8e627de9e67f98,pcsx2,The optimization removes an unsafe fast path for software blending to improve performance by relying on a safer and already existing software blending method.,False,The optimization strategy involved removing an unsafe fast path for SW blending to avoid redundant blending operations and improve performance.,False
645137672bd1552382b80f9398341eec7b8b3317,flare-engine,The optimization strategy removes unnecessary distance checks when evaluating hotspot tooltips to reduce computational overhead.,False,The optimization strategy removes unnecessary distance checks when evaluating hotspot tooltips to improve performance.,True
d3480a253d97435b26fea814b9137ceda06dac2d,glocal_exploration,The optimization strategy involves checking if a frontier is within the field of view (FoV) before performing the more computationally expensive raytracing operation.,False,The optimization strategy involves reordering operations in the frontier visibility test by first performing a faster field-of-view (FoV) check before executing the slower raytrace operation.,True
bf0a510981ddc28c754881ca21c50ab18e5f2b59,gui,The optimization avoids unnecessary interprocess calls to `tryGetBalances` by implementing a check for `TransactionChanged` or `BlockTip` notifications before invoking the function.,False,The optimization strategy involves avoiding unnecessary interprocess calls to `tryGetBalances` by implementing checks for `TransactionChanged` or `BlockTip` notifications outside of the function.,False
919ddce77389c1c4d69d26832bcbc9a6b2fa285e,gimp,The optimization strategy involves validating the entire requested area of a drawable buffer in a single step instead of tile-by-tile to reduce overhead during layer-group preview rendering.,False,"The optimization strategy involves validating the entire requested area of a drawable buffer in a single step before calling gegl_buffer_get(), instead of validating it tile-by-tile, to speed up layer-group preview rendering.",False
6031be78e1c02e259c0c61053fdb00af30aae271,Floorp,"The optimization strategy involved reordering operations to perform `DrainOverflowLines` before `ResolveBidi`, reducing unnecessary computations during the reflow process.",False,The optimization strategy involves reordering operations by draining overflow lines before resolving Bidi (bidirectional text) to improve performance.,False
1d4d80944c0d8fb53d3aa927d61b58ac56075aa7,tortoisesvn,The optimization strategy involved improving cache behavior by reducing unnecessary operations when handling unversioned parts of the filesystem.,False,The optimization strategy involved improving the cache behavior to handle unversioned parts of the filesystem more efficiently.,False
8dda7673a6f5bdd2d1277ede696b57499e1b9bc3,otter-browser,The optimization strategy involved adding a missing compiler optimization flag to improve the performance of the `populatePasswords` function.,True,The optimization strategy involved adding a missing compiler optimization flag to improve performance during the population of passwords.,True
d75eb4eed1020c37d5d5572a70c58194f00c0f74,tensorflow,"The optimization removes a redundant condition that is already handled by LLVM, thereby improving performance without affecting functionality.",True,The optimization strategy involved removing a redundant condition that is already optimized by LLVM and does not hinder vectorization.,True
873f1356a1781e8d638973ea320b722d3240fc5a,rocksdb,The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.,True,The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.,True
787fda2b57bf3f1c0dd2a0dbcf3d002bb890630e,ga,The optimization strategy reduced the default memory allocation for a test program to decrease its memory footprint.,False,The optimization strategy reduced the default memory allocation size in the `copy_test.x` program from 2GB to less than 0.5GB to decrease memory footprint.,True
59f77ff4ffdb4da61d62d489402ce32bb8e31e65,naev,"The optimization strategy involved reversing the iteration order to exit early upon finding the first match, reducing unnecessary iterations.",True,"The optimization strategy involves iterating backwards through a list to find the first match and exit early, reducing unnecessary iterations.",True
bb6119eb77fe5818985d375cef415f9fbc0b4757,sycl,The optimization strategy involved replacing range-based loops that copied objects with ones that use references to avoid unnecessary copy overhead.,True,The optimization strategy involved replacing value-based loop iteration with reference-based iteration to reduce copy overhead.,True
e5157e313cd9c2d57f28873318d0bb29c77a9b1a,symqemu,The optimization eliminates unnecessary runtime checks for virtio 1.0 on always little-endian targets by hardcoding the result of `virtio_access_is_big_endian()` to false for such cases.,False,"The optimization strategy removes a runtime check for virtio 1.0 on always little-endian targets, ensuring a branchless fast path for endianness determination.",False
62f7ba7a815f34fb49967e925ac28ea340a46777,pycopy,The optimization removes an unnecessary bounds check in the `mp_seq_get_fast_slice_indexes` function to reduce redundant computations.,True,The optimization strategy involved removing an unnecessary bounds check in the `mp_seq_get_fast_slice_indexes` function to improve performance.,True
92ad4a88f3199b013532b37d6598c442319355a5,rocksdb,The optimization strategy involved reusing a decoded key to avoid redundant decoding of length-prefixed keys in the `InlineSkipList::Insert()` function.,True,The optimization strategy reused a decoded key in multiple places to avoid redundant decoding of length-prefixed keys.,True
468c648335b1724fcaa0c4f2a0247f77fe4f2977,kmsan,The optimization strategy involves early return in the tuning function to skip unnecessary processing for a specific timing mode (DDR52).,False,The optimization strategy involves early return in the tuning function when the timing is MMC_TIMING_MMC_DDR52 to avoid unnecessary processing.,False
964d8e5432aaac9be8044a17ba5ff49ef987a7c2,mygui,The optimization strategy involved reducing redundant file existence checks by caching results for faster subsequent lookups.,False,The optimization strategy involved improving performance in the `OgreDataManager::isDataExist` function by reducing unnecessary checks or streamlining data existence verification.,True
50a9ff301ed734f2fa95b3c38154454416d934f8,android_kernel_oneplus_msm8998,The optimization strategy involved reducing the polling interval and adding a short delay to improve the efficiency of waiting for the IPMDIO bus to become idle.,False,The optimization strategy involves improving the timeout handling for polling the IPMDIO bus to reduce unnecessary waiting time.,False
e48ccc28f4eebcc05b6333b129ee5908214d3259,rocksdb,The optimization strategy avoids writing unused file checksum manifest entries to reduce unnecessary manifest file space usage.,False,The optimization strategy involves avoiding the writing of file checksum manifest entries when they are unused to save manifest file space.,False
a8315bf41faf8457f2214951d130cfe2daa4af3f,pioneer,The optimization strategy involved reducing memory usage by modifying the logic in GeoPatch::UpdateVBOs to avoid unnecessary memory allocations or copies.,False,The optimization strategy involved reducing memory usage by modifying the GeoPatch::UpdateVBOs function.,True
b5f81608ccf5c47793949a97f5d460a9e61116b2,cycles,"The optimization removes redundant bounds checks in image sampling for repeat, extend, and mirror modes by leveraging the fact that both wrap and read_clip functions already perform bounds checking.",True,The optimization strategy involved removing redundant bounds checks in CPU image sampling for repeat/extend/mirror modes to improve performance.,True
b67ff2fb11307dfe03926f5433175fb67072cc64,rapidjson,The optimization avoids redundant string length calculations by leveraging `std::string::size` instead of calling `internal::StrLen` when using `FindMember` with `StringRef`.,True,"The optimization strategy involves using `std::string.size()` instead of `internal::StrLen` to directly obtain the string length, reducing overhead in the `FindMember` function.",True
9e697172542e2b01517e4025df2c23d0ed5447f4,bitcoin,The optimization strategy used is to reduce redundant descendant searches by caching and reusing results within the wallet's conflict marking logic.,False,The optimization strategy involved improving the efficiency of wallet descendant searching by reducing redundant operations and streamlining the search process.,False
c458019a3b810f48c4e526debc9ef6dacf2beb6c,anura,The optimization strategy involved changing the mapping of lists to 1-based Lua tables instead of 0-based ones to avoid the hash component overhead in Lua arrays.,True,The optimization strategy involved changing the mapping of lists to 1-based Lua tables instead of 0-based tables to improve efficiency by avoiding hash components.,False
fd4ca53eb7110a2ab0f24d08902d5c2a04f00a8c,suricata,"The optimization strategy reorders conditions in the AppProtoEquals function to evaluate the most common case first, reducing average execution time.",True,"The optimization strategy involves reordering conditions in the `AppProtoEquals` function to check the most common condition first, improving performance by reducing unnecessary comparisons.",True
4504e40fe0bef083078c9d0f15d5836bf8cc9792,RIOT,"The optimization avoids removing the oldest entry in a ring buffer if there is already an entry for the current fragment, reducing unnecessary operations.",False,"The optimization strategy avoids removing the oldest entry in the reassembly buffer if there is already an entry for the current fragment, reducing unnecessary operations.",False
1a624832a06b465d0e5651901bcbc3680c78d374,android_kernel_oneplus_msm8998,The optimization strategy alternates between redundant bearers after every message sent instead of every 10 messages to improve load distribution and speed up retransmission delivery.,False,"The optimization strategy involves increasing the frequency of load distribution over the broadcast link by alternating between redundant bearers after every message sent, rather than after every 10 messages, to improve retransmission efficiency.",False
3252208cb10be645bae415c90fb2ed8217838490,bitcoin,The optimization strategy used loop unrolling to reduce the number of iterations and improve the performance of the base58 encoding process.,True,The optimization strategy involved reducing the number of memory allocations and copying operations in the `EncodeBase58` function by pre-allocating memory and using more efficient data handling techniques.,True
f8bacf728184bf1533048e0c7d21d7d883e50a33,treesheets,The optimization strategy reduces hashing time by limiting the input to only a specific chunk of the image data at its beginning instead of hashing the entire image data.,False,The optimization strategy involves reducing the amount of data processed by hashing only a specific chunk of the image data at its beginning instead of the entire image.,False
47eb9e91e4cef40c34486f99c1fe7584fc41e91c,cheribsd,The optimization removes a blocking sleep operation from a critical network path to prevent performance bottlenecks and potential deadlocks.,False,The optimization strategy involved removing a sleep operation from a filter function to prevent locking issues and improve performance in the network hot path.,False
0ed7107373b48b67d05a6647248902a200236734,dpdk,The optimization removes redundant mempool debug checks for received mbufs to reduce unnecessary overhead.,False,The optimization strategy involved removing duplicate mempool debug checks for received mbufs to reduce redundant operations.,True
f03e1c4d075022ca89fee2a279e04df3a0109c41,powertabeditor,The optimization strategy involved replacing guitar-instrument staves with blank staves containing whole rests to reduce memory allocation during file loading.,False,The optimization strategy involved replacing individual rests with whole rests to reduce memory allocation and improve performance during file loading.,False
487dd96c2706aa352ed44637507dd7f38ac80306,glsl-optimizer,"The optimization avoids creating unnecessary temporary variables for matrix operations by directly handling array accesses, reducing copy propagation complexity.",False,"The optimization strategy avoids creating unnecessary temporary variables for matrix operations when they are not needed, reducing instruction count.",True
7198a5c9ad23a63b924752089034375a8a24a04d,omr,The optimization strategy disables recompilations for methods compiled with the no-opt optimization level in MimicInterpreterFrameShape to improve performance in full-speed debug compilations.,False,The optimization strategy involves disabling recompilations for methods compiled in a specific configuration (MimicInterpreterFrameShape) to ensure they use the no-opt optimization level.,False
6b74539efb3bf7e9409204da73a17436b4fad0ae,intel-graphics-compiler,The optimization strategy introduces a threshold to limit loop unrolling in the joint_matrix_apply implementation to balance performance and code size/compilation time.,False,Introduced a threshold to control loop unrolling in the joint_matrix_apply implementation to balance performance and code size.,False
d921b9cf91e1f84a39f4beab5c824b9c8ad87c0c,kmsan,The optimization deduplicates the allocation and initialization of an orphan directory object to avoid redundant operations within a loop.,False,The optimization strategy involves deduplicating the allocation and initialization of an orphan directory object outside of a loop to avoid redundant operations.,True
7feabfe23dc54960abba34755f484f786575ac49,glsl-optimizer,"The optimization strategy involves making the loop unrolling iteration limit configurable instead of hard-coded, allowing for potential performance tuning based on context-specific overrides.",False,The optimization strategy involves propagating a configurable maximum loop unroll iteration value to the optimizer's loop unroller instead of using a hard-coded value.,True
41cc606be8dbdc2555236e069711d4c91f00efb9,tensorflow,The optimization strategy involved replacing the construction of an unnecessary std::vector with direct iteration over the list of operands to reduce overhead.,True,"The optimization strategy involved directly iterating over the list of operands instead of constructing a std::vector with the indices, eliminating unnecessary overhead.",True
311bbb48fa0bd5a189c7698910ebcc3874b81017,x0,The optimization strategy involved honoring an optimization level variable to potentially enable compiler-level optimizations.,True,The optimization strategy involves honoring an optimization level variable to adjust performance settings dynamically.,True
482cc8f336e56fc563a960e97247a33e646838cd,library-checker-problems,The optimization strategy involved reducing the number of iterations in a stress-testing loop to improve performance during verification.,False,The optimization strategy involved a minor adjustment to the verifier logic to reduce overhead during stress testing.,False
bfdbc1155473af599081880289036def7f92e32a,sycl,The optimization strategy renumbers slot indexes uniformly to reduce computational overhead compared to spacing them based on the number of definitions.,False,"The optimization strategy involved renumbering slot indexes uniformly instead of spacing them according to the number of definitions, improving the efficiency of the greedy register allocator.",False
de13c78e5b97b3f0910af5802a4c0466cd02c0f1,corona,The optimization strategy involved reducing redundant processing of key events by filtering out repeated or unnecessary messages in the Windows input handling.,False,"The optimization strategy involved reducing the frequency of key state checks by only processing key events when necessary, thereby improving performance during multiple key presses.",False
50319f8e4f176046c61fdbf94523af7326c9fb3c,jpegli,The optimization re-enables previously disabled AVX2/AVX512 instructions to accelerate fast lossless encoding.,False,The optimization strategy involved re-enabling AVX2/AVX512 instructions for fast lossless encoding to leverage hardware acceleration.,False
9f7815dcaa242c0239205792d8c0d2ebf7a211c1,gemrb,The optimization avoids an inefficient rendering path by adding a specific font rendering flag.,False,The optimization strategy involved modifying the rendering path to use a more efficient method by adding IE_FONT_SINGLE_LINE to the FPS counter.,False
be0e1e21ef707be4d16ea6a96ac9997463e4b8d2,android_kernel_oneplus_msm8998,The optimization strategy involves preventing the inlining of a function and repositioning a memory barrier to improve compiler-generated code for the common execution path.,False,The optimization strategy involved using `noinline` to prevent inlining of a function in an unlikely clause and repositioning a `barrier()` to improve common-case code path efficiency.,True
906231e9e8a5bfdcf5c5aa2e7474e405895f2351,forestdb,The optimization strategy replaced a low-resolution timing function with a high-resolution one to improve measurement accuracy on Windows.,False,The optimization strategy involved replacing `GetTickCount64()` with `QueryPerformanceCounter` to achieve higher resolution timing on Windows.,True
30d19d57d513821c58de4556e7445982ed22b923,kmsan,The optimization eliminates an unnecessary loop iteration in the NIC Tx ring completion routine to avoid an extra expensive PCIe read operation.,False,The optimization strategy involves terminating a loop earlier to avoid an unnecessary and expensive PCIe read operation.,True
b278ae8e50466e8073a1754a506145df5bb27c72,rocksdb,The optimization uses fractional cascading to reduce the range of comparisons in the FindFile function by leveraging search hints.,False,"The optimization strategy used fractional cascading to reduce the range of file searches in `ForwardIterator::Seek()`, thereby decreasing the number of comparisons needed.",False
a920c00bce00e9d4bec45ad927499b98c0ee7bc4,horizon,The optimization strategy involved reducing redundant computations within the `ToolPaste::update` function to improve performance.,False,The optimization strategy involved reducing unnecessary memory allocations and improving data handling in the `ToolPaste::update` function to enhance performance.,True
88863fcecaa51c4563434e52b22dc2387d13279d,sysrepo,The optimization avoids duplicating the origin string by directly assigning it instead of creating a copy.,True,The optimization strategy involved avoiding duplication of the origin data in the `sr_edit_diff_set_origin` function to reduce memory overhead.,True
e1f7bf2c02be1c2331304df4473522c87c5c485d,BsodSurvivor,"The optimization smooths out a cyclic path heuristic by introducing a stateful mechanism to balance latency priority within an issue group, improving scheduling behavior for certain benchmarks.",False,The optimization strategy involves smoothing out the cyclicpath heuristic to prevent latency priority from dominating by scheduling aggressively for latency only within an issue group.,False
1bf24273d286c7a9d6e158d639d2d624e059d15e,Server,"The optimization strategy involves adding a conditional check to verify the existence of an event before exporting and executing it, reducing unnecessary processing.",False,The optimization strategy involves checking if an event exists before exporting and executing it to avoid unnecessary processing.,True
12f83c965828ed2b8d69ea6e60ba1be00fbb8212,scipp,The optimization strategy involved restructuring the handling of attributes in the histogram function to avoid unnecessary computations during realignment.,False,The optimization strategy involved reducing the overhead of attribute handling in realigned histograms by minimizing unnecessary operations.,False
f1bfe4cc64218d015a8415b37b30127327df8b39,pugixml,The optimization simplifies handling of floating-point special cases in XPath by using a unified and faster implementation for multiple compilers.,False,"The optimization strategy involved simplifying the handling of floating-point special cases in XPath by using a common, faster implementation for both MSVC and BCC.",True
a0031fc827c4ea151c9510bbf2f332c8fb08b4b4,hacker-league,The optimization strategy involved reducing redundant calculations within the physics function by caching and reusing results.,True,The optimization strategy involved reducing redundant calculations and improving data access patterns in the physics function to enhance performance.,True
20dc5e74f276bdcb26c44c13bced506a2d920d3f,rocksdb,"The optimization strategy involves reordering conditional checks to evaluate a less computationally expensive condition first, avoiding unnecessary calls to a more expensive function.",True,The optimization strategy involves reordering conditions in an if-statement to check a simpler condition (`filter != CompactionFilter::Decision::kRemoveAndSkipUntil`) before executing a more computationally expensive function (`range_del_agg->ShouldDelete`).,True
d70d7b2171e34cc0132353104d7996df93e4d329,openvino,The optimization strategy involves adding transpose sinking for additional unary elementwise operations to reduce unnecessary data movement and improve performance.,False,The optimization strategy involves applying Transpose Sinking to additional unary elementwise operations to improve performance for specific models like MobileNet.,False
cad845f4c0d63e21392191cbef32c9a860e86481,BsodSurvivor,"The optimization strategy reverses the order of live range splitting to prioritize large-to-small processing, improving register allocation under high pressure while accommodating earlier splits.",False,"The optimization strategy involved reversing the order of RS_Split live ranges to prioritize larger live ranges first, improving register allocation under high pressure.",False
4aa14714802ab3e5a9521685c9120b0a245ba3e1,athena,The optimization strategy involved moving variable declarations inside a SIMD loop to potentially improve cache locality and reduce redundant computations.,True,The optimization strategy involved moving the declaration of the `phi` variable inside the SIMD loop to reduce memory overhead and improve cache efficiency.,True
6c621c010009b92471bd250799aa1e70a22072f9,net-snmp,The optimization strategy used was to replace two 32-bit integers with a single 64-bit integer to reduce the complexity and improve the efficiency of encoding operations.,True,"The optimization strategy replaces the use of two 32-bit integers with a single 64-bit integer to store the value being encoded, reducing overhead and improving efficiency.",True
f6a25fdb70731a53088ae810636ca556de6b0a15,HDTN,The optimization strategy involved simplifying the encoding logic to reduce unnecessary computations during the SDNV encoding process.,True,The optimization strategy involved improving the encoding process by reducing unnecessary operations and streamlining the logic in the `SdnvEncodeU64Fast` function.,True
3ad41d654c936bc81e092ffd98ecaedcb643d850,dte,The optimization strategy involved simplifying the function by directly calculating the indentation width without relying on an intermediate function call.,True,The optimization strategy involved replacing a function call to `get_indent_info()` with a more direct and efficient implementation in `get_indent_width()` to improve performance.,True
ace9c5dfaf09430f10e677e3646eb8df9e9fe9a6,BsodSurvivor,"The optimization ensures that base register and writeback register conflicts are avoided for store operations during ARM load/store merging, similar to what was already done for loads.",False,"The optimization ensures that the base register and writeback register do not conflict during store operations, similar to the existing check for load operations.",False
30ba0a0c950a0cdf23a70fce6c16d501c5f238c8,sycl,"The optimization avoids requiring a null terminator when loading objects, preventing excessive memory usage caused by preferring pread() over mmap().",False,The optimization strategy avoids requiring a null terminator when loading objects to prevent excessive memory usage by preferring `pread()` over `mmap()` when the file size is a multiple of the system page size.,False
85237d203bc9dfe549218c72686a611cff6368b4,cheribsd,"The optimization strategy involved dynamically adjusting buffer size to accommodate a rapidly growing routing table, reducing the need for frequent reallocations.",False,"The optimization strategy involves dynamically adjusting the buffer size to better accommodate a rapidly growing routing table, inspired by a similar approach in killall/killall.c.",False
2b4a33db402bfe61e39bfa0840795364f6204b9e,gdal,The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency in a sorted list.,True,The optimization strategy involved fixing a performance issue in the TAB_CSLLoad() function by addressing inefficiencies identified through OSS Fuzz.,False
86af5952a8470f96b53830372c64469cb7ce780c,kmsan,The optimization strategy involves passing multi-page bvecs to iov_iter instead of single-page bvecs to reduce overhead and improve efficiency.,True,The optimization strategy involves passing multi-page bvec to iov_iter instead of one page per bvec to improve efficiency.,True
631ff02e2f7a87ea2ccef102155fa01563c06f0e,NanoShellOS,The optimization avoids unnecessary grid pattern checks by directly using VidBitBlit for full-screen backgrounds when the window is partly off-screen.,False,"The optimization strategy involved fixing off-by-one checks to allow direct VidBitBlit from the background in full-screen cases, avoiding unnecessary grid pattern checks.",False
6d18d0155f90a17fb8c6ab6ba17d2d71c605c37c,OpenTESArena,"The optimization strategy reduces unnecessary voxel checks by only evaluating those adjacent to chasm voxels, improving performance in specific scenarios.",False,"The optimization strategy reduces unnecessary voxel checks by only examining voxels adjacent to chasm voxels, improving performance.",False
610149af42eecbe95413a80e3be5627914e4830b,welle.io,The optimization strategy combines two separate loops into a single loop to reduce computational complexity by finding the peak and calculating the average simultaneously.,True,The optimization strategy combines finding the peak and average values in a single pass to reduce computational complexity.,True
38df2f07b7bc5309ebb159438b435d1f25f31e35,android_kernel_oneplus_msm8998,The optimization strategy involves reducing unnecessary spur mitigation frequencies to improve CCK sensitivity for AR9462 chips.,False,The optimization strategy involves reducing the frequency range for CCK spur mitigation on AR9462 chips to only 2440 and 2464 frequencies to improve sensitivity.,False
937d0d0fc687dbcd97d25fb5cf2e112768d04e65,dxvk-remix,The optimization avoids unnecessary synchronization of the CS thread by skipping the operation if the resource is already in use.,False,The optimization strategy avoids unnecessary synchronization by skipping the synchronization call when the resource is already in use.,True
957ea43f078b08d9dc4610c1a53418221da06a74,MyFlash,The optimization strategy involved restructuring the loop to minimize redundant computations and improve iteration efficiency.,True,The optimization strategy involved reducing the overhead of event processing by improving the efficiency of constructing execution units from a large list of events.,False
f0484bdd723a29917b7f19ec8e2715f397d76f81,supercollider,The optimization strategy involved reading multiple frames at once from libsndfile instead of one by one to significantly reduce overhead and improve efficiency.,False,The optimization strategy involves reading multiple frames at once from libsndfile instead of reading them one by one to increase efficiency.,True
b71a94aa1891db7333dbd3b48d6b03ab6c980295,v8,The optimization strategy avoids inlining export wrappers for JSPI to preserve specific behavior and uses atomic relaxed loads to prevent data races.,False,The optimization strategy involves making the write to the Code::builtin_id field atomic to prevent data races and ensure thread safety.,False
1dbd9fd1d1242d73744ae2b1a08570528c3370a6,pioneer,The optimization strategy involved reducing unnecessary computations in the station rotation logic by caching and reusing previously calculated values.,False,The optimization strategy involved reducing the number of station rotation calculations by caching and reusing rotation values.,True
21171615c10ee1a636ea28f2303a93a4bc39dbde,rocksdb,The optimization strategy involved reducing the number of iterations or operations in a randomized test to decrease its execution time.,False,The optimization strategy involved reducing the execution time of a specific test by modifying its implementation to run faster.,False
0d722d8b4814c594fd37eb838ea68b895d171b28,poedit,The optimization avoids unnecessary processing in the common case by checking if escaping is needed before performing the unescaping operation.,True,The optimization strategy involves making the common case faster by reducing unnecessary processing in the `UnescapeCString` function when no escaping is needed.,True
e522f446027845e3c8b563d021f37e8f3d30c9d9,kmsan,The optimization strategy used is adding an `unlikely` branch prediction hint to improve the efficiency of the fast path by signaling that the failure case of `sgl_alloc` is rare.,True,"The optimization strategy involves adding an `unlikely` check to a function call (`sgl_alloc`) to indicate that the failure case is improbable, thus optimizing the fast path.",True
914ebccd2d8fa439e01fe93b5229534b9e179a69,android_kernel_oneplus_msm8998,The optimization avoids unnecessary memory allocation by replacing a zero-source bitmap allocation with a direct clear_user() call when the memslot is clean.,False,"The optimization strategy replaces unnecessary bitmap allocation and copying with a direct `clear_user()` call when the memory slot is clean, reducing allocation overhead and improving performance.",True
971c043a1df850c9ccfc155c80c64b0673d7daa4,libarchive,The optimization ignores checksum mismatches during fuzzing to reduce unnecessary computations and speed up the process.,False,The optimization strategy involves ignoring checksum mismatches during fuzzing of tar archives to speed up the process and increase bug detection.,False
9bf801ba1f26e4a7091695a7f5b512b0ed19e99b,tensorflow,The optimization strategy involved removing a race condition check to improve branching efficiency in a GPU kernel.,False,The optimization strategy involved removing a race condition check to improve branching efficiency.,False
07e4522c993a77ad6dbc74ef71db519b6f4b7e09,pygame-ce,The optimization strategy involved reducing redundant computations and memory allocations in the `PixelArray.make_surface()` function by reusing existing data and avoiding unnecessary operations when creating a surface from an array or slice.,False,The optimization strategy involved improving the performance of the `PixelArray.make_surface()` method by optimizing both the creation of a same-sized surface from the array and the handling of slicing operations.,False
86a43bc97d024ca300eb366f5717807207716a08,rubinius,"The optimization ensures that each entry in the cache is set correctly by returning after setting an entry, preventing redundant overwrites with the same method cache pointer.",False,"The optimization strategy involved ensuring unique method cache entries are set to allow proper JIT optimization, rather than reusing the same entry.",False
a1dcdf189ff0c19f13ebf519aed2376c708a363b,dsc,The optimization strategy avoids unnecessary checks for newer .dat files to reduce computational overhead.,False,The optimization strategy involves avoiding checks for newer .dat files to reduce performance overhead.,False
7c70876bd2ca55809ed3f3d1f638ba9225f14e46,mppic,The optimization strategy involved inlining an array to reduce memory access overhead and improve cache locality.,True,The optimization strategy involved inlining the array to reduce function call overhead and improve performance.,True
735a8fd38e86d94f62e732de94e1a137619b9e49,symqemu,The optimization strategy involved reducing redundant computations or memory accesses in the `cpu_x86_load_seg_cache` function to improve performance.,False,The optimization strategy involved modifying the `cpu_x86_load_seg_cache` function to improve performance by reducing unnecessary memory operations.,True
645a378764d19a78f027e2c3b2e31a11696a944c,john,The optimization strategy used is parallelizing the computation in the `DES_bs_cmp_all` function using OpenMP to leverage multiple CPU threads for improved performance on parallel hardware.,False,The optimization strategy used was parallelizing the DES_bs_cmp_all() function with OpenMP to leverage massively parallel devices like Xeon Phi and high-end server CPUs.,True
8a06c846000c9ba7735e9e85dc5f3024c76bc765,simde,The commit optimizes performance by adding a NEON implementation for the `simde_mm_madd_epi16` function to leverage ARM-specific SIMD instructions.,False,"The optimization strategy involved adding a NEON implementation of the `simde_mm_madd_epi16` function to leverage SIMD (Single Instruction, Multiple Data) capabilities for improved performance.",False
1ba4c37cee105d1fdfa6bda88079904beddef831,tensorflow-directml,The optimization avoids generating Reciprocal nodes for integer types and enables Reciprocal optimizations for complex types to improve performance by reducing unnecessary operations.,False,The optimization strategy involves avoiding the generation of Reciprocal nodes for integer types and enabling Reciprocal optimizations for complex types to improve performance.,False
c7fd6c4369ef1a009b40c1787ea9d2dad2cf449f,gcc,The optimization avoids adding redundant inferred ranges by checking if they are already incorporated in the current range of an SSA_NAME.,True,"The optimization strategy involves avoiding the addition of inferred ranges if they do not change the current range of an SSA_NAME, thereby reducing unnecessary computations.",True
9e176494c22da279c14457951c0ae1d3de749059,libvpx,The optimization re-enables previously lost speedups by adjusting certain encoding parameters for higher speed settings.,False,The optimization strategy involved re-enabling previously lost speedup features for cases where speed is greater than 1 to improve performance.,False
2538ddf6fdd3ac56101de8395189686f5ee9f215,phc,"The optimization avoids unnecessary copying by using a specialized function that operates directly on the data when there is only one reference, thus eliminating the overhead of `zval_copy_ctor`.",False,The optimization strategy avoids unnecessary copying by using `overwrite_lhs_no_copy` instead of `overwrite_lhs` to eliminate the `zval_copy_ctor` in cases where there is only one reference to the data.,True
84a89d68dcf60840d7801161032144bb6cd2c982,ompi,The optimization strategy involves reducing computational overhead by directly calculating the number of complete datatypes advanced and updating the stack in bulk before handling remaining bytes.,False,"The optimization strategy involves advancing the convertor by a multiple of the data size, computing the number of complete datatypes advanced, updating the stack, and then calculating the new position based on the remaining bytes.",True
18eeb7b90e45af4bbac0777021711d8547f41eca,rocksdb,"The optimization strategy involved removing an unnecessary condition that prevented flushing when total log size exceeded the maximum WAL size, allowing more efficient memory management.",False,"The optimization strategy involved modifying the logic to ensure that the write buffer manager's flush check is not unnecessarily bypassed when the total log size exceeds the maximum WAL size, allowing for more timely memtable flushes and preventing OOMs.",False
b30c907ef95644c0adec45d599fd31c48ad0a4d2,mutter,"The optimization strategy involved applying a scaling factor (`geometry_scale`) to opaque regions to align their handling with input regions, reducing unnecessary computations during culling operations.",False,"The optimization strategy involves applying geometry scaling to opaque regions, similar to how it was done for input regions, to improve culling optimizations.",False
4f9882194b2e32ba61055308917004eb23c5965f,android_kernel_xiaomi_marble,The optimization strategy involves using a separate event ring for the WAN producer to improve performance by reducing contention or improving resource allocation.,False,The optimization strategy involves using a separate event ring for the WAN producer to improve performance by reducing contention and improving event handling efficiency.,False
fc3688d273b2d9ea62070f6e21d80b20c0014f72,ppsspp,The commit optimizes AVX instructions in the texture modulation function to reduce computational overhead.,False,The optimization strategy involved leveraging AVX instructions to improve the performance of the texture modulation function in the sampler.,False
464ee98eee5ce160b497aec6a1163422980dd797,qt,"The optimization strategy reverts to using QTransform instead of QMatrix4x4 for matrix operations when no QGraphicsTransforms are present, reducing precision mismatches and improving performance in the common case.",False,"The optimization strategy involved reverting to using QTransform instead of QMatrix4x4 for matrix operations in the common case where no QGraphicsTransforms are present, improving performance by avoiding unnecessary float-based calculations.",False
7ebd3fcb3f6155d941ecd1dd3ecedb9e41a4a2b5,rdma-core,The optimization skips unnecessary source port matching in the DR FDB RX domain by leveraging the fact that all incoming packets on the FDB RX pipe originate from a single uplink port.,False,The optimization strategy involves skipping source port matching in the RX steering rule when it is redundant due to the single uplink port configuration.,False
348f24532f2b6b34eebd15207da0c510d6f499d0,qtdeclarative,"The optimization strategy involved restructuring the execution logic for UPlus, Increment, and Decrement operations to reduce redundant computations and improve performance.",False,"The optimization strategy involved improving the efficiency of UPlus, Increment, and Decrement operations by reducing redundant computations and streamlining execution paths.",True
7c2f709b7e5990e188382ba01dc5e4175cd742a0,QB64pe,The optimization strategy involved modifying the blockSampleFrames function to reduce latency by adjusting how audio frames are processed or queued.,False,The optimization strategy involved modifying the blockSampleFrames function to reduce latency by adjusting the frame block queue handling.,False
70d2ce6cec44b866dd211d9d8fd428698bcb0fd6,sdrangel,The optimization strategy used a more efficient mathematical formula for the smootherstep function to reduce computational overhead.,True,The optimization strategy involved improving the smootherstep function to enhance performance by reducing computational overhead.,True
e6331a321aafcc291a60ceedf4d6b0051a6117ca,kmsan,The optimization strategy replaced a cryptographically secure random number generator with a faster pseudo-random number generator to reduce overhead and entropy consumption.,False,"The optimization strategy involved replacing the use of `get_random_bytes()` with `prandom_u32_max()` to generate a random TLB index, reducing entropy waste and improving performance by using a faster pseudo-random number generator.",True
36aaf851ff2814e9e5c024e21b866c403137ff26,qtbase,The optimization avoids unnecessary object creation by directly generating the absolute path and calling QFile::exists() instead of using QDir::exists().,True,The optimization strategy involves bypassing the creation of unnecessary QDir and QFileInfo objects by directly generating the absolute path and calling QFile::exists().,True
111905bf6bba581011629d73d7b491f486522924,link-grammar,The optimization strategy involved reducing unnecessary computations or iterations within the `do_count` function to improve its execution speed.,False,"The optimization strategy involved minor speed improvements in the `do_count()` function, likely through localized code enhancements such as reducing overhead or improving loop efficiency.",True
b8b7117e97e649fc65d0a4dd397caf9a39fb71b1,rocksdb,The optimization replaces `size() > 0` with `!empty()` to ensure constant-time complexity for checking container emptiness.,True,The optimization strategy involved replacing `size() > 0` with `!empty()` to ensure constant time complexity for checking container emptiness.,True
4b7c09a5f74ad25dd2e3ee6d43732f9a0e0c1ff3,android_kernel_xiaomi_sdm845,"The optimization strategy involved correcting the logic for setting the MSG_MORE flag to accurately reflect when more data needs to be sent, thereby improving write performance.",False,"The optimization strategy involved correcting the condition for setting the MSG_MORE flag to only set it when there are more bvec's to send, rather than on the last bvec, improving write performance.",False
3d7d72a34e05b23e21bafc8bfb861e73c86b31f3,linux-socfpga,"The optimization strategy involves adding `cond_resched()` calls to break up long non-preemptible delays and allow other tasks to run, thereby reducing latencies and avoiding softlockup warnings.",False,The optimization strategy involves adding `cond_resched()` to break up long non-preemptible delays in `sgx_vepc_release()` to reduce latencies and avoid softlockup warnings.,True
911684a9c0c45d3eace70b04779c372936b3ab36,dosbox-staging,"The optimization replaced `push_back` with `emplace_back` to construct objects in-place within the `sources` container, reducing unnecessary temporary object creation and improving performance.",True,The optimization strategy involved replacing `push_back` with `emplace_back` to avoid unnecessary object creation and improve performance in the `sources` container.,True
5e70f4bdc15960730d0ff2aa167399e36bc64278,BsodSurvivor,The optimization strategy replaced a potentially quadratic-time line table construction method with a more efficient approach to guarantee reasonable performance.,False,The optimization strategy involved replacing a potentially quadratic line table construction method with a more efficient constructor to ensure reasonable performance.,True
192542ce384d0c99866b4b95414117429a215c5b,BsodSurvivor,"The optimization strategy involved replacing a test for ""pure"" with a test for ""virtual"" to achieve the same effect but with claimed performance improvements.",False,The optimization strategy involved replacing a pure virtual function with a virtual function to potentially improve performance.,True
6f95bcec53aa9e83b8158d41b047d9063c584d10,gdal,The optimization strategy involved improving the efficiency of detecting Rasterlite compliant files by refining the logic used in the detection process.,False,The optimization strategy involves improving the efficiency of detecting Rasterlite compliant files by refining the file detection logic.,False
9bfbb7581358686c837f08f8f340b99e114dfed8,clang-wasm,The optimization strategy avoids unnecessary memory reallocation by directly extending the last memory block when possible.,True,The optimization strategy involves optimizing the `realloc` function specifically for the last memory block to improve performance.,False
736af4b3d7af165f268850219e3d467e30db4848,scanner,The optimization strategy involved prefetching uncommitted tables to improve database recovery and initialization performance.,False,The optimization strategy involves prefetching uncommitted tables to improve performance during database recovery and initialization.,False
4be1dea1d3a8212c5d8ea4175020162afb4bc485,parrot,The optimization strategy involved replacing a custom byte-by-byte search with the standard library's `index()` function while avoiding unnecessary calls to `memcmp()` when failure is guaranteed.,False,"The optimization strategy involved reducing unnecessary calls to `memcmp()` by adding a conditional check to avoid its execution when it is obvious that it will fail, and leveraging the standard library's `index()` function for faster string searching.",True
51ecc7318f7aea8472cf49be768eac7f3236eeaa,SPIRV-Tools,The optimization strategy avoids redundant instruction creation and deletion by directly moving instructions during inlining instead of cloning and deleting them.,False,"The optimization strategy involves moving instructions to new blocks instead of cloning and deleting them during function inlining, reducing the overhead of instruction creation and deletion.",True
3da361ee77ac5b3daf90f7c91765e85eccd6a18a,asterisk,The optimization strategy involved reducing redundant file reads by caching the file content in memory during the `apply_outgoing` function execution.,False,The optimization strategy involved improving file reading efficiency in the `pbx_spool.c` file by modifying the `apply_outgoing` function to reduce overhead and enhance performance.,False
379eee0fbdebacafc06bd374a403fd1c1773bbac,platform_system_core,The optimization strategy involved eliminating a redundant vector copy to improve performance by directly using the original vector.,True,The optimization strategy involved eliminating a redundant vector copy to improve performance.,True
e5fc3b2bd3abc733ea3ee26d7a880bf3c89898be,legion,The optimization strategy involved restructuring the logic in `perform_ready_check` to reduce redundant computations and improve early exit conditions.,False,The optimization strategy involved improving the efficiency of the ready check for composite views by refining the logic to reduce unnecessary computations.,False
73bac4923f8f26ae3c719133c640c98d57f10713,osv,The optimization strategy used is to replace waking a single consumer with waking all consumers to reduce latency when multiple threads are waiting for entropy.,False,The optimization strategy involves using `wake_all()` instead of a single wake-up call to reduce latency by waking all waiting threads when the entropy pool is refilled.,True
8ba694548782c1821ab119c18fe02360a81c6768,ffmpeg,The optimization fixes an off-by-one error in memory allocation logic to prevent unnecessary large allocations in ff_fast_malloc().,False,The optimization strategy involved fixing an off-by-one error to prevent unnecessary memory allocation in the `ff_fast_malloc()` function.,True
08be1803eecb5ae464440812ea06e79b21289053,rocksdb,The optimization strategy avoided unnecessary calls to `SleepForMicroseconds()` in debug mode by checking if the delay is set before invoking the sleep function.,False,"The optimization strategy involved avoiding unnecessary calls to `SleepForMicroseconds()` when no delay is set, specifically in debug mode.",True
2c8a0dbaf5d33c1d5b89b54839910a43cbae2180,freeorion,The optimization strategy avoids unnecessary copying of objects by utilizing references or pointers instead of passing by value.,True,The optimization strategy avoids unnecessary copying of objects to improve performance.,True
b936e398e2c49c1b766db9aefbd24e3563b4a751,flac,The optimization strategy used is to replace a loop with a direct memory write operation to reduce iteration overhead.,True,The optimization strategy involved reducing the number of function calls and loop iterations in the `FLAC__bitwriter_write_byte_block` function to speed up metadata writing.,True
f1cc99c6e80694fc768ac098e13ef3c5370f6dfe,redot-engine,The optimization strategy involved replacing repetitive calls to a function with a macro to reduce computational overhead.,True,The optimization strategy involved adding a macro (SNAME) to reduce the overhead of string name lookups in the `CSGShape3D::_make_dirty` function.,True
04ac7bd853039968c42d0752ed5c6e691994e4ce,android_kernel_xiaomi_sm8150,The optimization strategy involves ignoring CRC errors on CMD13 during tuning to prevent unnecessary repeated tuning operations.,False,The optimization strategy involves ignoring CRC errors from CMD13 during tuning to prevent unnecessary back-to-back tuning operations.,False
1dd5c618242b73fadb2f0e226cbe8f8af12bd647,vg,The optimization strategy involves deferring the generation of candidate mate rescues until after primary alignment to reduce unnecessary computations.,False,The optimization strategy involves generating candidate mate rescues after primary alignment to improve performance.,False
858e60819b2bcd1a6842f418fc3937e17a0f5cb7,Floorp,The optimization strategy involves adding a check for leaf frames to avoid unnecessary processing in the function.,False,"The optimization strategy involves checking for leaf frames early in the function to avoid unnecessary processing, improving performance by 30%.",True
133eb8e38b02c6c63a039523fca12737009a6686,kmsan,The optimization strategy involves switching to PIO mode for small data transfers to avoid the overhead of DMA when it is less efficient.,False,"The optimization strategy involves switching to PIO mode for small data transfers instead of using DMA, as DMA may be less efficient for such cases.",False
9862717afe19e2a2481006c09145cc6d1377d87a,FreeBSD-src,"The optimization adjusts the `steal_thresh` parameter to be dynamically set based on the logarithm of the number of CPUs, improving load balancing efficiency across different CPU configurations.",False,The optimization strategy adjusts the `steal_thresh` value to `log2(ncpus)` to improve load balancing on machines with different CPU counts by dynamically setting the threshold based on the number of CPUs.,False
fa4de6e30ffaf9188a48f5e30d2da1ac0e454917,rocksdb,The optimization strategy involved reversing the order of operands in a function call to improve performance by aligning with expected operand ordering.,False,The optimization strategy involved reversing the order of operands in a function call to improve performance by aligning with the expected behavior of the merge operation.,False
81cf1ade0bb3a42023dd1694ed080c4adb7dafd3,kmsan,The optimization strategy involved removing two atomic operations from the io_uring zero-copy TCP submission path to improve throughput in CPU-bound scenarios.,False,The optimization strategy involved removing two atomic operations from the io_uring zero-copy TCP submission path to improve throughput.,False
7ce4d334e54433f7e67d91baa9edb25adb26975b,qbe,The optimization strategy used is to reduce unnecessary memory allocations by reusing a pre-allocated buffer for small-size operations in the `eins` function.,True,The optimization strategy involves reducing the size of emitted code by making small adjustments to the `eins` function in the `emit.c` file.,True
5ed5fe9124641d392f8616fcdfd6cd4982f3cc29,ouinet,"The optimization strategy involves reordering checks to prioritize the `X-Ouinet-Private` header check before HTTP method checks, reducing unnecessary computations for common GET requests.",False,The optimization strategy involves moving the check for the `X-Ouinet-Private` header earlier in the request handling chain to avoid unnecessary HTTP method checks for most GET requests.,False
c66905a18999b5c4be2678a7829b6703f902e341,solidity,The optimization strategy avoids redundant lookups during body-copying by caching or reusing results in the inlining process.,True,The optimization strategy avoids multiple lookups during body-copying by caching the result of identifier translation in the inlining process.,True
92c0b021ce06fd4820af86bab0168bef064a7fd7,FreeBSD-src,"The optimization strategy involved removing a DMA address space restriction that was unnecessarily applied to all controllers, restoring performance for unaffected devices.",False,The optimization strategy involved removing a DMA address space restriction that was causing unnecessary performance degradation for certain controllers without issues.,False
0b353083fee3581d62d3ce70542ab8122a7311bb,wildmeshing-toolkit,The optimization strategy involved reducing the number of split operations in a test case to mitigate performance degradation caused by recent changes.,False,The optimization strategy involved reducing the split count in a test case to improve performance by decreasing the workload.,False
d53dfa7b3c5497369c8acdb8c0a9af274a56f21c,cpptraj,The optimization strategy used is parallelizing the coords pre-wrap computation for non-orthogonal cells using OpenMP to improve performance.,False,The optimization strategy used was parallelizing the coordinate pre-wrap process for nonorthogonal cells using OpenMP to improve performance.,True
4712e984d3f62cdf51ea67da8197eed18a5983dd,ceph,The optimization strategy involves processing PG removal tasks synchronously instead of asynchronously to reduce saturation of the filestore and journal queues.,False,The optimization strategy involves changing PG removal operations from asynchronous to synchronous to reduce queue saturation and improve system friendliness.,False
0a66a3e039b398ea34f9ff94c19a5dea4f8dce87,haiku,"The optimization strategy involved rewriting the YUV420p to RGB32 conversion in C to improve performance, potentially by reducing unnecessary computations or improving memory access patterns.",False,The optimization strategy involved rewriting the YUV420P to RGB32 conversion in C for improved performance.,False
3efea3d28ad522f947bacd30b74bc388c0dffa5e,lix,"The optimization strategy involved using `std::move()` to eliminate unnecessary copy operations for objects, improving performance by enabling move semantics.",True,"The optimization strategy involved using `std::move()` to avoid unnecessary copying of objects, improving performance by enabling move semantics.",True
89c75ab64846e2366e8503f446f192dee71ca5ec,lightrec,"The optimization strategy assumes that reads from specific registers ($sp or $gp) always access mapped memory, reducing unnecessary checks.",False,The optimization strategy involves treating reads from specific registers ($sp or $gp) as always hitting mapped memory to avoid unnecessary checks.,False
3be47f265be2c269c3e2459bd6d806a19401783b,cmssw,The optimization strategy involved replacing a linear interpolation calculation with a more efficient formula that reduces unnecessary computations.,True,The optimization strategy involved reducing the number of floating-point operations by precomputing and reusing intermediate values in the interpolation function.,True
0132164f33ea82daf732f3923c2fb141cb834dcc,ImageMagick6,The optimization strategy involved reducing memory moves by directly manipulating image data in place rather than creating intermediate copies.,True,The optimization strategy involved reducing memory moves in the `CheckImageColors` function to improve performance.,True
9f7c9aa7d5eed311e3d40c8f7d1a55abb7d4566c,server,The optimization strategy involved modifying the code to prevent a compiler optimizer error under specific build conditions.,False,The optimization strategy involved fixing an optimizer error by ensuring consistent expression usage across functions.,False
52406402ed1f8ff246b18ddcfced9d2f4e98ccc9,simdjson,The optimization strategy replaced a less efficient SIMD instruction (vm*vq_u8) with a more efficient one (vm*vq_u32) to improve performance on certain systems.,False,The optimization strategy involved replacing `vm*vq_u8` with `vm*vq_u32` to improve performance on certain systems by leveraging more efficient SIMD operations.,True
5a8c5740bdae9f27e3a8e5048e91d2fdc41349c4,intel-graphics-compiler,"The optimization avoids redundant DFS recursion by skipping already visited blocks, reducing unnecessary work in the compilation process.",False,The optimization strategy involved avoiding redundant DFS recursion by preventing already visited blocks from being pushed into the work queue.,True
0646096b64013d404767af62c0db94ed7b426920,descartes,The optimization strategy involved restructuring the search algorithm in the planning graph to reduce unnecessary computations during the shortest path calculation.,False,The optimization strategy involved speeding up the search of the planning graph by improving the efficiency of the `getShortestPath` function.,False
e48141941199a1a8a05880e95fc8d2455484f135,barebox,The optimization strategy eliminates redundant memory allocations and copies by storing image data in a single buffer and using pointers to reference specific sections.,True,"The optimization strategy involves reusing a single allocated buffer for image data instead of allocating and copying separate buffers for each blob, reducing memory allocation and copy overhead.",True
bd3e8db852186d4ab9d5dda890d1cd52389b1254,proxmark3,The optimization strategy used is to reduce the number of iterations in a loop by skipping unnecessary computations based on a condition.,False,The optimization strategy involved reducing the number of iterations in a loop by leveraging mathematical properties to validate PRNG nonces more efficiently.,False
0497de13c8bc1b0dd279e53b665fbe16bb7a7001,cryptominisat,"The optimization strategy involved replacing a potentially slower random number generation method with a faster one by reading from /dev/urandom instead of /dev/random, as cryptographic security is not required.",False,"The optimization strategy involves switching from a cryptographically secure random number generator to a faster, non-cryptographically secure one (/dev/urandom) to improve performance.",False
5fbd019220d4c46e4f8ad68f69daabccb87f3abe,server,The optimization avoids unnecessary data copying by directly using the prebuilt->blob_heap for BLOB selects instead of utilizing an intermediate temporary heap.,False,"The optimization strategy involves directly using `prebuilt->blob_heap` for BLOB selects instead of first reading BLOB data to a temporary heap and then copying it, thereby reducing unnecessary data copying.",False
2a206a07b3b6200d21f4b0a7be4b29265428761a,zephyr,The optimization strategy rounds down cache sizes to the nearest block multiple to improve static buffer usage based on Kconfig variables.,False,The optimization strategy involves rounding down cache sizes to the nearest block multiple to increase static buffer usage based on Kconfig variables.,True
452ae7907007b99f006c7f21d9579617ef4ae685,ustore,The optimization strategy involved reusing transaction states to minimize redundant initializations and improve efficiency.,False,The optimization strategy involves reusing transaction state to reduce overhead and improve efficiency in the serializable writes function.,False
d8696c17bef80617fbe53ac412959a77d8e24e7d,mutter,"The optimization introduces a ""sync delay"" to improve latency predictability by waiting 2 ms after vblank before starting to draw the next frame.",False,"The optimization strategy involves using a ""sync delay"" to wait for 2 ms after the vblank before starting to draw the next frame, improving latency predictability for applications.",False
94de85d16b0c46671ddf9695fdeb9d081e5a5ffe,android_kernel_msm-5.4_nothing_sm7325,The optimization strategy avoids unnecessary expensive bandwidth revalidation calls by restricting them to medium and fast updates only when required.,False,The optimization strategy involves avoiding an expensive bandwidth revalidation call during fast updates by only performing it on medium and slow updates.,False
995e4286a047b32aebf8ce540908edb7fbd93f76,android_kernel_oneplus_msm8998,"The optimization avoids unnecessary swaps in the heap sort function when the index is 0, reducing redundant memory operations.",True,"The optimization avoids unnecessary swaps in the heap sort function when the index `i` is 0, reducing load and store operations.",True
4dcf078f094d436866ef793aa25c96fba85ac8d0,symqemu,The optimization strategy replaces `tlb_vaddr_to_host` with `probe_write` to improve the efficiency of handling watchpoints and notdirty pages in the `dcbz_common` function.,False,The optimization strategy involves replacing `tlb_vaddr_to_host` with `probe_write` to more efficiently handle watchpoints and notdirty pages.,False
f5b04b919777c8b7305260cc3e8f5a6e4aede803,arduino-esp32,The optimization strategy involves using WIFI_FAST_SCAN when a specific channel is specified to reduce connection time by avoiding full channel scans.,False,The optimization strategy involves using WIFI_FAST_SCAN when a specific channel is used to reduce connection time from ~3 seconds to ~1 second.,False
183a86c958c9ebeb3458240f1b76b1d809682c10,ffmpeg,"The commit applies previously implemented optimizations to overlooked sections of the code, likely reducing redundant computations or improving efficiency in a similar manner.",False,The optimization strategy involved applying previously identified optimizations to similar code segments that were initially overlooked.,False
c6d3ee209b9e863c6251f72101511340451ca324,kmsan,"The optimization strategy involved enabling host-wide tags to prevent the SCSI midlayer from sending more requests than the host queue depth could handle, thereby avoiding firmware ASSERT and lockup issues while improving performance.",False,The optimization strategy involved enabling host-wide tags to correct SCSI midlayer issues and improve performance by allowing more efficient request handling.,False
c368538667121fb20c5414dfaf0fb273035a0854,ffmpeg,The optimization strategy involved reducing the number of iterations in the probing function by adjusting the logic to exit early when possible.,False,The optimization strategy involved speeding up the probing process in the SRT decoder by reducing unnecessary checks and improving the efficiency of the probing logic.,True
5e7fa9d13737407b768bafae894352cc1d714bbc,JankyBorders,The optimization strategy involved limiting the blur radius to reduce computational overhead during image processing.,False,The optimization strategy involved limiting the blur radius to improve performance by reducing computational overhead.,True
5d9e2328ce1706acf87e09b588e134e0f2b761c8,sssd,The optimization strategy involved caching the packet length value to avoid redundant calls to `sss_packet_get_len()` and improve efficiency by reusing the computed value.,True,The optimization strategy involved reading the packet length once and reusing the value instead of repeatedly calling the function to retrieve it.,True
0a5ce0831d04382aa9e2420e33dff958ddade542,kmsan,The optimization strategy replaced per-bit operations with per-range operations and removed a static variable to improve thread safety and performance.,False,The optimization strategy involved replacing per-bit atomic operations with range-based bitmap setting to improve performance and thread safety.,True
576e130cdc8e002350d5f28c53396003296e4017,cmssw,The optimization strategy replaced a potentially expensive connection operation with a more efficient slot copying mechanism to reduce overhead in event processing.,False,The optimization strategy involved replacing `connectTo` with `copySlotsTo` in the ActivityRegistry to improve performance by reducing overhead.,True
de375aa860fb848eaabc76dce0af2e982630b421,kmsan,The optimization avoids unnecessary register writes by checking if a bit is already clear before performing a write operation over a slow bus.,False,"The optimization strategy involves avoiding unnecessary register writes by checking if the bit is already clear before calling regmap_write(), thus reducing boot-up time.",True
b6dad11d9cb105681abbfc3d57aae4b21bd0c8c4,kmsan,The optimization replaces a full bit-counting function with a short-circuiting check for any set bit to improve efficiency.,True,The optimization strategy involved replacing `cpumask_weight()` with `cpumask_empty()` to more efficiently check if any bit in a cpumask is set by stopping traversal upon finding the first set bit.,True
5de22343b2303b278ab562e5d166ffe306566d30,android_kernel_oneplus_msm8998,The optimization strategy adjusts the TCP DMA copybreak threshold to 256k for I/OAT version 3 to leverage DMA engine efficiency for larger I/O sizes.,False,The optimization strategy involved increasing the TCP DMA copybreak size to 256k to leverage the DMA engine's efficiency for larger I/O sizes in TCP traffic.,False
69d648c556b65d1e4600837274997162f7245a2c,bibletime,The optimization strategy involved reducing unnecessary QString operations to improve performance.,True,"The optimization strategy involved minor QString-related changes to improve performance, likely by reducing unnecessary string operations or memory allocations.",True
8a9b36e2588b85e954f71dc03f165091a6fe0593,kmsan,"The optimization strategy involves waiting for a contended mutex during system idling instead of rescheduling, leveraging low contention to improve efficiency.",False,The optimization strategy involves waiting for a contended mutex during system idling to reduce rescheduling overhead and improve efficiency.,False
5b881c1f83792f5db421124171b06f1b8f1fe075,selinux-kernel,The optimization replaces `seq_printf` with `seq_put_decimal_ull_width` to improve the efficiency of formatting and outputting decimal values in `/proc/interrupts`.,True,The optimization strategy involved replacing `seq_printf` with `seq_put_decimal_ull_width` for formatting decimal values to improve performance by reducing overhead.,True
0602e657fac200b0fc7d3ae19361ef9ef1247d92,qtdeclarative,The optimization reduces unnecessary wait times by leveraging sub-second file time resolution when available.,False,"The optimization strategy reduces the wait time in the test by leveraging sub-second file time resolution on some systems, eliminating the need to wait a full second.",False
4d7022837c838191f6a1a5ebab52ff25aa02ae24,plasma-workspace,The optimization strategy involved reducing unnecessary updates by checking if the matches have actually changed before updating the model.,False,The optimization strategy involved improving the efficiency of model updates by reducing unnecessary operations in the `RunnerMatchesModel::setMatches` function.,False
11776aa0cfa7d007ad1799b1553bdcbd830e5010,selinux-kernel,"The optimization avoids redundant function calls in the exit fastpath by handling forced VMX preemption timer exits directly, reducing unnecessary processing.",False,"The optimization strategy avoids redundant function calls in the fastpath by handling VMX preemption timer VM-Exits directly, thus reducing unnecessary overhead.",False
a8f69b3e1aee98d15547a5598a11db37adec75af,libical,The optimization avoids unnecessary iteration over all bits in a bit field by directly checking relevant positions.,True,The optimization strategy avoids iterating all bits in a days bit field by selectively processing only relevant bits in the filter_bysetpos() function.,True
b2270eff985b94d1e4fedc89587ea98253645ca1,uTox,The optimization strategy involved reducing redundant computations in the mouse wheel scroll logic to improve responsiveness.,False,The optimization strategy involved improving the performance of mouse wheel scrolling by modifying the scroll_mwheel function to handle scroll events more efficiently.,False
165dfbdaafd188b1250d288289983b5f54795f10,partclone,The optimization strategy moves the initialization of the CRC32 table outside of the loop to eliminate redundant checks of the init flag for every byte.,True,The optimization strategy involved moving the crc32 table initialization outside of the loop to avoid redundant checks on the initialization flag for every byte.,True
ffa52bd3e8a7581f17b694d542bed49af53f3762,cutter,The optimization removes an unnecessary `std::move` to enable return value optimization (RVO) by adhering to the conditions required for copy elision.,True,The optimization strategy involved removing an unnecessary `std::move` to enable return value optimization (RVO) and avoid preventing copy elision.,True
f8674db931c9b743874ae9d09d5cf48029dcec4b,kdeconnect-kde,The optimization strategy involves caching and reusing a QRegularExpression object instead of recreating it for each function call to reduce overhead.,True,The optimization strategy involves reusing a pre-created QRegularExpression object instead of recreating it repeatedly to reduce overhead.,True
85030421afea5e81f71bb2cc2c9dfeeac9e411d1,Prima,The optimization strategy involved refining the growMode handler routine by eliminating unnecessary function calls and adding checks to improve efficiency.,False,The optimization strategy involved eliminating unnecessary void calls and making minor adjustments in the growMode handler routine to improve performance.,True
afc3d38954d1f8b43a42b11a6c4b74b567b288ee,firebird,"The optimization strategy prioritizes using an equal-node for index retrieval over other node types (geq, leq, between) when available, to improve query performance by leveraging more efficient indexing.",False,"The optimization strategy prioritizes using an equal-node over other nodes (geq, leq, between) for index retrieval to improve performance.",False
738662dbedd55690cff26e171689ce9e40720e47,f32c,The optimization strategy used a binary search on half words and bytes in the word-aligned path of strcmp() to improve performance.,False,The optimization strategy involves using a binary search on half words and then bytes in the word-aligned path of strcmp() to improve performance.,True
ad9ac1d12f01c434e7f7c3855f7af1fe158e639e,bareos,"The optimization corrected the Device Spool Size calculation to account for despooled data when using secure erase, improving spooling efficiency.",False,"The optimization strategy involved correcting the Device Spool Size calculation to account for the despooled amount of data when secure erase is enabled, thereby improving performance by allowing more than 128k blocks to be spooled/despooled.",False
9b3a87f37c4e829386ceb10de974d409a31adcf7,hurd,The optimization strategy replaced `memmove` with `memcpy` to improve performance by avoiding unnecessary overlap checks.,True,The optimization strategy involved replacing `memmove` with `memcpy` to reduce overhead by avoiding unnecessary checks for overlapping memory regions.,True
7c8a26030faad65d49ecd06a4e51344368b79d8d,llvm-leg,"The optimization strategy adds a constant GEP check before using SCEV to reduce unnecessary computations in the `isConsecutiveAccess` function, improving compile time.",False,"The optimization strategy involves adding a simple constant-gep check before using SCEV to reduce the number of times SCEV is invoked, thereby improving compile time.",True
bd4a94847324f939187edc214fb3adfeb06b84b6,MathGeoLib,The optimization eliminates an unnecessary copy operation in the `float4x4::Inverted()` function by directly using SSE instructions for inversion.,True,The optimization strategy involved removing an extra copy operation in the `float4x4::Inverted()` function when using SSE instructions.,True
6abe341558abec40c9c44d76e7fb4fb3978e894b,gccrs,The optimization strategy involves comparing string lengths before performing a full content comparison to avoid unnecessary slow operations.,True,The optimization strategy involves comparing string lengths first in the `operator==` for `basic_string` to avoid unnecessary slow string comparisons when lengths are unequal.,True
1c86c7ad9c38b5ef1baa19677b78076889b60e7f,glsl-optimizer,The optimization strategy involved simplifying the logic and reducing redundant computations within the `_savage_texnorm_stage` function to improve performance.,False,The optimization strategy involved simplifying and optimizing the `_savage_texnorm_stage` function to improve performance.,False
25c456719d40272e5da224021cdddc76bdc48840,linux-rockchip,The optimization adjusts the calibration step size for the CRU PVTPLL to improve stability by avoiding excessive adjustments.,False,The optimization strategy involves adjusting the calibration step size for the pvtpll frequency to prevent instability caused by overly small steps leading to excessive adjustments.,False
fa086af1c9ffe567edbd30b579d62ace048d935e,DoubleAction,The optimization strategy involved reducing the duration or intensity of a slow-motion effect to improve performance.,False,The optimization strategy involved reducing the slow-motion effect in the game to improve performance.,False
7bb8f336c57278206077357f39dbd98bba6c92c3,ain,The optimization avoids redundant checks for witness scripts within P2SH scripts by leveraging prior knowledge of their acceptability.,False,The optimization strategy involves avoiding redundant checks for witness scripts within P2SH scripts by leveraging prior knowledge that P2SH script versions of witness keys/scripts are already acceptable.,False
f7c26d40abb3149f473a6c384fd94ba8c2f62b48,owt-deps-webrtc,The optimization strategy involved reducing unnecessary iterations or operations in the test logic to improve efficiency.,False,The optimization strategy involved resolving a TODO and improving efficiency in the TransportFeedbackAdapterTest by reducing unnecessary operations.,False
55007b042dc1a2d488dcefcfba16264f57ea89a8,dxvk-remix,The optimization strategy involves resetting a busy flag immediately after emitting a Flush command to prevent unnecessary stalls in games that frequently call WaitForResources.,False,The optimization strategy involves resetting a busy flag immediately after emitting a Flush command to reduce performance regressions in games that frequently call WaitForResources.,False
6dae535fed5bce2d910a410dca368edc3f6f2993,stellar-core,The optimization strategy involved reserving the correct size for a container in the `encode_b32` function to avoid unnecessary reallocations.,True,The optimization strategy involved reserving the correct size in the `encode_b32` function to avoid unnecessary reallocations.,True
e1b978b4c783b105e860ee19f32a558dd73c77ed,NyuziProcessor,"The optimization strategy involved replacing a less efficient sorting algorithm with a more efficient one, likely reducing time complexity.",True,The optimization strategy involved improving the sorting algorithm in the `SliceArray.h` file to enhance performance.,False
7d06955b377b9098416f847426543d644c8fafae,simple_lmk,"The optimization strategy modifies the condition in `tsk_is_oom_victim()` to check for the `TIF_MEMDIE` flag instead of an OOM reaper artifact, enabling faster termination of processes killed by Simple LMK.",False,"The optimization strategy involved modifying the `tsk_is_oom_victim()` function to use the `TIF_MEMDIE` flag instead of checking for an OOM reaper artifact, enabling faster memory allocation fast-pathing for processes killed by Simple LMK.",False
25f8c7889211d193325e7df688bff3f8c54d9000,librdkafka,The optimization strategy involved reducing the number of messages and increasing their size to decrease processing overhead and speed up the test execution.,False,The optimization strategy involved decreasing the message count and increasing the message size to speed up the test.,False
57138465df45d9145ea77b6dcb1e0b5842a6824e,UEVR,The optimization strategy reduces latency and overestimation of poses by refining pose update logic and timing adjustments in the OpenXR runtime.,False,The optimization strategy involved reducing latency and minimizing overestimation of poses in the OpenXR runtime by refining the pose update logic.,False
3bdc6498c4c012a8fbf9cfa2756a5b07f56f1540,LuaJIT,The optimization limits Common Subexpression Elimination (CSE) for IR_CARG to improve loop optimization effectiveness.,False,The optimization strategy limits common subexpression elimination (CSE) for IR_CARG to improve loop optimizations.,False
89f4d27c1bcd9d4f8f1590f6d29ae3b77ca2f41a,linux-rockchip,"The optimization strategy restricts I/O plugging to only occur when necessary, specifically when there are active non-weight-raised queues, to improve throughput without compromising latency guarantees for weight-raised queues.",False,"The optimization strategy involves restricting I/O plugging to only when non-weight-raised queues are active, reducing unnecessary plugging and improving throughput in random I/O scenarios.",False
6a567e936b438ab3f1a1a82f4ede93481d89b4e1,metamage_1,The optimization reduces the frequency of calling `kill()` by avoiding unnecessary repeated calls after a certain operation count threshold.,False,"The optimization strategy involved reducing the frequency of `kill()` calls by resetting the counter after the first call, improving performance for long-running Perl processes.",False
f949474be5f76657ecd049ad02c5ef8e849c28c9,GPU-Raytracer,The optimization strategy involved reducing memory allocation for unused materials by conditionally skipping their initialization.,False,The optimization strategy involved reducing memory usage by removing or deallocating resources for unused materials.,False
48b0a045da0ef7c07b59c529fc9a5c5f682853b6,rocksdb,The optimization strategy involved reducing the number of levels in the database initialization to avoid unnecessary computational overhead in the `ComputeCompactionScore()` function.,False,"The optimization strategy involved reducing the number of levels in the database from 65,000 to a smaller number to significantly speed up the ComputeCompactionScore() function and the overall test performance.",False
9846dfa821eaba98556192ab9c32be4011846568,cryptominisat,The optimization strategy involves selectively disabling sub-problem finding and enabling a faster library-type startup to improve solver initialization performance.,False,The optimization strategy involves selectively disabling sub-problem finding and enabling a faster startup for sub-problems by using a library-type startup configuration.,False
30909f865bd6ad07653089736540115e3cda11ae,android_kernel_brcm_rpi,The optimization replaces an atomic subtraction operation with a compare-and-swap (cmpxchg) to reduce race conditions and simplify handling of ownership references during poll arming.,False,The optimization strategy replaces an atomic subtraction with a compare-and-exchange (cmpxchg) operation to reduce race conditions and avoid underflows when releasing ownership references in poll arming.,True
f64e95dfe0c4257ee7a238ac25febedd2235025e,genometools,The optimization strategy involved reducing redundant computations by caching and reusing results within the hash map implementation.,True,The optimization strategy involved modifying the hashmap implementation to reduce overhead in the `gt_firstcodes_countocc_increment` function.,True
0ed322329339a30c6bbd81ba784bb54966e4bd6c,arm-trusted-firmware,The optimization strategy reduces the memory mapping time by limiting the `memmove` operation to only the necessary portion of the table instead of the entire table.,False,The optimization strategy reduces the time required to add a memory map region by finding the last entry marker in the mapping table and limiting the memmove operation to only the necessary portion of the table.,True
62d9811b0374021efcacfffc698785aaf5e02f95,kernel-copyleft,The optimization strategy involved removing an unnecessary frame delay during the start of the camera stream to reduce latency.,False,The optimization strategy involved removing a frame delay at the start of the stream to reduce latency in the `msm_sensor_start_stream` function.,False
7721b0bed57038b342655220ad9bc32f4599f174,pango,The optimization strategy avoids redundant computation by directly using the extents of the first line from `_get_extents_internal` instead of recalculating the baseline separately.,False,"The optimization strategy involves directly using the extents of the first line from `_get_extents_internal` to compute the baseline, avoiding redundant computations in `pango_layout_get_baseline`.",False
2004612332a571936d2a469a4297aaa28cdaf531,SoundPusher,The optimization strategy reduces latency by explicitly requesting a smaller buffer size for audio processing.,False,The optimization strategy involved reducing the buffer size from 512 to 128 frames to decrease average latency in audio signal processing.,False
3debe3a8ecea6186375a54ee7a93282fd98fcf17,FastDoom,The optimization strategy involved simplifying the logic for calculating a 16-color lookup table to reduce unnecessary computations.,True,The optimization strategy involved improving the calculation of a 16-color lookup table (LUT) by reducing redundant computations.,True
5acb5c743078176eb05d033e1f6584019300935e,CppCommon,The optimization strategy involved reducing redundant system calls by caching the local time zone information in the `Timestamp::local()` function.,False,The optimization strategy involved improving the performance of the `Timestamp::local()` function on Linux by reducing system call overhead and optimizing time calculations.,False
7482ad7272faecc1e306b5671f1300838cacce08,sycl,"The optimization strategy reverted a patch to avoid placing relocations in the constant pool, which was unnecessary for correctness and could have negatively impacted fast-isel performance.",False,"The optimization strategy involves reverting a patch that avoided placing relocations into the constant pool in fast-isel, as it was unnecessary for correctness and could degrade performance by exiting fast-isel mode.",False
2eb6e70e26b61891c159ff74a1eca381e2a567a5,TranslucentTB,The optimization strategy involved replacing direct pixel manipulation with PixelBuffers to enhance drawing speed by leveraging more efficient memory handling.,False,The optimization strategy involved replacing existing drawing mechanisms with PixelBuffers to enhance drawing speed.,True
6ceb712e2699a493da544b1755f6f73d62930f9b,gccrs,The optimization strategy avoids redundant creation of identical type variants by refining the reuse condition for aligned types based on the TYPE_USER_ALIGN flag.,False,"The optimization strategy involves modifying the type reuse check in `check_aligned_type` to ensure that only types with `TYPE_USER_ALIGN` set are considered for reuse, thereby reducing the creation of redundant type variants.",True
b7346a1ed25d5091618f9d76c5f270e9408ba910,libwebp,The optimization strategy involved simplifying the logic for reading symbols to reduce unnecessary computations during decoding.,False,The optimization strategy involved reducing the number of branches in the `ReadSymbol` function by simplifying the conditional logic to improve decoding speed.,True
75f36180fe1eabdb72b346a460dccfbcb81836bf,Quake3e,The optimization strategy involved implementing x86-specific QVM (Quake Virtual Machine) optimizations to improve performance by leveraging architecture-specific features.,False,The optimization strategy involves adding x86-specific QVM (Quake Virtual Machine) optimizations to improve performance.,False
5d59037a698493b54fa1837de26c6396fbfb72ea,calligra,The optimization strategy involved reducing unnecessary computations or iterations when inserting a series of elements.,False,The optimization strategy involved reducing the overhead of inserting a series of elements by improving the efficiency of the insertion process.,False
fc3bd3f70de318643289a4696931723c466b9959,OpenJK,The optimization strategy used is replacing a linear search with a direct index-based access for faster retrieval in a vector.,True,The optimization strategy involved improving the retrieval of TK_VECTOR tasks by reducing unnecessary checks and streamlining the lookup process.,True
f18a0a242d654b5835f9210878699493a0c0b053,foundationdb,The optimization strategy involves immediately freeing mutation memory after sending mutations to reduce memory usage and improve performance during the restore process.,False,The optimization strategy involves freeing memory allocated for mutations immediately after they are sent to reduce memory usage and improve performance.,True
7ab345a8973017c89a1be87b6c8722d1fee1fd95,kmsan,"The optimization avoids unnecessary updates to `ug->dummy_page` by performing the update only when `memcg` changes, reducing redundant operations.",False,"The optimization strategy involves moving the update of `ug->dummy_page` to only occur when `memcg` changes, reducing unnecessary updates.",True
6994dd82c4f8c3f686f73801fc92a859a5eecb7f,flac,The optimization strategy involved restructuring the loop to reduce redundant calculations and improve cache locality.,True,The optimization strategy involved reducing redundant calculations by precomputing a value outside of a loop to avoid repeated computation within the loop.,True
084cbb2ec3af2d23be9de65fcc9493e21e265859,kmsan,The optimization strategy involved recording the RX queue before sending it to NAPI to avoid performance degradation in generic XDP with multiple queues.,False,The optimization strategy involved recording the RX queue before sending it to NAPI to avoid performance degradation in generic XDP with multiple queues.,False
70a0c3247abb263add9ca73661bc54b249fd3ed0,intel-graphics-compiler,The optimization strategy avoids retrying compilation and uses the minimum SIMD size to reduce compile time.,False,The optimization strategy avoids retries and uses the minimum SIMD size to reduce compile time.,False
b8dcca2423a005f0aed66d7d533346eba1c20fe1,cryptominisat,The optimization strategy reverses the order of checks to prioritize a faster operation (getting length) over a slower one (getting glue).,True,The optimization strategy involves reversing a check to prioritize faster length retrieval over glue retrieval to improve speed.,True
a2de8e52bb6c13baf5f2323eba0ca356f1294f88,rocksdb,The optimization strategy involved replacing an inefficient `push_back` call in `emplace_back` with perfect forwarding to reduce unnecessary object copies and improve performance.,True,The optimization strategy used perfect forwarding in the `emplace_back` function to improve performance by avoiding unnecessary copies or moves.,True
66a013879cdb304c214e94a49d2129363f29e174,kernel_xiaomi_sm8250,"The optimization strategy avoids unnecessary expansion of address ranges for PMD sharing by aligning the range adjustment logic with PUD boundaries, reducing excessive cache flushing and MMU notifier calls.",False,"The optimization strategy involves refining the address range adjustment logic to avoid unnecessary expansion, thereby reducing excessive cache and TLB flushes.",False
ce6505dc103157c601d9448267ab1733dfd85e26,parrot,The optimization avoids unnecessary string concatenation operations when the joiner is empty by directly returning the concatenated strings.,True,The optimization strategy involved handling the case of an empty joiner more efficiently in the `Parrot_str_join` function to improve performance.,True
f8075af76297ab4441d64ebcb81be5f20f81f2f3,qcad,The optimization avoids unnecessary distance calculations for entities located inside viewports by adding a conditional check to skip the computation when not needed.,False,The optimization strategy avoids calculating distances for entities inside viewports when it is unnecessary.,False
c5f6087354f0fc5448fdc0505ebdd17255e5eb31,lpython,The optimization strategy replaces direct multi-dimensional array assignments with a loop-based approach to improve performance by avoiding unnecessary memory operations.,False,The optimization strategy involves replacing direct multi-dimensional array section assignments with a loop-based approach to improve performance.,True
ee4caeda308c09b3d23a69d5a479498737d5808c,Octave,The optimization strategy used was to pre-allocate the output matrix in powers of 2 to reduce the overhead of frequent resizing during dynamic growth.,True,"The optimization strategy involves pre-allocating a larger array in powers of 2 to avoid constant re-sizing of the output matrix, improving performance by reducing memory reallocation overhead.",True
6b274863bca832165bc35509087604dea0c0c42d,kernel_xiaomi_sm8250,The optimization strategy ignores boosting for minimum watermark checks in specific allocation requests to reduce atomic allocation failures.,False,The optimization strategy involves ignoring watermark boosting for specific allocation requests to avoid atomic allocation failures.,False
b4d96b4c4c37e5195affaf0d0662b4ab71c47c92,mythtv,"The optimization strategy involves modifying the SQL query to count rows using the primary index by counting the `id` column, which is expected to improve performance for the InnoDB engine.",False,The optimization strategy involves changing the row count query to count the primary key (id) instead of all columns to encourage the use of the primary index for better performance.,True
536e9973e30d70fd510e5ab6e423ef75248ed582,rocksdb,The optimization removes an unnecessary assertion in a critical path to reduce the time complexity of insert operations from O(n²) to O(n) in debug mode.,False,"The optimization strategy involved removing an assert statement that caused O(n^2) complexity in debug mode, improving the performance of the Insert operation to O(n).",True
75b18d44a65f43b4358b294e529aa1b2bab923c5,postgresql_modified_for_babelfish,"The optimization strategy reduces overhead by replacing durable_rename() with rename() for archive status files, trading durability for performance while relying on existing archiver resilience to handle potential re-archiving after crashes.",False,The optimization strategy involves replacing `durable_rename()` with `rename()` to reduce the overhead of renaming archive status files by avoiding durable persistence to disk.,False
9f246298e2f0af3973918a0dac0c5f46bc0993c0,rocksdb,The optimization strategy involved iterating over a vector by reference instead of by value to reduce copy overhead.,True,The optimization strategy involved iterating over a vector by reference instead of by value to reduce copy overhead.,True
1faf17b526a4629676581629d2ac6a9b6db029f9,deadbeef,The optimization strategy involved replacing integer calculations with floating-point operations to leverage faster float-to-integer conversion.,True,The optimization strategy involved using the float type instead of integer type for faster floating-point to integer conversion.,True
b8747538a529a5e51638181eedb9f3df9cbdfdca,SLiM,The optimization strategy used is to reduce unnecessary computations by directly returning results for single-codon cases instead of iterating through all codons.,False,The optimization strategy involved speeding up the processing of single-codon cases by reducing unnecessary computations or iterations.,False
d90850170e6468831a559be3ef3189fc64b338d5,amgcl,The optimization strategy involved restructuring the communication logic to reduce redundant data exchanges during subdomain deflation setup.,False,The optimization strategy involved improving the performance of subdomain deflation setup by making slight modifications to the communication function.,False
5ab02a96b1f998440666e04c568ef66c21bec2e4,ensmallen,The optimization strategy involved adjusting specific test parameters to reduce runtime without altering the core functionality of the test cases.,False,The optimization strategy involved tweaking optimization parameters to significantly improve speed.,False
326f128b941d54c0277178f87e784da8ce2190eb,angle,The optimization strategy involves preferring host cached memory for buffers to improve performance during vertex data upload by reducing the overhead associated with uncached memory access.,False,The optimization strategy involves preferring host cached memory over uncached memory for buffers to improve performance during vertex data uploads.,False
4011ab4f1fbef2d2025605535408d81f60d0d504,cmssw,"The optimization strategy involved removing the dependency on DQMStore for multi-threading, thereby reducing potential bottlenecks related to thread synchronization.",False,The optimization strategy involved removing the use of DQMStore in a multi-threading context to improve performance.,False
298bd0b0c674206f2ba7071943164c2cf699cbf3,pulseaudio,The optimization strategy involves dynamically adjusting the max_rewind and max_request values in response to latency changes to improve resource allocation efficiency.,False,The optimization strategy involves dynamically adjusting the `max_rewind` and `max_request` parameters in response to latency changes to improve performance.,False
ecf4c2ec6ba6dc39e72c6b37f2a238e28fec2dc1,git,The optimization avoids unnecessary offset-based matching attempts by leveraging the caller's knowledge of required match positions (beginning or end).,False,"The optimization strategy involves skipping unnecessary offset checks when the hunk is known to match at the beginning or end, streamlining the matching process.",True
b168c255aae848f730a12b9cb16e88681a0c6809,blender,The optimization strategy used is leveraging newer OpenGL versions to reduce the overhead of unbinding all textures by minimizing redundant operations.,False,The optimization strategy involves improving the performance of the `GPU_texture_unbind_all` function by leveraging newer OpenGL versions to reduce unbinding overhead.,False
385ee3d5c110a1643be2d4625754790f72bfd7f8,pgcopydb,The optimization strategy involved reusing the same database connection within each LOB worker instead of creating a new connection for every object copy to reduce overhead and improve migration speed.,False,The optimization strategy involves reusing the same database connection within each LOB worker instead of creating a new connection for every object copy to improve migration speed.,True
f5a7a3b1dc4088be4ca1a845832c76e60446ba64,ceph,The optimization strategy involved replacing a potentially less efficient key-value retrieval method with a direct single-key LevelDB::get() call to improve performance in heavy workloads.,True,The optimization strategy involves using a single-key `LevelDB::get()` method to improve performance in heavy key/value workloads.,True
f13ef7754f724842dbf5ae6d85d0604fff0d1a84,android_kernel_oneplus_msm8998,The optimization strategy involved reducing remote CPU cache line references when reporting per-irq statistics to improve performance.,False,The optimization strategy involved reducing remote CPU cacheline references when reporting per-IRQ statistics to improve performance.,False
551a34ccf2da24852acce3feae808ed1c30550d9,scribus,The commit likely involved a generic optimization such as loop restructuring or condition reordering to improve performance without altering functionality.,True,The commit message and repository details are insufficient to determine the specific optimization strategy used.,True
fad3ec7ce4fc7c2b862014357be2dd660e5a5d3d,samsung-exynos9820,The optimization removes an incorrect branch prediction on a frequently used code path to improve performance by aligning the prediction with actual runtime behavior.,False,The optimization strategy involved removing the `unlikely()` branch prediction for the `ep->ovflist` check to improve performance by reducing incorrect branch predictions.,True
5875d5deab8d2f0419a376628a66782959546ea1,silifuzz,The optimization avoids unnecessary byte-wise CRC updates by checking if the remaining input size is a multiple of sizeof(uint64_t).,True,"The optimization strategy avoids unnecessary byte-wise CRC updates when the remaining input size is a multiple of sizeof(uint64_t), leveraging alignment for efficiency.",True
0cea7b5056ccf34ad9f9b298127301fc846cc3ad,gdal,The optimization strategy avoids unnecessary probing of non-existent files by modifying the logic to prevent invalid file access attempts.,False,The optimization avoids probing non-existing files by skipping unnecessary checks for specific URL patterns.,False
5253531a5d510f7962e964255103fb232d267ba2,mesos,The optimization strategy involved reducing the `executor_shutdown_grace_period` to decrease test execution time by allowing faster shutdowns.,False,The optimization strategy involved reducing the `executor_shutdown_grace_period` to speed up the test execution.,False
bf0569765349701b83a3902804f22bcb1d51e0c7,mpv,The optimization strategy prefetches subtitles during track switches to improve loading performance by overlapping operations.,False,The optimization strategy involves prefetching subtitles on track switch to improve performance by reducing latency and ensuring smoother playback.,False
93548ce8f451a701ad0967ba705f04fef80aa11a,rocksdb,The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying of data.,True,The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.,True
fb643c9b0f764534dac34833c1dfa9a86684ec41,quda,The optimization avoids incrementing the `n_calls` counter during the initial tuning phase to prevent unnecessary overhead.,False,The optimization strategy involves avoiding unnecessary increments of a counter (`n_calls`) during the initial tuning phase to reduce overhead.,True
c3746317e21702a6fc53b13689df69fe78b74d34,xbmc,The optimization strategy involved reducing unnecessary string operations and improving memory handling within the GetHomePath function.,True,The optimization strategy involved replacing a string concatenation operation with a more efficient method to reduce overhead.,True
7e0f51cb445be8d3aee80e433ed8da4a33ad0157,android_kernel_oneplus_msm8998,The optimization strategy involved adding `unlikely()` macros to failure paths in the `__chk_range_not_ok()` function to improve branch prediction and reduce kernel text size.,True,The optimization strategy used was adding `unlikely()` macros to failure paths in `__chk_range_not_ok()` to improve branch prediction and reduce kernel text size.,True
197f573f3bd830bbc4dc277e7c8b8cfaca65e14a,tensorflow-directml,The optimization strategy reduces memory waste by dynamically shrinking the buffer capacity of the GCS cache after it is filled.,False,The optimization strategy reduces memory waste by shrinking the buffer capacity after a cache fill operation completes.,False
b3d7b1cbe7afdc6a63bbcbe938e8639deedb04a1,peercoin,The optimization avoids performing ECDSA signing in the fee calculation inner loop to reduce computational overhead and improve performance.,False,The optimization strategy involves moving ECDSA signing operations outside of the fee calculation inner loop to improve performance and ensure correct fee setting.,False
530475dce8d3c4e94e0737be0dc48757a78bc475,dolphin,"The optimization strategy used is to generate more efficient assembly code for division operations by positive multipliers, reducing instruction count and improving performance.",False,The optimization strategy involves generating slightly better code for division by a specific positive multiplier (30307) by reducing the number of instructions and improving instruction selection.,False
d5daaa72fa94a6d7e122b6e1618dad90fe1d1065,redot-engine,The optimization strategy involved reducing redundant drawing operations in the ItemList by skipping unnecessary render calls for items that are not visible or do not require updates.,False,The optimization strategy involved boosting the drawing speed of ItemLists with many items by modifying the `ItemList::_notification` function.,False
c73262d572ba2bf62121f19bd6aa0c60ee3b6a32,QGIS,The optimization strategy involved reducing redundant memory allocations and improving the efficiency of vertex data handling during WKB conversion to linestrings.,False,The optimization strategy involved improving the efficiency of WKB (Well-Known Binary) conversion to linestrings by reducing unnecessary computations and memory allocations.,False
5c456c4c08ac046429c38792d242dd095c50b049,rocksdb,The optimization strategy involved modifying the test logic to improve compaction speed by handling marked files more efficiently.,False,The commit optimizes compaction speed by adjusting the handling of marked files in the test utility.,False
be62a142cf0513bfa69f4837565889dcb447fae0,gem5-aladdin,"The optimization strategy involves adjusting the scheduling logic to account for tRAS latency more efficiently by integrating it into `estimateLatency` and `doDRAMAccess`, reducing unnecessary wake-ups.",False,"The optimization strategy involves adjusting the scheduling time for DRAM events by incorporating tRAS into latency estimation and access handling, reducing unnecessary wake-ups.",False
e695f61e28071f9864915315dfd1aff0fc6f618d,mysql-server,The optimization strategy involved refining the estimation of the sort buffer size by removing unnecessary space allocation and adjusting the buffer size based on a more accurate key count estimation.,False,The optimization strategy involves refining the estimation of the required sort buffer size by removing unnecessary space allocation and adjusting the buffer size based on a more accurate estimate of the number of keys to sort.,False
992abcc32db9b31a660486f1d72bbf1e7ba8807a,v8,"The optimization strategy involved reducing the number of instructions to push a frame marker onto the stack, improving both performance and avoiding potential profiler misreads.",False,The optimization strategy involves combining stack space allocation and frame marker storage into a single instruction to prevent the profiler from reading uninitialized data.,False
890b380b039cc8615d52dc91a85571af178e8bd8,sc3-plugins,The optimization strategy used is ensuring the inlining of the `Gendyn_distribution` function to reduce function call overhead.,True,The optimization strategy ensures inlining of the `Gendyn_distribution` function to reduce function call overhead.,True
fba1475f25948aebd0590436e33bb266d6e714d9,coreboot,"The optimization enables Intel SpeedStep technology to allow dynamic CPU frequency scaling, avoiding a fixed low clock speed.",False,"The optimization strategy involves enabling Intel SpeedStep technology to allow dynamic CPU frequency scaling, preventing the CPU from being locked at the minimum clock speed.",False
525800f13a4b168dc12fa62b5a8cca0ba11e95eb,icub-main,The optimization strategy involved reducing the Z distance to improve triangulation performance by decreasing computational overhead.,False,The optimization strategy involved reducing the Z distance to improve triangulation performance.,False
992e51cf8b3017b3015c441a48c4aa93060a5ce0,NanoVNA,The optimization strategy involved reducing the computational overhead by minimizing redundant calculations within the `groupdelay_from_array` function.,True,The optimization strategy involved reducing the size of the `groupdelay_from_array` function to improve performance.,True
903e7d93bc0815e4c96ec6d51127bac26e49329b,tensorflow-directml,"The optimization strategy involved caching the compiled regex to avoid recompiling it on every function call, thereby reducing overhead.",True,"The optimization strategy involved eliminating the repeated recompilation of a regular expression by caching it, thus reducing overhead and improving parsing performance.",True
d8afc8c63a4265b83ddd31f7e90fff826c7d45f2,gnsstk,The optimization strategy involved reducing unnecessary computations or iterations within the `printTime` function to improve performance.,False,"The commit addresses a performance slowdown in the `printTime` function by optimizing the handling of time string formatting, likely reducing unnecessary computations or improving algorithmic efficiency.",False
9e11c5ce633da133e0922bce2591f99d21540c4c,radare2,The optimization strategy involved replacing a linear search with a hash-based lookup to reduce the time complexity of finding reference lines.,True,The optimization strategy involved improving the efficiency of reflines handling by reducing redundant calculations and streamlining the update process.,False
c938e65768e0a80e7ea24899795878072e79b152,linux-rockchip,The optimization ensures all interrupt status bits are cleared in a stable state to prevent missed edge-triggered MSI interrupts in the EHCI driver.,False,"The optimization strategy involves ensuring all interrupt status bits are cleared in a stable state to prevent missed interrupts with edge-triggered MSI, improving EHCI performance.",False
76f631cb401fbfb5993c6958a8032db4f87881cb,kmsan,The commit optimizes the coexistence mechanism for A2DP and PAN to improve wireless and Bluetooth performance in specific environments.,False,"The optimization strategy involved updating the coexistence mechanism for A2DP, PAN, and WL to enhance performance in environments with specific APs.",False
08336691e511ea540fda5684bb3172c07f098ead,clboss,"The optimization strategy involved reducing unnecessary computations by directly returning early when a condition is met, avoiding further processing.",True,The optimization strategy involved speeding up the backing off mechanism on fuzzpercent by adjusting the fee calculation logic.,False
f2b6ecd5fef3487daf9493b25f880b52af1bf3e0,rockbox,The optimization strategy involved reordering and restructuring operations to minimize the impact of emac latency while introducing a faster interpolation routine.,False,The optimization strategy involved moving `movclrs` operations to reduce EMAC latency and implementing a faster interpolation routine.,False
d2ed0f45e76a3b930ec5db3c4832326ba7b3439b,spdk,"The optimization strategy adjusts core load calculations when moving threads by assuming proportional work distribution among remaining threads, enabling faster response to thread load changes.",False,"The optimization strategy adjusts the core load calculation by assuming that remaining threads will proportionally maintain their workload, enabling faster response to thread load changes.",False
ae7766cdace8174aac5741e13a8b2cdaf208575d,mace,The optimization strategy involved reordering the computation sequence in the element-wise operations to improve cache locality and reduce memory access overhead.,True,The optimization strategy involved reordering the computing sequence in element-wise operations to improve performance.,True
3e65652444b6e2df73f5acb813f4b4d1136ae81a,cmssw,The optimization strategy used is replacing a lookup-based check with a direct conditional comparison to improve performance.,True,The optimization strategy involved improving the lookup speed in the `isItBigPixelInY` function by enhancing the method used to determine if a pixel is large in the Y dimension.,True
26f2f7286fb8c9f7cd98768aee4a191031405f5d,pbrt-v3,"The optimization avoids tracing shadow rays to lights when the path has zero contribution, reducing unnecessary computations.",False,"The optimization strategy involves tracing shadow rays to lights only if the path has a non-zero contribution, avoiding unnecessary computations.",False
0954d4199a2387b23234a60cf4cd4b4854ce6f71,BsodSurvivor,The optimization strategy involves improving the accuracy of critical path computation in loops by including loop-carried dependencies and PHIs in height calculations.,False,The optimization strategy involves including loop-carried dependencies in height computations to more accurately determine the critical path through a loop by accounting for the latencies of the last instructions in the loop.,False
53910ddb152fbcba95a3e04b058a997c40f654ae,rocksdb,The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying and improve performance.,True,The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.,True
aa697e3e98b479f8e62d756512f5b6db427b7a84,njs,The optimization strategy involved reducing memory usage by avoiding unnecessary allocations during the splitting process of `RegExp.prototype.split()`.,True,The optimization strategy involved reducing the memory footprint of the `RegExp.prototype.split()` function by minimizing unnecessary memory allocations and improving memory management.,False
76ca7db7dbf9e324da3823fafd03e138b53c3415,darktable,"The optimization strategy involved modifying the code to better align with GCC 4.5's optimization capabilities, specifically by restructuring or tweaking the implementation to enable more efficient compilation.",False,The optimization strategy involved modifying code to trigger better compiler optimizations specifically for GCC 4.5 in the `eaw_decompose` function of the `atrous.c` file.,True
f4b396f1001f698f96e486e68f4b13b124bef713,Egaroucid,The optimization strategy involved reducing unnecessary computations by restructuring the logic for recalculating book leaves.,False,The optimization strategy involved reducing redundant calculations by caching intermediate results within the `book_recalculate_leaf` function.,True
b9067e90b22f978df1fde6d3aacbe9773f66ab48,MonetDB,"The optimization strategy involves adding a pre-scan test to avoid unnecessary plan rewrites, thereby reducing computational costs.",False,"The optimization strategy involves adding a pre-test to avoid unnecessary plan rewriting, reducing computational costs.",True
12c07edc9a4d32bd71b3dc263ac9e6810f1ab25e,mongoose-os,The optimization avoids unnecessary rendering of UDP log messages by checking if UDP logging is enabled before processing.,False,"The optimization strategy involves avoiding the rendering of UDP log messages when UDP logging is not enabled, thus reducing unnecessary computation.",True
fe488ccefff1730e2b9d0cc16650fc512e5d61b6,libvpx,The optimization strategy involved adjusting encoder speed features specifically tailored for 4K video encoding to achieve faster processing with minimal quality degradation.,False,Adjusted speed features in the encoder to optimize performance specifically for 4k video encoding.,False
26a64259b702ec3eccb785e32e473eefcc76b5a5,android_kernel_oneplus_msm8998,The optimization avoids unnecessary retry counter increments and PS filter clearing by refining the conditions under which these operations are performed in A-MPDU transmissions.,False,The optimization strategy involves avoiding unnecessary retry counter increments and clearing the PS filter only after an A-MPDU is reported as filtered to reduce extra retransmissions.,False
47c0846231b7548dfba49dddddf1639751b871b4,kv_engine,"The optimization avoids recalculating eviction thresholds unless the underlying histograms have changed, reducing unnecessary computations.",False,The optimization strategy involves avoiding unnecessary recalculation of eviction thresholds by checking if the histograms have changed before proceeding.,False
c3fc3f87b5ded6df1f11b360c47d2bdd89d735e9,tdme2,The optimization strategy involved restructuring the merge function to reduce redundant computations during flowmap merging.,False,The optimization strategy involved improving the performance of the flowmap merge operation by reducing unnecessary computations and memory allocations.,True
39e763ca876fba4449c0781f61115e063f481add,gcc,"The optimization strategy adjusts the classification of single-element interleaving loads to reduce differences between SLP and non-SLP vectorization paths, improving compatibility with unsupported permutations.",False,The optimization reduces differences between SLP and non-SLP handling by falling back to VMAT_ELEMENTWISE for single-element interleaving when unsupported permutations are encountered.,False
e8e795759bc50c9a62da9f8fdcbecfecf7ac7675,TheiaSfM,The optimization strategy involved improving the efficiency of the 5-point algorithm by reducing redundant computations or unnecessary operations within the function.,False,The optimization strategy involved improving the efficiency of the 5-point algorithm for relative pose estimation by reducing computational overhead.,False
ee1fcb2fb684a54a3969adeb22108b62b18ea751,sycl,"The optimization strategy involved applying clang-tidy fixes to eliminate unnecessary move operations on constant arguments, reducing overhead.",True,The optimization strategy involved applying clang-tidy fixes to use `std::move` for const arguments to avoid unnecessary copying.,True
647a2a9a25234d9b6089afb6000f48713d4bcb54,lighttpd1.4,The optimization strategy involved restructuring the hot path in the `magnet_attract` function to enable more aggressive inlining by the compiler.,True,The optimization strategy involved adjusting the hot path in the `magnet_attract` function to encourage more inlining by the compiler.,True
37b74ada2fe977a162425211ed87fdfa7ea293e0,kv_engine,The optimization strategy involved enabling TCP_NODELAY to reduce latency in a simple command-response benchmarking scenario.,False,The optimization strategy involves enabling TCP_NODELAY on plain connections to minimize latency for single command-response benchmarks.,True
0ecef1750dd9bf4be09ced1cf3315defa7a1b4ca,ompi,The optimization strategy involved replacing segmented algorithms with a binomial algorithm for single-element reductions to avoid unnecessary overhead and improve performance.,False,The optimization strategy involves switching to the binomial algorithm for single-element reduce operations to avoid performance degradation caused by segmented algorithms.,False
dcca4c79b0a0078e3c2eaeab62a833cebacc7932,android_kernel_xiaomi_sm8150,The optimization strategy avoids unnecessary processing of tiny out-of-order packets by skipping collapse attempts and adding early exit logic for pathological flows.,False,The optimization strategy involves avoiding expensive packet copies in tcp_collapse_ofo_queue() by skipping the collapse of tiny skbs and adding early exit logic when too many tiny skbs are detected.,False
b178089251200bd0309afcbcb06b43e7c82dc3bc,lime3ds-archive,"The optimization avoids unnecessary CPU instruction cache clearing during context switches within the same process, reducing performance overhead.",False,The optimization strategy involves avoiding unnecessary CPU instruction cache clearing during context switches from an idle thread to a thread within the same process.,False
964844821d10d4f4440c82cd99450870d1656cff,efl,The optimization strategy replaced a precise timer with a loop-based timer to potentially reduce syscall overhead on architectures lacking a vdso.,False,The optimization strategy involves replacing an exact-time-based timer with a loop-time-based timer to reduce syscall overhead on architectures without a vdso.,True
02f9110a1f0237f0ee81ea7b978dc9d2c2d5d7a7,android_art,"The optimization strategy skips the use of the `imul` instruction in x86 assembly for long integer multiplication, likely replacing it with a more efficient sequence of operations.",False,The optimization strategy involves skipping the `imul` instruction in x86 long vector multiplication to improve performance.,False
2ee639f7e30934c577c14b6b3535d4300ce39ac7,OpenMS,The optimization strategy involved simplifying or improving the loop end condition to reduce computational overhead.,True,The optimization strategy involved modifying the loop end condition to improve performance by reducing unnecessary iterations.,True
012f478c8162413e5e8320ff346dfd57a40ca9d1,cheribsd,The optimization strategy eliminates unnecessary page table checks during interrupt vector lookup to reduce overhead.,False,The optimization strategy removed unnecessary page table checks during interrupt vector lookup to improve performance.,True
19b5fbdd3d571ee7c55fabb081ebcc30bae64619,lighttpd1.4,"The optimization strategy involved reducing unnecessary data copying by adjusting how chunks are transferred, specifically by excluding packet padding during the parsing process.",True,The optimization strategy involves transferring chunks of data while excluding packet padding to reduce unnecessary data processing.,False
4c6a70091030847ca5d6933916255194483ce91f,FreeBSD-src,The optimization strategy involved increasing the number of threads in the iput taskq to improve metadata reclaim performance.,False,"The optimization strategy involved increasing the number of threads in the iput taskq to handle more iputs concurrently, improving metadata reclaim performance.",False
d3d99a0a068ff703c7f7c3c0dc0b66c9a0774fdd,ffmpeg,The optimization strategy involved replacing a buffer management function with a more efficient alternative to simplify and speed up the decoding process.,False,The optimization strategy involved replacing a custom buffer reallocation method with the more efficient and simpler `ff_reget_buffer()` function.,True
5f59f407f59f69c248be2452e5923e6735e7019a,sycl,"The optimization strategy prioritizes inlining decisions by using the number of samples as a tiebreaker before falling back to name/GUID comparison, favoring smaller functions when hotness is equal.",False,"The optimization strategy involves prioritizing call sites for inlining by using the number of samples as a tiebreaker before name/guid comparison, favoring smaller functions when hotness is the same.",True
c08d3c300b11adc9ac02d90e59c7306ea6c0bcd3,Monocypher,The optimization strategy used strength reduction by replacing multiplication with bit shifts and additions in the Chacha20 encryption loop to reduce computational overhead.,True,The optimization strategy used strength reduction to replace expensive multiplication operations with cheaper addition operations in the Chacha20 encryption function.,True
1555fe4af060b1cfc8265fe8dff50d6f59d68040,KnobKraft-orm,The optimization strategy involved enabling buffering for an image to potentially improve rendering performance of the glow effect on Mac.,False,The optimization strategy involved enabling buffered image rendering to potentially accelerate the glow effect on Mac.,True
7878f98355cd88e6161875c98331c6d12bbefab3,linux-rockchip,"The optimization avoids accessing a potentially freed `tagset` by using an alternative mapping built in the request queue, which also improves performance.",False,"The optimization strategy avoids accessing the freed `->tagset` by using the mapping built in the request queue instead, preventing use-after-free and improving performance.",False
fcff420a580d7f24cdd81aebf6c3b01c5f8785f7,ceph,The optimization strategy used was to reduce the time complexity of the gc chain size calculation from O(n^2) to O(n) by improving the algorithm's efficiency.,True,The optimization strategy reduced the time complexity of the garbage collection chain size calculation from O(n^2) to O(n) by improving the algorithm's efficiency.,True
6bc624b78369d4e8841f7b6d9effbc7e7831acb4,intel-graphics-compiler,The optimization enables reassociation of multiplication and addition operations to produce more `mad` instructions based on driver information.,False,The optimization reassociates multiplication and addition operations to produce more `mad` instructions based on driver information.,False
5b7327920b1500c33342c021e70136973972fbce,mpv,The optimization strategy involved changing the timeout value for event handling to ensure quicker processing and prevent delays caused by accumulating timeouts.,False,"The optimization strategy involves setting the timeout to 0 in CFRunLoopRunInMode to handle all pending events immediately and exit, reducing frame delay caused by accumulated timeout during high input events.",True
830a37bec5622aec9fd954e537c45594e1b66770,musique,"The optimization strategy involved replacing repeated string concatenation with a more efficient approach, likely using a single assignment or precomputed value to reduce unnecessary memory allocations.",True,The optimization strategy involved minor string handling improvements to enhance performance.,True
ff81634233e8663df583face9eae02cd5b57502b,lua-nginx-module,"The optimization avoids adding a 0-delay timer to the rbtree and instead posts it directly to the event queue, saving an epoll wait.",False,The optimization strategy involves adding events with zero delay directly to `ngx_posted_delayed_events` instead of the rbtree to avoid an unnecessary `epoll` wait.,False
e6828338f96657da653d9b54fda743b5d14d83f6,RAJA,The optimization strategy used is to combine mergesort with insertion sort for small chunks of 16 elements to reduce overhead and improve performance.,False,The optimization strategy involves using insertion sorting on 16-element chunks within a mergesort algorithm to improve performance.,True
561986f58f96e407e92979207d66d4bc864b9556,asymptote,The optimization strategy involved restructuring the loop to reduce redundant computations during global summation on the CPU.,True,The optimization strategy involved improving the efficiency of global summation operations on the CPU by optimizing the partialSums function in glrender.cc.,True
840f64b4b2d6063adebb8c7b31c9357aaaf8dd5e,vpp,The optimization strategy involved applying dual loop unrolling and manually tuning prefetch instructions to reduce cache line fill bottlenecks on specific CPUs.,False,"The optimization strategy involves applying dual loop unrolling and manually tuning prefetches to reduce bottlenecks and improve throughput on CPUs with fewer cache line fill buffers, such as Arm Cortex-A72.",False
d5699e0b08f9892f19021e453e98ab008cae753c,redpanda,"The optimization strategy involved refining the `memory_size` calculation to account for chunked_vector, improving accuracy and potentially performance.",False,The optimization strategy improves the `memory_size` calculation by accounting for the `chunked_vector` structure to ensure accurate memory usage estimation.,False
1fa5dff7d1ce7be64555e7bdc8371be562b3eac6,rocksdb,"The optimization strategy reorders the writers list to allow a leader to commit more transactions in a batch, thereby maximizing throughput and reducing IOPS.",False,"The optimization strategy involves reordering the writers list in the `WriteThread::EnterAsBatchGroupLeader` function to allow the leader to process more commits, thereby maximizing system throughput and reducing IOPS.",False
ffd49ba28c6f9938c2c6c71509e6dd5ce3574279,circt,"The optimization strategy involves restructuring the execution of CSE and Canonicalization passes to operate on FModuleOp, enabling better parallelization by leveraging the compiler's ability to process distinct IsolatedFromAbove operations concurrently.",False,The optimization strategy involves nesting CSE and Canon passes to run on FModuleOp to increase compiler parallelization.,False
2d111c73d9f798727b561878af6ccf991f3a9980,TortoiseGit,The optimization strategy involved reducing unnecessary iterations or operations during the revert renaming process to improve performance.,False,The optimization strategy involved speeding up the process of reverting renames by improving the efficiency of the revert operation.,False
887e0e9e161382051e77ebd9bde8d23a016c182c,NyuziProcessor,The optimization culls triangles outside the view frustum to avoid unnecessary processing.,False,The optimization strategy involves culling triangles that are outside the view frustum to reduce unnecessary rendering calculations.,False
3e23c26d5a82fccf4b40bb07055566f8b54553f4,SkyEmu,The optimization strategy avoids redundant calls to `strlen` on the same string by caching its result.,True,The optimization strategy involves avoiding repeated calls to `strlen` on the same string to reduce redundant computations.,True
366f6292ee8d171383dcc5a50eb5dc02bb795f70,v8,The optimization strategy involved re-enabling a previously disabled feature (IC support for namespace accesses) to restore performance improvements.,False,The optimization strategy involved re-enabling IC (Inline Caching) support for namespace accesses to restore baseline performance after testing.,False
0f749322d03b1f13e7d9202d571da46b29ce32b4,rusefi,The optimization strategy involved reducing unnecessary polling iterations by introducing an early exit condition based on a timeout.,False,The optimization strategy involves speeding up the polling status function by implementing a timeout exit mechanism to reduce unnecessary waiting.,True
03cf57db62cb6234539a770f6b54f67c562d5232,scylladb,The optimization strategy involves initializing thread-specific static instances of `std::random_device` once to avoid the overhead of constructing it repeatedly in the `gensalt` function.,True,The optimization strategy involves initializing thread-specific static instances of `std::random_device` once to avoid the overhead of repeated constructor calls during every invocation of the `gensalt` function.,True
2356e47b9b6f7486373b3da0b1a5d2902fe0839c,Paddle-Lite,The optimization strategy involved improving the matrix multiplication implementation for XPU by leveraging more efficient memory access patterns or hardware-specific optimizations.,False,The optimization strategy involved improving the matrix multiplication (matmul) implementation on XPU hardware to enhance performance.,False
025b85b4ac078110302c039556e4c12ba8e7a731,rocksdb,The optimization strategy involved reducing the computational workload in a test case by decreasing the amount of data processed to avoid timeouts caused by slow compression algorithms.,False,The optimization strategy involved reducing the amount of work performed by bzip in the test to avoid timeouts by decreasing the workload.,False
5154894e093b2c3652f5f35fb32b9fd75486ddd4,httpd,The optimization strategy involves immediately destroying buckets after they are used to reduce memory consumption proportional to the response size.,False,The optimization strategy involves destroying buckets immediately after they are used to reduce memory consumption proportional to the size of the response.,False
169c935c243782ba615de0b36947b45fa3259623,rockbox,The optimization strategy involved restructuring the FLAC-codec buffer handling to avoid unnecessary data copying by directly managing memory allocation and usage.,False,The optimization strategy involved modifying the FLAC-codec buffer requesting to eliminate the need for extra copying.,False
0e09f5f3c9dbefc9caa8084691e3ce369e2d181b,buddy_alloc,The optimization strategy reduces unnecessary operations by utilizing all suitable tree depths instead of just the last one in the `buddy_toggle_virtual_slots` function.,False,The optimization strategy involves reducing the number of operations in `buddy_toggle_virtual_slots` by utilizing all suitable tree depths instead of just the last one.,False
f7d7c246b8b76cbd4440b9c1665f0ccaa57e9880,theseus-ship,The optimization strategy replaced a functor-based search with a const-iterator loop to reduce overhead and improve performance in checking a large list of windows.,True,The optimization strategy replaced a functor-based loop with a const-iterator-based loop to reduce overhead when checking a large list of windows.,True
9bd0e887ae539498cd832b7adc66a08a751477f4,QGIS,The optimization strategy used was replacing a QList with a QSet to improve the performance of field value listing by leveraging faster lookup times.,True,The optimization strategy used involves replacing a list with a QSet to speed up the listing of field values in the search dialog by leveraging faster lookup times.,True
94b4194b11a6f04a056b05d504b734492c4967ad,BambuStudio,The optimization strategy involved improving the efficiency of traversing extrusions by reducing redundant calculations or iterations in the `traverse_extrusions` function.,False,The optimization strategy involved improving the efficiency of handling overhangs in the arachne algorithm by refining the traversal of extrusions.,False
790de7f47b7919f944dfb39956405c34b4bb486b,hackrf,The optimization strategy involves interrupting the event handling thread directly instead of waiting for a timeout to improve responsiveness and reduce latency.,False,The optimization strategy involves interrupting the event handling thread immediately rather than waiting for a timeout to achieve a faster exit.,False
385d441d0ee8643d081e07d629ca99d1e20d20e2,MySensors,The optimization strategy involved reducing unnecessary data processing during the signing presentation phase to improve performance.,False,The optimization strategy involved speeding up the signing presentation phase by improving the signing process in the `signerPresentation` function.,False
afee2380c105c37e440aaa9ec588cd27189bc18e,lustre-release,"The optimization strategy replaces a potentially slower `memcmp()` with the more efficient `memchr_inv()` to check if a memory region is all zeros, reducing cache and CPU overhead.",True,"The optimization strategy replaces `memcmp()` with `memchr_inv()` to check if a memory region is all zeros, leveraging a potentially faster and more cache-efficient method.",True
6f8ba0f8128e42ae9bb34b70d2d6f72cdda7ad0b,despacer,"The optimization strategy used SIMD (Single Instruction, Multiple Data) instructions to improve the performance of a function by processing multiple data elements in parallel.",True,The optimization strategy involved improving the comparison logic in the `despace_ssse3_lut_1kb` function to enhance performance.,True
0d706a22479dd972f47a680a6a4bc78d49e3cea2,slurm,The optimization strategy used was to replace multiple individual memory copy operations with a single `memcpy` call to improve efficiency.,True,The optimization strategy used was consolidating multiple memory copy operations into a single `memcpy` call to reduce overhead.,True
abf6ff5787c376884b1638a69cf45472b3d32c56,SCP-firmware,The optimization strategy involved removing unnecessary function calls to reduce memory usage.,False,The optimization strategy involved removing calls to `fwk_module_check_call` to reduce memory footprint.,False
bbea256f4e88987dde81b3eeecb9c72449381be1,brltty,The optimization avoids unnecessary blinking of capital letters by directly setting the text attribute without toggling.,False,The optimization strategy involved improving the efficiency of handling non-blinking capital letters by reducing unnecessary operations in the `translateScreenCharacterText` function.,False
311835517791f7a69b14bbd4085e537dad94c36f,helenos,The optimization strategy involved iterating backwards through the runqueue and reducing the number of lock operations from two to one per runqueue.,False,The optimization strategy involves iterating backwards and locking each runqueue once instead of twice to reduce locking overhead.,True
65d5232209cae7d131fd97dba624b3ee7e3ad447,kvm-guest-drivers-windows,The optimization strategy reduces memory allocation by bounding the number of queues based on the actual device-offered queues rather than the maximum CPUs.,False,The optimization strategy reduces memory allocation by adjusting the queue size based on the actual number of queues offered by the device rather than the maximum number of CPUs.,False
7dd968163f7c12bcb2132792bf873133b397a2d2,kmsan,"The optimization strategy replaces the generic __bitmap_equal function with memcmp for large bitmaps where the size is a multiple of BITS_PER_LONG, leveraging architecture-specific optimizations for improved performance.",False,"The optimization strategy replaces the custom bitmap comparison logic with `memcmp` for large bitmaps, leveraging hardware-specific optimizations for faster execution.",True
c9eb186bbdb99adc21f13a503f37ffbbfe903bd9,HPCC-Platform,The optimization strategy involved improving the efficiency of removing a memory callback by reducing unnecessary operations or iterations.,False,The optimization strategy involves improving the efficiency of removing a memory callback by streamlining the process within the `removeRowBuffer` function.,False
7635d2fd7f0fa63b6ec03050614c314d7139f14a,android_kernel_oneplus_msm8998,The optimization strategy involves using a high-priority workqueue (`system_highpri_wq`) instead of a standard one (`system_wq`) to reduce latency in CPU down processing by ensuring faster execution of critical tasks.,False,The optimization strategy involves using a high-priority workqueue (`system_highpri_wq`) instead of a standard workqueue (`system_wq`) to reduce latency in CPU down processing.,True
2c165333d6db47195d79f22798a3eb6ac5279e80,akaros,"The optimization strategy involves setting the Qstarve flag to avoid expensive wakeup calls when the queue is empty, reducing unnecessary overhead.",False,The optimization strategy involves setting the Qstarve flag to track queue status and avoid expensive wakeup calls when the queue is empty.,False
082aa141b08784f4f05a70d3dbf54a645967115d,gemrb,The optimization strategy involves reducing the frequency of calls to a computationally expensive function by invoking it only when necessary.,False,The optimization strategy involves reducing the frequency of calls to the `NormalizeDeltas` function within the `DoStep` method to improve performance.,False
f577281313ab72c456208d7a94e793b8264d06d0,odgi,"The optimization strategy involves restricting the sorting process to only optimize the graph structure, avoiding unnecessary operations on other components.",False,"The optimization strategy involves restricting graph operations to only those necessary for graph optimization, reducing unnecessary computations.",False
6835dedb5bbebeadb1ee9f82f87f38a0e47e3171,BsodSurvivor,"The optimization strategy replaces a less efficient signed modulo operation with a more efficient sequence of bitwise and arithmetic operations, reducing instruction count and improving performance.",True,The optimization strategy replaces a signed modulo operation by 2 or -2 with a more efficient sequence of bitwise and arithmetic operations to reduce instruction count and improve performance.,True
f9cfc6a808c9dc3ab7366edb10368559155d5172,rocksdb,"The optimization avoids fetching an unnecessary uncompression dictionary for non-data blocks in partitioned index scenarios, reducing redundant operations.",False,The optimization strategy involves avoiding the fetching of the uncompression dictionary for non-data blocks when partitioned index and dictionary compression are enabled.,False
52283a50dcb6e88fcdaedbbcb54dfbda9ac5bbfa,ppsspp,The optimization strategy involved restructuring the file opening logic to reduce unnecessary overhead in non-async operations by avoiding redundant checks and improving timing efficiency.,False,The optimization strategy involved improving the timing of non-async open operations in the `sceIoOpen` function.,False
befafed5757fe80dd2a2e3cc3739e14a0cd11e29,cheribsd,"The optimization removes unnecessary operations on fictitious pages by leveraging their always-wired property, avoiding redundant queue manipulations.",False,"The optimization strategy removes unnecessary operations for fictitious pages by leveraging the fact that they are always wired, thus avoiding redundant attempts to remove them from page queues.",False
21900ad3e13e8533e85f4c2c21c4e56c1de9bb65,kicad-source-mirror,"The optimization strategy avoids unnecessary data copying by maintaining `std::move` semantics during function calls, ensuring efficient handling of model names.",True,"The optimization strategy used is maintaining `std::move` to avoid unnecessary copying of data, particularly in caching library models.",True
abe1c2d55511823beb9a5d2522f68804d94df7be,rhodes,The optimization strategy involved reducing the frequency of a resource-intensive operation during Bluetooth disconnection handling on the WM platform.,False,The optimization strategy involved fixing a low performance issue after a lost Bluetooth connection on the WM platform by modifying the `RhoBluetoothManager::runThreadReadData` function.,False
d9a4055174862c87c737685eb554429e2cd985d2,samba,"The optimization strategy involved correcting the ""max data count"" value in SMB transacts to a static, larger value instead of incorrectly setting it to the number of bytes being sent, thereby improving RPC client performance.",False,"The optimization strategy involved correcting the ""max data count"" value in SMB transacts to a static value of 1024 to improve RPC client performance.",False
91589d9799d38db7413b57126748cba7253fcf9a,gzdoom-rt,The optimization strategy reorders conditional checks to prioritize more likely conditions based on assumptions about the ML_DRAWFULLHEIGHT flag's rarity.,False,The optimization strategy involved reordering conditional checks to prioritize the less likely condition (ML_DRAWFULLHEIGHT flag) after more probable conditions to reduce unnecessary evaluations.,True
7f61ad79389fcd28c82f068701c3fff18bc3e4b6,gstreamer-vaapi,The optimization eliminates redundant checks by leveraging the implication that a set dmabuf allocator guarantees the internal dmabuf flag is TRUE.,False,"The optimization strategy involves removing redundant checks by leveraging the implication that a dmabuf allocator being set ensures the internal dmabuf flag is TRUE, thus eliminating the need to evaluate the allocator address.",True
2a857a4db36c50d42cc0aca8046c1101324d9948,rondb,"The optimization strategy fixed a bug in the hash calculation function to ensure correct hash values for composite keys, improving the performance of COUNT DISTINCT operations.",False,The optimization strategy involved fixing a hash calculation function to correctly compute hash values for composite keys instead of always returning the hash value of the last field.,False
ce69ca12b99952f836e0dd559eee1b7ad8506e6d,mindspore,The optimization strategy involved restructuring the logic in MinimumMaximumGrad to reduce redundant computations and improve efficiency.,False,The optimization strategy involved improving the performance of the MaximumGrad and MinimumGrad functions by refining their gradient computation logic.,False
2611f98b369358fe40134ff9fc779bca695c2361,angle,The optimization strategy involves conditionally adding the VK_IMAGE_USAGE_STORAGE_BIT only when necessary to avoid unnecessary performance overhead.,False,The optimization strategy involves conditionally adding the VK_IMAGE_USAGE_STORAGE_BIT only when necessary to avoid its negative performance impact.,False
06d9e908b2248f983b186aaf569c58e1430db85d,android_kernel_oneplus_msm8998,"The optimization ensures the ladder governor consistently checks and respects latency requirements during each idle call, rather than only during C-state promotions.",False,"The optimization strategy involves modifying the ladder governor to check and adjust C-states based on latency requirements during each idle call, rather than only during state promotions.",False
151c99b1de34c0308c444dd3fd9c78b037bb7620,swiftshader,The optimization strategy avoids redundant texture sampling calls by performing a single sample when the Lod value is uniform across all samples.,False,The optimization strategy involves reducing redundant texture sample calls by performing a single sample when the Lod value is constant across all samples.,False
620b3fa197e899e8ccc8c8dfd3993ad0518a7841,mantid,The optimization strategy involved reducing redundant calculations within the `interceptSurface` function by caching and reusing intermediate results.,True,The optimization strategy involved reducing the number of redundant calculations by caching frequently accessed values within the `CSGObject::interceptSurface` function.,True
0359b365c6aaf1303244b064acc84c493cc0e730,xen,"The optimization strategy refactors the `pv_cpuid()` function to reduce code divergence by unifying handling paths for dom0 and domU, applying consistent sanity checks, and replacing an O(M*N) loop with a direct CPUID instruction execution.",False,"The optimization strategy involved combining separate code paths for dom0 and domU in pv_cpuid() to reduce divergence and complexity, and replacing an O(M*N) loop with a real CPUID instruction for calculating CPUID.0xD[ECX=0].EBX.",False
184c8ab5342450c4ae6fc5d937f9bb06c620dcf1,mptcp,The optimization strategy involves unthrottling priority-inherited (PI) boosted threads during enqueue to prevent system deadlocks caused by runnable but unenqueued threads.,False,The optimization strategy involves unthrottling PI (Priority Inheritance) boosted threads during enqueuing to prevent system crashes caused by runnable but unenqueued tasks holding locks.,False
7011ddd6528ce75491228efc001790090a8bb947,v8,A fast-path was added to reduce the overhead of reloading accessor property information by avoiding unnecessary computations when the property information is already available.,False,The optimization strategy involves adding a fast-path for reloading accessor property information to improve performance.,True
0418d13e725acf62b7dbd851f5b4884e83aa7d72,hackrf,"The optimization strategy involved adding a dummy byte to align timing for the w25q80bv fast read command, reducing potential delays.",False,Added a dummy byte to the fast read command to improve timing synchronization.,False
cfa45836951d948eb9c4c76c5d5f97bbfbb514e3,monero,The optimization strategy involved improving the initialization speed of the `perf_timer` by optimizing the `get_ticks_per_ns` function specifically for x86 architecture.,False,The optimization strategy involved speeding up the initialization of the performance timer on x86 architecture by improving the `get_ticks_per_ns` function.,False
1315776a6bc3999df21212cd314eb8c175aec4cf,ImageMagick6,The optimization strategy involved reducing redundant memory allocations and copies by reusing buffers in the ReadProfile function.,True,The optimization strategy involved reducing unnecessary memory allocations and improving data access patterns in the `ReadProfile` function to enhance performance.,True
b27eb7cb4f5b49b9e7c24deb6c1fb52908f63703,glsl-optimizer,The optimization reorders z/stencil fetch/extract/convert instructions to reduce execution cycles.,False,The optimization strategy involved reordering z/stencil fetch/extract/convert instructions to reduce execution time by 10 cycles.,False
0548bf4f5ad6fc3bd93c4940fa48078b34609682,android_kernel_oneplus_msm8998,The optimization avoids unnecessary calls to `_regulator_do_enable()` by checking if a regulator is already enabled before attempting to enable it during suspend/resume operations.,False,The optimization strategy involves skipping the _regulator_do_enable() call for already-enabled regulators during resume to avoid unnecessary operations and potential hidden bugs.,True
8558457143bfa76d61e0d2f715e40ec2ddb6ffc2,rocksdb,The optimization strategy involved moving variable initialization from the constructor body to the initialization list to improve performance by avoiding unnecessary default construction and assignment.,True,The optimization strategy involves initializing member variables in the constructor's initialization list instead of the constructor body to improve performance.,True
28ae2d69ecc270c182190557ef42937fe41a0d61,lightspark,The optimization strategy involved reducing redundant static method calls by caching or preloading them for faster access.,True,The optimization strategy involved improving the performance of static method calls by preloading functions to reduce overhead.,True
e6de9130d88d7737e4334b953578c08a90458716,newsboat,The optimization strategy involved replacing a loop that appended characters one by one with a more efficient bulk append operation to reduce function call overhead.,True,The optimization strategy involved enhancing the performance of the `strprintf` function by reducing unnecessary string copying and improving memory allocation efficiency.,True
2a47628b18b8c2b9aa7a27cb64028b84054f800d,red-viper,The optimization strategy involved reducing redundant setup operations in the drc_run function by reordering and consolidating initialization steps.,False,The optimization strategy involved reducing redundant calculations and improving memory access patterns in the DRC setup function.,True
e5e886bad9e9e87b767ade3884faec1cfdec9b43,kmsan,"The optimization introduces a cached state for blocking reads to eliminate unnecessary tree searches, improving performance by directly accessing the required state.",False,"The optimization strategy involves adding a cached state for blocking reads to eliminate unnecessary tree searches, improving performance by leveraging the existing state from lock_extent().",False
8268fa881fed2a2cd23566a7c962e6e6dfa60da6,server,The optimization strategy involved moving a function call (set_timespec) outside of a mutex-protected section to reduce contention and improve concurrency.,False,The optimization strategy involved moving the `set_timespec` function call outside of the `LOCK_thread_cache` mutex to reduce contention and improve performance.,True
737a3dc19275ac11d8a6225dbd03639e73b22fee,geeqie,"The optimization strategy reversed the logic in the duplicate file loading process to prevent items from being processed twice, thereby reducing redundant operations.",False,The optimization strategy involved reversing the logic to prevent items from being processed twice during file loading for duplicate detection.,False
38e08df7ef93121e4ef2d51a6f3c8576795773e9,libcuckoo,The optimization strategy involved dynamically adjusting the proportion of threads used for reading keys based on the load factor to better balance workload distribution.,False,The optimization strategy involved proportioning the number of threads based on the load factor instead of using a fixed half-and-half division for reading keys in and not in the table.,False
2353a510afecd50393f528ce0b53da13b8df7a56,tracetool,"The optimization strategy involved offloading the counting operation to SQLite instead of performing it in memory, reducing both time and memory usage.",False,"The optimization strategy involved offloading the counting of entries to SQLite instead of handling it in the application code, significantly reducing execution time and memory usage.",True
9c7a5f5efafaa01ccc57a82cc4619f433cbda699,gtk,The optimization strategy involved reducing redundant computations by caching and reusing results within the `get_cursor_color` function.,True,The optimization strategy involved reducing redundant calls to `GtkStyleContext` functions by caching frequently accessed properties.,True
5ecd14a31cad496e58fbc4aca9af0e9a001689d5,gui,"The optimization uses the `MSG_MORE` flag to batch non-final network message writes, reducing the number of TCP segments generated by combining data in the socket's transmit buffer.",False,The optimization strategy involves using the `MSG_MORE` flag in `send(2)` calls to reduce the number of TCP segments by buffering non-final network messages.,True
00dbbd5ce2f2b7c65e13589424263ba32cd068f1,magnum,"The optimization strategy replaces a potentially more expensive vector length computation with a dot product, which is computationally simpler.",True,"The optimization strategy involves using the dot product to compute vector length, which is more efficient than the previous method.",True
b3859a3cba6063433d12165397c0f669580f467e,angle,The optimization strategy disables a specific GPU-related performance optimization (glFlush deferral) for Qualcomm GPUs to address a performance regression on certain devices while retaining it for other GPUs.,False,The optimization strategy involves disabling the glFlush deferral optimization specifically for QualComm GPUs to address performance regression while keeping it enabled for other GPUs.,False
9a3ef4b53bc45515b6cd1f92b11aaca407b5ea7f,forestdb,The optimization strategy involves keeping auto-compacted files in the cache to avoid the performance cost of re-opening and potential crashes caused by freeing resources prematurely.,False,The optimization strategy involves keeping auto-compacted files warm in the cache to avoid slowdowns and crashes during file reopening.,False
eda01dc6089a430bb3dddf5360f0b8441b0933be,OpenRCT2,The optimization avoids redundant calculations by checking if the passed DPI matches the active DPI before proceeding with computations.,True,The optimization avoids redundant calculations by skipping the recalculation of DPI when the passed DPI matches the active DPI.,True
03fc3070457dc0e6a717a2e732af93ef1cb2ae51,android_kernel_oneplus_msm8998,The optimization avoids memory duplication by correctly marking roaming clients with TT_CLIENT_ROAM instead of TT_CLIENT_PENDING in the global translation table.,False,The optimization strategy involves changing the flag used to mark roaming clients from TT_CLIENT_PENDING to TT_CLIENT_ROAM to prevent unnecessary memory duplication.,False
0d169fed751b1f69e0fd86accd0dd0461d6be9de,aseprite,The optimization strategy involved reducing redundant text measurements and drawing operations in the `drawTextBox` function by caching and reusing calculated values.,True,The optimization strategy involved reducing redundant calculations and improving loop efficiency in the `drawTextBox` function.,True
340d8de9e14f8b27b5f42e99c7f4845f76330fc1,networkit,The optimization strategy involved reducing unnecessary computations in the `Matching::isProper` function by improving the logic to avoid redundant checks.,False,The optimization strategy involved improving the efficiency of the `Matching::isProper` function by reducing redundant checks and streamlining the logic.,True
05d4234208df0777ea8d8da9dceda200222d5a58,online,The optimization strategy involved reducing redundant message processing by directly forwarding client messages in a more efficient manner.,False,The optimization strategy involved improving the efficiency of client message forwarding by reducing unnecessary overhead in the message handling process.,False
0dad166a5c9bc7092f99e55baaec235d077db9ab,mppp,The optimization strategy avoids unnecessary string conversions in tests to improve performance.,True,The optimization strategy involved avoiding string conversions to improve test performance.,True
cd460f4da04c05d6ba93ccbbe294e948768f0937,ffmpeg,The optimization strategy involved reducing redundant computations and memory accesses within the `postprocess_current_frame` function by restructuring loops and minimizing unnecessary operations.,True,The optimization strategy involved reducing redundant calculations and improving memory access patterns in the `postprocess_current_frame` function.,True
454a0a700907f68a92521a73c3e7fe0b4243b05d,dpdk,"The optimization enables cache usage in single producer or consumer modes by bypassing unnecessary mempool flag checks, improving performance.",False,The optimization strategy involves enabling cache usage in specific single producer or consumer modes to improve performance by avoiding unnecessary flag checks.,False
440a57717bcc2a86a5e9800bce62e14d8115a001,android_kernel_google_wahoo,"The optimization strategy avoids applying an interactive boost when the interactive governor is not enabled, reducing unnecessary operations.",False,"The optimization strategy involves adding a conditional check to apply interactive boost only when the interactive governor is enabled, avoiding unnecessary operations.",True
8a891c565ce272be7aa43e8f99a81f0675f77100,kernel_xiaomi_sm8250,The optimization strategy skips unnecessary heavy checks for autorefresh when the feature is disabled to reduce CPU overhead.,False,The optimization strategy involves skipping heavy autorefresh checks when the autorefresh configuration is disabled to reduce CPU usage during display rendering.,False
7570fb07272aae0fc3e7bf03173c59a8baff0e03,oneDNN,The optimization strategy involved restructuring the initialization logic in `init_jcp` to improve performance for depthwise convolution on AVX512_CORE+ architectures.,False,The optimization strategy involved fixing a performance regression for depthwise convolution on AVX512 cores by adjusting the initialization parameters in the `init_jcp` function.,False
1d1849febc34535b4c957233a89a07095a46cd81,kdevelop,"The optimization avoids traversing proxy-contexts when collecting importers, significantly reducing complexity and UI-blocking delays.",False,The optimization strategy involves avoiding the traversal of proxy-contexts when searching for importers to reduce complexity and improve performance.,False
b42b97a5657f49c51f523f691e8a867708a38b80,android_kernel_xiaomi_sdm845,The optimization avoids redundant disk reads by computing the P block from DATA instead of re-reading it during RAID6 single-device recovery.,False,"The optimization strategy involves avoiding unnecessary re-reading of the P block in RAID6 recovery by computing it from the DATA block instead, reducing disk seeks and improving performance.",False
ffd961fc053419bc1eb37792c18ec98e7c3bc364,gcc-darwin-arm64,The optimization strategy merges entry tests into bit tests when possible and defers gimplification to enable optimal sequence generation for single tests.,False,The optimization strategy involves merging the entry test into the bit test when possible and delaying gimplification until the end when there is only one test to emit the optimal sequence.,True
590fb3529a27a2a652c74baa2c8bebad34ec5c42,harfbuzz,The optimization strategy reduces memory pressure by reusing existing data structures instead of creating new ones.,True,The optimization strategy involved reducing memory pressure by modifying the subset plan execution to minimize memory usage.,False
2e6fae2aad240fe6be8273cc53bc239ee920ee7c,OpenBLAS,The optimization strategy serializes accesses to parallelized level3 functions to prevent race conditions or resource contention when multiple callers invoke them concurrently.,False,The optimization strategy serializes access to parallelized level3 functions to prevent contention from multiple callers.,False
0431f9d476a1237f76e360998bc7605506651b84,haproxy,The optimization strategy involved implementing multi-byte skipping for parsing long header lines to reduce the number of iterations and improve performance on architectures supporting unaligned accesses.,False,The optimization strategy involves implementing multi-byte skipping for parsing long header lines to improve performance on architectures supporting unaligned accesses.,False
f404f9ffb49b307a52deeb92108249430afaf5ed,abc,The optimization strategy involved reducing unnecessary computations by skipping certain checks when they are guaranteed to be irrelevant.,False,The optimization strategy involved reducing unnecessary computations in the area-only mapping function by avoiding redundant checks and streamlining the node dropping logic.,False
04a17cce49dea5f8898ceaae812604d6f2ab0357,3DWorld,The optimization strategy involved replacing a computationally expensive normalization operation with a precomputed lookup table to reduce runtime calculations.,False,The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the `terrain_hmap_manager_t::get_norm` function.,True
d438e1ec174bdf1474edcdf9902fe3cb14b8a1e2,rocksdb,The optimization strategy eliminates an unnecessary cache lookup in BlockBasedTable::NewRangeTombstoneIterator to reduce CPU overhead.,False,The optimization strategy involves removing an extra cache lookup in the BlockBasedTable::NewRangeTombstoneIterator() function to reduce CPU usage.,False
4e0712207945131b9b39203cb5efcb1f77910fca,MyScaleDB,The optimization strategy involved replacing `resize` with `reserve` in the `ColumnArray::get()` and `operator[]` methods to reduce unnecessary memory reallocations and improve performance.,True,The optimization strategy involved replacing `resize` with `reserve` in `ColumnArray::get()/operator[]` to avoid unnecessary initialization of elements.,True
d7b6acc03d03796e34ab0d293cc8be88b4657fda,Marlin,The optimization strategy involved replacing a division operation with a bitwise shift to improve the performance of setting PWM duty on LPC176x.,True,The optimization strategy involved reducing the number of register writes in the PWM duty cycle setting function to improve performance.,True
02e355469d233df46bdc4b83b34f1befc9c1bd97,v8,"The optimization strategy delays the ageing of code to prevent premature eviction from the cache, aiming to improve performance by keeping frequently used code alive longer.",False,The optimization strategy involves delaying the ageing of code to improve performance by keeping it alive longer.,False
d962acba55aa0c9d50515b767cbb1bfd327fc50e,autoware.universe,The optimization strategy involved reducing redundant computations by caching and reusing results within the `getOverlappedLaneletId` function.,True,The optimization strategy involved improving the efficiency of the `getOverlappedLaneletId` function by reducing redundant calculations and streamlining the logic for identifying overlapping lanelets.,True
df4663be6a9dd427ee0b73a1ea47d6791e5dfc53,llvm-leg,"The optimization strategy involves skipping unnecessary calls to `GetUnderlyingObject` by checking the address space upfront, reducing redundant computations during compilation.",True,"The optimization strategy involves skipping a function call (GetUnderlyingObject) when the address space is not private, reducing unnecessary computation during compilation.",True
e8dd2b3d505713c8fe224595812b9be37cb3acd9,fastclick,The optimization strategy replaced bit-field boolean variables with raw boolean variables to potentially improve performance while maintaining the same memory usage.,True,The optimization strategy involved replacing bitfield bools with raw bools to potentially improve performance while maintaining the same memory usage.,True
8e15cbcb2ad397a8f3c2e54e32dcf9311f3e61be,restbed,The optimization strategy involved simplifying the URI validation logic to reduce unnecessary computations and improve parsing speed.,True,The optimization strategy involved improving the speed of the `Uri::is_valid` function by enhancing its parsing logic.,False
e8c2f6cf154458e263f733f76bbf503f730fd1af,transmission,The optimization strategy involved leveraging libevent2's evbuffer API to improve the efficiency of JSON string serialization by reducing unnecessary memory operations.,False,The optimization strategy involves improving the serialization of JSON strings by leveraging libevent2's new evbuffer API.,False
dc5e65028a8e43432829bd0546ee14935a3cd415,kernel_xiaomi_sm8250,The optimization replaces a generic `memcpy` with an architecture-specific `copy_page` function to leverage hardware-optimized full-page copying.,False,The optimization strategy involves replacing `memcpy` with `copy_page` for full page copying to leverage architecture-specific optimizations.,True
92ce43309072e09bf558d91b1291067de67ced40,FreeRDP,The optimization strategy involved simplifying color conversion logic by reducing unnecessary computations and improving the efficiency of pixel processing.,True,The optimization strategy involved improving the efficiency of color conversion by reducing redundant calculations and streamlining the process in the 16bpp image conversion function.,True
25403c2265cb700462d59fa3cb9dbec85d25d48f,rocksdb,The optimization strategy involved adding explicit prefetch instructions to reduce cache line access overhead during filter lookups.,False,The optimization strategy involved adding explicit prefetch instructions to reduce filter lookup overhead by ensuring cache lines are prefetched for unaligned filter data.,True
6a3e71bcf6e0d44dda6d249c776800524e67b217,knot,"The optimization strategy involves searching for the RRSet from the end of the changeset to prioritize recently added RRs, reducing search times.",False,"The optimization strategy involves searching for the RRSet from the end of the changeset to prioritize the most recently added RRSet, improving search times.",True
45ecdf96ee5c1bc5ce3881518ac8fb0bda07ed06,llvm-leg,The optimization strategy avoids calling slow target-specific parsing code unless absolutely necessary by adding early checks for common cases.,False,"The optimization strategy involves delaying the execution of slow ARM and BPF target parsing code unless the architecture string is unusual, reducing unnecessary processing overhead.",False
d3cebd9ed6dee55fd4ec06d182e518ead255bde3,scribus,The optimization strategy involved improving the efficiency of encoding tensor patch data by reducing redundant computations or streamlining the encoding process.,False,The optimization strategy involved improving the encoding process of tensor patch data to enhance performance.,False
1699dbebf31f0b26a8408d24da3c7f3b113f0340,kmsan,The optimization strategy involved restructuring the logic in the ACPI global lock acquisition function to reduce unnecessary operations and improve efficiency.,False,The optimization strategy involved improving code generation in the ACPI global lock's acquisition function to enhance performance.,True
ddad2050928e29e8175d1a79431ec15b476da727,bind9,The optimization avoids redundant additions to the compression table and prevents unnecessary compression by always looking up names in the compression table while respecting disabled compression settings.,False,The optimization strategy involves avoiding unnecessary compression in the rrset when compression is disabled and preventing duplicate entries in the compression table by always looking up the name before adding it.,False
5e040d4b1a440b832c7b4cf8116eebcdff91909c,kmsan,"The optimization removes unnecessary scoring of IRQ moderation points for GRO_NORMAL packets, reducing CPU overhead during RX processing.",False,"The optimization strategy involved removing redundant scoring of interrupt moderation points for GRO_NORMAL packets, which was already handled during RX event processing, to reduce CPU usage.",False
80439b9add616e85f0d0d45ac3a695aec0658433,arduino-audio-tools,The optimization strategy involved reducing memory usage by modifying the I2S driver configuration to use more efficient data structures or methods for the NanoBLE platform.,False,The optimization strategy involved reducing memory usage in the I2S driver for the Nano BLE by modifying the mode function.,False
4339468d6cc18b260c82f042f94efb6a18be10aa,spectre,"The optimization strategy involved reordering the processing of blocks in the exporter to prioritize them based on a specific order, reducing unnecessary computations.",False,The optimization strategy involves accelerating the exporter by reordering block priorities to improve performance.,False
2949440afaedbf424c3c2f55b93674046731a70c,deviation,The optimization strategy involved restructuring the timing logic for voice alerts to reduce unnecessary computations and improve responsiveness.,False,The optimization strategy involved improving the timing of timer voice alerts by reducing unnecessary recalculations and streamlining the update logic.,True
f9ec69904b77962297626b08091f1cddd96f1ef6,FreeBSD-src,The optimization reuses netgraph items in the multilink transmit function to reduce allocation overhead and improve performance.,False,The optimization strategy involves reusing netgraph items to reduce overhead and improve performance in the multilink transmission process.,False
bf7c7913a23289a2ead345fa45083b1cda5875ba,cel-cpp,The optimization avoids unnecessary copying from the value stack by directly accessing or referencing the data.,True,The optimization strategy avoids copying values from the value stack by using reference-based access instead of value-based access.,True
415b1a0105cd05a428f8b28ac1bf406ca2b4bbd7,kmsan,The optimization strategy eliminates redundant MMU sync and TLB flush operations during a fast PGD switch by relying on manual handling in `kvm_set_cr3`.,False,"The optimization strategy involves unconditionally skipping MMU sync and TLB flush operations during a PGD switch in MOV CR3, as these are now handled manually by `kvm_set_cr3`.",False
c5e041aa691b847b590db211c08fe8b23498833a,metamage_1,The optimization strategy refactors the `decode_ADD_SUB()` function to improve efficiency by restructuring its logic or reducing unnecessary operations.,False,"The optimization strategy involved refactoring the `decode_ADD_SUB()` function to improve efficiency, likely by reducing redundant operations or streamlining logic.",True
7e758c5ab5ac88863299e8a4643fba68115f5fd7,plasma-desktop,The optimization strategy involved reducing unnecessary updates by checking if the matches have actually changed before updating the model.,False,The optimization strategy involved improving the efficiency of model updates in the RunnerMatchesModel::setMatches function by reducing unnecessary operations and streamlining data handling.,False
eb6a24816b247c0be6b2e97e68933072874bbe54,android_kernel_oneplus_msm8998,"The optimization strategy reduces high-order page allocations by using smaller, more manageable allocations for skb head and fragments to alleviate pressure on the memory allocator.",False,The optimization strategy reduces high-order page allocations in `unix_dgram_sendmsg()` by using order-2 allocations for skb head and up to 16 page fragments to lower memory fragmentation pressure.,False
f692ed5988a9af39625ad4280b07e5ab0a60ee56,AIS-catcher,The optimization strategy involved reducing redundant data copying in UDP output operations by directly writing to the network buffer.,True,The commit optimizes UDP output performance by reducing unnecessary data copying and improving buffer management.,True
f0fab99d6fd7b4310f03a2c84b465fae98d31bc0,redis,"The optimization avoids unnecessary calculations of AOF and replicas buffers when the `server.maxmemory` setting is not configured, reducing computational overhead.",False,"The optimization strategy involves skipping the counting of AOF and replicas buffers in the `getMaxmemoryState` function when `server.maxmemory` is not set, reducing unnecessary computations.",False
7cb4fa20b5534decf527a6bfcc74bd79ea11cbb1,llvm-leg,The optimization strategy involved replacing a worklist data structure with a more efficient SmallVector and increasing the inline capacity of a SmallPtrSet to reduce overhead and improve performance.,False,The optimization strategy involved switching a worklist to SmallVector and increasing the inline capacity of the Visited SmallPtrSet to improve performance in CodeGenPrepare.,True
b675804f67c21feb9bdfa5c82546fb264c36f3ca,OpenHD,The optimization strategy avoids unnecessary message processing by filtering out messages with a specific target system ID before sending them to the air unit or flight controller.,False,The optimization strategy involves filtering out messages with a specific target system ID to reduce unnecessary message processing and transmission.,False
66546b03d2b4ccc439216dfd8a401106da893d0b,simc,The optimization strategy involved restructuring the Elemental APL (Action Priority List) for Shamans to improve the uptime of Flame Shock by reordering or refining conditional checks and action logic.,False,The optimization strategy involved improving the uptime of Flame Shock (FS) in the Elemental Action Priority List (APL) for the Shaman class.,False
d8df169b8498609eda28c0d6c2d91588b0aa925b,rocksdb,The optimization strategy involves releasing the database mutex during a potentially I/O-heavy operation to reduce contention and improve concurrency.,False,The optimization strategy involves releasing the DB mutex during the call to `ApproximateSize` to avoid blocking other operations while performing I/O.,False
f1339763f9c8f48be5e4a1bba908d14d6a5fcc78,wireshark,The optimization strategy involves ignoring unnecessary mouse move events in the base class to reduce redundant calculations and improve scroll performance.,False,"The optimization strategy involves ignoring unnecessary mouse move events in the `FollowStreamText` class to prevent costly calculations in the base `QPlainTextEdit` class, thereby improving scroll performance.",False
d5d7b4781e116bd8dcaab28ad7d1db8f57d21621,NetworkManager,The optimization strategy pre-allocates a GString with 16 bytes to reduce dynamic memory reallocations during string operations.,True,The optimization strategy involves pre-allocating a GString with 16 bytes to reduce dynamic memory allocation overhead in the `_nm_utils_enum_to_str_full()` function.,True
dbe678f6192f27879ac9ff6bc7a1036aad85aae9,kmsan,"The optimization strategy involved forcing the `trb_burst_size` to 16 to prevent data corruption at 4K boundaries, thereby resolving TCP checksum errors and significantly improving RX speed.",False,"The optimization strategy involved forcing the `trb_burst_size` to 16 to fix data corruption at 4K borders in Ethernet packets, which resolved TCP checksum errors and improved RX speed.",False
d6845ac2b0e506ee39ec42a5abdca688f202b9b7,notepad4,The optimization strategy involved removing redundant calls to SHAddToRecentDocs by leveraging the flagUseSystemMRU setting to conditionally handle recent file additions.,False,"The optimization strategy involves cleaning up the `SHAddToRecentDocs` function to obey the `flagUseSystemMRU` flag, ensuring it is only called when necessary during file load or save operations.",False
f4b9a2fc8bbc682e957276a0012199a606c919b0,OpenOCD,The optimization strategy involved reducing redundant memory accesses by caching frequently used data in local variables.,True,The optimization strategy involved improving flash write speed by reducing unnecessary operations and streamlining the write process in the `dsp5680xx_f_wr` function.,False
ac158f6d7a4a212201f5eb88c335e6ee9ad0ddfa,hhvm,The optimization strategy speculates the Class* in NewObjD to reduce runtime checks and improve performance.,False,The optimization strategy involves speculating the `Class*` in the `NewObjD` function to reduce overhead and improve performance.,False
cd21e4e69d76ec4ec3b080c8cdae016ac2309cc5,rocksdb,The optimization strategy involved reverting preallocation of container space to avoid memory overhead in cases with sparse key queries.,False,The optimization strategy involved reverting preallocation in `autovector`s to avoid unnecessary memory usage when only a small subset of keys require querying the underlying database.,False
742dbc1fc83f713e139a2745ebb34a97c11c43bd,llvm-leg,The optimization strategy avoids unnecessary alias queries by first checking with an UnknownSize parameter and only performing a second query if the result is MayAlias.,False,The optimization reduces redundant alias analysis queries by first checking with an unknown size and only performing a second query with specific size and type if the first result is ambiguous (MayAlias).,True
e950cca3f3c40902a052a78a36b3fac1f8a62d19,kmsan,The optimization strategy replaced a costly `memcmp()` call with a simpler equivalent check to avoid performance overhead in a frequently called function.,False,"The optimization strategy involved replacing the `cpumask_equal()` function, which uses `memcmp()`, with a simpler equivalent check to avoid the performance overhead of `memcmp()` in a frequently called function.",True
e01a0c3316a75b07d6938f9d5933e7fe39294dc4,libredwg,The optimization strategy involved reducing unnecessary logging operations for TV-ZERO cases to improve performance.,False,The optimization strategy involved reducing the overhead of logging for TV-ZERO cases by minimizing unnecessary log operations.,True
063471bf7613544496a4d4b5a1e1ba4a7aa605cf,rocksdb,The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.,True,The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.,True
901dc3eebe1f6fcab7b5c782e7d5f86de05705dd,media-driver,The optimization strategy involved changing the write operation to write one DWORD at a time in the command buffer to avoid poor performance caused by compiler inefficiencies in handling read-modify-write operations over the PCIe bus.,False,The optimization strategy involves changing the write buffer method to write DW4 per Dword on the command buffer to improve performance by avoiding inefficient read-modify-write operations via the PCIE bus.,True
5dab2f11370fd9f7d76efa453e7e4277cf33f140,dpdk,"The optimization strategy reduces the frequency of interrupt injections by batching packets, thereby minimizing performance overhead.",False,The optimization strategy involves reducing the frequency of interrupt injections by batching multiple packets together and injecting a single interrupt for the entire batch.,False
543258ab10120c1cefcec86cda62b408f740c164,MoarVM,The optimization strategy involves propagating specialization facts after eliminating unused log guards to enable further optimizations.,False,The optimization strategy involves propagating spesh facts after eliminating unused log guards to enable further optimizations between log guard and set elimination.,False
22b5be06fae6f9a8b71c53fec548aabbdf69026b,vpp,The optimization strategy involved batching multiple packets per frame in the broadcast bonding mode to improve performance by reducing per-packet overhead.,False,The optimization strategy involved fixing the 1 packet/frame issue in the broadcast mode to improve performance.,False
530f2113f1e30096bd3041f6f7357b81c875a410,kokkos,The optimization strategy reduces memory consumption in the ScatterView test by modifying the test_scatter_view function to use more efficient memory allocation or data handling.,False,The optimization strategy involved reducing memory consumption in the ScatterView test by modifying the test_scatter_view function.,False
9eac3622a2b1159ab50b10540e822f3e58fdc383,symqemu,"The optimization leverages the allocation map as a hint to reduce unnecessary checks, even when `cache.direct=on`, improving performance by avoiding redundant operations.",False,"The optimization strategy involves using the allocation map as a hint to avoid unnecessary checks and improve performance, even when cache.direct is enabled.",False
ab292f204fef23b9d59e76c3005ddea6712bb1fa,sse2neon,"The optimization strategy involved removing the `optnone` attribute from the `_mm_mul_ps` function to enable inlining, thereby addressing a performance regression caused by the incompatibility between `optnone` and inlining.",False,"The optimization strategy involved removing the `optnone` attribute to allow inlining of the `_mm_mul_ps` function, thereby improving performance.",True
86c56d513280e0a079b7b9c2c8cdc783b56950a5,hypre,The optimization strategy involved removing an assert statement to eliminate its associated runtime performance overhead.,False,The optimization strategy involved removing an assert statement to avoid performance overhead.,True
9b51af5a17f3cfd754575894e090dd867fb47740,rocksdb,The optimization strategy involved moving iteration creation work outside of a mutex to reduce contention and improve concurrency.,False,"The optimization strategy involved moving iteration creation works outside of a mutex to reduce contention, leaving only object reference and get operations inside the mutex.",False
a662fdad03ab436c3058c786328bdd2cf6a8f932,ugbasic,The optimization strategy involved restructuring the variable removal process to reduce redundant operations and improve efficiency.,False,The optimization strategy involved improving the performance of the 6502 optimizer by enhancing the `vars_remove` function.,False
6aedff6f4eea0bdbf8714f08807833cfcab5a069,Floorp,"The optimization reduces redundant profiler marker additions by ensuring only one `eSending`/`TransferStart` marker is added per message, minimizing unnecessary CPU overhead.",False,The optimization strategy involves adding a profiler marker only once per message instead of repeatedly for each data send operation to reduce CPU overhead.,True
754f9ae80e4fc3a42cfb7e2c680fdf7710ff8273,kmsan,The optimization strategy involved updating the MPDU density in the 6 GHz capability to align with hardware specifications and improve throughput.,False,The optimization strategy involved updating the mpdu density setting to 2 usec in the 6g capability to align with hardware capabilities and improve throughput.,False
c5208b84e4ea8178ce7a9bccd7229eaf0a3109f6,radare2,The optimization strategy involved replacing a less efficient caching mechanism (`io.cache`) with a more performant one (`io.pcache.write`) to improve write performance.,False,The optimization strategy involved replacing `io.cache` with `io.pcache.write` to improve performance by leveraging a more efficient caching mechanism.,False
f374ca655b312aa02e60e6b16699ab729bb10260,tcmalloc,"The optimization removes unnecessary alignment checks and modulo operations for size classes, leveraging guaranteed page alignment to improve performance.",True,The optimization strategy involves removing unnecessary alignment checks and inefficient codegen for size class calculations when the requested alignment is less than or equal to 8.,True
c446211b10ade47a60c56aae65378cbf607acea3,fwupd,The optimization strategy involved removing an unnecessary delay after a write operation to significantly reduce execution time.,False,The optimization strategy involved removing a 100ms delay after SFWd write operations to significantly reduce the total write time.,False
a9d83b77de913c35752914a2a0657f59f5f4bbbe,PX4-Autopilot,The optimization strategy involved simplifying mathematical operations to reduce computational overhead in the constrainXY function.,True,The optimization strategy involved reducing redundant calculations and simplifying mathematical operations in the `constrainXY` function to improve performance.,True
2410ade7e4e9431e31e8eb808d1883dbb55536a1,maps-core,The optimization strategy involved adjusting the inertia speed calculation in 3D mode to reduce unnecessary computations or improve efficiency.,False,The optimization strategy involved improving the inertia speed calculation in 3D mode by refining the mathematical operations or logic used to compute the camera's movement.,False
c59393a2610b103d79f3d7059a9748128f858917,kate,The optimization strategy limits the processing of line modification markers to documents with fewer than 50k lines to reduce performance overhead.,False,The optimization strategy limits the drawing of line modification markers in the minimap to documents with fewer than 50k lines to reduce performance overhead.,False
553679474b531a17f27d39bca2c30715df06c2f0,android_kernel_xiaomi_sm8150,The optimization strategy resets the `shift_adj` variable in the vmpressure notifier to prevent false triggers of the adaptive lowmemorykiller (ALMK) due to stale state from previous notifications.,False,The optimization strategy involves resetting the `shift_adj` variable in the vmpressure notifier to avoid false triggers of adaptive low memory killer (ALMK) when vmpressure improves.,False
4515bbc4e284066d4e2f4a66eccf13813f6e7206,samsung-exynos9820,The optimization strategy involved removing synchronous warning mechanisms to prevent potential deadlocks and improve system responsiveness during memory allocation stalls.,False,The optimization strategy involves removing a synchronous warning mechanism (`warn_alloc()`) to avoid potential deadlocks and performance degradation caused by concurrent threads appending to the printk buffer during memory allocation stalls.,False
dea1551e4d117c6d5f7b8c9529de66e557b1950e,openbor,The optimization strategy involved replacing a nested loop structure with a single loop to reduce iteration overhead and improve RGB GIF copying speed.,True,The optimization strategy involved improving the speed of RGB GIF copying by reducing unnecessary operations or streamlining the copying process.,False
bf61a1ca9d10afd4ae0fb9779b45ec81a9f839cc,openldap,"The optimization strategy involved switching from DB_BTREE to DB_HASH for index databases, leveraging the fact that index keys are already 4-byte hashes with no locality-of-reference benefits for BTREE.",False,The optimization strategy involved switching from DB_BTREE to DB_HASH for index databases to improve performance by leveraging the nature of 4-byte hash keys.,False
1d068cc0b07694799e077b28dbd272b7982727e2,BsodSurvivor,The optimization strategy involved replacing a standard vector with a SmallVector to reduce dynamic memory allocations for typical instruction sizes.,True,The optimization strategy involves switching to using a SmallVector to avoid heap allocations for most normal-sized instructions.,True
9d10749af73dd56350fc35ee2eb0e0d3db2a170b,perfetto,The optimization strategy involved improving the efficiency of multi-step clock resolution by restructuring the path-finding logic to reduce computational overhead.,False,The optimization strategy involved improving the algorithm for multi-step clock resolution to achieve a 10x speedup.,False
04824298a9e2fec292cc2859c6a50a5d5a6d7752,ffmpeg,The optimization strategy involved restructuring the CAVLC decoding logic for trailing_ones to reduce unnecessary computations and improve efficiency.,False,The optimization strategy involved improving the decoding speed of trailing_ones in CAVLC by modifying the decode_residual function.,False
ac8087d833cef7f1986772882d6944bf23183144,cusplibrary,The optimization strategy involved restructuring the ELL-to-CSR conversion algorithm to reduce redundant computations and improve memory access patterns.,False,The optimization strategy improved the performance of converting ELL (Ellpack-Itpack) sparse matrix format to CSR (Compressed Sparse Row) format by enhancing the conversion algorithm.,False
30a017fecae60aa7b87c4a1e283b6ac027724a92,rocksdb,The optimization strategy combines two separate read operations (blob value and CRC checksum) into a single read to reduce I/O overhead.,False,The optimization strategy combines two separate reads (one for the blob value and one for the CRC checksum) into a single read to reduce I/O overhead.,True
ad2cc0e2f41f3be59e8c7c1a0ab5c813d7073643,ffmpeg,"The optimization strategy avoids small dynamic buffer allocations by reusing existing buffers, reducing memory overhead and fixing a potential error-handling defect.",False,The optimization strategy avoids allocations of small dynamic buffers and fixes a design defect by ensuring error handling for failed allocations.,False
5473aca3767b00eab502b34a37b595de099980ae,git,The optimization strategy involves reusing long-living buffers across iterations to minimize memory reallocations and reduce heap usage.,True,The optimization strategy involved reusing long-living buffers instead of releasing and reallocating them on each iteration to reduce memory allocations.,True
5d441d65e1d4c7c72bec8e74be68b92dbadcaf28,PX4-Autopilot,The optimization reduces observation noise in the fine tilt alignment process when the vehicle is at rest to accelerate convergence.,False,The optimization strategy reduces observation noise during fine tilt alignment when the vehicle is at rest to accelerate the process.,False
a5941fa07763febb512e55f108da9b9e5228b21b,sdk-nrf,The optimization strategy involves resetting BLE connection parameters to defaults upon USB disconnection to ensure consistent behavior and improve report transmission speed upon reconnection.,False,The optimization strategy involves resetting BLE connection parameters to default values when a USB cable is disconnected to ensure consistent behavior and improve HID report transmission speed upon reconnection.,False
1381c3fe286e46eb43b2f8a10091adc9fb7469fc,pcre2,The optimization strategy involved restructuring the character range matching logic in the JIT compiler to reduce unnecessary checks and improve efficiency.,False,The optimization strategy involves improving the character range matching in the JIT compiler by enhancing the `optimize_class_chars` function to reduce unnecessary checks and streamline the matching process.,False
94e7bd0696a890c92c4dfe00c25b987450aa75ee,leap,The optimization strategy involved replacing a less efficient string formatting function with a more efficient string escaping function to improve performance.,True,The optimization strategy involved replacing `format_string` with the more efficient `escape_str` function to improve performance.,True
87b6a3aba580944e3416630a28d7bfacc4c912e1,toaruos,The optimization reduces the number of color code updates during rendering by skipping redundant calls.,False,The optimization strategy reduces the number of color codes sent during rendering to improve performance.,True
644e334eeec01a25138b62ebd576b3a798183c7c,kmsan,The optimization strategy involves selecting a more efficient data structure (bitmap over hashtable) for small key sizes to improve performance in the netfilter subsystem.,False,The optimization strategy involves selecting a bitmap set representation over a hashtable for key sizes <= 16 to improve performance based on policy complexity and space considerations.,False
0707a368b3e5917ebc3380a1ab3d15ddc34ca645,cmssw,The optimization strategy involved reducing redundant computations by reusing precomputed 'proDer' matrices in the 'GblTrajectory' class.,False,The optimization strategy involved reducing redundant calculations or memory usage related to 'proDer' matrices in the 'GblTrajectory' function.,False
bf4785bf7621d487305c9cc8acdcf0881684c1f5,kernel-copyleft,"The optimization strategy disables write masters immediately upon receiving a stream-off command instead of waiting for the frame boundary, reducing latency in stopping the burst stream.",False,The optimization strategy involves immediately disabling write masters upon stream off command instead of waiting for the frame boundary to reduce bus activity and improve performance.,False
2aed25cfc977df4cb795635ee4bfa574485bbf3b,sycl,"The optimization strategy involved reducing memory abuse in the data structure used by `BytecodeWriter::outputValueSymbolTable`, leading to a significant speedup.",False,The optimization strategy involved reducing memory usage in the data structure used by BytecodeWriter::outputValueSymbolTable to improve performance.,True
d23a298f28209e1faa47c01482d5815ebb95d6d0,llvm-leg,"The optimization strategy caches or precomputes the ""isSized"" property for concrete types to avoid redundant searches in nested types.",False,The optimization strategy involves caching or precomputing the results of `Type::isSized()` for concrete types to avoid redundant searches in large nested types.,False
821887036e5235c827029d14decb185bea01ec4b,rocksdb,The optimization strategy involves pinning filter and index blocks in the cache for compaction output files at level 0 to reduce redundant memory operations.,False,The optimization strategy involves pinning L0 filter and index blocks in cache during compaction to improve performance when the `pin_l0_filter_and_index_blocks_in_cache` option is enabled.,False
0798becabfaf56761e7a5fbd888a90247d29363b,IBAMR,The optimization strategy avoids two virtual function calls by directly accessing the required data.,True,The optimization strategy avoids two virtual function calls to improve performance.,True
30005444fe7b6956db675db343e47613b19f8219,BsodSurvivor,The optimization strategy avoids unnecessary copying of a `std::set` by directly operating on the original data structure.,True,The optimization strategy avoids unnecessary copying and recopying of a `std::set` to reduce overhead.,True
71212e0c81cedda0b918c095bd79b9eb98affcbf,ardour,The optimization strategy involves removing debug/profile messages in optimized builds to reduce unnecessary overhead.,True,The optimization strategy involved removing debug/profile messages in optimized builds to reduce unnecessary overhead.,True
027d7ed9d616d93ae7f02de79d17863725b14866,clang,The optimization strategy involved replacing a less efficient sorting method with a more efficient API call for sorting SmallVector or array_pod_sort.,True,The optimization strategy involved using a more efficient API of SmallVector/array_pod_sort for sorting to improve performance.,True
5ae29fffa06a25a5537ea6944b676b78575d9a57,clazy,"The optimization strategy reorders conditions in an if-statement to evaluate the cheapest condition first, reducing unnecessary computations.",True,"The optimization strategy involves reordering conditions in an if-statement to evaluate the cheapest condition first, reducing unnecessary computations.",True
e0b19883fd76595b3ec215a5f82e894ff0a518bf,sse2neon,The optimization strategy involved replacing a cast with inline assembly to simulate a vectorized operation while avoiding strict aliasing rule violations.,False,The optimization strategy involved replacing a cast with inline assembly to simulate vectorized shuffling while avoiding strict aliasing rule violations.,False
f44bbd71f56581cfc326b0142a26f51ab65f1db0,suricata,The optimization strategy involved reducing unnecessary function calls or operations within the UDP handling logic to improve performance.,True,The optimization strategy involved reducing the number of function calls by inlining a frequently called function within the `AppLayerHandleUdp` function.,True
da966809fdbcab05d8929528153d834fe5a7246d,Trilinos,"The optimization strategy avoids creating an additional Exporter by reusing an existing Importer for communication, reducing resource overhead.",False,"The optimization strategy involves reusing an existing Importer for communication instead of creating a new Exporter, reducing overhead.",True
77d4eb75f9adf6f49fa413eb9b097ec0f407fc06,pinba2,The optimization strategy involved reducing redundant computations by caching and reusing intermediate results within the function.,True,The optimization strategy involved reducing redundant calculations by caching frequently accessed values within the `merge_ticks_into_data` function.,True
af77455c67e811719ddc9476ff334469e7650b3a,android_art,The optimization strategy involved partially inlining a stub check to reduce function call overhead and improve runtime performance.,False,The optimization strategy involves partially inlining the stub check to reduce function call overhead and improve performance.,True
3a27725fcbc7b6046920b663dcb48e77495d8273,vcmi,The optimization replaces a combined signed comparison with an unsigned comparison to implicitly handle negative values and reduce instruction count.,True,The optimization strategy replaces a signed comparison with an unsigned comparison to implicitly check for negative values and reduce the number of instructions.,True
f833421b70019f8a3c05854693f6db9775015fb3,mangos-wotlk,The optimization strategy avoids redundant iterations by skipping unnecessary steps in the loop that removes spells causing a specific aura.,False,The optimization strategy involves reducing redundant iterations in a loop to improve efficiency by skipping unnecessary steps.,True
7b66e041821309306beccda0fe58ffa096ee1f4a,llvm-leg,The optimization strategy involved implementing specialized code for handling FCMP_OEQ/FCMP_UNE operations in x86 fast instruction selection to improve performance.,False,The optimization strategy involves implementing specialized code for handling FCMP_OEQ and FCMP_UNE floating-point comparison operations in the x86 fast-isel to improve performance.,False
3eb209f5010adb4c022dda732f37e1929e6eb69c,lustre-release,The optimization avoids redundant fetching of the `fid` by directly using the value already present in the reply.,True,"The optimization strategy involved reusing the existing fid in the reply instead of fetching it again, reducing redundant operations.",True
0e123bdb5ad62d3ea82a9920ba2b7929fad97fe2,wfmash,The optimization strategy involved adding parallel index building to improve performance by leveraging concurrent processing.,False,The optimization strategy involves adding parallel index building to improve performance by leveraging concurrent processing.,True
6466c95549484208b45337602812f0c5ff85085a,snp-sites,The optimization strategy involved reducing redundant computations within the loop that constructs the PHYLIP format output by caching and reusing previously computed values.,True,The optimization strategy involved reducing the number of memory allocations and deallocations by reusing a buffer for phylip creation.,True
7bac210f051b3ffcfaf9a168db3d7c302f7a49a4,ODE,The optimization strategy involved reducing unnecessary computations or iterations within a specific test function to improve execution speed.,False,"The commit message ""minor speed improvement"" suggests a generic optimization strategy was applied, but without specific code changes, the exact strategy cannot be determined.",False
cce6deeb56aa8aad1d3154d70ea419cf25967f5c,kmsan,The optimization avoids using the Write list for small NFS READ requests to reduce latency and interrupt overhead.,False,The optimization strategy avoids the latency and interrupt overhead of registering a Write chunk for small NFS READ requests by skipping the Write list for requests of a few hundred bytes or less.,False
66c47599923f2919756423d47f32f2186d15cef9,mpv,"The optimization strategy involved changing the data type of the innermost loop variable from ""int"" to ""long"" to improve performance on x86_64 architecture.",True,"The optimization strategy involved changing the data type of the innermost loop variable from ""int"" to ""long"" to improve performance on x86_64 architecture.",True
06ac15642c40b5ba072e920540eebda04d967f30,ProcessHacker,The commit fixes incorrect GPU memory usage calculation by correcting the logic for determining dedicated GPU memory.,False,The optimization strategy involved fixing incorrect dedicated GPU memory usage calculations to ensure accurate memory reporting.,False
a66bbe321045dd1fb64302aad7ba1b2749a37226,opencryptoki,The optimization strategy caches the result of the first attribute retrieval to avoid redundant calls to obtain the same attributes from ICSF.,False,The optimization strategy involves caching retrieved attributes during the first call to avoid redundant attribute retrieval in subsequent calls.,True
b74a51ece8486887af455a1a5c9b8e0185b4a584,pinmame,The optimization strategy involved reducing unnecessary computations or function calls within the `nmi_callback` function to improve performance.,False,The optimization strategy involved reducing the number of function calls within a frequently executed loop to minimize overhead.,True
1e68cefe546d8b8eda4248113f2635dbbf1df071,ffmpeg,The optimization strategy involves calling `emms_c()` after decoding with SIMD to properly reset the MMX state.,False,The optimization strategy involves calling `emms_c()` after SIMD decoding in the APE decoder to ensure proper CPU state cleanup and avoid performance issues with floating-point operations.,True
e6e25101fd4addb24f9ec69032175c5d77ea7927,clam,The optimization strategy involves marking a function with the `InaccessibleMemOnly` attribute to prevent LLVM from removing calls to `verifier.assume` while allowing safe optimizations.,False,The optimization strategy involves marking a function as InaccessibleMemOnly to prevent LLVM from removing calls to verifier.assume while allowing safe memory access optimizations.,True
b04a4bd4a94113d4e2a60b53bfbd82987e0f8b0b,libavg,"The commit introduces an optimized version of the highpass filter algorithm, likely reducing computational overhead through improved logic or reduced operations.",False,"The commit introduces an optimized version of the highpass filter, likely improving computational efficiency or reducing resource usage.",False
aaea0413fac061ca8697227533084af40865b415,htcondor,The optimization hoists a conditional check to the top of the function to avoid unnecessary computations when the feature is disabled.,True,The optimization strategy involves hoisting a condition check to the top of a function to avoid more expensive operations when the condition is false.,True
