[
    {
        "repository_name": "mppic",
        "hash": "7c70876bd2ca55809ed3f3d1f638ba9225f14e46",
        "author": "Steve Macenski",
        "date": "2022-03-16T17:05:28-07:00",
        "message": "inlining array",
        "modified_files_count": 1,
        "modified_files": [
            "src/optimizer.cpp"
        ],
        "github_commit_url": "https://github.com/artofnothingness/mppic/commit/7c70876bd2ca55809ed3f3d1f638ba9225f14e46",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Optimizer::getVelocityConstraints"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved inlining an array to reduce memory access overhead and improve cache locality.",
            "The optimization strategy involved inlining an array to reduce memory access overhead and improve cache locality.",
            "The optimization strategy involved inlining an array to reduce memory access overhead and improve cache locality.",
            "The optimization strategy involved inlining an array to reduce memory access overhead and improve cache locality.",
            "The optimization strategy involved inlining an array to reduce memory access overhead and improve cache locality."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved inlining an array to reduce memory access overhead and improve cache locality.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "9f246298e2f0af3973918a0dac0c5f46bc0993c0",
        "author": "Changli Gao",
        "date": "2017-01-11T10:54:37-08:00",
        "message": "Performance: Iterate vector by reference\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/1763\n\nDifferential Revision: D4398796\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: b82636d",
        "modified_files_count": 1,
        "modified_files": [
            "db/event_helpers.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/9f246298e2f0af3973918a0dac0c5f46bc0993c0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "EventHelpers::LogAndNotifyTableFileDeletion"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization strategy involved iterating over a vector by reference instead of by value to reduce copy overhead.",
            "The optimization strategy involved iterating over a vector by reference instead of by value to reduce copy overhead.",
            "The optimization strategy involved iterating over a vector by reference instead of by value to reduce copy overhead.",
            "The optimization strategy involved iterating over a vector by reference instead of by value to reduce copy overhead.",
            "The optimization strategy involved iterating over a vector by reference instead of by value to reduce copy overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved iterating over a vector by reference instead of by value to reduce copy overhead.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "063471bf7613544496a4d4b5a1e1ba4a7aa605cf",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "table/table_test.cc: pass func parameter by reference\n\nFix for:\n\n[table/table_test.cc:1218]: (performance) Function parameter\n 'prefix' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "table/table_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/063471bf7613544496a4d4b5a1e1ba4a7aa605cf",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "AddInternalKey"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying, thereby improving performance.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "b8cea7cc279fe609de85b7ce4f50d4ff4f90047f",
        "author": "Changli Gao",
        "date": "2017-10-17T10:12:37-07:00",
        "message": "VersionBuilder: Erase with iterators for better performance\n\nSummary: Closes https://github.com/facebook/rocksdb/pull/3007\n\nDifferential Revision: D6077701\n\nPulled By: yiwu-arbug\n\nfbshipit-source-id: a6fd5b8a23f4feb1660b9ce027f651a7e90352b3",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b8cea7cc279fe609de85b7ce4f50d4ff4f90047f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Apply"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization strategy involved replacing erase operations with iterator-based erase to improve performance by avoiding unnecessary lookups.",
            "The optimization strategy involved replacing erase operations with iterator-based erase to improve performance by avoiding unnecessary lookups.",
            "The optimization strategy involved replacing erase operations with iterator-based erase to reduce overhead and improve performance.",
            "The optimization strategy involved replacing erase operations with iterator-based erase to improve performance by avoiding unnecessary lookups.",
            "The optimization strategy involved replacing erase operations with iterator-based erase to improve performance by avoiding unnecessary lookups."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing erase operations with iterator-based erase to improve performance by avoiding unnecessary lookups.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "53910ddb152fbcba95a3e04b058a997c40f654ae",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:31+02:00",
        "message": "db_test.cc: pass parameter by reference\n\nFix for:\n\n[db/db_test.cc:6141]: (performance) Function parameter\n 'key' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/db_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/53910ddb152fbcba95a3e04b058a997c40f654ae",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "convertKey"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying and improve performance.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying and improve performance.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying of the parameter."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying and improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "873f1356a1781e8d638973ea320b722d3240fc5a",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "db_ttl_impl.h: pass func parameter by reference\n\nFix for:\n\n[utilities/ttl/db_ttl_impl.h:209]: (performance) Function parameter\n 'merge_op' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/ttl/db_ttl_impl.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/873f1356a1781e8d638973ea320b722d3240fc5a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "TtlMergeOperator"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying and improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "68ca534169a4f9e1930f6511109e973b43cf5998",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:31+02:00",
        "message": "corruption_test.cc: pass parameter by reference\n\nFix for:\n\n[db/corruption_test.cc:134]: (performance) Function parameter\n 'fname' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/corruption_test.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/68ca534169a4f9e1930f6511109e973b43cf5998",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CorruptFile"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying of the parameter.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying of the parameter.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "4704833357a8609e7c42df4f337f938a8e870c08",
        "author": "jsteemann",
        "date": "2015-09-18T20:20:32+02:00",
        "message": "pass input string to WriteBatch() by const reference\n\nthis may lead to copying less data (in case compilers don't\noptimize away copying the string by themselves)",
        "modified_files_count": 1,
        "modified_files": [
            "include/rocksdb/write_batch.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/4704833357a8609e7c42df4f337f938a8e870c08",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "WriteBatch"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization strategy involves passing a string to the WriteBatch constructor by const reference instead of by value to reduce unnecessary data copying.",
            "The optimization strategy involves passing an input string to the `WriteBatch()` constructor by const reference to avoid unnecessary data copying.",
            "The optimization strategy involves passing an input string to the WriteBatch constructor by const reference to avoid unnecessary copying of the string data.",
            "The optimization strategy involves passing a string to the WriteBatch constructor by const reference to avoid unnecessary copying of the string data.",
            "The optimization strategy involves passing an input string to the WriteBatch constructor by const reference to avoid unnecessary copying of the string data."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involves passing an input string to the WriteBatch constructor by const reference to avoid unnecessary copying of the string data.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "gcc-darwin-arm64",
        "hash": "e4411622690654cdc530c6262c7115a9e15dc359",
        "author": "Aldy Hernandez",
        "date": "2021-11-04T15:37:35+01:00",
        "message": "Avoid repeating calculations in threader.\n\nWe already attempt to resolve the current path on entry to\nfind_paths_to_name(), so there's no need to do so again for each\nexported range since nothing has changed.\n\nRemoving this redundant calculation avoids 22% of calls into the path\nsolver.\n\nTested on x86-64 and ppc64le Linux with the usual regstrap.  I also\nverified that the before and after number of threads was the same\nin a suite of .ii files from a bootstrap.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/102943\n\t* tree-ssa-threadbackward.c (back_threader::find_paths_to_names):\n\tAvoid duplicate calculation of paths.",
        "modified_files_count": 1,
        "modified_files": [
            "gcc/tree-ssa-threadbackward.c"
        ],
        "github_commit_url": "https://github.com/iains/gcc-darwin-arm64/commit/e4411622690654cdc530c6262c7115a9e15dc359",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "back_threader::find_paths_to_names"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy eliminates redundant path calculations in the `find_paths_to_names` function by leveraging previously resolved paths, reducing unnecessary calls to the path solver.",
            "The optimization strategy avoids redundant calculations by reusing previously resolved paths in the `find_paths_to_names` function.",
            "The optimization strategy avoids redundant path calculations in the `find_paths_to_names` function by leveraging previously resolved paths, reducing unnecessary calls to the path solver.",
            "The optimization strategy avoids redundant path calculations in the `find_paths_to_names` function by leveraging previously resolved paths, reducing unnecessary calls to the path solver.",
            "The optimization strategy avoids redundant path calculations in the threader by leveraging previously resolved paths, reducing unnecessary calls to the path solver."
        ],
        "is_generic_optimization": [
            false,
            true,
            true,
            true,
            false
        ],
        "optimization_summary_final": "The optimization strategy eliminates redundant path calculations in the `find_paths_to_names` function by leveraging previously resolved paths, reducing unnecessary calls to the path solver.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "92ad4a88f3199b013532b37d6598c442319355a5",
        "author": "Changyu Bi",
        "date": "2024-08-27T13:57:40-07:00",
        "message": "Small CPU optimization in InlineSkipList::Insert() (#12975)\n\nSummary:\nreuse decode key in more places to avoid decoding length prefixed key x->Key().\n\nPull Request resolved: https://github.com/facebook/rocksdb/pull/12975\n\nTest Plan:\nran benchmarks simultaneously for \"before\" and \"after\"\n* fillseq:\n```\n(for I in $(seq 1 50); do ./db_bench --benchmarks=fillseq --disable_auto_compactions=1 --min_write_buffer_number_to_merge=100 --max_write_buffer_number=1000  --write_buffer_size=268435456 --num=5000000 --seed=1723056275 --disable_wal=1 2>&1 | grep \"fillseq\"\ndone;) | awk '{ t += $5; c++; print } END { printf (\"%9.3f\\n\", 1.0 * t / c) }';\n\nbefore: 1483191\nafter: 1490555 (+0.5%)\n```\n\n* fillrandom:\n```\n(for I in $(seq 1 2); do ./db_bench_imain --benchmarks=fillrandom --disable_auto_compactions=1 --min_write_buffer_number_to_merge=100 --max_write_buffer_number=1000  --write_buffer_size=268435456 --num=2500000 --seed=1723056275 --disable_wal=1 2>&1 | grep \"fillrandom\"\n\nbefore: 255463\nafter: 256128 (+0.26%)\n```\n\nReviewed By: anand1976\n\nDifferential Revision: D61835340\n\nPulled By: cbi42\n\nfbshipit-source-id: 70345510720e348bacd51269acb5d2dd5a62bf0a",
        "modified_files_count": 1,
        "modified_files": [
            "memtable/inlineskiplist.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/92ad4a88f3199b013532b37d6598c442319355a5",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "compare_"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization strategy involved reusing a decoded key to avoid redundant decoding of length-prefixed keys in the `InlineSkipList::Insert()` function.",
            "The optimization strategy involved reusing a decoded key to avoid redundant decoding of length-prefixed keys in the `InlineSkipList::Insert()` function.",
            "The optimization strategy involved reusing a decoded key to avoid redundant decoding of length-prefixed keys in the `InlineSkipList::Insert()` function.",
            "The optimization strategy reused a previously decoded key to avoid redundant decoding of length-prefixed keys in the `compare_` function.",
            "The optimization strategy involved reusing a decoded key to avoid repeatedly decoding the same length-prefixed key in InlineSkipList::Insert()."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reusing a decoded key to avoid redundant decoding of length-prefixed keys in the `InlineSkipList::Insert()` function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "ceph",
        "hash": "735ab91f3c6260733b71f0dfab29a99c5805a5c6",
        "author": "Haomai Wang",
        "date": "2015-05-01T00:34:54+08:00",
        "message": "Client: Fast return if len is 0\n\nIf len == 0,\nosdc/Striper.cc: 50: FAILED assert(len > 0)\n 2: (Striper::file_to_extents(CephContext*, char const*, ceph_file_layout const*, unsigned long, unsigned long, unsigned long, std::map<object_t, std::vector<ObjectExtent, std::allocator<ObjectExtent> >, std::less<object_t>, std::allocator<std::pair<object_t const, std::vector<ObjectExtent, std::allocator<ObjectExtent> > > > >&, unsigned long)+0x1c6) [0x7fd1a0f4f522]\n 3: (Striper::file_to_extents(CephContext*, char const*, ceph_file_layout const*, unsigned long, unsigned long, unsigned long, std::vector<ObjectExtent, std::allocator<ObjectExtent> >&, unsigned long)+0x69) [0x7fd1a0f4f315]\n 4: (Striper::file_to_extents(CephContext*, inodeno_t, ceph_file_layout const*, unsigned long, unsigned long, unsigned long, std::vector<ObjectExtent, std::allocator<ObjectExtent> >&)+0x8a) [0x7fd1a0ef9c3c]\n 5: (ObjectCacher::file_read(ObjectCacher::ObjectSet*, ceph_file_layout*, snapid_t, long, unsigned long, ceph::buffer::list*, int, Context*)+0x7e) [0x7fd1a0efb186]\n 6: (Client::_read_async(Fh*, unsigned long, unsigned long, ceph::buffer::list*)+0x4ca) [0x7fd1a0ec90d4]\n 7: (Client::_read(Fh*, long, unsigned long, ceph::buffer::list*)+0x3dc) [0x7fd1a0ec8744]\n 8: (Client::read(int, char*, long, long)+0x208) [0x7fd1a0ec8100]\n 9: (ceph_read()+0x5e) [0x7fd1a0e80603]\n\nSigned-off-by: Haomai Wang <haomaiwang@gmail.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/client/Client.cc"
        ],
        "github_commit_url": "https://github.com/ceph/ceph/commit/735ab91f3c6260733b71f0dfab29a99c5805a5c6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Client::_read_async"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involves adding an early return check for zero-length reads to avoid unnecessary processing and potential assertion failures.",
            "The optimization strategy involves adding an early return check for zero-length reads to avoid unnecessary processing and potential assertion failures.",
            "The optimization strategy involves adding an early return check for zero-length reads to avoid unnecessary processing and potential assertion failures.",
            "The optimization strategy involves adding an early return check for zero-length reads to avoid unnecessary processing and potential assertion failures.",
            "The optimization strategy involves adding an early return check for zero-length reads to avoid unnecessary processing and potential assertion failures."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involves adding an early return check for zero-length reads to avoid unnecessary processing and potential assertion failures.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "8558457143bfa76d61e0d2f715e40ec2ddb6ffc2",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "ldb_cmd_execute_result.h: perform init in initialization list\n\nFix for:\n\n[util/ldb_cmd_execute_result.h:18]: (performance) Variable 'message_'\n is assigned in constructor body. Consider performing initialization\n in initialization list.\n[util/ldb_cmd_execute_result.h:23]: (performance) Variable 'message_'\n is assigned in constructor body. Consider performing initialization\n in initialization list.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "util/ldb_cmd_execute_result.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/8558457143bfa76d61e0d2f715e40ec2ddb6ffc2",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "LDBCommandExecuteResult"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization strategy involved moving variable initialization from the constructor body to the initialization list to improve performance by avoiding unnecessary default construction and assignment.",
            "The optimization strategy involved moving variable initialization from the constructor body to the initialization list to improve performance by avoiding unnecessary default construction and assignment.",
            "The optimization strategy involved moving variable initialization from the constructor body to the initialization list to improve performance by avoiding unnecessary default construction and assignment.",
            "The optimization strategy involved moving variable initialization from the constructor body to the initialization list to improve performance by avoiding unnecessary default construction and assignment.",
            "The optimization strategy involved moving variable initialization from the constructor body to the initialization list to improve performance by reducing unnecessary assignments."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved moving variable initialization from the constructor body to the initialization list to improve performance by avoiding unnecessary default construction and assignment.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "qtdeclarative",
        "hash": "e338bbed44d09c08b7ca047ff0914ed01d3917fd",
        "author": "Sami Shalayel",
        "date": "2025-02-18T20:02:03+01:00",
        "message": "qqmljsutils: improve didYouMean performance\n\ndidYouMean eats up a lot of time in the profiler when imports can't be\nfound, so its not really a \"performance fix\". But it makes qmllint\nfaster on files that have a typo in its imports for example.\n\nSwapping QList with QVarLengthArray makes the runtime of\ntst_qmllint_benchmark:onlyQdsLintPlugin on\nqtdesign-studio/examples/DesignEffectsDemo/content/Gallery.ui.qml go\nfrom 150ms to 125ms when the QtDesign studio modules import paths are\nmissing. It seems that QVarLengthArray does less allocations than QList,\nprobably because of the std::swap.\n\nIt seemed that std::vector had similar performance to QVarLengthArray,\nup to some ms.\n\nTask-number: QTBUG-133349\nChange-Id: I3facc8f194da6eaf1aebbce91292bf9b164b740e\nReviewed-by: Ulf Hermann <ulf.hermann@qt.io>",
        "modified_files_count": 1,
        "modified_files": [
            "src/qmlcompiler/qqmljsutils.cpp"
        ],
        "github_commit_url": "https://github.com/qt/qtdeclarative/commit/e338bbed44d09c08b7ca047ff0914ed01d3917fd",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "QQmlJSUtils::didYouMean"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing QList with QVarLengthArray to reduce memory allocations and improve performance in the `didYouMean` function.",
            "The optimization strategy involved replacing QList with QVarLengthArray to reduce memory allocations and improve performance in the `didYouMean` function.",
            "The optimization strategy involved replacing QList with QVarLengthArray to reduce memory allocations and improve performance in the `didYouMean` function.",
            "The optimization strategy involved replacing QList with QVarLengthArray to reduce memory allocations and improve performance in a specific function.",
            "The optimization strategy involved replacing QList with QVarLengthArray to reduce memory allocations and improve performance in the `didYouMean` function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            false,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing QList with QVarLengthArray to reduce memory allocations and improve performance in the `didYouMean` function.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "a2de8e52bb6c13baf5f2323eba0ca356f1294f88",
        "author": "Simon Liu",
        "date": "2018-11-13T14:39:03-08:00",
        "message": "optimized the performance of autovector::emplace_back. (#4606)\n\nSummary:\nIt called the autovector::push_back simply in autovector::emplace_back.\nThis was not efficient, and then optimazed this function through the\nperfect forwarding.\n\nThis was the src and result of the benchmark(using the google'benchmark library, the type of elem in\nautovector was std::string, and call emplace_back with the \"char *\" type):\n\nhttps://gist.github.com/monadbobo/93448b89a42737b08cbada81de75c5cd\n\nPS: The benchmark's result of  previous PR was not accurate, and so I update the test case and result.\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4606\n\nDifferential Revision: D13046813\n\nPulled By: sagar0\n\nfbshipit-source-id: 19cde1bcadafe899aa454b703acb35737a1cc02d",
        "modified_files_count": 1,
        "modified_files": [
            "util/autovector.h"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/a2de8e52bb6c13baf5f2323eba0ca356f1294f88",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "emplace_back"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization strategy involved replacing an inefficient `push_back` call in `emplace_back` with perfect forwarding to reduce unnecessary copies and improve performance.",
            "The optimization strategy involved replacing an inefficient `push_back` call in `emplace_back` with perfect forwarding to reduce unnecessary copies and improve performance.",
            "The optimization replaced an inefficient `push_back` call in `emplace_back` with perfect forwarding to reduce unnecessary object copies and improve performance.",
            "The optimization strategy replaced an inefficient `push_back` call in `emplace_back` with perfect forwarding to reduce unnecessary object copies and improve performance.",
            "The optimization strategy involved replacing an inefficient `push_back` call in `emplace_back` with perfect forwarding to reduce unnecessary object copies and improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing an inefficient `push_back` call in `emplace_back` with perfect forwarding to reduce unnecessary object copies and improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "55652043c83c463ce57b7748e01c6d12bb5bf9fe",
        "author": "Danny Al-Gaaf",
        "date": "2014-10-01T10:49:08+02:00",
        "message": "table/cuckoo_table_reader.cc: pass func parameter by reference\n\nFix for:\n\n[table/cuckoo_table_reader.cc:196]: (performance) Function\n parameter 'target' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/55652043c83c463ce57b7748e01c6d12bb5bf9fe",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "BucketComparator"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying and improve performance.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying and improve performance.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copy overhead.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying and improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying and improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "OpenRCT2",
        "hash": "eda01dc6089a430bb3dddf5360f0b8441b0933be",
        "author": "ζeh Matt",
        "date": "2021-01-01T02:43:13+02:00",
        "message": "Merge pull request #13668 from ZehMatt/performance/opengl-setdpi\n\nAvoid unnecessary calculations when the passed DPI is the active DPI",
        "modified_files_count": 1,
        "modified_files": [
            "src/openrct2-ui/drawing/engines/opengl/OpenGLDrawingEngine.cpp"
        ],
        "github_commit_url": "https://github.com/OpenRCT2/OpenRCT2/commit/eda01dc6089a430bb3dddf5360f0b8441b0933be",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "OpenGLDrawingContext::SetDPI"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids redundant calculations by checking if the passed DPI matches the active DPI before proceeding with computations.",
            "The optimization avoids redundant calculations by checking if the passed DPI is already the active DPI before performing any operations.",
            "The optimization avoids redundant calculations by checking if the passed DPI matches the active DPI before proceeding.",
            "The optimization avoids redundant calculations by checking if the passed DPI matches the active DPI before proceeding with computations.",
            "The optimization avoids redundant calculations by checking if the passed DPI is already the active DPI before proceeding with further operations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids redundant calculations by checking if the passed DPI matches the active DPI before proceeding with computations.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "93548ce8f451a701ad0967ba705f04fef80aa11a",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "table/cuckoo_table_reader.cc: pass func parameter by ref\n\nFix for:\n\n[table/cuckoo_table_reader.cc:198]: (performance) Function\n parameter 'file_data' should be passed by reference.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "table/cuckoo_table_reader.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/93548ce8f451a701ad0967ba705f04fef80aa11a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "BucketComparator"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying of data.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying of data.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying of data.",
            "The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.",
            "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying of data."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved passing a function parameter by reference to avoid unnecessary copying of data.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "b8b7117e97e649fc65d0a4dd397caf9a39fb71b1",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:31+02:00",
        "message": "db/version_set.cc: use !empty() instead of 'size() > 0'\n\nUse empty() since it should be prefered as it has, following\nthe standard, a constant time complexity regardless of the\ncontainter type. The same is not guaranteed for size().\n\nFix for:\n[db/version_set.cc:2250]: (performance) Possible inefficient\n checking for 'column_families_not_found' emptiness.\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_set.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/b8b7117e97e649fc65d0a4dd397caf9a39fb71b1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "VersionSet::Recover"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization replaces `size() > 0` with `!empty()` to ensure constant-time complexity for checking container emptiness.",
            "The optimization replaces `size() > 0` with `!empty()` to ensure constant-time complexity for checking container emptiness.",
            "The optimization replaces `size() > 0` with `!empty()` to ensure constant-time complexity for checking container emptiness.",
            "The optimization replaces `size() > 0` with `!empty()` to ensure constant-time complexity for checking container emptiness, as mandated by the C++ standard.",
            "The optimization replaces `size() > 0` with `!empty()` to ensure constant-time complexity for checking container emptiness, as mandated by the C++ standard."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization replaces `size() > 0` with `!empty()` to ensure constant-time complexity for checking container emptiness.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "43c789c8f246a2a35864e3fca9585b55c40c2095",
        "author": "Danny Al-Gaaf",
        "date": "2014-09-30T23:30:32+02:00",
        "message": "spatialdb/spatial_db.cc: use !empty() instead of 'size() > 0'\n\nUse empty() since it should be prefered as it has, following\nthe standard, a constant time complexity regardless of the\ncontainter type. The same is not guaranteed for size().\n\nSigned-off-by: Danny Al-Gaaf <danny.al-gaaf@bisect.de>",
        "modified_files_count": 1,
        "modified_files": [
            "utilities/spatialdb/spatial_db.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/43c789c8f246a2a35864e3fca9585b55c40c2095",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SpatialIndexCursor"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization strategy replaces `size() > 0` with `!empty()` to ensure constant-time complexity for checking if a container is non-empty, as mandated by the C++ standard.",
            "The optimization strategy replaces `size() > 0` with `!empty()` to ensure constant-time complexity for checking if a container is non-empty, as mandated by the C++ standard.",
            "The optimization strategy replaces `size() > 0` with `!empty()` to ensure constant-time complexity for checking if a container is non-empty, as mandated by the C++ standard.",
            "The optimization strategy replaces `size() > 0` with `!empty()` to ensure constant-time complexity for checking container non-emptiness, as mandated by the C++ standard.",
            "The optimization strategy replaces `size() > 0` with `!empty()` to ensure constant-time complexity for checking if a container is non-empty, as mandated by the C++ standard."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy replaces `size() > 0` with `!empty()` to ensure constant-time complexity for checking if a container is non-empty, as mandated by the C++ standard.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "genometools",
        "hash": "f64e95dfe0c4257ee7a238ac25febedd2235025e",
        "author": "Stefan Kurtz",
        "date": "2012-03-15T12:04:07+01:00",
        "message": "Optimized gt_firstcodes_countocc_increment.",
        "modified_files_count": 1,
        "modified_files": [
            "src/match/firstcodes-tab.h"
        ],
        "github_commit_url": "https://github.com/genometools/genometools/commit/f64e95dfe0c4257ee7a238ac25febedd2235025e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "DECLARE_HASHMAP"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the hash map implementation.",
            "The optimization strategy involved modifying the hash map implementation to reduce unnecessary computations during key lookups.",
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the hash map implementation.",
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the hash map implementation.",
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the hash map implementation."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant computations by caching and reusing results within the hash map implementation.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "MathGeoLib",
        "hash": "bd4a94847324f939187edc214fb3adfeb06b84b6",
        "author": "Jukka Jylänki",
        "date": "2014-02-10T22:53:33+02:00",
        "message": "Optimize away an extra copy in float4x4::Inverted() when using SSE.",
        "modified_files_count": 1,
        "modified_files": [
            "src/Math/float4x4.cpp"
        ],
        "github_commit_url": "https://github.com/juj/MathGeoLib/commit/bd4a94847324f939187edc214fb3adfeb06b84b6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "float4x4::Inverted"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization eliminates an unnecessary copy operation in the `float4x4::Inverted()` function by directly using SSE instructions for inversion.",
            "The optimization eliminates an unnecessary copy operation in the `float4x4::Inverted()` function by directly using SSE instructions for in-place inversion.",
            "The optimization eliminates an unnecessary copy operation in the `float4x4::Inverted()` function by directly using SSE instructions for in-place inversion.",
            "The optimization eliminates an unnecessary copy operation in the `float4x4::Inverted()` function by directly using SSE instructions for inversion.",
            "The optimization eliminates an unnecessary copy operation in the `float4x4::Inverted()` function by directly using SSE instructions for inversion."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization eliminates an unnecessary copy operation in the `float4x4::Inverted()` function by directly using SSE instructions for inversion.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "NX-FPS",
        "hash": "64ac0e1cddff681409ecf95293824f95039f099c",
        "author": "masagrator",
        "date": "2020-03-04T20:55:22+01:00",
        "message": "Make file output faster",
        "modified_files_count": 1,
        "modified_files": [
            "source/main.cpp"
        ],
        "github_commit_url": "https://github.com/masagrator/NX-FPS/commit/64ac0e1cddff681409ecf95293824f95039f099c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "main"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing the frequency of file write operations by buffering data and writing in larger chunks.",
            "The optimization strategy involved reducing the frequency of file write operations by buffering data and writing in larger chunks.",
            "The optimization strategy involved reducing the frequency of file write operations by buffering data and writing in larger chunks.",
            "The optimization strategy involved reducing the frequency of file write operations by buffering data before writing to improve performance.",
            "The optimization strategy involved reducing the frequency of file write operations by buffering data and writing in larger chunks."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing the frequency of file write operations by buffering data and writing in larger chunks.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "ClickHouse",
        "hash": "0820dc0c8434432d7b1f7740f5561db7c62db9e6",
        "author": "Alexey Milovidov",
        "date": "2019-12-21T02:59:08+03:00",
        "message": "Optimization of sorting heap",
        "modified_files_count": 1,
        "modified_files": [
            "dbms/src/Core/SortCursor.h"
        ],
        "github_commit_url": "https://github.com/ClickHouse/ClickHouse/commit/0820dc0c8434432d7b1f7740f5561db7c62db9e6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SortingHeap"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved restructuring the sorting heap to reduce unnecessary comparisons during element insertion and extraction.",
            "The optimization strategy involved restructuring the sorting heap to reduce unnecessary comparisons during element insertion and extraction.",
            "The optimization strategy involved restructuring the sorting heap to reduce unnecessary comparisons during element reordering.",
            "The optimization strategy involved restructuring the sorting heap to reduce unnecessary comparisons during element insertion and extraction.",
            "The optimization strategy involved restructuring the sorting heap to reduce unnecessary comparisons during element insertion and extraction."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved restructuring the sorting heap to reduce unnecessary comparisons during element insertion and extraction.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "lime3ds-archive",
        "hash": "a234e4c2009b08039d0698cbbcc8595a1f04a615",
        "author": "Huw Pascoe",
        "date": "2017-09-17T15:56:36+01:00",
        "message": "Improved performance of FromAttributeBuffer\n\nTernary operator is optimized by the compiler\nwhereas std::min() is meant to return a value.\n\nI've noticed a 5%-10% emulation speed increase.",
        "modified_files_count": 1,
        "modified_files": [
            "src/video_core/shader/shader.cpp"
        ],
        "github_commit_url": "https://github.com/Lime3DS/lime3ds-archive/commit/a234e4c2009b08039d0698cbbcc8595a1f04a615",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "OutputVertex::FromAttributeBuffer"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization replaced `std::min()` with a ternary operator to leverage compiler-level optimizations for improved performance.",
            "The optimization replaced `std::min()` with a ternary operator to leverage compiler optimizations for improved performance.",
            "The optimization replaced `std::min()` with a ternary operator to leverage compiler optimizations for improved performance in the `FromAttributeBuffer` function.",
            "The optimization replaced `std::min()` with a ternary operator to leverage compiler optimizations for improved performance.",
            "The optimization replaced `std::min()` with a ternary operator to leverage compiler optimizations for improved performance in the `FromAttributeBuffer` function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization replaced `std::min()` with a ternary operator to leverage compiler-level optimizations for improved performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "anura",
        "hash": "c458019a3b810f48c4e526debc9ef6dacf2beb6c",
        "author": "Chris Beck",
        "date": "2015-05-02T23:36:08-04:00",
        "message": "lua: cause lists to map to 1-based lua tables (lua arrays)\n\nThis is more efficient than 0-based lua tables, which get\nimplemented with a hash component.\n\nWe might undo this commit later, who knows.",
        "modified_files_count": 1,
        "modified_files": [
            "src/lua_iface.cpp"
        ],
        "github_commit_url": "https://github.com/anura-engine/anura/commit/c458019a3b810f48c4e526debc9ef6dacf2beb6c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "variant_to_lua_value"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved changing the mapping of lists to 1-based Lua tables to avoid the hash component overhead associated with 0-based tables.",
            "The optimization strategy involved changing the mapping of lists to 1-based Lua tables instead of 0-based to avoid the hash component overhead in Lua arrays.",
            "The optimization strategy involved changing the mapping of lists to 1-based Lua tables instead of 0-based ones to avoid the hash component overhead in Lua arrays.",
            "The optimization strategy involved changing the indexing of Lua tables from 0-based to 1-based to leverage Lua's native array implementation and avoid the overhead of hash tables.",
            "The optimization strategy involved changing the mapping of lists to 1-based Lua tables to avoid the hash component overhead associated with 0-based Lua tables."
        ],
        "is_generic_optimization": [
            true,
            false,
            false,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved changing the mapping of lists to 1-based Lua tables instead of 0-based ones to avoid the hash component overhead in Lua arrays.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "libevent",
        "hash": "557990cad33f1b06a1e2a416231d79590237dd2e",
        "author": "Cœur",
        "date": "2023-03-02T07:51:14+01:00",
        "message": "Optimize arc4random_uniform() (by syncing with OpenBSD implementation)\n\n1. In d4de062, in Feb 2010, libevent adopted OpenBSD implementation of\n   arc4random_uniform.\n2. In\n   https://github.com/openbsd/src/commit/728918cba93e0418bea2a73c9784f6b80c2a9dbd,\n   in Jun 2012, OpenBSD improved their implementation to be faster, by\n   changing arc4random_uniform() to calculate ``2**32 % upper_bound'' as\n   ``-upper_bound % upper_bound''.\n\nAlternatively we can simply remove arc4random_uniform() since it is not\nused by libevent anyway, but let's just sync the header for now.",
        "modified_files_count": 1,
        "modified_files": [
            "arc4random.c"
        ],
        "github_commit_url": "https://github.com/libevent/libevent/commit/557990cad33f1b06a1e2a416231d79590237dd2e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "arc4random_uniform"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used a mathematical transformation to replace an expensive modulo operation with a cheaper equivalent expression.",
            "The optimization strategy used a mathematical transformation to replace an expensive modulo operation with a cheaper equivalent expression.",
            "The optimization strategy used a mathematical transformation to replace an expensive modulo operation with a cheaper equivalent expression.",
            "The optimization strategy used a mathematical transformation to replace an expensive modulo operation with a cheaper equivalent expression.",
            "The optimization strategy used a mathematical transformation to replace an expensive modulo operation with a cheaper equivalent expression."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used a mathematical transformation to replace an expensive modulo operation with a cheaper equivalent expression.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "20dc5e74f276bdcb26c44c13bced506a2d920d3f",
        "author": "Sagar Vemuri",
        "date": "2017-08-05T00:15:35-07:00",
        "message": "Optimize range-delete aggregator call in merge helper.\n\nSummary:\nIn the condition:\n```\nif (range_del_agg != nullptr &&\n    range_del_agg->ShouldDelete(\n        iter->key(),\n        RangeDelAggregator::RangePositioningMode::kForwardTraversal) &&\n    filter != CompactionFilter::Decision::kRemoveAndSkipUntil) {\n...\n}\n```\nit could be possible that all the work done in `range_del_agg->ShouldDelete` is wasted due to not having the right `filter` value later on.\nInstead, check `filter` value before even calling `range_del_agg->ShouldDelete`, which is a much more involved function.\nCloses https://github.com/facebook/rocksdb/pull/2690\n\nDifferential Revision: D5568931\n\nPulled By: sagar0\n\nfbshipit-source-id: 17512d52360425c7ae9de7675383f5d7bc3dad58",
        "modified_files_count": 1,
        "modified_files": [
            "db/merge_helper.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/20dc5e74f276bdcb26c44c13bced506a2d920d3f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "MergeHelper::MergeUntil"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization strategy involves reordering condition checks to evaluate a less computationally expensive condition first, avoiding unnecessary calls to a more expensive function.",
            "The optimization strategy involves reordering conditional checks to evaluate a less computationally expensive condition first, avoiding unnecessary calls to a more expensive function.",
            "The optimization strategy involves reordering condition checks to evaluate a less computationally expensive condition first, avoiding unnecessary calls to a more expensive function.",
            "The optimization strategy involves reordering conditional checks to evaluate a less computationally expensive condition first, avoiding unnecessary calls to a more expensive function.",
            "The optimization strategy involves reordering conditional checks to evaluate a less computationally expensive condition first, avoiding unnecessary calls to a more expensive function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involves reordering conditional checks to evaluate a less computationally expensive condition first, avoiding unnecessary calls to a more expensive function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "slurm",
        "hash": "0d706a22479dd972f47a680a6a4bc78d49e3cea2",
        "author": "Moe Jette",
        "date": "2002-12-06T01:15:03+00:00",
        "message": "Slight optimization in copying node addresses (do all in one memcpy).",
        "modified_files_count": 1,
        "modified_files": [
            "src/srun/job.c"
        ],
        "github_commit_url": "https://github.com/SchedMD/slurm/commit/0d706a22479dd972f47a680a6a4bc78d49e3cea2",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "job_create"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used was to replace multiple individual memory copy operations with a single `memcpy` call to improve efficiency.",
            "The optimization strategy used was to replace multiple individual memory copy operations with a single `memcpy` call to improve efficiency.",
            "The optimization strategy used was to replace multiple individual memory copy operations with a single `memcpy` call to improve efficiency.",
            "The optimization strategy used was to replace multiple individual memory copy operations with a single `memcpy` call to improve efficiency.",
            "The optimization strategy used was to replace multiple individual memory copy operations with a single `memcpy` call to reduce overhead and improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used was to replace multiple individual memory copy operations with a single `memcpy` call to improve efficiency.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "partclone",
        "hash": "165dfbdaafd188b1250d288289983b5f54795f10",
        "author": "Patryck Rouleau",
        "date": "2013-06-06T19:37:41-04:00",
        "message": "Optimize crc32 computation\n\nMove the crc table initialization outside of the loop to avoid to check the\ninit flag for every byte.\n\nMy benchmark show a gain of 26% to clone a partition of 17G with 10G used:\n\ninit crc32 table inside the loop:\nreal   4m23.649s\nuser   2m20.301s\nsys    1m34.782s\n\ninit crc32 table outside the loop:\nreal   3m13.169s\nuser   1m15.269s\nsys    1m30.966s\n\nSigned-off-by: Patryck Rouleau <pfrouleau@gmail.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/partclone.c"
        ],
        "github_commit_url": "https://github.com/Thomas-Tsai/partclone/commit/165dfbdaafd188b1250d288289983b5f54795f10",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "crc32"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy moves the initialization of the CRC32 table outside of the loop to eliminate redundant checks of the initialization flag for every byte.",
            "The optimization strategy moves the initialization of the CRC32 table outside of the loop to eliminate redundant checks of the initialization flag for every byte.",
            "The optimization strategy involved moving the initialization of the CRC32 table outside of the loop to eliminate redundant checks of the init flag for every byte.",
            "The optimization strategy moves the initialization of the CRC32 table outside of the loop to eliminate redundant checks of the init flag for every byte.",
            "The optimization strategy moves the initialization of the CRC32 table outside of the loop to eliminate redundant checks of the init flag for every byte."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy moves the initialization of the CRC32 table outside of the loop to eliminate redundant checks of the init flag for every byte.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "b5b4a2f76b5de723606c0e8f30eb0f930d4a3c21",
        "author": "Chris Lattner",
        "date": "2004-09-30T16:35:08+00:00",
        "message": "Use more efficient map operations.  Fix a bug that would affect hypothetical\ntargets that supported multiple memory operands.\n\nllvm-svn: 16614",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/CodeGen/VirtRegMap.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/b5b4a2f76b5de723606c0e8f30eb0f930d4a3c21",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing less efficient map operations with more efficient ones to improve performance.",
            "The optimization strategy involved replacing less efficient map operations with more efficient ones to improve performance.",
            "The optimization strategy involved replacing less efficient map operations with more efficient ones to improve performance.",
            "The optimization strategy involved replacing less efficient map operations with more efficient ones to improve performance.",
            "The optimization strategy involved replacing less efficient map operations with more efficient ones to improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing less efficient map operations with more efficient ones to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "sc3-plugins",
        "hash": "890b380b039cc8615d52dc91a85571af178e8bd8",
        "author": "Tim Blechmann",
        "date": "2013-01-15T18:42:36+01:00",
        "message": "Nova UGens: GendyI - ensure inlining of Gendyn_distribution\n\nSigned-off-by: Tim Blechmann <tim@klingt.org>",
        "modified_files_count": 1,
        "modified_files": [
            "source/NovaUGens/NovaGendy.cpp"
        ],
        "github_commit_url": "https://github.com/supercollider/sc3-plugins/commit/890b380b039cc8615d52dc91a85571af178e8bd8",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used is ensuring the inlining of the `Gendyn_distribution` function to reduce function call overhead.",
            "The optimization strategy used is ensuring the inlining of the `Gendyn_distribution` function to reduce function call overhead.",
            "The optimization strategy used is ensuring the inlining of the `Gendyn_distribution` function to reduce function call overhead.",
            "The optimization strategy used is ensuring the inlining of the `Gendyn_distribution` function to reduce function call overhead.",
            "The optimization strategy used is ensuring the inlining of the `Gendyn_distribution` function to reduce function call overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is ensuring the inlining of the `Gendyn_distribution` function to reduce function call overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "OpenTESArena",
        "hash": "d451fb9a6257e1cc93baf1b2b9bcd52dc4a762e1",
        "author": "Aaron",
        "date": "2020-05-14T23:17:37-07:00",
        "message": "Cache voxel grid dimensions.\n\nThe getter calls don't seem to get inlined even in a release build except with link time optimization. The generated assembly in the DDA step lambda no longer has call instructions, so that's a plus.",
        "modified_files_count": 1,
        "modified_files": [
            "OpenTESArena/src/Rendering/SoftwareRenderer.cpp"
        ],
        "github_commit_url": "https://github.com/afritz1/OpenTESArena/commit/d451fb9a6257e1cc93baf1b2b9bcd52dc4a762e1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SoftwareRenderer::rayCast2DInternal"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization caches voxel grid dimensions to avoid repeated getter calls, reducing function call overhead in performance-critical code.",
            "The optimization strategy involved caching voxel grid dimensions to avoid repeated getter calls, thereby reducing function call overhead in performance-critical code.",
            "The optimization caches voxel grid dimensions to avoid repeated getter calls, reducing function call overhead in performance-critical code.",
            "The optimization caches voxel grid dimensions to avoid repeated getter calls, reducing function call overhead in performance-critical code.",
            "The optimization caches voxel grid dimensions to avoid repeated getter calls, reducing function call overhead in performance-critical code."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization caches voxel grid dimensions to avoid repeated getter calls, reducing function call overhead in performance-critical code.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "seqtk",
        "hash": "ba10dad8a5cc983c6d26fb4bb47251defe286d24",
        "author": "Fabian Klötzl",
        "date": "2018-11-21T12:20:12+01:00",
        "message": "improve parsing performance\n\nDoubles throughput; can now parse FASTA at 2GB/s.",
        "modified_files_count": 1,
        "modified_files": [
            "kseq.h"
        ],
        "github_commit_url": "https://github.com/lh3/seqtk/commit/ba10dad8a5cc983c6d26fb4bb47251defe286d24",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ks_getuntil2"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved restructuring the parsing logic to minimize unnecessary memory operations and improve cache efficiency.",
            "The optimization strategy involved improving parsing performance by doubling throughput to achieve 2GB/s for FASTA parsing.",
            "The optimization strategy involved modifying the parsing logic to reduce unnecessary memory operations and improve efficiency in processing FASTA files.",
            "The optimization strategy involved restructuring the parsing logic to minimize unnecessary memory operations and improve loop efficiency.",
            "The optimization strategy involved restructuring the parsing logic to minimize unnecessary memory operations and improve cache efficiency."
        ],
        "is_generic_optimization": [
            true,
            false,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved restructuring the parsing logic to minimize unnecessary memory operations and improve cache efficiency.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "v8",
        "hash": "699badd56b4c1472dbab552917842d9587effc5f",
        "author": "Toon Verwaest",
        "date": "2019-06-06T15:48:18+00:00",
        "message": "[scanner] Add fast path for converting utf8 that's ascii to utf16\n\nChange-Id: I386261bc012d0d4556b0f9417b2880cc7f44bf2c\nReviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/1647697\nCommit-Queue: Toon Verwaest <verwaest@chromium.org>\nReviewed-by: Leszek Swirski <leszeks@chromium.org>\nCr-Commit-Position: refs/heads/master@{#62029}",
        "modified_files_count": 1,
        "modified_files": [
            "src/parsing/scanner-character-streams.cc"
        ],
        "github_commit_url": "https://github.com/v8/v8/commit/699badd56b4c1472dbab552917842d9587effc5f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Utf8ExternalStreamingStream::FillBufferFromCurrentChunk"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization introduces a fast path for converting UTF-8 ASCII data to UTF-16 by directly processing ASCII characters without full UTF-8 decoding.",
            "The optimization introduces a fast path for converting UTF-8 ASCII data to UTF-16 by directly processing ASCII characters without full UTF-8 decoding.",
            "The optimization introduces a fast path for converting UTF-8 ASCII data to UTF-16, reducing unnecessary computations by directly handling ASCII characters without full UTF-8 decoding.",
            "The optimization introduces a fast path for converting UTF-8 ASCII data to UTF-16, reducing unnecessary computations by directly handling ASCII characters without full UTF-8 decoding.",
            "The optimization introduces a fast path for converting UTF-8 ASCII data to UTF-16, reducing unnecessary computations by directly handling ASCII characters."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization introduces a fast path for converting UTF-8 ASCII data to UTF-16, reducing unnecessary computations by directly handling ASCII characters without full UTF-8 decoding.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "kdeconnect-kde",
        "hash": "f8674db931c9b743874ae9d09d5cf48029dcec4b",
        "author": "Nicolas Fella",
        "date": "2020-04-08T10:25:34+02:00",
        "message": "Don't recreate QRegularExpression for leading zeroes each time\n\nCreating a QRegularExpression is quite expensive and we use the same expression for each run. Sharing it between the runs leads to a significant performance improvement.",
        "modified_files_count": 1,
        "modified_files": [
            "smsapp/smshelper.cpp"
        ],
        "github_commit_url": "https://github.com/KDE/kdeconnect-kde/commit/f8674db931c9b743874ae9d09d5cf48029dcec4b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SmsHelper::canonicalizePhoneNumber"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involves caching and reusing a QRegularExpression object instead of recreating it for each function call to reduce overhead.",
            "The optimization strategy involves caching and reusing a QRegularExpression object instead of recreating it for each function call to reduce overhead.",
            "The optimization strategy involves caching and reusing a QRegularExpression object to avoid the repeated cost of recreating it for each function call.",
            "The optimization strategy involves caching and reusing a QRegularExpression object instead of recreating it for each function call to reduce overhead.",
            "The optimization strategy involves caching and reusing a QRegularExpression object instead of recreating it for each function call to reduce overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involves caching and reusing a QRegularExpression object instead of recreating it for each function call to reduce overhead.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "82e8e9e26bb16d1af07a26741bcf63d8342e4336",
        "author": "JiYou",
        "date": "2018-09-14T19:43:04-07:00",
        "message": "VersionBuilder: optmize SaveTo() to linear time. (#4366)\n\nSummary:\nBecause `base_files` and `added_files` both are sorted, using a merge\noperation to these two sorted arrays is more effective. The complexity\nis reduced to linear time.\n\n    - optmize the merge complexity.\n    - move the `NDEBUG` of sorted `added_files` out of merge process.\n\nSigned-off-by: JiYou <jiyou09@gmail.com>\nPull Request resolved: https://github.com/facebook/rocksdb/pull/4366\n\nDifferential Revision: D9833592\n\nPulled By: ajkr\n\nfbshipit-source-id: dd32b67ebdca4c20e5e9546ab8082cecefe99fd0",
        "modified_files_count": 1,
        "modified_files": [
            "db/version_builder.cc"
        ],
        "github_commit_url": "https://github.com/facebook/rocksdb/commit/82e8e9e26bb16d1af07a26741bcf63d8342e4336",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SaveTo"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rocksdb",
        "optimization_summary": [
            "The optimization strategy used a merge operation on two sorted arrays to reduce the time complexity of the `SaveTo()` function to linear time.",
            "The optimization strategy used a merge operation on two sorted arrays to reduce the time complexity of the `SaveTo()` function to linear time.",
            "The optimization strategy used a merge operation on two sorted arrays to reduce the time complexity of the `SaveTo()` function to linear time.",
            "The optimization strategy used a merge operation on two sorted arrays to reduce the time complexity of the `SaveTo()` function to linear time.",
            "The optimization strategy used a merge operation on two sorted arrays to reduce the time complexity of the `SaveTo()` function to linear time."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used a merge operation on two sorted arrays to reduce the time complexity of the `SaveTo()` function to linear time.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "magnum",
        "hash": "bc5d127bd6b1fef4cf9888b92b2f09acea57bff3",
        "author": "Vladimír Vondruš",
        "date": "2023-05-19T16:23:25+02:00",
        "message": "sceneconverter: don't query Arguments value unnecessarily often.\n\nIt's an --info output which doesn't have to be the fastest ever, but it\nalso doesn't have to waste time for no reason.",
        "modified_files_count": 1,
        "modified_files": [
            "src/Magnum/SceneTools/Implementation/sceneConverterUtilities.h"
        ],
        "github_commit_url": "https://github.com/mosra/magnum/commit/bc5d127bd6b1fef4cf9888b92b2f09acea57bff3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "printInfo"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy reduces redundant queries to the Arguments value by caching or reusing the result.",
            "The optimization strategy reduces redundant queries to the Arguments value by caching or restructuring access within the function.",
            "The optimization strategy reduces redundant queries to the Arguments value by caching or reusing the result within the function.",
            "The optimization strategy reduces redundant queries to the Arguments value by caching or restructuring access within the function.",
            "The optimization strategy reduces redundant queries to the Arguments value by caching or restructuring access within the function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy reduces redundant queries to the Arguments value by caching or restructuring access within the function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "selinux-kernel",
        "hash": "5b881c1f83792f5db421124171b06f1b8f1fe075",
        "author": "David Wang",
        "date": "2024-11-10T22:33:52+11:00",
        "message": "powerpc/irq: use seq_put_decimal_ull_width() for decimal values\n\nOn a system with n CPUs and m interrupts, there will be n*m decimal\nvalues yielded via seq_printf(..\"%10u \"..) which is less efficient\nthan seq_put_decimal_ull_width(), stress reading /proc/interrupts\nindicates ~30% performance improvement with this patch.\n\nSigned-off-by: David Wang <00107082@163.com>\n[mpe: Flesh out change log based on original submission]\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/all/20241103080552.4787-1-00107082@163.com\nLink: https://patch.msgid.link/20241108162327.9887-1-00107082@163.com",
        "modified_files_count": 1,
        "modified_files": [
            "arch/powerpc/kernel/irq.c"
        ],
        "github_commit_url": "https://github.com/SELinuxProject/selinux-kernel/commit/5b881c1f83792f5db421124171b06f1b8f1fe075",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "arch_show_interrupts"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization replaces `seq_printf` with `seq_put_decimal_ull_width` to improve the efficiency of formatting and outputting decimal values in `/proc/interrupts`.",
            "The optimization replaces `seq_printf` with `seq_put_decimal_ull_width` to improve the efficiency of formatting and outputting decimal values in `/proc/interrupts`.",
            "The optimization strategy replaces `seq_printf` with `seq_put_decimal_ull_width` to improve the efficiency of formatting and outputting decimal values in `/proc/interrupts`.",
            "The optimization replaces `seq_printf` with `seq_put_decimal_ull_width` to improve the efficiency of formatting and outputting decimal values in `/proc/interrupts`.",
            "The optimization replaces `seq_printf` with `seq_put_decimal_ull_width` to improve the efficiency of formatting and outputting decimal values in `/proc/interrupts`."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization replaces `seq_printf` with `seq_put_decimal_ull_width` to improve the efficiency of formatting and outputting decimal values in `/proc/interrupts`.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "llvm-leg",
        "hash": "df4663be6a9dd427ee0b73a1ea47d6791e5dfc53",
        "author": "Matt Arsenault",
        "date": "2014-07-17T06:13:41+00:00",
        "message": "R600: Short circuit alloca check if address space isn't private.\n\nSkip calling GetUnderlyingObject in cases where it obviously\nisn't from an alloca. This should only be a compile time improvement.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@213229 91177308-0d34-0410-b5e6-96231b3b80d8",
        "modified_files_count": 1,
        "modified_files": [
            "lib/Target/R600/AMDGPUTargetTransformInfo.cpp"
        ],
        "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/df4663be6a9dd427ee0b73a1ea47d6791e5dfc53",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "AMDGPUTTI::getUnrollingPreferences"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involves skipping unnecessary calls to `GetUnderlyingObject` by checking the address space upfront, reducing redundant computations during compilation.",
            "The optimization strategy short-circuits unnecessary calls to `GetUnderlyingObject` by checking the address space beforehand, reducing redundant computations during compilation.",
            "The optimization strategy involves skipping unnecessary calls to `GetUnderlyingObject` by checking the address space upfront, reducing redundant computations during compilation.",
            "The optimization strategy involves skipping unnecessary calls to `GetUnderlyingObject` by checking the address space upfront, reducing redundant computations during compilation.",
            "The optimization strategy short-circuits an unnecessary function call by checking the address space beforehand, reducing redundant computations during compilation."
        ],
        "is_generic_optimization": [
            false,
            false,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involves skipping unnecessary calls to `GetUnderlyingObject` by checking the address space upfront, reducing redundant computations during compilation.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "kmsan",
        "hash": "b6dad11d9cb105681abbfc3d57aae4b21bd0c8c4",
        "author": "Yury Norov",
        "date": "2022-06-03T06:52:57-07:00",
        "message": "arch/ia64: replace cpumask_weight with cpumask_empty where appropriate\n\nsetup_arch() calls cpumask_weight() to check if any bit of a given cpumask\nis set. We can do it more efficiently with cpumask_empty() because\ncpumask_empty() stops traversing the cpumask as soon as it finds first set\nbit, while cpumask_weight() counts all bits unconditionally.\n\nSigned-off-by: Yury Norov <yury.norov@gmail.com>",
        "modified_files_count": 1,
        "modified_files": [
            "arch/ia64/kernel/setup.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/b6dad11d9cb105681abbfc3d57aae4b21bd0c8c4",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "setup_arch"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization replaces a function that counts all set bits in a bitmask with one that stops traversal upon finding the first set bit, reducing unnecessary computation.",
            "The optimization replaces a function that counts all set bits in a bitmask with a more efficient one that stops traversal upon finding the first set bit.",
            "The optimization replaces a full bit-counting function with a short-circuiting check for any set bit to improve efficiency.",
            "The optimization replaces a full bit-counting function with a short-circuiting check for any set bit to improve efficiency.",
            "The optimization replaces a full bit-counting function with a short-circuiting check for any set bit to improve efficiency."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization replaces a full bit-counting function with a short-circuiting check for any set bit to improve efficiency.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "5082af8f2563848eb84e905cefb744f473de602b",
        "author": "Jonas Hahnfeld",
        "date": "2020-03-23T11:40:02+01:00",
        "message": "Implement xoutput_buffer::xsputn()\n\nThis outputs a string of characters which can be appendded more\nefficiently.",
        "modified_files_count": 1,
        "modified_files": [
            "include/xeus-cling/xbuffer.hpp"
        ],
        "github_commit_url": "https://github.com/jupyter-xeus/xeus-cling/commit/5082af8f2563848eb84e905cefb744f473de602b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "overflow"
        ],
        "is_opt_ds": "false",
        "is_opt_ds_simple": "true",
        "repository_name": "xeus-cling",
        "optimization_summary": [
            "The optimization strategy involved implementing a more efficient method for appending characters in bulk to reduce overhead.",
            "The optimization strategy involved implementing a more efficient `xsputn()` method to append strings in bulk rather than character by character.",
            "The optimization strategy involved implementing a more efficient method for appending characters in bulk to reduce overhead.",
            "The optimization strategy involved implementing a more efficient method for appending characters in bulk to reduce overhead.",
            "The optimization strategy involved implementing a more efficient method for appending characters in bulk to reduce overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved implementing a more efficient method for appending characters in bulk to reduce overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "geeqie",
        "hash": "a871f2934cd24dd852a1810a82d7029cf8cfb3e9",
        "author": "Vladimir Nadvornik",
        "date": "2008-06-08T20:24:46+00:00",
        "message": "vficon_sync speed-up",
        "modified_files_count": 1,
        "modified_files": [
            "src/view_file_icon.c"
        ],
        "github_commit_url": "https://github.com/BestImageViewer/geeqie/commit/a871f2934cd24dd852a1810a82d7029cf8cfb3e9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "vficon_sync"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant computations inside a loop by caching results of expensive operations.",
            "The optimization strategy involved reducing redundant computations within the `vficon_sync` function by caching and reusing previously computed values.",
            "The optimization strategy involved reducing redundant computations inside a loop by caching results of expensive operations.",
            "The optimization strategy involved reducing redundant computations by caching and reusing previously calculated values within the function.",
            "The optimization strategy involved reducing redundant computations inside a loop by caching results of expensive operations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant computations inside a loop by caching results of expensive operations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "magnum",
        "hash": "00dbbd5ce2f2b7c65e13589424263ba32cd068f1",
        "author": "Vladimír Vondruš",
        "date": "2010-12-29T21:34:09+01:00",
        "message": "Optimization: using dot product for computing vector length.",
        "modified_files_count": 1,
        "modified_files": [
            "src/Math/Vector.h"
        ],
        "github_commit_url": "https://github.com/mosra/magnum/commit/00dbbd5ce2f2b7c65e13589424263ba32cd068f1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "length"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy replaces a potentially more expensive vector length computation with a dot product, which is computationally simpler.",
            "The optimization strategy replaces a potentially more expensive vector length computation with a dot product-based approach to improve performance.",
            "The optimization strategy replaces a potentially more expensive vector length computation with a dot product, which is computationally simpler.",
            "The optimization strategy replaces a potentially more expensive vector length computation with a dot product, which is computationally simpler.",
            "The optimization strategy replaces a potentially more expensive vector length computation with a dot product, which is computationally simpler."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy replaces a potentially more expensive vector length computation with a dot product, which is computationally simpler.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "clboss",
        "hash": "08336691e511ea540fda5684bb3172c07f098ead",
        "author": "ZmnSCPxj jxPCSnmZ",
        "date": "2020-10-27T21:26:21+08:00",
        "message": "Boss/Mod/FundsMover/Attempter.cpp: Speed up backing off on fuzzpercent.",
        "modified_files_count": 1,
        "modified_files": [
            "Boss/Mod/FundsMover/Attempter.cpp"
        ],
        "github_commit_url": "https://github.com/ZmnSCPxj/clboss/commit/08336691e511ea540fda5684bb3172c07f098ead",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "fee_failed"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing unnecessary computations by directly returning early when a condition is met, avoiding further processing.",
            "The optimization strategy involved reducing unnecessary computations by directly returning early when a condition is met, avoiding further processing.",
            "The optimization strategy involved reducing unnecessary computations by directly returning early when a condition is met, avoiding further processing.",
            "The optimization strategy involved reducing unnecessary computations by directly returning early when a condition is met, avoiding further processing.",
            "The optimization strategy involved reducing unnecessary computations by directly returning early when a condition is met, avoiding further processing."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing unnecessary computations by directly returning early when a condition is met, avoiding further processing.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "AdaptiveCpp",
        "hash": "fc29646db1886c4300c0eaa77ca3f9bdbdeeb243",
        "author": "Joachim Meyer",
        "date": "2021-04-09T15:24:20+02:00",
        "message": "[LoopSplit] Add vectorization MD to latch terminator.\n\nThis should tell the vectorizer to vectorize the work-item loops.",
        "modified_files_count": 1,
        "modified_files": [
            "src/compiler/LoopSplitter.cpp"
        ],
        "github_commit_url": "https://github.com/AdaptiveCpp/AdaptiveCpp/commit/fc29646db1886c4300c0eaa77ca3f9bdbdeeb243",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "inlineSplitterCallTree"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involves adding metadata to the loop latch terminator to enable vectorization of work-item loops by the compiler.",
            "The optimization strategy involves adding metadata to the loop latch terminator to enable vectorization of work-item loops by the compiler.",
            "The optimization strategy involves adding metadata to the loop latch terminator to enable vectorization of work-item loops by the compiler.",
            "The optimization strategy involves adding metadata to the loop latch terminator to enable vectorization of work-item loops by the compiler.",
            "The optimization strategy involves adding metadata to the loop latch terminator to enable vectorization of work-item loops."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involves adding metadata to the loop latch terminator to enable vectorization of work-item loops by the compiler.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "darktable",
        "hash": "85868b2c4cf39e468b960b0f7a09cd5c03f7df2b",
        "author": "Aurélien PIERRE",
        "date": "2020-10-05T12:53:34+02:00",
        "message": "fast_guided_filter.h : improve vectorization with early buffer copying\n\nReduce I/O and improve data-locality\nAdd more comments",
        "modified_files_count": 1,
        "modified_files": [
            "src/common/fast_guided_filter.h"
        ],
        "github_commit_url": "https://github.com/darktable-org/darktable/commit/85868b2c4cf39e468b960b0f7a09cd5c03f7df2b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "variance_analyse"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved improving vectorization and data locality by performing early buffer copying to reduce I/O overhead.",
            "The optimization strategy involved improving vectorization by performing early buffer copying to reduce I/O operations and enhance data locality.",
            "The optimization strategy involved improving vectorization by copying buffers earlier to reduce I/O operations and enhance data locality.",
            "The optimization strategy involved improving vectorization by copying buffers earlier to reduce I/O operations and enhance data locality.",
            "The optimization strategy involved improving vectorization by copying buffers earlier to reduce I/O overhead and enhance data locality."
        ],
        "is_generic_optimization": [
            false,
            true,
            true,
            false,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved improving vectorization by copying buffers earlier to reduce I/O operations and enhance data locality.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "6abe341558abec40c9c44d76e7fb4fb3978e894b",
        "author": "Jonathan Wakely",
        "date": "2022-06-14T21:07:48+01:00",
        "message": "libstdc++: Check lengths first in operator== for basic_string [PR62187]\n\nAs confirmed by LWG 2852, the calls to traits_type::compare do not need\nto be obsvervable, so we can make operator== compare string lengths\nfirst and return immediately for non-equal lengths. This avoids doing a\nslow string comparison for \"abc...xyz\" == \"abc...xy\". Previously we only\ndid this optimization for std::char_traits<char>, but we can enable it\nunconditionally thanks to LWG 2852.\n\nFor comparisons with a const char* we can call traits_type::length right\naway to do the same optimization. That strlen call can be folded away\nfor constant arguments, making it very efficient.\n\nFor the pre-C++20 operator== and operator!= overloads we can swap the\norder of the arguments to take advantage of the operator== improvements.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/62187\n\t* include/bits/basic_string.h (operator==): Always compare\n\tlengths before checking string contents.\n\t[!__cpp_lib_three_way_comparison] (operator==, operator!=):\n\tReorder arguments.",
        "modified_files_count": 1,
        "modified_files": [
            "libstdc++-v3/include/bits/basic_string.h"
        ],
        "github_commit_url": "https://github.com/Rust-GCC/gccrs/commit/6abe341558abec40c9c44d76e7fb4fb3978e894b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "_GLIBCXX_VISIBILITY"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "gccrs",
        "optimization_summary": [
            "The optimization strategy involves comparing string lengths before performing a full content comparison to avoid unnecessary slow operations.",
            "The optimization strategy involves comparing string lengths before performing a full content comparison to avoid unnecessary slow operations.",
            "The optimization strategy involves comparing string lengths before performing a full content comparison to avoid unnecessary slow operations.",
            "The optimization strategy involves comparing string lengths before performing a full content comparison to avoid unnecessary slow operations.",
            "The optimization strategy involves comparing string lengths before performing a full content comparison to avoid unnecessary slow operations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involves comparing string lengths before performing a full content comparison to avoid unnecessary slow operations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "qtbase",
        "hash": "36aaf851ff2814e9e5c024e21b866c403137ff26",
        "author": "John Lindgren",
        "date": "2016-05-24T10:39:00+00:00",
        "message": "Optimize QIconLoader::findIconHelper()\n\nProfiling QIconLoader::findIconHelper() shows that a significant portion of CPU time is being spent in\nQDir::exists(), which creates a new QFileInfo object for the sole purpose of determining whether the passed-in\nfile path is relative or absolute, and then calls QFile::exists(). In this context, we can just as easily\ngenerate the absolute path and call QFile::exists() directly, avoiding the creation of extra QDir and QFileInfo\nobjects.\n\nChange-Id: Ib0b4568b6c16d423eb6c1b15158e44ff141e6175\nTask-number: QTBUG-46767\nReviewed-by: Gunnar Sletta <gunnar@sletta.org>",
        "modified_files_count": 1,
        "modified_files": [
            "src/gui/image/qiconloader.cpp"
        ],
        "github_commit_url": "https://github.com/qt/qtbase/commit/36aaf851ff2814e9e5c024e21b866c403137ff26",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "QIconLoader::findIconHelper"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids unnecessary object creation by directly generating the absolute path and calling QFile::exists() instead of using QDir::exists().",
            "The optimization avoids unnecessary object creation by directly generating the absolute path and calling QFile::exists() instead of using QDir::exists().",
            "The optimization avoids unnecessary object creation by directly generating the absolute path and calling QFile::exists() instead of using QDir::exists().",
            "The optimization avoids unnecessary object creation by directly generating the absolute path and calling QFile::exists() instead of using QDir::exists().",
            "The optimization avoids unnecessary object creation by directly generating the absolute path and calling QFile::exists() instead of using QDir::exists()."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary object creation by directly generating the absolute path and calling QFile::exists() instead of using QDir::exists().",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "wget-lua",
        "hash": "8610b0b355b56c87b9326a71beb21934b15dd17d",
        "author": "Tim Rühsen",
        "date": "2020-02-14T11:14:02+01:00",
        "message": "* src/main.c (main): Code clean, reduce allocations",
        "modified_files_count": 1,
        "modified_files": [
            "src/main.c"
        ],
        "github_commit_url": "https://github.com/ArchiveTeam/wget-lua/commit/8610b0b355b56c87b9326a71beb21934b15dd17d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "main"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing unnecessary memory allocations by reusing existing variables or structures within the `main` function.",
            "The optimization strategy involved reducing unnecessary memory allocations by reusing existing variables or structures within the `main` function.",
            "The optimization strategy involved reducing unnecessary memory allocations by reusing existing variables or structures within the `main` function.",
            "The optimization strategy involved reducing memory allocations by reusing existing variables and minimizing dynamic memory operations within the `main` function.",
            "The optimization strategy involved reducing unnecessary memory allocations by reusing existing variables or structures within the `main` function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing unnecessary memory allocations by reusing existing variables or structures within the `main` function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "barebox",
        "hash": "e48141941199a1a8a05880e95fc8d2455484f135",
        "author": "Sascha Hauer",
        "date": "2025-02-24T10:09:29+01:00",
        "message": "fip: Store image data in single buffer\n\nRight now in fip_parse() we read the whole FIP image into an allocated\nbuffer, then allocate buffers for the different blobs contained in the\nFIP image and memcpy the blobs there from the full buffer. Let's\noptimize this a bit by keeping the full buffer. Instead of allocating\nseparate buffers for the blobs, just put pointers to the full buffers\ninto struct fip_image and set the buf_no_free flag indicating that they\nshould not be freed.\n\nLink: https://lore.kernel.org/r/20250217122538.3216703-1-s.hauer@pengutronix.de\nSigned-off-by: Sascha Hauer <s.hauer@pengutronix.de>",
        "modified_files_count": 1,
        "modified_files": [
            "lib/fip.c"
        ],
        "github_commit_url": "https://github.com/barebox/barebox/commit/e48141941199a1a8a05880e95fc8d2455484f135",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "fip_parse"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy eliminates redundant memory allocations and copies by storing image data in a single buffer and using pointers to reference specific sections.",
            "The optimization strategy eliminates redundant memory allocations and copies by reusing a single buffer for image data and referencing its segments instead of creating separate buffers.",
            "The optimization strategy eliminates redundant memory allocations and copies by storing image data in a single buffer and using pointers to reference specific sections.",
            "The optimization strategy eliminates redundant memory allocations and copies by storing image data in a single buffer and using pointers to reference specific sections.",
            "The optimization strategy eliminates redundant memory allocations and copies by storing image data in a single buffer and using pointers to reference specific sections."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy eliminates redundant memory allocations and copies by storing image data in a single buffer and using pointers to reference specific sections.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "dealii",
        "hash": "723f41aa2dd617dad4529463225c400cd2075bce",
        "author": "Daniel Arndt",
        "date": "2019-01-29T11:01:49+01:00",
        "message": "performance-unnecessary-value-param",
        "modified_files_count": 1,
        "modified_files": [
            "source/base/hdf5.cc"
        ],
        "github_commit_url": "https://github.com/dealii/dealii/commit/723f41aa2dd617dad4529463225c400cd2075bce",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "HDF5Object::set_attribute"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a value parameter with a reference parameter to avoid unnecessary copying of data.",
            "The optimization strategy involved replacing a value parameter with a reference parameter to avoid unnecessary copying of data.",
            "The optimization strategy involved replacing a value parameter with a reference parameter to avoid unnecessary copying of data.",
            "The optimization strategy involved replacing a value parameter with a reference parameter to avoid unnecessary copying of data.",
            "The optimization strategy involved replacing a value parameter with a reference parameter to avoid unnecessary copying of data."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a value parameter with a reference parameter to avoid unnecessary copying of data.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "1d7912955b3abc434d9d0e6aa73b2c142df9f0b8",
        "author": "Nils Wallménius",
        "date": "2007-10-05T21:03:56+00:00",
        "message": "Get rid of unnecessary memory acesses in a loop, gives slight speedup\n\ngit-svn-id: svn://svn.rockbox.org/rockbox/trunk@14996 a1c6a512-1295-4272-9138-f99709370657",
        "modified_files_count": 1,
        "modified_files": [
            "apps/plugins/midi/midiplay.c"
        ],
        "github_commit_url": "https://github.com/Rockbox/rockbox/commit/1d7912955b3abc434d9d0e6aa73b2c142df9f0b8",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "synthbuf"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "rockbox",
        "optimization_summary": [
            "The optimization strategy eliminates redundant memory accesses within a loop to improve performance.",
            "The optimization strategy eliminates redundant memory accesses within a loop to improve performance.",
            "The optimization strategy eliminates redundant memory accesses within a loop to improve performance.",
            "The optimization strategy eliminates redundant memory accesses within a loop to improve performance.",
            "The optimization strategy eliminates redundant memory accesses within a loop to improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy eliminates redundant memory accesses within a loop to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "SkyEmu",
        "hash": "3e23c26d5a82fccf4b40bb07055566f8b54553f4",
        "author": "kylon",
        "date": "2023-09-30T23:01:35-07:00",
        "message": "tinydir: tinydir_readfile: minor optimization\n\ndon't strlen the same string multiple times",
        "modified_files_count": 1,
        "modified_files": [
            "src/tinydir.h"
        ],
        "github_commit_url": "https://github.com/skylersaleh/SkyEmu/commit/3e23c26d5a82fccf4b40bb07055566f8b54553f4",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "tinydir_open"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids redundant calls to `strlen` on the same string by caching its result.",
            "The optimization strategy avoids redundant calls to `strlen` on the same string by caching its result.",
            "The optimization strategy avoids redundant calls to `strlen` on the same string by caching its result.",
            "The optimization avoids redundant calls to `strlen` on the same string by caching its result.",
            "The optimization strategy avoids redundant calls to `strlen` on the same string by caching its result."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy avoids redundant calls to `strlen` on the same string by caching its result.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "llpc",
        "hash": "763e6a5d4837d350fcb6d74fc6289deb2e7fa389",
        "author": "rtayl",
        "date": "2019-08-01T15:41:24+08:00",
        "message": "Add !invariant.load to load descriptor sets\n\nThis adds the !invariant.load metadata to load descriptor sets\nin order for opts like cse to better optimize these loads\n\nAdd !invariant.load to load descriptor sets\n\nThis adds the !invariant.load metadata to load descriptor sets\nin order for opts like cse to better optimize these loads",
        "modified_files_count": 1,
        "modified_files": [
            "patch/llpcPatchDescriptorLoad.cpp"
        ],
        "github_commit_url": "https://github.com/GPUOpen-Drivers/llpc/commit/763e6a5d4837d350fcb6d74fc6289deb2e7fa389",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "PatchDescriptorLoad::LoadDescriptor"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involves adding `!invariant.load` metadata to descriptor set loads to enable compiler optimizations like common subexpression elimination (CSE).",
            "The optimization strategy involves adding `!invariant.load` metadata to descriptor set loads to enable compiler optimizations like Common Subexpression Elimination (CSE).",
            "The optimization strategy involves adding `!invariant.load` metadata to descriptor set loads to enable compiler optimizations like Common Subexpression Elimination (CSE).",
            "The optimization strategy involves adding `!invariant.load` metadata to descriptor set loads to enable compiler optimizations like Common Subexpression Elimination (CSE).",
            "The optimization strategy involves adding `!invariant.load` metadata to descriptor set loads to enable compiler optimizations like common subexpression elimination (CSE)."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involves adding `!invariant.load` metadata to descriptor set loads to enable compiler optimizations like common subexpression elimination (CSE).",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "restbed",
        "hash": "8e15cbcb2ad397a8f3c2e54e32dcf9311f3e61be",
        "author": "developer",
        "date": "2016-10-28T11:48:36+11:00",
        "message": "Improved speed of ServiceImpl::parse_request.",
        "modified_files_count": 1,
        "modified_files": [
            "source/corvusoft/restbed/uri.cpp"
        ],
        "github_commit_url": "https://github.com/Corvusoft/restbed/commit/8e15cbcb2ad397a8f3c2e54e32dcf9311f3e61be",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Uri::is_valid"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved simplifying the URI validation logic to reduce unnecessary computations and improve parsing speed.",
            "The optimization strategy involved simplifying the URI validation logic to reduce unnecessary computations and improve parsing speed.",
            "The optimization strategy involved simplifying the URI validation logic to reduce unnecessary computations and improve parsing speed.",
            "The optimization strategy involved simplifying the URI validation logic to reduce unnecessary computations and improve parsing speed.",
            "The optimization strategy involved simplifying the URI validation logic to reduce unnecessary computations and improve parsing speed."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved simplifying the URI validation logic to reduce unnecessary computations and improve parsing speed.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "71212e0c81cedda0b918c095bd79b9eb98affcbf",
        "author": "Robin Gareus",
        "date": "2020-09-29T16:46:29+02:00",
        "message": "Remove debug/profile message in optimized builds",
        "modified_files_count": 1,
        "modified_files": [
            "libs/ardour/session_transport.cc"
        ],
        "github_commit_url": "https://github.com/Ardour/ardour/commit/71212e0c81cedda0b918c095bd79b9eb98affcbf",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Session::non_realtime_locate"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "ardour",
        "optimization_summary": [
            "The optimization strategy removes debug/profile messages in optimized builds to reduce unnecessary overhead.",
            "The optimization strategy involves removing debug/profile messages in optimized builds to reduce unnecessary overhead.",
            "The optimization strategy involves removing debug/profile messages in optimized builds to reduce unnecessary overhead.",
            "The optimization strategy involves removing debug/profile messages in optimized builds to reduce unnecessary overhead.",
            "The optimization strategy involves removing debug/profile messages in optimized builds to reduce unnecessary overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involves removing debug/profile messages in optimized builds to reduce unnecessary overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "sycl",
        "hash": "67d1a71aa4d55c2f82cc9b70f5afc2016e3daf69",
        "author": "Jakob Stoklund Olesen",
        "date": "2010-11-28T06:14:33+00:00",
        "message": "Speed up simple insertions into an unbranched tree by not creating an iterator.\n\nllvm-svn: 120232",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/include/llvm/ADT/IntervalMap.h"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/67d1a71aa4d55c2f82cc9b70f5afc2016e3daf69",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "insert"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids creating an iterator for simple insertions into an unbranched tree to reduce overhead.",
            "The optimization avoids creating an iterator for simple insertions into an unbranched tree to reduce overhead.",
            "The optimization avoids creating an iterator for simple insertions into an unbranched tree, reducing unnecessary overhead.",
            "The optimization avoids creating an iterator for simple insertions into an unbranched tree, reducing unnecessary overhead.",
            "The optimization avoids creating an iterator for simple insertions into an unbranched tree to reduce overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids creating an iterator for simple insertions into an unbranched tree to reduce overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "sssd",
        "hash": "5d9e2328ce1706acf87e09b588e134e0f2b761c8",
        "author": "ikerexxe",
        "date": "2020-07-21T13:09:45+02:00",
        "message": "responder/common/responder_packet: get packet length only once\n\nPacket length variable was read and then read again without using the\npreviously read value. So, I have refactored the code a little bit to\nread the value once and use it everywhere else. Moreover, I have\nimplemented some improvements in sss_packet_recv() function pointed by\nAlexey.\n\nCoverity errors:\n```\nError: CLANG_WARNING:\nsssd-2.3.0/src/responder/common/responder_packet.c:217:21: warning:\nAlthough the value stored to 'new_len' is used in the enclosing\nexpression, the value is never actually read from 'new_len'\n #                && (new_len = sss_packet_get_len(packet))\n #                    ^         ~~~~~~~~~~~~~~~~~~~~~~~~~~\nsssd-2.3.0/src/responder/common/responder_packet.c:217:21: note:\nAlthough the value stored to 'new_len' is used in the enclosing\nexpression, the value is never actually read from 'new_len'\n #                && (new_len = sss_packet_get_len(packet))\n #                    ^         ~~~~~~~~~~~~~~~~~~~~~~~~~~\n #  215|                       || sss_packet_get_cmd(packet) == SSS_NSS_GETLISTBYCERT)\n #  216|                   && packet->memsize < SSS_CERT_PACKET_MAX_RECV_SIZE\n #  217|->                 && (new_len = sss_packet_get_len(packet))\n #  218|                                      < SSS_CERT_PACKET_MAX_RECV_SIZE) {\n #  219|               new_len = sss_packet_get_len(packet);\n```\n\nReviewed-by: Alexey Tikhonov <atikhono@redhat.com>\nReviewed-by: Pavel Březina <pbrezina@redhat.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/responder/common/responder_packet.c"
        ],
        "github_commit_url": "https://github.com/SSSD/sssd/commit/5d9e2328ce1706acf87e09b588e134e0f2b761c8",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "sss_packet_recv"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved caching the packet length value to avoid redundant calls to `sss_packet_get_len()` and improve efficiency by reusing the computed value.",
            "The optimization strategy involved caching the packet length value to avoid redundant calls to `sss_packet_get_len()` and improve efficiency by reusing the computed value.",
            "The optimization strategy involved caching the packet length value to avoid redundant calls to `sss_packet_get_len()` and improve efficiency by reusing the computed value.",
            "The optimization strategy involved caching the packet length value to avoid redundant calls to `sss_packet_get_len()` and improve efficiency by reusing the computed value.",
            "The optimization strategy involved caching the packet length value to avoid redundant calls to `sss_packet_get_len()` and improve efficiency by reusing the computed value."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved caching the packet length value to avoid redundant calls to `sss_packet_get_len()` and improve efficiency by reusing the computed value.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "IBAMR",
        "hash": "0798becabfaf56761e7a5fbd888a90247d29363b",
        "author": "David Wells",
        "date": "2019-03-22T17:07:39-04:00",
        "message": "Add some other small optimizations.\n\nThis avoids two virtual function calls.",
        "modified_files_count": 1,
        "modified_files": [
            "ibtk/src/lagrangian/FEDataManager.cpp"
        ],
        "github_commit_url": "https://github.com/IBAMR/IBAMR/commit/0798becabfaf56761e7a5fbd888a90247d29363b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "getQuadratureKey"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy avoids two virtual function calls by directly accessing the required data.",
            "The optimization strategy avoids two virtual function calls by directly accessing the required data.",
            "The optimization strategy avoids two virtual function calls by directly accessing the required data.",
            "The optimization strategy avoids two virtual function calls by directly accessing the required data.",
            "The optimization strategy avoids two virtual function calls by directly accessing the required data."
        ],
        "is_generic_optimization": [
            false,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy avoids two virtual function calls by directly accessing the required data.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "ClickHouse",
        "hash": "2ae9e2224800777de8f893e733ab7df6e3986674",
        "author": "jinjunzh",
        "date": "2022-05-16T16:22:13-04:00",
        "message": "Improve CompressedWriteBuffer to avoid unnecessary memcpy",
        "modified_files_count": 1,
        "modified_files": [
            "src/Compression/CompressedWriteBuffer.cpp"
        ],
        "github_commit_url": "https://github.com/ClickHouse/ClickHouse/commit/2ae9e2224800777de8f893e733ab7df6e3986674",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CompressedWriteBuffer::nextImpl"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids unnecessary memory copying by directly writing compressed data to the buffer.",
            "The optimization avoids unnecessary memory copying by directly writing compressed data to the buffer.",
            "The optimization avoids unnecessary memory copying by directly writing compressed data to the buffer.",
            "The optimization avoids unnecessary memory copying by directly writing compressed data to the buffer.",
            "The optimization avoids unnecessary memory copying by directly writing compressed data to the buffer."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary memory copying by directly writing compressed data to the buffer.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "OpenMS",
        "hash": "2ee639f7e30934c577c14b6b3535d4300ce39ac7",
        "author": "Chris Bielow",
        "date": "2018-09-04T16:06:16+02:00",
        "message": "optimize loop end condition",
        "modified_files_count": 1,
        "modified_files": [
            "src/openms/include/OpenMS/FORMAT/DATAACCESS/SwathFileConsumer.h"
        ],
        "github_commit_url": "https://github.com/OpenMS/OpenMS/commit/2ee639f7e30934c577c14b6b3535d4300ce39ac7",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved simplifying or improving the loop end condition to reduce computational overhead.",
            "The optimization strategy involved simplifying or improving the loop end condition to reduce computational overhead.",
            "The optimization strategy involved simplifying or improving the loop end condition to reduce computational overhead.",
            "The optimization strategy involved simplifying or improving the loop end condition to reduce computational overhead.",
            "The optimization strategy involved simplifying or improving the loop end condition to reduce computational overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved simplifying or improving the loop end condition to reduce computational overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "lix",
        "hash": "3efea3d28ad522f947bacd30b74bc388c0dffa5e",
        "author": "Sidharth Kshatriya",
        "date": "2022-06-09T16:25:26+05:30",
        "message": "nix-store: small std::move() optimization",
        "modified_files_count": 1,
        "modified_files": [
            "src/nix-store/nix-store.cc"
        ],
        "github_commit_url": "https://github.com/lix-project/lix/commit/3efea3d28ad522f947bacd30b74bc388c0dffa5e",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved using `std::move()` to eliminate unnecessary copy operations for objects, improving performance by enabling move semantics.",
            "The optimization strategy involved using `std::move()` to eliminate unnecessary copy operations for improved performance.",
            "The optimization strategy involved using `std::move()` to eliminate unnecessary copy operations for objects, improving performance by enabling move semantics.",
            "The optimization strategy involved using `std::move()` to eliminate unnecessary copy operations for objects, improving performance by enabling move semantics.",
            "The optimization strategy involved using `std::move()` to eliminate unnecessary copy operations for objects that can be moved instead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved using `std::move()` to eliminate unnecessary copy operations for objects, improving performance by enabling move semantics.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "welle.io",
        "hash": "610149af42eecbe95413a80e3be5627914e4830b",
        "author": "Adrien Michel",
        "date": "2024-12-01T03:15:06+01:00",
        "message": "phase_sync : find peak and average at the same time (lower complexity)",
        "modified_files_count": 1,
        "modified_files": [
            "src/backend/phasereference.cpp"
        ],
        "github_commit_url": "https://github.com/AlbrechtL/welle.io/commit/610149af42eecbe95413a80e3be5627914e4830b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "PhaseReference::findIndex"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy combines two separate loops into a single loop to reduce computational complexity by finding the peak and calculating the average simultaneously.",
            "The optimization strategy combines two separate loops into one to reduce computational complexity by finding the peak and calculating the average simultaneously.",
            "The optimization strategy combines two separate loops into a single loop to reduce computational complexity by finding the peak and calculating the average simultaneously.",
            "The optimization strategy combines two separate loops into a single loop to reduce computational complexity by finding the peak and calculating the average simultaneously.",
            "The optimization strategy combines two separate loops into a single loop to reduce computational complexity by finding the peak and calculating the average simultaneously."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy combines two separate loops into a single loop to reduce computational complexity by finding the peak and calculating the average simultaneously.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "frequensea",
        "hash": "d8ecb7e7dcd153b757b48b5666a13bbe5c509cc3",
        "author": "Frederik De Bleser",
        "date": "2015-02-17T17:09:07+01:00",
        "message": "Optimize pixel_inc function.\n\nAccording to gprof this is the bottleneck of the code.",
        "modified_files_count": 1,
        "modified_files": [
            "rpi-fdb/iqvis_lines.c"
        ],
        "github_commit_url": "https://github.com/fdb/frequensea/commit/d8ecb7e7dcd153b757b48b5666a13bbe5c509cc3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "pixel_inc"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved simplifying the loop logic and reducing unnecessary computations within the `pixel_inc` function to improve performance.",
            "The optimization strategy involved simplifying the loop logic and reducing unnecessary computations within the `pixel_inc` function to improve performance.",
            "The optimization strategy involved simplifying the logic in the `pixel_inc` function to reduce unnecessary computations and improve its efficiency.",
            "The optimization strategy involved simplifying the loop logic and reducing unnecessary computations within the `pixel_inc` function to improve performance.",
            "The optimization strategy involved simplifying the loop logic and reducing unnecessary computations within the `pixel_inc` function to improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            false,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved simplifying the loop logic and reducing unnecessary computations within the `pixel_inc` function to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "overwitch",
        "hash": "ee05b0a83df7464448f52aa2b2b3f3ae90c3eb47",
        "author": "Jan Lentfer",
        "date": "2021-11-12T22:43:19+01:00",
        "message": "Optimize two loops in jclient_process_cb\n\n    With grpof I found that jclient_process_cb\n    was taking most time by far (which maybe expected).\n    Here I am merging two seperate loops into one, which\n    according to gprof reduced cpu time quite a bit.",
        "modified_files_count": 1,
        "modified_files": [
            "src/jclient.c"
        ],
        "github_commit_url": "https://github.com/dagargo/overwitch/commit/ee05b0a83df7464448f52aa2b2b3f3ae90c3eb47",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "jclient_process_cb"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used was merging two separate loops into a single loop to reduce CPU time.",
            "The optimization strategy used was merging two separate loops into a single loop to reduce CPU time.",
            "The optimization strategy used was merging two separate loops into a single loop to reduce CPU time.",
            "The optimization strategy used was merging two separate loops into a single loop to reduce CPU time.",
            "The optimization strategy used was merging two separate loops into a single loop to reduce CPU time."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used was merging two separate loops into a single loop to reduce CPU time.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "musique",
        "hash": "830a37bec5622aec9fd954e537c45594e1b66770",
        "author": "Flavio Tordini",
        "date": "2018-11-22T18:23:09+01:00",
        "message": "Minor string optimization",
        "modified_files_count": 1,
        "modified_files": [
            "src/mainwindow.cpp"
        ],
        "github_commit_url": "https://github.com/flaviotordini/musique/commit/830a37bec5622aec9fd954e537c45594e1b66770",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "MainWindow::createActions"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing repeated string concatenation with a more efficient single-pass string construction method.",
            "The optimization strategy involved replacing repeated string concatenation with a more efficient approach, likely using a single assignment or a precomputed value to minimize redundant operations.",
            "The optimization strategy involved replacing a string concatenation operation with a more efficient approach to reduce unnecessary memory allocations.",
            "The optimization strategy involved replacing a string concatenation operation with a more efficient approach to reduce unnecessary memory allocations.",
            "The optimization strategy involved replacing repeated string concatenation with a more efficient approach, likely using a single assignment or precomputed value to reduce unnecessary memory allocations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing repeated string concatenation with a more efficient approach, likely using a single assignment or precomputed value to reduce unnecessary memory allocations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "QGIS",
        "hash": "5765cabb951bc1f82da2b883635cc9b1c74e6d44",
        "author": "i-s-o",
        "date": "2020-01-10T12:49:58+13:00",
        "message": "Speed up reading the field list from clipboard",
        "modified_files_count": 1,
        "modified_files": [
            "src/app/qgsclipboard.cpp"
        ],
        "github_commit_url": "https://github.com/qgis/QGIS/commit/5765cabb951bc1f82da2b883635cc9b1c74e6d44",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "QgsClipboard::retrieveFields"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant computations by caching and reusing previously calculated field values during clipboard data processing.",
            "The optimization strategy involved reducing redundant computations by caching intermediate results within the function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing previously calculated results within the function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing previously calculated field values when reading from the clipboard.",
            "The optimization strategy involved reducing redundant computations by caching and reusing previously calculated field values during clipboard data processing."
        ],
        "is_generic_optimization": [
            false,
            true,
            true,
            true,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant computations by caching and reusing previously calculated field values during clipboard data processing.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "DSI-Studio",
        "hash": "a13c61bb149dc179b7b4f137cd2ea794f248d50d",
        "author": "frankyeh",
        "date": "2015-12-10T19:27:28-05:00",
        "message": "improve  qsdr efficiency",
        "modified_files_count": 1,
        "modified_files": [
            "libs/dsi/dsi_interface_imp.cpp"
        ],
        "github_commit_url": "https://github.com/frankyeh/DSI-Studio/commit/a13c61bb149dc179b7b4f137cd2ea794f248d50d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "reconstruction"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved restructuring the loop to minimize redundant computations and improve iteration efficiency.",
            "The optimization strategy involved restructuring the loop to minimize redundant computations and improve iteration efficiency.",
            "The optimization strategy involved improving efficiency by reducing redundant computations or unnecessary operations within the qsdr-related logic.",
            "The optimization strategy involved restructuring the loop to minimize redundant computations and improve iteration efficiency.",
            "The optimization strategy involved improving efficiency by reducing redundant computations or unnecessary operations within the qsdr-related logic."
        ],
        "is_generic_optimization": [
            true,
            true,
            false,
            true,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved restructuring the loop to minimize redundant computations and improve iteration efficiency.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "FastDoom",
        "hash": "ddc8a443125b3006d75b3bc424f9793952d3d7eb",
        "author": "viti95",
        "date": "2022-06-14T11:16:26+02:00",
        "message": "Small optimization for P_CrossSubsector",
        "modified_files_count": 1,
        "modified_files": [
            "FASTDOOM/p_sight.c"
        ],
        "github_commit_url": "https://github.com/viti95/FastDoom/commit/ddc8a443125b3006d75b3bc424f9793952d3d7eb",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "P_CrossSubsector"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used is to reduce redundant calculations by caching and reusing results within the function.",
            "The optimization strategy used is to reduce redundant calculations by caching and reusing results within the function.",
            "The optimization strategy used is to reduce redundant calculations by caching and reusing results within the function.",
            "The optimization strategy used is to reduce redundant calculations by caching and reusing results within the function.",
            "The optimization strategy used is to reduce redundant calculations by caching and reusing results within the function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is to reduce redundant calculations by caching and reusing results within the function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "gnome-builder",
        "hash": "db3a7dc72b56c2fb1dc18d1954c5861333e18dd9",
        "author": "Christian Hergert",
        "date": "2016-12-30T19:29:10-08:00",
        "message": "build-tools: avoid va_args for property sets\n\nTo avoid copying the string into a new GValue, we just create the gvalue\nup front and allow it to own the generated string. This allows us to\nalso avoid the va_list g_object_set() calls for a very slight performance\nimprovement.",
        "modified_files_count": 1,
        "modified_files": [
            "plugins/build-tools/gbp-build-panel.c"
        ],
        "github_commit_url": "https://github.com/GNOME/gnome-builder/commit/db3a7dc72b56c2fb1dc18d1954c5861333e18dd9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "gbp_build_panel_text_func"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids using `va_args` and `g_object_set()` by directly creating a `GValue` to own the string, reducing overhead from copying and variadic argument processing.",
            "The optimization avoids using `va_args` and `g_object_set()` by directly creating a `GValue` to own the string, reducing overhead from copying and variadic argument processing.",
            "The optimization avoids using `va_args` and `g_object_set()` by directly creating a `GValue` to own the string, reducing overhead from copying and variadic function calls.",
            "The optimization avoids using `va_args` and `g_object_set()` by directly creating a `GValue` to own the string, reducing overhead from copying and variadic function calls.",
            "The optimization avoids using `va_args` and `g_object_set()` by directly creating a `GValue` to own the string, reducing overhead from copying and variadic argument processing."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids using `va_args` and `g_object_set()` by directly creating a `GValue` to own the string, reducing overhead from copying and variadic argument processing.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "bibletime",
        "hash": "69d648c556b65d1e4600837274997162f7245a2c",
        "author": "Jaak Ristioja",
        "date": "2022-10-30T23:45:51+02:00",
        "message": "frontend, BtModelViewReadDisplay: Minor QString-related optimizations",
        "modified_files_count": 1,
        "modified_files": [
            "src/frontend/display/btmodelviewreaddisplay.cpp"
        ],
        "github_commit_url": "https://github.com/bibletime/bibletime/commit/69d648c556b65d1e4600837274997162f7245a2c",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing unnecessary QString operations to improve performance.",
            "The optimization strategy involved reducing unnecessary QString operations by directly using existing string references.",
            "The optimization strategy involved reducing unnecessary QString operations to improve performance.",
            "The optimization strategy involved reducing unnecessary QString operations to improve performance.",
            "The optimization strategy involved reducing unnecessary QString operations by directly using existing string references."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing unnecessary QString operations to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "tensorflow-directml",
        "hash": "707b0c9cc4d5335d04fce4addb8ed2f158cbd1c0",
        "author": "A. Unique TensorFlower",
        "date": "2018-05-01T15:06:01-07:00",
        "message": "Minor JNI performance improvement.\n\nPiperOrigin-RevId: 195002949",
        "modified_files_count": 1,
        "modified_files": [
            "tensorflow/contrib/lite/java/src/main/native/tensor_jni.cc"
        ],
        "github_commit_url": "https://github.com/microsoft/tensorflow-directml/commit/707b0c9cc4d5335d04fce4addb8ed2f158cbd1c0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Java_org_tensorflow_lite_Tensor_shape"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a loop that repeatedly accessed a Java array with a single direct access to improve JNI performance.",
            "The optimization strategy involved replacing a loop that repeatedly accessed a Java array with a single direct access to reduce JNI overhead.",
            "The optimization strategy involved replacing a loop that repeatedly accessed a Java array with a single direct access to improve JNI performance.",
            "The optimization strategy involved replacing a loop that repeatedly accessed a Java array with a single direct access to improve JNI performance.",
            "The optimization strategy involved reducing JNI call overhead by caching the result of a method lookup."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a loop that repeatedly accessed a Java array with a single direct access to improve JNI performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "mame2003-plus-libretro",
        "hash": "bdf262379fb8b01ae42594b08466a7fe738031b1",
        "author": "mahoneyt944",
        "date": "2024-07-04T17:03:09-04:00",
        "message": "Test multi32 speedup",
        "modified_files_count": 1,
        "modified_files": [
            "src/drivers/segas32.c"
        ],
        "github_commit_url": "https://github.com/libretro/mame2003-plus-libretro/commit/bdf262379fb8b01ae42594b08466a7fe738031b1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "WRITE16_HANDLER"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a series of individual bit-shift operations with a more efficient combined operation to improve performance.",
            "The optimization strategy involved simplifying conditional checks and reducing redundant operations within the WRITE16_HANDLER function to improve performance.",
            "The optimization strategy involved replacing a series of individual bit-shift operations with a more efficient combined operation to improve performance.",
            "The optimization strategy involved replacing a series of individual bit-shift operations with a more efficient combined operation to improve performance.",
            "The optimization strategy involved simplifying or streamlining the logic within the WRITE16_HANDLER function to improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a series of individual bit-shift operations with a more efficient combined operation to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "cycles",
        "hash": "b5f81608ccf5c47793949a97f5d460a9e61116b2",
        "author": "Stephen Luce",
        "date": "2023-07-05T18:18:39+02:00",
        "message": "Remove redundant bounds checks in cpu image sampling\n\nFor repeat / extend / mirror mode, both wrap and read_clip functions did\nthe bounds check. Removing it improves performance between 0.5% and 1.5%\nin the classroom scene in one test. Clip mode is unchanged.\n\nPull Request: https://projects.blender.org/blender/blender/pulls/109304",
        "modified_files_count": 1,
        "modified_files": [
            "src/kernel/device/cpu/image.h"
        ],
        "github_commit_url": "https://github.com/blender/cycles/commit/b5f81608ccf5c47793949a97f5d460a9e61116b2",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "interp_linear"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization removes redundant bounds checks in image sampling for repeat, extend, and mirror modes by leveraging the fact that both wrap and read_clip functions already perform bounds checking.",
            "The optimization removes redundant bounds checks in image sampling for repeat, extend, and mirror modes by leveraging the fact that both wrap and read_clip functions already perform bounds checking.",
            "The optimization removes redundant bounds checks in image sampling for repeat, extend, and mirror modes by leveraging the fact that both wrap and read_clip functions already perform bounds checking.",
            "The optimization removes redundant bounds checks in image sampling for repeat, extend, and mirror modes by leveraging the fact that both wrap and read_clip functions already perform bounds checking.",
            "The optimization removes redundant bounds checks in image sampling for specific modes to improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            false
        ],
        "optimization_summary_final": "The optimization removes redundant bounds checks in image sampling for repeat, extend, and mirror modes by leveraging the fact that both wrap and read_clip functions already perform bounds checking.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "openbor",
        "hash": "dea1551e4d117c6d5f7b8c9529de66e557b1950e",
        "author": "utunnels",
        "date": "2011-09-05T01:12:04+00:00",
        "message": "Optimize rgb gif copying speed a bit.",
        "modified_files_count": 1,
        "modified_files": [
            "engine/openbor.c"
        ],
        "github_commit_url": "https://github.com/DCurrent/openbor/commit/dea1551e4d117c6d5f7b8c9529de66e557b1950e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "update_backbuffer"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a nested loop structure with a single loop to reduce iteration overhead and improve cache locality when copying RGB GIF data.",
            "The optimization strategy involved replacing a nested loop structure with a single loop to reduce iteration overhead and improve RGB GIF copying speed.",
            "The optimization strategy involved replacing a nested loop structure with a single loop to reduce iteration overhead and improve RGB GIF copying speed.",
            "The optimization strategy involved replacing a nested loop structure with a single loop to reduce iteration overhead and improve RGB GIF copying speed.",
            "The optimization strategy involved replacing a nested loop structure with a single loop to reduce iteration overhead and improve RGB GIF copying speed."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a nested loop structure with a single loop to reduce iteration overhead and improve RGB GIF copying speed.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "wesnoth",
        "hash": "9aa67226223b0c5239c910bc5fa3aa061c12784d",
        "author": "gfgtdf",
        "date": "2015-12-07T15:43:56+01:00",
        "message": "improve performance of wesnoth.delay(0)\n\nIn this case we don't need to call SDL_GetTicks() or\ngame_display_->delay(10)",
        "modified_files_count": 1,
        "modified_files": [
            "src/scripting/game_lua_kernel.cpp"
        ],
        "github_commit_url": "https://github.com/wesnoth/wesnoth/commit/9aa67226223b0c5239c910bc5fa3aa061c12784d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "game_lua_kernel::intf_delay"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization eliminates unnecessary calls to SDL_GetTicks() and game_display_->delay(10) when the delay is zero, reducing overhead in the wesnoth.delay(0) function.",
            "The optimization avoids unnecessary calls to SDL_GetTicks() and game_display_->delay(10) when the delay is zero, reducing overhead in the wesnoth.delay(0) function.",
            "The optimization strategy eliminates unnecessary function calls (SDL_GetTicks() and game_display_->delay(10)) when the delay is zero to reduce overhead.",
            "The optimization strategy eliminates unnecessary function calls (SDL_GetTicks and game_display_->delay) when the delay is zero to reduce overhead.",
            "The optimization strategy eliminates unnecessary function calls (SDL_GetTicks() and game_display_->delay(10)) when the delay is zero to reduce overhead."
        ],
        "is_generic_optimization": [
            false,
            false,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy eliminates unnecessary function calls (SDL_GetTicks() and game_display_->delay(10)) when the delay is zero to reduce overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "tensorflow-directml",
        "hash": "903e7d93bc0815e4c96ec6d51127bac26e49329b",
        "author": "A. Unique TensorFlower",
        "date": "2018-06-28T21:37:43-07:00",
        "message": "Improve the performance of ParseShapeStringInternal\n\nThe previous implementation recompiled the shape regex at every call\nwhat is an expensive opertaion. The new implementation improves the hlo\ntext parsing time for very large models for up to 9x by eliminating this\noverhead.\n\nPiperOrigin-RevId: 202454354",
        "modified_files_count": 1,
        "modified_files": [
            "tensorflow/compiler/xla/shape_util.cc"
        ],
        "github_commit_url": "https://github.com/microsoft/tensorflow-directml/commit/903e7d93bc0815e4c96ec6d51127bac26e49329b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ParseShapeStringInternal"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved caching the compiled regex to avoid recompiling it on every function call, thereby reducing overhead.",
            "The optimization strategy involved caching the compiled regex to avoid recompiling it on every function call, thereby reducing overhead.",
            "The optimization strategy involved caching the compiled regex to avoid recompiling it on every function call, thereby reducing overhead.",
            "The optimization strategy involved caching the compiled regex to avoid recompiling it on every function call, thereby reducing overhead.",
            "The optimization strategy involved caching the compiled regex to avoid recompiling it on every function call, thereby reducing overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved caching the compiled regex to avoid recompiling it on every function call, thereby reducing overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "scummvm",
        "hash": "f1bc2b187c72d7fa165e48b0120a41f7caf4272f",
        "author": "elasota",
        "date": "2022-12-06T23:43:27+01:00",
        "message": "COMMON: Optimize some array ops by hoisting storage pointer to a local so the compiler doesn't have to reload it every iteration.",
        "modified_files_count": 1,
        "modified_files": [
            "common/array.h"
        ],
        "github_commit_url": "https://github.com/scummvm/scummvm/commit/f1bc2b187c72d7fa165e48b0120a41f7caf4272f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "time"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved hoisting a storage pointer to a local variable to prevent the compiler from reloading it during every iteration of array operations.",
            "The optimization strategy involved hoisting a storage pointer to a local variable to prevent the compiler from reloading it during every iteration of array operations.",
            "The optimization strategy involved hoisting the storage pointer of an array to a local variable to prevent the compiler from reloading it during each iteration.",
            "The optimization strategy involved hoisting a storage pointer to a local variable to prevent the compiler from reloading it during each iteration of array operations.",
            "The optimization strategy involved hoisting a storage pointer to a local variable to prevent the compiler from reloading it during each iteration of array operations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved hoisting a storage pointer to a local variable to prevent the compiler from reloading it during each iteration of array operations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "mpv",
        "hash": "66c47599923f2919756423d47f32f2186d15cef9",
        "author": "reimar",
        "date": "2007-11-18T17:44:11+00:00",
        "message": "Use \"long\" instead of \"int\" for innermost loop variable.\nAbout 12% faster on x86_64\n\n\ngit-svn-id: svn://svn.mplayerhq.hu/mplayer/trunk@25101 b3059339-0415-0410-9bf9-f77b7e298cf2",
        "modified_files_count": 1,
        "modified_files": [
            "libaf/af_scaletempo.c"
        ],
        "github_commit_url": "https://github.com/mpv-player/mpv/commit/66c47599923f2919756423d47f32f2186d15cef9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "best_overlap_offset_s16"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved changing the data type of the innermost loop variable from \"int\" to \"long\" to improve performance on x86_64 architecture.",
            "The optimization strategy involved changing the data type of the innermost loop variable from \"int\" to \"long\" to improve performance on x86_64 architecture.",
            "The optimization strategy involved changing the data type of the innermost loop variable from \"int\" to \"long\" to improve performance on x86_64 architecture.",
            "The optimization strategy involved changing the data type of the innermost loop variable from \"int\" to \"long\" to improve performance on x86_64 architecture.",
            "The optimization strategy involved changing the data type of the innermost loop variable from \"int\" to \"long\" to improve performance on x86_64 architecture."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved changing the data type of the innermost loop variable from \"int\" to \"long\" to improve performance on x86_64 architecture.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "ImageMagick6",
        "hash": "1315776a6bc3999df21212cd314eb8c175aec4cf",
        "author": "dirk",
        "date": "2014-12-22T23:49:42+00:00",
        "message": "Improved performance of ReadProfile.",
        "modified_files_count": 1,
        "modified_files": [
            "coders/tiff.c"
        ],
        "github_commit_url": "https://github.com/ImageMagick/ImageMagick6/commit/1315776a6bc3999df21212cd314eb8c175aec4cf",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ReadProfile"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant memory allocations and copies by reusing buffers during profile reading.",
            "The optimization strategy involved reducing redundant memory allocations and copies by reusing buffers in the ReadProfile function.",
            "The optimization strategy involved reducing redundant memory allocations and copies by reusing existing buffers in the ReadProfile function.",
            "The optimization strategy involved reducing redundant memory allocations and copies by reusing buffers in the ReadProfile function.",
            "The optimization strategy involved reducing redundant memory allocations and copies by reusing existing buffers in the ReadProfile function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant memory allocations and copies by reusing buffers in the ReadProfile function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "freeorion",
        "hash": "2c8a0dbaf5d33c1d5b89b54839910a43cbae2180",
        "author": "geoffthemedio",
        "date": "2022-12-02T23:57:35+01:00",
        "message": "avoid copy",
        "modified_files_count": 1,
        "modified_files": [
            "client/human/GGHumanClientApp.cpp"
        ],
        "github_commit_url": "https://github.com/freeorion/freeorion/commit/2c8a0dbaf5d33c1d5b89b54839910a43cbae2180",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy avoids unnecessary copying of objects by directly referencing them.",
            "The optimization strategy avoids unnecessary copying of objects by utilizing references or pointers instead of passing by value.",
            "The optimization strategy avoids unnecessary copying of objects by utilizing references or pointers instead of value-based operations.",
            "The optimization strategy avoids unnecessary copying of objects by modifying the code to use references or move semantics.",
            "The optimization strategy avoids unnecessary copying of objects by using references or pointers instead of passing by value."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy avoids unnecessary copying of objects by utilizing references or pointers instead of passing by value.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "libarchive",
        "hash": "6302a9fba0778e63379a13946ccdfe0d257ed2d1",
        "author": "Tim Kientzle",
        "date": "2009-02-06T02:09:45-05:00",
        "message": "Very minor optimization:  If we already have enough data, we don't\nneed to keep calling down into archive_read_filter_ahead() to\nextend the read-ahead.\n\nSVN-Revision: 561",
        "modified_files_count": 1,
        "modified_files": [
            "libarchive/archive_read_support_compression_gzip.c"
        ],
        "github_commit_url": "https://github.com/libarchive/libarchive/commit/6302a9fba0778e63379a13946ccdfe0d257ed2d1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "peek_at_header"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids unnecessary calls to a read-ahead function when sufficient data is already available.",
            "The optimization avoids unnecessary calls to a read-ahead function when sufficient data is already available.",
            "The optimization avoids unnecessary calls to a read-ahead function when sufficient data is already available.",
            "The optimization avoids unnecessary calls to a read-ahead function when sufficient data is already available.",
            "The optimization avoids unnecessary calls to a read-ahead function when sufficient data is already available."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary calls to a read-ahead function when sufficient data is already available.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "pinba2",
        "hash": "77d4eb75f9adf6f49fa413eb9b097ec0f407fc06",
        "author": "Anton Povarov",
        "date": "2017-05-26T16:37:06+03:00",
        "message": "minor stats optimization",
        "modified_files_count": 1,
        "modified_files": [
            "src/report_by_timer.cpp"
        ],
        "github_commit_url": "https://github.com/badoo/pinba2/commit/77d4eb75f9adf6f49fa413eb9b097ec0f407fc06",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "merge_ticks_into_data"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant computations by caching and reusing intermediate results within the function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing intermediate results within the function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing intermediate results within the function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing intermediate results within the function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing intermediate results within the function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant computations by caching and reusing intermediate results within the function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "notepad-plus-plus",
        "hash": "4b7e1ac7947e13746735ab5bfa069b08c0b0c0ae",
        "author": "Scott Sumner",
        "date": "2021-05-05T22:54:04+02:00",
        "message": "Improve performance of Search results Open all\n\nFix #9819, close #9820",
        "modified_files_count": 1,
        "modified_files": [
            "PowerEditor/src/ScintillaComponent/FindReplaceDlg.cpp"
        ],
        "github_commit_url": "https://github.com/notepad-plus-plus/notepad-plus-plus/commit/4b7e1ac7947e13746735ab5bfa069b08c0b0c0ae",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Finder::openAll"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant operations by caching and reusing results within the loop.",
            "The optimization strategy involved reducing redundant operations by caching and reusing results within the loop.",
            "The optimization strategy involved reducing redundant operations by caching and reusing results within the loop.",
            "The optimization strategy involved reducing redundant operations by caching and reusing results within the loop.",
            "The optimization strategy involved reducing redundant operations by caching and reusing results within the loop."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant operations by caching and reusing results within the loop.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "sdrangel",
        "hash": "70d2ce6cec44b866dd211d9d8fd428698bcb0fd6",
        "author": "f4exb",
        "date": "2017-05-13T16:01:27+02:00",
        "message": "NFM demod: smoothersterp optimization",
        "modified_files_count": 1,
        "modified_files": [
            "plugins/channelrx/demodnfm/nfmdemod.h"
        ],
        "github_commit_url": "https://github.com/f4exb/sdrangel/commit/70d2ce6cec44b866dd211d9d8fd428698bcb0fd6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "smootherstep"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used a mathematical approximation to simplify the smootherstep function, reducing computational complexity.",
            "The optimization strategy used a more efficient mathematical formula for the smootherstep function to reduce computational overhead.",
            "The optimization strategy used a more efficient mathematical formula for the smootherstep function to reduce computational overhead.",
            "The optimization strategy used a more efficient mathematical formula for the `smootherstep` function to reduce computational overhead.",
            "The optimization strategy used a more efficient mathematical formula for the `smootherstep` function to reduce computational overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used a more efficient mathematical formula for the smootherstep function to reduce computational overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "hhvm",
        "hash": "7f985575b0900e4efdcb06bd8e504c5ac10dfc2e",
        "author": "Fred Emmott",
        "date": "2015-05-18T15:34:50-07:00",
        "message": "Optimize str_replace(string, string, string)\n\nSummary: Benchmark is /very/ noisy, but this looks like 1-5% on Mediawiki. Based on tbgs should be a win for www too.\n\nReviewed By: @jwatzman\n\nDifferential Revision: D2077728",
        "modified_files_count": 1,
        "modified_files": [
            "hphp/runtime/ext/string/ext_string.cpp"
        ],
        "github_commit_url": "https://github.com/facebook/hhvm/commit/7f985575b0900e4efdcb06bd8e504c5ac10dfc2e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "HHVM_FUNCTION"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved improving the efficiency of string replacement by reducing unnecessary operations or iterations within the `str_replace` function.",
            "The optimization strategy involved improving the efficiency of string replacement operations by reducing unnecessary computations or memory usage in the `str_replace` function.",
            "The optimization strategy involved improving the efficiency of string replacement operations by reducing unnecessary computations or memory usage in the `str_replace` function.",
            "The optimization strategy involved improving the efficiency of string replacement operations by reducing unnecessary computations or memory usage in the `str_replace` function.",
            "The optimization strategy involved improving the efficiency of string replacement operations by reducing unnecessary computations or memory usage in the `str_replace` function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            false,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved improving the efficiency of string replacement operations by reducing unnecessary computations or memory usage in the `str_replace` function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "aseprite",
        "hash": "0d169fed751b1f69e0fd86accd0dd0461d6be9de",
        "author": "David Capello",
        "date": "2016-11-22T13:33:01-03:00",
        "message": "Improve ui::drawTextBox() performance",
        "modified_files_count": 1,
        "modified_files": [
            "src/ui/theme.cpp"
        ],
        "github_commit_url": "https://github.com/aseprite/aseprite/commit/0d169fed751b1f69e0fd86accd0dd0461d6be9de",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "drawTextBox"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant text measurements and drawing operations within the `drawTextBox` function to improve performance.",
            "The optimization strategy involved reducing redundant text measurements and layout calculations in the `drawTextBox` function by caching intermediate results.",
            "The optimization strategy involved reducing redundant text measurements and drawing operations within the `drawTextBox` function by caching and reusing calculated values.",
            "The optimization strategy involved reducing redundant text measurements and layout calculations within the `drawTextBox` function by caching intermediate results.",
            "The optimization strategy involved reducing redundant text measurements and drawing operations in the `drawTextBox` function by caching and reusing calculated values."
        ],
        "is_generic_optimization": [
            false,
            false,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant text measurements and drawing operations in the `drawTextBox` function by caching and reusing calculated values.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "bind9",
        "hash": "3fe45d9897459da9c78263ae709e5c611e622243",
        "author": "Andreas Gustafsson",
        "date": "2000-06-09T22:01:55+00:00",
        "message": "do the length checks of 1.90 in a more efficient way; take\nadvantage of the new buffer API macros",
        "modified_files_count": 1,
        "modified_files": [
            "lib/dns/name.c"
        ],
        "github_commit_url": "https://github.com/isc-projects/bind9/commit/3fe45d9897459da9c78263ae709e5c611e622243",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "dns_name_fromwire"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing manual length checks with more efficient buffer API macros to streamline the validation process.",
            "The optimization strategy involved restructuring length checks to leverage new buffer API macros for improved efficiency.",
            "The optimization strategy involved restructuring length checks to leverage new buffer API macros for improved efficiency.",
            "The optimization strategy involved restructuring length checks to leverage new buffer API macros for improved efficiency.",
            "The optimization strategy involved replacing manual length checks with more efficient buffer API macros to streamline the process."
        ],
        "is_generic_optimization": [
            true,
            false,
            true,
            false,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved restructuring length checks to leverage new buffer API macros for improved efficiency.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "OpenJK",
        "hash": "fc3bd3f70de318643289a4696931723c466b9959",
        "author": "Szilárd Biró",
        "date": "2014-05-29T11:33:21+02:00",
        "message": "[SP] CTaskManager::Get optimization for TK_VECTOR",
        "modified_files_count": 1,
        "modified_files": [
            "code/icarus/TaskManager.cpp"
        ],
        "github_commit_url": "https://github.com/JACoders/OpenJK/commit/fc3bd3f70de318643289a4696931723c466b9959",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CTaskManager::Get"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used is replacing a linear search with a direct index-based access for faster retrieval in a vector.",
            "The optimization strategy used is replacing a linear search with a direct index-based access for faster retrieval in a vector.",
            "The optimization strategy involved replacing a linear search with a direct index-based access for TK_VECTOR to improve lookup performance.",
            "The optimization strategy used is replacing a linear search with a direct index-based access for faster retrieval in a vector.",
            "The optimization strategy involved replacing a linear search with a direct index-based access for TK_VECTOR to improve lookup performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is replacing a linear search with a direct index-based access for faster retrieval in a vector.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "HiGHS",
        "hash": "10101ad997117b63a4c854c409f9d645324cfc0b",
        "author": "Stefan Vigerske",
        "date": "2022-07-20T18:49:07+02:00",
        "message": "speed up getvarbyname() a bit\n\n- no need to copy argument\n- lookup in variables array only once",
        "modified_files_count": 1,
        "modified_files": [
            "extern/filereaderlp/builder.hpp"
        ],
        "github_commit_url": "https://github.com/ERGO-Code/HiGHS/commit/10101ad997117b63a4c854c409f9d645324cfc0b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "getvarbyname"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids unnecessary copying of arguments and reduces redundant lookups in the variables array to improve the performance of the `getvarbyname` function.",
            "The optimization avoids unnecessary copying of arguments and reduces redundant lookups in the variables array to improve the performance of the `getvarbyname` function.",
            "The optimization avoids unnecessary copying of arguments and reduces redundant lookups in the variables array to improve the performance of the `getvarbyname` function.",
            "The optimization avoids unnecessary copying of arguments and reduces redundant lookups in the variables array to improve the performance of the `getvarbyname` function.",
            "The optimization avoids unnecessary copying of arguments and reduces redundant lookups in the variables array to improve the performance of the `getvarbyname` function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary copying of arguments and reduces redundant lookups in the variables array to improve the performance of the `getvarbyname` function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "nap",
        "hash": "64cedae3cfeff626ad453db696e7e57b75d591f5",
        "author": "cklosters",
        "date": "2024-03-22T12:14:26+01:00",
        "message": "use emplace instead of insert to avoid copy and fix build",
        "modified_files_count": 1,
        "modified_files": [
            "system_modules/naprenderadvanced/src/renderadvancedservice.cpp"
        ],
        "github_commit_url": "https://github.com/napframework/nap/commit/64cedae3cfeff626ad453db696e7e57b75d591f5",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "RTTI_PROPERTY"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used was replacing `insert` with `emplace` to avoid unnecessary copy operations and improve performance.",
            "The optimization strategy used was replacing `insert` with `emplace` to avoid unnecessary copy operations and improve performance.",
            "The optimization strategy used was replacing `insert` with `emplace` to avoid unnecessary copy operations and improve performance.",
            "The optimization strategy used was replacing `insert` with `emplace` to avoid unnecessary copy operations and improve performance.",
            "The optimization strategy used was replacing `insert` with `emplace` to avoid unnecessary copy operations and improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used was replacing `insert` with `emplace` to avoid unnecessary copy operations and improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "AIS-catcher",
        "hash": "f692ed5988a9af39625ad4280b07e5ab0a60ee56",
        "author": "jasper",
        "date": "2024-01-20T21:39:27+01:00",
        "message": "performance improvement UDP out",
        "modified_files_count": 1,
        "modified_files": [
            "IO/Network.cpp"
        ],
        "github_commit_url": "https://github.com/jvde-github/AIS-catcher/commit/f692ed5988a9af39625ad4280b07e5ab0a60ee56",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant data copying in UDP output operations by directly writing to the network buffer.",
            "The optimization strategy involved reducing redundant data copying in UDP output operations by directly referencing buffers.",
            "The optimization strategy involved reducing redundant data copying in UDP output operations by directly referencing buffers.",
            "The optimization strategy involved reducing redundant data copying in UDP output operations by directly writing to the network buffer.",
            "The optimization strategy involved reducing redundant data copying in UDP output operations by directly writing to the network buffer."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant data copying in UDP output operations by directly writing to the network buffer.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "cryptominisat",
        "hash": "b8dcca2423a005f0aed66d7d533346eba1c20fe1",
        "author": "Mate Soos",
        "date": "2014-12-25T23:35:11+01:00",
        "message": "Let's reverse this check to improve speed\n\nIt's faster to get length than to get glue",
        "modified_files_count": 1,
        "modified_files": [
            "cryptominisat4/searcher.cpp"
        ],
        "github_commit_url": "https://github.com/msoos/cryptominisat/commit/b8dcca2423a005f0aed66d7d533346eba1c20fe1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Searcher::mimimize_learnt_clause_more_maybe"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy reverses the order of checks to prioritize a faster operation (getting length) over a slower one (getting glue).",
            "The optimization strategy reverses the order of checks to prioritize the faster operation (getting length) over the slower one (getting glue).",
            "The optimization strategy reverses the order of checks to prioritize a faster operation (getting length) over a slower one (getting glue).",
            "The optimization strategy reverses the order of checks to prioritize a faster operation (getting length) over a slower one (getting glue).",
            "The optimization strategy reverses the order of checks to prioritize a faster operation (getting length) over a slower one (getting glue)."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy reverses the order of checks to prioritize a faster operation (getting length) over a slower one (getting glue).",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "ladybird",
        "hash": "e8c0cea5f9affac2e6192842bb81a5f16fe69c8e",
        "author": "Andreas Kling",
        "date": "2023-11-13T13:49:21+01:00",
        "message": "LibJS/JIT: Use right shift to extract type tags in equality codegen\n\n7% speed-up on Kraken/ai-astar.js, covers up most of the regression\nfrom adding more fast paths. :^)",
        "modified_files_count": 1,
        "modified_files": [
            "Userland/Libraries/LibJS/JIT/Compiler.cpp"
        ],
        "github_commit_url": "https://github.com/LadybirdBrowser/ladybird/commit/e8c0cea5f9affac2e6192842bb81a5f16fe69c8e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Compiler::branch_if_same_type_for_equality"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used right shift operations to efficiently extract type tags in equality code generation, reducing computational overhead.",
            "The optimization strategy used right shift operations to efficiently extract type tags in equality code generation, reducing computational overhead.",
            "The optimization strategy used right shift operations to efficiently extract type tags in equality code generation, reducing computational overhead.",
            "The optimization strategy used right shift operations to efficiently extract type tags in equality codegen, reducing computational overhead.",
            "The optimization strategy used right shift operations to efficiently extract type tags in equality codegen, reducing computational overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used right shift operations to efficiently extract type tags in equality code generation, reducing computational overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "dolphin-memory-engine",
        "hash": "17731a57daf522c41c2c22755dd5f661f2f1fde4",
        "author": "cristian64",
        "date": "2024-05-05T01:02:10+00:00",
        "message": "Address `performance-for-range-copy` warnings.\n\nThe one warning was:\n\n```\n/w/dolphin-memory-engine/Source/DolphinProcess/Linux/LinuxDolphinProcess.cpp:39:15: warning: loop variable is copied but only used as const reference; consider making it a const reference [performance-for-range-copy]\n   39 |     for (auto str : lineData)\n      |               ^\n      |          const  &\n```",
        "modified_files_count": 1,
        "modified_files": [
            "Source/DolphinProcess/Linux/LinuxDolphinProcess.cpp"
        ],
        "github_commit_url": "https://github.com/aldelaro5/dolphin-memory-engine/commit/17731a57daf522c41c2c22755dd5f661f2f1fde4",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "LinuxDolphinProcess::obtainEmuRAMInformations"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved changing a loop variable from being copied to being passed as a const reference to reduce unnecessary copy overhead.",
            "The optimization strategy involved changing a loop variable from a value copy to a const reference to avoid unnecessary copying during iteration.",
            "The optimization strategy involved changing a loop variable from being copied to being passed as a const reference to reduce unnecessary copy overhead.",
            "The optimization strategy involved changing a loop variable from a value copy to a const reference to avoid unnecessary copying during iteration.",
            "The optimization strategy involved changing the loop variable in a range-based for-loop from a value copy to a const reference to avoid unnecessary copying of objects."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved changing a loop variable from a value copy to a const reference to avoid unnecessary copying during iteration.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "redot-engine",
        "hash": "f1cc99c6e80694fc768ac098e13ef3c5370f6dfe",
        "author": "hoontee",
        "date": "2022-03-09T11:23:46-06:00",
        "message": "Add SNAME macro optimization missed during rebase",
        "modified_files_count": 1,
        "modified_files": [
            "modules/csg/csg_shape.cpp"
        ],
        "github_commit_url": "https://github.com/Redot-Engine/redot-engine/commit/f1cc99c6e80694fc768ac098e13ef3c5370f6dfe",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CSGShape3D::_make_dirty"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing repetitive calls to a function with a macro to reduce overhead and improve performance.",
            "The optimization strategy involved replacing repetitive calls to a function with a macro to reduce computational overhead.",
            "The optimization strategy involved replacing repetitive calls to a function with a macro to reduce computational overhead.",
            "The optimization strategy involved replacing repetitive calls to a name resolution function with a macro to reduce computational overhead.",
            "The optimization strategy involved replacing repetitive calls to a function with a macro to reduce overhead and improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved replacing repetitive calls to a function with a macro to reduce computational overhead.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "fcb423f3f69225e0be896cb10b34b9628ab666f2",
        "author": "Paul Davis",
        "date": "2013-04-12T11:08:24-04:00",
        "message": "slightly optimize drawing of rectangles with all 4 sides outlined to avoid multiple paths etc",
        "modified_files_count": 1,
        "modified_files": [
            "libs/canvas/rectangle.cc"
        ],
        "github_commit_url": "https://github.com/Ardour/ardour/commit/fcb423f3f69225e0be896cb10b34b9628ab666f2",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Rectangle::render"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "ardour",
        "optimization_summary": [
            "The optimization avoids redundant path calculations when drawing rectangles with all four sides outlined by consolidating the rendering into a single path.",
            "The optimization avoids redundant path calculations by directly rendering all four sides of a rectangle in a single operation.",
            "The optimization avoids redundant path calculations by directly rendering all four sides of a rectangle in a single operation.",
            "The optimization avoids redundant path calculations when drawing rectangles with all four sides outlined by consolidating the rendering into a single path.",
            "The optimization avoids redundant path calculations by directly rendering all four sides of a rectangle in a single operation."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids redundant path calculations by directly rendering all four sides of a rectangle in a single operation.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "harfbuzz",
        "hash": "590fb3529a27a2a652c74baa2c8bebad34ec5c42",
        "author": "Behdad Esfahbod",
        "date": "2023-06-03T19:21:22-06:00",
        "message": "[subset] Reduce memory pressure",
        "modified_files_count": 1,
        "modified_files": [
            "src/hb-subset.cc"
        ],
        "github_commit_url": "https://github.com/harfbuzz/harfbuzz/commit/590fb3529a27a2a652c74baa2c8bebad34ec5c42",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "hb_subset_plan_execute_or_fail"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy reduces memory pressure by reusing existing data structures instead of creating new ones.",
            "The optimization strategy reduces memory pressure by reusing existing data structures instead of creating new ones during subset plan execution.",
            "The optimization strategy reduces memory pressure by reusing existing data structures instead of creating new ones during subset plan execution.",
            "The optimization strategy reduces memory pressure by reusing existing data structures instead of creating new ones.",
            "The optimization strategy reduces memory pressure by reusing existing data structures instead of creating new ones."
        ],
        "is_generic_optimization": [
            true,
            true,
            false,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy reduces memory pressure by reusing existing data structures instead of creating new ones.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "stellar-core",
        "hash": "6dae535fed5bce2d910a410dca368edc3f6f2993",
        "author": "Latobarita",
        "date": "2019-01-11T15:10:18-08:00",
        "message": "Merge pull request #1909 from jonjove/improve-encode-b32\n\nSmall improvement in encode_b32 to reserve the correct size\n\nReviewed-by: graydon",
        "modified_files_count": 1,
        "modified_files": [
            "src/util/Decoder.h"
        ],
        "github_commit_url": "https://github.com/stellar/stellar-core/commit/6dae535fed5bce2d910a410dca368edc3f6f2993",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "encode_b32"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reserving the correct size for a container in the `encode_b32` function to avoid unnecessary reallocations.",
            "The optimization strategy involved reserving the correct size for a container in the `encode_b32` function to avoid unnecessary reallocations.",
            "The optimization strategy involved reserving the correct size for a container in the `encode_b32` function to avoid unnecessary reallocations.",
            "The optimization strategy involved reserving the correct size for a container in the `encode_b32` function to avoid unnecessary reallocations.",
            "The optimization strategy involved reserving the correct size for a container in the `encode_b32` function to avoid unnecessary reallocations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reserving the correct size for a container in the `encode_b32` function to avoid unnecessary reallocations.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "b8188e1e2f71483e785831257e2e9f41c44fa8ca",
        "author": "Gleb Natapov",
        "date": "2019-05-06T17:36:50+03:00",
        "message": "storage_proxy: avoid copying of a topology and endpoint array in batchlog code\n\nbatchlog make copies of topology and endpoint array in batchlog endpoint\nchoosing code. There is a remark that at least endpoint copy is\ndeliberate because Cassandra code has it. We do not have to follow. Our\nendpoint calculation code is atomic, so we can use a reference.\n\nMessage-Id: <20190506115815.GK21208@scylladb.com>",
        "modified_files_count": 1,
        "modified_files": [
            "service/storage_proxy.cc"
        ],
        "github_commit_url": "https://github.com/scylladb/scylladb/commit/b8188e1e2f71483e785831257e2e9f41c44fa8ca",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "batch"
        ],
        "is_opt_ds": "true",
        "is_opt_ds_simple": "true",
        "repository_name": "scylladb",
        "optimization_summary": [
            "The optimization avoids unnecessary copying of topology and endpoint arrays by using references instead of copies in the batchlog code.",
            "The optimization avoids unnecessary copying of topology and endpoint arrays by using references instead of copies in the batchlog code.",
            "The optimization avoids unnecessary copying of topology and endpoint arrays by using references instead of copies in the batchlog code.",
            "The optimization avoids unnecessary copying of topology and endpoint arrays by using references instead of copies in the batchlog code.",
            "The optimization avoids unnecessary copying of topology and endpoint arrays by using references instead of copies in the batchlog code."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary copying of topology and endpoint arrays by using references instead of copies in the batchlog code.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "dolphin",
        "hash": "67d2fa11f122dfd15f157d59356bcfb69d3acc47",
        "author": "Sintendo",
        "date": "2020-12-25T19:30:51+01:00",
        "message": "Jit64: srawx - Handle constant zero input\n\nShifting zero by any amount always gives zero.\n\nBefore:\n41 B9 00 00 00 00    mov         r9d,0\n41 8B CF             mov         ecx,r15d\n49 C1 E1 20          shl         r9,20h\n49 D3 F9             sar         r9,cl\n49 C1 E9 20          shr         r9,20h\n\nAfter:\nNothing, register is set to constant zero.\n\nBefore:\n41 B8 00 00 00 00    mov         r8d,0\n41 8B CF             mov         ecx,r15d\n49 C1 E0 20          shl         r8,20h\n49 D3 F8             sar         r8,cl\n41 8B C0             mov         eax,r8d\n49 C1 E8 20          shr         r8,20h\n44 85 C0             test        eax,r8d\n0F 95 45 58          setne       byte ptr [rbp+58h]\n\nAfter:\nC6 45 58 00          mov         byte ptr [rbp+58h],0\n\nOccurs a bunch of times in Super Mario Sunshine. Since this is an\narithmetic shift a similar optimization can be done for constant -1\n(0xFFFFFFFF), but I couldn't find any game where this happens.",
        "modified_files_count": 1,
        "modified_files": [
            "Source/Core/Core/PowerPC/Jit64/Jit_Integer.cpp"
        ],
        "github_commit_url": "https://github.com/dolphin-emu/dolphin/commit/67d2fa11f122dfd15f157d59356bcfb69d3acc47",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Jit64::srawx"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization eliminates unnecessary arithmetic shift operations when the input is a constant zero, as shifting zero always results in zero.",
            "The optimization eliminates unnecessary arithmetic shift operations when the input is a constant zero, directly setting the result to zero instead.",
            "The optimization eliminates unnecessary arithmetic shift operations when the input is a constant zero, as shifting zero always results in zero.",
            "The optimization eliminates unnecessary arithmetic shift operations when the input is a constant zero, directly setting the result to zero instead.",
            "The optimization eliminates unnecessary arithmetic shift operations when the input is a constant zero, as shifting zero always results in zero."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization eliminates unnecessary arithmetic shift operations when the input is a constant zero, as shifting zero always results in zero.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "asymptote",
        "hash": "561986f58f96e407e92979207d66d4bc864b9556",
        "author": "John Bowman",
        "date": "2022-04-03T21:57:01-06:00",
        "message": "TRANSPARENCY: Optimize global summation on CPU.",
        "modified_files_count": 1,
        "modified_files": [
            "glrender.cc"
        ],
        "github_commit_url": "https://github.com/vectorgraphics/asymptote/commit/561986f58f96e407e92979207d66d4bc864b9556",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "partialSums"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved restructuring the loop to reduce redundant computations during global summation on the CPU.",
            "The optimization strategy used parallelization to improve the performance of global summation on the CPU by dividing the work across multiple threads.",
            "The optimization strategy involved restructuring the global summation logic to reduce redundant computations and improve cache locality.",
            "The optimization strategy used parallel processing to improve the performance of global summation on the CPU by dividing the workload across multiple threads.",
            "The optimization strategy involved restructuring the loop to reduce redundant computations during the global summation process."
        ],
        "is_generic_optimization": [
            true,
            false,
            false,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved restructuring the loop to reduce redundant computations during global summation on the CPU.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "pybricks-micropython",
        "hash": "c37463345f2e91c9071deef2ccca7e7bc9d0b5a1",
        "author": "David Lechner",
        "date": "2019-11-26T17:32:08-06:00",
        "message": "ev3dev_stretch/serial: set input and output baud rate at same time\n\nmicro-optimization, there is a function that can set both input and\noutput baud rate at the same time.",
        "modified_files_count": 1,
        "modified_files": [
            "lib/pbio/drv/ev3dev_stretch/serial.c"
        ],
        "github_commit_url": "https://github.com/pybricks/pybricks-micropython/commit/c37463345f2e91c9071deef2ccca7e7bc9d0b5a1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "pbdrv_serial_config"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant calls by using a single function to set both input and output baud rates simultaneously.",
            "The optimization strategy involved replacing separate function calls for setting input and output baud rates with a single function call that sets both simultaneously.",
            "The optimization strategy involved replacing separate function calls for setting input and output baud rates with a single function call that sets both simultaneously.",
            "The optimization strategy involved reducing redundant calls by using a single function to set both input and output baud rates simultaneously.",
            "The optimization strategy involved reducing redundant calls by using a single function to set both input and output baud rates simultaneously."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant calls by using a single function to set both input and output baud rates simultaneously.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "kmsan",
        "hash": "e522f446027845e3c8b563d021f37e8f3d30c9d9",
        "author": "Israel Rukshin",
        "date": "2019-11-04T10:56:40-07:00",
        "message": "nvmet: add unlikely check at nvmet_req_alloc_sgl\n\nThe call to sgl_alloc shouldn't fail so add this simple optimization to\nthe fast path.\n\nSigned-off-by: Israel Rukshin <israelr@mellanox.com>\nReviewed-by: Max Gurtovoy <maxg@mellanox.com>\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Keith Busch <kbusch@kernel.org>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "modified_files_count": 1,
        "modified_files": [
            "drivers/nvme/target/core.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/e522f446027845e3c8b563d021f37e8f3d30c9d9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "nvmet_req_alloc_sgl"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used is adding an `unlikely` branch prediction hint to improve the efficiency of the fast path by signaling that the failure case of `sgl_alloc` is rare.",
            "The optimization strategy used is adding an unlikely check to improve branch prediction for a function that rarely fails.",
            "The optimization strategy used is adding an `unlikely` branch prediction hint to improve the efficiency of the fast path by informing the compiler that the failure case of `sgl_alloc` is rare.",
            "The optimization strategy used is adding an unlikely check to improve branch prediction for a function that rarely fails.",
            "The optimization adds an `unlikely` branch prediction hint to improve the performance of the fast path by indicating that the `sgl_alloc` function is expected to succeed most of the time."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is adding an `unlikely` branch prediction hint to improve the efficiency of the fast path by signaling that the failure case of `sgl_alloc` is rare.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "03cf57db62cb6234539a770f6b54f67c562d5232",
        "author": "Jesse Haber-Kucharsky",
        "date": "2018-08-13T13:24:45-04:00",
        "message": "auth: Construct `std::random_device` instances once\n\n`std::random_device` has a lot of implementation-specific behavior, and\nas a result we cannot assume much about its performance characteristics.\n\nWe initialize thread-specific static instances of `std::random_device`\nonce so that we don't have the overhead of invoking the ctor during\nevery invocation of `gensalt`.",
        "modified_files_count": 1,
        "modified_files": [
            "auth/password_authenticator.cc"
        ],
        "github_commit_url": "https://github.com/scylladb/scylladb/commit/03cf57db62cb6234539a770f6b54f67c562d5232",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "gensalt"
        ],
        "is_opt_ds": "true",
        "is_opt_ds_simple": "true",
        "repository_name": "scylladb",
        "optimization_summary": [
            "The optimization strategy involves initializing thread-specific static instances of `std::random_device` once to avoid the overhead of constructing it repeatedly in the `gensalt` function.",
            "The optimization strategy involves initializing thread-specific static instances of `std::random_device` once to avoid the overhead of constructing it repeatedly in the `gensalt` function.",
            "The optimization strategy involves initializing thread-specific static instances of `std::random_device` once to avoid the overhead of constructing it repeatedly in the `gensalt` function.",
            "The optimization strategy involves initializing thread-specific static instances of `std::random_device` once to avoid the overhead of constructing it repeatedly in the `gensalt` function.",
            "The optimization strategy involves initializing thread-specific static instances of `std::random_device` once to avoid the overhead of repeated constructor calls during each invocation of `gensalt`."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involves initializing thread-specific static instances of `std::random_device` once to avoid the overhead of constructing it repeatedly in the `gensalt` function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "Paddle",
        "hash": "2e1fb26b8b26e1dae81af890e3b0ea089218594c",
        "author": "Aurelius84",
        "date": "2022-04-28T09:41:59+08:00",
        "message": "[Performance]Add static inline for MakeReturnPyObject (#42334)",
        "modified_files_count": 1,
        "modified_files": [
            "paddle/fluid/pybind/op_function.h"
        ],
        "github_commit_url": "https://github.com/PaddlePaddle/Paddle/commit/2e1fb26b8b26e1dae81af890e3b0ea089218594c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "MakeReturnPyObject"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved adding `static inline` to the `MakeReturnPyObject` function to reduce function call overhead and potentially enable compiler optimizations.",
            "The optimization strategy used is to add `static inline` to the `MakeReturnPyObject` function to reduce function call overhead and improve performance by suggesting compiler optimizations.",
            "The optimization strategy used is to add `static inline` to the `MakeReturnPyObject` function to reduce function call overhead and improve performance by suggesting compiler optimizations.",
            "The optimization strategy used is to add `static inline` to the `MakeReturnPyObject` function to reduce function call overhead and improve performance by enabling potential compiler optimizations.",
            "The optimization strategy used is to declare the `MakeReturnPyObject` function as `static inline` to reduce function call overhead and enable potential compiler optimizations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is to add `static inline` to the `MakeReturnPyObject` function to reduce function call overhead and improve performance by enabling potential compiler optimizations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "kmsan",
        "hash": "4423eff71ca6b8f2c5e0fc4cea33d8cdfe3c3740",
        "author": "Christophe Leroy",
        "date": "2021-06-16T00:16:47+10:00",
        "message": "powerpc: Force inlining of csum_add()\n\nCommit 328e7e487a46 (\"powerpc: force inlining of csum_partial() to\navoid multiple csum_partial() with GCC10\") inlined csum_partial().\n\nNow that csum_partial() is inlined, GCC outlines csum_add() when\ncalled by csum_partial().\n\nc064fb28 <csum_add>:\nc064fb28:\t7c 63 20 14 \taddc    r3,r3,r4\nc064fb2c:\t7c 63 01 94 \taddze   r3,r3\nc064fb30:\t4e 80 00 20 \tblr\n\nc0665fb8 <csum_add>:\nc0665fb8:\t7c 63 20 14 \taddc    r3,r3,r4\nc0665fbc:\t7c 63 01 94 \taddze   r3,r3\nc0665fc0:\t4e 80 00 20 \tblr\n\nc066719c:\t7c 9a c0 2e \tlwzx    r4,r26,r24\nc06671a0:\t38 60 00 00 \tli      r3,0\nc06671a4:\t7f 1a c2 14 \tadd     r24,r26,r24\nc06671a8:\t4b ff ee 11 \tbl      c0665fb8 <csum_add>\nc06671ac:\t80 98 00 04 \tlwz     r4,4(r24)\nc06671b0:\t4b ff ee 09 \tbl      c0665fb8 <csum_add>\nc06671b4:\t80 98 00 08 \tlwz     r4,8(r24)\nc06671b8:\t4b ff ee 01 \tbl      c0665fb8 <csum_add>\nc06671bc:\ta0 98 00 0c \tlhz     r4,12(r24)\nc06671c0:\t4b ff ed f9 \tbl      c0665fb8 <csum_add>\nc06671c4:\t7c 63 18 f8 \tnot     r3,r3\nc06671c8:\t81 3f 00 68 \tlwz     r9,104(r31)\nc06671cc:\t81 5f 00 a0 \tlwz     r10,160(r31)\nc06671d0:\t7d 29 18 14 \taddc    r9,r9,r3\nc06671d4:\t7d 29 01 94 \taddze   r9,r9\nc06671d8:\t91 3f 00 68 \tstw     r9,104(r31)\nc06671dc:\t7d 1a 50 50 \tsubf    r8,r26,r10\nc06671e0:\t83 01 00 10 \tlwz     r24,16(r1)\nc06671e4:\t83 41 00 18 \tlwz     r26,24(r1)\n\nThe sum with 0 is useless, should have been skipped.\nAnd there is even one completely unused instance of csum_add().\n\nIn file included from ./include/net/checksum.h:22,\n                 from ./include/linux/skbuff.h:28,\n                 from ./include/linux/icmp.h:16,\n                 from net/ipv6/ip6_tunnel.c:23:\n./arch/powerpc/include/asm/checksum.h: In function '__ip6_tnl_rcv':\n./arch/powerpc/include/asm/checksum.h:94:22: warning: inlining failed in call to 'csum_add': call is unlikely and code size would grow [-Winline]\n   94 | static inline __wsum csum_add(__wsum csum, __wsum addend)\n      |                      ^~~~~~~~\n./arch/powerpc/include/asm/checksum.h:172:31: note: called from here\n  172 |                         sum = csum_add(sum, (__force __wsum)*(const u32 *)buff);\n      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n./arch/powerpc/include/asm/checksum.h:94:22: warning: inlining failed in call to 'csum_add': call is unlikely and code size would grow [-Winline]\n   94 | static inline __wsum csum_add(__wsum csum, __wsum addend)\n      |                      ^~~~~~~~\n./arch/powerpc/include/asm/checksum.h:177:31: note: called from here\n  177 |                         sum = csum_add(sum, (__force __wsum)\n      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  178 |                                             *(const u32 *)(buff + 4));\n      |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~\n./arch/powerpc/include/asm/checksum.h:94:22: warning: inlining failed in call to 'csum_add': call is unlikely and code size would grow [-Winline]\n   94 | static inline __wsum csum_add(__wsum csum, __wsum addend)\n      |                      ^~~~~~~~\n./arch/powerpc/include/asm/checksum.h:183:31: note: called from here\n  183 |                         sum = csum_add(sum, (__force __wsum)\n      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  184 |                                             *(const u32 *)(buff + 8));\n      |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~\n./arch/powerpc/include/asm/checksum.h:94:22: warning: inlining failed in call to 'csum_add': call is unlikely and code size would grow [-Winline]\n   94 | static inline __wsum csum_add(__wsum csum, __wsum addend)\n      |                      ^~~~~~~~\n./arch/powerpc/include/asm/checksum.h:186:31: note: called from here\n  186 |                         sum = csum_add(sum, (__force __wsum)\n      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  187 |                                             *(const u16 *)(buff + 12));\n      |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nForce inlining of csum_add().\n\n     94c:\t80 df 00 a0 \tlwz     r6,160(r31)\n     950:\t7d 28 50 2e \tlwzx    r9,r8,r10\n     954:\t7d 48 52 14 \tadd     r10,r8,r10\n     958:\t80 aa 00 04 \tlwz     r5,4(r10)\n     95c:\t80 ff 00 68 \tlwz     r7,104(r31)\n     960:\t7d 29 28 14 \taddc    r9,r9,r5\n     964:\t7d 29 01 94 \taddze   r9,r9\n     968:\t7d 08 30 50 \tsubf    r8,r8,r6\n     96c:\t80 aa 00 08 \tlwz     r5,8(r10)\n     970:\ta1 4a 00 0c \tlhz     r10,12(r10)\n     974:\t7d 29 28 14 \taddc    r9,r9,r5\n     978:\t7d 29 01 94 \taddze   r9,r9\n     97c:\t7d 29 50 14 \taddc    r9,r9,r10\n     980:\t7d 29 01 94 \taddze   r9,r9\n     984:\t7d 29 48 f8 \tnot     r9,r9\n     988:\t7c e7 48 14 \taddc    r7,r7,r9\n     98c:\t7c e7 01 94 \taddze   r7,r7\n     990:\t90 ff 00 68 \tstw     r7,104(r31)\n\nIn the non-inlined version, the first sum with 0 was performed.\nHere it is skipped.\n\nSigned-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>\nReviewed-by: Segher Boessenkool <segher@kernel.crashing.org>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/f7f4d4e364de6e473da874468b903da6e5d97adc.1620713272.git.christophe.leroy@csgroup.eu",
        "modified_files_count": 1,
        "modified_files": [
            "arch/powerpc/include/asm/checksum.h"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/4423eff71ca6b8f2c5e0fc4cea33d8cdfe3c3740",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "csum_add"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy forces the inlining of the `csum_add()` function to eliminate function call overhead and redundant computations, improving performance by reducing unnecessary operations and skipping unused or redundant calls.",
            "The optimization forces inlining of the `csum_add()` function to eliminate function call overhead and redundant computations, improving performance by reducing unnecessary operations and skipping unused or redundant calls.",
            "The optimization strategy forces the inlining of the `csum_add()` function to eliminate unnecessary function calls and redundant computations, improving performance by reducing overhead.",
            "The optimization strategy forces the inlining of the `csum_add()` function to eliminate function call overhead and redundant computations, improving performance by reducing unnecessary operations and skipping unused or redundant calls.",
            "The optimization strategy forces the inlining of the `csum_add()` function to eliminate function call overhead and redundant computations, improving performance by reducing unnecessary operations and skipping unused or redundant calls."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy forces the inlining of the `csum_add()` function to eliminate function call overhead and redundant computations, improving performance by reducing unnecessary operations and skipping unused or redundant calls.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "BBHash",
        "hash": "6bb97c4218198d3e5dd60c7eadb5267a79959a6d",
        "author": "rchikhi",
        "date": "2020-07-14T17:13:04+02:00",
        "message": "faster lookups by avoiding copy constructor (https://github.com/rizkg/BBHash/issues/20 from @enerc)",
        "modified_files_count": 1,
        "modified_files": [
            "BooPHF.h"
        ],
        "github_commit_url": "https://github.com/rizkg/BBHash/commit/6bb97c4218198d3e5dd60c7eadb5267a79959a6d",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids unnecessary copy constructor calls during lookups by utilizing reference-based access instead of value-based access.",
            "The optimization avoids unnecessary copy constructor calls during lookups by directly referencing objects, reducing overhead.",
            "The optimization avoids unnecessary copy constructor calls during lookups by utilizing reference-based access instead of value-based access.",
            "The optimization avoids unnecessary copy constructor calls during lookups by directly referencing objects, reducing overhead.",
            "The optimization avoids unnecessary copy constructor calls during lookups by utilizing reference-based access instead of value-based access."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary copy constructor calls during lookups by utilizing reference-based access instead of value-based access.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "pycopy",
        "hash": "62f7ba7a815f34fb49967e925ac28ea340a46777",
        "author": "Paul Sokolovsky",
        "date": "2014-06-09T23:40:04+03:00",
        "message": "Merge pull request #675 from Rosuav/seq_simplify\n\nRemove unnecessary bounds check from mp_seq_get_fast_slice_indexes.",
        "modified_files_count": 1,
        "modified_files": [
            "py/sequence.c"
        ],
        "github_commit_url": "https://github.com/pfalcon/pycopy/commit/62f7ba7a815f34fb49967e925ac28ea340a46777",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "mp_seq_get_fast_slice_indexes"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy removed an unnecessary bounds check in the `mp_seq_get_fast_slice_indexes` function to reduce redundant computations.",
            "The optimization removes an unnecessary bounds check in the function `mp_seq_get_fast_slice_indexes` to reduce redundant computations.",
            "The optimization removes an unnecessary bounds check in the function `mp_seq_get_fast_slice_indexes` to reduce redundant computations.",
            "The optimization removes an unnecessary bounds check in the `mp_seq_get_fast_slice_indexes` function to reduce redundant computations.",
            "The optimization removes an unnecessary bounds check in the `mp_seq_get_fast_slice_indexes` function to reduce redundant computations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization removes an unnecessary bounds check in the `mp_seq_get_fast_slice_indexes` function to reduce redundant computations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "envoy",
        "hash": "48743154a35f5751796d39ebceb615453abac8de",
        "author": "htuch",
        "date": "2018-04-03T16:24:19-07:00",
        "message": "config: optimize RepeatedPtrUtil::debugString at non-debug log levels. (#2984)\n\nThis one was showing up on our flamegraphs.\r\n\r\nRisk Level: Low\r\nTesting: bazel build //source/exe/...\r\n\r\nSigned-off-by: Harvey Tuch <htuch@google.com>",
        "modified_files_count": 1,
        "modified_files": [
            "source/common/config/grpc_mux_subscription_impl.h"
        ],
        "github_commit_url": "https://github.com/envoyproxy/envoy/commit/48743154a35f5751796d39ebceb615453abac8de",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "onConfigUpdate"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids unnecessary string construction in `RepeatedPtrUtil::debugString` when logging is not at the debug level.",
            "The optimization avoids unnecessary string construction in `RepeatedPtrUtil::debugString` when logging is not at the debug level.",
            "The optimization avoids unnecessary string construction in `RepeatedPtrUtil::debugString` when logging is not at the debug level.",
            "The optimization avoids unnecessary string construction in `RepeatedPtrUtil::debugString` when logging is not at the debug level.",
            "The optimization avoids unnecessary string construction in `RepeatedPtrUtil::debugString` when logging is not at the debug level."
        ],
        "is_generic_optimization": [
            false,
            true,
            true,
            false,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary string construction in `RepeatedPtrUtil::debugString` when logging is not at the debug level.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "htcondor",
        "hash": "aaea0413fac061ca8697227533084af40865b415",
        "author": "Jaime Frey",
        "date": "2018-01-05T16:40:01-06:00",
        "message": "Make address-rewriting code more efficient when disabled. #6518\n\nIn ConvertDefaultIPToSocketIP(), hoist the check of\nSHARED_PORT_ADDRESS_REWRITING to the top of the function. This lets us\navoid more expensive checks in most situations (only HTCondor-CE sets\nthis parameter to enable address rewriting).",
        "modified_files_count": 1,
        "modified_files": [
            "src/condor_utils/my_hostname.cpp"
        ],
        "github_commit_url": "https://github.com/htcondor/htcondor/commit/aaea0413fac061ca8697227533084af40865b415",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ConvertDefaultIPToSocketIP"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization hoists a conditional check to the top of the function to avoid unnecessary computations when the feature is disabled.",
            "The optimization hoists a conditional check to the top of the function to avoid unnecessary computations when the feature is disabled.",
            "The optimization hoists a conditional check to the top of the function to avoid unnecessary computations when the feature is disabled.",
            "The optimization hoists a conditional check to the top of the function to avoid unnecessary computations when the feature is disabled.",
            "The optimization hoists a conditional check to the top of the function to avoid unnecessary computations when the feature is disabled."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization hoists a conditional check to the top of the function to avoid unnecessary computations when the feature is disabled.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "5844e129891e39beeab038abfe8a7cc7bfb08ad1",
        "author": "Jakub Zawadzki",
        "date": "2014-06-19T00:08:04+00:00",
        "message": "Optimize dissect_sip_uri()\n\n- Combine tvb_find_guint8() for comma, semicolon into one tvb_pbrk_guint8()\n\n- Instead of fetching each character use tvb_pbrk_guint8() to fast\n  forward.\n\n- Remove not needed tvb_find_guint8() call, as the result is discarded.\n\nChange-Id: I38d6775b187146656d47cea9b64f8e0ccad18d36\nReviewed-on: https://code.wireshark.org/review/2384\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "modified_files_count": 1,
        "modified_files": [
            "epan/dissectors/packet-sip.c"
        ],
        "github_commit_url": "https://github.com/wireshark/wireshark/commit/5844e129891e39beeab038abfe8a7cc7bfb08ad1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "dissect_sip_uri"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "wireshark",
        "optimization_summary": [
            "The optimization strategy combines multiple character searches into a single call to reduce redundant operations and improve efficiency.",
            "The optimization strategy involves replacing multiple calls to `tvb_find_guint8()` with a single call to `tvb_pbrk_guint8()` to reduce redundant operations and improve efficiency.",
            "The optimization strategy combines multiple searches for specific characters into a single, more efficient search operation using `tvb_pbrk_guint8()` and eliminates an unnecessary function call.",
            "The optimization strategy combines multiple searches for specific characters into a single more efficient search operation using `tvb_pbrk_guint8()` and removes unnecessary calls to improve performance.",
            "The optimization strategy combines multiple searches for specific characters into a single, more efficient search operation using `tvb_pbrk_guint8()` and removes unnecessary calls to improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy combines multiple searches for specific characters into a single more efficient search operation using `tvb_pbrk_guint8()` and removes unnecessary calls to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "32blit-sdk",
        "hash": "b8a09bd0f461b93ded0a3f3532690e24b570bab1",
        "author": "Philip Howard",
        "date": "2020-10-16T14:42:23+01:00",
        "message": "Merge pull request #402 from Daft-Freak/patch-2\n\nAvoid copying entire screen surface in set_screen_mode",
        "modified_files_count": 1,
        "modified_files": [
            "32blit/engine/engine.cpp"
        ],
        "github_commit_url": "https://github.com/32blit/32blit-sdk/commit/b8a09bd0f461b93ded0a3f3532690e24b570bab1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "set_screen_mode"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids copying the entire screen surface by directly manipulating the screen mode without unnecessary data duplication.",
            "The optimization avoids copying the entire screen surface by directly manipulating the screen mode without unnecessary data duplication.",
            "The optimization avoids copying the entire screen surface by directly manipulating the screen mode without unnecessary data duplication.",
            "The optimization avoids copying the entire screen surface by directly manipulating the screen mode without unnecessary data duplication.",
            "The optimization avoids copying the entire screen surface by directly manipulating the screen mode without unnecessary data duplication."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids copying the entire screen surface by directly manipulating the screen mode without unnecessary data duplication.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "gui",
        "hash": "1ed859e90e18384376e3a1ff0cb76f3e9ab11c2d",
        "author": "W. J. van der Laan",
        "date": "2021-05-19T10:07:53+02:00",
        "message": "Merge bitcoin/bitcoin#21173: util: faster HexStr => 13% faster blockToJSON\n\n74bf850ac47735f2ef4306059d3e664d40cac85e faster HexStr => 13% faster blockToJSON (Martin Ankerl)\n\nPull request description:\n\n  `std::string`'s push_back is rather slow because it needs to check & update the string size. For\n  `HexStr` the output string size is already easily know, so we can initially create the string with\n  the correct size and then just assign the data.\n\n  `HexStr` is heavily usd in `blockToJSON`, so this change is a noticeable benefit. Benchmark on an i7-8700 @3.2GHz:\n\n  * 71,315,461.00 ns/op master\n  * 62,842,490.00 ns/op this commit\n\n  So this little change makes `blockToJSON` about ~13% faster.\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 74bf850ac47735f2ef4306059d3e664d40cac85e\n  theStack:\n    re-ACK 74bf850ac47735f2ef4306059d3e664d40cac85e\n\nTree-SHA512: fc99105123edc11f4e40ed77aea80cf7f32e49c53369aa364b38395dcb48575e15040b0489ed30d0fe857c032a04e225c33e9d95cdfa109a3cb5a6ec9a972415",
        "modified_files_count": 1,
        "modified_files": [
            "src/util/strencodings.cpp"
        ],
        "github_commit_url": "https://github.com/bitcoin-core/gui/commit/1ed859e90e18384376e3a1ff0cb76f3e9ab11c2d",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved preallocating the exact size of the output string in `HexStr` to avoid repeated size checks and updates during `push_back` operations.",
            "The optimization strategy involved preallocating the exact size of the output string in `HexStr` to avoid repeated size checks and updates during `push_back` operations.",
            "The optimization strategy involved preallocating the output string's size in `HexStr` to avoid repeated size checks and updates during `push_back` operations.",
            "The optimization strategy involved pre-allocating the output string's size in `HexStr` to avoid repeated size checks and updates during `push_back` operations.",
            "The optimization strategy involved preallocating the exact size of the output string in `HexStr` to avoid repeated size checks and updates during `push_back` operations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved preallocating the exact size of the output string in `HexStr` to avoid repeated size checks and updates during `push_back` operations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "DiligentFX",
        "hash": "6c920dcb433864a31bd36537d9bc3dfb6c84a5b9",
        "author": "assiduous",
        "date": "2024-02-25T22:45:17-08:00",
        "message": "HnRenderPass: minor change for a non-trivial performance win",
        "modified_files_count": 1,
        "modified_files": [
            "Hydrogent/src/HnRenderPass.cpp"
        ],
        "github_commit_url": "https://github.com/DiligentGraphics/DiligentFX/commit/6c920dcb433864a31bd36537d9bc3dfb6c84a5b9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "HnRenderPass::RenderPendingDrawItems"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant state changes in the rendering pipeline by caching and reusing previously set states.",
            "The optimization strategy involved reducing redundant state changes in the rendering loop by caching and reusing previously set states.",
            "The optimization strategy involved reducing redundant state changes in the rendering pipeline by caching and reusing previously set states.",
            "The optimization strategy involved reducing redundant state changes in the rendering loop by caching and reusing the previous state.",
            "The optimization strategy involved reducing redundant state changes in the rendering pipeline by caching and reusing previously set states."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant state changes in the rendering pipeline by caching and reusing previously set states.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "casadi",
        "hash": "a45f99d74008f1c7fe646d84d9e7ff3bbfc09a5f",
        "author": "Joel Andersson",
        "date": "2011-06-19T17:11:48+00:00",
        "message": "resolved performance degrading changed introduced in revision 1319 (4)",
        "modified_files_count": 1,
        "modified_files": [
            "examples/multiple_shooting_from_scratch.cpp"
        ],
        "github_commit_url": "https://github.com/casadi/casadi/commit/a45f99d74008f1c7fe646d84d9e7ff3bbfc09a5f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "main"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant computations inside a loop by moving invariant calculations outside the loop.",
            "The optimization strategy involved reducing redundant computations inside a loop by caching results of expensive operations.",
            "The optimization strategy involved restructuring the code to avoid redundant computations inside a loop, thereby improving performance.",
            "The optimization strategy involved reducing redundant computations inside a loop by caching results of expensive operations.",
            "The optimization strategy involved reducing redundant computations inside a loop by moving invariant calculations outside the loop."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant computations inside a loop by moving invariant calculations outside the loop.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "647a2a9a25234d9b6089afb6000f48713d4bcb54",
        "author": "Glenn Strauss",
        "date": "2022-02-19T02:40:37-05:00",
        "message": "[mod_magnet] adjust hot path for more inlining",
        "modified_files_count": 1,
        "modified_files": [
            "src/mod_magnet.c"
        ],
        "github_commit_url": "https://github.com/lighttpd/lighttpd1.4/commit/647a2a9a25234d9b6089afb6000f48713d4bcb54",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "magnet_attract"
        ],
        "is_opt_ds": "true",
        "is_opt_ds_simple": "true",
        "repository_name": "lighttpd1.4",
        "optimization_summary": [
            "The optimization strategy involved restructuring the code to enable more aggressive inlining by the compiler, reducing function call overhead in a performance-critical path.",
            "The optimization strategy involved restructuring the hot path in the `magnet_attract` function to enable more aggressive inlining by the compiler.",
            "The optimization strategy involved restructuring the hot path in the `magnet_attract` function to enable more aggressive inlining by the compiler.",
            "The optimization strategy involved restructuring the code to enable more aggressive inlining by the compiler, reducing function call overhead in a performance-critical path.",
            "The optimization strategy involved restructuring the hot path in the `magnet_attract` function to enable more aggressive inlining by the compiler."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved restructuring the hot path in the `magnet_attract` function to enable more aggressive inlining by the compiler.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "skyscraper",
        "hash": "83d0820e58ba45242e71bd15ae1917991829b1a1",
        "author": "Lars Muldjord",
        "date": "2018-01-03T19:07:02+01:00",
        "message": "Now uses constBits instead of bits for efficiency",
        "modified_files_count": 1,
        "modified_files": [
            "src/compositor.cpp"
        ],
        "github_commit_url": "https://github.com/muldjord/skyscraper/commit/83d0820e58ba45242e71bd15ae1917991829b1a1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Compositor::applyShadow"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing the use of `bits` with `constBits` to avoid unnecessary data copying and improve efficiency.",
            "The optimization strategy involved replacing the use of `bits` with `constBits` to avoid unnecessary data copying and improve efficiency.",
            "The optimization strategy involved replacing the use of `bits()` with `constBits()` to avoid unnecessary deep copying of data, thereby improving efficiency.",
            "The optimization strategy involved replacing the use of `bits` with `constBits` to avoid unnecessary data copying and improve efficiency.",
            "The optimization strategy involved replacing the use of `bits` with `constBits` to avoid unnecessary data copying and improve efficiency."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing the use of `bits` with `constBits` to avoid unnecessary data copying and improve efficiency.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "Server",
        "hash": "0534a2c6be2b00b5f564ffb001ed0e858ff9c237",
        "author": "Michael Cook (mackal)",
        "date": "2021-04-07T01:17:30-05:00",
        "message": "Switch scheduled hot zone check to search instead of split (#1313)\n\nUsing search_deliminated_string here is significantly faster than\r\nsplitting, most likely because of dynamic memory management\r\n\r\nSome tests on my system:\r\n\r\n----------------------------------------------------\r\nBenchmark             Time           CPU Iterations\r\n----------------------------------------------------\r\nbench_split         864 ns        864 ns     807922\r\nbench_search         35 ns         35 ns   20265205\r\n\r\nThis test was a case where the string was present somewhere in the\r\nmiddle which gave a ~96% speed up\r\n\r\n----------------------------------------------------\r\nBenchmark             Time           CPU Iterations\r\n----------------------------------------------------\r\nbench_split         936 ns        936 ns     725518\r\nbench_search         61 ns         61 ns   11156359\r\n\r\nThis test was when the string was not present, which will be the vast\r\nmajority of times this is actually checked, was ~93% speed up",
        "modified_files_count": 1,
        "modified_files": [
            "zone/zone_event_scheduler.cpp"
        ],
        "github_commit_url": "https://github.com/EQEmu/Server/commit/0534a2c6be2b00b5f564ffb001ed0e858ff9c237",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ZoneEventScheduler::Process"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy replaced a string-splitting operation with a search operation to reduce dynamic memory management overhead and improve performance.",
            "The optimization strategy replaced a string-splitting operation with a search-based approach to reduce dynamic memory management overhead and improve performance.",
            "The optimization strategy replaced a string-splitting operation with a search operation to reduce dynamic memory management overhead and improve performance.",
            "The optimization strategy replaced a string-splitting operation with a search-based approach to reduce dynamic memory management overhead and improve performance.",
            "The optimization strategy replaced a string-splitting operation with a search-based approach to reduce dynamic memory management overhead and improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy replaced a string-splitting operation with a search-based approach to reduce dynamic memory management overhead and improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "Marlin",
        "hash": "d7b6acc03d03796e34ab0d293cc8be88b4657fda",
        "author": "Mihai",
        "date": "2024-06-15T17:55:45-05:00",
        "message": "⚡️ Optimize LPC176x set_pwm_duty (#27178)",
        "modified_files_count": 1,
        "modified_files": [
            "Marlin/src/HAL/LPC1768/fast_pwm.cpp"
        ],
        "github_commit_url": "https://github.com/MarlinFirmware/Marlin/commit/d7b6acc03d03796e34ab0d293cc8be88b4657fda",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "MarlinHAL::set_pwm_duty"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing unnecessary register writes by checking the current state before updating PWM duty cycles.",
            "The optimization strategy involved reducing redundant calculations and improving the efficiency of setting PWM duty cycles by directly manipulating hardware registers.",
            "The optimization strategy involved replacing a division operation with a bitwise shift to improve the performance of setting PWM duty on LPC176x.",
            "The optimization strategy involved replacing a division operation with a bitwise shift to improve the performance of setting PWM duty on LPC176x.",
            "The optimization strategy involved replacing a division operation with a bitwise shift to improve the performance of setting PWM duty on LPC176x."
        ],
        "is_generic_optimization": [
            false,
            false,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a division operation with a bitwise shift to improve the performance of setting PWM duty on LPC176x.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "Monocypher",
        "hash": "c08d3c300b11adc9ac02d90e59c7306ea6c0bcd3",
        "author": "Loup Vaillant",
        "date": "2018-02-24T15:47:53+01:00",
        "message": "Strength reduction for Chacha20\n\nThe performance gain is tiny, but measurable.",
        "modified_files_count": 1,
        "modified_files": [
            "src/monocypher.c"
        ],
        "github_commit_url": "https://github.com/LoupVaillant/Monocypher/commit/c08d3c300b11adc9ac02d90e59c7306ea6c0bcd3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "crypto_chacha20_encrypt"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used strength reduction by replacing multiplication with bit shifts and additions in the Chacha20 encryption loop to reduce computational overhead.",
            "The optimization strategy used strength reduction by replacing multiplication with bit shifts and additions in the Chacha20 encryption function to improve performance.",
            "The optimization strategy used strength reduction by replacing multiplications with additions in the Chacha20 loop to reduce computational overhead.",
            "The optimization strategy used strength reduction by replacing multiplication with bit shifts and additions in the Chacha20 encryption loop to reduce computational overhead.",
            "The optimization strategy used strength reduction by replacing multiplication with bit shifts and additions in the Chacha20 encryption loop to reduce computational overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used strength reduction by replacing multiplication with bit shifts and additions in the Chacha20 encryption loop to reduce computational overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "tensorflow",
        "hash": "51a4843aff53901e1ee08b7623b59cf0dcf2a43a",
        "author": "A. Unique TensorFlower",
        "date": "2024-04-24T09:07:42-07:00",
        "message": "Allow for short-circuiting optimization in ShapeUtil::EqualStructure.\n\nNote that operator& doesn't do short-circuiting, unlike operator&&.\n\nPiperOrigin-RevId: 627745915",
        "modified_files_count": 1,
        "modified_files": [
            "third_party/xla/xla/shape_util.cc"
        ],
        "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/51a4843aff53901e1ee08b7623b59cf0dcf2a43a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ForEachSubshape"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy replaces the non-short-circuiting operator& with the short-circuiting operator&& to improve performance by avoiding unnecessary evaluations.",
            "The optimization strategy replaces the non-short-circuiting operator& with the short-circuiting operator&& to improve performance by avoiding unnecessary evaluations.",
            "The optimization strategy replaces the non-short-circuiting operator& with the short-circuiting operator&& to improve performance by avoiding unnecessary evaluations.",
            "The optimization strategy involved replacing the non-short-circuiting operator& with the short-circuiting operator&& to improve efficiency in conditional evaluations.",
            "The optimization strategy replaces the non-short-circuiting operator& with the short-circuiting operator&& to improve performance by avoiding unnecessary evaluations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy replaces the non-short-circuiting operator& with the short-circuiting operator&& to improve performance by avoiding unnecessary evaluations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "cmssw",
        "hash": "3be47f265be2c269c3e2459bd6d806a19401783b",
        "author": "Nicola Minafra",
        "date": "2021-02-19T13:56:34+01:00",
        "message": "slightly more efficient",
        "modified_files_count": 1,
        "modified_files": [
            "RecoLocalCalo/EcalRecAlgos/src/EcalUncalibRecHitTimingCCAlgo.cc"
        ],
        "github_commit_url": "https://github.com/cms-sw/cmssw/commit/3be47f265be2c269c3e2459bd6d806a19401783b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "EcalUncalibRecHitTimingCCAlgo::interpolatePulse"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a linear interpolation calculation with a more efficient formula that reduces unnecessary computations.",
            "The optimization strategy involved replacing a linear interpolation calculation with a more efficient formula that reduces unnecessary computations.",
            "The optimization strategy involved replacing a linear search with a binary search to improve the efficiency of finding elements in a sorted collection.",
            "The optimization strategy involved replacing a linear interpolation calculation with a more efficient formula to reduce computational overhead.",
            "The optimization strategy involved replacing a linear search with a binary search to improve the efficiency of finding elements in a sorted collection."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a linear interpolation calculation with a more efficient formula that reduces unnecessary computations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "epsilon",
        "hash": "4f2daa7a4f9c7209476f9b51e66db4fb1ebc4ce7",
        "author": "Émilie Feral",
        "date": "2017-06-02T14:07:55+02:00",
        "message": "[apps/shared] Improve perf of values controller\n\nChange-Id: I22b0f81c59d06bb8fa58de7f8958a20e0bcf53b0",
        "modified_files_count": 1,
        "modified_files": [
            "apps/shared/values_controller.cpp"
        ],
        "github_commit_url": "https://github.com/numworks/epsilon/commit/4f2daa7a4f9c7209476f9b51e66db4fb1ebc4ce7",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ValuesController::indexFromCumulatedWidth"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing unnecessary computations in the `indexFromCumulatedWidth` function by caching or precomputing values to avoid redundant calculations.",
            "The optimization strategy involved reducing unnecessary computations in the `indexFromCumulatedWidth` function by caching or simplifying repeated calculations.",
            "The optimization strategy involved reducing unnecessary computations in the `indexFromCumulatedWidth` function by caching or precomputing values to avoid redundant calculations.",
            "The optimization strategy involved improving the performance of the `indexFromCumulatedWidth` function by reducing unnecessary computations or iterations within the loop.",
            "The optimization strategy involved reducing unnecessary computations in the `indexFromCumulatedWidth` function by caching or precomputing values to avoid redundant calculations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing unnecessary computations in the `indexFromCumulatedWidth` function by caching or precomputing values to avoid redundant calculations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "theseus-ship",
        "hash": "f7d7c246b8b76cbd4440b9c1665f0ccaa57e9880",
        "author": "Martin Gräßlin",
        "date": "2015-01-16T12:28:44+01:00",
        "message": "Slightly optimize Workspace::xStackingOrder\n\nCallgrind analysis showed that this method has room for improvement.\nThe bottle neck is mapping the Unmanaged against the list of windows\nretreived from xcb_query_tree. The number of windows in that list is\nrather large (>1000), which turns the loop into an expensive path.\nWorkspace::findUnmanaged seems to be too expensive for that due to the\noverhead of using a functor and multiple method calls. The Inl. cost\nbefore the optimization for checking ~55,000 windows is 2.46.\n\nThe change uses a good old const-iterator based loop over the unmanaged\nlist to check for the window. This reduces the Incl. cost for checking\n~55,000 windows to 0.28.\n\nREVIEW: 122067",
        "modified_files_count": 1,
        "modified_files": [
            "layers.cpp"
        ],
        "github_commit_url": "https://github.com/winft/theseus-ship/commit/f7d7c246b8b76cbd4440b9c1665f0ccaa57e9880",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Workspace::xStackingOrder"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy replaced a functor-based search with a const-iterator loop to reduce overhead and improve performance in checking a large list of windows.",
            "The optimization strategy replaced a functor-based search with a const-iterator loop to reduce overhead and improve performance in checking a large list of windows.",
            "The optimization strategy replaced a functor-based search with a const-iterator loop to reduce overhead when checking for windows in a large list.",
            "The optimization strategy replaced a functor-based search with a const-iterator loop to reduce overhead and improve performance in checking a large list of windows.",
            "The optimization strategy replaced a functor-based search with a const-iterator loop to reduce overhead and improve performance in checking a large list of windows."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy replaced a functor-based search with a const-iterator loop to reduce overhead and improve performance in checking a large list of windows.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "MyScaleDB",
        "hash": "5d19150906430531963f5e95346db3795eb499fd",
        "author": "avogar",
        "date": "2022-05-20T10:47:28+00:00",
        "message": "Try to improve short circuit functions processing",
        "modified_files_count": 1,
        "modified_files": [
            "src/Interpreters/ExpressionActions.cpp"
        ],
        "github_commit_url": "https://github.com/myscale/MyScaleDB/commit/5d19150906430531963f5e95346db3795eb499fd",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved restructuring the evaluation of short-circuit functions to minimize unnecessary computations by avoiding redundant processing.",
            "The optimization strategy involved restructuring the evaluation of short-circuit functions to minimize unnecessary computations by exiting early when a condition is met.",
            "The optimization strategy involved restructuring the evaluation of short-circuit functions to minimize unnecessary computations by exiting early when a result is determined.",
            "The optimization strategy involved restructuring the evaluation of short-circuit functions to minimize unnecessary computations by avoiding redundant processing.",
            "The optimization strategy involved restructuring the evaluation of short-circuit functions to minimize unnecessary computations by leveraging early exits."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved restructuring the evaluation of short-circuit functions to minimize unnecessary computations by exiting early when a result is determined.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "orx",
        "hash": "fa2c15128485f4d7207b9b8827d147573061738a",
        "author": "iarwain",
        "date": "2020-02-23T00:16:23-05:00",
        "message": "- Minor optimization in orxConfig_IsInheritedValue()",
        "modified_files_count": 1,
        "modified_files": [
            "code/src/core/orxConfig.c"
        ],
        "github_commit_url": "https://github.com/orx/orx/commit/fa2c15128485f4d7207b9b8827d147573061738a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "orxConfig_IsInheritedValue"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved simplifying the logic in orxConfig_IsInheritedValue() by reducing unnecessary checks and improving early exit conditions to minimize redundant computations.",
            "The optimization strategy involved simplifying the logic in orxConfig_IsInheritedValue() to reduce unnecessary computations and improve performance by directly returning results based on conditional checks.",
            "The optimization strategy involved simplifying the logic in orxConfig_IsInheritedValue() to reduce unnecessary computations by directly returning results based on conditional checks.",
            "The optimization strategy involved simplifying the logic in orxConfig_IsInheritedValue() to reduce unnecessary computations and improve performance by directly returning results based on conditional checks.",
            "The optimization strategy involved simplifying the logic in orxConfig_IsInheritedValue() by reducing unnecessary checks and improving early exit conditions to enhance performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved simplifying the logic in orxConfig_IsInheritedValue() to reduce unnecessary computations and improve performance by directly returning results based on conditional checks.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "x0",
        "hash": "311bbb48fa0bd5a189c7698910ebcc3874b81017",
        "author": "Christian Parpart",
        "date": "2014-03-04T23:26:48+01:00",
        "message": "x0d: honor optimization level var",
        "modified_files_count": 1,
        "modified_files": [
            "x0d/src/XzeroDaemon.cpp"
        ],
        "github_commit_url": "https://github.com/christianparpart/x0/commit/311bbb48fa0bd5a189c7698910ebcc3874b81017",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "XzeroDaemon::setup"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The commit optimizes performance by respecting the optimization level variable to enable compiler-driven optimizations.",
            "The optimization strategy involved honoring an optimization level variable to potentially enable compiler-level optimizations.",
            "The commit optimizes performance by ensuring the optimization level variable is respected during setup, potentially enabling compiler-level optimizations.",
            "The optimization strategy involved honoring an optimization level variable to potentially enable compiler-level optimizations.",
            "The optimization strategy involved honoring an optimization level variable to potentially enable compiler-level optimizations during the setup phase."
        ],
        "is_generic_optimization": [
            true,
            true,
            false,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved honoring an optimization level variable to potentially enable compiler-level optimizations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "mace",
        "hash": "ae7766cdace8174aac5741e13a8b2cdaf208575d",
        "author": "虞连飞",
        "date": "2018-11-27T11:47:41+08:00",
        "message": "optimize eltwise computing order",
        "modified_files_count": 1,
        "modified_files": [
            "mace/ops/eltwise.cc"
        ],
        "github_commit_url": "https://github.com/XiaoMi/mace/commit/ae7766cdace8174aac5741e13a8b2cdaf208575d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "DoEltwise"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reordering the computation sequence in the element-wise operations to improve cache locality and reduce redundant calculations.",
            "The optimization strategy involved reordering the computation sequence in the element-wise operations to improve cache locality and reduce memory access overhead.",
            "The optimization strategy involved reordering the computation sequence in the element-wise operations to improve cache locality and reduce memory access overhead.",
            "The optimization strategy involved reordering the computation sequence in the element-wise operations to improve cache locality and reduce redundant calculations.",
            "The optimization strategy involved reordering the computation sequence in the element-wise operations to improve cache locality and reduce memory access overhead."
        ],
        "is_generic_optimization": [
            false,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reordering the computation sequence in the element-wise operations to improve cache locality and reduce memory access overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "qulacs",
        "hash": "97a86940cc81c458094214f21ee9949291a0e25c",
        "author": "KowerKoint",
        "date": "2023-06-21T12:42:43+09:00",
        "message": "Merge pull request #565 from qulacs/fastalize-parametriccircuit-copy\n\nremove std::find(), precalc where parametric gates exist",
        "modified_files_count": 1,
        "modified_files": [
            "src/vqcsim/parametric_circuit.cpp"
        ],
        "github_commit_url": "https://github.com/qulacs/qulacs/commit/97a86940cc81c458094214f21ee9949291a0e25c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ParametricQuantumCircuit::copy"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing `std::find()` with precomputed indices to reduce the overhead of repeated searches for parametric gates.",
            "The optimization strategy involved replacing `std::find()` with a precomputed lookup to reduce the computational overhead of repeatedly searching for parametric gates.",
            "The optimization strategy involved replacing `std::find()` with precomputed indices to reduce the overhead of repeated searches for parametric gates.",
            "The optimization strategy involved replacing `std::find()` with precomputed indices to reduce the overhead of repeated searches for parametric gates.",
            "The optimization strategy involved replacing `std::find()` with precomputed indices to reduce the computational overhead of repeatedly searching for parametric gates."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing `std::find()` with precomputed indices to reduce the overhead of repeated searches for parametric gates.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "mantid",
        "hash": "620b3fa197e899e8ccc8c8dfd3993ad0518a7841",
        "author": "Chen Zhang",
        "date": "2021-11-22T11:03:22-05:00",
        "message": "optimize for speed",
        "modified_files_count": 1,
        "modified_files": [
            "Framework/Geometry/src/Objects/CSGObject.cpp"
        ],
        "github_commit_url": "https://github.com/mantidproject/mantid/commit/620b3fa197e899e8ccc8c8dfd3993ad0518a7841",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CSGObject::interceptSurface"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations within the `interceptSurface` function by caching and reusing intermediate results.",
            "The optimization strategy involved reducing redundant calculations within the `interceptSurface` function by caching and reusing intermediate results.",
            "The optimization strategy involved reducing redundant calculations within the `interceptSurface` function by caching and reusing intermediate results.",
            "The optimization strategy involved reducing redundant calculations within the `interceptSurface` function by caching and reusing intermediate results.",
            "The optimization strategy involved reducing redundant calculations within the `interceptSurface` function by caching and reusing intermediate results."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant calculations within the `interceptSurface` function by caching and reusing intermediate results.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "30005444fe7b6956db675db343e47613b19f8219",
        "author": "Dan Gohman",
        "date": "2010-07-26T17:45:33+00:00",
        "message": "Avoid copying and recopying a std::set.\n\nllvm-svn: 109405",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/VMCore/Dominators.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/30005444fe7b6956db675db343e47613b19f8219",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy avoids redundant copying of a `std::set` by directly operating on the original data structure.",
            "The optimization strategy avoids unnecessary copying of a `std::set` by directly operating on the original data structure.",
            "The optimization strategy avoids unnecessary copying of a `std::set` by directly operating on the original data structure.",
            "The optimization strategy avoids redundant copying of a `std::set` by directly working with references or iterators instead of creating unnecessary intermediate copies.",
            "The optimization strategy avoids unnecessary copying of a `std::set` by directly operating on the original data structure."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy avoids unnecessary copying of a `std::set` by directly operating on the original data structure.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "ucx",
        "hash": "bdb82246d0e13616977e6f244f1d45f0539ded77",
        "author": "Shuki Zanyovka",
        "date": "2020-06-25T15:02:11+03:00",
        "message": "UCS: Improve ptr_array foreach performance by prefetching\n\n- Use CPU dcache prefetching to further improve the ptr_array\n  performance.\n- Improvement achieved is ~10% on Intel processors.",
        "modified_files_count": 1,
        "modified_files": [
            "src/ucs/datastruct/ptr_array.h"
        ],
        "github_commit_url": "https://github.com/openucx/ucx/commit/bdb82246d0e13616977e6f244f1d45f0539ded77",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "__ucs_ptr_array_for_each_get_step_size"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used CPU data cache prefetching to enhance the performance of iterating through a pointer array by reducing cache misses.",
            "The optimization strategy used CPU data cache prefetching to improve the performance of iterating through a pointer array by reducing cache misses.",
            "The optimization strategy used CPU data cache prefetching to improve the performance of iterating through a pointer array by reducing cache misses.",
            "The optimization strategy used CPU data cache prefetching to improve the performance of iterating over a pointer array by reducing cache misses.",
            "The optimization strategy used CPU data cache prefetching to improve the performance of iterating through a pointer array by reducing cache misses."
        ],
        "is_generic_optimization": [
            true,
            true,
            false,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used CPU data cache prefetching to improve the performance of iterating through a pointer array by reducing cache misses.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "NetworkManager",
        "hash": "d5d7b4781e116bd8dcaab28ad7d1db8f57d21621",
        "author": "Thomas Haller",
        "date": "2020-04-03T11:31:12+02:00",
        "message": "shared: pre-allocate GString with 16 bytes for _nm_utils_enum_to_str_full()\n\nIn the next commit, GString will be replaced by NMStrBuf. Then, we will\npre-allocate a string buffer with 16 bytes, and measure the performance\ndifference. To have it comparable, adjust the pre-allocation size also\nwith GString.",
        "modified_files_count": 1,
        "modified_files": [
            "shared/nm-glib-aux/nm-enum-utils.c"
        ],
        "github_commit_url": "https://github.com/NetworkManager/NetworkManager/commit/d5d7b4781e116bd8dcaab28ad7d1db8f57d21621",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "_nm_utils_enum_to_str_full"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy pre-allocates a GString with 16 bytes to reduce dynamic memory reallocations during string operations.",
            "The optimization strategy pre-allocates a GString with 16 bytes to reduce dynamic memory reallocations during string operations.",
            "The optimization strategy pre-allocates a GString with 16 bytes to reduce dynamic memory reallocations during string operations.",
            "The optimization strategy pre-allocates a GString with 16 bytes to reduce dynamic memory reallocations during string operations.",
            "The optimization strategy pre-allocates a GString with 16 bytes to reduce dynamic memory reallocations during string operations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy pre-allocates a GString with 16 bytes to reduce dynamic memory reallocations during string operations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "PX4-Autopilot",
        "hash": "a9d83b77de913c35752914a2a0657f59f5f4bbbe",
        "author": "Dennis Mannhart",
        "date": "2018-08-15T16:19:51+02:00",
        "message": "ControlMath: math optimization",
        "modified_files_count": 1,
        "modified_files": [
            "src/modules/mc_pos_control/Utility/ControlMath.cpp"
        ],
        "github_commit_url": "https://github.com/PX4/PX4-Autopilot/commit/a9d83b77de913c35752914a2a0657f59f5f4bbbe",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "constrainXY"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved simplifying mathematical operations to reduce computational overhead in the constrainXY function.",
            "The optimization strategy involved simplifying mathematical operations to reduce computational overhead in the `constrainXY` function.",
            "The optimization strategy involved simplifying mathematical operations to reduce computational overhead in the constrainXY function.",
            "The optimization strategy involved simplifying mathematical operations to reduce computational overhead in the constrainXY function.",
            "The optimization strategy involved simplifying mathematical operations to reduce computational overhead in the constrainXY function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved simplifying mathematical operations to reduce computational overhead in the constrainXY function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "libical",
        "hash": "a8f69b3e1aee98d15547a5598a11db37adec75af",
        "author": "Markus Minichmayr",
        "date": "2024-10-27T17:44:55+01:00",
        "message": "icalrecur.c: Minor performance improvement in filter_bysetpos() - avoid iterating all bits in days bit field.",
        "modified_files_count": 1,
        "modified_files": [
            "src/libical/icalrecur.c"
        ],
        "github_commit_url": "https://github.com/libical/libical/commit/a8f69b3e1aee98d15547a5598a11db37adec75af",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "filter_bysetpos"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids unnecessary iteration over all bits in a bit field by directly checking relevant positions.",
            "The optimization avoids unnecessary iteration over all bits in a bit field by directly checking relevant positions.",
            "The optimization avoids unnecessary iteration over all bits in a bit field by directly checking relevant positions.",
            "The optimization avoids unnecessary iteration over all bits in a bit field by directly checking relevant positions.",
            "The optimization avoids unnecessary iteration over all bits in a bit field by directly checking relevant positions, reducing computational overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary iteration over all bits in a bit field by directly checking relevant positions.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "snp-sites",
        "hash": "6466c95549484208b45337602812f0c5ff85085a",
        "author": "andrewjpage",
        "date": "2012-05-09T13:43:01+01:00",
        "message": "speedup phylip creation",
        "modified_files_count": 1,
        "modified_files": [
            "phylib_of_snp_sites.c"
        ],
        "github_commit_url": "https://github.com/sanger-pathogens/snp-sites/commit/6466c95549484208b45337602812f0c5ff85085a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "create_phylib_of_snp_sites"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a nested loop structure with a single loop to reduce redundant computations during Phylip file creation.",
            "The optimization strategy involved reducing redundant computations within the loop that constructs the PHYLIP format output by caching and reusing previously computed values.",
            "The optimization strategy involved reducing redundant computations within the loop that constructs the PHYLIP format output by caching and reusing previously computed values.",
            "The optimization strategy involved reducing redundant computations within the loop that constructs the PHYLIP format output by caching and reusing previously computed values.",
            "The optimization strategy involved reducing redundant computations within the loop that constructs the PHYLIP format output by caching and reusing previously computed values."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant computations within the loop that constructs the PHYLIP format output by caching and reusing previously computed values.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "sycl",
        "hash": "01c82f50f7f2dc2f93e354374b5a6e14c71839a0",
        "author": "Kostya Serebryany",
        "date": "2016-12-17T02:23:35+00:00",
        "message": "[libFuzzer] speed up __sanitizer_cov_trace_switch a bit more (remove DIV)\n\nllvm-svn: 290034",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/Fuzzer/FuzzerTracePC.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/01c82f50f7f2dc2f93e354374b5a6e14c71839a0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "__attribute__"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved removing a division operation in the `__sanitizer_cov_trace_switch` function to reduce computational overhead.",
            "The optimization strategy involved removing a division operation in the `__sanitizer_cov_trace_switch` function to reduce computational overhead.",
            "The optimization strategy involved removing a division operation in the `__sanitizer_cov_trace_switch` function to reduce computational overhead.",
            "The optimization strategy involved removing a division operation in the `__sanitizer_cov_trace_switch` function to reduce computational overhead.",
            "The optimization strategy involved removing a division operation in the `__sanitizer_cov_trace_switch` function to reduce computational overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved removing a division operation in the `__sanitizer_cov_trace_switch` function to reduce computational overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "v8",
        "hash": "0878b351adc46285b651d9d83499511c71cbda3c",
        "author": "Darius M",
        "date": "2023-12-13T11:26:37+00:00",
        "message": "[turboshaft] Iterate further Load/Store index-offset optimization\n\nSo far, a `Load(base=a+Constant(4), index=invalid, offset=0)` would be\nnormalized to `Load(base=a, index=Constant(4), offset=0)`. With this\nCL, we'll do one more reduction step to get to\n`Load(base=a, index=invalid, offset=4)`.\n\nBug: v8:12783\nChange-Id: I582032b18709beefacabcc9938afb2f7768b85fb\nReviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/5119541\nAuto-Submit: Darius Mercadier <dmercadier@chromium.org>\nReviewed-by: Matthias Liedtke <mliedtke@chromium.org>\nCommit-Queue: Matthias Liedtke <mliedtke@chromium.org>\nCr-Commit-Position: refs/heads/main@{#91482}",
        "modified_files_count": 1,
        "modified_files": [
            "src/compiler/turboshaft/machine-optimization-reducer.h"
        ],
        "github_commit_url": "https://github.com/v8/v8/commit/0878b351adc46285b651d9d83499511c71cbda3c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "REDUCE"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy simplifies load/store operations by reducing unnecessary intermediate steps in index-offset normalization.",
            "The optimization strategy simplifies load/store operations by reducing index-offset combinations into a more efficient base-offset form.",
            "The optimization strategy simplifies load/store operations by reducing index-offset combinations to a more efficient canonical form with a direct offset.",
            "The optimization strategy simplifies load/store operations by reducing index-offset combinations to a more efficient canonical form with a direct offset.",
            "The optimization strategy simplifies load/store operations by reducing index-offset combinations to a more efficient canonical form."
        ],
        "is_generic_optimization": [
            false,
            false,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy simplifies load/store operations by reducing index-offset combinations to a more efficient canonical form with a direct offset.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "55a2abfe31b82af13a77c3dc89913774f667b898",
        "author": "Hui Su",
        "date": "2018-06-11T18:07:18+00:00",
        "message": "Merge \"Small speedup of ml_pruning_partition()\"",
        "modified_files_count": 1,
        "modified_files": [
            "vp9/encoder/vp9_encodeframe.c"
        ],
        "github_commit_url": "https://github.com/webmproject/libvpx/commit/55a2abfe31b82af13a77c3dc89913774f667b898",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ml_pruning_partition"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "libvpx",
        "optimization_summary": [
            "The optimization strategy involved simplifying the logic in the ml_pruning_partition function to reduce unnecessary computations and improve execution speed.",
            "The optimization strategy involved simplifying the logic in the loop to reduce unnecessary computations and improve iteration efficiency.",
            "The optimization strategy involved simplifying the logic in the loop to reduce unnecessary computations and improve iteration efficiency.",
            "The optimization strategy involved simplifying the logic in the loop to reduce unnecessary computations during partition pruning.",
            "The optimization strategy involved simplifying the logic in the ml_pruning_partition function to reduce unnecessary computations and improve execution speed."
        ],
        "is_generic_optimization": [
            false,
            true,
            true,
            true,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved simplifying the logic in the loop to reduce unnecessary computations during partition pruning.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "NanoVNA-D",
        "hash": "d40132ac72a03d78c67e1f1e2b4fc26b309c0452",
        "author": "DiSlord",
        "date": "2022-04-24T01:47:35+03:00",
        "message": "Little faster draw cell line",
        "modified_files_count": 1,
        "modified_files": [
            "plot.c"
        ],
        "github_commit_url": "https://github.com/DiSlord/NanoVNA-D/commit/d40132ac72a03d78c67e1f1e2b4fc26b309c0452",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "cell_drawline"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations inside a loop to improve drawing performance.",
            "The optimization strategy involved reducing redundant calculations within the loop to improve drawing performance.",
            "The optimization strategy involved reducing redundant calculations within the loop to improve drawing performance.",
            "The optimization strategy involved reducing redundant calculations within the loop to improve drawing performance.",
            "The optimization strategy involved replacing a pixel-by-pixel drawing loop with a more efficient block-based memory copy operation to reduce overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant calculations within the loop to improve drawing performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "autoware.universe",
        "hash": "d962acba55aa0c9d50515b767cbb1bfd327fc50e",
        "author": "Mamoru Sobue",
        "date": "2025-02-11T20:28:19+09:00",
        "message": "perf(behavior_path_planner): improve getOverlappedLaneletId (#10094)\n\nSigned-off-by: Mamoru Sobue <mamoru.sobue@tier4.jp>",
        "modified_files_count": 1,
        "modified_files": [
            "planning/behavior_path_planner/autoware_behavior_path_planner_common/src/utils/drivable_area_expansion/static_drivable_area.cpp"
        ],
        "github_commit_url": "https://github.com/autowarefoundation/autoware.universe/commit/d962acba55aa0c9d50515b767cbb1bfd327fc50e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "getOverlappedLaneletId"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the `getOverlappedLaneletId` function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the `getOverlappedLaneletId` function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the `getOverlappedLaneletId` function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the `getOverlappedLaneletId` function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant computations by caching and reusing results within the `getOverlappedLaneletId` function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "objeck-lang",
        "hash": "2ab150494645e01ae0fea67354d5d71a17c743ca",
        "author": "Randy Hollines",
        "date": "2022-08-20T08:08:40-07:00",
        "message": "working on deadstore optimization",
        "modified_files_count": 1,
        "modified_files": [
            "core/compiler/optimization.cpp"
        ],
        "github_commit_url": "https://github.com/objeck/objeck-lang/commit/2ab150494645e01ae0fea67354d5d71a17c743ca",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ItermediateOptimizer::DeadStore"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy removes unnecessary store operations by identifying and eliminating dead stores in the intermediate representation.",
            "The optimization strategy removes unnecessary store operations that are immediately overwritten, reducing redundant memory writes.",
            "The optimization strategy removes unnecessary store operations by identifying and eliminating dead stores in the intermediate representation.",
            "The optimization strategy removes unnecessary store operations that are immediately overwritten, reducing redundant memory writes.",
            "The optimization strategy removes unnecessary store operations that are immediately overwritten, reducing redundant memory writes."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy removes unnecessary store operations that are immediately overwritten, reducing redundant memory writes.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "naev",
        "hash": "59f77ff4ffdb4da61d62d489402ce32bb8e31e65",
        "author": "Deiz",
        "date": "2015-05-17T00:48:34-04:00",
        "message": "Minor optimization to system_setFaction\n\nSince it was iterating forwards and using the last (largest) presence,\nit's quicker to iterate backwards and bail on the first match.",
        "modified_files_count": 1,
        "modified_files": [
            "src/space.c"
        ],
        "github_commit_url": "https://github.com/naev/naev/commit/59f77ff4ffdb4da61d62d489402ce32bb8e31e65",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "system_setFaction"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reversing the iteration order to exit early upon finding the first match, reducing unnecessary iterations.",
            "The optimization strategy involved reversing the iteration order to exit early upon finding the first match, reducing unnecessary iterations.",
            "The optimization strategy involved reversing the iteration order to exit early upon finding the first match, reducing unnecessary iterations.",
            "The optimization strategy involved reversing the iteration order to exit early upon finding the first match, reducing unnecessary iterations.",
            "The optimization strategy involved reversing the iteration order to exit early upon finding the first match, reducing unnecessary iterations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reversing the iteration order to exit early upon finding the first match, reducing unnecessary iterations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "fastclick",
        "hash": "e8dd2b3d505713c8fe224595812b9be37cb3acd9",
        "author": "eddietwo",
        "date": "2006-08-24T15:57:50+00:00",
        "message": "use raw bools, rather than : 1; same amount of space and maybe slightly faster (Koen Beel)",
        "modified_files_count": 1,
        "modified_files": [
            "elements/ip/checkipheader.cc"
        ],
        "github_commit_url": "https://github.com/tbarbette/fastclick/commit/e8dd2b3d505713c8fe224595812b9be37cb3acd9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CheckIPHeader::static_initialize"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy replaced bit-field boolean variables with raw boolean variables to potentially improve performance while maintaining the same memory usage.",
            "The optimization strategy replaced bit-field boolean variables with raw boolean variables to potentially improve performance while maintaining the same memory usage.",
            "The optimization strategy replaced bit-field boolean variables with raw boolean variables to potentially improve performance while maintaining the same memory usage.",
            "The optimization strategy replaced bit-field booleans with raw booleans to potentially improve performance while maintaining the same memory usage.",
            "The optimization strategy replaced bit-field boolean variables with raw boolean types to potentially improve performance while maintaining the same memory usage."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy replaced bit-field boolean variables with raw boolean variables to potentially improve performance while maintaining the same memory usage.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "RVVM",
        "hash": "b3cb2aa8f2bab1efa6f962495328e42eb6ce827a",
        "author": "Alisa Sireneva",
        "date": "2025-02-12T23:25:32+03:00",
        "message": "Optimize bit_next_pow2 with intrinsics",
        "modified_files_count": 1,
        "modified_files": [
            "src/bit_ops.h"
        ],
        "github_commit_url": "https://github.com/LekKit/RVVM/commit/b3cb2aa8f2bab1efa6f962495328e42eb6ce827a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "bit_next_pow2"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used intrinsic functions to improve the performance of the `bit_next_pow2` function by leveraging low-level hardware instructions for faster computation.",
            "The optimization strategy used intrinsic functions to improve the performance of the `bit_next_pow2` function by leveraging low-level hardware instructions.",
            "The optimization strategy used intrinsic functions to improve the performance of the `bit_next_pow2` function by leveraging low-level hardware instructions.",
            "The optimization strategy used intrinsic functions to improve the performance of the `bit_next_pow2` function by leveraging low-level hardware instructions for faster computation.",
            "The optimization strategy used intrinsic functions to improve the performance of the `bit_next_pow2` function by leveraging low-level hardware instructions for faster computation."
        ],
        "is_generic_optimization": [
            true,
            true,
            false,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used intrinsic functions to improve the performance of the `bit_next_pow2` function by leveraging low-level hardware instructions for faster computation.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "sycl",
        "hash": "ee1fcb2fb684a54a3969adeb22108b62b18ea751",
        "author": "Mehdi Amini",
        "date": "2022-01-02T01:16:15+00:00",
        "message": "Apply clang-tidy fixes for performance-move-const-arg to MLIR (NFC)\n\nReviewed By: rriddle, Mogball\n\nDifferential Revision: https://reviews.llvm.org/D116249",
        "modified_files_count": 1,
        "modified_files": [
            "mlir/test/lib/Dialect/Linalg/TestLinalgTransforms.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/ee1fcb2fb684a54a3969adeb22108b62b18ea751",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "applyMatmulToVectorPatterns"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved applying clang-tidy fixes to eliminate unnecessary move operations on const arguments, reducing potential performance overhead.",
            "The optimization strategy involved applying clang-tidy fixes to eliminate unnecessary move operations on constant arguments, reducing potential performance overhead.",
            "The optimization strategy involved applying clang-tidy fixes to eliminate unnecessary move operations on constant arguments, reducing overhead.",
            "The optimization strategy involved applying clang-tidy fixes to eliminate unnecessary move operations on constant arguments, reducing overhead.",
            "The optimization strategy involved applying clang-tidy fixes to eliminate unnecessary move operations on constant arguments, reducing overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved applying clang-tidy fixes to eliminate unnecessary move operations on constant arguments, reducing overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "FreeBSD-src",
        "hash": "606c37c54160479130a7337e45efbdf01d013b13",
        "author": "Collin Funk",
        "date": "2024-04-12T16:39:05-06:00",
        "message": "nproc: Prefer sys/cdefs.h __unreachable over the builtin\n\nThe __builtin_unreachable macro provided by Clang and GCC is a hint to\nthe compiler used for optimization. The programs work fine even if the\ncompiler doesn't support it. The sys/cdefs.h has had __unreachable for\n9 years (commit 732b31de5d9244bd1cc98192e09ee1881e9f55e9). It expands\nto the builtin if it is available. In the rare case that it is\nunsupported it expands to a null statement so compilation does not\nfail.\n\nSigned-off-by: Collin Funk <collin.funk1@gmail.com>\nReviewed by: imp, freebsd@igalic.co\nPull Request: https://github.com/freebsd/freebsd-src/pull/1117",
        "modified_files_count": 1,
        "modified_files": [
            "bin/nproc/nproc.c"
        ],
        "github_commit_url": "https://github.com/pfsense/FreeBSD-src/commit/606c37c54160479130a7337e45efbdf01d013b13",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "main"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy replaces the compiler-specific `__builtin_unreachable` with the more portable and standardized `__unreachable` macro from `sys/cdefs.h`, enabling broader compatibility while maintaining optimization hints.",
            "The optimization strategy replaces the compiler-specific `__builtin_unreachable` with the more portable and standardized `__unreachable` macro from `sys/cdefs.h`, ensuring broader compatibility while maintaining optimization hints.",
            "The optimization strategy replaces the compiler-specific `__builtin_unreachable` with the more portable and standardized `__unreachable` macro from `sys/cdefs.h`, ensuring broader compatibility while maintaining optimization hints.",
            "The optimization strategy replaces the compiler-specific `__builtin_unreachable` with the more portable and standardized `__unreachable` macro from `sys/cdefs.h`, ensuring broader compatibility while maintaining optimization hints.",
            "The optimization strategy replaces the compiler-specific `__builtin_unreachable` with the more portable and standardized `__unreachable` macro from `sys/cdefs.h`, ensuring broader compatibility while maintaining optimization hints."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy replaces the compiler-specific `__builtin_unreachable` with the more portable and standardized `__unreachable` macro from `sys/cdefs.h`, ensuring broader compatibility while maintaining optimization hints.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "lustre-release",
        "hash": "afee2380c105c37e440aaa9ec588cd27189bc18e",
        "author": "Mr NeilBrown",
        "date": "2020-08-13T05:58:43+00:00",
        "message": "LU-12275 sec: use memchr_inv() to check if page is zero.\n\nmemchr_inv() is the preferred way to check if a memory region is all\nzeros.  It is likely fast that memcmp() is it doesn't need to read the\nZERO_PAGE into cache, or into the CPU.  It was introduced in Linux\n3.2.\n\nTest-Parameters: trivial\nSigned-off-by: Mr NeilBrown <neilb@suse.de>\nChange-Id: I0a5c3d30d5db43a3f5ebb270ea66b9db2b200a9a\nReviewed-on: https://review.whamcloud.com/39459\nTested-by: Maloo <maloo@whamcloud.com>\nTested-by: jenkins <devops@whamcloud.com>\nReviewed-by: Andreas Dilger <adilger@whamcloud.com>\nReviewed-by: James Simmons <jsimmons@infradead.org>\nReviewed-by: Sebastien Buisson <sbuisson@ddn.com>",
        "modified_files_count": 1,
        "modified_files": [
            "lustre/osc/osc_request.c"
        ],
        "github_commit_url": "https://github.com/lustre/lustre-release/commit/afee2380c105c37e440aaa9ec588cd27189bc18e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "osc_brw_fini_request"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization replaces a potentially slower `memcmp()` with the more efficient `memchr_inv()` to check if a memory region is all zeros, reducing cache and CPU overhead.",
            "The optimization strategy replaces a potentially slower memory comparison method with the more efficient `memchr_inv()` function to check if a memory region is entirely zero.",
            "The optimization strategy replaces a potentially slower `memcmp()` with the more efficient `memchr_inv()` to check if a memory region is all zeros, reducing cache and CPU overhead.",
            "The optimization strategy replaces a potentially slower `memcmp()` with the more efficient `memchr_inv()` to check if a memory region is all zeros, reducing cache and CPU overhead.",
            "The optimization replaces a potentially slower `memcmp()` with the more efficient `memchr_inv()` to check if a memory region is all zeros, reducing cache and CPU overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy replaces a potentially slower `memcmp()` with the more efficient `memchr_inv()` to check if a memory region is all zeros, reducing cache and CPU overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "njs",
        "hash": "aa697e3e98b479f8e62d756512f5b6db427b7a84",
        "author": "Dmitry Volyntsev",
        "date": "2023-10-04T13:35:38-07:00",
        "message": "Improved memory footprint of RegExp.prototype.split().",
        "modified_files_count": 1,
        "modified_files": [
            "src/njs_regexp.c"
        ],
        "github_commit_url": "https://github.com/nginx/njs/commit/aa697e3e98b479f8e62d756512f5b6db427b7a84",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "njs_regexp_prototype_symbol_split"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing memory usage by avoiding unnecessary allocations during the splitting process of `RegExp.prototype.split()`.",
            "The optimization strategy involved reducing memory allocations by reusing existing buffers in the `RegExp.prototype.split()` implementation.",
            "The optimization strategy involved reducing memory usage by avoiding unnecessary allocations during the splitting process in `RegExp.prototype.split()`.",
            "The optimization strategy involved reducing memory usage by avoiding unnecessary allocations during the splitting process of `RegExp.prototype.split()`.",
            "The optimization strategy involved reducing memory usage by avoiding unnecessary allocations during the splitting process of `RegExp.prototype.split()`."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing memory usage by avoiding unnecessary allocations during the splitting process of `RegExp.prototype.split()`.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "92ce43309072e09bf558d91b1291067de67ced40",
        "author": "Marc-André Moreau",
        "date": "2013-05-16T19:56:39-04:00",
        "message": "libfreerdp-codec: optimize color conversion a bit",
        "modified_files_count": 1,
        "modified_files": [
            "libfreerdp/codec/color.c"
        ],
        "github_commit_url": "https://github.com/FreeRDP/FreeRDP/commit/92ce43309072e09bf558d91b1291067de67ced40",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "freerdp_image_convert_16bpp"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "FreeRDP",
        "optimization_summary": [
            "The optimization strategy involved replacing a multiplication operation with a bit shift to improve the efficiency of color conversion in 16bpp images.",
            "The optimization strategy involved simplifying color conversion calculations by directly manipulating pixel data to reduce unnecessary computations.",
            "The optimization strategy involved replacing a multiplication operation with a bit shift to improve the performance of color conversion in 16bpp images.",
            "The optimization strategy involved simplifying color conversion logic by reducing unnecessary computations and improving the efficiency of bitwise operations.",
            "The optimization strategy involved simplifying color conversion logic by reducing unnecessary computations and improving the efficiency of pixel processing."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved simplifying color conversion logic by reducing unnecessary computations and improving the efficiency of pixel processing.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "TrinityCore",
        "hash": "bf6102e7ed8866feba28622eb3b0089812ec5f36",
        "author": "megamage",
        "date": "2009-07-10T08:38:35+08:00",
        "message": "Minor optimizations to MSG_QUERY_NEXT_MAIL_TIME handler. Author: hunuza\n\n    * Do not search for more unread mails when already found 2.\n    * Do not call time(NULL) every iteration.\n\n--HG--\nbranch : trunk",
        "modified_files_count": 1,
        "modified_files": [
            "src/game/Mail.cpp"
        ],
        "github_commit_url": "https://github.com/TrinityCore/TrinityCore/commit/bf6102e7ed8866feba28622eb3b0089812ec5f36",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "WorldSession::HandleQueryNextMailTime"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids unnecessary iterations and redundant function calls by stopping the search for unread mails after finding two and caching the result of `time(NULL)`.",
            "The optimization avoids unnecessary iterations and redundant function calls by stopping the search for unread mails after finding two and caching the result of `time(NULL)`.",
            "The optimization avoids unnecessary iterations and redundant function calls by stopping the search for unread mails after finding two and caching the result of `time(NULL)`.",
            "The optimization avoids unnecessary iterations and redundant function calls by stopping the search for unread mails after finding two and caching the result of `time(NULL)`.",
            "The optimization strategy involves early termination of a loop when a condition is met and reducing redundant function calls within the loop."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary iterations and redundant function calls by stopping the search for unread mails after finding two and caching the result of `time(NULL)`.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "tcmalloc",
        "hash": "f374ca655b312aa02e60e6b16699ab729bb10260",
        "author": "Dmitry Vyukov",
        "date": "2023-08-31T23:08:56-07:00",
        "message": "tcmalloc: speed up aligned new and malloc\n\nCurrnetly we do alignment check even for requested alignment <= 8,\nthis is unnecessary. Also \"size_class % kNumBaseClasses\" leads to quite\ninefficient codegen:\n\n  313685:       ff c1                   inc    %ecx\n  313687:       4c 69 c1 83 be a0 2f    imul   $0x2fa0be83,%rcx,%r8\n  31368e:       49 c1 e8 24             shr    $0x24,%r8\n  313692:       45 6b c0 56             imul   $0x56,%r8d,%r8d\n  313696:       41 39 c8                cmp    %ecx,%r8d\n  313699:       75 dd                   jne    313678 <TCMallocInternalNewAligned+0x38>\n  31369b:       e9 a8 00 00 00          jmp    313748 <TCMallocInternalNewAligned+0x108>\n\nThis check is not necessary at all, since we are guaranteed to find\na size class with page alignment.\n\nname                        old cpu/op   new cpu/op   delta\nBM_aligned_new/1/8          8.40ns ± 1%  6.34ns ± 0%  -24.57%  (p=0.008 n=5+5)\nBM_aligned_new/8/8          8.38ns ± 1%  6.33ns ± 0%  -24.51%  (p=0.016 n=5+4)\nBM_aligned_new/64/8         8.33ns ± 1%  6.54ns ± 3%  -21.56%  (p=0.008 n=5+5)\nBM_aligned_new/512/8        8.50ns ± 1%  6.52ns ± 1%  -23.40%  (p=0.008 n=5+5)\nBM_aligned_new/4096/8       10.3ns ± 4%   8.4ns ± 0%  -18.76%  (p=0.016 n=5+4)\nBM_aligned_new/32768/8      19.2ns ± 1%  17.4ns ± 0%   -9.30%  (p=0.029 n=4+4)\nBM_aligned_new/262144/8     85.8ns ± 0%  85.5ns ± 0%     ~     (p=0.200 n=4+4)\nBM_aligned_new/1048576/8     274ns ± 7%   268ns ± 1%     ~     (p=0.310 n=5+5)\nBM_aligned_new/1/64         12.6ns ± 0%   9.1ns ± 1%  -27.84%  (p=0.008 n=5+5)\nBM_aligned_new/8/64         12.6ns ± 1%   9.0ns ± 0%  -28.34%  (p=0.008 n=5+5)\nBM_aligned_new/64/64        8.33ns ± 1%  7.10ns ± 1%  -14.79%  (p=0.008 n=5+5)\nBM_aligned_new/512/64       8.49ns ± 1%  7.26ns ± 1%  -14.49%  (p=0.008 n=5+5)\nBM_aligned_new/4096/64      10.4ns ± 0%   9.3ns ± 5%   -9.91%  (p=0.016 n=4+5)\nBM_aligned_new/32768/64     19.1ns ± 0%  18.0ns ± 0%   -6.02%  (p=0.029 n=4+4)\nBM_aligned_new/262144/64    85.8ns ± 0%  86.0ns ± 0%     ~     (p=0.486 n=4+4)\nBM_aligned_new/1048576/64    386ns ±33%   348ns ±37%     ~     (p=0.548 n=5+5)\nBM_aligned_new/65/64        17.8ns ± 0%  13.4ns ± 2%  -24.60%  (p=0.008 n=5+5)\n\nPiperOrigin-RevId: 561863242\nChange-Id: Ibbaf5ff955c9a890e0045c4215ef70eb680dd59d",
        "modified_files_count": 1,
        "modified_files": [
            "tcmalloc/sizemap.h"
        ],
        "github_commit_url": "https://github.com/google/tcmalloc/commit/f374ca655b312aa02e60e6b16699ab729bb10260",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "GetSizeClass"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization removes unnecessary alignment checks and modulo operations for size classes, leveraging guaranteed page alignment to improve performance.",
            "The optimization removes unnecessary alignment checks and modulo operations for size classes, leveraging guaranteed page alignment to improve performance.",
            "The optimization removes unnecessary alignment checks and modulo operations for size classes, leveraging guaranteed page alignment to improve performance.",
            "The optimization removes unnecessary alignment checks and replaces an inefficient modulo operation with a guaranteed size class lookup for page alignment.",
            "The optimization removes unnecessary alignment checks and replaces an inefficient modulo operation with a guaranteed size class lookup for page alignment."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            false
        ],
        "optimization_summary_final": "The optimization removes unnecessary alignment checks and modulo operations for size classes, leveraging guaranteed page alignment to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "dolphin",
        "hash": "c817b4779daf6b58a25bfb194a156e3215177574",
        "author": "Sintendo",
        "date": "2024-12-28T23:20:22+01:00",
        "message": "JitArm64_Integer: addzex - Optimize InPPCState case for 0\n\nBefore:\n0x52800019   mov    w25, #0x0                 ; =0\n0x394bd3b8   ldrb   w24, [x29, #0x2f4]\n0x2b180339   adds   w25, w25, w24\n\nAfter:\n0x394bd3b9   ldrb   w25, [x29, #0x2f4]",
        "modified_files_count": 1,
        "modified_files": [
            "Source/Core/Core/PowerPC/JitArm64/JitArm64_Integer.cpp"
        ],
        "github_commit_url": "https://github.com/dolphin-emu/dolphin/commit/c817b4779daf6b58a25bfb194a156e3215177574",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "JitArm64::addzex"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization eliminates an unnecessary zero-initialization and directly loads the value into the target register.",
            "The optimization eliminates an unnecessary zero-initialization and directly loads the value into the target register.",
            "The optimization eliminates an unnecessary zero-initialization and directly loads the value into the target register.",
            "The optimization eliminates unnecessary zero-initialization and directly loads the value into the target register.",
            "The optimization eliminates an unnecessary zero-initialization and directly loads the value into the target register."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization eliminates an unnecessary zero-initialization and directly loads the value into the target register.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "Floorp",
        "hash": "22f547b544b625a98ac13a10bff584dae22f03cd",
        "author": "Olli Pettay",
        "date": "2016-12-22T00:23:07+02:00",
        "message": "Bug 1324808 - Improve string allocation, r=nfroyd",
        "modified_files_count": 1,
        "modified_files": [
            "xpcom/string/nsTSubstring.cpp"
        ],
        "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/22f547b544b625a98ac13a10bff584dae22f03cd",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "sizeof"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved improving string allocation by reducing unnecessary memory overhead in the `sizeof` function.",
            "The optimization strategy involved improving string allocation by reducing unnecessary memory overhead in the `sizeof` function.",
            "The optimization strategy involved improving string allocation by reducing unnecessary memory overhead in the `sizeof` function.",
            "The optimization strategy involved improving string allocation by reducing unnecessary memory overhead in the `sizeof` function.",
            "The optimization strategy involved improving string allocation by reducing unnecessary memory overhead in the `sizeof` function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved improving string allocation by reducing unnecessary memory overhead in the `sizeof` function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "lustre-release",
        "hash": "3eb209f5010adb4c022dda732f37e1929e6eb69c",
        "author": "alex",
        "date": "2005-06-28T16:10:08+00:00",
        "message": "- minor optimization: we already have fid in reply, no need to fetch it",
        "modified_files_count": 1,
        "modified_files": [
            "lustre/mds/mds_open.c"
        ],
        "github_commit_url": "https://github.com/lustre/lustre-release/commit/3eb209f5010adb4c022dda732f37e1929e6eb69c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "mds_open"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids redundant fetching of the `fid` by directly using the value already present in the reply.",
            "The optimization avoids redundant fetching of the `fid` by directly using the value already present in the reply.",
            "The optimization avoids redundant fetching of the `fid` by directly using the value already present in the reply.",
            "The optimization avoids redundant fetching of the `fid` by directly using the value already present in the reply.",
            "The optimization avoids redundant fetching of the `fid` by directly using the value already present in the reply."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids redundant fetching of the `fid` by directly using the value already present in the reply.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "hacker-league",
        "hash": "a0031fc827c4ea151c9510bbf2f332c8fb08b4b4",
        "author": "Moritz Thüning",
        "date": "2024-08-28T12:59:56+02:00",
        "message": "make physics more efficient",
        "modified_files_count": 1,
        "modified_files": [
            "main.cpp"
        ],
        "github_commit_url": "https://github.com/moritztng/hacker-league/commit/a0031fc827c4ea151c9510bbf2f332c8fb08b4b4",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "physics"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations within the physics function by caching and reusing results.",
            "The optimization strategy involved reducing redundant calculations within the physics function by caching and reusing results.",
            "The optimization strategy involved reducing redundant calculations within the physics function by caching and reusing results.",
            "The optimization strategy involved reducing redundant calculations within the physics function by caching and reusing results.",
            "The optimization strategy involved reducing redundant calculations within the physics function by caching and reusing previously computed values."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant calculations within the physics function by caching and reusing results.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "MLV-App",
        "hash": "754584ba06e56506010315670c651069b9239983",
        "author": "masc4ii",
        "date": "2018-06-21T12:58:45+02:00",
        "message": "small optimization for wb picker function",
        "modified_files_count": 1,
        "modified_files": [
            "src/processing/raw_processing.c"
        ],
        "github_commit_url": "https://github.com/ilia3101/MLV-App/commit/754584ba06e56506010315670c651069b9239983",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "processingFindWhiteBalance"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a linear search with a binary search to improve the efficiency of the white balance picker function.",
            "The optimization strategy involved reducing redundant computations by caching intermediate results within the function.",
            "The optimization strategy involved reducing redundant calculations within the white balance picker function by caching intermediate results.",
            "The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency in the white balance picker function.",
            "The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency in the white balance picker function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency in the white balance picker function.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "b936e398e2c49c1b766db9aefbd24e3563b4a751",
        "author": "Robert Kausch",
        "date": "2019-03-08T07:00:12+11:00",
        "message": "Speed up FLAC__bitwriter_write_byte_block (metadata writing)",
        "modified_files_count": 1,
        "modified_files": [
            "src/libFLAC/bitwriter.c"
        ],
        "github_commit_url": "https://github.com/xiph/flac/commit/b936e398e2c49c1b766db9aefbd24e3563b4a751",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "FLAC__bitwriter_write_byte_block"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "flac",
        "optimization_summary": [
            "The optimization strategy used is to replace a loop with a direct memory copy operation to improve the performance of writing byte blocks.",
            "The optimization strategy involved replacing a loop with a more efficient block write operation to reduce overhead.",
            "The optimization strategy used is to replace a loop with a direct memory write operation to reduce iteration overhead.",
            "The optimization strategy involved replacing a loop with a direct memory write to reduce the number of iterations and improve performance.",
            "The optimization strategy used is to replace a loop with a direct memory write operation to reduce iteration overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is to replace a loop with a direct memory write operation to reduce iteration overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "HDTN",
        "hash": "f6a25fdb70731a53088ae810636ca556de6b0a15",
        "author": "Tomko",
        "date": "2021-04-08T08:22:01-04:00",
        "message": "more encode attempt optimizations",
        "modified_files_count": 1,
        "modified_files": [
            "common/util/src/Sdnv.cpp"
        ],
        "github_commit_url": "https://github.com/nasa/HDTN/commit/f6a25fdb70731a53088ae810636ca556de6b0a15",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SdnvEncodeU64Fast"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing unnecessary computations in the SDNV encoding process by directly calculating byte requirements and avoiding redundant bitwise operations.",
            "The optimization strategy involved simplifying the encoding logic to reduce unnecessary computations during the SDNV encoding process.",
            "The optimization strategy involved improving the efficiency of encoding by reducing unnecessary operations or iterations within the SDNV encoding function.",
            "The optimization strategy involved reducing unnecessary iterations and improving the efficiency of encoding logic by restructuring loop conditions and calculations.",
            "The optimization strategy involved reducing unnecessary computations in the SDNV encoding process by directly calculating byte requirements and avoiding redundant operations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved simplifying the encoding logic to reduce unnecessary computations during the SDNV encoding process.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "leap",
        "hash": "94e7bd0696a890c92c4dfe00c25b987450aa75ee",
        "author": "Kevin Heifner",
        "date": "2023-04-28T09:36:15-05:00",
        "message": "GH-641 Use more efficient escape_str instead of format_string",
        "modified_files_count": 1,
        "modified_files": [
            "plugins/producer_plugin/producer_plugin.cpp"
        ],
        "github_commit_url": "https://github.com/AntelopeIO/leap/commit/94e7bd0696a890c92c4dfe00c25b987450aa75ee",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "producer_plugin_impl::start_block"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a less efficient string formatting function with a more efficient string escaping function to improve performance.",
            "The optimization strategy involved replacing a less efficient string formatting function with a more efficient string escaping function to improve performance.",
            "The optimization strategy involved replacing a less efficient string formatting function with a more efficient string escaping function to improve performance.",
            "The optimization strategy involved replacing a less efficient string formatting function with a more efficient string escaping function to improve performance.",
            "The optimization strategy involved replacing a less efficient string formatting function with a more efficient string escaping function to improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a less efficient string formatting function with a more efficient string escaping function to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "QGIS",
        "hash": "9bd0e887ae539498cd832b7adc66a08a751477f4",
        "author": "mhugent",
        "date": "2009-09-25T11:31:09+00:00",
        "message": "Speed up listing of field values in search dialog by using QSet\n\ngit-svn-id: http://svn.osgeo.org/qgis/trunk@11711 c8812cc2-4d05-0410-92ff-de0c093fc19c",
        "modified_files_count": 1,
        "modified_files": [
            "src/app/qgssearchquerybuilder.cpp"
        ],
        "github_commit_url": "https://github.com/qgis/QGIS/commit/9bd0e887ae539498cd832b7adc66a08a751477f4",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "QgsSearchQueryBuilder::getFieldValues"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used was replacing a QList with a QSet to improve the performance of field value listing by leveraging faster lookup times.",
            "The optimization strategy used was replacing a QList with a QSet to improve the performance of field value listing by leveraging faster lookup times.",
            "The optimization strategy used was replacing a QList with a QSet to improve the performance of field value listing by leveraging faster lookup times.",
            "The optimization strategy used was replacing a QList with a QSet to improve the performance of field value listing by leveraging faster lookup times.",
            "The optimization strategy used was replacing a QList with a QSet to improve the performance of field value listing by leveraging faster lookup times."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used was replacing a QList with a QSet to improve the performance of field value listing by leveraging faster lookup times.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "lightspark",
        "hash": "28ae2d69ecc270c182190557ef42937fe41a0d61",
        "author": "Ludger Krämer",
        "date": "2020-06-25T20:09:26+02:00",
        "message": "fix optimization of static method calls",
        "modified_files_count": 1,
        "modified_files": [
            "src/scripting/abc_interpreter.cpp"
        ],
        "github_commit_url": "https://github.com/lightspark/lightspark/commit/28ae2d69ecc270c182190557ef42937fe41a0d61",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ABCVm::preloadFunction"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing repeated static method calls with a single call stored in a local variable to reduce redundant computations.",
            "The optimization strategy involved replacing repeated static method calls with a single call to improve performance by reducing redundant computations.",
            "The optimization strategy involved reducing redundant static method calls by caching or preloading them for faster access.",
            "The optimization strategy involved reducing redundant static method calls by caching or preloading them for faster access.",
            "The optimization strategy involved modifying the function to directly call static methods instead of using virtual method calls, reducing overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            false,
            false,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant static method calls by caching or preloading them for faster access.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "v8",
        "hash": "3bcf90c68e4b772fe3f27572e06bf0cc3cf398dd",
        "author": "Hao Xu",
        "date": "2023-02-08T03:48:59+00:00",
        "message": "[csa] Optimize BuildFastLoop\n\nAvoid generating duplicated IntPtrOrSmiAdd as loop's condition so the\ncode can be optimized:\n\nBefore:\n   2ea  REX.W leaq r12,[rsi-0x3]\n   2ee  REX.W cmpq r12,0x0\n   2f2  jg 0x7fbda01e7c94  B93,94,95,98 <+0x2d4>\n\nAfter:\n   2e6  REX.W cmpq rsi,0x3\n   2ea  jg 0x7f5cc01e7c90  B93,94,95,98 <+0x2d0>\n\nChange-Id: I127a009d0c67ce185b7ddbf3cfbcb36cbd85d446\nReviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4225830\nCommit-Queue: Hao A Xu <hao.a.xu@intel.com>\nReviewed-by: Leszek Swirski <leszeks@chromium.org>\nCr-Commit-Position: refs/heads/main@{#85716}",
        "modified_files_count": 1,
        "modified_files": [
            "src/codegen/code-stub-assembler.cc"
        ],
        "github_commit_url": "https://github.com/v8/v8/commit/3bcf90c68e4b772fe3f27572e06bf0cc3cf398dd",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CodeStubAssembler::BuildFastLoop"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy eliminates redundant IntPtrOrSmiAdd operations in loop conditions to simplify and improve the efficiency of generated assembly code.",
            "The optimization strategy eliminates redundant IntPtrOrSmiAdd operations in loop conditions by directly comparing the loop variable with a constant value.",
            "The optimization strategy eliminates redundant IntPtrOrSmiAdd operations in loop conditions by directly comparing the loop variable with a constant value.",
            "The optimization strategy eliminates redundant IntPtrOrSmiAdd operations in the loop condition to simplify and improve the generated assembly code.",
            "The optimization strategy eliminates redundant IntPtrOrSmiAdd operations in loop conditions by directly comparing the loop variable with a constant value."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            false,
            true
        ],
        "optimization_summary_final": "The optimization strategy eliminates redundant IntPtrOrSmiAdd operations in loop conditions by directly comparing the loop variable with a constant value.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "MyScaleDB",
        "hash": "4e0712207945131b9b39203cb5efcb1f77910fca",
        "author": "Azat Khuzhin",
        "date": "2022-01-28T08:08:14+03:00",
        "message": "Slightly optimize ColumnArray::get()/operator[] (by using reserve over resize)\n\nNote, that simple \"SELECT range(100)\" will execute\nColumnArray::operator[] 14 times (most of them from\nDB::checkColumnStructure())\n\nSigned-off-by: Azat Khuzhin <a.khuzhin@semrush.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/Columns/ColumnArray.cpp"
        ],
        "github_commit_url": "https://github.com/myscale/MyScaleDB/commit/4e0712207945131b9b39203cb5efcb1f77910fca",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used was replacing `resize` with `reserve` in `ColumnArray::get()`/`operator[]` to reduce unnecessary memory reallocations and improve performance.",
            "The optimization strategy used was replacing `resize` with `reserve` in `ColumnArray::get()`/`operator[]` to reduce unnecessary memory reallocations and improve performance.",
            "The optimization strategy involved replacing `resize` with `reserve` in the `ColumnArray::get()` and `operator[]` methods to reduce unnecessary memory reallocations and improve performance.",
            "The optimization strategy involved replacing `resize` with `reserve` in the `ColumnArray::get()` and `operator[]` methods to reduce unnecessary memory reallocations and improve performance.",
            "The optimization strategy involved replacing `resize` with `reserve` in the `ColumnArray::get()` and `operator[]` methods to reduce unnecessary memory reallocations and improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing `resize` with `reserve` in the `ColumnArray::get()` and `operator[]` methods to reduce unnecessary memory reallocations and improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "Floorp",
        "hash": "cf7ee570bd0c6c40c116d9b12df2286bbee9549e",
        "author": "Matthew Gaudet",
        "date": "2023-06-22T13:04:31+00:00",
        "message": "Bug 1838529 - Reserve space in the properties vector to avoid costly vector growth r=jandem\n\nOn the microbenchmark from Bug 1836679:\n\n$ hyperfine 'obj-with/dist/bin/js keys-benchmark.js' 'obj-without/dist/bin/js keys-benchmark.js'\nBenchmark 1: obj-with/dist/bin/js keys-benchmark.js\n  Time (mean ± σ):     256.9 ms ±   2.2 ms    [User: 257.9 ms, System: 8.9 ms]\n  Range (min … max):   254.3 ms … 262.5 ms    11 runs\n\nBenchmark 2: obj-without/dist/bin/js keys-benchmark.js\n  Time (mean ± σ):     349.4 ms ±   1.0 ms    [User: 351.0 ms, System: 10.0 ms]\n  Range (min … max):   347.6 ms … 350.9 ms    10 runs\n\nSummary\n  'obj-with/dist/bin/js keys-benchmark.js' ran\n    1.36 ± 0.01 times faster than 'obj-without/dist/bin/js keys-benchmark.js'\n\nDifferential Revision: https://phabricator.services.mozilla.com/D181004",
        "modified_files_count": 1,
        "modified_files": [
            "js/src/builtin/Object.cpp"
        ],
        "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/cf7ee570bd0c6c40c116d9b12df2286bbee9549e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "TryEnumerableOwnPropertiesNative"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reserving space in a vector to prevent repeated reallocations during growth.",
            "The optimization strategy involved reserving space in a vector to prevent repeated reallocations during growth.",
            "The optimization strategy involved reserving space in a vector to prevent repeated reallocations during growth.",
            "The optimization strategy involved reserving space in a vector to prevent repeated reallocations and copying during growth.",
            "The optimization strategy involved reserving space in a vector to prevent repeated reallocations and improve performance by reducing the overhead of dynamic resizing."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reserving space in a vector to prevent repeated reallocations during growth.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "dosbox-staging",
        "hash": "911684a9c0c45d3eace70b04779c372936b3ab36",
        "author": "kcgen",
        "date": "2022-01-06T11:29:08+13:00",
        "message": "Fix a performance warning in shell copy\n\nV823 Decreased performance. Object may be created\nin-place in the 'sources' container. Consider\nreplacing methods: 'push_back' -> 'emplace_back'.",
        "modified_files_count": 1,
        "modified_files": [
            "src/shell/shell_cmds.cpp"
        ],
        "github_commit_url": "https://github.com/dosbox-staging/dosbox-staging/commit/911684a9c0c45d3eace70b04779c372936b3ab36",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "DOS_Shell::CMD_COPY"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization replaced `push_back` with `emplace_back` to construct objects in-place within the `sources` container, reducing unnecessary temporary object creation and improving performance.",
            "The optimization replaced `push_back` with `emplace_back` to construct objects in-place within the `sources` container, reducing unnecessary temporary object creation and improving performance.",
            "The optimization replaced `push_back` with `emplace_back` to construct objects in-place within the `sources` container, reducing unnecessary temporary object creation and improving performance.",
            "The optimization replaced `push_back` with `emplace_back` to construct objects in-place within the `sources` container, reducing unnecessary temporary object creation.",
            "The optimization replaced `push_back` with `emplace_back` to construct objects in-place within the `sources` container, reducing unnecessary temporary object creation."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization replaced `push_back` with `emplace_back` to construct objects in-place within the `sources` container, reducing unnecessary temporary object creation and improving performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "cutter",
        "hash": "ffa52bd3e8a7581f17b694d542bed49af53f3762",
        "author": "Tim Siebels",
        "date": "2017-10-01T15:55:47+02:00",
        "message": "Fix pessimizing move (#19)\n\nmoving a return value generally is unnecessary, as it prevents return value optimization.\r\n\r\nThe standard defines, that (named) return value optimization, i.e. copy elision\r\nis only possible when returning a value from a non-volatile automatic object\r\nor when it's a temporary that has not been bound to a reference.\r\n(N)RVO is not possible when wrapping it with std::move, because the compiler\r\nis not allowed to do copy elision from arbitrary function calls.\r\n\r\nI think this was the intended purpose of this code. Also, it is cleaner.",
        "modified_files_count": 1,
        "modified_files": [
            "src/widgets/DisassemblerGraphView.h"
        ],
        "github_commit_url": "https://github.com/rizinorg/cutter/commit/ffa52bd3e8a7581f17b694d542bed49af53f3762",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ToQString"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization removes an unnecessary `std::move` to enable return value optimization (RVO) by adhering to conditions where copy elision is allowed.",
            "The optimization removes an unnecessary `std::move` to enable return value optimization (RVO) by adhering to conditions where copy elision is allowed.",
            "The optimization removes an unnecessary `std::move` to enable return value optimization (RVO) by adhering to the conditions required for copy elision.",
            "The optimization removes an unnecessary `std::move` to enable return value optimization (RVO) by adhering to the conditions required for copy elision.",
            "The optimization removes an unnecessary `std::move` to enable return value optimization (RVO) by adhering to the conditions required for copy elision."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization removes an unnecessary `std::move` to enable return value optimization (RVO) by adhering to the conditions required for copy elision.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "llvm-leg",
        "hash": "880ddb018a4bdcff00d35f28988d9eddb557b8e6",
        "author": "Chris Lattner",
        "date": "2006-08-02T00:14:16+00:00",
        "message": "Speed up Loop::isLCSSAForm by using a binary search and single-entry cache.\n\nThis reduces LCSSA pass time from 1.5s to 0.96s when run on eon in release+asserts mode.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/llvm/trunk@29464 91177308-0d34-0410-b5e6-96231b3b80d8",
        "modified_files_count": 1,
        "modified_files": [
            "lib/Analysis/LoopInfo.cpp"
        ],
        "github_commit_url": "https://github.com/frasercrmck/llvm-leg/commit/880ddb018a4bdcff00d35f28988d9eddb557b8e6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Loop::isLCSSAForm"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used is to replace a linear search with a binary search and introduce a single-entry cache to reduce the time complexity of lookups in the `Loop::isLCSSAForm` function.",
            "The optimization strategy used is to replace a linear search with a binary search and introduce a single-entry cache to reduce the time complexity of lookups in the `Loop::isLCSSAForm` function.",
            "The optimization strategy used is to replace a linear search with a binary search and introduce a single-entry cache to reduce the time complexity of lookups in the `Loop::isLCSSAForm` function.",
            "The optimization strategy used is to replace a linear search with a binary search and introduce a single-entry cache to reduce the time complexity of lookups in the `Loop::isLCSSAForm` function.",
            "The optimization strategy used is to replace a linear search with a binary search and introduce a single-entry cache to reduce the time complexity of lookups in the `Loop::isLCSSAForm` function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is to replace a linear search with a binary search and introduce a single-entry cache to reduce the time complexity of lookups in the `Loop::isLCSSAForm` function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "MyFlash",
        "hash": "957ea43f078b08d9dc4610c1a53418221da06a74",
        "author": "root",
        "date": "2019-04-19T09:11:24+08:00",
        "message": "[optimization] performance issue when a lot of event get",
        "modified_files_count": 1,
        "modified_files": [
            "source/binlogParseGlib.c"
        ],
        "github_commit_url": "https://github.com/Meituan-Dianping/MyFlash/commit/957ea43f078b08d9dc4610c1a53418221da06a74",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "constructLeastExecutionUnitFromAllEventsList"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant iterations or computations when processing a large number of events in the `constructLeastExecutionUnitFromAllEventsList` function.",
            "The optimization strategy involved reducing redundant iterations or operations when processing a large number of events in the `constructLeastExecutionUnitFromAllEventsList` function.",
            "The optimization strategy involved restructuring the loop to minimize redundant computations and improve iteration efficiency.",
            "The optimization strategy involved restructuring the loop to minimize redundant computations and improve iteration efficiency.",
            "The optimization strategy involved restructuring the loop to minimize redundant computations and improve iteration efficiency."
        ],
        "is_generic_optimization": [
            false,
            false,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved restructuring the loop to minimize redundant computations and improve iteration efficiency.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "Octave",
        "hash": "ee4caeda308c09b3d23a69d5a479498737d5808c",
        "author": "Rik",
        "date": "2017-03-19T13:27:30-07:00",
        "message": "Improve performance of dlmread by pre-allocating larger array (bug #50102).\n\n* dlmread.cc (Fdlmread): Increase rmax, max number of rows, in powers of 2 to\navoid constant re-sizing of output matrix.",
        "modified_files_count": 1,
        "modified_files": [
            "libinterp/corefcn/dlmread.cc"
        ],
        "github_commit_url": "https://github.com/NexMirror/Octave/commit/ee4caeda308c09b3d23a69d5a479498737d5808c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "DEFUN"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used was to pre-allocate the output matrix in powers of 2 to reduce the overhead of frequent resizing during dynamic growth.",
            "The optimization strategy used is pre-allocating a larger array in powers of 2 to reduce the overhead of constant resizing during matrix growth.",
            "The optimization strategy used was to pre-allocate the output matrix in powers of 2 to reduce the overhead of frequent resizing during dynamic growth.",
            "The optimization strategy used was to pre-allocate the output matrix in powers of 2 to reduce the overhead of frequent resizing during dynamic growth.",
            "The optimization strategy used was to pre-allocate the output matrix in powers of 2 to reduce the overhead of frequent resizing during dynamic growth."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used was to pre-allocate the output matrix in powers of 2 to reduce the overhead of frequent resizing during dynamic growth.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "net-snmp",
        "hash": "6c621c010009b92471bd250799aa1e70a22072f9",
        "author": "Bart Van Assche",
        "date": "2022-10-16T16:05:10-07:00",
        "message": "libsnmp: Optimize asn_build_unsigned_int64()\n\nUse a single 64-bit integer instead of two 32-bit integers to store the\nvalue being encoded.",
        "modified_files_count": 1,
        "modified_files": [
            "snmplib/asn1.c"
        ],
        "github_commit_url": "https://github.com/net-snmp/net-snmp/commit/6c621c010009b92471bd250799aa1e70a22072f9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "object"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used was to replace two 32-bit integers with a single 64-bit integer to reduce the complexity and improve the efficiency of encoding large values.",
            "The optimization strategy used was to replace two 32-bit integers with a single 64-bit integer to reduce storage and processing overhead during encoding.",
            "The optimization strategy used was to replace two 32-bit integers with a single 64-bit integer to reduce the complexity and improve the efficiency of encoding large values.",
            "The optimization strategy used was to replace two 32-bit integers with a single 64-bit integer to reduce storage and simplify encoding operations.",
            "The optimization strategy used was to replace two 32-bit integers with a single 64-bit integer to reduce the complexity and improve the efficiency of encoding operations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used was to replace two 32-bit integers with a single 64-bit integer to reduce the complexity and improve the efficiency of encoding operations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "ewig",
        "hash": "618671dc7c20941921d7170666a119ed5009e43d",
        "author": "Juan Pedro Bolivar Puente",
        "date": "2017-04-11T10:06:25+02:00",
        "message": "Make code build with new immer changes\n\nAlso use the new `immer::copy` function for improved performance.",
        "modified_files_count": 1,
        "modified_files": [
            "src/ewig/main.cpp"
        ],
        "github_commit_url": "https://github.com/arximboldi/ewig/commit/618671dc7c20941921d7170666a119ed5009e43d",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved adopting the new `immer::copy` function to enhance performance by leveraging improved copy semantics.",
            "The optimization strategy involved adopting the new `immer::copy` function to enhance performance by leveraging its improved implementation.",
            "The optimization strategy involved adopting the new `immer::copy` function to enhance performance by leveraging its improved implementation.",
            "The optimization strategy involved adopting the new `immer::copy` function to enhance performance by leveraging its improved implementation.",
            "The optimization strategy involved adopting the new `immer::copy` function to enhance performance by leveraging its improved implementation."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved adopting the new `immer::copy` function to enhance performance by leveraging its improved implementation.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "sysrepo",
        "hash": "88863fcecaa51c4563434e52b22dc2387d13279d",
        "author": "Michal Vasko",
        "date": "2024-12-17T15:19:08+01:00",
        "message": "edit diff OPTIMIZE do not duplicate origin",
        "modified_files_count": 1,
        "modified_files": [
            "src/edit_diff.c"
        ],
        "github_commit_url": "https://github.com/sysrepo/sysrepo/commit/88863fcecaa51c4563434e52b22dc2387d13279d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "sr_edit_diff_set_origin"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids duplicating the origin string by directly assigning it instead of creating a copy.",
            "The optimization avoids duplicating the origin string by directly assigning it instead of creating a copy.",
            "The optimization avoids duplicating the origin string by directly assigning it instead of creating a copy.",
            "The optimization avoids duplicating the origin string by directly assigning it instead of creating a copy.",
            "The optimization avoids duplicating the origin string by directly assigning it instead of creating a copy."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids duplicating the origin string by directly assigning it instead of creating a copy.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "PhotoshopAPI",
        "hash": "b493e23067e1243456e807fb95dca621c2c66094",
        "author": "EmilDohne",
        "date": "2024-02-05T15:57:51+01:00",
        "message": "optimize RLE decompression slightly",
        "modified_files_count": 1,
        "modified_files": [
            "PhotoshopAPI/src/Util/Compression/RLE.h"
        ],
        "github_commit_url": "https://github.com/EmilDohne/PhotoshopAPI/commit/b493e23067e1243456e807fb95dca621c2c66094",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "DecompressPackBits"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant memory accesses during RLE decompression by reusing previously computed values.",
            "The optimization strategy involved replacing a loop with a more efficient bitwise operation to reduce computational overhead during RLE decompression.",
            "The optimization strategy involved replacing a loop with a more efficient bitwise operation to reduce computational overhead during RLE decompression.",
            "The optimization strategy involved replacing a loop with a more efficient bitwise operation to reduce computational overhead during RLE decompression.",
            "The optimization strategy involved reducing redundant memory accesses during RLE decompression by reusing previously computed values."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a loop with a more efficient bitwise operation to reduce computational overhead during RLE decompression.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "cmssw",
        "hash": "3e65652444b6e2df73f5acb813f4b4d1136ae81a",
        "author": "Vincenzo Innocente",
        "date": "2012-09-16T10:49:28+00:00",
        "message": "% faster then lookup",
        "modified_files_count": 1,
        "modified_files": [
            "Geometry/TrackerGeometryBuilder/interface/RectangularPixelTopology.h"
        ],
        "github_commit_url": "https://github.com/cms-sw/cmssw/commit/3e65652444b6e2df73f5acb813f4b4d1136ae81a",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "isItBigPixelInY"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a lookup-based check with a direct conditional comparison to improve performance.",
            "The optimization strategy used is replacing a lookup-based check with a direct conditional comparison to improve performance.",
            "The optimization strategy involved replacing a lookup operation with a direct comparison to improve performance.",
            "The optimization strategy used is replacing a lookup operation with a direct comparison to improve performance.",
            "The optimization strategy used is replacing a lookup-based check with a direct conditional comparison to improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is replacing a lookup-based check with a direct conditional comparison to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "parallel-n64",
        "hash": "f0accf683ecf8e5056c08ce927af084ba7e218f0",
        "author": "unknown",
        "date": "2015-07-28T14:56:16-04:00",
        "message": "Decode register specifier `rs` only when necessary (faster NOP).",
        "modified_files_count": 1,
        "modified_files": [
            "mupen64plus-rsp-cxd4/execute.h"
        ],
        "github_commit_url": "https://github.com/libretro/parallel-n64/commit/f0accf683ecf8e5056c08ce927af084ba7e218f0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "run_task"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy avoids decoding the register specifier `rs` unless it is necessary, reducing redundant operations for faster execution of NOP instructions.",
            "The optimization strategy involves decoding the register specifier `rs` only when necessary, reducing unnecessary operations for faster NOP execution.",
            "The optimization strategy involves decoding the register specifier `rs` only when necessary, reducing unnecessary operations for faster NOP execution.",
            "The optimization strategy involves decoding the register specifier `rs` only when necessary, reducing unnecessary operations for NOP instructions.",
            "The optimization strategy involves conditionally decoding the register specifier `rs` only when it is necessary, reducing unnecessary operations for NOP instructions."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involves decoding the register specifier `rs` only when necessary, reducing unnecessary operations for NOP instructions.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "scribus",
        "hash": "551a34ccf2da24852acce3feae808ed1c30550d9",
        "author": "Jean Ghali",
        "date": "2021-12-15T23:23:55+00:00",
        "message": "Small performance optimization\n\ngit-svn-id: svn://scribus.net/trunk/Scribus@24780 11d20701-8431-0410-a711-e3c959e3b870",
        "modified_files_count": 1,
        "modified_files": [
            "scribus/util_text.cpp"
        ],
        "github_commit_url": "https://github.com/scribusproject/scribus/commit/551a34ccf2da24852acce3feae808ed1c30550d9",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The commit likely involved a generic optimization such as loop restructuring or condition reordering to improve performance without altering functionality.",
            "The commit message and details are unavailable, so the optimization strategy cannot be determined.",
            "The commit likely implemented a generic optimization by reducing unnecessary computations or improving loop efficiency in the `util_text.cpp` file.",
            "The commit likely involved a generic optimization such as replacing expensive operations with cheaper alternatives or reducing redundant computations in a function.",
            "The commit message and details are unavailable, so the optimization strategy cannot be determined."
        ],
        "is_generic_optimization": [
            true,
            false,
            true,
            true,
            false
        ],
        "optimization_summary_final": "The commit likely involved a generic optimization such as loop restructuring or condition reordering to improve performance without altering functionality.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "5b2f6d9cd50b1c8909326c7175aef288a9915f33",
        "author": "Denton Liu",
        "date": "2020-04-07T16:57:30-07:00",
        "message": "sequencer: make file exists check more efficient\n\nWe currently check whether a file exists and return early before reading\nthe file. Instead of accessing the file twice, always read the file and\ncheck `errno` to see if the file doesn't exist.\n\nSigned-off-by: Denton Liu <liu.denton@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
        "modified_files_count": 1,
        "modified_files": [
            "sequencer.c"
        ],
        "github_commit_url": "https://github.com/git/git/commit/5b2f6d9cd50b1c8909326c7175aef288a9915f33",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "read_oneliner"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "git",
        "optimization_summary": [
            "The optimization strategy reduces file system calls by reading the file directly and checking `errno` instead of performing a separate existence check.",
            "The optimization strategy reduces file system calls by reading the file directly and checking `errno` instead of performing a separate existence check.",
            "The optimization strategy reduces file system calls by reading the file directly and checking `errno` instead of performing a separate existence check.",
            "The optimization strategy reduces file system calls by reading the file directly and checking `errno` instead of performing a separate existence check.",
            "The optimization strategy reduces file system calls by reading the file directly and checking `errno` instead of performing a separate existence check."
        ],
        "is_generic_optimization": [
            true,
            true,
            false,
            false,
            true
        ],
        "optimization_summary_final": "The optimization strategy reduces file system calls by reading the file directly and checking `errno` instead of performing a separate existence check.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "gcc",
        "hash": "c7fd6c4369ef1a009b40c1787ea9d2dad2cf449f",
        "author": "Andrew MacLeod",
        "date": "2024-12-06T16:41:19-05:00",
        "message": "Only add inferred ranges if they change the value.\n\nDo not add an inferred range if it is already incorprated in the\ncurrent range of an SSA_NAME.\n\n\tPR tree-optimization/117467\n\t* gimple-range-infer.cc (infer_range_manager::add_ranges): Check\n\trange_of_expr to see if the inferred range is needed.",
        "modified_files_count": 1,
        "modified_files": [
            "gcc/gimple-range-infer.cc"
        ],
        "github_commit_url": "https://github.com/gcc-mirror/gcc/commit/c7fd6c4369ef1a009b40c1787ea9d2dad2cf449f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "infer_range_manager::add_ranges"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids adding redundant inferred ranges by checking if they are already incorporated in the current range of an SSA_NAME.",
            "The optimization avoids adding redundant inferred ranges by checking if they are already incorporated in the current range of an SSA_NAME.",
            "The optimization avoids adding redundant inferred ranges by checking if they are already incorporated in the current range of an SSA_NAME.",
            "The optimization avoids adding redundant inferred ranges by checking if they are already incorporated in the current range of an SSA_NAME.",
            "The optimization avoids adding redundant inferred ranges by checking if they are already incorporated in the current range of an SSA_NAME."
        ],
        "is_generic_optimization": [
            false,
            true,
            false,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids adding redundant inferred ranges by checking if they are already incorporated in the current range of an SSA_NAME.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "KeyDB",
        "hash": "61ba83b75b6cf3d9b11069cc78a60aeb355d9785",
        "author": "antirez",
        "date": "2014-05-07T16:12:32+02:00",
        "message": "Scripting: simpler reply buffer creation in luaRedisGenericCommand().\n\nIt if faster to just create the string with a single sdsnewlen() call.\nIf c->bufpos is zero, the call will simply be like sdsemtpy().",
        "modified_files_count": 1,
        "modified_files": [
            "src/scripting.c"
        ],
        "github_commit_url": "https://github.com/Snapchat/KeyDB/commit/61ba83b75b6cf3d9b11069cc78a60aeb355d9785",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "luaRedisGenericCommand"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used is to replace multiple string creation operations with a single `sdsnewlen()` call to reduce overhead and improve performance.",
            "The optimization strategy used is to replace multiple string creation operations with a single `sdsnewlen()` call to reduce overhead and improve performance.",
            "The optimization strategy simplifies reply buffer creation by using a single `sdsnewlen()` call instead of multiple operations, reducing overhead when `c->bufpos` is zero.",
            "The optimization strategy used is to replace multiple string creation operations with a single `sdsnewlen()` call to reduce overhead and improve performance.",
            "The optimization strategy simplifies reply buffer creation by using a single `sdsnewlen()` call instead of multiple operations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is to replace multiple string creation operations with a single `sdsnewlen()` call to reduce overhead and improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "stress-ng",
        "hash": "1b7ce6062adbf0ea37140dd1cafd9131ee4d63a9",
        "author": "Colin Ian King",
        "date": "2021-01-24T13:09:45+00:00",
        "message": "Force keep_stressing_flag to always be inlined\n\nperf is showing that the helper function in some cases is not being\ninlined and resulting in a performance impact on call/returns. Force\nit to be inlined.\n\nSigned-off-by: Colin Ian King <colin.king@canonical.com>",
        "modified_files_count": 1,
        "modified_files": [
            "stress-ng.h"
        ],
        "github_commit_url": "https://github.com/ColinIanKing/stress-ng/commit/1b7ce6062adbf0ea37140dd1cafd9131ee4d63a9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "keep_stressing_flag"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization forces the inlining of the `keep_stressing_flag` function to eliminate call/return overhead and improve performance.",
            "The optimization forces the inlining of the `keep_stressing_flag` function to eliminate call/return overhead.",
            "The optimization forces the inlining of the `keep_stressing_flag` function to eliminate call/return overhead.",
            "The optimization strategy forces the inlining of the `keep_stressing_flag` function to eliminate call/return overhead and improve performance.",
            "The optimization forces the inlining of the `keep_stressing_flag` function to eliminate call/return overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization forces the inlining of the `keep_stressing_flag` function to eliminate call/return overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "dte",
        "hash": "3ad41d654c936bc81e092ffd98ecaedcb643d850",
        "author": "Craig Barnes",
        "date": "2023-02-22T10:25:47+00:00",
        "message": "Implement get_indent_width() without using get_indent_info()\n\nThis makes the generated code considerably more efficient.",
        "modified_files_count": 1,
        "modified_files": [
            "src/indent.c"
        ],
        "github_commit_url": "https://github.com/craigbarnes/dte/commit/3ad41d654c936bc81e092ffd98ecaedcb643d850",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "get_indent_width"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved simplifying the function by directly calculating the indent width without relying on an intermediate function call.",
            "The optimization strategy involved simplifying the function by directly calculating the indent width without relying on an intermediate function call.",
            "The optimization strategy involved simplifying the function logic by directly calculating the indentation width without relying on an intermediate function call.",
            "The optimization strategy involved simplifying the function by directly calculating the indentation width without relying on an intermediate function call.",
            "The optimization strategy involved simplifying the function by directly calculating the indentation width without relying on an intermediate function call."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved simplifying the function by directly calculating the indentation width without relying on an intermediate function call.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "FastDoom",
        "hash": "3debe3a8ecea6186375a54ee7a93282fd98fcf17",
        "author": "viti95",
        "date": "2021-03-24T22:19:02+01:00",
        "message": "Small optimization for 16 colors LUT calculation",
        "modified_files_count": 1,
        "modified_files": [
            "i_ibm.c"
        ],
        "github_commit_url": "https://github.com/viti95/FastDoom/commit/3debe3a8ecea6186375a54ee7a93282fd98fcf17",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "I_SetPalette"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved simplifying the logic for calculating a 16-color lookup table to reduce unnecessary computations.",
            "The optimization strategy involved simplifying the logic for calculating a 16-color lookup table to reduce unnecessary computations.",
            "The optimization strategy involved replacing a multiplication operation with a bit shift to improve the efficiency of calculating lookup table indices for 16-color palettes.",
            "The optimization strategy involved simplifying the logic for calculating a 16-color lookup table (LUT) by reducing redundant operations or iterations.",
            "The optimization strategy involved replacing a multiplication operation with a bit shift to improve the efficiency of calculating lookup table indices for 16-color palettes."
        ],
        "is_generic_optimization": [
            true,
            false,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved simplifying the logic for calculating a 16-color lookup table to reduce unnecessary computations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "mppp",
        "hash": "0dad166a5c9bc7092f99e55baaec235d077db9ab",
        "author": "Francesco Biscani",
        "date": "2017-07-03T22:56:36+02:00",
        "message": "Improve test performance by avoiding string conversions.",
        "modified_files_count": 1,
        "modified_files": [
            "test/integer_arith.cpp"
        ],
        "github_commit_url": "https://github.com/bluescarni/mppp/commit/0dad166a5c9bc7092f99e55baaec235d077db9ab",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy avoids unnecessary string conversions in tests to improve performance.",
            "The optimization strategy avoids unnecessary string conversions in tests to improve performance.",
            "The optimization strategy involved eliminating unnecessary string conversions in test cases to improve performance.",
            "The optimization strategy avoids unnecessary string conversions in test cases to improve performance.",
            "The optimization strategy avoids unnecessary string conversions in tests to improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy avoids unnecessary string conversions in tests to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "Floorp",
        "hash": "d4346abfe3871e36bac55487d968502db1471545",
        "author": "Jonathan Kew",
        "date": "2017-09-20T10:10:01+01:00",
        "message": "Bug 1377515 - Use GetFontTable rather than CopyFontTable in gfxDWriteFontEntry::IsCJKFont() to try and avoid copying. r=bas",
        "modified_files_count": 1,
        "modified_files": [
            "gfx/thebes/gfxDWriteFontList.cpp"
        ],
        "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/d4346abfe3871e36bac55487d968502db1471545",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "gfxDWriteFontEntry::IsCJKFont"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a function that copies font table data with one that retrieves it directly to avoid unnecessary memory copying.",
            "The optimization strategy involved replacing a function that copies font table data with one that retrieves it directly to avoid unnecessary memory copying.",
            "The optimization strategy involved replacing a function that copies font table data with one that retrieves it directly to reduce memory overhead.",
            "The optimization strategy involved replacing a function that copies font table data with one that retrieves it directly to avoid unnecessary memory copying.",
            "The optimization strategy involved replacing a function that copies font table data with one that retrieves it directly to avoid unnecessary memory copying."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a function that copies font table data with one that retrieves it directly to avoid unnecessary memory copying.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "0e4ca37c2581f6e449c193612e77657c4dd87865",
        "author": "Niclas Schwalbe",
        "date": "2021-11-07T14:50:07+08:00",
        "message": "[misc] Update \"get_largest_pot\" in scalar.h + Bug Fix (#3405)\n\n* Update scalar.h\r\n\r\nFind the largest potence faster.\r\n\r\n* Update scalar.h\r\n\r\n* Update scalar.h\r\n\r\nFixed a bug\r\n\r\n* Update scalar.h\r\n\r\nManually edited formatting errors.\r\n\r\n* Update scalar.h\r\n\r\nretry workflow\r\n\r\n* Create scalar.h\r\n\r\nretry workflow",
        "modified_files_count": 1,
        "modified_files": [
            "taichi/math/scalar.h"
        ],
        "github_commit_url": "https://github.com/taichi-dev/taichi/commit/0e4ca37c2581f6e449c193612e77657c4dd87865",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "get_largest_pot"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "taichi",
        "optimization_summary": [
            "The optimization strategy used is to improve the efficiency of finding the largest power of two by reducing unnecessary computations.",
            "The optimization strategy used is to improve the efficiency of finding the largest power of two by reducing unnecessary computations.",
            "The optimization strategy used is to improve the efficiency of finding the largest power of two by reducing unnecessary computations.",
            "The optimization strategy used is to improve the efficiency of finding the largest power of two by reducing unnecessary computations.",
            "The optimization strategy used is to improve the efficiency of finding the largest power of two by reducing unnecessary computations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is to improve the efficiency of finding the largest power of two by reducing unnecessary computations.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "3e9ba6684d5ac9c48a1741566b1c1ce781e77125",
        "author": "Milian Wolff",
        "date": "2013-09-24T18:51:33+02:00",
        "message": "Optimize ConnectionModel::connectionRemoved by two orders of magnitude\n\nQVector in Qt4 does not move objects when erasing, even though\nConnection is marked as movable. To workaround this issue, we swap\nwith the last entry and pop from the back which is cheap.\n\n********* Start testing of GammaRay::BenchSuite *********\nConfig: Using QTest library 4.8.5, Qt 4.8.5\nPASS   : GammaRay::BenchSuite::initTestCase()\nRESULT : GammaRay::BenchSuite::connectionModel_connectionRemoved():\n     95 msecs per iteration (total: 95, iterations: 1)\nPASS   : GammaRay::BenchSuite::connectionModel_connectionRemoved()\nPASS   : GammaRay::BenchSuite::cleanupTestCase()\nTotals: 3 passed, 0 failed, 0 skipped\n********* Finished testing of GammaRay::BenchSuite *********\n\n Performance counter stats for './bin/benchsuite connectionModel_connectionRemoved':\n\n        404.448500 task-clock                #    0.991 CPUs utilized\n               112 context-switches          #    0.277 K/sec\n                 6 cpu-migrations            #    0.015 K/sec\n            12,756 page-faults               #    0.032 M/sec\n     1,138,930,126 cycles                    #    2.816 GHz                     [49.29%]\n   <not supported> stalled-cycles-frontend\n   <not supported> stalled-cycles-backend\n     1,464,750,989 instructions              #    1.29  insns per cycle         [74.73%]\n       367,314,247 branches                  #  908.185 M/sec                   [75.32%]\n         4,651,435 branch-misses             #    1.27% of all branches         [75.41%]\n\n       0.408093680 seconds time elapsed",
        "modified_files_count": 1,
        "modified_files": [
            "core/connectionmodel.cpp"
        ],
        "github_commit_url": "https://github.com/KDAB/GammaRay/commit/3e9ba6684d5ac9c48a1741566b1c1ce781e77125",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ConnectionModel::connectionRemovedMainThread"
        ],
        "is_opt_ds": "true",
        "is_opt_ds_simple": "true",
        "repository_name": "GammaRay",
        "optimization_summary": [
            "The optimization strategy used is replacing the erase operation with a swap-and-pop approach to avoid the overhead of shifting elements in a QVector.",
            "The optimization strategy used is replacing the erase operation with a swap-and-pop approach to avoid expensive element shifting in QVector.",
            "The optimization strategy used is replacing the erase operation with a swap-and-pop approach to avoid expensive element shifting in QVector.",
            "The optimization strategy used is replacing the erase operation with a swap-and-pop approach to avoid expensive object shifting in QVector.",
            "The optimization strategy used is replacing the erase operation with a swap-and-pop approach to avoid expensive element shifting in QVector."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is replacing the erase operation with a swap-and-pop approach to avoid expensive element shifting in QVector.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "otter-browser",
        "hash": "8dda7673a6f5bdd2d1277ede696b57499e1b9bc3",
        "author": "Michał Dutkiewicz",
        "date": "2017-05-31T21:16:35+02:00",
        "message": "Add missing optimization flag",
        "modified_files_count": 1,
        "modified_files": [
            "src/modules/windows/passwords/PasswordsContentsWidget.cpp"
        ],
        "github_commit_url": "https://github.com/OtterBrowser/otter-browser/commit/8dda7673a6f5bdd2d1277ede696b57499e1b9bc3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "PasswordsContentsWidget::populatePasswords"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved adding a missing compiler optimization flag to improve the performance of the `populatePasswords` function.",
            "The optimization strategy involved adding a missing compiler optimization flag to improve the performance of the `populatePasswords` function.",
            "The optimization strategy involved adding a missing compiler optimization flag to improve the performance of the `populatePasswords` function.",
            "The optimization strategy involved adding a missing compiler optimization flag to improve the performance of the `populatePasswords` function.",
            "The optimization strategy involved adding a missing compiler optimization flag to improve the performance of the `populatePasswords` function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved adding a missing compiler optimization flag to improve the performance of the `populatePasswords` function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "stockfish.wasm",
        "hash": "68fbb1e0522056e0ab8062fe68c26b3af5cffed3",
        "author": "mstembera",
        "date": "2015-09-17T17:33:40-07:00",
        "message": "Reduce writes in TT::probe().\n\nOnly refresh TT entry when it's really necessary.\nThis should give a small speed boost for some machines.\nAnd it's a risk-free change.\n\nNo functional change.\n\nResolves #429",
        "modified_files_count": 1,
        "modified_files": [
            "src/tt.cpp"
        ],
        "github_commit_url": "https://github.com/lichess-org/stockfish.wasm/commit/68fbb1e0522056e0ab8062fe68c26b3af5cffed3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "TranspositionTable::probe"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy reduces unnecessary writes to the transposition table by refreshing entries only when necessary, minimizing memory operations for speed improvement.",
            "The optimization strategy reduces unnecessary writes to the transposition table by refreshing entries only when necessary, minimizing memory operations for performance improvement.",
            "The optimization strategy reduces unnecessary writes to the transposition table by refreshing entries only when necessary, minimizing memory operations for performance improvement.",
            "The optimization strategy reduces unnecessary writes to the transposition table by refreshing entries only when necessary, minimizing memory operations for potential speed gains.",
            "The optimization strategy reduces unnecessary writes to the transposition table by refreshing entries only when necessary, minimizing memory operations for speed improvement."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy reduces unnecessary writes to the transposition table by refreshing entries only when necessary, minimizing memory operations for speed improvement.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "zstd",
        "hash": "1bee2d5e08208b01e496efa55c36c28422eaf35f",
        "author": "Yann Collet",
        "date": "2016-08-20T02:59:04+02:00",
        "message": "slight decompression speed improvement",
        "modified_files_count": 1,
        "modified_files": [
            "lib/decompress/zstd_decompress.c"
        ],
        "github_commit_url": "https://github.com/facebook/zstd/commit/1bee2d5e08208b01e496efa55c36c28422eaf35f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ZSTD_execSequence"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved restructuring the decompression loop to reduce branch mispredictions and improve instruction cache utilization.",
            "The optimization strategy involved reducing unnecessary memory operations by reordering and minimizing data movement within the decompression sequence execution.",
            "The optimization strategy involved restructuring the decompression loop to reduce branch mispredictions and improve instruction-level parallelism.",
            "The optimization strategy involved reducing unnecessary memory operations by reordering and minimizing data movement within the decompression loop.",
            "The optimization strategy involved reducing unnecessary memory operations by reusing previously computed values within the decompression loop."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing unnecessary memory operations by reordering and minimizing data movement within the decompression loop.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "php-src",
        "hash": "5d20a8f80193685877ae3c57e676240e6f2384b3",
        "author": "Felipe Pena",
        "date": "2011-07-10T02:00:00+00:00",
        "message": "- Minor optimization, use the computed hash when available",
        "modified_files_count": 1,
        "modified_files": [
            "Zend/zend_API.c"
        ],
        "github_commit_url": "https://github.com/php/php-src/commit/5d20a8f80193685877ae3c57e676240e6f2384b3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "zend_register_functions"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reusing a precomputed hash value instead of recalculating it, reducing redundant computations.",
            "The optimization strategy involves reusing a precomputed hash value instead of recalculating it, reducing redundant computations.",
            "The optimization strategy involved reusing a precomputed hash value instead of recalculating it when registering functions.",
            "The optimization strategy involved reusing a precomputed hash value instead of recalculating it, reducing redundant computations.",
            "The optimization avoids recomputing a hash by reusing a precomputed value when available."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reusing a precomputed hash value instead of recalculating it, reducing redundant computations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "cel-cpp",
        "hash": "bf7c7913a23289a2ead345fa45083b1cda5875ba",
        "author": "Justin King",
        "date": "2024-02-09T12:57:09-08:00",
        "message": "Avoid copying from the value stack in `container_access_step.cc`\n\nPiperOrigin-RevId: 605708781",
        "modified_files_count": 1,
        "modified_files": [
            "eval/eval/container_access_step.cc"
        ],
        "github_commit_url": "https://github.com/google/cel-cpp/commit/bf7c7913a23289a2ead345fa45083b1cda5875ba",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids unnecessary copying from the value stack by directly accessing or referencing the data in `container_access_step.cc`.",
            "The optimization strategy avoids unnecessary copying from the value stack by directly accessing or referencing the data.",
            "The optimization avoids unnecessary copying from the value stack by directly accessing or referencing the data.",
            "The optimization avoids unnecessary copying from the value stack by directly accessing or referencing the data.",
            "The optimization strategy avoids unnecessary copying from the value stack by directly accessing or referencing the data."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary copying from the value stack by directly accessing or referencing the data.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "qrack",
        "hash": "4c9edd9f1956aa133b71aeabc878fef9ba4b1c30",
        "author": "Dan Strano",
        "date": "2023-06-12T09:04:25-04:00",
        "message": "Optimize QStabilizerHybrid::ForceM()",
        "modified_files_count": 1,
        "modified_files": [
            "src/qstabilizerhybrid.cpp"
        ],
        "github_commit_url": "https://github.com/unitaryfund/qrack/commit/4c9edd9f1956aa133b71aeabc878fef9ba4b1c30",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "IS_SAME"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used is to reduce redundant calculations by caching and reusing intermediate results within the function.",
            "The optimization strategy used is to reduce redundant calculations by caching and reusing intermediate results within the function.",
            "The optimization strategy used is to reduce redundant calculations by caching and reusing results within the function.",
            "The optimization strategy used is to reduce redundant calculations by caching and reusing results within the function.",
            "The optimization strategy used is to reduce redundant calculations by caching and reusing results within the function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is to reduce redundant calculations by caching and reusing results within the function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "kicad-source-mirror",
        "hash": "21900ad3e13e8533e85f4c2c21c4e56c1de9bb65",
        "author": "Seth Hillbrand",
        "date": "2024-07-21T07:23:00-07:00",
        "message": "Maintain std::move to avoid copy penalty\n\nCaching lib models is a slow point when loading libraries when many\nfootprints have embedded models.  We want to speed this by not copying\ndata unneccesarily.  Some compilers will invalidate the models structure\nright-to-left in the function call (the order is unspecified by the\nstandard), leading to broken model names unless we cache the name before\nhand.",
        "modified_files_count": 1,
        "modified_files": [
            "pcbnew/pcb_io/altium/altium_pcb_compound_file.cpp"
        ],
        "github_commit_url": "https://github.com/KiCad/kicad-source-mirror/commit/21900ad3e13e8533e85f4c2c21c4e56c1de9bb65",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ALTIUM_PCB_COMPOUND_FILE::CacheLibModels"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy avoids unnecessary data copying by maintaining `std::move` semantics during function calls.",
            "The optimization strategy avoids unnecessary data copying by maintaining `std::move` semantics during function calls to improve performance when caching library models.",
            "The optimization strategy avoids unnecessary data copying by maintaining `std::move` semantics during function calls, ensuring efficient handling of model names.",
            "The optimization strategy avoids unnecessary data copying by maintaining `std::move` semantics during function calls, ensuring efficient handling of model names.",
            "The optimization strategy avoids unnecessary data copying by maintaining `std::move` semantics, ensuring efficient handling of model names during library caching."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy avoids unnecessary data copying by maintaining `std::move` semantics during function calls, ensuring efficient handling of model names.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "ceph",
        "hash": "f5a7a3b1dc4088be4ca1a845832c76e60446ba64",
        "author": "Piotr Dałek",
        "date": "2015-12-07T14:26:33+01:00",
        "message": "mon/MonitorDBStore: use single-key LevelDB::get() method\n\nMake MonitorDBStore use single-key ::get() method for some performance\nincrease in heavy K/V workloads.\n\nSigned-off-by: Piotr Dałek <piotr.dalek@ts.fujitsu.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/mon/MonitorDBStore.h"
        ],
        "github_commit_url": "https://github.com/ceph/ceph/commit/f5a7a3b1dc4088be4ca1a845832c76e60446ba64",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "get"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a multi-key retrieval method with a single-key retrieval method in LevelDB to improve performance for heavy key/value workloads.",
            "The optimization strategy involved replacing a potentially less efficient key-value retrieval method with a direct single-key LevelDB::get() call to improve performance in heavy key/value workloads.",
            "The optimization strategy involved replacing a potentially less efficient key-value retrieval method with a direct single-key LevelDB::get() call to improve performance in heavy workloads.",
            "The optimization strategy involved replacing a potentially less efficient key-value retrieval method with a direct single-key LevelDB::get() call to improve performance in heavy workloads.",
            "The optimization strategy involved replacing a multi-key retrieval method with a single-key retrieval method in LevelDB to improve performance for heavy key-value workloads."
        ],
        "is_generic_optimization": [
            false,
            true,
            true,
            true,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a potentially less efficient key-value retrieval method with a direct single-key LevelDB::get() call to improve performance in heavy workloads.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "hhvm",
        "hash": "a5cbc97a81c4f50212c2fd8feccb1c31b812c179",
        "author": "Nicolas De Carli",
        "date": "2024-12-06T02:54:23-08:00",
        "message": "Optimize writeVarintSlow for aarch64\n\nSummary:\nCompress writeVarintSlow into a loop.\n\nBenchmarks show 1% to 25% improvement, depending on the case.\n\nBefore: P1687797106\n\nAfter: P1687797268\n\nReviewed By: psaab\n\nDifferential Revision: D66547873\n\nfbshipit-source-id: f4f6084818c807371eb47eb32da7629424de00f1",
        "modified_files_count": 1,
        "modified_files": [
            "third-party/thrift/src/thrift/lib/cpp/util/VarintUtils-inl.h"
        ],
        "github_commit_url": "https://github.com/facebook/hhvm/commit/a5cbc97a81c4f50212c2fd8feccb1c31b812c179",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "writeVarintSlow"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used is compressing the `writeVarintSlow` function into a loop to reduce redundancy and improve performance.",
            "The optimization strategy involved restructuring the `writeVarintSlow` function by compressing its logic into a loop to reduce redundancy and improve performance.",
            "The optimization strategy involved restructuring the `writeVarintSlow` function by compressing its logic into a loop to reduce redundancy and improve performance.",
            "The optimization strategy involved restructuring the `writeVarintSlow` function by compressing its logic into a loop to reduce redundancy and improve performance.",
            "The optimization strategy involved restructuring the `writeVarintSlow` function by compressing its logic into a loop to reduce redundancy and improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved restructuring the `writeVarintSlow` function by compressing its logic into a loop to reduce redundancy and improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "sycl",
        "hash": "1d068cc0b07694799e077b28dbd272b7982727e2",
        "author": "Chris Lattner",
        "date": "2011-05-22T04:53:24+00:00",
        "message": "switch to using a smallvector to avoid allocations for most normal size instructions.\n\nllvm-svn: 131837",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/MC/MCDisassembler/Disassembler.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/1d068cc0b07694799e077b28dbd272b7982727e2",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "LLVMDisasmInstruction"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a standard vector with a SmallVector to reduce dynamic memory allocations for typical instruction sizes.",
            "The optimization strategy involved replacing a standard vector with a SmallVector to reduce dynamic memory allocations for typical instruction sizes.",
            "The optimization strategy involved replacing a standard vector with a SmallVector to minimize dynamic memory allocations for typical instruction sizes.",
            "The optimization strategy involved replacing a standard vector with a SmallVector to minimize dynamic memory allocations for typical instruction sizes.",
            "The optimization strategy involved replacing a standard vector with a SmallVector to reduce dynamic memory allocations for typical instruction sizes."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a standard vector with a SmallVector to reduce dynamic memory allocations for typical instruction sizes.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "fbthrift",
        "hash": "9187dd90a98254d7b40a1e50e95d20e5562565fc",
        "author": "Dave Kwon",
        "date": "2024-04-26T19:26:59-07:00",
        "message": "Refactor `emplace_back_default` to avoid default ctor for emplace_back when allocator is not used\n\nSummary:\nThis avoid default ctor for cases where allocator is not used so that we can avoid 1 move ctor and 1 dtor. Therefore, we see big improvement in `LargeListMixed ` about ~11% in deserialization.\n\nBenchmark:\nWith fdo turned off\n```\n// before\n=============================================================================================\nfbcode/thrift/lib/cpp2/test/ProtocolBench.cpp     relative  time/iter   iters/s  serialized_size\n=============================================================================================\nBinaryProtocol_read_SmallListInt                                            37.18ns    26.90M               49\nBinaryProtocol_read_BigListInt                                              20.04us    49.89K            40009\nBinaryProtocol_read_BigListMixed                                           456.61us     2.19K           500009\nBinaryProtocol_read_BigListMixedInt                                        280.56us     3.56K           850009\nBinaryProtocol_read_LargeListMixed                                          56.48ms     17.71         50000009\nOpEncodeBinaryProtocol_read_SmallListInt                                    36.91ns    27.09M               49\nOpEncodeBinaryProtocol_read_BigListInt                                      19.45us    51.41K            40009\nOpEncodeBinaryProtocol_read_BigListMixed                                   461.38us     2.17K           500009\nOpEncodeBinaryProtocol_read_BigListMixedInt                                268.13us     3.73K           850009\nOpEncodeBinaryProtocol_read_LargeListMixed                                  55.58ms     17.99         50000009\n=============================================================================================\n```\nvs\n```\n//after\n=============================================================================================\nfbcode/thrift/lib/cpp2/test/ProtocolBench.cpp     relative  time/iter   iters/s  serialized_size\n=============================================================================================\nBinaryProtocol_read_SmallListInt                                            38.50ns    25.97M               49\nBinaryProtocol_read_BigListInt                                              20.78us    48.13K            40009\nBinaryProtocol_read_BigListMixed                                           449.85us     2.22K           500009\nBinaryProtocol_read_BigListMixedInt                                        274.56us     3.64K           850009\nBinaryProtocol_read_LargeListMixed                                          51.57ms     19.39         50000009\nOpEncodeBinaryProtocol_read_SmallListInt                                    36.17ns    27.64M               49\nOpEncodeBinaryProtocol_read_BigListInt                                      19.73us    50.68K            40009\nOpEncodeBinaryProtocol_read_BigListMixed                                   410.18us     2.44K           500009\nOpEncodeBinaryProtocol_read_BigListMixedInt                                266.42us     3.75K           850009\nOpEncodeBinaryProtocol_read_LargeListMixed                                  50.09ms     19.96         50000009\n=============================================================================================\n```\n\nReviewed By: yfeldblum\n\nDifferential Revision: D56656403\n\nfbshipit-source-id: e473c2cc1127490fa554ffc174e0ae72def17167",
        "modified_files_count": 1,
        "modified_files": [
            "thrift/lib/cpp2/protocol/detail/protocol_methods.h"
        ],
        "github_commit_url": "https://github.com/facebook/fbthrift/commit/9187dd90a98254d7b40a1e50e95d20e5562565fc",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "emplace_back_default"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids unnecessary default constructor calls in `emplace_back_default` by directly constructing objects in place when no allocator is used, reducing move and destructor overhead.",
            "The optimization avoids unnecessary default constructor calls in `emplace_back_default` by directly constructing objects in place when no allocator is used, reducing move and destructor overhead.",
            "The optimization avoids unnecessary default constructor calls in `emplace_back_default` by directly constructing objects in place when no allocator is used, reducing overhead from move and destructor operations.",
            "The optimization avoids unnecessary default constructor calls in `emplace_back_default` by directly constructing objects in place when no allocator is used, reducing overhead from move constructors and destructors.",
            "The optimization avoids unnecessary default constructor calls in `emplace_back_default` by directly constructing objects in place when no allocator is used, reducing move and destructor overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary default constructor calls in `emplace_back_default` by directly constructing objects in place when no allocator is used, reducing move and destructor overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "rapidjson",
        "hash": "b67ff2fb11307dfe03926f5433175fb67072cc64",
        "author": "fuzhufang",
        "date": "2016-07-14T17:50:48+08:00",
        "message": "if define RAPIDJSON_HAS_STDSTRING, FindMember use std::string, but it\nalso use internal::StrLen to get the string lengtht,\nwhen it call FindMember(StringRef(name)).\nNow use GenericValue construct it, then can use the std::string.size.\nnow it will be faster.",
        "modified_files_count": 1,
        "modified_files": [
            "include/rapidjson/document.h"
        ],
        "github_commit_url": "https://github.com/Tencent/rapidjson/commit/b67ff2fb11307dfe03926f5433175fb67072cc64",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "FindMember"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids redundant string length calculations by leveraging `std::string::size` instead of calling `internal::StrLen` when using `FindMember` with `StringRef`.",
            "The optimization avoids redundant string length calculations by leveraging `std::string::size` instead of calling `internal::StrLen` when using `FindMember` with `StringRef`.",
            "The optimization avoids redundant string length calculations by leveraging `std::string::size` instead of calling `internal::StrLen` when using `FindMember` with `StringRef`.",
            "The optimization avoids redundant string length calculations by leveraging `std::string::size` instead of calling `internal::StrLen` when using `FindMember` with `StringRef`.",
            "The optimization avoids redundant string length calculations by leveraging `std::string::size` instead of calling `internal::StrLen` when using `FindMember` with `StringRef`."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids redundant string length calculations by leveraging `std::string::size` instead of calling `internal::StrLen` when using `FindMember` with `StringRef`.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "6994dd82c4f8c3f686f73801fc92a859a5eecb7f",
        "author": "Josh Coalson",
        "date": "2001-04-18T02:21:21+00:00",
        "message": "minor speed optimization",
        "modified_files_count": 1,
        "modified_files": [
            "src/libFLAC/encoder_framing.c"
        ],
        "github_commit_url": "https://github.com/xiph/flac/commit/6994dd82c4f8c3f686f73801fc92a859a5eecb7f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "subframe_add_residual_partitioned_rice_"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "flac",
        "optimization_summary": [
            "The optimization strategy involved restructuring the loop to reduce redundant calculations and improve cache locality.",
            "The optimization strategy involved restructuring the loop to reduce redundant calculations and improve cache locality.",
            "The optimization strategy involved restructuring the loop to reduce redundant calculations and improve cache locality.",
            "The optimization strategy involved restructuring the loop to reduce redundant calculations and improve cache locality by reordering operations.",
            "The optimization strategy involved restructuring the loop to reduce redundant calculations and improve cache locality."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved restructuring the loop to reduce redundant calculations and improve cache locality.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "ain",
        "hash": "28caf97f02c72e4ab39645be8203adc5bb015718",
        "author": "lucash.dev@gmail.com",
        "date": "2018-06-06T06:50:25-07:00",
        "message": "speed up of tx_validationcache_tests by reusing of CTransaction.\n\nThe code was converting CMutableTransaction to CTransaction multiple times, which implies recalculating the hash multiple times. This commit fixes this by reusing a single CTransaction.",
        "modified_files_count": 1,
        "modified_files": [
            "src/test/txvalidationcache_tests.cpp"
        ],
        "github_commit_url": "https://github.com/DeFiCh/ain/commit/28caf97f02c72e4ab39645be8203adc5bb015718",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ValidateCheckInputsForAllFlags"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reusing a single CTransaction object to avoid redundant conversions and hash recalculations.",
            "The optimization strategy involved reusing a single CTransaction object to avoid redundant conversions and hash recalculations.",
            "The optimization strategy involved reusing a single CTransaction object to avoid redundant conversions and hash recalculations.",
            "The optimization strategy involved reusing a single CTransaction object to avoid redundant conversions and hash recalculations.",
            "The optimization strategy involved reusing a single CTransaction object to avoid redundant conversions and hash recalculations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reusing a single CTransaction object to avoid redundant conversions and hash recalculations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "n3n",
        "hash": "e3951631b987e2be6f9fd46df8c48d23c68e09fb",
        "author": "emanuele-f",
        "date": "2019-04-11T00:46:34+02:00",
        "message": "Improve benchmark\n\nSample on i3 2GHz:\n\nRun [transop_null] for 3s (512 bytes):   \t    11203585 packets\t  3734.5 Kpps\t  1912.1 MB/s\nRun [transop_twofish] for 3s (512 bytes):   \t       60705 packets\t    20.2 Kpps\t    10.4 MB/s\nRun [transop_aes] for 3s (512 bytes):   \t      467937 packets\t   156.0 Kpps\t    79.9 MB/s",
        "modified_files_count": 1,
        "modified_files": [
            "benchmark.c"
        ],
        "github_commit_url": "https://github.com/n42n/n3n/commit/e3951631b987e2be6f9fd46df8c48d23c68e09fb",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "run_transop_benchmark"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing unnecessary overhead in the benchmark loop to improve packet processing speed.",
            "The optimization strategy involved reducing unnecessary overhead in the benchmark loop to improve packet processing speed.",
            "The optimization strategy involved reducing unnecessary overhead in the benchmark loop by minimizing redundant operations or improving data handling efficiency.",
            "The optimization strategy involved reducing unnecessary overhead in the benchmark loop to improve packet processing speed.",
            "The optimization strategy involved reducing the computational overhead in the benchmark by minimizing redundant operations or improving loop efficiency."
        ],
        "is_generic_optimization": [
            true,
            true,
            false,
            true,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved reducing unnecessary overhead in the benchmark loop to improve packet processing speed.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "openmv",
        "hash": "59fea5bc52848f330f1bce6079df5f6b392d91c3",
        "author": "Kwabena W. Agyeman",
        "date": "2024-02-16T16:51:12-08:00",
        "message": "imlib/jpege: Improve jpeg YUV422/420 UV sub-sampling speed.",
        "modified_files_count": 1,
        "modified_files": [
            "src/omv/imlib/jpege.c"
        ],
        "github_commit_url": "https://github.com/openmv/openmv/commit/59fea5bc52848f330f1bce6079df5f6b392d91c3",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "jpeg_compress"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used loop unrolling and direct memory access to improve the speed of UV sub-sampling in JPEG compression.",
            "The optimization strategy involved improving the efficiency of UV sub-sampling in JPEG compression by reducing unnecessary computations or memory accesses.",
            "The optimization strategy involved improving the efficiency of UV sub-sampling in JPEG compression by reducing unnecessary computations or memory accesses.",
            "The optimization strategy used loop unrolling and direct memory access to improve the speed of YUV422/420 UV sub-sampling in JPEG compression.",
            "The optimization strategy used loop unrolling and direct memory access to improve the speed of UV sub-sampling in JPEG compression."
        ],
        "is_generic_optimization": [
            true,
            false,
            false,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used loop unrolling and direct memory access to improve the speed of UV sub-sampling in JPEG compression.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "tensorflow-directml",
        "hash": "0a4652663e3cd378113d51e1d076504c8e96b308",
        "author": "Amit Srivastava",
        "date": "2019-03-05T08:53:43+05:30",
        "message": "Speedup fix for the push_back function\n\nReserve the space in advance for speedup",
        "modified_files_count": 1,
        "modified_files": [
            "tensorflow/lite/toco/tflite/export.cc"
        ],
        "github_commit_url": "https://github.com/microsoft/tensorflow-directml/commit/0a4652663e3cd378113d51e1d076504c8e96b308",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ExportTensors"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reserving space in advance for a vector to reduce the overhead of repeated memory reallocations during push_back operations.",
            "The optimization strategy involved reserving space in advance for a vector to reduce the overhead of repeated reallocations during push_back operations.",
            "The optimization strategy involved reserving space in advance for a vector to reduce the overhead of repeated memory reallocations during push_back operations.",
            "The optimization strategy involved reserving space in advance for a vector to reduce the overhead of repeated memory allocations during push_back operations.",
            "The optimization strategy involved reserving space in advance for a vector to reduce the overhead of repeated reallocations during `push_back` operations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reserving space in advance for a vector to reduce the overhead of repeated memory reallocations during push_back operations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "hurd",
        "hash": "9b3a87f37c4e829386ceb10de974d409a31adcf7",
        "author": "Samuel Thibault",
        "date": "2013-08-28T23:20:41+02:00",
        "message": "Optimize translator string copy\n\n* libnetfs/file-get-translator.c (netfs_S_file_get_translator): Call memcpy\ninstead of memmove.",
        "modified_files_count": 1,
        "modified_files": [
            "libnetfs/file-get-translator.c"
        ],
        "github_commit_url": "https://github.com/joshumax/hurd/commit/9b3a87f37c4e829386ceb10de974d409a31adcf7",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "netfs_S_file_get_translator"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy replaced `memmove` with `memcpy` to improve performance by avoiding unnecessary overlap checks.",
            "The optimization strategy replaced `memmove` with `memcpy` to improve performance by avoiding unnecessary overlap checks during memory copying.",
            "The optimization strategy replaced `memmove` with `memcpy` to improve performance by avoiding unnecessary overlap checks.",
            "The optimization strategy replaced a `memmove` call with a `memcpy` call to improve performance by avoiding unnecessary overlap checks.",
            "The optimization strategy replaced `memmove` with `memcpy` to improve performance by avoiding unnecessary overlap checks during memory copying."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy replaced `memmove` with `memcpy` to improve performance by avoiding unnecessary overlap checks.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "poedit",
        "hash": "0d722d8b4814c594fd37eb838ea68b895d171b28",
        "author": "Václav Slavík",
        "date": "2017-05-20T17:41:07+02:00",
        "message": "Optimize UnescapeCString if no escaping needed\n\nMake the common case faster. Reduces time spent in this function when\nreading a PO file from ~3% to ~1%.",
        "modified_files_count": 1,
        "modified_files": [
            "src/utility.h"
        ],
        "github_commit_url": "https://github.com/vslavik/poedit/commit/0d722d8b4814c594fd37eb838ea68b895d171b28",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "UnescapeCString"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids unnecessary processing in the common case by checking if escaping is needed before performing the unescaping operation.",
            "The optimization avoids unnecessary processing in the common case by checking if escaping is needed before performing the unescaping operation.",
            "The optimization avoids unnecessary processing in the common case where no escaping is needed by adding an early exit condition.",
            "The optimization strategy used is to make the common case faster by reducing unnecessary processing when no escaping is needed in the `UnescapeCString` function.",
            "The optimization avoids unnecessary processing in the common case by checking if escaping is needed before performing the unescaping operation."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary processing in the common case by checking if escaping is needed before performing the unescaping operation.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "clazy",
        "hash": "5ae29fffa06a25a5537ea6944b676b78575d9a57",
        "author": "Sergio Martins",
        "date": "2018-01-21T22:38:14+00:00",
        "message": "Minor performance optimization: do the cheapeast condition first",
        "modified_files_count": 1,
        "modified_files": [
            "src/AccessSpecifierManager.cpp"
        ],
        "github_commit_url": "https://github.com/KDE/clazy/commit/5ae29fffa06a25a5537ea6944b676b78575d9a57",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "AccessSpecifierManager::qtAccessSpecifierType"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy reorders conditions in an if-statement to evaluate the cheapest condition first, reducing unnecessary computations.",
            "The optimization strategy reorders conditional checks to evaluate the least expensive condition first, reducing unnecessary computations.",
            "The optimization strategy reorders conditions in an if-statement to evaluate the cheapest condition first, reducing unnecessary evaluations.",
            "The optimization strategy reorders conditions in an if-statement to evaluate the cheapest condition first, reducing unnecessary computations.",
            "The optimization strategy reorders conditional checks to evaluate the least expensive condition first, reducing unnecessary computations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy reorders conditions in an if-statement to evaluate the cheapest condition first, reducing unnecessary computations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "tengine",
        "hash": "ff9004d0891974fed7dd22ef0eed0627b9277078",
        "author": "Weibin Yao(姚伟斌)",
        "date": "2013-07-28T08:18:17-07:00",
        "message": "Merge pull request #279 from chobits/master\n\nround robin: optimize loop in ngx_http_upstream_init_round_robin()",
        "modified_files_count": 1,
        "modified_files": [
            "src/http/ngx_http_upstream_round_robin.c"
        ],
        "github_commit_url": "https://github.com/alibaba/tengine/commit/ff9004d0891974fed7dd22ef0eed0627b9277078",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ngx_http_upstream_init_round_robin"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved restructuring the loop in ngx_http_upstream_init_round_robin() to reduce redundant computations and improve iteration efficiency.",
            "The optimization strategy involved restructuring the loop in ngx_http_upstream_init_round_robin() to reduce redundant computations and improve iteration efficiency.",
            "The optimization strategy involved restructuring the loop in ngx_http_upstream_init_round_robin() to reduce redundant iterations and improve efficiency.",
            "The optimization strategy involved restructuring the loop in ngx_http_upstream_init_round_robin() to reduce redundant computations and improve iteration efficiency.",
            "The optimization strategy involved restructuring the loop in ngx_http_upstream_init_round_robin() to reduce redundant computations and improve iteration efficiency."
        ],
        "is_generic_optimization": [
            true,
            true,
            false,
            true,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved restructuring the loop in ngx_http_upstream_init_round_robin() to reduce redundant computations and improve iteration efficiency.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "suricata",
        "hash": "fd4ca53eb7110a2ab0f24d08902d5c2a04f00a8c",
        "author": "Victor Julien",
        "date": "2024-01-08T20:23:28+01:00",
        "message": "app-layer: micro optimization for AppProtoEquals\n\nAdd most common condition first.",
        "modified_files_count": 1,
        "modified_files": [
            "src/app-layer-protos.h"
        ],
        "github_commit_url": "https://github.com/OISF/suricata/commit/fd4ca53eb7110a2ab0f24d08902d5c2a04f00a8c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "AppProtoEquals"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy reorders conditions in the AppProtoEquals function to evaluate the most common case first, reducing average execution time.",
            "The optimization strategy reorders conditions in the AppProtoEquals function to evaluate the most common case first, reducing average execution time.",
            "The optimization strategy reorders conditions in the `AppProtoEquals` function to check the most common case first, reducing unnecessary comparisons.",
            "The optimization strategy reorders conditions in the `AppProtoEquals` function to check the most common case first, reducing average execution time.",
            "The optimization strategy reorders conditions in the AppProtoEquals function to evaluate the most common case first, reducing average execution time."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy reorders conditions in the AppProtoEquals function to evaluate the most common case first, reducing average execution time.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "tensorflow",
        "hash": "d75eb4eed1020c37d5d5572a70c58194f00c0f74",
        "author": "Frederic Bastien",
        "date": "2020-03-04T12:13:41-08:00",
        "message": "Remove a condition that is optimized by LLVM and doesn't remove vectorization.",
        "modified_files_count": 1,
        "modified_files": [
            "tensorflow/compiler/xla/service/gpu/ir_emitter_unnested.cc"
        ],
        "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/d75eb4eed1020c37d5d5572a70c58194f00c0f74",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "IrEmitterUnnested::EmitTile"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization removes a redundant condition that is already handled by LLVM, thereby improving performance without affecting functionality.",
            "The optimization removes a redundant condition that is already handled by LLVM, thereby improving performance without affecting functionality.",
            "The optimization removes a redundant condition that is already handled by LLVM, thereby improving performance without affecting functionality.",
            "The optimization removes a redundant condition that is already handled by LLVM, thereby improving performance without affecting functionality.",
            "The optimization removes a redundant condition that is already handled by LLVM, thereby improving performance without affecting functionality."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization removes a redundant condition that is already handled by LLVM, thereby improving performance without affecting functionality.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "qtbase",
        "hash": "0a5a41d9a4f33652f3a0be766b6b9a486075325b",
        "author": "Marc Mutz",
        "date": "2014-09-12T10:00:10+02:00",
        "message": "QImageReader: use qEnvironmentVariableIsEmpty()\n\nIt doesn't allocate memory, so cannot throw and is a lot faster\nthan qgetenv().\n\nChange-Id: I92805767b55adce478a4bf8eb1cbafaa544f96aa\nReviewed-by: Jędrzej Nowacki <jedrzej.nowacki@digia.com>\nReviewed-by: Gunnar Sletta <gunnar@sletta.org>",
        "modified_files_count": 1,
        "modified_files": [
            "src/gui/image/qimagereader.cpp"
        ],
        "github_commit_url": "https://github.com/qt/qtbase/commit/0a5a41d9a4f33652f3a0be766b6b9a486075325b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "read"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy replaced a memory-allocating environment variable check with a faster, non-allocating alternative to improve performance.",
            "The optimization strategy replaced a memory-allocating environment variable check with a faster, non-allocating alternative to improve performance.",
            "The optimization strategy replaced a memory-allocating environment variable check with a faster, non-allocating alternative to improve performance.",
            "The optimization strategy replaced a memory-allocating environment variable check with a faster, non-allocating alternative to improve performance.",
            "The optimization strategy replaced a memory-allocating environment variable check with a faster, non-allocating alternative to improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy replaced a memory-allocating environment variable check with a faster, non-allocating alternative to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "CControl",
        "hash": "da0b10ca058ff87b6fba1a5db543196be7001f15",
        "author": "Daniel Mårtensson",
        "date": "2023-10-08T12:22:54+02:00",
        "message": "Faster cut.c",
        "modified_files_count": 1,
        "modified_files": [
            "src/CControl/Sources/Miscellaneous/cut.c"
        ],
        "github_commit_url": "https://github.com/DanielMartensson/CControl/commit/da0b10ca058ff87b6fba1a5db543196be7001f15",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "size"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency.",
            "The optimization strategy involved reducing unnecessary computations or iterations within the `size` function to improve its runtime efficiency.",
            "The optimization strategy involved reducing unnecessary computations or iterations within the `size` function to improve its runtime efficiency.",
            "The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency in the `size` function.",
            "The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency in the `size` function."
        ],
        "is_generic_optimization": [
            true,
            false,
            false,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency in the `size` function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "NanoVNA",
        "hash": "992e51cf8b3017b3015c441a48c4aa93060a5ce0",
        "author": "ВшЫдщкв",
        "date": "2020-01-23T22:05:32+03:00",
        "message": "Optimize size of groupdelay_from_array function",
        "modified_files_count": 1,
        "modified_files": [
            "plot.c"
        ],
        "github_commit_url": "https://github.com/ttrftech/NanoVNA/commit/992e51cf8b3017b3015c441a48c4aa93060a5ce0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "groupdelay_from_array"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations inside a loop by precomputing values outside the loop.",
            "The optimization strategy involved reducing the computational overhead by minimizing redundant calculations within the groupdelay_from_array function.",
            "The optimization strategy involved reducing redundant calculations inside a loop by precomputing values outside the loop.",
            "The optimization strategy involved reducing the computational overhead by minimizing redundant calculations within the `groupdelay_from_array` function.",
            "The optimization strategy involved reducing the computational overhead by simplifying the logic and minimizing redundant calculations within the `groupdelay_from_array` function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing the computational overhead by minimizing redundant calculations within the `groupdelay_from_array` function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "newsboat",
        "hash": "e6de9130d88d7737e4334b953578c08a90458716",
        "author": "Stefan Erben",
        "date": "2009-04-29T22:30:46+02:00",
        "message": "Performance of strprintf enhanced",
        "modified_files_count": 1,
        "modified_files": [
            "src/utils.cpp"
        ],
        "github_commit_url": "https://github.com/newsboat/newsboat/commit/e6de9130d88d7737e4334b953578c08a90458716",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "utils::strprintf"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a loop that appended characters one by one with a more efficient bulk append operation to reduce function call overhead.",
            "The optimization strategy involved replacing a loop that appended characters one by one with a more efficient bulk append operation to improve performance.",
            "The optimization strategy involved replacing a loop that appended characters one by one with a more efficient bulk operation to reduce overhead.",
            "The optimization strategy involved replacing a loop that appended characters one by one with a more efficient bulk append operation to reduce function call overhead.",
            "The optimization strategy involved replacing a loop that appended characters one by one with a more efficient bulk append operation to reduce function call overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a loop that appended characters one by one with a more efficient bulk append operation to reduce function call overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "sycl",
        "hash": "3da0aeea080f84ebc5e3059403f799469b93b773",
        "author": "Snehasish Kumar",
        "date": "2021-04-23T10:00:38-07:00",
        "message": "[NFC] Use hasSection instead of getSection().empty()\n\nUse the optimized check hasSection() instead of calling\ngetSection().empty(). Originally suggested in D101004, but was dropped\nin the commit.",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/CodeGen/MachineFunctionSplitter.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/3da0aeea080f84ebc5e3059403f799469b93b773",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "MachineFunctionSplitter::runOnMachineFunction"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization replaces a potentially costly `getSection().empty()` call with a more efficient `hasSection()` check to improve performance.",
            "The optimization replaces a potentially costly method call and check (`getSection().empty()`) with a more direct and efficient method (`hasSection()`).",
            "The optimization strategy replaces a potentially costly method call and operation (`getSection().empty()`) with a direct, semantically equivalent check (`hasSection()`), reducing unnecessary overhead.",
            "The optimization replaces a potentially costly `getSection().empty()` call with a more efficient `hasSection()` check to improve performance.",
            "The optimization replaces a potentially costly `getSection().empty()` check with a more efficient `hasSection()` method to improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization replaces a potentially costly `getSection().empty()` check with a more efficient `hasSection()` method to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "despacer",
        "hash": "6f8ba0f8128e42ae9bb34b70d2d6f72cdda7ad0b",
        "author": "Fabian Klötzl",
        "date": "2019-07-29T18:29:36+02:00",
        "message": "despace_ssse3_lut_1kb: faster comparison",
        "modified_files_count": 1,
        "modified_files": [
            "include/despacer.h"
        ],
        "github_commit_url": "https://github.com/lemire/despacer/commit/6f8ba0f8128e42ae9bb34b70d2d6f72cdda7ad0b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "despace_ssse3_lut_1kb"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used SIMD (Single Instruction, Multiple Data) instructions to improve the performance of a function by processing multiple data elements in parallel.",
            "The optimization strategy used SIMD (Single Instruction, Multiple Data) instructions to improve the performance of a function by processing multiple data elements in parallel.",
            "The optimization strategy used SIMD (Single Instruction, Multiple Data) instructions to improve the performance of a function by processing multiple data elements in parallel.",
            "The optimization strategy used SIMD (Single Instruction, Multiple Data) instructions to improve the performance of a function by processing multiple data points in parallel.",
            "The optimization strategy used SIMD (Single Instruction, Multiple Data) instructions to improve the performance of a function by processing multiple data elements in parallel."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used SIMD (Single Instruction, Multiple Data) instructions to improve the performance of a function by processing multiple data elements in parallel.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "eaa75527d673c76888921fa7678ddf00d9880458",
        "author": "Michele Spagnolo",
        "date": "2022-10-19T15:58:14+02:00",
        "message": "Measure::moveTicks() optimization",
        "modified_files_count": 1,
        "modified_files": [
            "src/engraving/libmscore/measure.cpp"
        ],
        "github_commit_url": "https://github.com/musescore/MuseScore/commit/eaa75527d673c76888921fa7678ddf00d9880458",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Measure::moveTicks"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "MuseScore",
        "optimization_summary": [
            "The optimization strategy involved reducing unnecessary computations or iterations within the `moveTicks` function to improve its execution efficiency.",
            "The optimization strategy involved reducing redundant calculations by caching and reusing results within the `Measure::moveTicks()` function.",
            "The optimization strategy involved reducing redundant calculations by caching and reusing previously computed values within the `Measure::moveTicks` function.",
            "The optimization strategy involved reducing redundant calculations by caching and reusing results within the `Measure::moveTicks` function.",
            "The optimization strategy involved reducing redundant calculations by caching and reusing results within the `moveTicks` function."
        ],
        "is_generic_optimization": [
            false,
            false,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant calculations by caching and reusing results within the `Measure::moveTicks` function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "filament",
        "hash": "4f58be1ef1d881b04be530cc17d3a617d0e96a68",
        "author": "Pixelflinger",
        "date": "2020-08-13T23:44:38-07:00",
        "message": "minor micro optimizations",
        "modified_files_count": 1,
        "modified_files": [
            "filament/src/PostProcessManager.cpp"
        ],
        "github_commit_url": "https://github.com/google/filament/commit/4f58be1ef1d881b04be530cc17d3a617d0e96a68",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "PostProcessManager::taa"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant calculations and improving memory access patterns within the function.",
            "The optimization strategy involved reducing redundant computations and improving memory access patterns within the `taa` function.",
            "The optimization strategy involved reducing redundant computations and improving memory access patterns within the `taa` function.",
            "The optimization strategy involved reducing redundant computations and improving memory access patterns within the function.",
            "The optimization strategy involved reducing redundant computations and improving memory access patterns within the `taa` function."
        ],
        "is_generic_optimization": [
            true,
            true,
            false,
            true,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant computations and improving memory access patterns within the `taa` function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "hdf5",
        "hash": "6543e55efad7ded7f5a0e0dc50786c966aea6b98",
        "author": "Quincey Koziol",
        "date": "2004-07-25T23:33:31-05:00",
        "message": "[svn-r8944] Purpose:\n    Code optimization\n\nDescription:\n    Eliminate duplicated call to H5T_detect_class()\n\nPlatforms tested:\n    Solaris 2.7 (arabica)\n    FreeBSD 4.10 (sleipnir) w/parallel\n    Too minor to require h5committest",
        "modified_files_count": 1,
        "modified_files": [
            "src/H5Tconv.c"
        ],
        "github_commit_url": "https://github.com/HDFGroup/hdf5/commit/6543e55efad7ded7f5a0e0dc50786c966aea6b98",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "H5T_conv_vlen"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy eliminated a redundant call to the function H5T_detect_class() to reduce unnecessary computations.",
            "The optimization strategy eliminated a redundant call to the function H5T_detect_class() to reduce unnecessary computations.",
            "The optimization strategy eliminates a redundant call to H5T_detect_class() within the H5T_conv_vlen function to reduce unnecessary computations.",
            "The optimization strategy eliminates a redundant call to H5T_detect_class() within the H5T_conv_vlen function to reduce unnecessary computations.",
            "The optimization strategy eliminates a redundant function call to H5T_detect_class() within the H5T_conv_vlen function to reduce unnecessary computations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy eliminates a redundant function call to H5T_detect_class() within the H5T_conv_vlen function to reduce unnecessary computations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "clang-wasm",
        "hash": "9bfbb7581358686c837f08f8f340b99e114dfed8",
        "author": "Petter Strandmark",
        "date": "2019-03-23T18:39:41+01:00",
        "message": "Optimize realloc for the last memory block.",
        "modified_files_count": 1,
        "modified_files": [
            "nanolibc/memory.cpp"
        ],
        "github_commit_url": "https://github.com/PetterS/clang-wasm/commit/9bfbb7581358686c837f08f8f340b99e114dfed8",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "realloc"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy avoids unnecessary memory reallocation by directly extending the last memory block when possible.",
            "The optimization strategy avoids unnecessary memory reallocation by directly extending the last memory block when possible.",
            "The optimization strategy avoids unnecessary memory reallocation by directly extending the last memory block when possible.",
            "The optimization strategy avoids unnecessary memory reallocation by directly extending the last memory block when possible.",
            "The optimization strategy avoids unnecessary memory reallocation by directly extending the last memory block when possible."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy avoids unnecessary memory reallocation by directly extending the last memory block when possible.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "hhvm",
        "hash": "d021074c0dc7ddfe7a7a814430f39b6746ca4132",
        "author": "Giuseppe Ottaviano",
        "date": "2023-05-30T10:41:36-07:00",
        "message": "nullptr fast path in AtomicCoreCachedSharedPtr::get()\n\nSummary: If the storage is `nullptr`, we don't need to protect it.\n\nReviewed By: Gownta\n\nDifferential Revision: D46228019\n\nfbshipit-source-id: dfc9515f8f01fd02b37337ef08446159e17482bc",
        "modified_files_count": 1,
        "modified_files": [
            "third-party/folly/src/folly/concurrency/CoreCachedSharedPtr.h"
        ],
        "github_commit_url": "https://github.com/facebook/hhvm/commit/d021074c0dc7ddfe7a7a814430f39b6746ca4132",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "reset"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization introduces a fast path to avoid unnecessary protection when the storage is `nullptr`.",
            "The optimization introduces a fast path for `nullptr` checks in `AtomicCoreCachedSharedPtr::get()` to avoid unnecessary protection logic when the storage is null.",
            "The optimization introduces a fast path for `nullptr` checks in `AtomicCoreCachedSharedPtr::get()` to avoid unnecessary protection logic when the storage is empty.",
            "The optimization introduces a fast path for `nullptr` checks in `AtomicCoreCachedSharedPtr::get()` to avoid unnecessary protection logic when the storage is empty.",
            "The optimization introduces a fast path for `nullptr` checks in `AtomicCoreCachedSharedPtr::get()` to avoid unnecessary protection logic when the storage is empty."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization introduces a fast path for `nullptr` checks in `AtomicCoreCachedSharedPtr::get()` to avoid unnecessary protection logic when the storage is empty.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "linux-rockchip",
        "hash": "183c062c51c7e7663752b94ac399c830e4cb3c44",
        "author": "Waiman Long",
        "date": "2014-10-09T12:18:42-07:00",
        "message": "mm, thp: move invariant bug check out of loop in __split_huge_page_map\n\ncommit f8303c2582b889351e261ff18c4d8eb197a77db2 upstream.\n\nIn __split_huge_page_map(), the check for page_mapcount(page) is\ninvariant within the for loop.  Because of the fact that the macro is\nimplemented using atomic_read(), the redundant check cannot be optimized\naway by the compiler leading to unnecessary read to the page structure.\n\nThis patch moves the invariant bug check out of the loop so that it will\nbe done only once.  On a 3.16-rc1 based kernel, the execution time of a\nmicrobenchmark that broke up 1000 transparent huge pages using munmap()\nhad an execution time of 38,245us and 38,548us with and without the\npatch respectively.  The performance gain is about 1%.\n\nSigned-off-by: Waiman Long <Waiman.Long@hp.com>\nAcked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nCc: Andrea Arcangeli <aarcange@redhat.com>\nCc: Mel Gorman <mgorman@suse.de>\nCc: Rik van Riel <riel@redhat.com>\nCc: Scott J Norton <scott.norton@hp.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
        "modified_files_count": 1,
        "modified_files": [
            "mm/huge_memory.c"
        ],
        "github_commit_url": "https://github.com/armbian/linux-rockchip/commit/183c062c51c7e7663752b94ac399c830e4cb3c44",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "__split_huge_page_map"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved moving an invariant bug check out of a loop to eliminate redundant atomic reads and improve performance.",
            "The optimization strategy moves an invariant bug check out of a loop to eliminate redundant atomic reads and improve performance.",
            "The optimization strategy moves an invariant bug check out of a loop to eliminate redundant atomic reads and improve performance.",
            "The optimization strategy moves an invariant bug check out of a loop to eliminate redundant atomic reads and improve performance.",
            "The optimization strategy involved moving an invariant bug check out of a loop to eliminate redundant atomic reads and improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy moves an invariant bug check out of a loop to eliminate redundant atomic reads and improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "PandA-bambu",
        "hash": "565d0b74e8bb66c0ff8aa42db225d6eb11258dac",
        "author": "Fabrizio Ferrandi",
        "date": "2018-04-24T12:46:12+02:00",
        "message": "* Improved multiplication by an unsigned constant.",
        "modified_files_count": 1,
        "modified_files": [
            "src/frontend_analysis/IR_analysis/IR_lowering.cpp"
        ],
        "github_commit_url": "https://github.com/ferrandi/PandA-bambu/commit/565d0b74e8bb66c0ff8aa42db225d6eb11258dac",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "IR_lowering::expand_MC"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved improving the handling of multiplication by an unsigned constant, likely through more efficient code generation or transformation.",
            "The optimization strategy involved improving the handling of multiplication by an unsigned constant, likely by reducing unnecessary operations or improving the efficiency of the operation.",
            "The optimization strategy involved improving the handling of multiplication by an unsigned constant, likely through more efficient code generation or transformation.",
            "The optimization strategy involved improving multiplication by an unsigned constant, likely through more efficient code generation or transformation.",
            "The optimization strategy involved improving the handling of multiplication by an unsigned constant, likely by reducing unnecessary operations or improving the efficiency of the operation."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved improving the handling of multiplication by an unsigned constant, likely through more efficient code generation or transformation.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "kram",
        "hash": "1bacbd615ec005b605bd208117b546992527ac07",
        "author": "Alec Miller",
        "date": "2024-11-03T22:14:23-08:00",
        "message": "kram - simd - faster decompose_scale",
        "modified_files_count": 1,
        "modified_files": [
            "libkram/vectormath/float234.h"
        ],
        "github_commit_url": "https://github.com/alecazam/kram/commit/1bacbd615ec005b605bd208117b546992527ac07",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "macroVector4TypesStorageRenames"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used SIMD (Single Instruction, Multiple Data) instructions to improve the performance of the `decompose_scale` function by processing multiple data points in parallel.",
            "The optimization strategy used SIMD (Single Instruction, Multiple Data) instructions to improve the performance of the `decompose_scale` function by processing multiple data points in parallel.",
            "The optimization strategy used SIMD (Single Instruction, Multiple Data) instructions to improve the performance of the `decompose_scale` function by processing multiple data points in parallel.",
            "The optimization strategy involved restructuring the `decompose_scale` function to leverage SIMD (Single Instruction, Multiple Data) operations for improved performance.",
            "The optimization strategy involved restructuring the `decompose_scale` function to leverage SIMD (Single Instruction, Multiple Data) operations for improved performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            false,
            false
        ],
        "optimization_summary_final": "The optimization strategy used SIMD (Single Instruction, Multiple Data) instructions to improve the performance of the `decompose_scale` function by processing multiple data points in parallel.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "NyuziProcessor",
        "hash": "e1b978b4c783b105e860ee19f32a558dd73c77ed",
        "author": "Jeff Bush",
        "date": "2015-01-05T22:08:58-08:00",
        "message": "It's actually faster than that...",
        "modified_files_count": 1,
        "modified_files": [
            "software/librender/SliceArray.h"
        ],
        "github_commit_url": "https://github.com/jbush001/NyuziProcessor/commit/e1b978b4c783b105e860ee19f32a558dd73c77ed",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "sort"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a less efficient sorting algorithm with a more efficient one, likely reducing time complexity.",
            "The optimization strategy involved replacing a less efficient sorting algorithm with a more efficient one, likely reducing time complexity.",
            "The optimization strategy involved replacing a general-purpose sorting algorithm with a more efficient, specialized sorting implementation tailored for the specific data structure.",
            "The optimization strategy involved replacing a less efficient sorting algorithm with a more efficient one, likely reducing time complexity.",
            "The optimization strategy involved replacing a less efficient sorting algorithm with a more efficient one, likely reducing time complexity."
        ],
        "is_generic_optimization": [
            true,
            true,
            false,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a less efficient sorting algorithm with a more efficient one, likely reducing time complexity.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "dolphin",
        "hash": "dbb8f588c7ac5c6c4586804c072c87de730ef00c",
        "author": "Bram Speeckaert",
        "date": "2022-11-01T11:27:45+01:00",
        "message": "JitArm64: cmpl - Optimize a == 0 case\n\nBy explicitly handling this, we can avoid materializing zero in a\nregister.\n\nBefore:\n0x52800019   mov    w25, #0x0\n0xb94087b6   ldr    w22, [x29, #0x84]\n0xcb16033b   sub    x27, x25, x22\n\nAfter:\n0xb94087b9   ldr    w25, [x29, #0x84]\n0xcb1903fb   neg    x27, x25",
        "modified_files_count": 1,
        "modified_files": [
            "Source/Core/Core/PowerPC/JitArm64/JitArm64_Integer.cpp"
        ],
        "github_commit_url": "https://github.com/dolphin-emu/dolphin/commit/dbb8f588c7ac5c6c4586804c072c87de730ef00c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "JitArm64::cmpl"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids materializing zero in a register by directly using the `neg` instruction for the `a == 0` case, reducing unnecessary operations.",
            "The optimization avoids materializing zero in a register by directly using a negation operation for the `a == 0` case.",
            "The optimization avoids materializing zero in a register by directly using a negation operation for the `a == 0` case.",
            "The optimization avoids materializing zero in a register by directly using the `neg` instruction for the `a == 0` case, reducing unnecessary operations.",
            "The optimization avoids materializing zero in a register by directly using the `neg` instruction for the `a == 0` case, reducing unnecessary operations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids materializing zero in a register by directly using the `neg` instruction for the `a == 0` case, reducing unnecessary operations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "petsc",
        "hash": "c124e916cc25c60b59020116a74464d5b14ef271",
        "author": "Hong Zhang",
        "date": "2004-06-23T09:26:55-06:00",
        "message": "bk-changeset-1.2299.1.11\nhzhang@harley.mcs.anl.gov|ChangeSet|20040623152655|64232\nChangeSet\n  1.2299.1.11 04/06/23 10:26:55 hzhang@harley.mcs.anl.gov +1 -0\n  optimize MatMatMultNumeric_SeqAIJ_SeqAIJ():\n  remove temp array of size C->n (large and sparse)\n  combine two loops into one.\n\n  src/mat/impls/aij/seq/matmatmult.c\n    1.81 04/06/23 10:26:54 hzhang@harley.mcs.anl.gov +12 -18\n    optimize MatMatMultNumeric_SeqAIJ_SeqAIJ():\n    remove temp array of size C->n (large and sparse)\n    combine two loops into one.\n\n\nHg-commit: 09a03d9f2d04d219982e6d1ec4720b601d1a81c4",
        "modified_files_count": 1,
        "modified_files": [
            "src/mat/impls/aij/seq/matmatmult.c"
        ],
        "github_commit_url": "https://github.com/petsc/petsc/commit/c124e916cc25c60b59020116a74464d5b14ef271",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "MatMatMultNumeric_SeqAIJ_SeqAIJ"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy removes a large temporary array and merges two loops into one to reduce memory usage and improve cache efficiency.",
            "The optimization strategy involved removing a large temporary array and merging two loops into one to reduce memory usage and improve cache efficiency.",
            "The optimization strategy involved removing a large temporary array and merging two loops into one to reduce memory usage and improve cache efficiency.",
            "The optimization strategy involved removing a large temporary array and combining two loops into one to reduce memory usage and improve cache efficiency.",
            "The optimization strategy involved removing a large temporary array and merging two loops into one to reduce memory usage and improve cache efficiency."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved removing a large temporary array and merging two loops into one to reduce memory usage and improve cache efficiency.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "sycl",
        "hash": "bb6119eb77fe5818985d375cef415f9fbc0b4757",
        "author": "Mehdi Amini",
        "date": "2022-01-30T19:49:22+00:00",
        "message": "Apply clang-tidy fixes for performance-for-range-copy in SCFInterfaceImpl.cpp (NFC)",
        "modified_files_count": 1,
        "modified_files": [
            "mlir/lib/Dialect/SCF/Transforms/BufferizableOpInterfaceImpl.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/bb6119eb77fe5818985d375cef415f9fbc0b4757",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "bufferize"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing range-based loops that copied objects with ones that use references to avoid unnecessary copy overhead.",
            "The optimization strategy involved replacing range-based loops that copied objects with ones that use references to avoid unnecessary copy overhead.",
            "The optimization strategy involved replacing range-based loops that copied objects with ones that use references to avoid unnecessary copy overhead.",
            "The optimization strategy involved replacing range-based loops that copied objects with ones that used references to avoid unnecessary copy overhead.",
            "The optimization strategy involved replacing range-based loops that copied objects with ones that used references to avoid unnecessary copy overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing range-based loops that copied objects with ones that use references to avoid unnecessary copy overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "MyScaleDB",
        "hash": "ccecb55b9572bd9aa5ee99ac25b94052317e6b05",
        "author": "Alexey Arno",
        "date": "2014-12-17T16:29:37+03:00",
        "message": "Add performance and memory optimization. [#METR-14099]",
        "modified_files_count": 1,
        "modified_files": [
            "dbms/src/Interpreters/InterpreterSelectQuery.cpp"
        ],
        "github_commit_url": "https://github.com/myscale/MyScaleDB/commit/ccecb55b9572bd9aa5ee99ac25b94052317e6b05",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing unnecessary memory allocations and improving cache locality by reusing pre-allocated buffers.",
            "The optimization strategy involved reducing unnecessary memory allocations and improving cache locality by reusing pre-allocated buffers.",
            "The optimization strategy involved reducing unnecessary memory allocations and improving cache locality by reusing pre-allocated buffers.",
            "The optimization strategy involved reducing unnecessary memory allocations and improving cache locality by reusing pre-allocated buffers.",
            "The optimization strategy involved reducing unnecessary memory allocations and improving cache locality by reusing pre-allocated buffers."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing unnecessary memory allocations and improving cache locality by reusing pre-allocated buffers.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "platform_system_core",
        "hash": "379eee0fbdebacafc06bd374a403fd1c1773bbac",
        "author": "Treehugger Robot",
        "date": "2022-06-28T06:53:45+00:00",
        "message": "Merge \"first_stage_init: Optimize redundant vector copy\" am: 13faa1b394 am: a2d6bd56b1 am: b028b19f27\n\nOriginal change: https://android-review.googlesource.com/c/platform/system/core/+/2136933\n\nChange-Id: I664b84094d79dd19f08fe8844e75955b8dafcfbd\nSigned-off-by: Automerger Merge Worker <android-build-automerger-merge-worker@system.gserviceaccount.com>",
        "modified_files_count": 1,
        "modified_files": [
            "init/first_stage_mount.cpp"
        ],
        "github_commit_url": "https://github.com/aosp-mirror/platform_system_core/commit/379eee0fbdebacafc06bd374a403fd1c1773bbac",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "FirstStageMount::UseDsuIfPresent"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved eliminating a redundant vector copy to improve performance by directly using the original vector.",
            "The optimization strategy involved eliminating a redundant vector copy to improve performance by directly using the original vector.",
            "The optimization strategy involved eliminating a redundant vector copy to improve performance by directly using the original vector.",
            "The optimization strategy involved eliminating a redundant vector copy to improve performance by directly using the original vector.",
            "The optimization strategy involved eliminating a redundant vector copy to improve performance by directly using the original vector."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved eliminating a redundant vector copy to improve performance by directly using the original vector.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "SPMC",
        "hash": "0464e115aea5d09f95c7d63b48876a22b565230d",
        "author": "Max Kellermann",
        "date": "2016-04-02T17:56:38+02:00",
        "message": "VideoPlayer/VideoPlayerVideo: use std::list::emplace_back()\n\nReduce overhead.",
        "modified_files_count": 1,
        "modified_files": [
            "xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp"
        ],
        "github_commit_url": "https://github.com/koying/SPMC/commit/0464e115aea5d09f95c7d63b48876a22b565230d",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a push_back operation with emplace_back to reduce overhead by constructing elements in-place.",
            "The optimization strategy involved replacing a push_back operation with emplace_back to reduce overhead by constructing elements in-place within a std::list.",
            "The optimization strategy involved replacing a push_back operation with emplace_back to reduce overhead by constructing elements in-place.",
            "The optimization strategy involved replacing a push_back operation with emplace_back to reduce overhead by constructing elements in-place within a std::list.",
            "The optimization strategy involved replacing a push_back operation with emplace_back to reduce overhead by constructing elements in-place."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a push_back operation with emplace_back to reduce overhead by constructing elements in-place.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "ffmpeg",
        "hash": "cd460f4da04c05d6ba93ccbbe294e948768f0937",
        "author": "Michael Niedermayer",
        "date": "2019-08-12T08:45:07+02:00",
        "message": "avcodec/hnm4video: Optimize postprocess_current_frame()\n\nImproves: Timeout (220sec -> 108sec)\nImproves: 15570/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_HNM4_VIDEO_fuzzer-5085482213441536\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg\nReviewed-by: Tomas Härdin <tjoppen@acc.umu.se>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "modified_files_count": 1,
        "modified_files": [
            "libavcodec/hnm4video.c"
        ],
        "github_commit_url": "https://github.com/allyourcodebase/ffmpeg/commit/cd460f4da04c05d6ba93ccbbe294e948768f0937",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "postprocess_current_frame"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant computations and memory accesses within the `postprocess_current_frame` function by restructuring loops and minimizing unnecessary operations.",
            "The optimization strategy involved replacing a pixel-by-pixel processing loop with a more efficient block-based memory copy operation to reduce computational overhead.",
            "The optimization strategy involved reducing redundant computations and memory accesses within the postprocess_current_frame() function by restructuring loops and minimizing unnecessary operations.",
            "The optimization strategy involved reducing redundant computations within the postprocessing loop by caching and reusing previously computed values.",
            "The optimization strategy involved reducing redundant computations within the postprocessing loop by caching and reusing previously computed values."
        ],
        "is_generic_optimization": [
            false,
            true,
            false,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant computations and memory accesses within the `postprocess_current_frame` function by restructuring loops and minimizing unnecessary operations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "Floorp",
        "hash": "f989d315a85f7abc510a5497234984c8a6d0e9de",
        "author": "Jeff Muizelaar",
        "date": "2012-11-08T16:57:49-05:00",
        "message": "Bug 801437. Reimplement ensure_copy. r=ehsan\n\nThe previous implementation would copy the entire file into memory which\nwould cause a huge amount of memory usage on when copying large files.\nThis version copies a block at a time to avoid this.",
        "modified_files_count": 1,
        "modified_files": [
            "toolkit/mozapps/update/updater/updater.cpp"
        ],
        "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/f989d315a85f7abc510a5497234984c8a6d0e9de",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ensure_copy"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved changing the file copying mechanism from loading the entire file into memory to copying it in smaller blocks to reduce memory usage.",
            "The optimization strategy involved changing the file copying mechanism from loading the entire file into memory to copying it in smaller blocks to reduce memory usage.",
            "The optimization strategy involved changing the file copying mechanism from loading the entire file into memory to copying it in smaller blocks to reduce memory usage.",
            "The optimization strategy involved changing the file copying mechanism from loading the entire file into memory to processing it in smaller blocks to reduce memory usage.",
            "The optimization strategy involved changing the file copying mechanism from loading the entire file into memory to processing it in smaller blocks to reduce memory usage."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved changing the file copying mechanism from loading the entire file into memory to copying it in smaller blocks to reduce memory usage.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "kmsan",
        "hash": "86af5952a8470f96b53830372c64469cb7ce780c",
        "author": "Ming Lei",
        "date": "2019-02-15T08:40:11-07:00",
        "message": "block: loop: pass multi-page bvec to iov_iter\n\niov_iter is implemented on bvec itererator helpers, so it is safe to pass\nmulti-page bvec to it, and this way is much more efficient than passing one\npage in each bvec.\n\nReviewed-by: Christoph Hellwig <hch@lst.de>\nReviewed-by: Omar Sandoval <osandov@fb.com>\nSigned-off-by: Ming Lei <ming.lei@redhat.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "modified_files_count": 1,
        "modified_files": [
            "drivers/block/loop.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/86af5952a8470f96b53830372c64469cb7ce780c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "lo_rw_aio"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involves passing multi-page bvecs to iov_iter instead of single-page bvecs to improve efficiency by reducing the number of iterations.",
            "The optimization strategy involves passing multi-page bvecs to iov_iter instead of single-page bvecs to reduce overhead and improve efficiency.",
            "The optimization strategy involves passing multi-page bvecs to iov_iter instead of single-page bvecs to reduce overhead and improve efficiency.",
            "The optimization strategy involves passing multi-page bvecs to iov_iter instead of single-page bvecs to improve efficiency by reducing the number of iterations.",
            "The optimization strategy involves passing multi-page bvecs to iov_iter instead of single-page bvecs to reduce overhead and improve efficiency."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involves passing multi-page bvecs to iov_iter instead of single-page bvecs to reduce overhead and improve efficiency.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "tensorflow",
        "hash": "41cc606be8dbdc2555236e069711d4c91f00efb9",
        "author": "A. Unique TensorFlower",
        "date": "2019-04-18T04:00:41-07:00",
        "message": "Improve performance of HloValue::SetPositionsAndComputeUses\n\nPreviously it called HloInstruction::OperandIndices what constructed a\nstd::vector with the indices what was unnecessary as we can iterate over\nthe list of operands directly instead.\nPiperOrigin-RevId: 244161260",
        "modified_files_count": 1,
        "modified_files": [
            "tensorflow/compiler/xla/service/hlo_value.cc"
        ],
        "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/41cc606be8dbdc2555236e069711d4c91f00efb9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "HloValue::SetPositionsAndComputeUses"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing the construction of an unnecessary std::vector with direct iteration over the list of operands to reduce overhead.",
            "The optimization strategy involved replacing the construction of an unnecessary std::vector with direct iteration over the list of operands to reduce overhead.",
            "The optimization strategy involved replacing the construction of an unnecessary std::vector with direct iteration over the list of operands to reduce overhead.",
            "The optimization avoids unnecessary construction of a std::vector by directly iterating over the list of operands.",
            "The optimization strategy involved replacing the construction of an unnecessary std::vector with direct iteration over the list of operands to reduce overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing the construction of an unnecessary std::vector with direct iteration over the list of operands to reduce overhead.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "bitcoin",
        "hash": "4fbae77929e6344bc49ab60af10a9c5ff21d2cdf",
        "author": "Marcos Mayorga",
        "date": "2017-04-28T09:33:34+01:00",
        "message": "Improved efficiency in COutPoint constructors",
        "modified_files_count": 1,
        "modified_files": [
            "src/primitives/transaction.h"
        ],
        "github_commit_url": "https://github.com/bitcoin/bitcoin/commit/4fbae77929e6344bc49ab60af10a9c5ff21d2cdf",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "COutPoint"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved modifying the `COutPoint` constructors to reduce unnecessary initializations and improve construction efficiency.",
            "The optimization strategy involved modifying the `COutPoint` constructors to reduce unnecessary initializations and improve construction efficiency.",
            "The optimization strategy involved modifying the COutPoint constructors to reduce unnecessary initializations and improve construction efficiency.",
            "The optimization strategy involved modifying the `COutPoint` constructors to reduce unnecessary initializations and improve construction efficiency.",
            "The optimization strategy involved modifying the `COutPoint` constructors to reduce unnecessary initializations and improve construction efficiency."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved modifying the `COutPoint` constructors to reduce unnecessary initializations and improve construction efficiency.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "FEX",
        "hash": "d3ed9766e8e73e3445bacc6636eefa3c8678a96f",
        "author": "Ryan Houdek",
        "date": "2023-08-22T17:33:34-07:00",
        "message": "X86Tables: Optimize MOVLPD stores\n\nJust use the full register size and store the lower bits.",
        "modified_files_count": 1,
        "modified_files": [
            "FEXCore/Source/Interface/Core/X86Tables/SecondaryTables.cpp"
        ],
        "github_commit_url": "https://github.com/FEX-Emu/FEX/commit/d3ed9766e8e73e3445bacc6636eefa3c8678a96f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "InitializeSecondaryTables"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involves using the full register size for MOVLPD stores and only storing the lower bits, reducing unnecessary memory operations.",
            "The optimization strategy involves using the full register size for MOVLPD stores and only storing the lower bits to improve performance.",
            "The optimization strategy involves using the full register size for MOVLPD stores and only storing the lower bits, reducing unnecessary memory operations.",
            "The optimization strategy involved modifying the MOVLPD instruction handling to use the full register size and store only the lower bits, reducing unnecessary data processing.",
            "The optimization strategy involves using the full register size and storing only the lower bits to improve MOVLPD store operations."
        ],
        "is_generic_optimization": [
            true,
            false,
            true,
            false,
            true
        ],
        "optimization_summary_final": "The optimization strategy involves using the full register size for MOVLPD stores and only storing the lower bits, reducing unnecessary memory operations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "open_evse",
        "hash": "c6ddbe1ed526a010fa9537f0e531976686078ccb",
        "author": "William McBrine",
        "date": "2015-10-17T15:00:51-04:00",
        "message": "Improved square root function -- much, much faster; same results; and it\nsaves 196 bytes of compiled program space, despite longer source code.",
        "modified_files_count": 1,
        "modified_files": [
            "J1772EvseController.cpp"
        ],
        "github_commit_url": "https://github.com/lincomatic/open_evse/commit/c6ddbe1ed526a010fa9537f0e531976686078ccb",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ulong_sqrt"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved rewriting the square root function to use a more efficient algorithm, reducing both execution time and compiled program size.",
            "The optimization strategy involved replacing a potentially iterative or naive square root implementation with a more efficient algorithm, reducing both execution time and compiled code size.",
            "The optimization strategy involved replacing a standard square root implementation with a more efficient algorithm that reduces both execution time and compiled code size while maintaining correctness.",
            "The optimization strategy involved rewriting the square root function to use a more efficient algorithm, reducing both execution time and compiled code size.",
            "The optimization strategy involved replacing a potentially iterative or naive square root implementation with a more efficient algorithm, reducing both execution time and compiled code size."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a standard square root implementation with a more efficient algorithm that reduces both execution time and compiled code size while maintaining correctness.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "ceph",
        "hash": "bf20b661cb6a6a33d9e93fb44ad1470f9f8245d2",
        "author": "Zac Medico",
        "date": "2017-08-24T09:47:23-07:00",
        "message": "PGPool::update: avoid expensive union_of\n\nAchieve the same result using a swap (constant complexity),\nand an assignment (linear complexity).\n\nSigned-off-by: Zac Medico <zmedico@gmail.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/osd/PG.cc"
        ],
        "github_commit_url": "https://github.com/ceph/ceph/commit/bf20b661cb6a6a33d9e93fb44ad1470f9f8245d2",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "PGPool::update"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization replaces an expensive union operation with a swap and assignment to reduce complexity.",
            "The optimization strategy replaces an expensive union operation with a swap and assignment to reduce complexity.",
            "The optimization replaces an expensive union operation with a swap and assignment to reduce complexity.",
            "The optimization strategy replaces an expensive union operation with a swap and assignment to reduce computational complexity.",
            "The optimization strategy replaces an expensive union operation with a swap and assignment to reduce complexity."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy replaces an expensive union operation with a swap and assignment to reduce complexity.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "Floorp",
        "hash": "3a6b5236550c60fee371dbeaff43b61931e208ad",
        "author": "Steven Johnson",
        "date": "2010-06-03T10:35:26-07:00",
        "message": "Bug 527512 - ExprFilter missing trivial optimizations for ugt, ult (r=edwsmith,nnethercote)",
        "modified_files_count": 1,
        "modified_files": [
            "js/src/nanojit/LIR.cpp"
        ],
        "github_commit_url": "https://github.com/Floorp-Projects/Floorp/commit/3a6b5236550c60fee371dbeaff43b61931e208ad",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ExprFilter::ins2"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved simplifying or removing unnecessary greater-than (ugt) and less-than (ult) comparisons in the ExprFilter to improve performance.",
            "The optimization strategy involved simplifying or removing unnecessary greater-than (ugt) and less-than (ult) comparisons in the ExprFilter to improve performance.",
            "The optimization strategy involved simplifying or removing unnecessary greater-than (ugt) and less-than (ult) comparisons in the ExprFilter to improve performance.",
            "The optimization strategy involved simplifying or removing unnecessary logic in the `ExprFilter::ins2` function to handle trivial cases of unsigned greater-than (ugt) and unsigned less-than (ult) comparisons more efficiently.",
            "The optimization strategy involved simplifying or removing unnecessary greater-than (ugt) and less-than (ult) comparisons in the ExprFilter to improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved simplifying or removing unnecessary greater-than (ugt) and less-than (ult) comparisons in the ExprFilter to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "Pixelix",
        "hash": "bc67d0dc16e0505dfcb6111186aba31377a6b1be",
        "author": "BlueAndi",
        "date": "2020-12-31T14:31:52+01:00",
        "message": "Move initialization to initialization list for better performance.",
        "modified_files_count": 1,
        "modified_files": [
            "src/Plugin/Plugins/SunrisePlugin.h"
        ],
        "github_commit_url": "https://github.com/BlueAndi/Pixelix/commit/bc67d0dc16e0505dfcb6111186aba31377a6b1be",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "m_longitude"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved moving member initialization to the initialization list to reduce unnecessary default constructor calls and improve performance.",
            "The optimization strategy involved moving member initialization to the initialization list to reduce unnecessary default construction and assignment operations.",
            "The optimization strategy involved moving member initialization to the constructor's initialization list to reduce unnecessary default constructions and assignments.",
            "The optimization strategy involved moving member initialization to the constructor's initialization list to reduce unnecessary default constructions and assignments.",
            "The optimization strategy involved moving member initialization to the constructor's initialization list to reduce unnecessary default constructions and assignments."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved moving member initialization to the constructor's initialization list to reduce unnecessary default constructions and assignments.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "darktable",
        "hash": "fef9b562d569a00af5ad8db3f709b1623e26a550",
        "author": "ralfbrown",
        "date": "2021-07-28T00:43:59-04:00",
        "message": "speed up drawing ellipse mask\n\nThe existing code uses atan2 to determine the angle, adjusts by the rotation angle of the ellipse,\nand then calls cosf and sinf on the adjusted angle.  We can eliminate the three trigonometric\nfunction calls by instead rotating the coordinate system of the point being processed, thus\nreplacing three trig function calls and a subtraction by a sqrt, two divisions, four\nmultiplications, and two additions.  The resulting code also perfectly auto-vectorizes, for an\noverall speedup by nearly a factor of eight.\n\nTimes (in seconds) reported for `ellipse fill` on mire1.cr2 using `darktable-cli -d perf -d masks`\nwith various integration tests:\n\n0074: 0.1709 -> 0.0217 (7.87x)\n0075: 0.1689 -> 0.0214 (7.89x)\n0076: 0.0955+0.0860 -> 0.0124+0.0115 (7.59x)",
        "modified_files_count": 1,
        "modified_files": [
            "src/develop/masks/ellipse.c"
        ],
        "github_commit_url": "https://github.com/darktable-org/darktable/commit/fef9b562d569a00af5ad8db3f709b1623e26a550",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "_ellipse_get_mask"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization replaces trigonometric function calls with simpler arithmetic operations by rotating the coordinate system, reducing computational overhead and enabling auto-vectorization.",
            "The optimization replaces trigonometric function calls with simpler arithmetic operations by rotating the coordinate system, reducing computational overhead and enabling auto-vectorization.",
            "The optimization replaces trigonometric function calls with coordinate system rotation using simpler arithmetic operations, enabling auto-vectorization and significantly improving performance.",
            "The optimization replaces trigonometric function calls with simpler arithmetic operations by rotating the coordinate system, reducing computational overhead and enabling auto-vectorization.",
            "The optimization replaces trigonometric function calls with coordinate system rotation using arithmetic operations, reducing computational overhead and enabling auto-vectorization."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization replaces trigonometric function calls with simpler arithmetic operations by rotating the coordinate system, reducing computational overhead and enabling auto-vectorization.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "sycl",
        "hash": "da504741da1ffef8386ba281520d72f0b4e5983f",
        "author": "Chris Lattner",
        "date": "2005-04-09T21:43:54+00:00",
        "message": "add a little peephole optimization.  This allows us to codegen:\n\nint a(short i) {\n        return i & 1;\n}\n\nas\n\n_a:\n        andi. r3, r3, 1\n        blr\n\ninstead of:\n\n_a:\n        rlwinm r2, r3, 0, 16, 31\n        andi. r3, r2, 1\n        blr\n\non ppc.  It should also help the other risc targets.\n\nllvm-svn: 21189",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/da504741da1ffef8386ba281520d72f0b4e5983f",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SelectionDAG::getNode"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization eliminates unnecessary bit manipulation operations by directly applying a bitwise AND operation on the input, reducing instruction count in the generated code.",
            "The optimization eliminates unnecessary bit manipulation operations by directly applying a bitwise AND operation on the input, reducing instruction count in the generated code.",
            "The optimization eliminates unnecessary bit manipulation operations by directly applying a bitwise AND operation on the input, reducing instruction count in the generated code.",
            "The optimization eliminates unnecessary bit manipulation operations by directly applying a bitwise AND operation on the input register, reducing instruction count.",
            "The optimization eliminates unnecessary bit manipulation operations by directly applying a bitwise AND operation on the input, reducing instruction count in the generated code."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization eliminates unnecessary bit manipulation operations by directly applying a bitwise AND operation on the input, reducing instruction count in the generated code.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "parrot",
        "hash": "ce6505dc103157c601d9448267ab1733dfd85e26",
        "author": "chromatic",
        "date": "2011-07-04T01:45:58-07:00",
        "message": "[str] Optimized Parrot_str_join given empty joiner.\n\nThis improves the vpm.pir benchmark by a whopping further 7.8%.",
        "modified_files_count": 1,
        "modified_files": [
            "src/string/api.c"
        ],
        "github_commit_url": "https://github.com/parrot/parrot/commit/ce6505dc103157c601d9448267ab1733dfd85e26",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "Parrot_str_join"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids unnecessary string concatenation operations when the joiner is empty by directly returning the concatenated strings.",
            "The optimization avoids unnecessary string concatenation operations when the joiner is empty by directly returning the concatenated strings.",
            "The optimization avoids unnecessary string concatenation operations when the joiner is empty by directly returning the concatenated strings.",
            "The optimization avoids unnecessary string concatenation operations when the joiner is empty by directly returning the concatenated strings.",
            "The optimization avoids unnecessary string concatenation operations when the joiner is empty by directly returning the concatenated strings without any intermediate processing."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary string concatenation operations when the joiner is empty by directly returning the concatenated strings.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "kmsan",
        "hash": "7cf1aaa2ad3855bd5e95bef382a66fe122fc9b01",
        "author": "Andi Kleen",
        "date": "2018-01-14T20:03:49+01:00",
        "message": "x86/timer: Don't inline __const_udelay\n\n__const_udelay is marked inline, and LTO will happily inline it everywhere\n\nDropping the inline saves ~44k text in a LTO build.\n\n13999560        1740864 1499136 17239560        1070e08 vmlinux-with-udelay-inline\n13954764        1736768 1499136 17190668        1064f0c vmlinux-wo-udelay-inline\n\nInlining it has no advantage in general, so its the right thing to do.\n\nSigned-off-by: Andi Kleen <ak@linux.intel.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nLink: https://lkml.kernel.org/r/20171222001821.2157-2-andi@firstfloor.org",
        "modified_files_count": 1,
        "modified_files": [
            "arch/x86/lib/delay.c"
        ],
        "github_commit_url": "https://github.com/google/kmsan/commit/7cf1aaa2ad3855bd5e95bef382a66fe122fc9b01",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "__const_udelay"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved removing the `inline` keyword from the `__const_udelay` function to prevent excessive inlining during Link-Time Optimization (LTO), reducing code size without sacrificing performance benefits.",
            "The optimization strategy involved removing the `inline` keyword from the `__const_udelay` function to prevent excessive inlining during Link-Time Optimization (LTO), reducing code size without sacrificing performance benefits.",
            "The optimization strategy involved removing the `inline` keyword from the `__const_udelay` function to prevent excessive inlining during Link-Time Optimization (LTO), reducing code size without sacrificing performance benefits.",
            "The optimization strategy involved removing the `inline` keyword from the `__const_udelay` function to prevent excessive inlining during Link-Time Optimization (LTO), reducing code size without sacrificing performance benefits.",
            "The optimization strategy involved removing the `inline` keyword from the `__const_udelay` function to prevent excessive inlining during Link-Time Optimization (LTO), reducing code size without sacrificing performance benefits."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved removing the `inline` keyword from the `__const_udelay` function to prevent excessive inlining during Link-Time Optimization (LTO), reducing code size without sacrificing performance benefits.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "monte-carlo-ray-tracer",
        "hash": "fb53f12ecb5abe9b1886c8a1a67e3915a2b23548",
        "author": "Linus Mossberg",
        "date": "2019-10-13T17:49:31+02:00",
        "message": "Improve sphere intersection performance",
        "modified_files_count": 1,
        "modified_files": [
            "source/Surface.cpp"
        ],
        "github_commit_url": "https://github.com/linusmossberg/monte-carlo-ray-tracer/commit/fb53f12ecb5abe9b1886c8a1a67e3915a2b23548",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved restructuring the sphere intersection calculations to reduce redundant computations and improve efficiency.",
            "The optimization strategy involved restructuring the sphere intersection calculations to reduce redundant computations and improve efficiency.",
            "The optimization strategy involved restructuring the sphere intersection calculations to reduce redundant computations and improve efficiency.",
            "The optimization strategy involved restructuring the sphere intersection calculation to reduce redundant computations and improve efficiency.",
            "The optimization strategy involved restructuring the sphere intersection calculations to reduce redundant computations and improve efficiency."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved restructuring the sphere intersection calculations to reduce redundant computations and improve efficiency.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "solidity",
        "hash": "c66905a18999b5c4be2678a7829b6703f902e341",
        "author": "Daniel Kirchner",
        "date": "2024-10-30T20:22:02+01:00",
        "message": "Avoid multiple lookups during body-copying while inlining.",
        "modified_files_count": 1,
        "modified_files": [
            "libyul/optimiser/FullInliner.cpp"
        ],
        "github_commit_url": "https://github.com/ethereum/solidity/commit/c66905a18999b5c4be2678a7829b6703f902e341",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "BodyCopier::translateIdentifier"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy avoids redundant lookups during body-copying by caching or reusing results in the inlining process.",
            "The optimization strategy avoids redundant lookups during body-copying by caching or reusing previously fetched data.",
            "The optimization strategy avoids redundant lookups during body-copying in the inlining process by caching or reusing results.",
            "The optimization strategy avoids redundant lookups during body-copying by caching or reusing results in the inlining process.",
            "The optimization strategy avoids redundant lookups during body-copying by caching or reusing previously fetched data."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy avoids redundant lookups during body-copying by caching or reusing results in the inlining process.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "pqR",
        "hash": "a2e879bc6330544856948e78ddf2859ba410fdd4",
        "author": "Radford Neal",
        "date": "2018-05-31T10:41:43-04:00",
        "message": "speed up real-vec[1-sub] <- int-scalar",
        "modified_files_count": 1,
        "modified_files": [
            "src/main/subset.c"
        ],
        "github_commit_url": "https://github.com/radfordneal/pqR/commit/a2e879bc6330544856948e78ddf2859ba410fdd4",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "spec"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used is to directly assign an integer scalar to a specific index in a real vector, avoiding unnecessary computations or checks.",
            "The optimization strategy used is to directly assign an integer scalar to a specific index in a real vector, avoiding unnecessary computations or checks.",
            "The optimization strategy used is to directly assign an integer scalar to a specific index in a real vector, avoiding unnecessary computations or checks.",
            "The optimization strategy used is to directly assign an integer scalar to a specific index in a real vector, avoiding unnecessary computations or checks.",
            "The optimization strategy used is to directly assign an integer scalar to a specific index in a real vector, avoiding unnecessary computations or checks."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is to directly assign an integer scalar to a specific index in a real vector, avoiding unnecessary computations or checks.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "clang",
        "hash": "027d7ed9d616d93ae7f02de79d17863725b14866",
        "author": "Fariborz Jahanian",
        "date": "2010-06-21T19:49:38+00:00",
        "message": "Use more efficient API of SmallVector/array_pod_sort\nfor sorting (radar 8076356).\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@106453 91177308-0d34-0410-b5e6-96231b3b80d8",
        "modified_files_count": 1,
        "modified_files": [
            "lib/CodeGen/CGDeclCXX.cpp"
        ],
        "github_commit_url": "https://github.com/llvm-mirror/clang/commit/027d7ed9d616d93ae7f02de79d17863725b14866",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CodeGenModule::EmitCXXGlobalInitFunc"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a less efficient sorting method with a more efficient API call for sorting operations in SmallVector/array_pod_sort.",
            "The optimization strategy involved replacing a less efficient sorting method with a more efficient API call for sorting SmallVector or array_pod_sort.",
            "The optimization strategy involved replacing a less efficient sorting method with a more efficient API call for sorting SmallVector or array_pod_sort.",
            "The optimization strategy involved replacing a less efficient sorting method with a more efficient API call for sorting SmallVector or array_pod_sort.",
            "The optimization strategy involved replacing a less efficient sorting method with a more efficient API call for sorting operations in SmallVector/array_pod_sort."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a less efficient sorting method with a more efficient API call for sorting SmallVector or array_pod_sort.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "vcmi",
        "hash": "3a27725fcbc7b6046920b663dcb48e77495d8273",
        "author": "K",
        "date": "2024-08-22T11:39:24+02:00",
        "message": "Optimize CMap::isInTheMap\n\nreplace x >= 0 && x < size by (unsigned)x < size\n\nBy converting signed coordinate to unsigned number, negative values became\nvery large positive ones, larger than every positive signed number and\ntherefore also bigger than the map size. As a result check against size\nalso implicitly checks if coordinate is negative.\n\nCompiler cannot do this transformation automatically because it doesn't\nknow that map dimensions are always positive.\n\nThe change shrinks isInTheMap from 19 instructions to 11 on x86.",
        "modified_files_count": 1,
        "modified_files": [
            "lib/mapping/CMap.cpp"
        ],
        "github_commit_url": "https://github.com/vcmi/vcmi/commit/3a27725fcbc7b6046920b663dcb48e77495d8273",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CMap::isInTheMap"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization replaces a combined signed comparison with an unsigned comparison to implicitly handle negative values and reduce instruction count.",
            "The optimization replaces a two-part bounds check with a single unsigned comparison, leveraging the properties of unsigned integers to implicitly handle negative values.",
            "The optimization replaces a combined signed comparison with an unsigned comparison to implicitly handle negative values and reduce instruction count.",
            "The optimization replaces a combined signed comparison with an unsigned comparison to implicitly handle negative values and reduce instruction count.",
            "The optimization replaces a two-part bounds check with a single unsigned comparison, leveraging the properties of unsigned integers to implicitly handle negative values."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization replaces a combined signed comparison with an unsigned comparison to implicitly handle negative values and reduce instruction count.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "1d068cc0b07694799e077b28dbd272b7982727e2",
        "author": "Chris Lattner",
        "date": "2011-05-22T04:53:24+00:00",
        "message": "switch to using a smallvector to avoid allocations for most normal size instructions.\n\nllvm-svn: 131837",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/MC/MCDisassembler/Disassembler.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/1d068cc0b07694799e077b28dbd272b7982727e2",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a standard vector with a SmallVector to reduce dynamic memory allocations for typical instruction sizes.",
            "The optimization strategy involved replacing a standard vector with a SmallVector to reduce dynamic memory allocations for typical instruction sizes.",
            "The optimization strategy involved replacing a standard vector with a SmallVector to reduce dynamic memory allocations for typical instruction sizes.",
            "The optimization strategy involved replacing a standard vector with a SmallVector to reduce dynamic memory allocations for typical instruction sizes.",
            "The optimization strategy involved replacing a standard vector with a SmallVector to reduce dynamic memory allocations for typical instruction sizes."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a standard vector with a SmallVector to reduce dynamic memory allocations for typical instruction sizes.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "qbe",
        "hash": "7ce4d334e54433f7e67d91baa9edb25adb26975b",
        "author": "Quentin Carbonneaux",
        "date": "2015-09-15T23:01:31-04:00",
        "message": "add a small size optimization to emit",
        "modified_files_count": 1,
        "modified_files": [
            "lisc/emit.c"
        ],
        "github_commit_url": "https://github.com/8l/qbe/commit/7ce4d334e54433f7e67d91baa9edb25adb26975b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "eins"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used is to reduce unnecessary memory allocations by reusing a pre-allocated buffer for small-size operations in the `eins` function.",
            "The optimization strategy used is to reduce unnecessary memory allocations by reusing a pre-allocated buffer for small-size operations in the `eins` function.",
            "The optimization strategy used is reducing unnecessary memory allocations by reusing a pre-allocated buffer for small-size operations in the `eins` function.",
            "The optimization strategy used is to reduce unnecessary memory allocations by reusing a pre-allocated buffer for small-size operations in the `eins` function.",
            "The optimization strategy used is to reduce unnecessary memory allocations by reusing a pre-allocated buffer for small data sizes."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is to reduce unnecessary memory allocations by reusing a pre-allocated buffer for small-size operations in the `eins` function.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "19b5fbdd3d571ee7c55fabb081ebcc30bae64619",
        "author": "Glenn Strauss",
        "date": "2018-11-19T20:52:34-05:00",
        "message": "[mod_fastcgi] transfer chunks minus packet padding\n\n(thx avij)",
        "modified_files_count": 1,
        "modified_files": [
            "src/mod_fastcgi.c"
        ],
        "github_commit_url": "https://github.com/lighttpd/lighttpd1.4/commit/19b5fbdd3d571ee7c55fabb081ebcc30bae64619",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "fcgi_recv_parse"
        ],
        "is_opt_ds": "false",
        "is_opt_ds_simple": "true",
        "repository_name": "lighttpd1.4",
        "optimization_summary": [
            "The optimization strategy involved reducing unnecessary data copying by adjusting how chunks are transferred, specifically by excluding packet padding during the parsing process.",
            "The optimization strategy involved reducing unnecessary data copying by directly transferring chunks without packet padding.",
            "The optimization strategy involved reducing unnecessary data copying by adjusting how chunks are transferred, specifically by excluding packet padding during the parsing process.",
            "The optimization reduces unnecessary data copying by adjusting the chunk size to exclude packet padding during FastCGI data transfer.",
            "The optimization strategy involved reducing unnecessary data copying by adjusting how chunks are transferred, specifically by excluding packet padding during the parsing process."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            false,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing unnecessary data copying by adjusting how chunks are transferred, specifically by excluding packet padding during the parsing process.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "athena",
        "hash": "4aa14714802ab3e5a9521685c9120b0a245ba3e1",
        "author": "Chang-Goo Kim",
        "date": "2020-12-31T13:08:48+09:00",
        "message": "Move phi variable declarations within the simd loop",
        "modified_files_count": 1,
        "modified_files": [
            "src/hydro/srcterms/self_gravity.cpp"
        ],
        "github_commit_url": "https://github.com/PrincetonUniversity/athena/commit/4aa14714802ab3e5a9521685c9120b0a245ba3e1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "HydroSourceTerms::SelfGravity"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved moving variable declarations inside a SIMD loop to potentially improve cache locality and reduce redundant memory operations.",
            "The optimization strategy involved moving variable declarations inside a SIMD loop to potentially improve cache locality and reduce redundant computations.",
            "The optimization strategy involved moving variable declarations inside a SIMD loop to potentially improve cache locality and reduce redundant computations.",
            "The optimization strategy involved moving variable declarations inside a SIMD loop to potentially improve cache locality and reduce redundant computations.",
            "The optimization strategy involved moving variable declarations inside a SIMD loop to potentially improve cache locality and reduce redundant computations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved moving variable declarations inside a SIMD loop to potentially improve cache locality and reduce redundant computations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "pbrt-v4",
        "hash": "a881617a1a9a49561022de53c2cf863cac0e0394",
        "author": "Matt Pharr",
        "date": "2021-07-24T15:45:00-07:00",
        "message": "Parallelize OptiXAggregate::createBuildInputForBLPs()",
        "modified_files_count": 1,
        "modified_files": [
            "src/pbrt/gpu/aggregate.cpp"
        ],
        "github_commit_url": "https://github.com/mmp/pbrt-v4/commit/a881617a1a9a49561022de53c2cf863cac0e0394",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "OptiXAggregate::createBuildInputForBLPs"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used was to parallelize the execution of a loop in the `createBuildInputForBLPs` function, likely leveraging multi-threading or GPU parallelism to improve performance.",
            "The optimization strategy used was to parallelize the execution of a loop by utilizing multiple threads to process iterations concurrently.",
            "The optimization strategy used was to parallelize the execution of the `createBuildInputForBLPs` function, likely by distributing work across multiple threads or GPU cores to improve performance.",
            "The optimization strategy used was to parallelize the execution of a loop in the `createBuildInputForBLPs` function, distributing its workload across multiple threads to improve performance.",
            "The optimization strategy used was to parallelize the execution of the `createBuildInputForBLPs` function to improve performance by leveraging multiple threads or GPU cores."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used was to parallelize the execution of a loop in the `createBuildInputForBLPs` function, likely leveraging multi-threading or GPU parallelism to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "wesnoth",
        "hash": "1a0cc7cc285e36f6048c984644edd4ee0554d51c",
        "author": "Mark de Wever",
        "date": "2008-02-06T21:52:32+00:00",
        "message": "Small optimization, send the parameter by reference instead of a copy.",
        "modified_files_count": 1,
        "modified_files": [
            "src/game_events.cpp"
        ],
        "github_commit_url": "https://github.com/wesnoth/wesnoth/commit/1a0cc7cc285e36f6048c984644edd4ee0554d51c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "cfg_to_loc"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used is passing a parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy used is passing a parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy used is passing a parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy used is passing a parameter by reference instead of by value to avoid unnecessary copying.",
            "The optimization strategy used is passing a parameter by reference instead of by value to avoid unnecessary copying."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is passing a parameter by reference instead of by value to avoid unnecessary copying.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "owt-deps-webrtc",
        "hash": "4637b6afca431be8caf1d22151a2cbb2e86a33d5",
        "author": "aleloi",
        "date": "2017-02-01T11:43:31+00:00",
        "message": "Consistent 30% improvement in audio mixer running time.\n\n(Or, in less flattering terms, fixing a performance issue introduced\na few months ago by me).\n\nIn GN release mode (is_debug = false), the version of the mixer code\nbefore this CL generated code that multiplied each sample (tens of\nthousands/second for each input stream) with a floating point number.\nThis number is almost always exactly 1.0f. The only situation when it's\nnot 1 is when an audio steam is added or removed.\n\nFor one input stream early return leads to a 30% improvement of audio\nmixing time profiled on x86-64 under a release build (is_debug = false,\nenable_profiling, enable_full_stack_frames_for_profiling) with 16kHz and no\nAPM limiter. There can be up to 3 streams.\n\nBUG=chromium:687502\n\nReview-Url: https://codereview.webrtc.org/2659423002\nCr-Commit-Position: refs/heads/master@{#16396}",
        "modified_files_count": 1,
        "modified_files": [
            "webrtc/modules/audio_mixer/audio_frame_manipulator.cc"
        ],
        "github_commit_url": "https://github.com/open-webrtc-toolkit/owt-deps-webrtc/commit/4637b6afca431be8caf1d22151a2cbb2e86a33d5",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids unnecessary floating-point multiplications by early-returning when the multiplier is 1.0f, which is the common case.",
            "The optimization avoids unnecessary floating-point multiplications by early-returning when the multiplier is 1.0f, which is the common case.",
            "The optimization avoids unnecessary floating-point multiplications by early-returning when the multiplier is 1.0f, which is the common case.",
            "The optimization avoids unnecessary floating-point multiplications by early-returning when the multiplier is 1.0f, which is the common case.",
            "The optimization avoids unnecessary floating-point multiplications by early-returning when the multiplier is 1.0f, which is the common case."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary floating-point multiplications by early-returning when the multiplier is 1.0f, which is the common case.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "deadbeef",
        "hash": "1faf17b526a4629676581629d2ac6a9b6db029f9",
        "author": "Oleksiy Yakovenko",
        "date": "2022-12-22T11:19:52+01:00",
        "message": "gtkui: use float type where appropriate, for faster ftoi",
        "modified_files_count": 1,
        "modified_files": [
            "plugins/gtkui/widgets.c"
        ],
        "github_commit_url": "https://github.com/DeaDBeeF-Player/deadbeef/commit/1faf17b526a4629676581629d2ac6a9b6db029f9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "_draw_vline_aa"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing integer calculations with floating-point operations to leverage faster float-to-integer conversion.",
            "The optimization strategy involved replacing integer calculations with floating-point operations to leverage faster float-to-integer conversion.",
            "The optimization strategy involved replacing integer calculations with floating-point operations to leverage faster float-to-integer conversion.",
            "The optimization strategy involved replacing integer calculations with floating-point operations to leverage faster float-to-integer conversion.",
            "The optimization strategy involved changing data types to use floats where appropriate to improve the performance of float-to-integer conversions."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing integer calculations with floating-point operations to leverage faster float-to-integer conversion.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "qtbase",
        "hash": "14d189f7875b7def6f9745bfd20527a0fce19a44",
        "author": "Marc Mutz",
        "date": "2015-11-29T22:47:15+00:00",
        "message": "AndroidStyle: use std::make_shared()\n\nMore efficient, because control block and tracked object\nare co-located in a single memory allocation.\n\nChange-Id: Id18e2d06db43568eb34c2e2d129d1b116af73acb\nReviewed-by: Olivier Goffart (Woboq GmbH) <ogoffart@woboq.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/plugins/platforms/android/qandroidplatformtheme.cpp"
        ],
        "github_commit_url": "https://github.com/qt/qtbase/commit/14d189f7875b7def6f9745bfd20527a0fce19a44",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "loadAndroidStyle"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used is replacing raw `std::shared_ptr` construction with `std::make_shared` to reduce memory allocation overhead by co-locating the control block and object in a single allocation.",
            "The optimization strategy used is replacing raw `std::shared_ptr` construction with `std::make_shared`, which reduces memory allocation overhead by co-locating the control block and the managed object in a single allocation.",
            "The optimization strategy used is replacing raw `std::shared_ptr` construction with `std::make_shared` to reduce memory allocation overhead by co-locating the control block and the managed object.",
            "The optimization strategy used is replacing raw `std::shared_ptr` construction with `std::make_shared` to reduce memory allocation overhead by co-locating the control block and the managed object.",
            "The optimization strategy used is replacing raw `std::shared_ptr` construction with `std::make_shared` to reduce memory allocation overhead by co-locating the control block and the managed object."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used is replacing raw `std::shared_ptr` construction with `std::make_shared` to reduce memory allocation overhead by co-locating the control block and the managed object.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "suricata",
        "hash": "f44bbd71f56581cfc326b0142a26f51ab65f1db0",
        "author": "Victor Julien",
        "date": "2019-03-18T13:02:08+01:00",
        "message": "app-layer/udp: micro optimization",
        "modified_files_count": 1,
        "modified_files": [
            "src/app-layer.c"
        ],
        "github_commit_url": "https://github.com/OISF/suricata/commit/f44bbd71f56581cfc326b0142a26f51ab65f1db0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "AppLayerHandleUdp"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing unnecessary function calls by directly accessing data structures, thereby minimizing overhead in UDP packet handling.",
            "The optimization strategy involved reordering conditional checks to minimize unnecessary evaluations and improve branch prediction.",
            "The optimization strategy involved reducing redundant checks and improving the efficiency of UDP packet handling by restructuring conditional logic.",
            "The optimization strategy involved reducing unnecessary function calls or operations within the UDP handling logic to improve performance.",
            "The optimization strategy involved reducing unnecessary function calls by directly accessing a variable instead of invoking a getter function."
        ],
        "is_generic_optimization": [
            true,
            true,
            false,
            false,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing unnecessary function calls or operations within the UDP handling logic to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "Fulcrum",
        "hash": "5cba060842da98cc0ad8545e1cdd358a040d630a",
        "author": "Calin Culianu",
        "date": "2020-01-03T00:34:37+02:00",
        "message": "Small performance improvement for block processing\n\nAdded a map.reserve() call for an internal hash table used to map\ntxid -> txPos in PreProcessedBlock::fill. This reduces the number of\nallocation during block processing slightly and should shave off a few\ncycles per block processed.",
        "modified_files_count": 1,
        "modified_files": [
            "BlockProc.cpp"
        ],
        "github_commit_url": "https://github.com/cculianu/Fulcrum/commit/5cba060842da98cc0ad8545e1cdd358a040d630a",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved pre-allocating memory for a hash table using `map.reserve()` to minimize dynamic allocations during block processing.",
            "The optimization strategy involved reserving space in a hash table to reduce dynamic memory allocations during block processing.",
            "The optimization strategy involved pre-allocating memory for a hash table using `map.reserve()` to minimize dynamic allocations during block processing.",
            "The optimization strategy involved pre-allocating memory for a hash table using `map.reserve()` to minimize dynamic allocations during block processing.",
            "The optimization strategy involved pre-allocating memory for a hash table using `map.reserve()` to minimize dynamic allocations during block processing."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved pre-allocating memory for a hash table using `map.reserve()` to minimize dynamic allocations during block processing.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "qt-creator",
        "hash": "a9ef0a8af81f4822e8f6190a172747777d0b32af",
        "author": "Orgad Shaneh",
        "date": "2021-10-13T08:08:01+00:00",
        "message": "ClearCase: Minor cleanup\n\nReplace iteration over all documents with a faster lookup.\n\nChange-Id: Iccc20ff2e5a44eef9d0bc925e25ef5c7ebaa98e9\nReviewed-by: hjk <hjk@qt.io>",
        "modified_files_count": 1,
        "modified_files": [
            "src/plugins/clearcase/clearcaseplugin.cpp"
        ],
        "github_commit_url": "https://github.com/qt-creator/qt-creator/commit/a9ef0a8af81f4822e8f6190a172747777d0b32af",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ClearCasePluginPrivate::vcsOpen"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy replaced iteration over all documents with a faster lookup to improve performance.",
            "The optimization strategy replaced iteration over all documents with a faster lookup to improve performance.",
            "The optimization strategy replaced iteration over all documents with a faster lookup to improve performance.",
            "The optimization strategy replaced iteration over all documents with a faster lookup to improve performance.",
            "The optimization strategy replaced iteration over all documents with a faster lookup to improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy replaced iteration over all documents with a faster lookup to improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "radare2",
        "hash": "9e11c5ce633da133e0922bce2591f99d21540c4c",
        "author": "pancake",
        "date": "2015-09-09T17:57:55+02:00",
        "message": "Make reflines 5x faster",
        "modified_files_count": 1,
        "modified_files": [
            "libr/core/disasm.c"
        ],
        "github_commit_url": "https://github.com/radareorg/radare2/commit/9e11c5ce633da133e0922bce2591f99d21540c4c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "handle_reflines_update"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a linear search with a hash-based lookup to reduce the time complexity of finding reference lines.",
            "The optimization strategy involved restructuring the loop to minimize redundant computations and improve cache locality.",
            "The optimization strategy involved replacing a linear search with a hash-based lookup to reduce the time complexity of finding reference lines.",
            "The optimization strategy involved restructuring the loop logic to minimize redundant computations and improve cache locality.",
            "The optimization strategy involved replacing a linear search with a binary search to improve the performance of reflines updates."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a linear search with a hash-based lookup to reduce the time complexity of finding reference lines.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "gdal",
        "hash": "2b4a33db402bfe61e39bfa0840795364f6204b9e",
        "author": "Even Rouault",
        "date": "2019-03-14T22:27:47+01:00",
        "message": "TAB_CSLLoad(): fix performance issue. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=13588. Credit to OSS Fuzz",
        "modified_files_count": 1,
        "modified_files": [
            "gdal/ogr/ogrsf_frmts/mitab/mitab_utils.cpp"
        ],
        "github_commit_url": "https://github.com/OSGeo/gdal/commit/2b4a33db402bfe61e39bfa0840795364f6204b9e",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CSLLoad"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency in a sorted list.",
            "The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency in a sorted list.",
            "The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency in a sorted list.",
            "The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency in a sorted list.",
            "The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency in a sorted list."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved replacing a linear search with a binary search to improve lookup efficiency in a sorted list.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "6835dedb5bbebeadb1ee9f82f87f38a0e47e3171",
        "author": "Chris Lattner",
        "date": "2004-10-06T05:01:07+00:00",
        "message": "Codegen signed mod by 2 or -2 more efficiently.  Instead of generating:\n\nt:\n        mov %EDX, DWORD PTR [%ESP + 4]\n        mov %ECX, 2\n        mov %EAX, %EDX\n        sar %EDX, 31\n        idiv %ECX\n        mov %EAX, %EDX\n        ret\n\nGenerate:\nt:\n        mov %ECX, DWORD PTR [%ESP + 4]\n***     mov %EAX, %ECX\n        cdq\n        and %ECX, 1\n        xor %ECX, %EDX\n        sub %ECX, %EDX\n***     mov %EAX, %ECX\n        ret\n\nNote that the two marked moves are redundant, and should be eliminated by the\nregister allocator, but aren't.\n\nCompare this to GCC, which generates:\n\nt:\n        mov     %eax, DWORD PTR [%esp+4]\n        mov     %edx, %eax\n        shr     %edx, 31\n        lea     %ecx, [%edx+%eax]\n        and     %ecx, -2\n        sub     %eax, %ecx\n        ret\n\nor ICC 8.0, which generates:\n\nt:\n        movl      4(%esp), %ecx                                 #3.5\n        movl      $-2147483647, %eax                            #3.25\n        imull     %ecx                                          #3.25\n        movl      %ecx, %eax                                    #3.25\n        sarl      $31, %eax                                     #3.25\n        addl      %ecx, %edx                                    #3.25\n        subl      %edx, %eax                                    #3.25\n        addl      %eax, %eax                                    #3.25\n        negl      %eax                                          #3.25\n        subl      %eax, %ecx                                    #3.25\n        movl      %ecx, %eax                                    #3.25\n        ret                                                     #3.25\n\nWe would be in great shape if not for the moves.\n\nllvm-svn: 16763",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/Target/X86/X86ISelSimple.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/6835dedb5bbebeadb1ee9f82f87f38a0e47e3171",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy replaces a less efficient signed modulo operation with a more efficient sequence of bitwise and arithmetic operations, reducing instruction count and improving performance.",
            "The optimization strategy replaces a less efficient signed modulo operation with a more efficient sequence of bitwise and arithmetic operations, reducing the number of instructions and avoiding costly division.",
            "The optimization strategy replaces a less efficient signed modulo operation with a more efficient sequence of bitwise and arithmetic operations, reducing instruction count and improving performance.",
            "The optimization strategy replaces a less efficient signed modulo operation with a more efficient sequence of bitwise and arithmetic operations, reducing instruction count and improving performance.",
            "The optimization strategy replaces a less efficient signed modulo operation with a more efficient sequence of bitwise and arithmetic operations, reducing instruction count and improving performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy replaces a less efficient signed modulo operation with a more efficient sequence of bitwise and arithmetic operations, reducing instruction count and improving performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "lzsa",
        "hash": "4864f3c184d371520092669a693fa2ade9e7f58c",
        "author": "Emmanuel Marty",
        "date": "2020-07-10T17:45:13+02:00",
        "message": "Compress LZSA1 a little faster",
        "modified_files_count": 1,
        "modified_files": [
            "src/shrink_block_v1.c"
        ],
        "github_commit_url": "https://github.com/emmanuel-marty/lzsa/commit/4864f3c184d371520092669a693fa2ade9e7f58c",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "lzsa_optimize_forward_v1"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved restructuring the loop to reduce unnecessary computations during the compression process.",
            "The optimization strategy involved restructuring the loop to reduce unnecessary computations during the compression process.",
            "The optimization strategy involved restructuring the loop to reduce unnecessary computations and improve iteration efficiency.",
            "The optimization strategy involved restructuring the loop to reduce unnecessary computations during the compression process.",
            "The optimization strategy involved restructuring the loop to reduce unnecessary computations during the compression process."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved restructuring the loop to reduce unnecessary computations during the compression process.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "xla",
        "hash": "240fd2f32d16b58473e16a4eff51f16a11a3fd6d",
        "author": "Eugene Zhulenev",
        "date": "2022-10-14T08:47:53-07:00",
        "message": "[xla:gpu:runtime] NFC: Micro performance optimizations\n\nPiperOrigin-RevId: 481153499",
        "modified_files_count": 1,
        "modified_files": [
            "xla/service/gpu/runtime/kernel_launch.cc"
        ],
        "github_commit_url": "https://github.com/openxla/xla/commit/240fd2f32d16b58473e16a4eff51f16a11a3fd6d",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "LaunchFunc"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The commit likely involved micro-optimizations such as loop unrolling, inlining, or reducing redundant computations within the `LaunchFunc` function to improve performance.",
            "The commit likely involved micro-optimizations such as loop unrolling, inlining, or reducing redundant computations within the `LaunchFunc` function to improve performance.",
            "The commit implements micro-performance optimizations in the `LaunchFunc` function, likely focusing on reducing overhead or improving efficiency in kernel launches.",
            "The commit likely involved micro-optimizations such as reducing unnecessary computations or improving loop efficiency in the `LaunchFunc` function.",
            "The commit likely involved micro-optimizations such as reducing unnecessary computations or improving loop efficiency in the `LaunchFunc` function."
        ],
        "is_generic_optimization": [
            true,
            true,
            false,
            true,
            true
        ],
        "optimization_summary_final": "The commit likely involved micro-optimizations such as reducing unnecessary computations or improving loop efficiency in the `LaunchFunc` function.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "9c7a5f5efafaa01ccc57a82cc4619f433cbda699",
        "author": "Jasper St. Pierre",
        "date": "2014-11-26T18:10:55-08:00",
        "message": "gtkstylecontext: Optimize GtkStyleContext usage",
        "modified_files_count": 1,
        "modified_files": [
            "gtk/gtkstylecontext.c"
        ],
        "github_commit_url": "https://github.com/GNOME/gtk/commit/9c7a5f5efafaa01ccc57a82cc4619f433cbda699",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "get_cursor_color"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "gtk",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the `get_cursor_color` function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the `get_cursor_color` function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the `get_cursor_color` function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the `get_cursor_color` function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the `get_cursor_color` function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant computations by caching and reusing results within the `get_cursor_color` function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "libulz",
        "hash": "ce4d80cfda0b3e3cc70aedbaeed3c5bb824ce7d7",
        "author": "rofl0r",
        "date": "2011-11-29T18:47:14+01:00",
        "message": "slightly more efficient sblist_delete",
        "modified_files_count": 1,
        "modified_files": [
            "src/sblist/sblist_delete.c"
        ],
        "github_commit_url": "https://github.com/rofl0r/libulz/commit/ce4d80cfda0b3e3cc70aedbaeed3c5bb824ce7d7",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "sblist_delete"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing unnecessary memory shifts in the `sblist_delete` function by directly overwriting the deleted element with the last element in the list.",
            "The optimization strategy involved reducing unnecessary memory shifts in the `sblist_delete` function by directly overwriting the deleted element with the last element in the list.",
            "The optimization strategy involved reducing unnecessary memory shifts in the `sblist_delete` function by directly overwriting the deleted element with the last element in the list.",
            "The optimization strategy involved reducing unnecessary memory shifts in the `sblist_delete` function by directly overwriting the deleted element with the last element in the list.",
            "The optimization strategy involved reducing unnecessary memory shifts in the `sblist_delete` function by directly overwriting the deleted element with the last element in the list."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing unnecessary memory shifts in the `sblist_delete` function by directly overwriting the deleted element with the last element in the list.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "sycl",
        "hash": "e133140fd1e5ea3a5bcadc3e594e1b613c36d9c5",
        "author": "Alexander Kornienko",
        "date": "2017-05-16T15:44:42+00:00",
        "message": "[clang-tidy] Optimize matchers in readability-implicit-bool-cast. NFC\n\nDon't repeat `isInTemplateInstantiation()` and `hasAncestor()` unnecessarily.\nThis speeds up the check by a factor of up to 3 on some large files.\n\nllvm-svn: 303180",
        "modified_files_count": 1,
        "modified_files": [
            "clang-tools-extra/clang-tidy/readability/ImplicitBoolCastCheck.cpp"
        ],
        "github_commit_url": "https://github.com/triSYCL/sycl/commit/e133140fd1e5ea3a5bcadc3e594e1b613c36d9c5",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ImplicitBoolCastCheck::registerMatchers"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids redundant calls to `isInTemplateInstantiation()` and `hasAncestor()` by restructuring the matcher logic, reducing unnecessary computations.",
            "The optimization strategy eliminates redundant calls to `isInTemplateInstantiation()` and `hasAncestor()` to reduce unnecessary computations.",
            "The optimization strategy eliminates redundant calls to `isInTemplateInstantiation()` and `hasAncestor()` to reduce unnecessary computations.",
            "The optimization strategy eliminates redundant calls to `isInTemplateInstantiation()` and `hasAncestor()` to reduce unnecessary computations.",
            "The optimization strategy eliminates redundant calls to `isInTemplateInstantiation()` and `hasAncestor()` to reduce unnecessary computations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy eliminates redundant calls to `isInTemplateInstantiation()` and `hasAncestor()` to reduce unnecessary computations.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "995e4286a047b32aebf8ce540908edb7fbd93f76",
        "author": "Subbaiah Venkata",
        "date": "2007-10-17T08:42:52-07:00",
        "message": "lib/sort.c optimization\n\nHello, I fixed and tested a small bug in lib/sort.c file, heap sort\nfunction.\n\nThe fix avoids unnecessary swap of contents when i is 0 (saves few loads\nand stores), which happens every time sort function is called.  I felt the\nfix is worth bringing it to your attention given the importance and\nfrequent use of the sort function.\n\nAcked-by: Matt Mackall <mpm@selenic.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "modified_files_count": 1,
        "modified_files": [
            "lib/sort.c"
        ],
        "github_commit_url": "https://github.com/OnePlusOSS/android_kernel_oneplus_msm8998/commit/995e4286a047b32aebf8ce540908edb7fbd93f76",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "O"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "android_kernel_oneplus_msm8998",
        "optimization_summary": [
            "The optimization avoids unnecessary swaps in the heap sort function when the index is 0, reducing redundant memory operations.",
            "The optimization avoids unnecessary swaps in the heap sort function when the index is 0, reducing redundant memory operations.",
            "The optimization avoids unnecessary swaps in the heap sort function when the index is 0, reducing redundant memory operations.",
            "The optimization avoids unnecessary swaps in the heap sort function when the index is 0, reducing redundant memory operations.",
            "The optimization avoids unnecessary swaps in the heap sort function when the index is 0, reducing redundant memory operations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary swaps in the heap sort function when the index is 0, reducing redundant memory operations.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "5473aca3767b00eab502b34a37b595de099980ae",
        "author": "Patrick Steinhardt",
        "date": "2024-01-03T09:54:21-08:00",
        "message": "reftable/merged: really reuse buffers to compute record keys\n\nIn 829231dc20 (reftable/merged: reuse buffer to compute record keys,\n2023-12-11), we have refactored the merged iterator to reuse a pair of\nlong-living strbufs by relying on the fact that `reftable_record_key()`\ntries to reuse already allocated strbufs by calling `strbuf_reset()`,\nwhich should give us significantly fewer reallocations compared to the\nold code that used on-stack strbufs that are allocated for each and\nevery iteration. Unfortunately, we called `strbuf_release()` on these\nlong-living strbufs that we meant to reuse on each iteration, defeating\nthe optimization.\n\nFix this performance issue by not releasing those buffers on iteration\nanymore, where we instead rely on `merged_iter_close()` to release the\nbuffers for us.\n\nUsing `git show-ref --quiet` in a repository with ~350k refs this leads\nto a significant drop in allocations. Before:\n\n    HEAP SUMMARY:\n        in use at exit: 21,163 bytes in 193 blocks\n      total heap usage: 1,410,148 allocs, 1,409,955 frees, 61,976,068 bytes allocated\n\nAfter:\n\n    HEAP SUMMARY:\n        in use at exit: 21,163 bytes in 193 blocks\n      total heap usage: 708,058 allocs, 707,865 frees, 36,783,255 bytes allocated\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
        "modified_files_count": 1,
        "modified_files": [
            "reftable/merged.c"
        ],
        "github_commit_url": "https://github.com/git/git/commit/5473aca3767b00eab502b34a37b595de099980ae",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "merged_iter_next_entry"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "git",
        "optimization_summary": [
            "The optimization strategy involves reusing long-living buffers across iterations to minimize memory reallocations.",
            "The optimization strategy involves reusing long-living buffers across iterations to minimize memory reallocations and reduce heap usage.",
            "The optimization strategy involves reusing long-living buffers across iterations to minimize memory reallocations and reduce heap usage.",
            "The optimization strategy involves reusing long-living buffers across iterations to minimize memory reallocations and improve performance.",
            "The optimization strategy involves reusing long-living buffers across iterations to minimize memory reallocations and reduce heap usage."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involves reusing long-living buffers across iterations to minimize memory reallocations and reduce heap usage.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "bitcoin",
        "hash": "3252208cb10be645bae415c90fb2ed8217838490",
        "author": "João Barbosa",
        "date": "2016-03-09T10:10:36+00:00",
        "message": "Improve EncodeBase58 performance",
        "modified_files_count": 1,
        "modified_files": [
            "src/base58.cpp"
        ],
        "github_commit_url": "https://github.com/bitcoin/bitcoin/commit/3252208cb10be645bae415c90fb2ed8217838490",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "EncodeBase58"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used loop unrolling to reduce the number of iterations and improve the performance of the base58 encoding process.",
            "The optimization strategy used loop unrolling and reduced unnecessary memory accesses to improve the performance of the Base58 encoding algorithm.",
            "The optimization strategy used loop unrolling to reduce the number of iterations and improve the performance of the base58 encoding process.",
            "The optimization strategy used loop unrolling to reduce the number of iterations and improve the performance of the EncodeBase58 function.",
            "The optimization strategy used loop unrolling to reduce the number of iterations and improve the performance of the base58 encoding process."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used loop unrolling to reduce the number of iterations and improve the performance of the base58 encoding process.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "ceph",
        "hash": "fcff420a580d7f24cdd81aebf6c3b01c5f8785f7",
        "author": "lightmelodies",
        "date": "2023-11-26T06:07:27+00:00",
        "message": "rgw: optimize gc chain size calculation\n\nReduce time complexity of gc chain size calculation from O(n^2) to O(n).\n\nSigned-off-by: Wei Wang <lightmelodies@outlook.com>",
        "modified_files_count": 1,
        "modified_files": [
            "src/rgw/driver/rados/rgw_gc.cc"
        ],
        "github_commit_url": "https://github.com/ceph/ceph/commit/fcff420a580d7f24cdd81aebf6c3b01c5f8785f7",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "RGWGC::send_split_chain"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy used was to reduce the time complexity of the gc chain size calculation from O(n^2) to O(n) by improving the algorithm's efficiency.",
            "The optimization strategy used was to reduce the time complexity of the gc chain size calculation from O(n^2) to O(n) by improving the algorithm's efficiency.",
            "The optimization strategy reduced the time complexity of the gc chain size calculation by replacing a nested loop structure with a single loop and using a more efficient data structure for lookups.",
            "The optimization strategy used was to reduce the time complexity of the gc chain size calculation from O(n^2) to O(n) by improving the algorithm's efficiency.",
            "The optimization strategy used was to reduce the time complexity of the gc chain size calculation from O(n^2) to O(n) by improving the algorithm's efficiency."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy used was to reduce the time complexity of the gc chain size calculation from O(n^2) to O(n) by improving the algorithm's efficiency.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "ompi",
        "hash": "d5d16c21623c97a561ae818eb9c9db4a0c3eaf05",
        "author": "George Bosilca",
        "date": "2006-01-19T23:57:03+00:00",
        "message": "A slighy faster version. The if outside the for not inside.\n\nThis commit was SVN r8761.",
        "modified_files_count": 1,
        "modified_files": [
            "ompi/class/ompi_free_list.c"
        ],
        "github_commit_url": "https://github.com/open-mpi/ompi/commit/d5d16c21623c97a561ae818eb9c9db4a0c3eaf05",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ompi_free_list_grow"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved moving a conditional check outside of a loop to avoid redundant evaluations during each iteration.",
            "The optimization strategy involved moving a conditional check outside of a loop to reduce redundant evaluations.",
            "The optimization strategy involved moving a conditional check outside of a loop to avoid redundant evaluations during each iteration.",
            "The optimization strategy involved moving a conditional check outside of a loop to avoid redundant evaluations during each iteration.",
            "The optimization strategy involved moving a conditional check outside of a loop to avoid redundant evaluations during each iteration."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved moving a conditional check outside of a loop to avoid redundant evaluations during each iteration.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "Halide",
        "hash": "fca8d9606145d0c42caac1954c37d86fa291fea0",
        "author": "Marcos Slomp",
        "date": "2023-07-28T09:55:19-07:00",
        "message": "Making Metal code-gen a bit faster (#7720)\n\nremoving redundant print_expr() call",
        "modified_files_count": 1,
        "modified_files": [
            "src/CodeGen_Metal_Dev.cpp"
        ],
        "github_commit_url": "https://github.com/halide/Halide/commit/fca8d9606145d0c42caac1954c37d86fa291fea0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CodeGen_Metal_Dev::CodeGen_Metal_C::visit"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved removing a redundant function call to improve performance by eliminating unnecessary computations.",
            "The optimization strategy involved removing a redundant function call to improve performance by eliminating unnecessary computations.",
            "The optimization strategy involved removing a redundant function call to improve performance by eliminating unnecessary computations.",
            "The optimization strategy involved removing a redundant function call to improve performance by eliminating unnecessary computation.",
            "The optimization strategy involved removing a redundant function call to improve performance by eliminating unnecessary computations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved removing a redundant function call to improve performance by eliminating unnecessary computations.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "ImageMagick6",
        "hash": "0132164f33ea82daf732f3923c2fb141cb834dcc",
        "author": "Cristy",
        "date": "2021-07-25T20:32:32-04:00",
        "message": "reduce memory moves",
        "modified_files_count": 1,
        "modified_files": [
            "magick/histogram.c"
        ],
        "github_commit_url": "https://github.com/ImageMagick/ImageMagick6/commit/0132164f33ea82daf732f3923c2fb141cb834dcc",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CheckImageColors"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing memory moves by directly manipulating image data in place rather than creating intermediate copies.",
            "The optimization strategy reduces memory moves by reorganizing how pixel data is accessed and processed in the histogram computation.",
            "The optimization strategy involved reducing memory moves by restructuring how pixel data is accessed and processed in the CheckImageColors function.",
            "The optimization strategy involved restructuring the code to minimize unnecessary memory operations by directly accessing data in place.",
            "The optimization strategy reduces memory moves by reordering operations to minimize data copying."
        ],
        "is_generic_optimization": [
            true,
            false,
            false,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing memory moves by directly manipulating image data in place rather than creating intermediate copies.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "silifuzz",
        "hash": "5875d5deab8d2f0419a376628a66782959546ea1",
        "author": "Doug Kwan",
        "date": "2024-03-28T10:49:18-07:00",
        "message": "#silifuzz Fix a minor performance issue in crc32c computation.\n\nWe should not do byte-wise CRC update at the end of input if remaining input size is a multiple of sizeof(uint64_t).\n\nPiperOrigin-RevId: 619989373",
        "modified_files_count": 1,
        "modified_files": [
            "util/crc32c.cc"
        ],
        "github_commit_url": "https://github.com/google/silifuzz/commit/5875d5deab8d2f0419a376628a66782959546ea1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "crc32c_accelerated_impl"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization avoids unnecessary byte-wise CRC updates by checking if the remaining input size is a multiple of sizeof(uint64_t).",
            "The optimization avoids unnecessary byte-wise CRC updates by checking if the remaining input size is a multiple of `sizeof(uint64_t)` before proceeding.",
            "The optimization avoids byte-wise CRC updates at the end of input when the remaining size is a multiple of sizeof(uint64_t), improving efficiency by leveraging aligned data processing.",
            "The optimization avoids unnecessary byte-wise CRC updates by checking if the remaining input size is a multiple of sizeof(uint64_t).",
            "The optimization avoids unnecessary byte-wise CRC updates by checking if the remaining input size is a multiple of sizeof(uint64_t)."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization avoids unnecessary byte-wise CRC updates by checking if the remaining input size is a multiple of sizeof(uint64_t).",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "duckstation",
        "hash": "4e802e90caa14d95ea56a68faabcd95d2c7702f1",
        "author": "Connor McLaughlin",
        "date": "2021-01-20T12:32:37+10:00",
        "message": "SPU: Move voice key off/on outside sample loop\n\nShould be a very tiny performance boost with no difference in behaviour.",
        "modified_files_count": 1,
        "modified_files": [
            "src/core/spu.cpp"
        ],
        "github_commit_url": "https://github.com/stenzek/duckstation/commit/4e802e90caa14d95ea56a68faabcd95d2c7702f1",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SPU::Execute"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization moves the voice key off/on operations outside of the sample loop to reduce redundant checks and improve performance.",
            "The optimization moves the voice key off/on operations outside of the sample loop to reduce redundant checks and improve performance.",
            "The optimization moves the voice key off/on operations outside of the sample loop to reduce redundant checks and improve performance.",
            "The optimization strategy moves the voice key off/on operations outside of the sample loop to reduce redundant checks and improve performance.",
            "The optimization strategy moves the voice key off/on operations outside of the sample loop to reduce redundant checks and improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization moves the voice key off/on operations outside of the sample loop to reduce redundant checks and improve performance.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "fastbasic",
        "hash": "721036c954f346c71fef730230e273301ec6ac54",
        "author": "Daniel Serpell",
        "date": "2018-03-01T22:53:45-03:00",
        "message": "Adds an optimizer pass to replace A <= x with A < x+1.",
        "modified_files_count": 1,
        "modified_files": [
            "src/compiler/peephole.cc"
        ],
        "github_commit_url": "https://github.com/dmsc/fastbasic/commit/721036c954f346c71fef730230e273301ec6ac54",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "peephole"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy replaces comparisons of the form \"A <= x\" with \"A < x+1\" to potentially improve performance by simplifying or aligning better with low-level instruction handling.",
            "The optimization strategy replaces comparisons of the form \"A <= x\" with \"A < x+1\" to potentially improve performance by simplifying or aligning better with low-level instruction handling.",
            "The optimization strategy replaces comparisons of the form \"A <= x\" with \"A < x+1\" to potentially improve performance by simplifying or aligning better with low-level instruction handling.",
            "The optimization strategy replaces comparisons of the form \"A <= x\" with \"A < x+1\" to potentially improve performance by simplifying or aligning better with low-level instruction handling.",
            "The optimization strategy replaces comparisons of the form \"A <= x\" with \"A < x+1\" to potentially improve performance by simplifying or aligning better with low-level instruction handling."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy replaces comparisons of the form \"A <= x\" with \"A < x+1\" to potentially improve performance by simplifying or aligning better with low-level instruction handling.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "sparselizard",
        "hash": "280d40b3e06d8bb8ec4af35823802f1823511ad5",
        "author": "Alexandre Halbach",
        "date": "2021-03-08T08:57:42+02:00",
        "message": "minor speedup defineinneroverlapinterfaces",
        "modified_files_count": 1,
        "modified_files": [
            "src/mesh/dtracker.cpp"
        ],
        "github_commit_url": "https://github.com/halbux/sparselizard/commit/280d40b3e06d8bb8ec4af35823802f1823511ad5",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "dtracker::defineinneroverlapinterfaces"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the function.",
            "The optimization strategy involved replacing a nested loop structure with a more efficient single loop to reduce redundant computations.",
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the function.",
            "The optimization strategy involved reducing redundant computations by caching and reusing results within the function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant computations by caching and reusing results within the function.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "OpenOCD",
        "hash": "f4b9a2fc8bbc682e957276a0012199a606c919b0",
        "author": "Rodrigo L. Rosa",
        "date": "2011-06-12T11:18:27+02:00",
        "message": "flash speed improved",
        "modified_files_count": 1,
        "modified_files": [
            "src/target/dsp5680xx.c"
        ],
        "github_commit_url": "https://github.com/arduino/OpenOCD/commit/f4b9a2fc8bbc682e957276a0012199a606c919b0",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "dsp5680xx_f_wr"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant memory accesses by caching frequently used data in local variables.",
            "The optimization strategy involved reducing redundant memory accesses by caching frequently used data in local variables.",
            "The optimization strategy involved reducing redundant memory accesses by caching frequently used data in local variables.",
            "The optimization strategy involved reducing redundant memory accesses by caching frequently used data in local variables.",
            "The optimization strategy involved reducing redundant memory accesses by caching frequently used data in local variables."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant memory accesses by caching frequently used data in local variables.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "xbmc",
        "hash": "c3746317e21702a6fc53b13689df69fe78b74d34",
        "author": "Tobias Markus",
        "date": "2024-09-01T11:47:44+02:00",
        "message": "xbmc base: cppcheck performance fixes",
        "modified_files_count": 1,
        "modified_files": [
            "xbmc/Util.cpp"
        ],
        "github_commit_url": "https://github.com/xbmc/xbmc/commit/c3746317e21702a6fc53b13689df69fe78b74d34",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "GetHomePath"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing unnecessary string operations and improving loop efficiency in the `GetHomePath` function.",
            "The optimization strategy involved reducing unnecessary string operations and improving memory handling within the GetHomePath function.",
            "The optimization strategy involved replacing a local variable with a direct return statement to eliminate unnecessary intermediate storage.",
            "The optimization strategy involved reducing unnecessary string operations and improving memory handling within the `GetHomePath` function.",
            "The optimization strategy involved replacing a string concatenation operation with a more efficient direct assignment to reduce unnecessary memory allocations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved reducing unnecessary string operations and improving memory handling within the GetHomePath function.",
        "is_generic_optimization_final": true
    },
    {
        "hash": "7e0f51cb445be8d3aee80e433ed8da4a33ad0157",
        "author": "Andy Lutomirski",
        "date": "2015-10-07T11:34:06+02:00",
        "message": "x86/uaccess: Add unlikely() to __chk_range_not_ok() failure paths\n\nThis should improve code quality a bit. It also shrinks the kernel text:\n\n Before:\n       text     data      bss       dec    filename\n   21828379  5194760  1277952  28301091    vmlinux\n\n After:\n       text     data      bss       dec    filename\n   21827997  5194760  1277952  28300709    vmlinux\n\n... by 382 bytes.\n\nSigned-off-by: Andy Lutomirski <luto@kernel.org>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: Denys Vlasenko <dvlasenk@redhat.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: linux-kernel@vger.kernel.org\nLink: http://lkml.kernel.org/r/f427b8002d932e5deab9055e0074bb4e7e80ee39.1444091584.git.luto@kernel.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
        "modified_files_count": 1,
        "modified_files": [
            "arch/x86/include/asm/uaccess.h"
        ],
        "github_commit_url": "https://github.com/OnePlusOSS/android_kernel_oneplus_msm8998/commit/7e0f51cb445be8d3aee80e433ed8da4a33ad0157",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "get_fs"
        ],
        "is_opt_ds_simple": "true",
        "repository_name": "android_kernel_oneplus_msm8998",
        "optimization_summary": [
            "The optimization strategy involved adding `unlikely()` macros to failure paths in the `__chk_range_not_ok()` function to improve branch prediction and reduce kernel text size.",
            "The optimization strategy involved adding `unlikely()` macros to failure paths in the `__chk_range_not_ok()` function to improve branch prediction and reduce kernel text size.",
            "The optimization strategy involved adding `unlikely()` macros to failure paths in the `__chk_range_not_ok()` function to improve branch prediction and reduce kernel text size.",
            "The optimization strategy involved adding `unlikely()` macros to failure paths in the `__chk_range_not_ok()` function to improve branch prediction and reduce kernel text size.",
            "The optimization strategy involved adding `unlikely()` macros to failure paths in the `__chk_range_not_ok()` function to improve branch prediction and reduce kernel text size."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "optimization_summary_final": "The optimization strategy involved adding `unlikely()` macros to failure paths in the `__chk_range_not_ok()` function to improve branch prediction and reduce kernel text size.",
        "is_generic_optimization_final": true
    },
    {
        "repository_name": "redot-engine",
        "hash": "4dad9c6c05921cf98c9ee59a5f28358496912433",
        "author": "katsuhisa yuasa",
        "date": "2024-10-19T14:09:34+09:00",
        "message": "optimize ImageLoaderSVG::create_image_from_utf8_buffer",
        "modified_files_count": 1,
        "modified_files": [
            "modules/svg/image_loader_svg.cpp"
        ],
        "github_commit_url": "https://github.com/Redot-Engine/redot-engine/commit/4dad9c6c05921cf98c9ee59a5f28358496912433",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "ImageLoaderSVG::create_image_from_utf8_buffer"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing redundant computations and memory allocations within the `create_image_from_utf8_buffer` function by reusing precomputed values and avoiding unnecessary intermediate steps.",
            "The optimization strategy involved reducing redundant computations and memory allocations within the SVG image creation process by reusing existing data structures and avoiding unnecessary conversions.",
            "The optimization strategy involved reducing redundant computations and memory allocations within the `create_image_from_utf8_buffer` function by reusing existing resources and simplifying logic.",
            "The optimization strategy involved reducing redundant computations and memory allocations within the `create_image_from_utf8_buffer` function by reusing existing resources and simplifying logic.",
            "The optimization strategy involved reducing redundant computations and memory allocations within the SVG image creation process by reusing existing data structures and avoiding unnecessary conversions."
        ],
        "is_generic_optimization": [
            true,
            false,
            true,
            true,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant computations and memory allocations within the `create_image_from_utf8_buffer` function by reusing existing resources and simplifying logic.",
        "is_generic_optimization_final": true
    }
]