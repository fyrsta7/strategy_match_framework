hash,repository_name,file1_1_optimization_summary_final,file1_1_is_generic_optimization_final,file2_1_optimization_summary_final,file2_1_is_generic_optimization_final,file1_2_optimization_summary_final,file1_2_is_generic_optimization_final,file1_2_is_strategy_equivalent_final,file2_2_optimization_summary_final,file2_2_is_generic_optimization_final,file2_2_is_strategy_equivalent_final
025b85b4ac078110302c039556e4c12ba8e7a731,rocksdb,The optimization strategy involved reducing the amount of work performed by bzip in the test to avoid timeouts.,False,The optimization strategy reduces the workload by decreasing the amount of data processed in a test to avoid timeouts caused by slow operations.,False,The optimization strategy involved reducing the amount of work in the test by decreasing the number of iterations or data processed to avoid timeouts caused by slow bzip operations.,False,NA,The optimization strategy reduces the workload by decreasing the amount of data processed in a test to avoid timeouts caused by slow operations.,False,NA
cd21e4e69d76ec4ec3b080c8cdae016ac2309cc5,rocksdb,The optimization strategy involved reverting preallocation in `autovector`s to avoid unnecessary memory usage when only a small subset of keys require querying the underlying database.,False,"The optimization strategy involved reverting preallocation in containers to avoid unnecessary memory usage when only a small subset of keys require database queries, thus optimizing memory efficiency.",True,The optimization strategy involved reverting preallocation in `autovector`s to avoid unnecessary memory usage in cases where only a small subset of keys require querying the underlying database.,False,NA,The optimization strategy involves reverting preallocation in containers to avoid unnecessary memory usage and potential performance degradation when only a small subset of keys require database querying.,True,False
5c456c4c08ac046429c38792d242dd095c50b049,rocksdb,The commit optimizes compaction speed by adjusting the handling of marked files in a unit test.,False,"The optimization strategy involves adjusting the test logic to ensure accurate measurement and improvement of compaction speed for marked files, thereby enhancing the efficiency of the compaction process.",False,The commit fixes a test case related to compaction speedup for marked files by adjusting the test logic to ensure accurate performance measurement.,False,NA,The optimization strategy involves adjusting the test logic to ensure accurate measurement and improvement of compaction speed for marked files.,False,NA
92ad4a88f3199b013532b37d6598c442319355a5,rocksdb,The optimization strategy reused a decoded key in multiple places to avoid redundant decoding of length-prefixed keys.,True,"The optimization strategy involves reusing previously decoded keys to avoid redundant decoding operations, thereby reducing CPU overhead.",True,The optimization strategy reused the decoded key in more places to avoid redundant decoding of length-prefixed keys.,True,False,"The optimization strategy involves reusing previously decoded key data to avoid redundant decoding operations, thereby reducing CPU overhead.",True,False
2e5a323dbd4dbfad5b1e3d45d489e6dca37f4257,rocksdb,"The optimization strategy involved replacing the yield instruction with an isb instruction on arm64 to better mimic the behavior of the x86 pause instruction, improving performance in spin-wait loops.",False,"The optimization strategy involves replacing a less effective instruction with a more suitable one for a specific architecture (arm64) to better mimic the behavior of a pause instruction, thereby improving spin-wait loop performance.",False,"The optimization strategy involved replacing the yield instruction with an isb instruction on arm64 to better mimic the behavior of the x86 pause instruction, improving spin-wait loop performance.",False,NA,"The optimization strategy involves replacing a less effective instruction with a more suitable one for a specific architecture (arm64) to better mimic the behavior of a pause instruction, thereby improving spin-wait loop performance.",False,NA
b8b7117e97e649fc65d0a4dd397caf9a39fb71b1,rocksdb,The optimization strategy involves replacing `size() > 0` with `empty()` to ensure constant time complexity for checking container emptiness.,True,"The optimization strategy involves replacing size() > 0 checks with empty() to ensure constant time complexity for container emptiness checks, improving performance by leveraging standard guarantees.",True,"The optimization strategy involves replacing `size() > 0` with `empty()` to check for container emptiness, leveraging the constant time complexity of `empty()`.",True,True,"The optimization strategy involves replacing `size() > 0` with `empty()` to ensure constant time complexity when checking for container emptiness, improving performance by avoiding potential linear time complexity of `size()`.",True,True
beeee9dccc338ae7129016f2f2e17d2a40ecc5df,rocksdb,The optimization strategy involves reducing the frequency of expensive `ToString()` calls to minimize memory allocation overhead during compaction.,True,The optimization strategy reduces the overhead of expensive string operations by minimizing the use of costly ToString() calls during compaction.,True,The optimization strategy involves reducing the overhead of expensive `ToString()` calls by avoiding unnecessary string allocations during compaction.,True,False,"The optimization strategy reduces the overhead of expensive string operations by minimizing the use of costly `ToString()` calls during compaction, thereby decreasing memory allocation and improving performance.",True,False
d438e1ec174bdf1474edcdf9902fe3cb14b8a1e2,rocksdb,The optimization strategy involves removing an extra cache lookup in the BlockBasedTable::NewRangeTombstoneIterator() function to reduce CPU usage.,False,The optimization strategy involves reducing redundant cache lookups to improve CPU efficiency by eliminating unnecessary operations in a specific function.,True,The optimization strategy involves removing an extra cache lookup in BlockBasedTable::NewRangeTombstoneIterator() to reduce CPU usage.,False,NA,The optimization strategy involves reducing redundant cache lookups to improve CPU efficiency by eliminating unnecessary operations in a specific iterator function.,True,False
55652043c83c463ce57b7748e01c6d12bb5bf9fe,rocksdb,The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.,True,The optimization strategy involves passing function parameters by reference instead of by value to reduce unnecessary copying and improve performance.,True,The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.,True,True,The optimization strategy involves passing function parameters by reference instead of by value to reduce unnecessary copying and improve performance.,True,True
d2b0652b32b8671c9ec4057e6da2fa564d1cc610,rocksdb,"The optimization strategy involves computing the compaction score once for a batch of range file deletions instead of recalculating it for each deletion, reducing redundant calculations.",True,The optimization reduces redundant computations by calculating the compaction score once for a batch of file deletions instead of recalculating it for each individual deletion.,True,"The optimization strategy involves computing the compaction score once for a batch of range file deletions instead of recalculating it for each deletion, reducing redundant calculations.",False,NA,"The optimization reduces redundant calculations by computing the compaction score once for a batch of file deletions instead of recalculating it for each individual deletion, thereby improving performance.",True,False
821887036e5235c827029d14decb185bea01ec4b,rocksdb,The optimization strategy involves pinning L0 filter and index blocks in cache during compaction to improve performance when the `pin_l0_filter_and_index_blocks_in_cache` option is enabled.,False,The optimization strategy involves pinning filter and index blocks in cache for specific compaction outputs to reduce access latency and improve performance.,False,The optimization strategy involves pinning L0 filter and index blocks in cache during compaction outputs to improve performance when the `pin_l0_filter_and_index_blocks_in_cache` option is enabled.,False,NA,The optimization strategy involves pinning filter and index blocks in cache for specific compaction outputs to reduce access latency and improve performance.,False,NA
18eeb7b90e45af4bbac0777021711d8547f41eca,rocksdb,The optimization strategy involved fixing the interference between `max_total_wal_size` and `db_write_buffer_size` checks to prevent unnecessary OOMs by ensuring proper flushing of memtables.,False,The optimization strategy involves adjusting the interaction between memory management checks to prevent unnecessary flushing and improve write performance under high throughput conditions.,False,"The optimization strategy involves modifying the condition checks in `WriteImpl` to ensure that `write_buffer_manager_->ShouldFlush()` is evaluated independently of `total_log_size_` being greater than `GetMaxTotalWalSize()`, preventing unnecessary memtable flushes.",False,NA,The optimization strategy involves adjusting the interaction between memory management checks to prevent unnecessary memory growth and improve write performance by ensuring appropriate flushing behavior.,False,NA
f053851af643755dc2ee252f92e3853b30a12be3,rocksdb,The optimization strategy involves ignoring non-overlapping levels when determining grandparent files to improve compaction efficiency.,False,The optimization strategy involves skipping non-overlapping levels when determining grandparent files for compaction to avoid unnecessary operations and improve efficiency.,False,The optimization strategy involves ignoring non-overlapping levels when determining grandparent files to improve compaction efficiency.,False,NA,The optimization strategy involves skipping non-overlapping levels when determining grandparent files to avoid unnecessary compaction work and improve efficiency.,False,NA
f69071265203edb0084f136b03bd4fcb42f16911,rocksdb,The optimization strategy involved speeding up the shutdown process of db_bench by modifying the destructor of the Benchmark class.,False,The optimization strategy involves speeding up the shutdown process by reducing unnecessary operations or overhead during the termination phase of the application.,True,The optimization strategy involved speeding up the shutdown process of db_bench by reducing unnecessary operations during termination.,False,NA,The optimization strategy involves speeding up the shutdown process by reducing unnecessary operations or overhead during the termination phase of the application.,True,False
4704833357a8609e7c42df4f337f938a8e870c08,rocksdb,The optimization strategy involves passing the input string to WriteBatch() by const reference to reduce data copying.,True,"The optimization strategy involves passing input strings by const reference to avoid unnecessary data copying, thereby reducing overhead and improving performance.",True,The optimization strategy involves passing an input string to the WriteBatch function by const reference to reduce data copying.,True,True,"The optimization strategy involves passing input strings by const reference to avoid unnecessary data copying, thereby reducing overhead and improving performance.",True,True
e48ccc28f4eebcc05b6333b129ee5908214d3259,rocksdb,The optimization strategy involves avoiding writing file checksum manifest entries when they are unused to save manifest file space.,False,"The optimization strategy reduces unnecessary data writing by skipping the inclusion of file checksum entries in the manifest when they are not used, thereby saving storage space and improving performance.",True,The optimization strategy involves avoiding writing file checksum manifest entries when they are unused to save manifest file space.,False,NA,"The optimization strategy reduces unnecessary data writing by skipping the generation of file checksum entries in the manifest when they are not used, thereby saving storage space and improving performance.",True,True
f9cfc6a808c9dc3ab7366edb10368559155d5172,rocksdb,"The optimization strategy involves avoiding the fetching of the uncompression dictionary for non-data blocks when it is not needed, specifically in the context of partitioned index and dictionary compression.",False,The optimization strategy involves avoiding unnecessary operations (fetching uncompression dictionaries) for non-data blocks to reduce CPU overhead and improve performance.,True,The optimization strategy involves avoiding the fetching of the uncompression dictionary for non-data blocks when partitioned index and dictionary compression are enabled.,False,NA,The optimization strategy involves avoiding unnecessary operations (fetching uncompression dictionaries) for non-data blocks to reduce CPU overhead and improve performance.,True,True
063471bf7613544496a4d4b5a1e1ba4a7aa605cf,rocksdb,The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.,True,The optimization strategy involves passing function parameters by reference instead of by value to avoid unnecessary copying and improve performance.,True,The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.,True,True,The optimization strategy involves passing function parameters by reference instead of by value to reduce unnecessary copying and improve performance.,True,True
9b51af5a17f3cfd754575894e090dd867fb47740,rocksdb,"The optimization strategy involved moving iteration creation work outside of a mutex to reduce contention, leaving only object reference and get operations inside the mutex.",False,"The optimization strategy reduces mutex contention by moving iteration creation work outside of the mutex, leaving only object reference and retrieval operations inside the mutex.",True,"The optimization strategy involves moving iteration creation works outside of a mutex to reduce contention, leaving only object reference and get operations inside the mutex.",False,NA,"The optimization strategy reduces mutex contention by moving iteration creation work outside of the mutex, leaving only object reference and retrieval operations inside the mutex.",True,False
a2de8e52bb6c13baf5f2323eba0ca356f1294f88,rocksdb,The optimization strategy used perfect forwarding in the `emplace_back` function to improve performance by avoiding unnecessary copies or moves.,True,"The optimization strategy used perfect forwarding to eliminate unnecessary copying or moving of objects, improving the efficiency of the `emplace_back` function.",True,The optimization strategy used perfect forwarding in the `emplace_back` function to improve performance by avoiding unnecessary copies or moves.,True,False,"The optimization strategy involved using perfect forwarding in the `emplace_back` function to avoid unnecessary copying or moving of objects, thereby improving performance by directly constructing objects in place.",True,False
dbeaa0d397fd2d26e105817242782024d1e607b7,rocksdb,The optimization strategy involved reducing the number of iterations in a test from 5000 to 1000 to shorten execution time without significantly impacting test quality.,False,The optimization strategy reduces the number of iterations in a test to shorten execution time without significantly impacting test quality.,False,The optimization strategy involved reducing the number of iterations in a test from 5000 to 1000 to shorten execution time without significantly impacting test quality.,False,NA,The optimization strategy reduces the number of iterations in a test to shorten execution time while maintaining test quality.,False,NA
30a017fecae60aa7b87c4a1e283b6ac027724a92,rocksdb,The optimization strategy combines two separate reads (one for the blob value and one for the CRC checksum) into a single read to reduce I/O overhead.,True,The optimization strategy combines multiple separate read operations into a single read operation to reduce I/O overhead and improve throughput.,True,The optimization strategy combines two separate reads (blob value and CRC checksum) into a single read to reduce I/O overhead.,True,False,The optimization strategy combines multiple separate read operations into a single read operation to reduce I/O overhead and improve throughput.,True,False
c3c13db346749c3dfe45e167db2129c645377e9e,rocksdb,The optimization strategy involved adding an exit condition to avoid a full memtable scan when the current key does not match the user key.,False,"The optimization strategy involves adding an early exit condition to avoid unnecessary full scans when a key is not found, thereby reducing redundant operations and improving lookup performance.",True,The optimization strategy involved adding an exit condition to avoid a full memtable scan when the current key does not match the user key.,False,NA,"The optimization strategy involves adding an early exit condition to avoid unnecessary full scans when a key is not found, thereby reducing redundant operations and improving lookup performance.",True,False
3f89af1c39da4991ef6c544fc5e3f164a688b375,rocksdb,The optimization strategy involved reducing the number of random iterations in a test to decrease execution time under TSAN.,False,The optimization strategy reduces the number of random iterations in a test to decrease execution time and prevent timeouts.,False,The optimization strategy involved reducing the number of random iterations in a test to decrease execution time under TSAN.,False,NA,The optimization strategy reduces the number of random iterations in a test to decrease execution time and prevent timeouts.,False,NA
8558457143bfa76d61e0d2f715e40ec2ddb6ffc2,rocksdb,The optimization strategy involves initializing member variables in the constructor's initialization list instead of the constructor body to improve performance.,True,The optimization strategy involves initializing member variables in the constructor's initialization list instead of the constructor body to avoid unnecessary default construction and assignment operations.,True,The optimization strategy involves initializing class member variables in the constructor's initialization list instead of the constructor body to improve performance.,True,False,The optimization strategy involves initializing member variables in the constructor's initialization list instead of the constructor body to avoid unnecessary default construction and assignment operations.,True,False
4634c735a8bb4f83b8099928fb12b50ad8df7b88,rocksdb,The optimization strategy involved updating the `IncreaseParallelism` function to use the `max_background_jobs` setting instead of directly setting `max_background_compactions` or `max_background_flushes` to improve performance by reducing stalls caused by blocked background threads.,False,The optimization strategy involves increasing parallelism by adjusting background job settings to prevent stalls and improve throughput.,True,The optimization strategy involved updating `DBOptions::IncreaseParallelism` to use the `max_background_jobs` setting instead of directly setting `max_background_compactions` or `max_background_flushes` to improve parallelism and reduce stalls.,False,NA,The optimization strategy involves increasing parallelism by adjusting background job settings to prevent stalls and improve throughput.,True,False
21171615c10ee1a636ea28f2303a93a4bc39dbde,rocksdb,The optimization strategy involved reducing the execution time of a specific test by modifying its implementation to run faster.,False,The optimization strategy reduces the execution time of a randomized test by decreasing the number of iterations or simplifying the test logic to focus on essential scenarios.,False,The optimization strategy involved reducing the number of random iterations in a test to decrease execution time.,False,NA,The optimization strategy reduces the execution time of a randomized test by decreasing the number of iterations or simplifying the test logic to focus on essential scenarios.,False,NA
873f1356a1781e8d638973ea320b722d3240fc5a,rocksdb,The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.,True,The optimization strategy involves passing a function parameter by reference instead of by value to avoid unnecessary copying and improve performance.,True,The optimization strategy involved passing a function parameter by reference instead of by value to reduce copy overhead.,True,True,The optimization strategy involves passing a function parameter by reference instead of by value to avoid unnecessary copying and improve performance.,True,True
1fa5dff7d1ce7be64555e7bdc8371be562b3eac6,rocksdb,The optimization strategy involves reordering the writers list in the WriteThread::EnterAsBatchGroupLeader function to maximize throughput and reduce IOPS by allowing the leader to take more commits.,False,"The optimization strategy involves reordering the writers list to allow a leader to process more commits in a batch, thereby maximizing system throughput and reducing IOPS.",True,"The optimization strategy involved reordering the writers list in WriteThread::EnterAsBatchGroupLeader to allow the leader to take more commits, thereby maximizing system throughput and reducing IOPS.",False,NA,"The optimization strategy involves reordering the writers list to allow a leader to process more commits in a batch, thereby maximizing system throughput and reducing IOPS.",True,False
90d835507581324d0449f1ded4f56a8b16f20bf7,rocksdb,"The optimization strategy involved correcting the address calculation for prefetching to ensure the proper byte is accessed, reducing unnecessary memory operations.",True,"The optimization strategy involves correcting the memory address calculation for prefetching to ensure the correct byte is accessed, improving cache efficiency by reducing unnecessary memory fetches.",True,The optimization strategy corrected the address calculation for prefetching by using the proper byte index in the data array instead of the bit index.,True,True,"The optimization strategy involves correcting the memory address calculation for prefetching to ensure the correct byte is accessed, improving cache efficiency and reducing unnecessary memory operations.",True,False
fa4de6e30ffaf9188a48f5e30d2da1ac0e454917,rocksdb,The optimization strategy involved reversing the order of operands in a function call to improve performance by leveraging the expected behavior of the merge operation.,False,The optimization strategy involved reversing the order of operands in a function call to improve performance by ensuring more efficient merging operations.,False,The optimization strategy involved reversing the order of operands in the **MergeOperator::ShouldMerge** call to improve performance.,False,NA,The optimization strategy involves reversing the order of operands in a function call to improve performance by ensuring more efficient merging operations.,False,NA
25403c2265cb700462d59fa3cb9dbec85d25d48f,rocksdb,The optimization strategy involved adding explicit prefetch instructions to reduce filter lookup overhead by ensuring cache lines are prefetched for unaligned filter data.,True,"The optimization strategy involves adding explicit prefetch instructions to reduce cache line misses during filter lookup, thereby improving data access efficiency.",True,The optimization strategy involves adding explicit prefetch instructions to reduce filter lookup overhead by ensuring cache lines are prefetched for unaligned filter data.,True,False,The optimization strategy involves adding explicit prefetch instructions to reduce cache misses during filter lookup by ensuring data is fetched into the cache before it is needed.,True,True
01cbdd2aae8f998e3e532dec06f0f373a6cff719,rocksdb,The optimization strategy involved adjusting storage parameters to start compression at an earlier level (level 1 instead of level 2) to improve performance.,False,"The optimization strategy involves adjusting compression levels to start earlier, reducing the amount of data processed at higher levels and improving overall storage efficiency.",True,The optimization strategy involved adjusting storage parameters to start compression at level 1 instead of level 2 to improve performance.,False,NA,"The optimization strategy involves adjusting compression levels to start earlier, reducing the amount of data processed at higher levels and improving overall storage efficiency.",False,NA
08be1803eecb5ae464440812ea06e79b21289053,rocksdb,"The optimization strategy involved avoiding unnecessary calls to `SleepForMicroseconds()` when no delay is set, specifically in debug mode.",True,The optimization strategy involves avoiding unnecessary sleep calls in debug mode to reduce overhead and improve performance.,True,"The optimization strategy involved avoiding unnecessary calls to `SleepForMicroseconds()` when no delay is set, specifically in debug mode.",True,False,The optimization strategy involves avoiding unnecessary sleep calls in debug mode to reduce overhead and improve performance.,True,False
20dc5e74f276bdcb26c44c13bced506a2d920d3f,rocksdb,The optimization strategy involves reordering conditions in an if-statement to check a simpler condition (`filter != CompactionFilter::Decision::kRemoveAndSkipUntil`) before calling a more computationally expensive function (`range_del_agg->ShouldDelete`).,True,"The optimization strategy involves reordering conditional checks to evaluate simpler conditions first, thereby avoiding unnecessary expensive function calls when possible.",True,The optimization strategy involves reordering conditions in an if-statement to check a simpler condition (`filter != CompactionFilter::Decision::kRemoveAndSkipUntil`) before calling a more computationally expensive function (`range_del_agg->ShouldDelete`).,True,True,"The optimization strategy involves reordering conditional checks to evaluate simpler conditions first, thereby avoiding unnecessary expensive function calls.",True,False
48b0a045da0ef7c07b59c529fc9a5c5f682853b6,rocksdb,"The optimization strategy involved reducing the number of levels in the database from 65,000 to a more manageable number to significantly speed up the ComputeCompactionScore() function and the overall test execution time.",False,"The optimization strategy involved reducing the number of levels in the database to significantly decrease the computation time of a critical function, thereby improving overall test performance.",False,"The optimization strategy involved reducing the number of levels in the database from 65,000 to a smaller number to significantly speed up the ComputeCompactionScore() function and the overall test performance.",False,NA,"The optimization strategy involved reducing the number of levels in a database to significantly decrease the computation time of a critical function, thereby improving overall test performance.",False,NA
9f246298e2f0af3973918a0dac0c5f46bc0993c0,rocksdb,The optimization strategy involved iterating over a vector by reference instead of by value to reduce copy overhead.,True,"The optimization strategy involves iterating over a vector by reference instead of by value to avoid unnecessary copying of elements, thereby improving performance.",True,The optimization strategy involved iterating over a vector by reference instead of by value to reduce copy overhead.,True,True,"The optimization strategy involves iterating over a vector by reference instead of by value to avoid unnecessary copying of elements, thereby improving performance by reducing overhead.",True,True
d8df169b8498609eda28c0d6c2d91588b0aa925b,rocksdb,The optimization strategy involves releasing the DB mutex during the call to `ApproximateSize` to avoid blocking other operations while waiting for I/O.,False,"The optimization strategy involves releasing a mutex lock during I/O operations to allow other threads to proceed, thereby reducing contention and improving overall performance.",True,The optimization strategy involves releasing the DB mutex when calling `ApproximateSize` to avoid blocking other operations during I/O.,False,NA,"The optimization strategy involves releasing a mutex lock during I/O operations to allow other threads to proceed, thereby reducing contention and improving overall performance.",True,True
68ca534169a4f9e1930f6511109e973b43cf5998,rocksdb,The optimization strategy used was passing a function parameter by reference instead of by value to avoid unnecessary copying.,True,The optimization strategy involves passing function parameters by reference instead of by value to avoid unnecessary copying and improve performance.,True,The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.,True,True,The optimization strategy involves passing function parameters by reference instead of by value to avoid unnecessary copying and improve performance.,True,True
53910ddb152fbcba95a3e04b058a997c40f654ae,rocksdb,The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.,True,The optimization strategy involves passing function parameters by reference instead of by value to reduce unnecessary copying and improve performance.,True,The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.,True,True,The optimization strategy involves passing function parameters by reference instead of by value to reduce unnecessary copying and improve performance.,True,True
b8cea7cc279fe609de85b7ce4f50d4ff4f90047f,rocksdb,The optimization strategy used was replacing erase operations with iterator-based erasures to improve performance.,True,"The optimization strategy involves using iterators for erasing elements, which generally improves performance by reducing the overhead associated with element removal in data structures.",True,The optimization strategy involved using iterators for erasing elements to improve performance.,True,False,"The optimization strategy involves using iterators for erasing elements, which generally improves performance by reducing the overhead associated with element removal in data structures.",True,True
f82e693a31d07ab8b391888ff60eb7ff5b95bd13,rocksdb,"The optimization strategy involves skipping the `Invalidate` function call if the vectors it clears are already empty, saving CPU cycles.",True,"The optimization strategy involves skipping a function call that clears vectors when it is known that the vectors are already empty, thereby saving CPU cycles.",True,"The optimization strategy involves skipping the `Invalidate` function call if the vectors it clears are already empty, saving CPU cycles.",True,True,"The optimization strategy involves skipping a function call that clears vectors when it is known that the vectors are already empty, thereby saving CPU cycles.",True,True
93548ce8f451a701ad0967ba705f04fef80aa11a,rocksdb,The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.,True,"The optimization strategy involves passing a function parameter by reference instead of by value to avoid unnecessary copying of data, thereby improving performance.",True,The optimization strategy involved passing a function parameter by reference instead of by value to avoid unnecessary copying.,True,True,"The optimization strategy involves passing a function parameter by reference instead of by value to avoid unnecessary copying of data, thereby improving performance.",True,True
536e9973e30d70fd510e5ab6e423ef75248ed582,rocksdb,"The optimization strategy involved removing an assert statement that caused O(n^2) complexity in debug mode, reducing the complexity to O(n) for the insert operation.",True,The optimization strategy involves removing an unnecessary assertion check in a critical path operation to reduce the time complexity from O(n^2) to O(n) in debug mode.,True,"The optimization strategy involved removing an assert statement that caused O(n^2) complexity in debug mode, reducing it to O(n) for the insert operation.",True,True,"The optimization strategy involves removing an assertion check in a critical path to reduce the time complexity from O(n^2) to O(n) in debug mode, thereby improving performance.",True,True
b278ae8e50466e8073a1754a506145df5bb27c72,rocksdb,"The optimization strategy used fractional cascading to reduce the range of file searches in `ForwardIterator::Seek()`, thereby minimizing the number of comparisons needed.",False,"The optimization strategy reduces the search range by using fractional cascading to minimize unnecessary comparisons, thereby improving search efficiency.",True,The optimization strategy used fractional cascading in ForwardIterator::Seek() to reduce the search range and avoid unnecessary comparisons.,False,NA,"The optimization strategy used fractional cascading to reduce the search range and avoid unnecessary comparisons, thereby improving search efficiency in a multi-threaded environment.",True,False
e94eea4527f2d7de82a6bf3303177977011e5dd9,rocksdb,The optimization strategy involved removing an unnecessary string resize operation in WriteBatch::Clear to avoid re-allocation overhead during merged write batches.,True,"The optimization strategy involves removing unnecessary string resizing operations to avoid redundant memory reallocations, thereby improving performance by reducing overhead.",True,The optimization strategy involved removing an unnecessary string resize operation in WriteBatch::Clear to avoid re-allocation overhead during merged write batches.,True,True,"The optimization strategy involves removing unnecessary string resizing operations to avoid repeated memory reallocations, thereby improving performance by reducing overhead.",True,False
22028aa9ab27cf860b74d12e006f82ff551caee0,rocksdb,The optimization strategy involved ensuring that compaction reads strictly adhere to the specified `compaction_readahead_size` limit to avoid unnecessary data fetching.,False,The optimization strategy involves limiting the read size during compaction operations to the specified `compaction_readahead_size` to avoid unnecessary data fetching and improve I/O efficiency.,False,The optimization strategy involved ensuring that compaction reads strictly adhere to the user-specified `compaction_readahead_size` to avoid unnecessary data reads.,False,NA,The optimization strategy involves limiting the amount of data read during compaction operations to the specified `compaction_readahead_size` to avoid unnecessary I/O overhead and improve performance by reducing excessive readahead.,False,NA
43c789c8f246a2a35864e3fca9585b55c40c2095,rocksdb,The optimization strategy replaces `size() > 0` with `!empty()` to leverage the constant time complexity of `empty()` across different container types.,True,"The optimization strategy involves replacing `size() > 0` with `empty()` to leverage the constant time complexity of `empty()` across different container types, improving performance by reducing unnecessary computation.",True,The optimization strategy involves replacing `size() > 0` with `empty()` to leverage constant time complexity for checking container emptiness.,True,True,"The optimization strategy involves replacing `size() > 0` with `empty()` to leverage constant time complexity for checking container emptiness, improving performance by reducing unnecessary computational overhead.",True,True
e8ab1934d9cb3ffebd61097d67bb23439554b265,rocksdb,"The optimization strategy involved moving iteration creation works outside of a mutex to reduce contention, leaving only object reference and get operations inside the mutex.",False,"The optimization strategy reduces mutex contention by moving iteration creation work outside of the mutex, leaving only object reference and retrieval operations inside the mutex.",True,"The optimization strategy involves moving iteration creation works outside of a mutex to reduce contention, leaving only object reference and get operations inside the mutex.",False,NA,"The optimization strategy reduces mutex contention by moving iteration creation work outside of the mutex, leaving only object reference and retrieval operations inside the mutex.",True,False
82e8e9e26bb16d1af07a26741bcf63d8342e4336,rocksdb,The optimization strategy used was merging two sorted arrays (`base_files` and `added_files`) to reduce the complexity of the `SaveTo` function from higher than linear to linear time.,True,"The optimization strategy involves leveraging the sorted nature of two arrays to merge them in linear time, reducing the complexity from a higher-order operation.",True,The optimization strategy used was to merge two sorted arrays (`base_files` and `added_files`) in linear time instead of a less efficient approach.,True,True,"The optimization strategy involves leveraging the sorted nature of two arrays to merge them in linear time, reducing the complexity of the operation.",True,True
