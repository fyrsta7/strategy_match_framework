[
    {
        "repository_name": "mlib",
        "hash": "743959ebde33e9a5452799e02c245cee02ebada2",
        "author": "Patrick Pelissier",
        "date": "2020-05-16T14:09:49+02:00",
        "message": "Fix micro performance issue",
        "modified_files_count": 1,
        "modified_files": [
            "m-array.h"
        ],
        "github_commit_url": "https://github.com/P-p-H-d/mlib/commit/743959ebde33e9a5452799e02c245cee02ebada2",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "M_C"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved fixing a micro performance issue in the M_C function within the m-array.h file.",
            "The optimization strategy involved fixing a micro performance issue in the M_C function within m-array.h.",
            "The optimization strategy involved fixing a micro performance issue in the M_C function within the m-array.h file.",
            "The optimization strategy involved fixing a micro performance issue in the M_C function within m-array.h.",
            "The optimization strategy involved reducing unnecessary function calls and improving loop efficiency in the array handling code."
        ],
        "is_generic_optimization": [
            false,
            false,
            false,
            false,
            true
        ],
        "is_strategy_equivalent": [
            "NA",
            "NA",
            "NA",
            "NA",
            false
        ],
        "optimization_summary_final": "The optimization strategy involved fixing a micro performance issue in the M_C function within m-array.h.",
        "is_generic_optimization_final": false,
        "is_strategy_equivalent_final": "NA"
    },
    {
        "repository_name": "Xapiand",
        "hash": "0dc94caa1c6f86ab4200ade9a183c06341357085",
        "author": "JoseMariaVR",
        "date": "2017-03-24T13:05:40-06:00",
        "message": "Optimization in test geospatial query make_search",
        "modified_files_count": 1,
        "modified_files": [
            "tests/test_geospatial_query.cc"
        ],
        "github_commit_url": "https://github.com/Kronuz/Xapiand/commit/0dc94caa1c6f86ab4200ade9a183c06341357085",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing the number of random iterations in a test section to improve performance.",
            "The optimization strategy involved reordering conditions in if-statements with multiple conditions connected by AND operators to improve performance by evaluating the most likely false condition first.",
            "The optimization strategy involved reducing the number of random iterations in a test section to improve performance.",
            "The optimization strategy involved reordering conditions in if-statements with multiple conditions connected by AND operators to improve performance by evaluating the most likely or least expensive conditions first.",
            "The optimization strategy involved reducing the number of random iterations in a test section to improve performance."
        ],
        "is_generic_optimization": [
            false,
            true,
            false,
            true,
            false
        ],
        "is_strategy_equivalent": [
            "NA",
            true,
            "NA",
            false,
            "NA"
        ],
        "optimization_summary_final": "The optimization strategy involved reducing the number of random iterations in a test section to improve performance.",
        "is_generic_optimization_final": false,
        "is_strategy_equivalent_final": "NA"
    },
    {
        "repository_name": "criu",
        "hash": "2449656e10cb1725fe58399e5f07fe55f6c282d9",
        "author": "Pavel Emelyanov",
        "date": "2016-01-13T16:21:21+03:00",
        "message": "util: Optimize vaddr_to_pfn\n\nSigned-off-by: Pavel Emelyanov <xemul@virtuozzo.com>",
        "modified_files_count": 1,
        "modified_files": [
            "util.c"
        ],
        "github_commit_url": "https://github.com/checkpoint-restore/criu/commit/2449656e10cb1725fe58399e5f07fe55f6c282d9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "vaddr_to_pfn"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing the number of memory accesses by caching the result of a previous computation in the `vaddr_to_pfn` function.",
            "The optimization strategy involved improving the efficiency of the `vaddr_to_pfn` function by reducing redundant operations and streamlining the address-to-page-frame-number conversion process.",
            "The optimization strategy involved improving the efficiency of the `vaddr_to_pfn` function by reducing redundant operations and streamlining the address-to-page-frame-number conversion process.",
            "The optimization strategy involved improving the efficiency of the `vaddr_to_pfn` function by reducing redundant operations and streamlining the address-to-page-frame-number conversion process.",
            "The optimization strategy involved reducing the number of memory accesses by caching the result of a previous computation in the `vaddr_to_pfn` function."
        ],
        "is_generic_optimization": [
            true,
            false,
            false,
            false,
            true
        ],
        "is_strategy_equivalent": [
            false,
            "NA",
            "NA",
            "NA",
            false
        ],
        "optimization_summary_final": "The optimization strategy involved improving the efficiency of the `vaddr_to_pfn` function by reducing redundant operations and streamlining the address-to-page-frame-number conversion process.",
        "is_generic_optimization_final": false,
        "is_strategy_equivalent_final": "NA"
    },
    {
        "repository_name": "BsodSurvivor",
        "hash": "774785a79d14c95d467dd0224761723d51b5f9da",
        "author": "Chris Lattner",
        "date": "2006-09-03T07:53:50+00:00",
        "message": "minor speedup\n\nllvm-svn: 30065",
        "modified_files_count": 1,
        "modified_files": [
            "llvm/lib/CodeGen/LiveIntervalAnalysis.cpp"
        ],
        "github_commit_url": "https://github.com/ykfre/BsodSurvivor/commit/774785a79d14c95d467dd0224761723d51b5f9da",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The commit likely implements a minor speedup by optimizing a specific function or operation within the LiveIntervalAnalysis.cpp file, though the exact changes cannot be determined due to the missing repository directory.",
            "The commit likely implements a minor speedup by optimizing a specific function or operation within the LiveIntervalAnalysis.cpp file.",
            "The commit likely implements a minor speedup by optimizing loop iteration or reducing unnecessary computations in the LiveIntervalAnalysis.cpp file.",
            "The commit likely implements a minor speedup by optimizing loop iteration or condition checks in the LiveIntervalAnalysis.cpp file.",
            "The commit likely implements a minor speedup by optimizing a specific function in the LiveIntervalAnalysis.cpp file, though the exact strategy cannot be determined without the code changes."
        ],
        "is_generic_optimization": [
            false,
            false,
            true,
            true,
            false
        ],
        "is_strategy_equivalent": [
            "NA",
            "NA",
            false,
            false,
            "NA"
        ],
        "optimization_summary_final": "The commit likely implements a minor speedup by optimizing a specific function or operation within the LiveIntervalAnalysis.cpp file.",
        "is_generic_optimization_final": false,
        "is_strategy_equivalent_final": "NA"
    },
    {
        "repository_name": "CuraEngine",
        "hash": "693774fcfb880220c0bd5928810be01bd3c93a8b",
        "author": "Lipu Fei",
        "date": "2017-07-07T11:03:58+02:00",
        "message": "Optimize SupportLayer::excludeAreasFromSupportInfillAreas()\n\nCURA-2724",
        "modified_files_count": 1,
        "modified_files": [
            "src/sliceDataStorage.cpp"
        ],
        "github_commit_url": "https://github.com/Ultimaker/CuraEngine/commit/693774fcfb880220c0bd5928810be01bd3c93a8b",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "SupportLayer::excludeAreasFromSupportInfillAreas"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing the number of unnecessary iterations and checks within the `SupportLayer::excludeAreasFromSupportInfillAreas` function to improve performance.",
            "The optimization strategy involved reducing the number of polygon intersection operations by pre-filtering areas that do not need to be processed.",
            "The optimization strategy involved reducing the number of polygon intersection operations by pre-filtering areas that do not need support infill.",
            "The optimization strategy involved reducing the number of unnecessary operations by avoiding redundant checks and computations within the `excludeAreasFromSupportInfillAreas` function.",
            "The optimization strategy involved reducing the number of intersection calculations by pre-filtering areas to exclude from support infill, thereby minimizing unnecessary computations."
        ],
        "is_generic_optimization": [
            true,
            false,
            false,
            true,
            false
        ],
        "is_strategy_equivalent": [
            false,
            "NA",
            "NA",
            false,
            "NA"
        ],
        "optimization_summary_final": "The optimization strategy involved reducing the number of polygon intersection operations by pre-filtering areas that do not need support infill.",
        "is_generic_optimization_final": false,
        "is_strategy_equivalent_final": "NA"
    },
    {
        "repository_name": "maplab",
        "hash": "394d7cbd64eea3ee00993c7a9a8ce1210fe4def6",
        "author": "Marius Fehr",
        "date": "2020-04-09T13:17:24+02:00",
        "message": "Update console-plugins/map-optimization-plugin/src/optimizer-plugin.cc\n\nCo-Authored-By: Thomas Schneider <schneith@ethz.ch>",
        "modified_files_count": 1,
        "modified_files": [
            "console-plugins/map-optimization-plugin/src/optimizer-plugin.cc"
        ],
        "github_commit_url": "https://github.com/ethz-asl/maplab/commit/394d7cbd64eea3ee00993c7a9a8ce1210fe4def6",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "OptimizerPlugin::OptimizerPlugin"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reordering conditions in if-statements with multiple conditions connected by AND operators to prioritize cheaper evaluations.",
            "The commit optimizes performance by reducing the frequency of logging operations within the optimizer plugin.",
            "The commit optimizes the initialization of the OptimizerPlugin by reducing redundant computations and improving memory access patterns.",
            "The optimization strategy involved reducing the number of random iterations in a test section by changing the loop count from 10 to 30.",
            "The commit reduces the number of iterations in a loop to improve performance by decreasing computational overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            false,
            false
        ],
        "is_strategy_equivalent": [
            false,
            false,
            false,
            "NA",
            "NA"
        ],
        "optimization_summary_final": "The commit reduces the number of iterations in a loop to improve performance by decreasing computational overhead.",
        "is_generic_optimization_final": true,
        "is_strategy_equivalent_final": false
    },
    {
        "repository_name": "TOWNSEMU",
        "hash": "cebcc209693651729a0aa853a909616a797f6108",
        "author": "CaptainYS",
        "date": "2020-10-30T12:42:27-04:00",
        "message": "Small speed up.",
        "modified_files_count": 1,
        "modified_files": [
            "src/cpu/i486inst.cpp"
        ],
        "github_commit_url": "https://github.com/captainys/TOWNSEMU/commit/cebcc209693651729a0aa853a909616a797f6108",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing the number of memory allocations by reusing a pre-allocated buffer within a loop.",
            "The optimization strategy involved reducing the number of conditional checks by combining multiple conditions into a single check to improve performance.",
            "The optimization strategy involved reordering conditions in an if-statement to prioritize the evaluation of cheaper conditions first, reducing unnecessary computations.",
            "The optimization strategy involved reducing the number of conditional checks within a loop to minimize overhead.",
            "The optimization strategy involved replacing a loop with a direct memory copy operation to reduce overhead."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "is_strategy_equivalent": [
            false,
            false,
            false,
            false,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved reducing the number of conditional checks within a loop to minimize overhead.",
        "is_generic_optimization_final": true,
        "is_strategy_equivalent_final": false
    },
    {
        "repository_name": "endurox",
        "hash": "91d5c57a0d5c02134a3cbdeccf792dfc3d04a984",
        "author": "spuhpointer",
        "date": "2016-07-07T10:59:30+03:00",
        "message": "Some speedup",
        "modified_files_count": 1,
        "modified_files": [
            "libubf/ubf_impl.c"
        ],
        "github_commit_url": "https://github.com/endurox-dev/endurox/commit/91d5c57a0d5c02134a3cbdeccf792dfc3d04a984",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "validate_entry"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing the number of conditional checks in the `validate_entry` function by reordering and simplifying the logic to improve performance.",
            "The optimization strategy involved reducing redundant checks and simplifying the validation logic in the `validate_entry` function to improve performance.",
            "The optimization strategy involved reducing the number of conditional checks in the `validate_entry` function by reordering and consolidating conditions to improve execution speed.",
            "The optimization strategy involved reducing redundant checks and simplifying the validation logic for entries to improve performance.",
            "The optimization strategy involved reducing redundant checks and simplifying the validation logic in the `validate_entry` function to improve performance."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "is_strategy_equivalent": [
            false,
            true,
            false,
            false,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved reducing redundant checks and simplifying the validation logic in the `validate_entry` function to improve performance.",
        "is_generic_optimization_final": true,
        "is_strategy_equivalent_final": false
    },
    {
        "repository_name": "NPLRuntime",
        "hash": "8a4073ca0890a53aeb571781657e8a57ee50a7ee",
        "author": "kkvskkkk",
        "date": "2017-08-02T16:10:46+08:00",
        "message": "optimize performance",
        "modified_files_count": 1,
        "modified_files": [
            "Client/trunk/ParaEngineClient/NPL/NPLHelper.cpp"
        ],
        "github_commit_url": "https://github.com/LiXizhi/NPLRuntime/commit/8a4073ca0890a53aeb571781657e8a57ee50a7ee",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "NPLHelper::SerializeToSCode"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reducing the number of string concatenations by pre-allocating memory for the result string in the `NPLHelper::SerializeToSCode` function.",
            "The optimization strategy involved reducing the number of string concatenations by pre-allocating memory and using a more efficient serialization method.",
            "The optimization strategy involved reducing the number of temporary string objects created during serialization by reusing existing buffers.",
            "The optimization strategy involved reducing unnecessary string copying and improving memory handling in the serialization function.",
            "The optimization strategy involved reducing the number of string concatenations by pre-allocating memory and using a more efficient serialization method."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "is_strategy_equivalent": [
            false,
            false,
            false,
            false,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved reducing the number of string concatenations by pre-allocating memory and using a more efficient serialization method.",
        "is_generic_optimization_final": true,
        "is_strategy_equivalent_final": false
    },
    {
        "repository_name": "xray-16",
        "hash": "40105998d414e9322540b52ed323196dc8deab78",
        "author": "Xottab-DUTY",
        "date": "2017-08-18T18:06:21+05:00",
        "message": "Optimize if checks in CWeapon::OnStateSwitch()",
        "modified_files_count": 1,
        "modified_files": [
            "src/xrGame/Weapon.cpp"
        ],
        "github_commit_url": "https://github.com/OpenXRay/xray-16/commit/40105998d414e9322540b52ed323196dc8deab78",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "CWeapon::OnStateSwitch"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved reordering conditions in if-statements to prioritize cheaper checks and reduce unnecessary evaluations.",
            "The optimization strategy involved reordering conditions in if-statements to prioritize more frequently true or less computationally expensive checks.",
            "The optimization strategy involved reordering conditions in if-statements to prioritize cheaper checks and reduce unnecessary evaluations.",
            "The optimization strategy involved reordering conditions in if-statements to prioritize cheaper evaluations and reduce unnecessary checks.",
            "The optimization strategy involved reordering conditions in if-statements to prioritize cheaper checks and reduce unnecessary evaluations."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "is_strategy_equivalent": [
            false,
            false,
            false,
            false,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved reordering conditions in if-statements to prioritize cheaper checks and reduce unnecessary evaluations.",
        "is_generic_optimization_final": true,
        "is_strategy_equivalent_final": false
    },
    {
        "repository_name": "NBlood",
        "hash": "b9e67132ccdaaec6ffcc915296f22e52f86841c9",
        "author": "Richard Gobeille",
        "date": "2022-04-12T17:45:45-07:00",
        "message": "engine: optimize 8cf7e9fbb0a49d9bdc3a3c8d80a9f63df7e4daa0\n\nAnd yes, I check the compiler output using godbolt.org :p",
        "modified_files_count": 1,
        "modified_files": [
            "source/build/src/engine.cpp"
        ],
        "github_commit_url": "https://github.com/NBlood/NBlood/commit/b9e67132ccdaaec6ffcc915296f22e52f86841c9",
        "contains_optimization_keyword": true,
        "modified_func_count": 1,
        "modified_other": false,
        "modified_func": [
            "classicDrawSprite"
        ],
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing redundant calculations by precomputing values outside of loops and minimizing conditional checks within the loop.",
            "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
            "The optimization strategy involved reducing redundant calculations and improving memory access patterns in the `classicDrawSprite` function."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "is_strategy_equivalent": [
            false,
            false,
            false,
            false,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved changing value-based loop iteration to reference-based iteration to reduce copy overhead.",
        "is_generic_optimization_final": true,
        "is_strategy_equivalent_final": false
    },
    {
        "repository_name": "operon",
        "hash": "aae163f20fc4ddc4ff1c464466039cdf4ef77df8",
        "author": "Bogdan Burlacu",
        "date": "2019-09-28T10:59:30+02:00",
        "message": "Small performance improvement in eval loop",
        "modified_files_count": 1,
        "modified_files": [
            "include/operon/core/eval.hpp"
        ],
        "github_commit_url": "https://github.com/heal-research/operon/commit/aae163f20fc4ddc4ff1c464466039cdf4ef77df8",
        "contains_optimization_keyword": true,
        "is_opt_ds_simple": "true",
        "optimization_summary": [
            "The optimization strategy involved improving the performance of the evaluation loop by reducing unnecessary computations or overhead.",
            "The optimization strategy involved reducing the overhead in the evaluation loop by minimizing unnecessary computations or memory operations.",
            "The optimization strategy involved reducing the overhead in the evaluation loop by minimizing unnecessary computations or memory accesses.",
            "The optimization strategy involved reducing the overhead in the evaluation loop by minimizing unnecessary computations or memory accesses.",
            "The optimization strategy involved reducing the overhead in the evaluation loop by minimizing unnecessary computations or memory accesses."
        ],
        "is_generic_optimization": [
            true,
            true,
            true,
            true,
            true
        ],
        "is_strategy_equivalent": [
            false,
            false,
            false,
            false,
            false
        ],
        "optimization_summary_final": "The optimization strategy involved reducing the overhead in the evaluation loop by minimizing unnecessary computations or memory accesses.",
        "is_generic_optimization_final": true,
        "is_strategy_equivalent_final": false
    }
]